/**
* DevExpress HTML/JS Reporting (viewer\accessibility\_breadcrumbsKeyboardHelper.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { AccessibilityControlElementBase, AccessibilityKeyboardHelperBase } from '@devexpress/analytics-core/analytics-internal-native';
export class BreadcrumbsKeyboardHelper extends AccessibilityKeyboardHelperBase {
    constructor(_breadcrumbsModel) {
        super();
        this._breadcrumbsModel = _breadcrumbsModel;
        this.controlElementClassName = 'breadcrumb-item';
        this.addDisposable(this._breadcrumbsModel.events.on('listItemsChanged', () => {
            this._initialize();
        }));
    }
    _initialize() {
        this._initTimeout && clearTimeout(this._initTimeout);
        this._initTimeout = setTimeout(() => {
            this.initialize();
        }, 1);
    }
    bindHandler(el) {
        super.bindHandler(el);
        this._initialize();
    }
    initialize() {
        super.initialize();
        this.setTabIndexes('-1');
        if (this.controlElements && this.controlElements.length) {
            this.controlElements[0].setTabIndex('0');
        }
    }
    createControlElement(element, index) {
        return new AccessibilityControlElementBase(element);
    }
    itemHandleEnterKey(e, index) {
        if (this.controlElements && this.controlElements[index]) {
            this.controlElements[index].element?.dispatchEvent(new Event('click'));
            return true;
        }
        return false;
    }
    itemHandleDownArrowKey(e, index) {
        this.setTabIndexes('-1');
        this.setFocusToNext(index, true);
        return true;
    }
    itemHandleLeftArrowKey(e, index) {
        return this.itemHandleUpArrowKey(e, index);
    }
    itemHandleUpArrowKey(e, index) {
        this.setTabIndexes('-1');
        this.setFocusToPrevious(index, true);
        return true;
    }
    itemHandleRightArrowKey(e, index) {
        return this.itemHandleDownArrowKey(e, index);
    }
}
