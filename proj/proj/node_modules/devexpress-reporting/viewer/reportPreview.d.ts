/**
* DevExpress HTML/JS Reporting (viewer\reportPreview.d.ts)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { DxPromise } from '@devexpress/analytics-core/analytics-internal-native';
import { ArrayPropertyChangedEventArgs, PropertyChangedEventArgs } from '@devexpress/analytics-core/analytics-serializer-native';
import { TabPanel } from '@devexpress/analytics-core/analytics-utils-native';
import { PreviewBricksKeyboardHelper } from './accessibility/_previewBricksKeyboardHelper';
import { ZoomAutoBy } from './constants';
import { IBookmarkNode } from './documentMap/_documentMapModel';
import { EditingField, IEditingFieldSerializedModel } from './editing/editingField';
import { ExportOptionsPreview } from './exportOptions/exportOptionsPreview';
import { ExportHandler } from './internal/_exportHandler';
import { PreviewPage } from './internal/_page';
import { IPreviewPageViewModel } from './internal/_page.viewModel';
import { PageLoader } from './internal/_pageLoader';
import { IDocumentBuildStatus, PreviewHandlersHelper } from './internal/_previewHandlersHelper';
import { ISignatureDisplayItem, PreviewRequestWrapper } from './internal/_previewRequestWrapper';
import { IProgressHandler } from './internal/_progressViewModel';
import { IReportParametersInfo } from './parameters/parametersPanelModelBase';
import { IReportPreviewViewModel } from './reportPreview.viewModel';
import { IExportSettings, IPreviewCustomizationHandler, IPreviewExportOptionsCustomizationArgs, IPreviewInitialize } from './utils/initializer';
import { IBrickNode, IBrickNodeNavigation, IDocumentOperationResult } from './utils/utils';
import { BreadcrumbModel } from './internal/_previewBreadcrumbs';
import { PreviewParametersPanelModel } from './parameters/previewParametersModel';
import { ReportHolder } from './reportHolder';
export declare class ReportPreview extends ReportHolder {
    private enableKeyboardSupport?;
    predefinedZoomLevels: number[];
    _stopBuildRequests: {
        [key: string]: boolean;
    };
    _closeReportRequests: {
        [key: string]: boolean;
    };
    _closeDocumentRequests: {
        [key: string]: boolean;
    };
    _cancelExportRequests: {
        [key: string]: boolean;
    };
    _breadcrumb: BreadcrumbModel;
    _startBuildOperationId: string;
    private _drillDownState;
    private _sortingState;
    private _sortingProcessor;
    private _getBuildStatusDeferreds;
    private _onGetBuildStatus;
    private _onGetDocumentDetails;
    private _initialDocumentData;
    private _timeouts;
    private _zoomLocker;
    private _doDrillDown;
    private _doSorting;
    dispose(): void;
    private _onDocumentBuildingChanged;
    private _updateCurrentPage;
    private _onOriginalZoomChanged;
    private _onSignaturesChanged;
    removePage(page: PreviewPage): void;
    removeAllPages(): void;
    removeEmptyPages(all?: boolean): void;
    private _initialize;
    createPage(pageIndex: number, processClick?: (target: IBrickNode) => void, subscribeToPageLoading?: boolean): PreviewPage;
    private _getIgnorePredicate;
    private _cleanTabInfo;
    protected _clearReportInfo(): void;
    createBrickClickProcessor(cyclePageIndex: number): (brick: IBrickNode, e?: JQueryEventObject) => void;
    constructor(handlerUri?: string, previewRequestWrapper?: PreviewRequestWrapper, previewHandlersHelper?: PreviewHandlersHelper, callbacks?: IPreviewCustomizationHandler, rtl?: boolean, enableKeyboardSupport?: boolean, exportSettings?: IExportSettings, element?: Element, breadcrumb?: BreadcrumbModel);
    delayedInit(): void;
    goToReport(customData?: string, closeCurrentReport?: boolean): PromiseLike<IPreviewInitialize>;
    drillThrough(drillThroughData: string): PromiseLike<IPreviewInitialize>;
    _sortCustomParametersLookUpValues(reportParameterInfo?: IReportParametersInfo): void;
    _resolveFirstPage(status: IDocumentBuildStatus): void;
    initialize(initializeDataPromise: PromiseLike<IPreviewInitialize>, closeDocument?: boolean): PromiseLike<IPreviewInitialize>;
    private _deserializeExportOptions;
    deactivate(): void;
    startBuild(): PromiseLike<boolean>;
    customDocumentOperation(customData?: string, hideMessageFromUser?: boolean): Promise<IDocumentOperationResult>;
    _initializeStartBuild(documentIdPromise: DxPromise<string>): boolean;
    _startBuildRequest(): PromiseLike<boolean>;
    getBuildStatus(documentId: string, isFirstRequest: boolean, shouldRequestFirstPage: boolean): PromiseLike<IDocumentBuildStatus>;
    getDoGetBuildStatusFunc(shouldRequestFirstPage?: boolean): (documentId: string) => void;
    getDocumentData(documentId: string): void;
    exportDocumentTo(format: string, inlineResult?: boolean): void;
    printDocument(pageIndex?: number): void;
    stopBuild(documentId?: string): void;
    closeDocument(documentId?: string): void;
    setPageVisibility(page: PreviewPage, visible: boolean): void;
    updatePage(page: PreviewPage, zoom?: number): void;
    goToPage(pageIndex: number, forcePageChanging?: boolean, throttle?: number): void;
    private _goToPageTimer;
    getSelectedContent: (punctuationMark?: string) => string;
    createEditingField(item: IEditingFieldSerializedModel, index: number): EditingField;
    rtlViewer: boolean;
    exportHandler: ExportHandler;
    previewHandlersHelper: PreviewHandlersHelper;
    exportOptionsModel: ExportOptionsPreview;
    errorMessage: string;
    reportOpening: boolean;
    progressBar: IProgressHandler;
    customProcessBrickClick: (pageNamber: number, brick: IBrickNode, defaultHandler: () => void) => boolean;
    documentReady: (documentId: string, reportId: string, pageCount: number) => void;
    brickClickDocumentMapHandler: (navigationBrick: IBrickNodeNavigation) => void;
    editingFieldChanged: (field: EditingField, oldVal: any, newVal: any) => void;
    customizeExportOptions: (options: IPreviewExportOptionsCustomizationArgs) => void;
    disposePagesChangedEvent: () => void;
    exportDisabled: boolean;
    private _updateExportDisabled;
    tabPanel: TabPanel;
    pages: PreviewPage[];
    pageIndex: number;
    currentPage: PreviewPage;
    showMultipagePreview: boolean;
    rtlReport: boolean;
    editingFieldsHighlighted: boolean;
    documentMap: IBookmarkNode;
    pageLoading: boolean;
    autoFitBy: ZoomAutoBy;
    originalZoom: number;
    zoom: number;
    previewSize: number;
    documentId: string;
    documentBuilding: boolean;
    _unifier: string;
    _pageWidth: number;
    _pageHeight: number;
    _pageBackColor: string;
    emptyDocumentCaption: string;
    exportOptionsTabVisible: boolean;
    previewVisible: boolean;
    _editingFields: EditingField[];
    onPropertyChanged(args: PropertyChangedEventArgs<ReportPreview>): void;
    createViewModel(): IReportPreviewViewModel;
    updateViewModel(args: PropertyChangedEventArgs<ReportPreview> | ArrayPropertyChangedEventArgs<ReportPreview>): void;
    editingFieldsProvider: () => EditingField[];
    _raiseOnSizeChanged: () => void;
    _loadVisibleImages: (timeout?: number) => void;
    _getPagesViewModels: () => IPreviewPageViewModel[];
    canSwitchToDesigner: boolean;
    allowURLsWithJSContent: boolean;
    zoomStep: number;
    private _progressFirstTime;
    private _updateEmptyDocumentCaption;
    signatures: ISignatureDisplayItem[];
    previewParametersViewModel: PreviewParametersPanelModel;
    previewBrickKeyboardHelper: PreviewBricksKeyboardHelper;
    pageLoader: PageLoader;
}
