/**
* DevExpress HTML/JS Reporting (dx-designer-bindings.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addToBindingsCache } from '@devexpress/analytics-core/analytics-widgets-internal';
addToBindingsCache('css: tabPanel.cssClasses()', function ($context, $element) { return { 'css': function () { return $context.$data.tabPanel.cssClasses(); } }; });
addToBindingsCache('text: rightPanelHeader()', function ($context, $element) { return { 'text': function () { return $context.$data.rightPanelHeader(); } }; });
addToBindingsCache('treelist: chartStructure', function ($context, $element) { return { 'treelist': function () { return $context.$data.chartStructure; } }; });
addToBindingsCache('dxList: { dataSource: actions, searchExpr: \'display\', searchEnabled: true, onItemClick: function(e) { e.itemData.clickAction(); }}', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.actions, 'searchExpr': 'display', 'searchEnabled': true, 'onItemClick': function (e) { e.itemData.clickAction(); } }; } }; });
addToBindingsCache('text: display, attr: { title: display }', function ($context, $element) { return { 'text': function () { return $context.$data.display; }, 'attr': function () { return { 'title': $context.$data.display }; } }; });
addToBindingsCache('dxLoadIndicator: { visible: isLoading() }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.isLoading() }; } }; });
addToBindingsCache('styleunit: { \'width\': Math.min(width(), $root.surfaceSize()) }, click: function(_, e) { e.stopPropagation(); }', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.min($context.$data.width(), $context.$root.surfaceSize()) }; }, 'click': function () { return function (_, e) { e.stopPropagation(); }; } }; });
addToBindingsCache('styleunit: { minWidth: Math.min(width() + 60, $root.surfaceSize()), maxWidth: width() + 60,  maxHeight: height() + 60 }', function ($context, $element) { return { 'styleunit': function () { return { 'minWidth': Math.min($context.$data.width() + 60, $context.$root.surfaceSize()), 'maxWidth': $context.$data.width() + 60, 'maxHeight': $context.$data.height() + 60 }; } }; });
addToBindingsCache('zoom: zoom, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }', function ($context, $element) { return { 'zoom': function () { return $context.$data.zoom; }, 'styleunit': function () { return { 'height': $context.$data.height() / $context.$data.zoom(), 'width': $context.$data.width() / $context.$data.zoom() }; } }; });
addToBindingsCache('attr: {src: imageSrc }, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.imageSrc }; }, 'styleunit': function () { return { 'height': $context.$data.height() / $context.$data.zoom(), 'width': $context.$data.width() / $context.$data.zoom() }; } }; });
addToBindingsCache('if: chartStructure', function ($context, $element) { return { 'if': function () { return $context.$data.chartStructure; } }; });
addToBindingsCache('dxSelectBox: { items: array, displayExpr: \'name\', value: selectedItem, disabled: disabled,  placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) , useItemTextAsTitle: true } }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.array, 'displayExpr': 'name', 'value': $context.$data.selectedItem, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'useItemTextAsTitle': true } }; } }; });
addToBindingsCache('dxPropertyGrid: { target: selectedItem, editorsInfo: { editors: editors }, level: 1 }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$data.selectedItem, 'editorsInfo': { 'editors': $context.$data.editors }, 'level': 1 }; } }; });
addToBindingsCache('dxFieldListPicker: { path: path, value: value, onValueChanged: onValueChanged, acceptCustomValue: true, itemsProvider: $root.dataBindingsProvider(), treeListController: treeListController, disabled: disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'path': $context.$data.path, 'value': $context.$data.value, 'onValueChanged': $context.$data.onValueChanged, 'acceptCustomValue': true, 'itemsProvider': $context.$root.dataBindingsProvider(), 'treeListController': $context.$data.treeListController, 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: $root.panes, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.panes, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: $root.legends, displayExpr: \'displayValue\', valueExpr: \'value\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.legends, 'displayExpr': 'displayValue', 'valueExpr': 'value', 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: $root.axisX, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.axisX, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: $root.axisY, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.axisY, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
addToBindingsCache('dxSelectBox: $data', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data; } }; });
addToBindingsCache('dxSelectBox: { dataSource: generateViewItems(), itemTemplate: \'stateItem\', valueExpr: \'value\', value: generateHeaderValue($root.undoEngine), displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.generateViewItems(), 'itemTemplate': 'stateItem', 'valueExpr': 'value', 'value': $context.$data.generateHeaderValue($context.$root.undoEngine), 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('css: className, template: {name: templateName, if: !!templateName }', function ($context, $element) { return { 'css': function () { return $context.$data.className; }, 'template': function () { return { 'name': $context.$data.templateName, 'if': !!$context.$data.templateName }; } }; });
addToBindingsCache('text: displayValue', function ($context, $element) { return { 'text': function () { return $context.$data.displayValue; } }; });
addToBindingsCache('dxPropertyGrid: { target: contentValue, level: level + 1, parentDisabled: disabled }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$data.contentValue, 'level': $context.$data.level + 1, 'parentDisabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxCollectionEditor: options', function ($context, $element) { return { 'dxCollectionEditor': function () { return $context.$data.options; } }; });
addToBindingsCache('styleunit: $parent.memberPadding', function ($context, $element) { return { 'styleunit': function () { return $context.$parent.memberPadding; } }; });
addToBindingsCache('text: $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\'), attr: { \'title\': $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\') }', function ($context, $element) { return { 'text': function () { return $context.$parent.getLocalization('Function', 'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function'); }, 'attr': function () { return { 'title': $context.$parent.getLocalization('Function', 'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function') }; } }; });
addToBindingsCache('dxSelectBox: { value: functionName, dataSource: $parent.getAvailableItems(), acceptCustomValue: true, disabled: $parent.disabled, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'value': $context.$data.functionName, 'dataSource': $context.$parent.getAvailableItems(), 'acceptCustomValue': true, 'disabled': $context.$parent.disabled, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('css: $parents[1].actionsAreAvailable ? \'dxcd-summaryfunction-arg\' : \'\'', function ($context, $element) { return { 'css': function () { return $context.$parents[1].actionsAreAvailable ? 'dxcd-summaryfunction-arg' : ''; } }; });
addToBindingsCache('styleunit: $parents[1].memberPadding', function ($context, $element) { return { 'styleunit': function () { return $context.$parents[1].memberPadding; } }; });
addToBindingsCache('text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\'), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') }', function ($context, $element) { return { 'text': function () { return $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument'); }, 'attr': function () { return { 'title': $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument') }; } }; });
addToBindingsCache('text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1) }', function ($context, $element) { return { 'text': function () { return $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument') + ($context.$index() + 1); }, 'attr': function () { return { 'title': $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument') + ($context.$index() + 1) }; } }; });
addToBindingsCache('click: function(){ $parents[1].remove($index()) }', function ($context, $element) { return { 'click': function () { return function () { $context.$parents[1].remove($context.$index()); }; } }; });
addToBindingsCache('text: $parent.getLocalization(\'Add Argument\', \'ASPxReportsStringId.ReportDesigner_AddArgument\'), attr: { \'title\': $parent.getLocalization(\'Add New Item\', \'ASPxReportsStringId.ReportDesigner_AddNewItem\') }, click: function() { $parent.add(); }', function ($context, $element) { return { 'text': function () { return $context.$parent.getLocalization('Add Argument', 'ASPxReportsStringId.ReportDesigner_AddArgument'); }, 'attr': function () { return { 'title': $context.$parent.getLocalization('Add New Item', 'ASPxReportsStringId.ReportDesigner_AddNewItem') }; }, 'click': function () { return function () { $context.$parent.add(); }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return addPoint(_model()[\'owner\'] || _model()); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$data.addPoint($context.$data._model()['owner'] || $context.$data._model()); } }; } }; });
addToBindingsCache('dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'min\', \'minSize\'), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getDependencyOptions({ 'value': $context.$data.value, 'showSpinButtons': true, 'disabled': $context.$data.disabled }, 'min', 'minSize'); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'max\', \'maxSize\'), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getDependencyOptions({ 'value': $context.$data.value, 'showSpinButtons': true, 'disabled': $context.$data.disabled }, 'max', 'maxSize'); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: $root.groups, value: value, acceptCustomValue:true, onFocusOut: function() { $root.applyGroup($data.value()); }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.groups, 'value': $context.$data.value, 'acceptCustomValue': true, 'onFocusOut': function () { $context.$root.applyGroup($context.$data.value()); }, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
addToBindingsCache('dxColorBox: getOptions({ value: generateValue($root.undoEngine), onValueChanged: onValueChanged, editAlphaChannel: true, popupPosition: { collision: \'flipfit flipfit\' }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } })', function ($context, $element) { return { 'dxColorBox': function () { return $context.$data.getOptions({ 'value': $context.$data.generateValue($context.$root.undoEngine), 'onValueChanged': $context.$data.onValueChanged, 'editAlphaChannel': true, 'popupPosition': { 'collision': 'flipfit flipfit' }, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }); } }; });
addToBindingsCache('dxLocalizedSelectBox: getOptions({ dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.generateValue($context.$root.undoEngine), 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('if: selectedItem', function ($context, $element) { return { 'if': function () { return $context.$data.selectedItem; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: model }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.model }; } }; });
addToBindingsCache('with: generateOptions($root.chartDataSources, $root.getPopupContainer($element))', function ($context, $element) { return { 'with': function () { return $context.$data.generateOptions($context.$root.chartDataSources, $context.$root.getPopupContainer($element)); } }; });
addToBindingsCache('foreach: args', function ($context, $element) { return { 'foreach': function () { return $context.$data.args; } }; });
addToBindingsCache('if: $parent.args().length === 1', function ($context, $element) { return { 'if': function () { return $context.$parent.args().length === 1; } }; });
addToBindingsCache('if: $parent.args().length > 1', function ($context, $element) { return { 'if': function () { return $context.$parent.args().length > 1; } }; });
addToBindingsCache('if: $parents[1].actionsAreAvailable()', function ($context, $element) { return { 'if': function () { return $context.$parents[1].actionsAreAvailable(); } }; });
addToBindingsCache('template: \'dxrd-svg-operations-recycle_bin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-recycle_bin'; } }; });
addToBindingsCache('template: { name: $parents[1].argumentTemplateName, data: { value: $data.value, path: $parents[1].path, treeListController: $parents[1].treeListController, disabled: $parents[1].disabled, visible: $parents[1].visible } }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parents[1].argumentTemplateName, 'data': { 'value': $context.$data.value, 'path': $context.$parents[1].path, 'treeListController': $context.$parents[1].treeListController, 'disabled': $context.$parents[1].disabled, 'visible': $context.$parents[1].visible } }; } }; });
addToBindingsCache('if: $parent.actionsAreAvailable', function ($context, $element) { return { 'if': function () { return $context.$parent.actionsAreAvailable; } }; });
addToBindingsCache('dxTemplate:{ name:\'stateItem\' }', function () { return { dxTemplate: { name: 'stateItem' } }; });
addToBindingsCache('styleunit: { \'height\': height, \'width\': $parent.width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$parent.width, 'top': $context.$data.absolutePosition.y }; }, 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('ifnot: collapsed', function ($context, $element) { return { 'ifnot': function () { return $context.$data.collapsed; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width } } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginSelectionTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$parent.width }; } } }; } }; });
addToBindingsCache('styleunit: { \'height\': height(), top: absolutePosition.y }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height(), 'top': $context.$data.absolutePosition.y }; } }; });
addToBindingsCache('styleunit: { \'top\': heightWithoutSubBands }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.heightWithoutSubBands }; } }; });
addToBindingsCache('styleunit: { \'height\': height, top: absolutePosition.y }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'top': $context.$data.absolutePosition.y }; } }; });
addToBindingsCache('css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; } }; });
addToBindingsCache('styleunit: { \'height\': height(), top: $data.absolutePosition.y() - $data.parent.heightWithoutSubBands() - $data.parent.absolutePosition.y() }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height(), 'top': $context.$data.absolutePosition.y() - $context.$data.parent.heightWithoutSubBands() - $context.$data.parent.absolutePosition.y() }; } }; });
addToBindingsCache('if: $data._context.drawWatermark()', function ($context, $element) { return { 'if': function () { return $context.$data._context.drawWatermark(); } }; });
addToBindingsCache('template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-watermark', 'data': { 'forLeftMargin': true, 'band': $context.$data, 'reportSurface': $context.$data._context } }; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$parent.width, 'snapGridSize': $context.$parent.snapGridSize }; } } }; } }; });
addToBindingsCache('if: collapsed', function ($context, $element) { return { 'if': function () { return $context.$data.collapsed; } }; });
addToBindingsCache('styleunit: { \'height\': height, \'width\': rect().width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$data.rect().width, 'top': $context.$data.absolutePosition.y }; }, 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('if: contentSelectionTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.contentSelectionTemplate; } }; });
addToBindingsCache('template: contentSelectionTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.contentSelectionTemplate; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'selectionTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return item; } } }; } }; });
addToBindingsCache('template: { name: $data.selectiontemplate }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.selectiontemplate }; } }; });
addToBindingsCache('attr: { title: name }, styleunit: { \'width\': $data.markerWidth() + 20, \'top\': absolutePosition.y, \'height\': height }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.name }; }, 'styleunit': function () { return { 'width': $context.$data.markerWidth() + 20, 'top': $context.$data.absolutePosition.y, 'height': $context.$data.height }; } }; });
addToBindingsCache('styleunit: { \'height\': rulerHeight, top: 0 }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); $root.selection.expectClick = false; }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resizeTheBand, zoom: $root.surface().zoom, minimumHeight: $data.heightFromControls && $data.heightFromControls() || 1 }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.rulerHeight, 'top': 0 }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); $context.$root.selection.initialize($context.$data); $context.$root.selection.expectClick = false; }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resizeTheBand, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.heightFromControls && $context.$data.heightFromControls() || 1 }; } }; });
addToBindingsCache('ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }', function ($context, $element) { return { 'ruler': function () { return { 'zoom': $context.$data.zoom, 'length': $context.$data.height, 'units': $context.$parent.measureUnit, 'direction': 'vertical', 'flip': $context.$root.dx['config']()['rtlEnabled'] }; } }; });
addToBindingsCache('css: markerClass, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { markerClick($root.selection); e.stopPropagation(); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(_, e) { markerClick($root.selection, false);  }} : null, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed() || !hasOwnRuler() || locked, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }', function ($context, $element) { return { 'css': function () { return $context.$data.markerClass; }, 'styleunit': function () { return { 'height': $context.$data.height(), 'width': $context.$data.markerWidth }; }, 'click': function () { return function (_, e) { $context.$data.markerClick($context.$root.selection); e.stopPropagation(); }; }, 'event': function () { return $context.$root.ContextMenusEnabled && $context.$root.ContextMenusEnabled() ? { 'contextmenu': function (_, e) { $context.$data.markerClick($context.$root.selection, false); } } : null; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); $context.$root.selection.initialize($context.$data); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': $context.$data.collapsed() || !$context.$data.hasOwnRuler() || $context.$data.locked, 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; } }; });
addToBindingsCache('text: collapsed() ? \'\' : name', function ($context, $element) { return { 'text': function () { return $context.$data.collapsed() ? '' : $context.$data.name; } }; });
addToBindingsCache('if: hasOwnRuler', function ($context, $element) { return { 'if': function () { return $context.$data.hasOwnRuler; } }; });
addToBindingsCache('if: showMarker', function ($context, $element) { return { 'if': function () { return $context.$data.showMarker; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $parent.measureUnit }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'vrulerTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'measureUnit': $context.$parent.measureUnit }; } } }; } }; });
addToBindingsCache('styleunit: { \'height\': heightWithoutSubBands, \'width\': _width(), \'top\': absolutePosition.y }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.heightWithoutSubBands, 'width': $context.$data._width(), 'top': $context.$data.absolutePosition.y }; } }; });
addToBindingsCache('styleunit: { \'left\': coordinateGridOptions.left }, coordinateGrid: coordinateGridOptions', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.coordinateGridOptions.left }; }, 'coordinateGrid': function () { return $context.$data.coordinateGridOptions; } }; });
addToBindingsCache('styleunit: { \'left\': columnSpacingLeft, \'width\': columnSpacing }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.columnSpacingLeft, 'width': $context.$data.columnSpacing }; } }; });
addToBindingsCache('styleunit: { \'left\': grayAreaLeft, \'width\': grayAreaWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.grayAreaLeft, 'width': $context.$data.grayAreaWidth }; } }; });
addToBindingsCache('visible: $data.isVisible, styleunit: { \'top\': $data.absolutePositionY, \'height\': $data.height }', function ($context, $element) { return { 'visible': function () { return $context.$data.isVisible; }, 'styleunit': function () { return { 'top': $context.$data.absolutePositionY, 'height': $context.$data.height }; } }; });
addToBindingsCache('styleunit: { \'height\': heightWithoutSubBands, \'width\': _width() }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.heightWithoutSubBands, 'width': $context.$data._width() }; } }; });
addToBindingsCache('styleunit: { \'height\': height, \'line-height\': height, \'top\': absolutePosition.y, width: rect().width }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'line-height': $context.$data.height, 'top': $context.$data.absolutePosition.y, 'width': $context.$data.rect().width }; } }; });
addToBindingsCache('text: (name() || \'\').toUpperCase(), styleunit: { \'right\': leftMargin }', function ($context, $element) { return { 'text': function () { return ($context.$data.name() || '').toUpperCase(); }, 'styleunit': function () { return { 'right': $context.$data.leftMargin }; } }; });
addToBindingsCache('text: (name() || \'\').toUpperCase(), styleunit: { \'left\': leftMargin }', function ($context, $element) { return { 'text': function () { return ($context.$data.name() || '').toUpperCase(); }, 'styleunit': function () { return { 'left': $context.$data.leftMargin }; } }; });
addToBindingsCache('template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-watermark', 'data': { 'forLeftMargin': false, 'band': $context.$data, 'reportSurface': $context.$data._context } }; } }; });
addToBindingsCache('if: $data.multiColumn() && $data.multiColumn().haveColumns()', function ($context, $element) { return { 'if': function () { return $context.$data.multiColumn() && $context.$data.multiColumn().haveColumns(); } }; });
addToBindingsCache('with: $data.multiColumn', function ($context, $element) { return { 'with': function () { return $context.$data.multiColumn; } }; });
addToBindingsCache('template: { name: $data.template }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template }; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'templateName', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return item; } } }; } }; });
addToBindingsCache('template: \'dxrd-band-collapsed\'', function ($context, $element) { return { 'template': function () { return 'dxrd-band-collapsed'; } }; });
addToBindingsCache('if: $root.drawCrossbandContent() && $data._isHeaderBandTypeOrThemSubBands()', function ($context, $element) { return { 'if': function () { return $context.$root.drawCrossbandContent() && $context.$data._isHeaderBandTypeOrThemSubBands(); } }; });
addToBindingsCache('with: $data.printAcrossBandsPlaceHolder', function ($context, $element) { return { 'with': function () { return $context.$data.printAcrossBandsPlaceHolder; } }; });
addToBindingsCache('with: $data.band', function ($context, $element) { return { 'with': function () { return $context.$data.band; } }; });
addToBindingsCache('if: $root.surface().rtl()', function ($context, $element) { return { 'if': function () { return $context.$root.surface().rtl(); } }; });
addToBindingsCache('if: !$root.surface().rtl()', function ($context, $element) { return { 'if': function () { return !$context.$root.surface().rtl(); } }; });
addToBindingsCache('foreach: holder.bands', function ($context, $element) { return { 'foreach': function () { return $context.$data.holder.bands; } }; });
addToBindingsCache('template: { name: $data[$parent.templateName], data: $parent.getData($data) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data[$context.$parent.templateName], 'data': $context.$parent.getData($context.$data) }; } }; });
addToBindingsCache('with: holder.verticalBandsContainer', function ($context, $element) { return { 'with': function () { return $context.$data.holder.verticalBandsContainer; } }; });
addToBindingsCache('if: visible && !!$data[$parent.templateName]', function ($context, $element) { return { 'if': function () { return $context.$data.visible && !!$context.$data[$context.$parent.templateName]; } }; });
addToBindingsCache('styleunit: { \'height\': height, \'width\': _width, left: absolutePosition.x }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: resizeHandles(), disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumWidth: minimumWidth(), minimumHeight: minimumHeight() },  css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$data._width, 'left': $context.$data.absolutePosition.x }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': $context.$data.resizeHandles(), 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumWidth': $context.$data.minimumWidth(), 'minimumHeight': $context.$data.minimumHeight() }; }, 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('css: { \'dxrd-vertical-band-marker-focused\': focused }', function ($context, $element) { return { 'css': function () { return { 'dxrd-vertical-band-marker-focused': $context.$data.focused }; } }; });
addToBindingsCache('styleunit: { \'width\': _width(), \'left\': absolutePosition.x() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data._width(), 'left': $context.$data.absolutePosition.x() }; } }; });
addToBindingsCache('coordinateGrid: coordinateGridOptions', function ($context, $element) { return { 'coordinateGrid': function () { return $context.$data.coordinateGridOptions; } }; });
addToBindingsCache('styleunit: { \'height\': height, left: leftOffset, \'width\': width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'left': $context.$data.leftOffset, 'width': $context.$data.width, 'top': $context.$data.topOffset }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight || 1 }; } }; });
addToBindingsCache('styleunit: { \'width\': width }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width }; } }; });
addToBindingsCache('style: { transform: \'translateX(-\' + $data.scrollOffset() + \'px)\' }', function ($context, $element) { return { 'style': function () { return { 'transform': 'translateX(-' + $context.$data.scrollOffset() + 'px)' }; } }; });
addToBindingsCache('styleunit: { width: grayAreaWidth, height: height, left: !$root.surface().rtl() ? grayAreaLeft : 0  }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.grayAreaWidth, 'height': $context.$data.height, 'left': !$context.$root.surface().rtl() ? $context.$data.grayAreaLeft : 0 }; } }; });
addToBindingsCache('styleunit: { \'height\': height, \'line-height\': height, \'top\': topOffset, width: width }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'line-height': $context.$data.height, 'top': $context.$data.topOffset, 'width': $context.$data.width }; } }; });
addToBindingsCache('text: (name || \'\').toUpperCase(), styleunit: { \'right\': $root.surface().rtl() ? leftMargin : \'auto\', \'left\': !$root.surface().rtl() ? leftMargin: \'auto\' }', function ($context, $element) { return { 'text': function () { return ($context.$data.name || '').toUpperCase(); }, 'styleunit': function () { return { 'right': $context.$root.surface().rtl() ? $context.$data.leftMargin : 'auto', 'left': !$context.$root.surface().rtl() ? $context.$data.leftMargin : 'auto' }; } }; });
addToBindingsCache('styleunit: { \'width\': width, top: topOffset, left: leftOffset, height: height() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'top': $context.$data.topOffset, 'left': $context.$data.leftOffset, 'height': $context.$data.height() }; } }; });
addToBindingsCache('dxScrollView: $data.createScrollViewOptions($data, $root.selection)', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.createScrollViewOptions($context.$data, $context.$root.selection); } }; });
addToBindingsCache('styleunit: { \'width\': markerWidth() + 20, \'top\': topOffset, \'height\': height }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.markerWidth() + 20, 'top': $context.$data.topOffset, 'height': $context.$data.height }; } }; });
addToBindingsCache('styleunit: { \'height\': height, top: $data.bandOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'top': $context.$data.bandOffset }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight || 1 }; } }; });
addToBindingsCache('css: { \'dxrd-band-marker-body\' : !$data.focused(), \'dxrd-band-marker-body-focused\' : $data.focused() }, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { $data.markerClick($root.selection); e.stopPropagation(); }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-band-marker-body': !$context.$data.focused(), 'dxrd-band-marker-body-focused': $context.$data.focused() }; }, 'styleunit': function () { return { 'height': $context.$data.height(), 'width': $context.$data.markerWidth }; }, 'click': function () { return function (_, e) { $context.$data.markerClick($context.$root.selection); e.stopPropagation(); }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': $context.$data.collapsed, 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; } }; });
addToBindingsCache('styleunit: { \'height\': height, \'width\': $parent.width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$parent.width, 'top': $context.$data.topOffset }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; } }; });
addToBindingsCache('css: { \'dxrd-band-content\': !$data.collapsed(), \'dxrd-band-collapsed\': $data.collapsed() }, styleunit: { \'height\': height, top: topOffset }', function ($context, $element) { return { 'css': function () { return { 'dxrd-band-content': !$context.$data.collapsed(), 'dxrd-band-collapsed': $context.$data.collapsed() }; }, 'styleunit': function () { return { 'height': $context.$data.height, 'top': $context.$data.topOffset }; } }; });
addToBindingsCache('foreach: verticalBands', function ($context, $element) { return { 'foreach': function () { return $context.$data.verticalBands; } }; });
addToBindingsCache('template: { name: templateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName }; } }; });
addToBindingsCache('styleunit: { width: size.width, height: size.height, top: top, left: left }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.size.width, 'height': $context.$data.size.height, 'top': $context.$data.top, 'left': $context.$data.left }; } }; });
addToBindingsCache('style: $parent.css, text: text, styleunit: { lineHeight: size.height(), width: size.width, height: size.height }', function ($context, $element) { return { 'style': function () { return $context.$parent.css; }, 'text': function () { return $context.$data.text; }, 'styleunit': function () { return { 'lineHeight': $context.$data.size.height(), 'width': $context.$data.size.width, 'height': $context.$data.size.height }; } }; });
addToBindingsCache('style: $parent.borderCss, styleunit: { width: size.width, height: size.height }', function ($context, $element) { return { 'style': function () { return $context.$parent.borderCss; }, 'styleunit': function () { return { 'width': $context.$data.size.width, 'height': $context.$data.size.height }; } }; });
addToBindingsCache('styleunit: position, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return $context.$data.adorntemplate; } }; });
addToBindingsCache('styleunit: { lineHeight: rect().height, height: rect().height, width: rect().width }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.rect().height, 'height': $context.$data.rect().height, 'width': $context.$data.rect().width }; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate, styleunit: { height: rect().height / _context.zoom(), width: rect().width / _context.zoom() }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.rect().height / $context.$data._context.zoom(), 'width': $context.$data.rect().width / $context.$data._context.zoom() }; } }; });
addToBindingsCache('dxPopup: { showTitle: true, width: \'95%\', height: \'95%\', wrapperAttr: { class: \'dxrd-chartdesigner-popup\' }, title: $root.getLocalization(\'Chart Designer\', \'ChartDesignerStringIDs.ChartDesignerWindowTitle\'), visible: visible, toolbarItems: buttons, showCloseButton: true, container: container($element), position: { of: container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': '95%', 'height': '95%', 'wrapperAttr': { 'class': 'dxrd-chartdesigner-popup' }, 'title': $context.$root.getLocalization('Chart Designer', 'ChartDesignerStringIDs.ChartDesignerWindowTitle'), 'visible': $context.$data.visible, 'toolbarItems': $context.$data.buttons, 'showCloseButton': true, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) } }; } }; });
addToBindingsCache('visible: visible, dxChartDesigner: options', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'dxChartDesigner': function () { return $context.$data.options; } }; });
addToBindingsCache('visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('dxclick: function() { $root.runChartDesigner($data); }, text: runDesignerButtonText(), attr: { title: runDesignerButtonText() }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$root.runChartDesigner($context.$data); }; }, 'text': function () { return $context.$data.runDesignerButtonText(); }, 'attr': function () { return { 'title': $context.$data.runDesignerButtonText() }; } }; });
addToBindingsCache('visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() && $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'overflow': $context.$data.isSelected() ? 'visible' : 'hidden' }; } }; });
addToBindingsCache('style: { cssFloat: isGlyphAlignmentNear() ? \'left\': \'right\', width: checkStateWidthContainer() }, styleunit: { lineHeight: contentHeightWithoutZoom }', function ($context, $element) { return { 'style': function () { return { 'cssFloat': $context.$data.isGlyphAlignmentNear() ? 'left' : 'right', 'width': $context.$data.checkStateWidthContainer() }; }, 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; } }; });
addToBindingsCache('styleunit:{ width: checkStateWidth, height: checkStateHeight }, css: checkStateClass, template: {name: $data.checkStateStyleIcon, if: !!ko.unwrap($data.checkStateStyleIcon)}', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.checkStateWidth, 'height': $context.$data.checkStateHeight }; }, 'css': function () { return $context.$data.checkStateClass; }, 'template': function () { return { 'name': $context.$data.checkStateStyleIcon, 'if': !!$context.ko.unwrap($context.$data.checkStateStyleIcon) }; } }; });
addToBindingsCache('styleunit: { width: textWidth, lineHeight: contentHeightWithoutZoom }, visible: visibleText, style: { cssFloat: isGlyphAlignmentNear() ? \'right\': \'left\' }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.textWidth, 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.visibleText; }, 'style': function () { return { 'cssFloat': $context.$data.isGlyphAlignmentNear() ? 'right' : 'left' }; } }; });
addToBindingsCache('controlDisplayName: $data, style: contentCss, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
addToBindingsCache('styleunit: { lineHeight: contentHeightWithoutZoom }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; } }; });
addToBindingsCache('controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; } }; });
addToBindingsCache('event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$root.inlineTextEdit.show($element); } }; }, 'style': function () { return { 'visibility': ($context.$data.selected() || $context.$data.focused()) ? 'inherit' : 'hidden' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.contentSizes().top + ($context.$data.isIntersect() ? 1 : 0), 'left': $context.$data.contentSizes().left + ($context.$data.isIntersect() ? 1 : 0), 'lineHeight': $context.$data.contentSizes().height, 'height': $context.$data.contentSizes().height, 'width': $context.$data.contentSizes().width }; } }; });
addToBindingsCache('if: $data.controls', function ($context, $element) { return { 'if': function () { return $context.$data.controls; } }; });
addToBindingsCache('styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.contentSizes().top, 'left': $context.$data.contentSizes().left, 'lineHeight': $context.$data.contentSizes().height, 'height': $context.$data.contentSizes().height, 'width': $context.$data.contentSizes().width }; }, 'style': function () { return $context.$data.css; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
addToBindingsCache('style: borderCss', function ($context, $element) { return { 'style': function () { return $context.$data.borderCss; } }; });
addToBindingsCache('css: {\'dxrd-uiselected\': selected }, styleunit: position', function ($context, $element) { return { 'css': function () { return { 'dxrd-uiselected': $context.$data.selected }; }, 'styleunit': function () { return $context.$data.position; } }; });
addToBindingsCache('attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'} , style: lineCss', function ($context, $element) { return { 'attr': function () { return { 'x1': '50%', 'x2': '50%', 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.lineCss; } }; });
addToBindingsCache('attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'}, style: lineWidthCss', function ($context, $element) { return { 'attr': function () { return { 'x1': '50%', 'x2': '50%', 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.lineWidthCss; } }; });
addToBindingsCache('if: isIntersect', function ($context, $element) { return { 'if': function () { return $context.$data.isIntersect; } }; });
addToBindingsCache('styleunit: position, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-uiselected\': selected }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return { 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-uiselected': $context.$data.selected }; } }; });
addToBindingsCache('trackCursor: edgeUnderCursor', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.edgeUnderCursor; } }; });
addToBindingsCache('attr: { x1: borderWidth()/2, x2: borderWidth()/2, y1: 0, y2: \'100%\' }, style: rightCss', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.borderWidth() / 2, 'x2': $context.$data.borderWidth() / 2, 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.rightCss; } }; });
addToBindingsCache('attr: { x1: 0, x2: \'100%\', y1: borderWidth()/2, y2: borderWidth()/2 }, style: topCss', function ($context, $element) { return { 'attr': function () { return { 'x1': 0, 'x2': '100%', 'y1': $context.$data.borderWidth() / 2, 'y2': $context.$data.borderWidth() / 2 }; }, 'style': function () { return $context.$data.topCss; } }; });
addToBindingsCache('attr: { x1: rect().width-borderWidth()/2, x2: rect().width-borderWidth()/2, y1: 0, y2: \'100%\' }, style: leftCss', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.rect().width - $context.$data.borderWidth() / 2, 'x2': $context.$data.rect().width - $context.$data.borderWidth() / 2, 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.leftCss; } }; });
addToBindingsCache('attr: { x1: 0, x2: \'100%\', y1: rect().height-borderWidth()/2, y2: rect().height-borderWidth()/2 }, style: bottomCss', function ($context, $element) { return { 'attr': function () { return { 'x1': 0, 'x2': '100%', 'y1': $context.$data.rect().height - $context.$data.borderWidth() / 2, 'y2': $context.$data.rect().height - $context.$data.borderWidth() / 2 }; }, 'style': function () { return $context.$data.bottomCss; } }; });
addToBindingsCache('event: { dblclick: function() { isEditable() && $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.isEditable() && $context.$root.inlineTextEdit.show($element); } }; }, 'style': function () { return { 'visibility': ($context.$data.selected() || $context.$data.focused()) ? 'inherit' : 'hidden' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('visible: showDropSurface, css: dragCss, styleunit: { left: dropRect.left, top: dropRect.top, width: dropRect.width, height: dropRect.height }', function ($context, $element) { return { 'visible': function () { return $context.$data.showDropSurface; }, 'css': function () { return $context.$data.dragCss; }, 'styleunit': function () { return { 'left': $context.$data.dropRect.left, 'top': $context.$data.dropRect.top, 'width': $context.$data.dropRect.width, 'height': $context.$data.dropRect.height }; } }; });
addToBindingsCache('visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: \'visible\'}, event: { mousedown: function(e) { cellClick(); } }', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() && $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'overflow': 'visible' }; }, 'event': function () { return { 'mousedown': function (e) { $context.$data.cellClick(); } }; } }; });
addToBindingsCache('click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectLine($context.$root.selection, e); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'width': $context.$data.position.width }; } }; });
addToBindingsCache('click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e, true); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started()', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectLine($context.$root.selection, e, true); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); } }; });
addToBindingsCache('click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e); e.stopPropagation(); },visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectLine($context.$root.selection, e); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'width': $context.$data.position.width }; } }; });
addToBindingsCache('template: \'dxrd-crosstab-cell-selection\'', function ($context, $element) { return { 'template': function () { return 'dxrd-crosstab-cell-selection'; } }; });
addToBindingsCache('if: _control._rowIndex() === 0', function ($context, $element) { return { 'if': function () { return $context.$data._control._rowIndex() === 0; } }; });
addToBindingsCache('if: _control._columnIndex() === 0', function ($context, $element) { return { 'if': function () { return $context.$data._control._columnIndex() === 0; } }; });
addToBindingsCache('if: _control.parent._rowDefinitions().length - 1 ===  _control._rowIndex()', function ($context, $element) { return { 'if': function () { return $context.$data._control.parent._rowDefinitions().length - 1 === $context.$data._control._rowIndex(); } }; });
addToBindingsCache('if: _control.parent._columnDefinitions().length - 1 ===  _control._columnIndex()', function ($context, $element) { return { 'if': function () { return $context.$data._control.parent._columnDefinitions().length - 1 === $context.$data._control._columnIndex(); } }; });
addToBindingsCache('controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline, \'dxrd-disabled\': $data.getControlModel().isBindable() && !$data.getControlModel().fieldName() }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline, 'dxrd-disabled': $context.$data.getControlModel().isBindable() && !$context.$data.getControlModel().fieldName() }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
addToBindingsCache('visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: \'visible\'}', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() && $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'overflow': 'visible' }; } }; });
addToBindingsCache('attr: { x1: linePosition().x1 / _context.zoom(), x2: linePosition().x2 / _context.zoom(), y1: linePosition().y1 / _context.zoom(), y2: linePosition().y2 / _context.zoom() }, style: contentCss', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.linePosition().x1 / $context.$data._context.zoom(), 'x2': $context.$data.linePosition().x2 / $context.$data._context.zoom(), 'y1': $context.$data.linePosition().y1 / $context.$data._context.zoom(), 'y2': $context.$data.linePosition().y2 / $context.$data._context.zoom() }; }, 'style': function () { return $context.$data.contentCss; } }; });
addToBindingsCache('visible: isSelected(), trackCursor: underCursor, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected(); }, 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-locked': $context.$data.locked }; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return { 'width': $context.$data.position.width(), 'height': 3, 'top': $context.$data.position.top() - 1, 'left': $context.$data.position.left() }; } }; });
addToBindingsCache('visible: !isSelected(), trackCursor: underCursor, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSelected(); }, 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'width': $context.$data.position.width(), 'height': 3, 'top': $context.$data.position.top() - 1, 'left': $context.$data.position.left() }; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': lineHeight, \'height\': lineHeight, \'width\': position.width() / _context.zoom() }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'lineHeight': $context.$data.lineHeight, 'height': $context.$data.lineHeight, 'width': $context.$data.position.width() / $context.$data._context.zoom() }; } }; });
addToBindingsCache('style: contentCss, styleunit: { lineHeight: contentHeightWithoutZoom, height: contentHeightWithoutZoom, width: contentWidthWithoutZoom }', function ($context, $element) { return { 'style': function () { return $context.$data.contentCss; }, 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom, 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
addToBindingsCache('css: controlTypeClass, template: controlTypeIconTemplate', function ($context, $element) { return { 'css': function () { return $context.$data.controlTypeClass; }, 'template': function () { return $context.$data.controlTypeIconTemplate; } }; });
addToBindingsCache('text: getControlModel().textContent', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().textContent; } }; });
addToBindingsCache('if: generateOwnPages()', function ($context, $element) { return { 'if': function () { return $context.$data.generateOwnPages(); } }; });
addToBindingsCache('style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'style': function () { return { 'visibility': ($context.$data.selected() || $context.$data.focused()) ? 'inherit' : 'hidden' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$data.getResizableOptions($context.$root.resizeHandler); }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: $data.showSkeleton', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.showSkeleton; } }; });
addToBindingsCache('controlDisplayName: $data, style: contentCss', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; } }; });
addToBindingsCache('visible: !$data.showSkeleton()', function ($context, $element) { return { 'visible': function () { return !$context.$data.showSkeleton(); } }; });
addToBindingsCache('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: $data.visibleImage', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.visibleImage; } }; });
addToBindingsCache('template: \'dxrd-svg-todo-pdfsignature\', css: {\'dxrd-pdf-signature-image-fill-container\' : !$data.visibleText()}', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pdfsignature'; }, 'css': function () { return { 'dxrd-pdf-signature-image-fill-container': !$context.$data.visibleText() }; } }; });
addToBindingsCache('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: !$data.visibleImage() && !$data.hideImage(), css: {\'dxrd-pdf-signature-info-certificate-name-fill-container\': !$data.visibleText() }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return !$context.$data.visibleImage() && !$context.$data.hideImage(); }, 'css': function () { return { 'dxrd-pdf-signature-info-certificate-name-fill-container': !$context.$data.visibleText() }; } }; });
addToBindingsCache('text: $data.certificateName, style: contentCss, css: { \'dxrd-control-content-multiline\' : multiline }', function ($context, $element) { return { 'text': function () { return $context.$data.certificateName; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; } }; });
addToBindingsCache('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: visibleText, css: {\'dxrd-pdf-signature-info-fill-container\': $data.hideImage }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.visibleText; }, 'css': function () { return { 'dxrd-pdf-signature-info-fill-container': $context.$data.hideImage }; } }; });
addToBindingsCache('controlDisplayName: $data, style: contentCss, css: { \'dxrd-control-content-multiline\' : multiline }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; } }; });
addToBindingsCache('visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizeOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$data.getResizeOptions($context.$root.resizeHandler); }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('styleunit: { \'width\': Math.max(positionWidthWithoutZoom(), minWidth()), \'height\': position.height() / _context.zoom() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.max($context.$data.positionWidthWithoutZoom(), $context.$data.minWidth()), 'height': $context.$data.position.height() / $context.$data._context.zoom() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('css: {\'dxrd-pivot-field-selected\': selected }, zoom: 1/_context.zoom(), styleunit: { \'width\': Math.max(position.width(), minWidth() * _context.zoom()), \'height\': position.height }', function ($context, $element) { return { 'css': function () { return { 'dxrd-pivot-field-selected': $context.$data.selected }; }, 'zoom': function () { return 1 / $context.$data._context.zoom(); }, 'styleunit': function () { return { 'width': Math.max($context.$data.position.width(), $context.$data.minWidth() * $context.$data._context.zoom()), 'height': $context.$data.position.height }; } }; });
addToBindingsCache('text: displayName, zoom: _context.zoom', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'zoom': function () { return $context.$data._context.zoom; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, addHandler: $root.dx._static.PivotGridFieldViewModel.createNew(_model), displayName: $root.getLocalization(displayName), level: level, info: info }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'addHandler': $context.$root.dx._static.PivotGridFieldViewModel.createNew($context.$data._model), 'displayName': $context.$root.getLocalization($context.$data.displayName), 'level': $context.$data.level, 'info': $context.$data.info }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function(){ return $root.dx._static.SortBySummaryInfoCondition.createNew($parents[1].value()) } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.dx._static.SortBySummaryInfoCondition.createNew($context.$parents[1].value()); } }; } }; });
addToBindingsCache('style: contentCss', function ($context, $element) { return { 'style': function () { return $context.$data.contentCss; } }; });
addToBindingsCache('css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-pivot-content-rtl': $context.$data.getControlModel().rtl() }; } }; });
addToBindingsCache('styleunit: { \'width\': positionWidthWithoutZoom  }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.positionWidthWithoutZoom }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Filter Fields Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields'); } }; });
addToBindingsCache('styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.totalsRowFieldWidth, 'height': $context.$data.rowHeaderHeight }; } }; });
addToBindingsCache('styleunit: { \'width\': positionWidthWithoutZoom }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.positionWidthWithoutZoom }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Row Fields Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Grand Total', 'PivotGridStringId.GrandTotal'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Column Fields Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields'); } }; });
addToBindingsCache('styleunit: { width: totalsDataFieldWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.totalsDataFieldWidth }; } }; });
addToBindingsCache('styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.totalsHeight }; }, 'text': function () { return $context.$root.getLocalization('Grand Total', 'PivotGridStringId.GrandTotal'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Data Items Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems'); } }; });
addToBindingsCache('if: filterFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.filterFields().length !== 0; } }; });
addToBindingsCache('foreach: filterFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.filterFields; } }; });
addToBindingsCache('if: filterFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.filterFields().length === 0; } }; });
addToBindingsCache('if: rowFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.rowFields().length !== 0; } }; });
addToBindingsCache('foreach: rowFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.rowFields; } }; });
addToBindingsCache('if: rowFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.rowFields().length === 0; } }; });
addToBindingsCache('if: columnFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.columnFields().length !== 0; } }; });
addToBindingsCache('foreach: columnFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.columnFields; } }; });
addToBindingsCache('if: columnFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.columnFields().length === 0; } }; });
addToBindingsCache('if: dataFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.dataFields().length !== 0; } }; });
addToBindingsCache('foreach: dataFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.dataFields; } }; });
addToBindingsCache('if: dataFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.dataFields().length === 0; } }; });
addToBindingsCache('zoom: _context.zoom(), css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom(); }, 'css': function () { return { 'dxrd-pivot-content-rtl': $context.$data.getControlModel().rtl() }; } }; });
addToBindingsCache('visible: !($data.selected() || $data.focused()), css: { \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() || $context.$data.focused()); }, 'css': function () { return { 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-control-rtl': $context.$data.getControlModel().rtl() }; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('visible: $data.selected() || $data.focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-control-rtl': $context.$data.getControlModel().rtl() }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('template: \'dxrd-pivotgrid-selection-context\'', function ($context, $element) { return { 'template': function () { return 'dxrd-pivotgrid-selection-context'; } }; });
addToBindingsCache('styleunit: { \'width\': Math.min($data.pageWidth() + $data.maxMarkerWidth() + $root.verticalScrollOffset() , $root.surfaceSize()) }, css: { \'dxrd-surface-rtl\': rtl() }, click: function(surface, e) { !$root.selection.disabled() && $root.selection.clickHandler($root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(surface, e) { $data.surfaceContextMenuHandler && $data.surfaceContextMenuHandler($root.selection, surface, e); }} : null, keyDownActions: $root.actionLists.getViewModel()', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.min($context.$data.pageWidth() + $context.$data.maxMarkerWidth() + $context.$root.verticalScrollOffset(), $context.$root.surfaceSize()) }; }, 'css': function () { return { 'dxrd-surface-rtl': $context.$data.rtl() }; }, 'click': function () { return function (surface, e) { !$context.$root.selection.disabled() && $context.$root.selection.clickHandler($context.$root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }; }, 'event': function () { return $context.$root.ContextMenusEnabled && $context.$root.ContextMenusEnabled() ? { 'contextmenu': function (surface, e) { $context.$data.surfaceContextMenuHandler && $context.$data.surfaceContextMenuHandler($context.$root.selection, surface, e); } } : null; }, 'keyDownActions': function () { return $context.$root.actionLists.getViewModel(); } }; });
addToBindingsCache('styleunit: $root.dx[\'config\']()[\'rtlEnabled\'] ?  { right: maxMarkerWidth() } : { left: maxMarkerWidth() }, style: { bottom: (20 - $root.horizontalScrollOffset()) + \'px\' }', function ($context, $element) { return { 'styleunit': function () { return $context.$root.dx['config']()['rtlEnabled'] ? { 'right': $context.$data.maxMarkerWidth() } : { 'left': $context.$data.maxMarkerWidth() }; }, 'style': function () { return { 'bottom': (20 - $context.$root.horizontalScrollOffset()) + 'px' }; } }; });
addToBindingsCache('styleunit: { left: leftMarginOffset,\'width\': margins.left }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.leftMarginOffset, 'width': $context.$data.margins.left }; } }; });
addToBindingsCache('ruler: { \'zoom\': zoom, \'length\': margins.left, \'units\': measureUnit, flip: ko.computed(function(){ return !rtl(); }) }', function ($context, $element) { return { 'ruler': function () { return { 'zoom': $context.$data.zoom, 'length': $context.$data.margins.left, 'units': $context.$data.measureUnit, 'flip': $context.ko.computed(function () { return !$context.$data.rtl(); }) }; } }; });
addToBindingsCache('styleunit: { left: 0, \'width\': margins.left }', function ($context, $element) { return { 'styleunit': function () { return { 'left': 0, 'width': $context.$data.margins.left }; } }; });
addToBindingsCache('styleunit: { \'width\': (pageWidth() - margins.left()), left: ghostContainerOffset }', function ($context, $element) { return { 'styleunit': function () { return { 'width': ($context.$data.pageWidth() - $context.$data.margins.left()), 'left': $context.$data.ghostContainerOffset }; } }; });
addToBindingsCache('styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins, 'left': $context.$data.leftMarginResizableOffset }; }, 'resizable': function () { return $context.$data.leftMarginResizeOptions($context.$root.undoEngine, $element); } }; });
addToBindingsCache('ruler: { \'zoom\': zoom, \'length\': function() { return pageWidth() - margins.left();}, \'units\': measureUnit, flip: rtl }', function ($context, $element) { return { 'ruler': function () { return { 'zoom': $context.$data.zoom, 'length': function () { return $context.$data.pageWidth() - $context.$data.margins.left(); }, 'units': $context.$data.measureUnit, 'flip': $context.$data.rtl }; } }; });
addToBindingsCache('styleunit: { left: rightMarginOffset, width: margins.right }, resizable: rightMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.rightMarginOffset, 'width': $context.$data.margins.right }; }, 'resizable': function () { return $context.$data.rightMarginResizeOptions($context.$root.undoEngine, $element); } }; });
addToBindingsCache('styleunit: { \'left\': pageWidth() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.pageWidth() }; } }; });
addToBindingsCache('styleunit: { minWidth: Math.min($data.pageWidth() + $root.verticalScrollOffset(), $root.surfaceSize()) - $data.maxMarkerWidth(), maxWidth: $data.pageWidth() + $root.verticalScrollOffset(), maxHeight: $data.effectiveHeight() + $root.horizontalScrollOffset() }, event: { scroll: function() { $root.onViewPortScroll($element) } }, style: { \'overflow-x\': $root.horizontalScrollOffset() ? \'auto\' : \'hidden\', \'overflow-y\': $root.verticalScrollOffset() ? \'auto\' : \'hidden\' }', function ($context, $element) { return { 'styleunit': function () { return { 'minWidth': Math.min($context.$data.pageWidth() + $context.$root.verticalScrollOffset(), $context.$root.surfaceSize()) - $context.$data.maxMarkerWidth(), 'maxWidth': $context.$data.pageWidth() + $context.$root.verticalScrollOffset(), 'maxHeight': $context.$data.effectiveHeight() + $context.$root.horizontalScrollOffset() }; }, 'event': function () { return { 'scroll': function () { $context.$root.onViewPortScroll($element); } }; }, 'style': function () { return { 'overflow-x': $context.$root.horizontalScrollOffset() ? 'auto' : 'hidden', 'overflow-y': $context.$root.verticalScrollOffset() ? 'auto' : 'hidden' }; } }; });
addToBindingsCache('styleunit: { left: leftMarginOffset, width: margins.left() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.leftMarginOffset, 'width': $context.$data.margins.left() }; } }; });
addToBindingsCache('styleunit: { left: ghostContainerOffset }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.ghostContainerOffset }; } }; });
addToBindingsCache('styleunit: { \'width\': pageWidthWithoutMargins, \'height\': minHeight }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins, 'height': $context.$data.minHeight }; } }; });
addToBindingsCache('styleunit: { left: leftMarginOffset() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.leftMarginOffset() }; } }; });
addToBindingsCache('attr: { x1: 0, x2: 0 }', function ($context, $element) { return { 'attr': function () { return { 'x1': 0, 'x2': 0 }; } }; });
addToBindingsCache('styleunit: { left: rtl() ? margins.right() : rightMarginOffset() }, visible: margins.right() > 0', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.rtl() ? $context.$data.margins.right() : $context.$data.rightMarginOffset() }; }, 'visible': function () { return $context.$data.margins.right() > 0; } }; });
addToBindingsCache('styleunit: { \'width\': pageWidthWithoutMargins }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins }; } }; });
addToBindingsCache('styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizableReportMargins: leftMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins, 'left': $context.$data.leftMarginResizableOffset }; }, 'resizableReportMargins': function () { return $context.$data.leftMarginResizeOptions($context.$root.undoEngine, $element); } }; });
addToBindingsCache('visible: isSelected() && !$root.dx._static.DragDropHandler.started(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected() && !$context.$root.dx._static.DragDropHandler.started(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('styleunit: { left: rightMarginResizableOffset }, resizableReportMargins: rightMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.rightMarginResizableOffset }; }, 'resizableReportMargins': function () { return $context.$data.rightMarginResizeOptions($context.$root.undoEngine, $element); } }; });
addToBindingsCache('styleunit: { width: maxMarkerWidth() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.maxMarkerWidth() }; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginSelectionTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$data.margins.left }; } } }; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left, snapGridSize: $data.snapGridSize  }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$data.margins.left, 'snapGridSize': $context.$data.snapGridSize }; } } }; } }; });
addToBindingsCache('foreach: crossBandControls', function ($context, $element) { return { 'foreach': function () { return $context.$data.crossBandControls; } }; });
addToBindingsCache('template: { name: template }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template }; } }; });
addToBindingsCache('template: { name: \'dxd-snap-lines-holder\', data: $root.snapHelper }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxd-snap-lines-holder', 'data': $context.$root.snapHelper }; } }; });
addToBindingsCache('ifnot: focused', function ($context, $element) { return { 'ifnot': function () { return $context.$data.focused; } }; });
addToBindingsCache('template: { name: \'dxrd-smart-tags\', data: $root.smartTagModel, if: $root.smartTagModel.visible && $root.smartTagModel.smartTags().length > 0 }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-smart-tags', 'data': $context.$root.smartTagModel, 'if': $context.$root.smartTagModel.visible && $context.$root.smartTagModel.smartTags().length > 0 }; } }; });
addToBindingsCache('if: focused', function ($context, $element) { return { 'if': function () { return $context.$data.focused; } }; });
addToBindingsCache('template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $data.measureUnit }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'vrulerTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'measureUnit': $context.$data.measureUnit }; } } }; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate, styleunit: { height: contentHeightWithoutZoom, width: contentWidthWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
addToBindingsCache('attr: { src: imageSrc }, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.imageSrc }; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
addToBindingsCache('text: error', function ($context, $element) { return { 'text': function () { return $context.$data.error; } }; });
addToBindingsCache('if: $data.imageSrc', function ($context, $element) { return { 'if': function () { return $context.$data.imageSrc; } }; });
addToBindingsCache('if: $data.isLoading', function ($context, $element) { return { 'if': function () { return $context.$data.isLoading; } }; });
addToBindingsCache('if: $data.error', function ($context, $element) { return { 'if': function () { return $context.$data.error; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': contentHeightWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; } }; });
addToBindingsCache('event: { dblclick:  function (control, e) { $root.navigateByReports.goToSubreport(control); } }, visible: isSelected, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function (control, e) { $context.$root.navigateByReports.goToSubreport(control); } }; }, 'visible': function () { return $context.$data.isSelected; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$data.getResizableOptions($context.$root.resizeHandler); }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('visible: !isSelected(), styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSelected(); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('text: displayText(), style: contentCss', function ($context, $element) { return { 'text': function () { return $context.$data.displayText(); }, 'style': function () { return $context.$data.contentCss; } }; });
addToBindingsCache('style: { visibility: !isSelected() ? \'visible\' : \'hidden\'}, styleunit: position', function ($context, $element) { return { 'style': function () { return { 'visibility': !$context.$data.isSelected() ? 'visible' : 'hidden' }; }, 'styleunit': function () { return $context.$data.position; } }; });
addToBindingsCache('styleunit: { \'top\': position.top, \'height\': position.height }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; } }; });
addToBindingsCache('trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style:{ overflow: isSelected() ? \'visible\' : \'hidden\', \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'overflow': $context.$data.isSelected() ? 'visible' : 'hidden', 'z-index': $context.$data.offsetZIndex() }; } }; });
addToBindingsCache('style: { visibility: \'inherit\' }, css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position', function ($context, $element) { return { 'style': function () { return { 'visibility': 'inherit' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; } }; });
addToBindingsCache('click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectColumn($context.$root.selection); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width }; } }; });
addToBindingsCache('trackCursor: underCursor, visible: !$root.dx._static.DragDropHandler.started()', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); } }; });
addToBindingsCache('trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style: { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
addToBindingsCache('click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); },visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectColumn($context.$root.selection); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width }; } }; });
addToBindingsCache('visible: isSelected() && !(selected() || focused()), styleunit: position', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected() && !($context.$data.selected() || $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; } }; });
addToBindingsCache('visible: isSelected(), css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'n,s\', disabled: !(selected() || focused()), zoom: $root.surface().zoom }, styleunit: { \'top\': position.top, \'height\': position.height }', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return { 'starting': $context.$root.resizeHandler.starting, 'stopped': $context.$root.resizeHandler.stopped, 'handles': 'n,s', 'disabled': !($context.$data.selected() || $context.$data.focused()), 'zoom': $context.$root.surface().zoom }; }, 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; } }; });
addToBindingsCache('visible: !$root.dx._static.DragDropHandler.started(), trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('trackCursor: underCursor, event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-table-cell-over-rowSpan\': rowSpan() === 0  }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'e,w\', disabled: !(selected() || focused()), zoom: $root.surface().zoom, snapHelper: $root.resizeHandler.snapHelper }, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, style : { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'event': function () { return { 'dblclick': function () { $context.$root.inlineTextEdit.show($element); } }; }, 'visible': function () { return $context.$data.isSelected; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-table-cell-over-rowSpan': $context.$data.rowSpan() === 0 }; }, 'resizable': function () { return { 'starting': $context.$root.resizeHandler.starting, 'stopped': $context.$root.resizeHandler.stopped, 'handles': 'e,w', 'disabled': !($context.$data.selected() || $context.$data.focused()), 'zoom': $context.$root.surface().zoom, 'snapHelper': $context.$root.resizeHandler.snapHelper }; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
addToBindingsCache('trackCursor: underCursor, visible: !isSelected(), styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'visible': function () { return !$context.$data.isSelected(); }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
addToBindingsCache('visible: !isSelected(), styleunit: { \'top\': position.top, \'height\': position.height }', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSelected(); }, 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; } }; });
addToBindingsCache('visible: !$root.dx._static.DragDropHandler.started(),trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
addToBindingsCache('visible: !$root.dx._static.DragDropHandler.started(),click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, styleunit: { \'left\': position.left, \'width\': position.width }', function ($context, $element) { return { 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectColumn($context.$root.selection); e.stopPropagation(); }; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width }; } }; });
addToBindingsCache('if: rows().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.rows().length > 0; } }; });
addToBindingsCache('foreach: rows', function ($context, $element) { return { 'foreach': function () { return $context.$data.rows; } }; });
addToBindingsCache('if: (selected() || focused())', function ($context, $element) { return { 'if': function () { return ($context.$data.selected() || $context.$data.focused()); } }; });
addToBindingsCache('foreach: rows()[0].cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.rows()[0].cells; } }; });
addToBindingsCache('foreach: rows()[rows().length-1].cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.rows()[$context.$data.rows().length - 1].cells; } }; });
addToBindingsCache('styleunit: position, trackCursor: underCursor, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return $context.$data.adorntemplate; } }; });
addToBindingsCache('style: css', function ($context, $element) { return { 'style': function () { return $context.$data.css; } }; });
addToBindingsCache('styleunit: { \'top\': position.top, \'height\': position.height}, style: css, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; }, 'style': function () { return $context.$data.css; }, 'css': function () { return $context.$data.adorntemplate; } }; });
addToBindingsCache('styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, trackCursor: underCursor, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return $context.$data.adorntemplate; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': position.lineHeight() / _context.zoom(), \'width\': contentWidthWithoutZoom, \'height\': contentHeightWithoutZoom }, style: css', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'lineHeight': $context.$data.position.lineHeight() / $context.$data._context.zoom(), 'width': $context.$data.contentWidthWithoutZoom, 'height': $context.$data.contentHeightWithoutZoom }; }, 'style': function () { return $context.$data.css; } }; });
addToBindingsCache('styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight}, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.position.height, 'top': $context.$data.position.top, 'lineHeight': $context.$data.position.lineHeight }; }, 'css': function () { return $context.$data.adorntemplate; } }; });
addToBindingsCache('styleunit: { \'height\': _context.zoom()}', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data._context.zoom() }; } }; });
addToBindingsCache('style: borderCss, styleunit: { left: position.left, width: contentSizes().width + (contentSizes().left + contentSizes().right)}', function ($context, $element) { return { 'style': function () { return $context.$data.borderCss; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.contentSizes().width + ($context.$data.contentSizes().left + $context.$data.contentSizes().right) }; } }; });
addToBindingsCache('style: borderCss, styleunit: { left: position.left}', function ($context, $element) { return { 'style': function () { return $context.$data.borderCss; }, 'styleunit': function () { return { 'left': $context.$data.position.left }; } }; });
addToBindingsCache('styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left + position.left(), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}, style: css', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.contentSizes().top, 'left': $context.$data.contentSizes().left + $context.$data.position.left(), 'lineHeight': $context.$data.contentSizes().height, 'height': $context.$data.contentSizes().height, 'width': $context.$data.contentSizes().width }; }, 'style': function () { return $context.$data.css; } }; });
addToBindingsCache('zoom: _context.zoom, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
addToBindingsCache('text: $data.getControlModel().name', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().name; } }; });
addToBindingsCache('text: leaderSymbols', function ($context, $element) { return { 'text': function () { return $context.$data.leaderSymbols; } }; });
addToBindingsCache('event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$root.inlineTextEdit.show($element); } }; }, 'visible': function () { return $context.$data.isSelected; }, 'css': function () { return { 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('styleunit: position, resizable: resizable($root.resizeHandler, $element)', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'resizable': function () { return $context.$data.resizable($context.$root.resizeHandler, $element); } }; });
addToBindingsCache('styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight }, resizable: resizable($root.resizeHandler, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.position.height, 'top': $context.$data.position.top, 'lineHeight': $context.$data.position.lineHeight }; }, 'resizable': function () { return $context.$data.resizable($context.$root.resizeHandler, $element); } }; });
addToBindingsCache('template: { name: levelTitle.template, data: levelTitle }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.levelTitle.template, 'data': $context.$data.levelTitle }; } }; });
addToBindingsCache('foreach: $data.levels()', function ($context, $element) { return { 'foreach': function () { return $context.$data.levels(); } }; });
addToBindingsCache('template: { name: levelDefault.template, data: levelDefault, isDefault: true }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.levelDefault.template, 'data': $context.$data.levelDefault, 'isDefault': true }; } }; });
addToBindingsCache('if: getControlModel().rtl()', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().rtl(); } }; });
addToBindingsCache('if: !getControlModel().rtl()', function ($context, $element) { return { 'if': function () { return !$context.$data.getControlModel().rtl(); } }; });
addToBindingsCache('if: getControlModel().isTitle', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().isTitle; } }; });
addToBindingsCache('ifnot: getControlModel().isTitle', function ($context, $element) { return { 'ifnot': function () { return $context.$data.getControlModel().isTitle; } }; });
addToBindingsCache('with: levelTitle', function ($context, $element) { return { 'with': function () { return $context.$data.levelTitle; } }; });
addToBindingsCache('with: levelDefault', function ($context, $element) { return { 'with': function () { return $context.$data.levelDefault; } }; });
addToBindingsCache('controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
addToBindingsCache('styleunit: position, trackCursor: underCursor, style: css, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return $context.$data.css; }, 'css': function () { return $context.$data.adorntemplate; } }; });
addToBindingsCache('text: displayName, style: contentCss', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'style': function () { return $context.$data.contentCss; } }; });
addToBindingsCache('zoom: _context.zoom, template: contenttemplate', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; } }; });
addToBindingsCache('with: propertyGrid', function ($context, $element) { return { 'with': function () { return $context.$data.propertyGrid; } }; });
addToBindingsCache('dxCollectionEditor: { values: ko.observable(tableInfoItems), displayName: $root.getLocalization(\'Filter Criteria\', \'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle\'), hideButtons: true }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.ko.observable($context.$data.tableInfoItems), 'displayName': $context.$root.getLocalization('Filter Criteria', 'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle'), 'hideButtons': true }; } }; });
addToBindingsCache('text: tableName', function ($context, $element) { return { 'text': function () { return $context.$data.tableName; } }; });
addToBindingsCache('dxFilterEditor: { options: filterString, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.filterString, 'fieldListProvider': $context.$root.dataBindingsProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath }; } }; });
addToBindingsCache('if: $data.filterString() !== null', function ($context, $element) { return { 'if': function () { return $context.$data.filterString() !== null; } }; });
addToBindingsCache('style: { \'height\': height() + \'px\',  \'width\': width() + \'px\' }, attr: { viewBox: \'0 0 \' + width() + \' \' + height() }', function ($context, $element) { return { 'style': function () { return { 'height': $context.$data.height() + 'px', 'width': $context.$data.width() + 'px' }; }, 'attr': function () { return { 'viewBox': '0 0 ' + $context.$data.width() + ' ' + $context.$data.height() }; } }; });
addToBindingsCache('attr: { x1: coordVal, x2: coordVal }, visible: visible', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.coordVal, 'x2': $context.$data.coordVal }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('attr: { y1: coordVal, y2: coordVal }, visible: visible', function ($context, $element) { return { 'attr': function () { return { 'y1': $context.$data.coordVal, 'y2': $context.$data.coordVal }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('foreach: verticalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.verticalGridLines; } }; });
addToBindingsCache('foreach: horizontalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.horizontalGridLines; } }; });
addToBindingsCache('foreach: majorVerticalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.majorVerticalGridLines; } }; });
addToBindingsCache('foreach: majorHorizontalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.majorHorizontalGridLines; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: $root.editableObject, displayExpr: function(value) { var showValue = value || $root.editableObject(); return $root.dx._static.getControlFullName(showValue) }, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$root.controlsStore.dataSource, 'value': $context.$root.editableObject, 'displayExpr': function (value) { var showValue = value || $context.$root.editableObject(); return $context.$root.dx._static.getControlFullName(showValue); }, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('template: \'dx-propertieseditor\'', function ($context, $element) { return { 'template': function () { return 'dx-propertieseditor'; } }; });
addToBindingsCache('visible: !inRenameMode && (isSelected || isHovered)', function ($context, $element) { return { 'visible': function () { return !$context.$data.inRenameMode && ($context.$data.isSelected || $context.$data.isHovered); } }; });
addToBindingsCache('dxTextBox: createRenameEditorOptions(), dxValidator: createValidatorOptions()', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.createRenameEditorOptions(); }, 'dxValidator': function () { return $context.$data.createValidatorOptions(); } }; });
addToBindingsCache('if: !inRenameMode', function ($context, $element) { return { 'if': function () { return !$context.$data.inRenameMode; } }; });
addToBindingsCache('if: inRenameMode', function ($context, $element) { return { 'if': function () { return $context.$data.inRenameMode; } }; });
addToBindingsCache('text: $root.getLocalization(\'Field List\', \'ReportStringId.UD_Title_FieldList\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Field List', 'ReportStringId.UD_Title_FieldList'); } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: startWizard, visible: visible(), text: addDataSourceButtonText, icon: \'dxrd-svg-operations-add\', iconClass: \'dx-image-add\' }, attr: { title: addDataSourceButtonText }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.startWizard, 'visible': $context.$data.visible(), 'text': $context.$data.addDataSourceButtonText, 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dx-image-add' }; }, 'attr': function () { return { 'title': $context.$data.addDataSourceButtonText }; } }; });
addToBindingsCache('treeListSearchPanel: {controllers:treeListOptions.treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.treeListOptions.treeListController }; } }; });
addToBindingsCache('dxContextMenu: fieldListContextMenu', function ($context, $element) { return { 'dxContextMenu': function () { return $context.$data.fieldListContextMenu; } }; });
addToBindingsCache('if: $data.allowAddDataSource', function ($context, $element) { return { 'if': function () { return $context.$data.allowAddDataSource; } }; });
addToBindingsCache('if: useContextMenu', function ($context, $element) { return { 'if': function () { return $context.$data.useContextMenu; } }; });
addToBindingsCache('searchHighlighting: { text: displayName, textToSearch: $parent.textToSearch }, attr: { \'title\': displayName }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$parent.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('dxTextBox: { value: defaultText, readOnly: !$data.isDefaultLanguage() }, css: { \'dxrd-localization-panel-textbox-full\': $data.isDefaultLanguage() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.defaultText, 'readOnly': !$context.$data.isDefaultLanguage() }; }, 'css': function () { return { 'dxrd-localization-panel-textbox-full': $context.$data.isDefaultLanguage() }; } }; });
addToBindingsCache('dxTextBox: { value: localizedText, onFocusIn: function(e, s) { $parent.onItemGotFocus(e) }, visible: !$data.isDefaultLanguage()}', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.localizedText, 'onFocusIn': function (e, s) { $context.$parent.onItemGotFocus(e); }, 'visible': !$context.$data.isDefaultLanguage() }; } }; });
addToBindingsCache('dxTextArea: { value: defaultText, readOnly: !$data.isDefaultLanguage(), autoResizeEnabled: true, minHeight: \'26px\', maxHeight: \'58px\' }, css: { \'dxrd-localization-panel-textbox-full\': $data.isDefaultLanguage() }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.defaultText, 'readOnly': !$context.$data.isDefaultLanguage(), 'autoResizeEnabled': true, 'minHeight': '26px', 'maxHeight': '58px' }; }, 'css': function () { return { 'dxrd-localization-panel-textbox-full': $context.$data.isDefaultLanguage() }; } }; });
addToBindingsCache('dxTextArea: { value: localizedText, onFocusIn: function(e, s) { $parent.onItemGotFocus(e) }, autoResizeEnabled: true, minHeight: \'26px\', maxHeight: \'58px\' }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.localizedText, 'onFocusIn': function (e, s) { $context.$parent.onItemGotFocus(e); }, 'autoResizeEnabled': true, 'minHeight': '26px', 'maxHeight': '58px' }; } }; });
addToBindingsCache('css: { \'dx-rtl\': $root.rtl, \'dx-ltr\': !$root.rtl }, styleunit: { width: width }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$root.rtl, 'dx-ltr': !$context.$root.rtl }; }, 'styleunit': function () { return { 'width': $context.$data.width }; } }; });
addToBindingsCache('resizable: getResizableOptions($element, 0, 500, $root.rtl ? \'Left\': \'Right\', \'Right\', width)', function ($context, $element) { return { 'resizable': function () { return $context.$data.getResizableOptions($element, 0, 500, $context.$root.rtl ? 'Left' : 'Right', 'Right', $context.$data.width); } }; });
addToBindingsCache('text: $root.getLocalization(\'Localization\', \'ASPxReportsStringId.ReportDesigner_LocalizationEditor_Title\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Localization', 'ASPxReportsStringId.ReportDesigner_LocalizationEditor_Title'); } }; });
addToBindingsCache('css: { \'dx-property-grid-search-uncollapsed \': isSearching() }', function ($context, $element) { return { 'css': function () { return { 'dx-property-grid-search-uncollapsed ': $context.$data.isSearching() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Language\', \'DevExpress.XtraReports.UI.XtraReport.XRLanguage\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Language', 'DevExpress.XtraReports.UI.XtraReport.XRLanguage'); } }; });
addToBindingsCache('css: { \'dx-field-value-shortened\': getRegisteredService() }', function ($context, $element) { return { 'css': function () { return { 'dx-field-value-shortened': $context.$data.getRegisteredService() }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: function() { $data.applyLocalization($data.getRegisteredService()) }, disabled: isDefaultLanguage(), icon: \'dxrd-svg-actions-apply_localization_service\', iconClass: \'apply-localization-service\' }, attr: { title: $root.getLocalization(\'Translate\', \'ASPxReportsStringId.ReportDesigner_LocalizationEditorTranslate\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.applyLocalization($context.$data.getRegisteredService()); }, 'disabled': $context.$data.isDefaultLanguage(), 'icon': 'dxrd-svg-actions-apply_localization_service', 'iconClass': 'apply-localization-service' }; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Translate', 'ASPxReportsStringId.ReportDesigner_LocalizationEditorTranslate') }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: clearLocalization, icon: \'dxrd-svg-actions-reset\', iconClass: \'reset-localization\', disabled: isDefaultLanguage() }, attr: { title: $root.getLocalization(\'Reset\', \'ASPxReportsStringId.ParametersPanel_Reset\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.clearLocalization, 'icon': 'dxrd-svg-actions-reset', 'iconClass': 'reset-localization', 'disabled': $context.$data.isDefaultLanguage() }; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Reset', 'ASPxReportsStringId.ParametersPanel_Reset') }; } }; });
addToBindingsCache('text: $data.propertiesHeaderText()', function ($context, $element) { return { 'text': function () { return $context.$data.propertiesHeaderText(); } }; });
addToBindingsCache('text: $data.defaultLanguageText()', function ($context, $element) { return { 'text': function () { return $context.$data.defaultLanguageText(); } }; });
addToBindingsCache('text: $data.currentLanguageText(), visible: !$data.isDefaultLanguage()', function ($context, $element) { return { 'text': function () { return $context.$data.currentLanguageText(); }, 'visible': function () { return !$context.$data.isDefaultLanguage(); } }; });
addToBindingsCache('dxList: { dataSource: localizationItems, selectionMode: \'single\', height: \'calc(100% - 59px)\', onSelectionChanged: onSelectionChanged, focusStateEnabled: false, activeStateEnabled: false, pageLoadMode: \'scrollBottom\', noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.localizationItems, 'selectionMode': 'single', 'height': 'calc(100% - 59px)', 'onSelectionChanged': $context.$data.onSelectionChanged, 'focusStateEnabled': false, 'activeStateEnabled': false, 'pageLoadMode': 'scrollBottom', 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('dxLoadPanel:{ visible: showLoadIndicator, shading: true, position: { of: getLoadPanelPosition($element) }, showIndicator: true, showPane: true, shadingColor: \'rgba(0,0,0,0.4)\'}', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'visible': $context.$data.showLoadIndicator, 'shading': true, 'position': { 'of': $context.$data.getLoadPanelPosition($element) }, 'showIndicator': true, 'showPane': true, 'shadingColor': 'rgba(0,0,0,0.4)' }; } }; });
addToBindingsCache('if: !ko.unwrap($data.multiline)', function ($context, $element) { return { 'if': function () { return !$context.ko.unwrap($context.$data.multiline); } }; });
addToBindingsCache('if: ko.unwrap($data.multiline)', function ($context, $element) { return { 'if': function () { return $context.ko.unwrap($context.$data.multiline); } }; });
addToBindingsCache('if: !$data.isDefaultLanguage()', function ($context, $element) { return { 'if': function () { return !$context.$data.isDefaultLanguage(); } }; });
addToBindingsCache('template: { name: \'dxrd-localization-combobox\', data: { getValues: function() { return $data.availableCultures; }, value: language, disabled: false } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-localization-combobox', 'data': { 'getValues': function () { return $context.$data.availableCultures; }, 'value': $context.$data.language, 'disabled': false } }; } }; });
addToBindingsCache('if: getRegisteredService()', function ($context, $element) { return { 'if': function () { return $context.$data.getRegisteredService(); } }; });
addToBindingsCache('lazy: { template: \'dxrd-localization-editor-item\' }', function ($context, $element) { return { 'lazy': function () { return { 'template': 'dxrd-localization-editor-item' }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Report Explorer\', \'ReportStringId.UD_Title_ReportExplorer\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Report Explorer', 'ReportStringId.UD_Title_ReportExplorer'); } }; });
addToBindingsCache('treeListSearchPanel: {controllers:treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.treeListController }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }, dxAutoScrolling: { active: $root.dx._static.DragDropHandler.started }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true }; }, 'dxAutoScrolling': function () { return { 'active': $context.$root.dx._static.DragDropHandler.started }; } }; });
addToBindingsCache('treelist: { selectedPath: itemsProvider.selectedPath, itemsProvider: itemsProvider, treeListController: treeListController }', function ($context, $element) { return { 'treelist': function () { return { 'selectedPath': $context.$data.itemsProvider.selectedPath, 'itemsProvider': $context.$data.itemsProvider, 'treeListController': $context.$data.treeListController }; } }; });
addToBindingsCache('attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }', function ($context, $element) { return { 'attr': function () { return { 'width': $context.$data.width() + 'px', 'height': $context.$data.height() + 'px' }; } }; });
addToBindingsCache('attr: { x: disable.start, width: disable.width }', function ($context, $element) { return { 'attr': function () { return { 'x': $context.$data.disable.start, 'width': $context.$data.disable.width }; } }; });
addToBindingsCache('attr: { x1: coordVal, x2: coordVal }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.coordVal, 'x2': $context.$data.coordVal }; } }; });
addToBindingsCache('text: text, attr: {x: coordVal, y: 12 }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'x': $context.$data.coordVal, 'y': 12 }; } }; });
addToBindingsCache('if: disable', function ($context, $element) { return { 'if': function () { return $context.$data.disable; } }; });
addToBindingsCache('foreach: gridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.gridLines; } }; });
addToBindingsCache('foreach: majorGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.majorGridLines; } }; });
addToBindingsCache('attr: { x1: $parent.defaultGridLinesCoordinate().x1, x2: $parent.defaultGridLinesCoordinate().x2, y1: coordVal, y2: coordVal }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$parent.defaultGridLinesCoordinate().x1, 'x2': $context.$parent.defaultGridLinesCoordinate().x2, 'y1': $context.$data.coordVal, 'y2': $context.$data.coordVal }; } }; });
addToBindingsCache('attr: {x1: $parent.defaultGridLinesCoordinate().majorX1, x2: $parent.defaultGridLinesCoordinate().majorX2, y1: coordVal, y2: coordVal }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$parent.defaultGridLinesCoordinate().majorX1, 'x2': $context.$parent.defaultGridLinesCoordinate().majorX2, 'y1': $context.$data.coordVal, 'y2': $context.$data.coordVal }; } }; });
addToBindingsCache('text: text, attr: {x: $parent.defaultGridLinesCoordinate().x, y: coordVal }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'x': $context.$parent.defaultGridLinesCoordinate().x, 'y': $context.$data.coordVal }; } }; });
addToBindingsCache('css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface.watermark.imageSource().getDataUrl(), transparency: reportSurface.watermark.imageTransparency(), viewMode: reportSurface.watermark.imageViewMode(), align: reportSurface.watermark.imageAlign(), tiling: reportSurface.watermark.imageTiling() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-flip': $context.$data.forLeftMargin }; }, 'dxWatermark': function () { return { 'band': $context.$data.band, 'reportSurface': $context.$data.reportSurface, 'forLeftMargin': $context.$data.forLeftMargin, 'image': $context.$data.reportSurface.watermark.imageSource().getDataUrl(), 'transparency': $context.$data.reportSurface.watermark.imageTransparency(), 'viewMode': $context.$data.reportSurface.watermark.imageViewMode(), 'align': $context.$data.reportSurface.watermark.imageAlign(), 'tiling': $context.$data.reportSurface.watermark.imageTiling() }; } }; });
addToBindingsCache('css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface._watermarkTextRenderingResult(), transparency: reportSurface.watermark.textTransparency(), viewMode: \'Stretch\', align: \'MiddleCenter\', tiling: false }', function ($context, $element) { return { 'css': function () { return { 'dxrd-flip': $context.$data.forLeftMargin }; }, 'dxWatermark': function () { return { 'band': $context.$data.band, 'reportSurface': $context.$data.reportSurface, 'forLeftMargin': $context.$data.forLeftMargin, 'image': $context.$data.reportSurface._watermarkTextRenderingResult(), 'transparency': $context.$data.reportSurface.watermark.textTransparency(), 'viewMode': 'Stretch', 'align': 'MiddleCenter', 'tiling': false }; } }; });
addToBindingsCache('if: $data.reportSurface.watermark && $data.reportSurface.watermark.shouldDrawWatermarkImage()', function ($context, $element) { return { 'if': function () { return $context.$data.reportSurface.watermark && $context.$data.reportSurface.watermark.shouldDrawWatermarkImage(); } }; });
addToBindingsCache('if: $data.reportSurface.watermark && $data.reportSurface.watermark.text()', function ($context, $element) { return { 'if': function () { return $context.$data.reportSurface.watermark && $context.$data.reportSurface.watermark.text(); } }; });
addToBindingsCache('css: { \'dx-rtl\' : $root.rtl, \'dx-ltr\': !$root.rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$root.rtl, 'dx-ltr': !$context.$root.rtl }; } }; });
addToBindingsCache('template: { name: \'dxrd-toolbar-tmplt\', data: getViewModel().toolbarItems }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-tmplt', 'data': $context.$data.getViewModel().toolbarItems }; } }; });
addToBindingsCache('dxAceEditor: { value: scriptsText, editorContainer: editorContainer, options: aceOptions }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.scriptsText, 'editorContainer': $context.$data.editorContainer, 'options': $context.$data.aceOptions }; } }; });
addToBindingsCache('dxSelectBox: { items: widget.dataSource, onValueChanged: widget.onValueChanged, value: widget.value, displayExpr: widget.displayExpr, placeholder: widget.placeholder, width: widget.width, dropDownOptions: { container: getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.widget.dataSource, 'onValueChanged': $context.$data.widget.onValueChanged, 'value': $context.$data.widget.value, 'displayExpr': $context.$data.widget.displayExpr, 'placeholder': $context.$data.widget.placeholder, 'width': $context.$data.widget.width, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('if: editorVisible', function ($context, $element) { return { 'if': function () { return $context.$data.editorVisible; } }; });
addToBindingsCache('visible: editorVisible, template: \'dxrd-scripts-addon\'', function ($context, $element) { return { 'visible': function () { return $context.$data.editorVisible; }, 'template': function () { return 'dxrd-scripts-addon'; } }; });
addToBindingsCache('css: {\'dx-context-menu-flex\': !($data.items) }', function ($context, $element) { return { 'css': function () { return { 'dx-context-menu-flex': !($context.$data.items) }; } }; });
addToBindingsCache('text: $data.displayText ? $data.displayText() : $data.text', function ($context, $element) { return { 'text': function () { return $context.$data.displayText ? $context.$data.displayText() : $context.$data.text; } }; });
addToBindingsCache('if: $data.imageTemplateName', function ($context, $element) { return { 'if': function () { return $context.$data.imageTemplateName; } }; });
addToBindingsCache('template: { name: $data.imageTemplateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.imageTemplateName }; } }; });
addToBindingsCache('if: $data.items', function ($context, $element) { return { 'if': function () { return $context.$data.items; } }; });
addToBindingsCache('template: { name: \'dxrd-svg-preview-next_page\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-svg-preview-next_page' }; } }; });
addToBindingsCache('style: _position, css: { \'collapsed\': collapsed }, resizable: _resizableOptions', function ($context, $element) { return { 'style': function () { return $context.$data._position; }, 'css': function () { return { 'collapsed': $context.$data.collapsed }; }, 'resizable': function () { return $context.$data._resizableOptions; } }; });
addToBindingsCache('style: { display: $data.collapsed() ? \'none\' : \'block\' }', function ($context, $element) { return { 'style': function () { return { 'display': $context.$data.collapsed() ? 'none' : 'block' }; } }; });
addToBindingsCache('text: $data.panelTitle', function ($context, $element) { return { 'text': function () { return $context.$data.panelTitle; } }; });
addToBindingsCache('click: function() { $data.toggleCollapsed() }', function ($context, $element) { return { 'click': function () { return function () { $context.$data.toggleCollapsed(); }; } }; });
addToBindingsCache('dxDataGrid: _dataGridOptions', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data._dataGridOptions; } }; });
addToBindingsCache('css: { \'dxd-state-active\': data.pressed }, dxButton: { text: data.text, onClick: data.onClick }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.data.pressed }; }, 'dxButton': function () { return { 'text': $context.$data.data.text, 'onClick': $context.$data.data.onClick }; } }; });
addToBindingsCache('template: { name: $parent.getIconTemplateName($data.value) }, attr: { title: $data.value }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parent.getIconTemplateName($context.$data.value) }; }, 'attr': function () { return { 'title': $context.$data.value }; } }; });
addToBindingsCache('text: $data.data.code, attr: { href: $data.data.link }', function ($context, $element) { return { 'text': function () { return $context.$data.data.code; }, 'attr': function () { return { 'href': $context.$data.data.link }; } }; });
addToBindingsCache('text: $data.value', function ($context, $element) { return { 'text': function () { return $context.$data.value; } }; });
addToBindingsCache('text: value, click: function() { $parent.navigateToItem($data.value); }', function ($context, $element) { return { 'text': function () { return $context.$data.value; }, 'click': function () { return function () { $context.$parent.navigateToItem($context.$data.value); }; } }; });
addToBindingsCache('text: data.description', function ($context, $element) { return { 'text': function () { return $context.$data.data.description; } }; });
addToBindingsCache('dxTagBox: { maxDisplayedTags: 0, showSelectionControls: true, valueExpr: \'value\', displayExpr: \'displayValue\', value: data.value, dataSource: data.dataSource, useItemTextAsTitle: true, dropDownOptions: { container: data.getContainer($element), minWidth: 200 }, }', function ($context, $element) { return { 'dxTagBox': function () { return { 'maxDisplayedTags': 0, 'showSelectionControls': true, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'value': $context.$data.data.value, 'dataSource': $context.$data.data.dataSource, 'useItemTextAsTitle': true, 'dropDownOptions': { 'container': $context.$data.data.getContainer($element), 'minWidth': 200 } }; } }; });
addToBindingsCache('dxButtonGroup: $data.data', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data.data; } }; });
addToBindingsCache('template: { name: $parents[1].getIconTemplateName(icon) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parents[1].getIconTemplateName($context.$data.icon) }; } }; });
addToBindingsCache('text: $data.text()', function ($context, $element) { return { 'text': function () { return $context.$data.text(); } }; });
addToBindingsCache('style: { display: !$data.collapsed() ? \'none\' : \'block\' }', function ($context, $element) { return { 'style': function () { return { 'display': !$context.$data.collapsed() ? 'none' : 'block' }; } }; });
addToBindingsCache('click: function() { $data.toggleCollapsed() }, template: { name: $data.getNotificationTemplate() }, attr: { title: $data.getTitleMessage() }', function ($context, $element) { return { 'click': function () { return function () { $context.$data.toggleCollapsed(); }; }, 'template': function () { return { 'name': $context.$data.getNotificationTemplate() }; }, 'attr': function () { return { 'title': $context.$data.getTitleMessage() }; } }; });
addToBindingsCache('if: $data.data.showLink', function ($context, $element) { return { 'if': function () { return $context.$data.data.showLink; } }; });
addToBindingsCache('if: !$data.data.showLink', function ($context, $element) { return { 'if': function () { return !$context.$data.data.showLink; } }; });
addToBindingsCache('dxTemplate: { name: \'dx-type-button\'}', function () { return { dxTemplate: { name: 'dx-type-button' } }; });
addToBindingsCache('dxTemplate: { name:\'dxrd-errorType-column\' }', function () { return { dxTemplate: { name: 'dxrd-errorType-column' } }; });
addToBindingsCache('dxTemplate: { name:\'dxrd-code-column\' }', function () { return { dxTemplate: { name: 'dxrd-code-column' } }; });
addToBindingsCache('dxTemplate:{ name:\'dxrd-source-column\' }', function () { return { dxTemplate: { name: 'dxrd-source-column' } }; });
addToBindingsCache('dxTemplate: { name: \'detail\' }', function () { return { dxTemplate: { name: 'detail' } }; });
addToBindingsCache('dxTemplate: { name: \'dxrd-error-source-filter\' }', function () { return { dxTemplate: { name: 'dxrd-error-source-filter' } }; });
addToBindingsCache('dxTemplate: { name: \'dxrd-error-type-filter\' }', function () { return { dxTemplate: { name: 'dxrd-error-type-filter' } }; });
addToBindingsCache('dxTemplate: { name: \'dxrd-error-type-filter-item\' }', function () { return { dxTemplate: { name: 'dxrd-error-type-filter-item' } }; });
addToBindingsCache('style: { width: $root.surfaceSize() ? $root.surfaceSize() + \'px\' : \'auto\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$root.surfaceSize() ? $context.$root.surfaceSize() + 'px' : 'auto' }; } }; });
addToBindingsCache('dxTabs: { dataSource: tabs, selectedIndex: selectedIndex, showNavButtons: false, scrollingEnabled: false }', function ($context, $element) { return { 'dxTabs': function () { return { 'dataSource': $context.$data.tabs, 'selectedIndex': $context.$data.selectedIndex, 'showNavButtons': false, 'scrollingEnabled': false }; } }; });
addToBindingsCache('css: icon, event: { mousedown: function(e) { $parent.removeTab(e); } }', function ($context, $element) { return { 'css': function () { return $context.$data.icon; }, 'event': function () { return { 'mousedown': function (e) { $context.$parent.removeTab(e); } }; } }; });
addToBindingsCache('text: isDirty() ? displayName() + \'*\' : displayName(), title: displayName, style: { \'font-weight\': isDirty() ? \'bold\' : \'normal\' }', function ($context, $element) { return { 'text': function () { return $context.$data.isDirty() ? $context.$data.displayName() + '*' : $context.$data.displayName(); }, 'title': function () { return $context.$data.displayName; }, 'style': function () { return { 'font-weight': $context.$data.isDirty() ? 'bold' : 'normal' }; } }; });
addToBindingsCache('ifnot: $root.isLoading() && tabs().length === 1', function ($context, $element) { return { 'ifnot': function () { return $context.$root.isLoading() && $context.$data.tabs().length === 1; } }; });
addToBindingsCache('if: allowMDI', function ($context, $element) { return { 'if': function () { return $context.$data.allowMDI; } }; });
addToBindingsCache('if: tabs().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.tabs().length > 0; } }; });
addToBindingsCache('template: \'dxrd-navigation-panel-template-content\'', function ($context, $element) { return { 'template': function () { return 'dxrd-navigation-panel-template-content'; } }; });
addToBindingsCache('ifnot: allowMDI', function ($context, $element) { return { 'ifnot': function () { return $context.$data.allowMDI; } }; });
addToBindingsCache('if: tabs().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.tabs().length > 1; } }; });
addToBindingsCache('if: icon', function ($context, $element) { return { 'if': function () { return $context.$data.icon; } }; });
addToBindingsCache('css: \'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget \' + popupCss, dxPopup: { wrapperAttr: { class: \'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget \' + popupCss }, showTitle: true, width: width, height: height, title: $root.getLocalization(title), visible: visible, toolbarItems: buttons, showCloseButton: true, container: container($element), position: { of: container($element) }}', function ($context, $element) { return { 'css': function () { return 'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget ' + $context.$data.popupCss; }, 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget ' + $context.$data.popupCss }, 'showTitle': true, 'width': $context.$data.width, 'height': $context.$data.height, 'title': $context.$root.getLocalization($context.$data.title), 'visible': $context.$data.visible, 'toolbarItems': $context.$data.buttons, 'showCloseButton': true, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) } }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: 510 }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': 510 }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: _propertiesGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data._propertiesGrid }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: _settingsGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data._settingsGrid }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: onClick, icon: icon, iconClass: iconClass }, attr: { title: title }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.onClick, 'icon': $context.$data.icon, 'iconClass': $context.$data.iconClass }; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: onClick, disabled: $parent.isDisabledButton(name), icon: icon, iconClass: iconClass }, attr: { title: title }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.onClick, 'disabled': $context.$parent.isDisabledButton($context.$data.name), 'icon': $context.$data.icon, 'iconClass': $context.$data.iconClass }; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true, direction: \'both\' }, dxAutoScrolling: { active: $root.dx._static.DragDropHandler.started }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true, 'direction': 'both' }; }, 'dxAutoScrolling': function () { return { 'active': $context.$root.dx._static.DragDropHandler.started }; } }; });
addToBindingsCache('text: contentEmptyAreaPlaceHolder', function ($context, $element) { return { 'text': function () { return $context.$data.contentEmptyAreaPlaceHolder; } }; });
addToBindingsCache('text: contentNoPropertiesPlaceHolder', function ($context, $element) { return { 'text': function () { return $context.$data.contentNoPropertiesPlaceHolder; } }; });
addToBindingsCache('text: $data.value().name', function ($context, $element) { return { 'text': function () { return $context.$data.value().name; } }; });
addToBindingsCache('dxCheckBox: getOptions({ value: value, text: displayName, disabled: disabled })', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'text': $context.$data.displayName, 'disabled': $context.$data.disabled }); } }; });
addToBindingsCache('dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) , showScroll: true, collapsed: false, alwaysShow: true }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'info': $context.$data.info, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'showScroll': true, 'collapsed': false, 'alwaysShow': true }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: getProperties({ level: level }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'level': $context.$data.level }) }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, addHandler: $root.dx._static.LookUpValue.createNew, level: level, displayName: $root.getLocalization(displayName), info: info, collapsed: false, showScroll: true, alwaysShow: true, hideButtons: !ko.unwrap($root.canAddItems) }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'addHandler': $context.$root.dx._static.LookUpValue.createNew, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'info': $context.$data.info, 'collapsed': false, 'showScroll': true, 'alwaysShow': true, 'hideButtons': !$context.ko.unwrap($context.$root.canAddItems) }; } }; });
addToBindingsCache('template: { name: \'dxrd-parameters-dialog\', data: _addParametersDialog }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-parameters-dialog', 'data': $context.$data._addParametersDialog }; } }; });
addToBindingsCache('template: { name: \'dxrd-parameters-dialog\', data: _editParametersDialog }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-parameters-dialog', 'data': $context.$data._editParametersDialog }; } }; });
addToBindingsCache('if: _selectedParameterSettings', function ($context, $element) { return { 'if': function () { return $context.$data._selectedParameterSettings; } }; });
addToBindingsCache('foreach: addButtons', function ($context, $element) { return { 'foreach': function () { return $context.$data.addButtons; } }; });
addToBindingsCache('if: visible && ko.unwrap($root.canAddItems)', function ($context, $element) { return { 'if': function () { return $context.$data.visible && $context.ko.unwrap($context.$root.canAddItems); } }; });
addToBindingsCache('foreach: moveButtons', function ($context, $element) { return { 'foreach': function () { return $context.$data.moveButtons; } }; });
addToBindingsCache('if: $data.contentVisible() && !$data.hasNoEditableProperties()', function ($context, $element) { return { 'if': function () { return $context.$data.contentVisible() && !$context.$data.hasNoEditableProperties(); } }; });
addToBindingsCache('template: \'dxrd-parameter-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-parameter-edit'; } }; });
addToBindingsCache('if: !$data.contentVisible()', function ($context, $element) { return { 'if': function () { return !$context.$data.contentVisible(); } }; });
addToBindingsCache('if: $data.hasNoEditableProperties()', function ($context, $element) { return { 'if': function () { return $context.$data.hasNoEditableProperties(); } }; });
addToBindingsCache('if: editorCreated && visible', function ($context, $element) { return { 'if': function () { return $context.$data.editorCreated && $context.$data.visible; } }; });
addToBindingsCache('if: ko.unwrap($data.value) && ko.unwrap($data.visible)', function ($context, $element) { return { 'if': function () { return $context.ko.unwrap($context.$data.value) && $context.ko.unwrap($context.$data.visible); } }; });
addToBindingsCache('dxPopup: { showTitle: true, width: width, height: height, title: $root.getLocalization(title), visible: visible, disabled: disabled, toolbarItems: buttons, showCloseButton: true, container: container($element), wrapperAttr: { class: \'dxrd-reportdialog dx-editors dx-widget\' }, position: { of: container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': $context.$data.width, 'height': $context.$data.height, 'title': $context.$root.getLocalization($context.$data.title), 'visible': $context.$data.visible, 'disabled': $context.$data.disabled, 'toolbarItems': $context.$data.buttons, 'showCloseButton': true, 'container': $context.$data.container($element), 'wrapperAttr': { 'class': 'dxrd-reportdialog dx-editors dx-widget' }, 'position': { 'of': $context.$data.container($element) } }; } }; });
addToBindingsCache('dxLoadPanel: { visible:true, container: container($element), position: { of: container($element) } }', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'visible': true, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) } }; } }; });
addToBindingsCache('dxPopup: { showTitle: true, minWidth: 530, height: popupOptions.height, width: \'auto\', title: popupOptions.title, visible: popupOptions.visible, toolbarItems: popupOptions.buttons, showCloseButton: true, wrapperAttr: { class: \'dxrd-reportdialog dxrd-reportdialog-converter dx-editors dx-widget\' }, container: popupOptions.container($element), position: { of: popupOptions.container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'minWidth': 530, 'height': $context.$data.popupOptions.height, 'width': 'auto', 'title': $context.$data.popupOptions.title, 'visible': $context.$data.popupOptions.visible, 'toolbarItems': $context.$data.popupOptions.buttons, 'showCloseButton': true, 'wrapperAttr': { 'class': 'dxrd-reportdialog dxrd-reportdialog-converter dx-editors dx-widget' }, 'container': $context.$data.popupOptions.container($element), 'position': { 'of': $context.$data.popupOptions.container($element) } }; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-warning\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-warning'; } }; });
addToBindingsCache('text: popupOptions.confirmMessage', function ($context, $element) { return { 'text': function () { return $context.$data.popupOptions.confirmMessage; } }; });
addToBindingsCache('text: popupOptions.infoMessage', function ($context, $element) { return { 'text': function () { return $context.$data.popupOptions.infoMessage; } }; });
addToBindingsCache('text: popupOptions.linkText, attr: {href: popupOptions.linkUrl, target: \'_blank\' }', function ($context, $element) { return { 'text': function () { return $context.$data.popupOptions.linkText; }, 'attr': function () { return { 'href': $context.$data.popupOptions.linkUrl, 'target': '_blank' }; } }; });
addToBindingsCache('dxTextBox: { value: $data.reportName, height: 36, placeholder: reportNamePlaceholder(), valueChangeEvent: \'keyup\' }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.reportName, 'height': 36, 'placeholder': $context.$data.reportNamePlaceholder(), 'valueChangeEvent': 'keyup' }; } }; });
addToBindingsCache('dxList: { dataSource: urls, selectedItems: [], editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportName(e.itemData.Value); }, activeStateEnabled: false, noDataText: $data.noDataText, encodeNoDataText: true, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\') }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.urls, 'selectedItems': [], 'editEnabled': true, 'height': 200, 'editConfig': { 'selectionEnabled': true }, 'selectionMode': 'single', 'onItemClick': function (e) { this.reportName(e.itemData.Value); }, 'activeStateEnabled': false, 'noDataText': $context.$data.noDataText, 'encodeNoDataText': true, 'nextButtonText': $context.$root.getLocalization('More', 'ASPxReportsStringId.List_More') }; } }; });
addToBindingsCache('event: { dblclick: function(e){ $parent.onDblClick(e.Key); } }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function (e) { $context.$parent.onDblClick(e.Key); } }; } }; });
addToBindingsCache('text: $data.Value', function ($context, $element) { return { 'text': function () { return $context.$data.Value; } }; });
addToBindingsCache('text: saveText', function ($context, $element) { return { 'text': function () { return $context.$data.saveText; } }; });
addToBindingsCache('dxTextBox: { mode: \'search\', height: 36, value: searchValue, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }', function ($context, $element) { return { 'dxTextBox': function () { return { 'mode': 'search', 'height': 36, 'value': $context.$data.searchValue, 'valueChangeEvent': 'keyup', 'placeholder': $context.$data.searchPlaceholder(), 'showClearButton': true }; } }; });
addToBindingsCache('dxList: { dataSource: urls, selectedItems: [], searchExpr: [\'Value\'], searchValue: searchValue, editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportUrl(e.itemData.Key); }, activeStateEnabled: false, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\'), noDataText: $data.noDataText, encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.urls, 'selectedItems': [], 'searchExpr': ['Value'], 'searchValue': $context.$data.searchValue, 'editEnabled': true, 'height': 200, 'editConfig': { 'selectionEnabled': true }, 'selectionMode': 'single', 'onItemClick': function (e) { this.reportUrl(e.itemData.Key); }, 'activeStateEnabled': false, 'nextButtonText': $context.$root.getLocalization('More', 'ASPxReportsStringId.List_More'), 'noDataText': $context.$data.noDataText, 'encodeNoDataText': true }; } }; });
addToBindingsCache('if: disabled', function ($context, $element) { return { 'if': function () { return $context.$data.disabled; } }; });
addToBindingsCache('if: popupOptions.infoMessage', function ($context, $element) { return { 'if': function () { return $context.$data.popupOptions.infoMessage; } }; });
addToBindingsCache('if: popupOptions.linkText', function ($context, $element) { return { 'if': function () { return $context.$data.popupOptions.linkText; } }; });
addToBindingsCache('cacheElement: { action: function(element){ $data.setMenuElement(element) } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data.setMenuElement(element); } }; } }; });
addToBindingsCache('css: { \'dxrd-menu-fullscreen-nav-collapsed\': isMenuCollapsed()}', function ($context, $element) { return { 'css': function () { return { 'dxrd-menu-fullscreen-nav-collapsed': $context.$data.isMenuCollapsed() }; } }; });
addToBindingsCache('styleunit: { width: $data.isMenuCollapsed() ? 50 : 300 }, visible: appMenuVisible', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.isMenuCollapsed() ? 50 : 300 }; }, 'visible': function () { return $context.$data.appMenuVisible; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-delete\', dxclick: function(e) { toggleAppMenu() }, dxpointerenter: function(_, e) {  e.target.classList &&  e.target.classList.add(\'dxd-state-active\') }, dxpointerleave: function(_, e) {  e.target.classList &&  e.target.classList.remove(\'dxd-state-active\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-delete'; }, 'dxclick': function () { return function (e) { $context.$data.toggleAppMenu(); }; }, 'dxpointerenter': function () { return function (_, e) { e.target.classList && e.target.classList.add('dxd-state-active'); }; }, 'dxpointerleave': function () { return function (_, e) { e.target.classList && e.target.classList.remove('dxd-state-active'); }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Menu\', \'ASPxReportsStringId.ReportDesigner_Menu_Text\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Menu', 'ASPxReportsStringId.ReportDesigner_Menu_Text'); } }; });
addToBindingsCache('template: \'dxrd-svg-menu-back\', dxclick: function(e) { isMenuCollapsed(false); }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-back'; }, 'dxclick': function () { return function (e) { $context.$data.isMenuCollapsed(false); }; } }; });
addToBindingsCache('dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled, \'dxd-state-active\': $data.selected }, visible: visible', function ($context, $element) { return { 'dxclick': function () { return function (e) { if ($context.$data.disabled && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$root.toggleAppMenu();
        $context.$data.clickAction($context.$root.model(), e);
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled, 'dxd-state-active': $context.$data.selected }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('if: !isMenuCollapsed()', function ($context, $element) { return { 'if': function () { return !$context.$data.isMenuCollapsed(); } }; });
addToBindingsCache('if: isMenuCollapsed', function ($context, $element) { return { 'if': function () { return $context.$data.isMenuCollapsed; } }; });
addToBindingsCache('if: !$root.isMenuCollapsed()', function ($context, $element) { return { 'if': function () { return !$context.$root.isMenuCollapsed(); } }; });
addToBindingsCache('css: { \'dx-field-flex\': (templateName === \'dx-boolean\'), \'dx-field-block\': (templateName !== \'dx-boolean\') }', function ($context, $element) { return { 'css': function () { return { 'dx-field-flex': ($context.$data.templateName === 'dx-boolean'), 'dx-field-block': ($context.$data.templateName !== 'dx-boolean') }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': fullDisplayName, \'for\': editorInputId }, css: { \'dx-property-required\': isRequired }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.fullDisplayName, 'for': $context.$data.editorInputId }; }, 'css': function () { return { 'dx-property-required': $context.$data.isRequired }; } }; });
addToBindingsCache('if: editorTemplate !== \'dx-commonCollection\'', function ($context, $element) { return { 'if': function () { return $context.$data.editorTemplate !== 'dx-commonCollection'; } }; });
addToBindingsCache('if: templateName !== \'dx-boolean\'', function ($context, $element) { return { 'if': function () { return $context.$data.templateName !== 'dx-boolean'; } }; });
addToBindingsCache('if: templateName === \'dx-boolean\'', function ($context, $element) { return { 'if': function () { return $context.$data.templateName === 'dx-boolean'; } }; });
addToBindingsCache('dxPopover: { width: \'216px\', height: \'auto\', position: { my: \'left center\', at: \'right center\', boundary: \'.dxrd-designer-wrapper\', of: \'.dxrd-control-smart-tag\', collision: \'flip fit\', offset: \'-10 0\' }, container: getPopupContainer($element), hideOnOutsideClick: true, showTitle: false, showCloseButton: false, shading: false, visible: popoverVisible, animation: {} }', function ($context, $element) { return { 'dxPopover': function () { return { 'width': '216px', 'height': 'auto', 'position': { 'my': 'left center', 'at': 'right center', 'boundary': '.dxrd-designer-wrapper', 'of': '.dxrd-control-smart-tag', 'collision': 'flip fit', 'offset': '-10 0' }, 'container': $context.$data.getPopupContainer($element), 'hideOnOutsideClick': true, 'showTitle': false, 'showCloseButton': false, 'shading': false, 'visible': $context.$data.popoverVisible, 'animation': {} }; } }; });
addToBindingsCache('visible: separatorVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.separatorVisible; } }; });
addToBindingsCache('foreach: getEditors(false)', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(false); } }; });
addToBindingsCache('template: \'dxrd-smart-tag-editor\'', function ($context, $element) { return { 'template': function () { return 'dxrd-smart-tag-editor'; } }; });
addToBindingsCache('foreach: getEditors(true)', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(true); } }; });
addToBindingsCache('styleunit: { left: $data.position.x, top: $data.position.y, width: width }, visible: visible', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.position.x, 'top': $context.$data.position.y, 'width': $context.$data.width }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('dxButtonWithTemplate: { icon: $data.imageTemplateName, width: $parent.width, height: $parent.width, iconClass: $data.imageTemplateName }, event: { dblclick: function(_, event){ event.stopPropagation(); } }, click: function(_, event){ $data.onClick(); event.stopPropagation(); }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'icon': $context.$data.imageTemplateName, 'width': $context.$parent.width, 'height': $context.$parent.width, 'iconClass': $context.$data.imageTemplateName }; }, 'event': function () { return { 'dblclick': function (_, event) { event.stopPropagation(); } }; }, 'click': function () { return function (_, event) { $context.$data.onClick(); event.stopPropagation(); }; } }; });
addToBindingsCache('with: $data.expressionEditor', function ($context, $element) { return { 'with': function () { return $context.$data.expressionEditor; } }; });
addToBindingsCache('template: { name: \'dxrd-expressioneditor-popup\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-expressioneditor-popup' }; } }; });
addToBindingsCache('foreach: $data.smartTags', function ($context, $element) { return { 'foreach': function () { return $context.$data.smartTags; } }; });
addToBindingsCache('text: $root.getLocalization(\'Select the report\', \'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Select the report', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport'); } }; });
addToBindingsCache('dxSelectBox: { dataSource: $data.items, itemTemplate: \'stateItem\', valueExpr: \'path\', displayExpr: \'name\', value: $data.value, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.items, 'itemTemplate': 'stateItem', 'valueExpr': 'path', 'displayExpr': 'name', 'value': $context.$data.value, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: name, styleunit: {marginLeft: 30 * level}', function ($context, $element) { return { 'text': function () { return $context.$data.name; }, 'styleunit': function () { return { 'marginLeft': 30 * $context.$data.level }; } }; });
addToBindingsCache('visible: $parent.visible', function ($context, $element) { return { 'visible': function () { return $context.$parent.visible; } }; });
addToBindingsCache('text: $data.getDisplayText()', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText(); } }; });
addToBindingsCache('visible: $data.visible, attr: { \'aria-label\': $data.displayText && $data.displayText() || $data.text, \'aria-disabled\': ko.unwrap($data.disabled) ? \'true\' : \'false\', \'aria-pressed\': $data.selected ? ($data.selected() ? \'true\' : \'false\') : null }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'attr': function () { return { 'aria-label': $context.$data.displayText && $context.$data.displayText() || $context.$data.text, 'aria-disabled': $context.ko.unwrap($context.$data.disabled) ? 'true' : 'false', 'aria-pressed': $context.$data.selected ? ($context.$data.selected() ? 'true' : 'false') : null }; } }; });
addToBindingsCache('text: $data.displayText && $data.displayText() || $data.text, attr: { title: $data.displayText && $data.displayText() || $data.text, class: \'dxd-text-primary dxd-back-highlighted \' + (ko.unwrap($data.imageClassName) || \'\') }, dxclick: function() { if((typeof $data.disabled === \'function\') && !$data.disabled() || !$data.disabled) { $data.clickAction($root.model && $root.model()); } }, css: {\'dxrd-disabled-button\': $data.disabled }', function ($context, $element) { return { 'text': function () { return $context.$data.displayText && $context.$data.displayText() || $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text, 'class': 'dxd-text-primary dxd-back-highlighted ' + ($context.ko.unwrap($context.$data.imageClassName) || '') }; }, 'dxclick': function () { return function () { if ((typeof $context.$data.disabled === 'function') && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$data.clickAction($context.$root.model && $context.$root.model());
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled }; } }; });
addToBindingsCache('dxContextMenu: $data.contextMenu', function ($context, $element) { return { 'dxContextMenu': function () { return $context.$data.contextMenu; } }; });
addToBindingsCache('if: !!$root.surface()', function ($context, $element) { return { 'if': function () { return !!$context.$root.surface(); } }; });
addToBindingsCache('template: { name: $root.dx._static.editorTemplates.getEditor("combobox").header, data: $root.surface().wrapRtlProperty($data, $root.undoEngine, $element) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$root.dx._static.editorTemplates.getEditor('combobox').header, 'data': $context.$root.surface().wrapRtlProperty($context.$data, $context.$root.undoEngine, $element) }; } }; });
addToBindingsCache('foreach: $data.items', function ($context, $element) { return { 'foreach': function () { return $context.$data.items; } }; });
addToBindingsCache('template: { name: \'dxrd-toolbar-two-way-switch-active\', if: $data.active }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-two-way-switch-active', 'if': $context.$data.active }; } }; });
addToBindingsCache('template: { name: \'dxrd-toolbar-two-way-switch-clickable\', if: !$data.active, data: $data.itemData }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-two-way-switch-clickable', 'if': !$context.$data.active, 'data': $context.$data.itemData }; } }; });
addToBindingsCache('dxclick: function() { $root.activateExpressionEditor($data); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$root.activateExpressionEditor($context.$data); }; } }; });
addToBindingsCache('cacheElement: { action: function() { $data.cacheFunction($root.activateExpressionEditor); } }, dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function () { $context.$data.cacheFunction($context.$root.activateExpressionEditor); } }; }, 'dxclick': function () { return function (_, element) { $context.$data.showPopup(_, element); }; }, 'attr': function () { return { 'title': $context.$data.hint }; }, 'css': function () { return $context.$data.editorMenuButtonCss; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dxrd-expressioneditor-complex dx-popup-general\' }, title: title, visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'645px\', maxHeight: \'95%\', width: \'862px\', maxWidth: \'95%\', minHeight: \'400px\', minWidth: \'600px\', resizeEnabled: true, onResize: function() { $data.resizeAceEditor() }, container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onShowing: function(e) { onShowing(e); }, onHiding: function(e) { onHiding(e); }, onShown: function(e) { editor().onShown(e) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'showTitle': true, 'wrapperAttr': { 'class': 'dx-expressioneditor dxrd-expressioneditor-complex dx-popup-general' }, 'title': $context.$data.title, 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'height': '645px', 'maxHeight': '95%', 'width': '862px', 'maxWidth': '95%', 'minHeight': '400px', 'minWidth': '600px', 'resizeEnabled': true, 'onResize': function () { $context.$data.resizeAceEditor(); }, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) }, 'onShowing': function (e) { $context.$data.onShowing(e); }, 'onHiding': function (e) { $context.$data.onHiding(e); }, 'onShown': function (e) { $context.$data.editor().onShown(e); } }; } }; });
addToBindingsCache('css: {\'dxd-state-selected\': isSelected }, dxclick: function() { $data.click($data.content); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; }, 'dxclick': function () { return function () { $context.$data.click($context.$data.content); }; } }; });
addToBindingsCache('text: displayName, attr: { title: displayName }, css: { \'dxrd-expressioneditor-property-binded\': isBinded() }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dxrd-expressioneditor-property-binded': $context.$data.isBinded() }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-propertyexpression\', visible: isBinded()', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-propertyexpression'; }, 'visible': function () { return $context.$data.isBinded(); } }; });
addToBindingsCache('dxExpressionEditor: { options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider(), editorTemplateName: \'dx-expressioneditor-main\', popupVisible: $data.popupVisible, wrapper: $parent }', function ($context, $element) { return { 'dxExpressionEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$root.reportItemsProvider, 'displayNameProvider': $context.$root.expressionDisplayNameProvider && $context.$root.expressionDisplayNameProvider(), 'editorTemplateName': 'dx-expressioneditor-main', 'popupVisible': $context.$data.popupVisible, 'wrapper': $context.$parent }; } }; });
addToBindingsCache('css: {\'dxd-state-selected\': $data.isSelected }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; } }; });
addToBindingsCache('text: displayName, style: { fontWeight: isBinded() ? \'Bold\' : \'\'}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'style': function () { return { 'fontWeight': $context.$data.isBinded() ? 'Bold' : '' }; } }; });
addToBindingsCache('template: \'dxrd-expressioneditor-popup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-expressioneditor-popup'; } }; });
addToBindingsCache('foreach: properties', function ($context, $element) { return { 'foreach': function () { return $context.$data.properties; } }; });
addToBindingsCache('with: $data.adapter', function ($context, $element) { return { 'with': function () { return $context.$data.adapter; } }; });
addToBindingsCache('if: $data.patchOptions($root.reportExplorerProvider, $root.editableObject && $root.editableObject())', function ($context, $element) { return { 'if': function () { return $context.$data.patchOptions($context.$root.reportExplorerProvider, $context.$root.editableObject && $context.$root.editableObject()); } }; });
addToBindingsCache('template: { name: \'dx-expressioneditor-fields\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-expressioneditor-fields', 'data': $context.$data }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { items: viewmodel.items, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$data.viewmodel.items, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $data.getValues($root.reportUrls, $root.navigateByReports.currentTab), onOpened: function() { $data.updateUrls(); }, searchEnabled: true, value: value, disabled: disabled, valueExpr: \'Key\', displayExpr: \'Value\', dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.getValues($context.$root.reportUrls, $context.$root.navigateByReports.currentTab), 'onOpened': function () { $context.$data.updateUrls(); }, 'searchEnabled': true, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'valueExpr': 'Key', 'displayExpr': 'Value', 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { items: $parent.values, value: type, valueExpr: \'value\', showClearButton: showClearButton, displayExpr: \'displayValue\', displayCustomValue: true, disabled: $parent.disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$parent.values, 'value': $context.$data.type, 'valueExpr': 'value', 'showClearButton': $context.$data.showClearButton, 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$parent.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('foreach: [\'Unchecked\',\'Checked\',\'Indeterminate\']', function ($context, $element) { return { 'foreach': function () { return ['Unchecked', 'Checked', 'Indeterminate']; } }; });
addToBindingsCache('text: $root.getLocalization(displayValue, localizationId), attr: { title: $root.getLocalization(displayValue, localizationId) }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization($context.$data.displayValue, $context.$data.localizationId); }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.displayValue, $context.$data.localizationId) }; } }; });
addToBindingsCache('dxSelectBox: getEditorOptions($root.dataSourceHelper, $root.undoEngine, $root.getPopupContainer($element))', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getEditorOptions($context.$root.dataSourceHelper, $context.$root.undoEngine, $context.$root.getPopupContainer($element)); } }; });
addToBindingsCache('dxSelectBox: { items: generateValue($root.bands), value: value, displayExpr: \'displayName\', valueExpr: \'value\', displayCustomValue: true, disabled: disabled, placeholder: $root.getLocalization(\'(none)\', \'ChartStringId.WizNoBackImage\'), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.generateValue($context.$root.bands), 'value': $context.$data.value, 'displayExpr': 'displayName', 'valueExpr': 'value', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.getLocalization('(none)', 'ChartStringId.WizNoBackImage'), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('visible: visible, styleunit: { \'marginLeft\' : padding }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'styleunit': function () { return { 'marginLeft': $context.$data.padding }; } }; });
addToBindingsCache('dxCheckBox: { value: value.selected, disabled: disabled }, dxclick: function(_, event) { event.stopPropagation(); }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.value.selected, 'disabled': $context.$data.disabled }; }, 'dxclick': function () { return function (_, event) { event.stopPropagation(); }; } }; });
addToBindingsCache('text: value.name, attr: { title: value.name }', function ($context, $element) { return { 'text': function () { return $context.$data.value.name; }, 'attr': function () { return { 'title': $context.$data.value.name }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: getProperties({ editorsInfo: { editors: $root.dx._static.formattingRuleSerializationsInfo }, level: level + 1, disabled: disabled }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'editorsInfo': { 'editors': $context.$root.dx._static.formattingRuleSerializationsInfo }, 'level': $context.$data.level + 1, 'disabled': $context.$data.disabled }) }; } }; });
addToBindingsCache('dxSelectBox: { dataSource: wrapValues($root.displayNameProvider), value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }, dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.wrapValues($context.$root.displayNameProvider), 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxSelectBox: new $root.dx._static.StylesEditorHeaderModel(value, $root.model, disabled, $root.getPopupContainer($element))', function ($context, $element) { return { 'dxSelectBox': function () { return new $context.$root.dx._static.StylesEditorHeaderModel($context.$data.value, $context.$root.model, $context.$data.disabled, $context.$root.getPopupContainer($element)); } }; });
addToBindingsCache('dxStylesEditor: { styleName: value, styles: $root.styles() }', function ($context, $element) { return { 'dxStylesEditor': function () { return { 'styleName': $context.$data.value, 'styles': $context.$root.styles() }; } }; });
addToBindingsCache('dxFieldListPicker: { acceptCustomValue: true, displayValue: $displayName, onValueChanged: onValueChanged, itemsProvider: $root.dataBindingsProvider(), treeListController: $parent.treeListController, value: $data.generateValue($root.undoEngine(), $root.dataSourceHelper(), $root.fieldListDataSources(), $root.dataBindingsProvider()), disabled: $parent.disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'acceptCustomValue': true, 'displayValue': $context.$data.$displayName, 'onValueChanged': $context.$data.onValueChanged, 'itemsProvider': $context.$root.dataBindingsProvider(), 'treeListController': $context.$parent.treeListController, 'value': $context.$data.generateValue($context.$root.undoEngine(), $context.$root.dataSourceHelper(), $context.$root.fieldListDataSources(), $context.$root.dataBindingsProvider()), 'disabled': $context.$parent.disabled }; } }; });
addToBindingsCache('dxFieldListPicker: { acceptCustomValue: true, onValueChanged: onValueChanged, displayValue: generateDisplayValue($root.reportDataSource), itemsProvider: $root.reportDataBindingsProvider, treeListController: treeListController, value: generateValue($root.undoEngine(), $root.reportParameters, $root.reportDataSource), disabled: disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'acceptCustomValue': true, 'onValueChanged': $context.$data.onValueChanged, 'displayValue': $context.$data.generateDisplayValue($context.$root.reportDataSource), 'itemsProvider': $context.$root.reportDataBindingsProvider, 'treeListController': $context.$data.treeListController, 'value': $context.$data.generateValue($context.$root.undoEngine(), $context.$root.reportParameters, $context.$root.reportDataSource), 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxFieldListPicker: { acceptCustomValue: true, onValueChanged: onValueChanged, value: itemsProvider.selectedPath, displayValue: displayExpr, itemsProvider: itemsProvider, path: itemsProvider.path, disabled: disabled, treeListController: treeListController }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'acceptCustomValue': true, 'onValueChanged': $context.$data.onValueChanged, 'value': $context.$data.itemsProvider.selectedPath, 'displayValue': $context.$data.displayExpr, 'itemsProvider': $context.$data.itemsProvider, 'path': $context.$data.itemsProvider.path, 'disabled': $context.$data.disabled, 'treeListController': $context.$data.treeListController }; } }; });
addToBindingsCache('styleunit: padding', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; } }; });
addToBindingsCache('text: $root.getLocalization(\'Format String\', \'DevExpress.XtraReports.UI.XRBinding.FormatString\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Format String', 'DevExpress.XtraReports.UI.XRBinding.FormatString'); } }; });
addToBindingsCache('dxEventDropDownEditor: { items: $root.events, value: value, editEnabled: true, disabled: disabled, secondAction: function() { $root.gotoEvent && $root.gotoEvent($data.value(), name, $parents[1]._model && $parents[1]._model()); }, placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxEventDropDownEditor': function () { return { 'items': $context.$root.events, 'value': $context.$data.value, 'editEnabled': true, 'disabled': $context.$data.disabled, 'secondAction': function () { $context.$root.gotoEvent && $context.$root.gotoEvent($context.$data.value(), $context.$data.name, $context.$parents[1]._model && $context.$parents[1]._model()); }, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('styleunit: { \'marginLeft\' : padding }', function ($context, $element) { return { 'styleunit': function () { return { 'marginLeft': $context.$data.padding }; } }; });
addToBindingsCache('text: $parents[1].info().getChildCaption(index) + \':\'', function ($context, $element) { return { 'text': function () { return $context.$parents[1].info().getChildCaption($context.$data.index) + ':'; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: value.changeSortOrder, icon: value.sortOrderClass().template, iconClass: value.sortOrderClass().class, disabled: disabled }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.value.changeSortOrder, 'icon': $context.$data.value.sortOrderClass().template, 'iconClass': $context.$data.value.sortOrderClass().class, 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxFieldListPicker: { displayValue: $displayName, value: value.fieldName, acceptCustomValue: true, path: $parents[1]._model() && $parents[1]._model().getPath(\'groupFields\') || \'\', itemsProvider: $root.dataBindingsProvider(), treeListController: new $root.dx._static.TreeListController(), disabled: disabled}', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'displayValue': $context.$data.$displayName, 'value': $context.$data.value.fieldName, 'acceptCustomValue': true, 'path': $context.$parents[1]._model() && $context.$parents[1]._model().getPath('groupFields') || '', 'itemsProvider': $context.$root.dataBindingsProvider(), 'treeListController': new $context.$root.dx._static.TreeListController(), 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, addHandler: $root.dx._static.LookUpValue.createNew, undoEngine: $root.undoEngine, level: level, displayName: $root.getLocalization(displayName), info: info }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'addHandler': $context.$root.dx._static.LookUpValue.createNew, 'undoEngine': $context.$root.undoEngine, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'info': $context.$data.info }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.calculatedFieldsSource().createCalculatedField(\'\'); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.calculatedFieldsSource().createCalculatedField(''); } }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), allowEditItems: $root.canAddItems, level: level, info: info, _accessibilityProvider: ko.unwrap(_accessibilityProvider), addHandler: function() { return $root.watermarks().createWatermark(); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'allowEditItems': $context.$root.canAddItems, 'level': $context.$data.level, 'info': $context.$data.info, '_accessibilityProvider': $context.ko.unwrap($context.$data._accessibilityProvider), 'addHandler': function () { return $context.$root.watermarks().createWatermark(); } }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return $root.parameters().add(); }, removeHandler: function(parameter) { return $root.parameters().remove(parameter); }, allowEditItems: $root.parameterEditingSettings.allowEditParameterCollection, allowReorderItems: $root.parameterEditingSettings.allowReorderParameters, undoEngine: $root.undoEngine }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.parameters().add(); }, 'removeHandler': function (parameter) { return $context.$root.parameters().remove(parameter); }, 'allowEditItems': $context.$root.parameterEditingSettings.allowEditParameterCollection, 'allowReorderItems': $context.$root.parameterEditingSettings.allowReorderParameters, 'undoEngine': $context.$root.undoEngine }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.dx._static.TableOfContentsLevel.createNew(_model()); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.dx._static.TableOfContentsLevel.createNew($context.$data._model()); } }; } }; });
addToBindingsCache('styleunit: {\'paddingLeft\': padding + $root.dx._static.propertiesGridEditorsPaddingLeft() }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingLeft': $context.$data.padding + $context.$root.dx._static.propertiesGridEditorsPaddingLeft() }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: getProperties({ level: level + 2 }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'level': $context.$data.level + 2 }) }; } }; });
addToBindingsCache('dxNumberBox: getOptions({ value:generateValue($root.undoEngine), showSpinButtons:true, disabled:disabled, min:min, max:max }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getOptions({ 'value': $context.$data.generateValue($context.$root.undoEngine), 'showSpinButtons': true, 'disabled': $context.$data.disabled, 'min': $context.$data.min, 'max': $context.$data.max }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.boldHasExpression }, click: function() { if(!$parent.disabled()) { bold(!bold()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.bold(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.boldHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.bold(!$context.$data.bold());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.italicHasExpression }, click: function() { if(!$parent.disabled()) { italic(!italic()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.italic(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.italicHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.italic(!$context.$data.italic());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.underlineHasExpression }, click: function() { if(!$parent.disabled()) { underline(!underline()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.underline(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.underlineHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.underline(!$context.$data.underline());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.strikeoutHasExpression }, click: function() { if(!$parent.disabled()) { strikeout(!strikeout()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.strikeout(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.strikeoutHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.strikeout(!$context.$data.strikeout());
    } }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: generateValue($root.undoEngine) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.generateValue($context.$root.undoEngine) }; } }; });
addToBindingsCache('dxFieldListPicker: $data', function ($context, $element) { return { 'dxFieldListPicker': function () { return $context.$data; } }; });
addToBindingsCache('styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected': $context.$data.isSelected }; } }; });
addToBindingsCache('text: text, attr: { title: data.title }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.data.title }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { id: editorInputId } }),  dxValidator: { validationRules: generateRules($root.controlsHelper.allControls) || [] }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.generateRules($context.$root.controlsHelper.allControls) || [] }; } }; });
addToBindingsCache('dxEllipsisEditor: { value: displayValue, buttonAction: function() { $parent.showPopup($root.editableObject && $root.editableObject()); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning, inputAttr: { id: editorInputId } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.displayValue, 'buttonAction': function () { $context.$parent.showPopup($context.$root.editableObject && $context.$root.editableObject()); }, 'disabled': $context.$data.disabled, 'isValid': $context.$data.modelValueValid, 'warningMessage': $context.$data.modelValueWarning, 'inputAttr': { 'id': $context.$data.editorInputId } }; } }; });
addToBindingsCache('dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider(), editorTemplateName: $data.editorTemplateName })', function ($context, $element) { return { 'dxExpressionEditor': function () { return $context.$data.getOptions({ 'options': $context.$data.value, 'fieldListProvider': $context.$root.reportItemsProvider, 'displayNameProvider': $context.$root.expressionDisplayNameProvider && $context.$root.expressionDisplayNameProvider(), 'editorTemplateName': $context.$data.editorTemplateName }); } }; });
addToBindingsCache('dxFilterEditor: { options: value, fieldListProvider: itemsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: displayNameProvider }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$data.itemsProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath, 'displayNameProvider': $context.$data.displayNameProvider }; } }; });
addToBindingsCache('dxRichTextFileEditor: { value: value, placeholderId: \'File\', disabled: disabled, accept:\'.rtf,.docx,.txt,.htm,.html\' }', function ($context, $element) { return { 'dxRichTextFileEditor': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'disabled': $context.$data.disabled, 'accept': '.rtf,.docx,.txt,.htm,.html' }; } }; });
addToBindingsCache('dxImageSourceEditor: { value: value, onValueChanged: onValueChanged, accept: \'image/*\', type: \'img\', disabled: disabled, inputAttr: { id: editorInputId}, showClearButton: true }', function ($context, $element) { return { 'dxImageSourceEditor': function () { return { 'value': $context.$data.value, 'onValueChanged': $context.$data.onValueChanged, 'accept': 'image/*', 'type': 'img', 'disabled': $context.$data.disabled, 'inputAttr': { 'id': $context.$data.editorInputId }, 'showClearButton': true }; } }; });
addToBindingsCache('dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled, accept:\'.pdf\', showClearButton: true }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'disabled': $context.$data.disabled, 'accept': '.pdf', 'showClearButton': true }; } }; });
addToBindingsCache('dxPopup: { showTitle: true, width: \'550px\', height: \'400px\', wrapperAttr: { class: \'dxrd-summaryeditor-popup\' }, title: $root.getLocalization(\'Summary Editor\'), visible: $data.popup.visible, toolbarItems: $data.popup.buttons, showCloseButton: true, container: $data.popup.container($element), position: { of: $data.popup.container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': '550px', 'height': '400px', 'wrapperAttr': { 'class': 'dxrd-summaryeditor-popup' }, 'title': $context.$root.getLocalization('Summary Editor'), 'visible': $context.$data.popup.visible, 'toolbarItems': $context.$data.popup.buttons, 'showCloseButton': true, 'container': $context.$data.popup.container($element), 'position': { 'of': $context.$data.popup.container($element) } }; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $data.getValues(), searchEnabled: true, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element)  }, inputAttr: { id: editorInputId }, popupPosition: { boundary: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.getValues(), 'searchEnabled': true, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'id': $context.$data.editorInputId }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: displayValue, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: displayValue }', function ($context, $element) { return { 'text': function () { return $context.$data.displayValue; }, 'style': function () { return { 'fontWeight': $context.$root.isLocalized($context.$data.value) ? 'bold' : 'normal' }; }, 'attr': function () { return { 'title': $context.$data.displayValue }; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $data.getValues(), searchEnabled: true, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), width:  $root.calculateWithZoomFactor(357) }, inputAttr: { id: editorInputId }, popupPosition: { boundary: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.getValues(), 'searchEnabled': true, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'width': $context.$root.calculateWithZoomFactor(357) }, 'inputAttr': { 'id': $context.$data.editorInputId }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: value === \'Default\' ? \'\' : value, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: value }', function ($context, $element) { return { 'text': function () { return $context.$data.value === 'Default' ? '' : $context.$data.value; }, 'style': function () { return { 'fontWeight': $context.$root.isLocalized($context.$data.value) ? 'bold' : 'normal' }; }, 'attr': function () { return { 'title': $context.$data.value }; } }; });
addToBindingsCache('template: $parent.templateBinding(\'dxrd-svg-checkboxglyphs-\' + $parent.value + \'_\' + $data)', function ($context, $element) { return { 'template': function () { return $context.$parent.templateBinding('dxrd-svg-checkboxglyphs-' + $context.$parent.value + '_' + $context.$data); } }; });
addToBindingsCache('displayNameExtender: { dataSource: dataSource, dataMember: displayExpr }', function ($context, $element) { return { 'displayNameExtender': function () { return { 'dataSource': $context.$data.dataSource, 'dataMember': $context.$data.displayExpr }; } }; });
addToBindingsCache('if: value()', function ($context, $element) { return { 'if': function () { return $context.$data.value(); } }; });
addToBindingsCache('with: value()', function ($context, $element) { return { 'with': function () { return $context.$data.value(); } }; });
addToBindingsCache('template: { name: \'dxrd-formatstring\', data: { value: $data.formatString, disabled: $data.disabled, actions: $parent.actions, customPatterns: $parent.customPatterns } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-formatstring', 'data': { 'value': $context.$data.formatString, 'disabled': $context.$data.disabled, 'actions': $context.$parent.actions, 'customPatterns': $context.$parent.customPatterns } }; } }; });
addToBindingsCache('displayNameExtender: { path: function() { return $parents[1]._model() && $parents[1]._model().getPath(\'groupFields\') || \'\' }, dataMember: value.fieldName }', function ($context, $element) { return { 'displayNameExtender': function () { return { 'path': function () { return $context.$parents[1]._model() && $context.$parents[1]._model().getPath('groupFields') || ''; }, 'dataMember': $context.$data.value.fieldName }; } }; });
addToBindingsCache('template: { name: \'dxrd-reportexpression\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-reportexpression' }; } }; });
addToBindingsCache('template: { name: \'dxrd-expressioneditor-popup\', data: $data.wrapper }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-expressioneditor-popup', 'data': $context.$data.wrapper }; } }; });
addToBindingsCache('with: $data.wrapModel($root.fieldListProvider)', function ($context, $element) { return { 'with': function () { return $context.$data.wrapModel($context.$root.fieldListProvider); } }; });
addToBindingsCache('template: \'dx-emptyHeader\'', function ($context, $element) { return { 'template': function () { return 'dx-emptyHeader'; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: $data.popup.grid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.popup.grid }; } }; });
addToBindingsCache('dxList: getListOptions()', function ($context, $element) { return { 'dxList': function () { return $context.$data.getListOptions(); } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': '100%' }; } }; });
addToBindingsCache('template: _icon', function ($context, $element) { return { 'template': function () { return $context.$data._icon; } }; });
addToBindingsCache('text: _title', function ($context, $element) { return { 'text': function () { return $context.$data._title; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': 'auto' }; } }; });
addToBindingsCache('treelist: _signleFieldMemberFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._signleFieldMemberFieldListModel; } }; });
addToBindingsCache('trackCursor: underCursor, css: {\'dxrd-wizard-crosstab-droppable-page\': isDroppable}', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return { 'dxrd-wizard-crosstab-droppable-page': $context.$data.isDroppable }; } }; });
addToBindingsCache('text: _fieldName', function ($context, $element) { return { 'text': function () { return $context.$data._fieldName; } }; });
addToBindingsCache('text: _valueName', function ($context, $element) { return { 'text': function () { return $context.$data._valueName; } }; });
addToBindingsCache('foreach: fieldInfos', function ($context, $element) { return { 'foreach': function () { return $context.$data.fieldInfos; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $parent._crossTabFields, displayExpr: \'displayName\', value: field, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$parent._crossTabFields, 'displayExpr': 'displayName', 'value': $context.$data.field, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('dxSelectBox: value', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.value; } }; });
addToBindingsCache('dxButton: { icon: \'close\', onClick: function () { return $parent._removeInfo($data);  }}', function ($context, $element) { return { 'dxButton': function () { return { 'icon': 'close', 'onClick': function () { return $context.$parent._removeInfo($context.$data); } }; } }; });
addToBindingsCache('click: function () { $parent._applyScheme($data); }, style: { backgroundColor: color }', function ($context, $element) { return { 'click': function () { return function () { $context.$parent._applyScheme($context.$data); }; }, 'style': function () { return { 'backgroundColor': $context.$data.color }; } }; });
addToBindingsCache('visible: $data.selected()', function ($context, $element) { return { 'visible': function () { return $context.$data.selected(); } }; });
addToBindingsCache('css: { \'dxrd-page-color-scheme-tile-content-edit-active\': $data.popoverVisible() }, click: function() { $data.popoverVisible(!$data.popoverVisible()) }', function ($context, $element) { return { 'css': function () { return { 'dxrd-page-color-scheme-tile-content-edit-active': $context.$data.popoverVisible() }; }, 'click': function () { return function () { $context.$data.popoverVisible(!$context.$data.popoverVisible()); }; } }; });
addToBindingsCache('template:\'dxrd-svg-color_gear\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-color_gear'; } }; });
addToBindingsCache('dxPopover: { visible: $data.popoverVisible, width: \'auto\', height: \'auto\', wrapperAttr: { class: \'dxrd-page-color-scheme-colorpicker\' }, container: $root.getPopupContainer($element), target: \'.dxrd-page-color-scheme-tile-content-edit-icon\', position: { my: \'left center\', at: \'right center\', collision: \'fit\', of: \'.dxrd-page-color-scheme-tile-content-edit\', boundary: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopover': function () { return { 'visible': $context.$data.popoverVisible, 'width': 'auto', 'height': 'auto', 'wrapperAttr': { 'class': 'dxrd-page-color-scheme-colorpicker' }, 'container': $context.$root.getPopupContainer($element), 'target': '.dxrd-page-color-scheme-tile-content-edit-icon', 'position': { 'my': 'left center', 'at': 'right center', 'collision': 'fit', 'of': '.dxrd-page-color-scheme-tile-content-edit', 'boundary': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxColorView: { value: editorColor, editAlphaChannel: true }', function ($context, $element) { return { 'dxColorView': function () { return { 'value': $context.$data.editorColor, 'editAlphaChannel': true }; } }; });
addToBindingsCache('dxButton: { text: \'Cancel\', onClick: function() { $data.resetColor() }}', function ($context, $element) { return { 'dxButton': function () { return { 'text': 'Cancel', 'onClick': function () { $context.$data.resetColor(); } }; } }; });
addToBindingsCache('dxButton: { text: \'Ok\', onClick: function() { $data.applyColor() }}', function ($context, $element) { return { 'dxButton': function () { return { 'text': 'Ok', 'onClick': function () { $context.$data.applyColor(); } }; } }; });
addToBindingsCache('foreach: _lookupData.scheme', function ($context, $element) { return { 'foreach': function () { return $context.$data._lookupData.scheme; } }; });
addToBindingsCache('ifnot: $data.name === \'Custom\'', function ($context, $element) { return { 'ifnot': function () { return $context.$data.name === 'Custom'; } }; });
addToBindingsCache('if: $data.name === \'Custom\'', function ($context, $element) { return { 'if': function () { return $context.$data.name === 'Custom'; } }; });
addToBindingsCache('template: \'dxrd-page-colorScheme-content\'', function ($context, $element) { return { 'template': function () { return 'dxrd-page-colorScheme-content'; } }; });
addToBindingsCache('text: availableFields.caption', function ($context, $element) { return { 'text': function () { return $context.$data.availableFields.caption; } }; });
addToBindingsCache('dxList: { items: availableFields.items, selectedItems: availableFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: availableFieldClick }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.availableFields.items, 'selectedItems': $context.$data.availableFields.activeItemArray, 'height': 257, 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data.availableFieldClick }; } }; });
addToBindingsCache('event: { dblclick: $parent.availableFieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.availableFieldDblClick }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: select, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.select, 'disabled': !$context.$data.isSelectEnable(), 'icon': 'dxrd-svg-operations-moveright', 'iconClass': 'dxrd-image-moveright' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: selectAll, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright_all\', iconClass: \'dxrd-image-moveright-all\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.selectAll, 'disabled': !$context.$data.isSelectEnable(), 'icon': 'dxrd-svg-operations-moveright_all', 'iconClass': 'dxrd-image-moveright-all' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: unselect, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.unselect, 'disabled': !$context.$data.isUnselectEnable(), 'icon': 'dxrd-svg-operations-moveleft', 'iconClass': 'dxrd-image-moveleft' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: unselectAll, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft_all\', iconClass: \'dxrd-image-moveleft-all\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.unselectAll, 'disabled': !$context.$data.isUnselectEnable(), 'icon': 'dxrd-svg-operations-moveleft_all', 'iconClass': 'dxrd-image-moveleft-all' }; } }; });
addToBindingsCache('text: selectedFields.caption', function ($context, $element) { return { 'text': function () { return $context.$data.selectedFields.caption; } }; });
addToBindingsCache('dxList: { items: selectedFields.items, selectedItems: selectedFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: selectedFieldClick }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.selectedFields.items, 'selectedItems': $context.$data.selectedFields.activeItemArray, 'height': 257, 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data.selectedFieldClick }; } }; });
addToBindingsCache('event: { dblclick: $parent.selectedFieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.selectedFieldDblClick }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\'), attr: { title: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Page Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSize'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Page Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSize') }; } }; });
addToBindingsCache('dxSelectBox: { items: _labelData.paperKinds, displayExpr: \'name\', value: _selectedPaperSize, itemTemplate: \'PaperSizeText\', dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true , onOpened: function (e) { e.component._popup.option(\'width\', 300); }}, attr: { title: _selectedPaperSize().name + \' - \' + $root.dx._static.CustomizeLabelPage._getPageSizeText(_selectedPaperSize().width, _selectedPaperSize().height, _selectedPaperSize().unit)}', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data._labelData.paperKinds, 'displayExpr': 'name', 'value': $context.$data._selectedPaperSize, 'itemTemplate': 'PaperSizeText', 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true, 'onOpened': function (e) { e.component._popup.option('width', 300); } }; }, 'attr': function () { return { 'title': $context.$data._selectedPaperSize().name + ' - ' + $context.$root.dx._static.CustomizeLabelPage._getPageSizeText($context.$data._selectedPaperSize().width, $context.$data._selectedPaperSize().height, $context.$data._selectedPaperSize().unit) }; } }; });
addToBindingsCache('text: $root.dx._static.CustomizeLabelPage._getPageSizeText(width, height, unit)', function ($context, $element) { return { 'text': function () { return $context.$root.dx._static.CustomizeLabelPage._getPageSizeText($context.$data.width, $context.$data.height, $context.$data.unit); } }; });
addToBindingsCache('dxRadioGroup:{items: _units, valueExpr: \'value\', value: unit, layout: \'horizontal\' }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'items': $context.$data._units, 'valueExpr': 'value', 'value': $context.$data.unit, 'layout': 'horizontal' }; } }; });
addToBindingsCache('text: _pageSizeText', function ($context, $element) { return { 'text': function () { return $context.$data._pageSizeText; } }; });
addToBindingsCache('text: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\', attr: { title: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\' }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Measure Units', 'DevExpress.XtraReports.UI.XtraReport.ReportUnit') + ':'; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Measure Units', 'DevExpress.XtraReports.UI.XtraReport.ReportUnit') + ':' }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { items: _units, valueExpr: \'value\', displayExpr: \'text\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$data._units, 'valueExpr': 'value', 'displayExpr': 'text', 'value': $context.$data.unit, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\'), attr: { title: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Label Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Label Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelWidth }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.labelWidth }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\'), attr: { title: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Label Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Label Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelHeight }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.labelHeight }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\'), attr: { title: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Horizontal Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Horizontal Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: horizontalPitch }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.horizontalPitch }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\'), attr: { title: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Vertical Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Vertical Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: verticalPitch }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.verticalPitch }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\'), attr: { title: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Top Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Top Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: topMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.topMargin }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\'), attr: { title: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Left Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Left Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: leftMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.leftMargin }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\'), attr: { title: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Right Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Right Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: rightMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.rightMargin }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\'), attr: { title: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Bottom Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Bottom Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin') }; } }; });
addToBindingsCache('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: bottomMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.bottomMargin }; } }; });
addToBindingsCache('text: _labelsCountText', function ($context, $element) { return { 'text': function () { return $context.$data._labelsCountText; } }; });
addToBindingsCache('dxTemplate: { name: \'PaperSizeText\' }', function () { return { dxTemplate: { name: 'PaperSizeText' } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: scrollViewHeight }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': $context.$data.scrollViewHeight }; } }; });
addToBindingsCache('text: fields.caption', function ($context, $element) { return { 'text': function () { return $context.$data.fields.caption; } }; });
addToBindingsCache('dxList: { dataSource: fields.items, selectedItems: fields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: fieldClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.fields.items, 'selectedItems': $context.$data.fields.activeItemArray, 'height': 257, 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data.fieldClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('event: { dblclick: $parent.fieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.fieldDblClick }; } }; });
addToBindingsCache('text: $data', function ($context, $element) { return { 'text': function () { return $context.$data; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: addNewGroup, disabled: !isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\'  }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.addNewGroup, 'disabled': !$context.$data.isCreateGroupEnabled(), 'icon': 'dxrd-svg-operations-moveright', 'iconClass': 'dxrd-image-moveright' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: appendFieldsToGroup, disabled: !isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.appendFieldsToGroup, 'disabled': !$context.$data.isAppendToGroupEnabled(), 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dxrd-image-add' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: removeGroup, disabled: !isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.removeGroup, 'disabled': !$context.$data.isRemoveGroupEnabled(), 'icon': 'dxrd-svg-operations-moveleft', 'iconClass': 'dxrd-image-moveleft' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: moveUp, disabled: !isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.moveUp, 'disabled': !$context.$data.isMoveUpEnabled(), 'icon': 'dxrd-svg-operations-moveup', 'iconClass': 'dxrd-image-moveup' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: moveDown, disabled: !isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.moveDown, 'disabled': !$context.$data.isMoveDownEnabled(), 'icon': 'dxrd-svg-operations-movedown', 'iconClass': 'dxrd-image-movedown' }; } }; });
addToBindingsCache('text: groups.caption', function ($context, $element) { return { 'text': function () { return $context.$data.groups.caption; } }; });
addToBindingsCache('dxList: { items: groups.items, height: 257, selectionMode: \'single\', selectedItems: groups.activeItemArray, activeStateEnabled: false, onItemClick: groupClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.groups.items, 'height': 257, 'selectionMode': 'single', 'selectedItems': $context.$data.groups.activeItemArray, 'activeStateEnabled': false, 'onItemClick': $context.$data.groupClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('event: { dblclick: $parent.groupDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.groupDblClick }; } }; });
addToBindingsCache('text: fields().join(\', \')', function ($context, $element) { return { 'text': function () { return $context.$data.fields().join(', '); } }; });
addToBindingsCache('foreach: _groupInfos', function ($context, $element) { return { 'foreach': function () { return $context.$data._groupInfos; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('css: { \'dxrd-disabled-button\': $parent.moveUpDisabled($index()) }, click: function(){ $parent.moveup($index()) }', function ($context, $element) { return { 'css': function () { return { 'dxrd-disabled-button': $context.$parent.moveUpDisabled($context.$index()) }; }, 'click': function () { return function () { $context.$parent.moveup($context.$index()); }; } }; });
addToBindingsCache('css: { \'dxrd-disabled-button\': $parent.moveDownDisabled($index()) }, click: function(){ $parent.movedown($index()) }', function ($context, $element) { return { 'css': function () { return { 'dxrd-disabled-button': $context.$parent.moveDownDisabled($context.$index()) }; }, 'click': function () { return function () { $context.$parent.movedown($context.$index()); }; } }; });
addToBindingsCache('click: function(){ $parent.remove($index()) }', function ($context, $element) { return { 'click': function () { return function () { $context.$parent.remove($context.$index()); }; } }; });
addToBindingsCache('text: $data.addGroupText(), attr: { \'title\': $data.addGroupText() }, click: function() { $data.add() }', function ($context, $element) { return { 'text': function () { return $context.$data.addGroupText(); }, 'attr': function () { return { 'title': $context.$data.addGroupText() }; }, 'click': function () { return function () { $context.$data.add(); }; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-moveup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveup'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-movedown\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-movedown'; } }; });
addToBindingsCache('template: { name: "dxrd-multivalue", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-multivalue', 'data': $context.$data }; } }; });
addToBindingsCache('if: isCreateGroupEnabled()', function ($context, $element) { return { 'if': function () { return $context.$data.isCreateGroupEnabled(); } }; });
addToBindingsCache('text: _fieldCaption', function ($context, $element) { return { 'text': function () { return $context.$data._fieldCaption; } }; });
addToBindingsCache('dxList: { items: _currentFields().items, selectedItems: _currentFields().activeItemArray, height: \'100%\', selectionMode: \'single\', activeStateEnabled: false, onItemClick: _fieldClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data._currentFields().items, 'selectedItems': $context.$data._currentFields().activeItemArray, 'height': '100%', 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data._fieldClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('event: { dblclick: $parent._fieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent._fieldDblClick }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: _addNewGroup, disabled: !_isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._addNewGroup, 'disabled': !$context.$data._isCreateGroupEnabled(), 'icon': 'dxrd-svg-operations-moveright', 'iconClass': 'dxrd-image-moveright' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: _appendFieldsToGroup, disabled: !_isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._appendFieldsToGroup, 'disabled': !$context.$data._isAppendToGroupEnabled(), 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dxrd-image-add' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: _removeGroup, disabled: !_isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._removeGroup, 'disabled': !$context.$data._isRemoveGroupEnabled(), 'icon': 'dxrd-svg-operations-moveleft', 'iconClass': 'dxrd-image-moveleft' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: _moveUp, disabled: !_isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._moveUp, 'disabled': !$context.$data._isMoveUpEnabled(), 'icon': 'dxrd-svg-operations-moveup', 'iconClass': 'dxrd-image-moveup' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: _moveDown, disabled: !_isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._moveDown, 'disabled': !$context.$data._isMoveDownEnabled(), 'icon': 'dxrd-svg-operations-movedown', 'iconClass': 'dxrd-image-movedown' }; } }; });
addToBindingsCache('text: _groupCaption', function ($context, $element) { return { 'text': function () { return $context.$data._groupCaption; } }; });
addToBindingsCache('dxList: { items: _currentGroups().items, height: \'100%\', selectionMode: \'single\', selectedItems: _currentGroups().activeItemArray, activeStateEnabled: false, onItemClick: _groupClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data._currentGroups().items, 'height': '100%', 'selectionMode': 'single', 'selectedItems': $context.$data._currentGroups().activeItemArray, 'activeStateEnabled': false, 'onItemClick': $context.$data._groupClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('event: { dblclick: $parent._groupDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent._groupDblClick }; } }; });
addToBindingsCache('template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-wizard-report-tree', 'data': { 'items': $context.$data._reportTree, 'value': $context.$data._currentPath } }; } }; });
addToBindingsCache('if: $data._currentFields()', function ($context, $element) { return { 'if': function () { return $context.$data._currentFields(); } }; });
addToBindingsCache('if: $data._currentGroups()', function ($context, $element) { return { 'if': function () { return $context.$data._currentGroups(); } }; });
addToBindingsCache('text: _selectDataMembersCaption', function ($context, $element) { return { 'text': function () { return $context.$data._selectDataMembersCaption; } }; });
addToBindingsCache('treelist: _dataMemberFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._dataMemberFieldListModel; } }; });
addToBindingsCache('text: _selectDataFieldsCaption', function ($context, $element) { return { 'text': function () { return $context.$data._selectDataFieldsCaption; } }; });
addToBindingsCache('treelist: _fieldMemberFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._fieldMemberFieldListModel; } }; });
addToBindingsCache('template: {name: \'dxrd-page-masterdetail-select-reportdata-dataMembers\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-dataMembers', 'data': $context.$data }; } }; });
addToBindingsCache('template: {name: \'dxrd-page-masterdetail-select-reportdata-fieldMembers\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-fieldMembers', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: "dxrd-page-masterdetail-select-reportdata-dataMembers", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-dataMembers', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: "dxrd-page-masterdetail-select-reportdata-fieldMembers", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-fieldMembers', 'data': $context.$data }; } }; });
addToBindingsCache('text: _fieldsCaption, attr:{\'title\': _fieldsCaption }', function ($context, $element) { return { 'text': function () { return $context.$data._fieldsCaption; }, 'attr': function () { return { 'title': $context.$data._fieldsCaption }; } }; });
addToBindingsCache('text: _summaryFunctionCaption, attr:{\'title\': _summaryFunctionCaption }', function ($context, $element) { return { 'text': function () { return $context.$data._summaryFunctionCaption; }, 'attr': function () { return { 'title': $context.$data._summaryFunctionCaption }; } }; });
addToBindingsCache('foreach: _summaryInfos', function ($context, $element) { return { 'foreach': function () { return $context.$data._summaryInfos; } }; });
addToBindingsCache('dxFieldListPicker: { itemsProvider: $parent._fieldListProvider, acceptCustomValue: false, onValueChanged: onValueChanged, value: selectedPath, displayValue: displayName, placeholder: $root.dx._static.selectPlaceholder() }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'itemsProvider': $context.$parent._fieldListProvider, 'acceptCustomValue': false, 'onValueChanged': $context.$data.onValueChanged, 'value': $context.$data.selectedPath, 'displayValue': $context.$data.displayName, 'placeholder': $context.$root.dx._static.selectPlaceholder() }; } }; });
addToBindingsCache('dxButton: { icon: \'close\', onClick: function () { return $parent._removeSummaryInfo($data);  }}', function ($context, $element) { return { 'dxButton': function () { return { 'icon': 'close', 'onClick': function () { return $context.$parent._removeSummaryInfo($context.$data); } }; } }; });
addToBindingsCache('dxCheckBox: { value: ignoreNullValues, text: _ignoreNullValuesCaption }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.ignoreNullValues, 'text': $context.$data._ignoreNullValuesCaption }; } }; });
addToBindingsCache('text: _selectFieldToSummaryCaption', function ($context, $element) { return { 'text': function () { return $context.$data._selectFieldToSummaryCaption; } }; });
addToBindingsCache('text: _fieldsCaption', function ($context, $element) { return { 'text': function () { return $context.$data._fieldsCaption; } }; });
addToBindingsCache('text: _summaryFunctionCaption', function ($context, $element) { return { 'text': function () { return $context.$data._summaryFunctionCaption; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $parent._displayedFields[$parent._currentPath()], itemTemplate: \'visibleItems\', displayExpr: \'displayName\', value: field, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$parent._displayedFields[$context.$parent._currentPath()], 'itemTemplate': 'visibleItems', 'displayExpr': 'displayName', 'value': $context.$data.field, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath  } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-wizard-report-tree', 'data': { 'items': $context.$data._reportTree, 'value': $context.$data._currentPath } }; } }; });
addToBindingsCache('dxTemplate:{ name:\'visibleItems\' }', function () { return { dxTemplate: { name: 'visibleItems' } }; });
addToBindingsCache('cacheElement: { action: function(element) { $data.cachePagePreviewElement(element); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data.cachePagePreviewElement(element); } }; } }; });
addToBindingsCache('styleunit: { width: $data.previewPageWidth(), height: $data.previewPageHeight() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.previewPageWidth(), 'height': $context.$data.previewPageHeight() }; } }; });
addToBindingsCache('styleunit: { top: $data.previewTopMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.previewTopMargin() }; } }; });
addToBindingsCache('styleunit: { right: $data.previewRightMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'right': $context.$data.previewRightMargin() }; } }; });
addToBindingsCache('styleunit: { bottom: $data.previewBottomMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'bottom': $context.$data.previewBottomMargin() }; } }; });
addToBindingsCache('styleunit: { left: $data.previewLeftMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.previewLeftMargin() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Paper\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Paper', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\'), attr: { \'title\': $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size') }; } }; });
addToBindingsCache('dxSelectBox: { items: lookupData.paperKind, valueExpr: \'value\', displayExpr: \'displayName\', value: paperKind, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.lookupData.paperKind, 'valueExpr': 'value', 'displayExpr': 'displayName', 'value': $context.$data.paperKind, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\'), attr: { \'title\': $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Unit:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Unit:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit') }; } }; });
addToBindingsCache('dxSelectBox: { items: lookupData.unit, valueExpr: \'value\', displayExpr: \'displayName\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.lookupData.unit, 'valueExpr': 'value', 'displayExpr': 'displayName', 'value': $context.$data.unit, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\'), attr: { \'title\': $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Orientation:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Orientation:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation') }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { items: [ { value: true, displayName: \'Landscape\', localizationId: \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape\'}, { value: false, displayName: \'Portrait\', localizationId:\'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait\' }], valueExpr: \'value\', displayExpr: \'displayName\', value: $data.landscape, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': [{ 'value': true, 'displayName': 'Landscape', 'localizationId': 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape' }, { 'value': false, 'displayName': 'Portrait', 'localizationId': 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait' }], 'valueExpr': 'value', 'displayExpr': 'displayName', 'value': $context.$data.landscape, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\'), attr: { \'title\': $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_Width'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_Width') }; } }; });
addToBindingsCache('dxNumberBox: { value: width, disabled: fixedSize, format: valueFormat, min: 0 }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.width, 'disabled': $context.$data.fixedSize, 'format': $context.$data.valueFormat, 'min': 0 }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\'), attr: { \'title\': $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_Height'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_Height') }; } }; });
addToBindingsCache('dxNumberBox: { value: height, disabled: fixedSize, format: valueFormat, min: 0 }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.height, 'disabled': $context.$data.fixedSize, 'format': $context.$data.valueFormat, 'min': 0 }; } }; });
addToBindingsCache('css: { \'dxd-state-no-hover dxd-state-active\': !$data.landscape() }, click: function() { $data.landscape(false); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-no-hover dxd-state-active': !$context.$data.landscape() }; }, 'click': function () { return function () { $context.$data.landscape(false); }; } }; });
addToBindingsCache('template:\'dxrd-svg-portrait\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-portrait'; } }; });
addToBindingsCache('css: { \'dxd-state-no-hover dxd-state-active\': $data.landscape() }, click: function() { $data.landscape(true); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-no-hover dxd-state-active': $context.$data.landscape() }; }, 'click': function () { return function () { $context.$data.landscape(true); }; } }; });
addToBindingsCache('template:\'dxrd-svg-landscape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-landscape'; } }; });
addToBindingsCache('text: $root.getLocalization(\'Page Margins\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_PageMargins\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Page Margins', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_PageMargins'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\'), attr: { \'title\': $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Left:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Left:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin') }; } }; });
addToBindingsCache('dxNumberBox: { value: marginLeft, format: valueFormat, min: 0, max: width() - marginRight() }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginLeft, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.width() - $context.$data.marginRight() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\'), attr: { \'title\': $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Top:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Top:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin') }; } }; });
addToBindingsCache('dxNumberBox: { value: marginTop, format: valueFormat, min: 0, max: height() - marginBottom() }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginTop, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.height() - $context.$data.marginBottom() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\'), attr: { \'title\': $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Right:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Right:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin') }; } }; });
addToBindingsCache('dxNumberBox: { value: marginRight, format: valueFormat, min: 0, max: width() - marginLeft() }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginRight, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.width() - $context.$data.marginLeft() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\'), attr: { \'title\': $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Bottom:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Bottom:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin') }; } }; });
addToBindingsCache('dxNumberBox: { value: marginBottom, format: valueFormat, min: 0, max: height() - marginTop()  }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginBottom, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.height() - $context.$data.marginTop() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Color Scheme\', \'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Color Scheme', 'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme'); } }; });
addToBindingsCache('dxTextBox: { value: reportTitle, placeholder: _reportTitlePlaceholder() }, styleunit: { width: $data._previewPageHelper.previewPageWidth() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.reportTitle, 'placeholder': $context.$data._reportTitlePlaceholder() }; }, 'styleunit': function () { return { 'width': $context.$data._previewPageHelper.previewPageWidth() }; } }; });
addToBindingsCache('cacheElement: { action: function(element) { $data._previewPageHelper.cachePagePreviewElement(element); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data._previewPageHelper.cachePagePreviewElement(element); } }; } }; });
addToBindingsCache('styleunit: { width: $data._previewPageHelper.previewPageWidth(), height: $data._previewPageHelper.previewPageHeight() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data._previewPageHelper.previewPageWidth(), 'height': $context.$data._previewPageHelper.previewPageHeight() }; } }; });
addToBindingsCache('styleunit: { top: $data._previewPageHelper.previewTopMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data._previewPageHelper.previewTopMargin() }; } }; });
addToBindingsCache('styleunit: { right: $data._previewPageHelper.previewRightMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'right': $context.$data._previewPageHelper.previewRightMargin() }; } }; });
addToBindingsCache('styleunit: { bottom: $data._previewPageHelper.previewBottomMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'bottom': $context.$data._previewPageHelper.previewBottomMargin() }; } }; });
addToBindingsCache('styleunit: { left: $data._previewPageHelper.previewLeftMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data._previewPageHelper.previewLeftMargin() }; } }; });
addToBindingsCache('styleunit: { top: $data._previewPageHelper.previewTopMargin(),  right: $data._previewPageHelper.previewRightMargin(),  bottom: $data._previewPageHelper.previewBottomMargin(),  left: $data._previewPageHelper.previewLeftMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data._previewPageHelper.previewTopMargin(), 'right': $context.$data._previewPageHelper.previewRightMargin(), 'bottom': $context.$data._previewPageHelper.previewBottomMargin(), 'left': $context.$data._previewPageHelper.previewLeftMargin() }; } }; });
addToBindingsCache('style: {  backgroundColor: $parents[1]._color, width: 100/$parent.fields.length + \'%\', color: $parents[1]._foreColor }, text: displayName', function ($context, $element) { return { 'style': function () { return { 'backgroundColor': $context.$parents[1]._color, 'width': 100 / $context.$parent.fields.length + '%', 'color': $context.$parents[1]._foreColor }; }, 'text': function () { return $context.$data.displayName; } }; });
addToBindingsCache('style: { width: 100/$parent.fields.length + \'%\' }, text: \'[\' + name + \']\'', function ($context, $element) { return { 'style': function () { return { 'width': 100 / $context.$parent.fields.length + '%' }; }, 'text': function () { return '[' + $context.$data.name + ']'; } }; });
addToBindingsCache('template: { name: \'dxrd-page-setup-page-preview\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-preview', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: \'dxrd-page-setup-page-settings\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-settings', 'data': $context.$data }; } }; });
addToBindingsCache('with: $data.previewPageHelper', function ($context, $element) { return { 'with': function () { return $context.$data.previewPageHelper; } }; });
addToBindingsCache('template: { name: \'dxrd-page-setup-groups\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-groups', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: \'dxrd-page-setup-groups\', data: $data._configureReportPageSettingsPage }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-groups', 'data': $context.$data._configureReportPageSettingsPage }; } }; });
addToBindingsCache('if: $data._colorSchemePageVisible', function ($context, $element) { return { 'if': function () { return $context.$data._colorSchemePageVisible; } }; });
addToBindingsCache('template: { name: \'dxrd-page-colorScheme-content\', data: $data._colorSchemePage }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-colorScheme-content', 'data': $context.$data._colorSchemePage }; } }; });
addToBindingsCache('template: { name: "dxrd-page-setup-page-settings", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-settings', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: "dxrd-page-setup-page-colored-preview", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-colored-preview', 'data': $context.$data }; } }; });
addToBindingsCache('if: $data._reportTitleVisible', function ($context, $element) { return { 'if': function () { return $context.$data._reportTitleVisible; } }; });
addToBindingsCache('foreach: _masterDetailInfo', function ($context, $element) { return { 'foreach': function () { return $context.$data._masterDetailInfo; } }; });
addToBindingsCache('css: { \'dxrd-report-layout-type-five-items\': layoutTypeItems()[0].margin == 1 }', function ($context, $element) { return { 'css': function () { return { 'dxrd-report-layout-type-five-items': $context.$data.layoutTypeItems()[0].margin == 1 }; } }; });
addToBindingsCache('dxRadioGroup: { value: selectedPageOrientation, items: pageOrientationItems, layout: \'horizontal\' }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedPageOrientation, 'items': $context.$data.pageOrientationItems, 'layout': 'horizontal' }; } }; });
addToBindingsCache('event: { click: $parent.layoutTypeItemClick }, css: { \'dxd-state-selected dxd-border-secondary dxd-back-secondary\': $parent.isSelected($data) }, style: { margin: \'0 \' + margin + \'px\' }', function ($context, $element) { return { 'event': function () { return { 'click': $context.$parent.layoutTypeItemClick }; }, 'css': function () { return { 'dxd-state-selected dxd-border-secondary dxd-back-secondary': $context.$parent.isSelected($context.$data) }; }, 'style': function () { return { 'margin': '0 ' + $context.$data.margin + 'px' }; } }; });
addToBindingsCache('attr: { class: imageClassName }', function ($context, $element) { return { 'attr': function () { return { 'class': $context.$data.imageClassName }; } }; });
addToBindingsCache('dxCheckBox: { value: fitFieldsToPage, text: $root.getLocalization(\'Adjust the field width so all fields fit onto a page\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth\') }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.fitFieldsToPage, 'text': $context.$root.getLocalization('Adjust the field width so all fields fit onto a page', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth') }; } }; });
addToBindingsCache('foreach: layoutTypeItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.layoutTypeItems; } }; });
addToBindingsCache('dxTemplate : { name: \'text\' }', function () { return { dxTemplate: { name: 'text' } }; });
addToBindingsCache('attr: { class: selectedReportStyle().className }', function ($context, $element) { return { 'attr': function () { return { 'class': $context.$data.selectedReportStyle().className }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Title\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Title', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Caption\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Caption', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Data\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Data', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data'); } }; });
addToBindingsCache('dxRadioGroup: { value: selectedReportStyle, items: reportStyleItems }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedReportStyle, 'items': $context.$data.reportStyleItems }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Specify the report\\\'s title\', \'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Specify the report\'s title', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle'); } }; });
addToBindingsCache('dxTextBox: { value: reportTitle, width: 270 }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.reportTitle, 'width': 270 }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Label Product:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Label Product:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct'); } }; });
addToBindingsCache('dxSelectBox: { items: _labelData.labelProducts, displayExpr: \'name\', value: _selectedLabelProduct, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data._labelData.labelProducts, 'displayExpr': 'name', 'value': $context.$data._selectedLabelProduct, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Product Number:\', \'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Product Number:', 'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber'); } }; });
addToBindingsCache('dxSelectBox: { dataSource: _labelDetails, displayExpr: \'name\', value: _selectedLabelDetails, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data._labelDetails, 'displayExpr': 'name', 'value': $context.$data._selectedLabelDetails, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_Width'); } }; });
addToBindingsCache('text: _width', function ($context, $element) { return { 'text': function () { return $context.$data._width; } }; });
addToBindingsCache('text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_Height'); } }; });
addToBindingsCache('text: _height', function ($context, $element) { return { 'text': function () { return $context.$data._height; } }; });
addToBindingsCache('text: $root.getLocalization(\'Paper Type:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperType\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Paper Type:', 'ASPxReportsStringId.ReportDesigner_Wizard_PaperType'); } }; });
addToBindingsCache('text: _paperType', function ($context, $element) { return { 'text': function () { return $context.$data._paperType; } }; });
addToBindingsCache('text: $root.getLocalization(\'Paper Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Paper Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Average\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Average', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Count\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Count', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Max\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Max', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Min\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Min', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min'); } }; });
addToBindingsCache('text: $root.getLocalization(\'Sum\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Sum', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum'); } }; });
addToBindingsCache('dxScrollView: { }', function ($context, $element) { return { 'dxScrollView': function () { return {}; } }; });
addToBindingsCache('text: columnName, attr: { title: columnName }', function ($context, $element) { return { 'text': function () { return $context.$data.columnName; }, 'attr': function () { return { 'title': $context.$data.columnName }; } }; });
addToBindingsCache('dxCheckBox: { value: avg }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.avg }; } }; });
addToBindingsCache('dxCheckBox: { value: count }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.count }; } }; });
addToBindingsCache('dxCheckBox: { value: max }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.max }; } }; });
addToBindingsCache('dxCheckBox: { value: min }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.min }; } }; });
addToBindingsCache('dxCheckBox: { value: sum }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.sum }; } }; });
addToBindingsCache('dxCheckBox: { value: ignoreNullValues, text: $root.getLocalization(\'Ignore null values\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues\') }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.ignoreNullValues, 'text': $context.$root.getLocalization('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues') }; } }; });
addToBindingsCache('foreach: summaryOptions', function ($context, $element) { return { 'foreach': function () { return $context.$data.summaryOptions; } }; });
