/**
* DevExpress HTML/JS Reporting (dist\js\dx-webdocumentviewer.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/

// UNUSED EXPORTS: default

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting.js
var reporting_namespaceObject = {};
__webpack_require__.r(reporting_namespaceObject);
__webpack_require__.d(reporting_namespaceObject, {
  CustomAction: () => (CustomAction),
  CustomizeExportOptionsEventArgs: () => (CustomizeExportOptionsEventArgs),
  EventGenerator: () => (EventGenerator),
  ImageSource: () => (ImageSource),
  convertMapToKeyValuePair: () => (convertMapToKeyValuePair)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-editing.js
var reporting_editing_namespaceObject = {};
__webpack_require__.r(reporting_editing_namespaceObject);
__webpack_require__.d(reporting_editing_namespaceObject, {
  Categories: () => (Categories),
  EditingFieldExtensions: () => (EditingFieldExtensions),
  ___isCancelFlag: () => (___isCancelFlag)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-export.js
var reporting_export_namespaceObject = {};
__webpack_require__.r(reporting_export_namespaceObject);
__webpack_require__.d(reporting_export_namespaceObject, {
  AdditionalRecipientModel: () => (AdditionalRecipientModel),
  CsvExportOptions: () => (CsvExportOptions),
  DocxExportDocumentOptions: () => (DocxExportDocumentOptions),
  DocxExportOptions: () => (DocxExportOptions),
  ExportOptions: () => (ExportOptions),
  HtmlExportOptions: () => (HtmlExportOptions),
  ImageExportOptions: () => (ImageExportOptions),
  MhtExportOptions: () => (MhtExportOptions),
  PdfExportDocumentOptions: () => (PdfExportDocumentOptions),
  PdfExportOptions: () => (PdfExportOptions),
  PdfPasswordSecurityOptions: () => (PdfPasswordSecurityOptions),
  PdfPermissionsOptions: () => (PdfPermissionsOptions),
  PrintPreviewOptions: () => (PrintPreviewOptions),
  RtfExportOptions: () => (RtfExportOptions),
  TextExportOptions: () => (TextExportOptions),
  XlsExportOptions: () => (XlsExportOptions),
  XlsxExportOptions: () => (XlsxExportOptions),
  additionalRecipientSerializationsInfo: () => (additionalRecipientSerializationsInfo),
  application: () => (application),
  author: () => (author),
  docxExportDocumentOptionsSerializationInfo: () => (docxExportDocumentOptionsSerializationInfo),
  pdfEncryptionLevel: () => (pdfEncryptionLevel),
  pdfExportDocumentOptionsSerializationInfo: () => (pdfExportDocumentOptionsSerializationInfo),
  pdfExportPasswordSecurityOptionsSerializationInfo: () => (pdfExportPasswordSecurityOptionsSerializationInfo),
  pdfExportPermissionsOptionsSerializationInfo: () => (pdfExportPermissionsOptionsSerializationInfo),
  subject: () => (subject),
  title: () => (title)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-export-metadata.js
var reporting_export_metadata_namespaceObject = {};
__webpack_require__.r(reporting_export_metadata_namespaceObject);
__webpack_require__.d(reporting_export_metadata_namespaceObject, {
  additionalRecipients: () => (additionalRecipients),
  allowURLsWithJSContent: () => (allowURLsWithJSContent),
  characterSet: () => (characterSet),
  csvExportOptionsSerializationInfo: () => (csvExportOptionsSerializationInfo),
  csvTextSeparator: () => (csvTextSeparator),
  docxDocumentOptions: () => (docxDocumentOptions),
  docxExportMode: () => (docxExportMode),
  docxExportOptionsSerializationInfo: () => (docxExportOptionsSerializationInfo),
  docxTableLayout: () => (docxTableLayout),
  emailOptionsSerializationInfo: () => (emailOptionsSerializationInfo),
  embedImagesInHTML: () => (embedImagesInHTML),
  emptyFirstPageHeaderFooter: () => (emptyFirstPageHeaderFooter),
  exportOptionsSerializationInfo: () => (exportOptionsSerializationInfo),
  exportPageBreaks: () => (exportPageBreaks),
  exportWatermarks: () => (exportWatermarks),
  expotOptionsTitle: () => (expotOptionsTitle),
  getExportModeValues: () => (getExportModeValues),
  htmlExportMode: () => (htmlExportMode),
  htmlExportOptionsSerializationInfo: () => (htmlExportOptionsSerializationInfo),
  htmlExportOptionsSerializationInfoBase: () => (htmlExportOptionsSerializationInfoBase),
  htmlTableLayout: () => (htmlTableLayout),
  imageExportMode: () => (imageExportMode),
  imageExportOptionsSerializationInfo: () => (imageExportOptionsSerializationInfo),
  imageExportOptionsSerializationInfoBase: () => (imageExportOptionsSerializationInfoBase),
  inlineCss: () => (inlineCss),
  keepRowHeight: () => (keepRowHeight),
  mhtExportOptionsSerializationInfo: () => (mhtExportOptionsSerializationInfo),
  mhtExportOptionsSerializationInfoBase: () => (mhtExportOptionsSerializationInfoBase),
  nativeFormatOptionsSerializationInfo: () => (nativeFormatOptionsSerializationInfo),
  pageBorderColor: () => (pageBorderColor),
  pageBorderWidth: () => (pageBorderWidth),
  pageRange: () => (pageRange),
  pdfACompatibility: () => (pdfACompatibility),
  pdfACompatibilityValues: () => (pdfACompatibilityValues),
  pdfExportOptionsSerializationInfo: () => (pdfExportOptionsSerializationInfo),
  pdfUACompatibility: () => (pdfUACompatibility),
  pdfUACompatibilityValues: () => (pdfUACompatibilityValues),
  printPreviewOptionsSerializationInfo: () => (printPreviewOptionsSerializationInfo),
  rasterizationResolution: () => (rasterizationResolution),
  rasterizeImages: () => (rasterizeImages),
  removeSecondarySymbols: () => (removeSecondarySymbols),
  rtfExportMode: () => (rtfExportMode),
  rtfExportOptionsSerializationInfo: () => (rtfExportOptionsSerializationInfo),
  rtfExportOptionsSerializationInfoBase: () => (rtfExportOptionsSerializationInfoBase),
  showPrintDialogOnOpen: () => (showPrintDialogOnOpen),
  textEncodingType: () => (textEncodingType),
  textExportMode: () => (textExportMode),
  textExportOptionsSerializationInfo: () => (textExportOptionsSerializationInfo),
  useCustomSeparator: () => (useCustomSeparator),
  useHRefHyperlinks: () => (useHRefHyperlinks),
  xlsExportHyperlinks: () => (xlsExportHyperlinks),
  xlsExportMode: () => (xlsExportMode),
  xlsExportOptionsSerializationInfo: () => (xlsExportOptionsSerializationInfo),
  xlsExportOptionsSerializationInfoBase: () => (xlsExportOptionsSerializationInfoBase),
  xlsExportOptionsSerializationInfoCommon: () => (xlsExportOptionsSerializationInfoCommon),
  xlsExportOptionsSheetName: () => (xlsExportOptionsSheetName),
  xlsRawDataMode: () => (xlsRawDataMode),
  xlsShowGridLines: () => (xlsShowGridLines),
  xlsTextExportMode: () => (xlsTextExportMode),
  xlsxExportMode: () => (xlsxExportMode),
  xlsxExportOptionsSerializationInfo: () => (xlsxExportOptionsSerializationInfo)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-internal.js
var reporting_internal_namespaceObject = {};
__webpack_require__.r(reporting_internal_namespaceObject);
__webpack_require__.d(reporting_internal_namespaceObject, {
  Locker: () => (Locker),
  createFullscreenComputed: () => (createFullscreenComputed),
  cultureInfo: () => (cultureInfo),
  editorTemplates: () => (editorTemplates),
  generateGuid: () => (generateGuid),
  getChartChildComponents: () => (getChartChildComponents),
  isAndroid: () => (isAndroid),
  isIOS: () => (isIOS),
  isMobile: () => (isMobile),
  processZoomFactor: () => (processZoomFactor),
  transformNewLineCharacters: () => (transformNewLineCharacters)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-metadata.js
var reporting_metadata_namespaceObject = {};
__webpack_require__.r(reporting_metadata_namespaceObject);
__webpack_require__.d(reporting_metadata_namespaceObject, {
  availableCultures: () => (availableCultures),
  brickStyleSerializationsInfo: () => (brickStyleSerializationsInfo),
  defaultCulture: () => (defaultCulture),
  previewBackColor: () => (previewBackColor),
  previewBorderColor: () => (previewBorderColor),
  previewBorderDashStyle: () => (previewBorderDashStyle),
  previewBorderStyle: () => (previewBorderStyle),
  previewBorderWidth: () => (previewBorderWidth),
  previewFont: () => (previewFont),
  previewForeColor: () => (previewForeColor),
  previewPadding: () => (previewPadding),
  previewSides: () => (previewSides),
  previewTextAlignment: () => (previewTextAlignment)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer.js
var reporting_viewer_namespaceObject = {};
__webpack_require__.r(reporting_viewer_namespaceObject);
__webpack_require__.d(reporting_viewer_namespaceObject, {
  ActionId: () => (ActionId),
  BreadcrumbsKeyboardHelper: () => (BreadcrumbsKeyboardHelper),
  DateRangeDialogElementWithHighlight: () => (DateRangeDialogElementWithHighlight),
  DateRangeDialogElementsKeyboardHelper: () => (DateRangeDialogElementsKeyboardHelper),
  DxReportParametersPanel: () => (DxReportParametersPanel),
  DxReportViewer: () => (DxReportViewer),
  ExportFormatID: () => (ExportFormatID),
  JSReportParametersPanel: () => (JSReportParametersPanel),
  JSReportParametersPanelBinding: () => (JSReportParametersPanelBinding),
  JSReportViewer: () => (JSReportViewer),
  JSReportViewerBase: () => (JSReportViewerBase),
  JSReportViewerBindingBase: () => (JSReportViewerBindingBase),
  MobilePreviewElements: () => (MobilePreviewElements),
  PredefinedDateRangesKeyboardHelper: () => (PredefinedDateRangesKeyboardHelper),
  PreviewBricksKeyboardHelper: () => (PreviewBricksKeyboardHelper),
  PreviewEditingFieldsKeyboardHelper: () => (PreviewEditingFieldsKeyboardHelper),
  PreviewElements: () => (PreviewElements),
  ReportHolder: () => (ReportHolder),
  ReportPreview: () => (ReportPreview),
  SearchKeyboardHelper: () => (SearchKeyboardHelper),
  ZoomAutoBy: () => (ZoomAutoBy),
  createReportPreviewViewModel: () => (createReportPreviewViewModel),
  updateReportPreviewViewModel: () => (updateReportPreviewViewModel)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-editing.js
var reporting_viewer_editing_namespaceObject = {};
__webpack_require__.r(reporting_viewer_editing_namespaceObject);
__webpack_require__.d(reporting_viewer_editing_namespaceObject, {
  CharacterCombEditingFieldViewModel: () => (CharacterCombEditingFieldViewModel),
  CheckEditingFieldViewModel: () => (CheckEditingFieldViewModel),
  CheckState: () => (CheckState),
  DefaultImageEditingFieldViewModel: () => (DefaultImageEditingFieldViewModel),
  EditingField: () => (EditingField),
  EditingFieldBase: () => (EditingFieldBase),
  GlyphStyle: () => (GlyphStyle),
  ImageAlignment: () => (ImageAlignment),
  ImageEditingFieldViewModel: () => (ImageEditingFieldViewModel),
  ImageSizeMode: () => (ImageSizeMode),
  PopupImageEditingFieldViewModel: () => (PopupImageEditingFieldViewModel),
  TextEditingFieldViewModel: () => (TextEditingFieldViewModel),
  TextEditingFieldViewModelBase: () => (TextEditingFieldViewModelBase),
  createCustomGlyphStyleCss: () => (createCustomGlyphStyleCss),
  focusTextElement: () => (focusTextElement),
  getCheckBoxTemplate: () => (getCheckBoxTemplate),
  imageAlignment: () => (imageAlignment),
  sizing: () => (sizing)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-export.js
var reporting_viewer_export_namespaceObject = {};
__webpack_require__.r(reporting_viewer_export_namespaceObject);
__webpack_require__.d(reporting_viewer_export_namespaceObject, {
  CsvExportOptionsPreview: () => (CsvExportOptionsPreview),
  DocxExportOptionsMergedPreview: () => (DocxExportOptionsMergedPreview),
  DocxExportOptionsPreview: () => (DocxExportOptionsPreview),
  ExportAction: () => (ExportAction),
  ExportOptionsEventHandlers: () => (ExportOptionsEventHandlers),
  ExportOptionsMergedPreview: () => (ExportOptionsMergedPreview),
  ExportOptionsModel: () => (ExportOptionsModel),
  ExportOptionsPreview: () => (ExportOptionsPreview),
  HtmlExportOptionsMergedPreview: () => (HtmlExportOptionsMergedPreview),
  HtmlExportOptionsPreview: () => (HtmlExportOptionsPreview),
  ImageExportOptionsMergedPreview: () => (ImageExportOptionsMergedPreview),
  ImageExportOptionsPreview: () => (ImageExportOptionsPreview),
  MhtExportOptionsMergedPreview: () => (MhtExportOptionsMergedPreview),
  MhtExportOptionsPreview: () => (MhtExportOptionsPreview),
  PdfExportOptionsPreview: () => (PdfExportOptionsPreview),
  RtfExportOptionsMergedPreview: () => (RtfExportOptionsMergedPreview),
  RtfExportOptionsPreview: () => (RtfExportOptionsPreview),
  XlsExportOptionsMergedPreview: () => (XlsExportOptionsMergedPreview),
  XlsExportOptionsPreview: () => (XlsExportOptionsPreview),
  XlsxExportOptionsMergedPreview: () => (XlsxExportOptionsMergedPreview),
  XlsxExportOptionsPreview: () => (XlsxExportOptionsPreview),
  docxExportModeMergedPreview: () => (docxExportModeMergedPreview),
  excludeModesForMergedDocuments: () => (excludeModesForMergedDocuments),
  exportModePreviewBase: () => (exportModePreviewBase),
  htmlExportModeMergedPreview: () => (htmlExportModeMergedPreview),
  htmlExportModePreview: () => (htmlExportModePreview),
  htmlExportModePreviewBase: () => (htmlExportModePreviewBase),
  imageExportModeMergedPreview: () => (imageExportModeMergedPreview),
  imageExportModePreview: () => (imageExportModePreview),
  imageExportModePreviewBase: () => (imageExportModePreviewBase),
  rtfExportModeMergedPreview: () => (rtfExportModeMergedPreview),
  xlsExportModeMergedPreview: () => (xlsExportModeMergedPreview),
  xlsExportModePreview: () => (xlsExportModePreview),
  xlsExportModePreviewBase: () => (xlsExportModePreviewBase),
  xlsxExportModeMergedPreview: () => (xlsxExportModeMergedPreview),
  xlsxExportModePreview: () => (xlsxExportModePreview),
  xlsxExportModePreviewBase: () => (xlsxExportModePreviewBase)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-export-metadata.js
var reporting_viewer_export_metadata_namespaceObject = {};
__webpack_require__.r(reporting_viewer_export_metadata_namespaceObject);
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, {
  docxExportModeMergedPreview: () => (docxExportModeMergedPreview),
  excludeModesForMergedDocuments: () => (excludeModesForMergedDocuments),
  exportModePreviewBase: () => (exportModePreviewBase),
  htmlExportModeMergedPreview: () => (htmlExportModeMergedPreview),
  htmlExportModePreview: () => (htmlExportModePreview),
  htmlExportModePreviewBase: () => (htmlExportModePreviewBase),
  imageExportModeMergedPreview: () => (imageExportModeMergedPreview),
  imageExportModePreview: () => (imageExportModePreview),
  imageExportModePreviewBase: () => (imageExportModePreviewBase),
  rtfExportModeMergedPreview: () => (rtfExportModeMergedPreview),
  xlsExportModeMergedPreview: () => (xlsExportModeMergedPreview),
  xlsExportModePreview: () => (xlsExportModePreview),
  xlsExportModePreviewBase: () => (xlsExportModePreviewBase),
  xlsxExportModeMergedPreview: () => (xlsxExportModeMergedPreview),
  xlsxExportModePreview: () => (xlsxExportModePreview),
  xlsxExportModePreviewBase: () => (xlsxExportModePreviewBase)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-internal.js
var reporting_viewer_internal_namespaceObject = {};
__webpack_require__.r(reporting_viewer_internal_namespaceObject);
__webpack_require__.d(reporting_viewer_internal_namespaceObject, {
  ActionLists: () => (ActionLists),
  BreadcrumbItem: () => (BreadcrumbItem),
  BreadcrumbModel: () => (BreadcrumbModel),
  ColumnSortOrder: () => (ColumnSortOrder),
  DocumentMapItemsProvider: () => (DocumentMapItemsProvider),
  DocumentMapModel: () => (DocumentMapModel),
  DocumentMapTreeListController: () => (DocumentMapTreeListController),
  ExportActionBase: () => (ExportActionBase),
  ExportHandler: () => (ExportHandler),
  ExportResultRequestData: () => (ExportResultRequestData),
  FullScreenActionBase: () => (FullScreenActionBase),
  PageLoader: () => (PageLoader),
  PreviewActions: () => (PreviewActions),
  PreviewDesignerActions: () => (PreviewDesignerActions),
  PreviewDisposableModel: () => (PreviewDisposableModel),
  PreviewDisposableModelBase: () => (PreviewDisposableModelBase),
  PreviewHandlersHelper: () => (PreviewHandlersHelper),
  PreviewModel: () => (PreviewModel),
  PreviewPage: () => (PreviewPage),
  PreviewRequestWrapper: () => (PreviewRequestWrapper),
  PreviewSelection: () => (PreviewSelection),
  ProgressViewModel: () => (ProgressViewModel),
  SearchResultNavigator: () => (SearchResultNavigator),
  SearchViewModel: () => (SearchViewModel),
  SortingProcessor: () => (SortingProcessor),
  ViewerAction: () => (ViewerAction),
  brickText: () => (brickText),
  convertToPercent: () => (convertToPercent),
  createDesktopPreview: () => (createDesktopPreview),
  createExportHandlerViewModel: () => (createExportHandlerViewModel),
  createPreview: () => (createPreview),
  createPreviewModel: () => (createPreviewModel),
  createPreviewPageViewModel: () => (createPreviewPageViewModel),
  createStandaloneParametersPanel: () => (createStandaloneParametersPanel),
  formatSearchResult: () => (formatSearchResult),
  getBrickValueForKey: () => (getBrickValueForKey),
  getCurrentResolution: () => (getCurrentResolution),
  getDockedElementCallback: () => (getDockedElementCallback),
  getEnumValues: () => (getEnumValues),
  getImageBase64: () => (getImageBase64),
  getUpdateProgressBarCallback: () => (getUpdateProgressBarCallback),
  initPreviewModel: () => (initPreviewModel),
  initializeAutoFitBinding: () => (initializeAutoFitBinding),
  initializeBrick: () => (initializeBrick),
  initializeBrickSelectionProg: () => (initializeBrickSelectionProg),
  initializeChildStyleBinding: () => (initializeChildStyleBinding),
  initializeLazyImagesBinding: () => (initializeLazyImagesBinding),
  initializeTextCopierBinding: () => (initializeTextCopierBinding),
  initializeToViewBinding: () => (initializeToViewBinding),
  initializeViewerExportBinding: () => (initializeViewerExportBinding),
  safelyRunWindowOpen: () => (safelyRunWindowOpen),
  stringToPosition: () => (stringToPosition),
  updateBricksPosition: () => (updateBricksPosition),
  updateExportHandlerViewModel: () => (updateExportHandlerViewModel),
  updatePreviewContentSize: () => (updatePreviewContentSize),
  updatePreviewPageViewModel: () => (updatePreviewPageViewModel),
  updatePreviewZoomWithAutoFit: () => (updatePreviewZoomWithAutoFit)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile.js
var reporting_viewer_mobile_namespaceObject = {};
__webpack_require__.r(reporting_viewer_mobile_namespaceObject);
__webpack_require__.d(reporting_viewer_mobile_namespaceObject, {
  MobileReportPreview: () => (MobileReportPreview),
  createMobileReportPreviewViewModel: () => (createMobileReportPreviewViewModel),
  updateMobileReportPreviewViewModel: () => (updateMobileReportPreviewViewModel)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile-internal.js
var reporting_viewer_mobile_internal_namespaceObject = {};
__webpack_require__.r(reporting_viewer_mobile_internal_namespaceObject);
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, {
  DateRangeParemeterPopupModel: () => (DateRangeParemeterPopupModel),
  EventProcessor: () => (EventProcessor),
  GalleryItem: () => (GalleryItem),
  GalleryItemBlock: () => (GalleryItemBlock),
  GalleryModel: () => (GalleryModel),
  MobileActionList: () => (MobileActionList),
  MobilePaginator: () => (MobilePaginator),
  MobilePreviewModel: () => (MobilePreviewModel),
  MobilePreviewPage: () => (MobilePreviewPage),
  MobilePreviewParameterHelper: () => (MobilePreviewParameterHelper),
  MobileSearchViewModel: () => (MobileSearchViewModel),
  ParametersPopupModel: () => (ParametersPopupModel),
  ParametersPopupModelBase: () => (ParametersPopupModelBase),
  SearchBarModel: () => (SearchBarModel),
  createDateRangeParemeterPopupViewModel: () => (createDateRangeParemeterPopupViewModel),
  createMobilePreview: () => (createMobilePreview),
  createParametersPopupBaseViewModel: () => (createParametersPopupBaseViewModel),
  createParametersPopupViewModel: () => (createParametersPopupViewModel),
  dxGalleryExtender: () => (dxGalleryExtender),
  dxGalleryReportPreview: () => (dxGalleryReportPreview),
  editorTemplates: () => (_editorTemplates_editorTemplates),
  getPreviewActionsMobile: () => (getPreviewActionsMobile),
  initializeMobilePaginatorBinding: () => (initializeMobilePaginatorBinding),
  initializeMobileSearchBinding: () => (initializeMobileSearchBinding),
  initializeMobileZoomBinding: () => (initializeMobileZoomBinding),
  initializeSlideBinding: () => (initializeSlideBinding),
  minScale: () => (minScale),
  slowdownDisctanceFactor: () => (slowdownDisctanceFactor),
  updatePreviewContentSizeMobile: () => (updatePreviewContentSizeMobile)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-parameters.js
var reporting_viewer_parameters_namespaceObject = {};
__webpack_require__.r(reporting_viewer_parameters_namespaceObject);
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, {
  MultiValueItem: () => (MultiValueItem),
  MultiValuesHelper: () => (MultiValuesHelper),
  ParameterHelper: () => (ParameterHelper),
  ParameterPanelItemBase: () => (ParameterPanelItemBase),
  ParametersPanelModelBase: () => (ParametersPanelModelBase),
  ParametersPanelStandalone: () => (ParametersPanelStandalone),
  PreviewParameter: () => (PreviewParameter),
  PreviewParameterHelper: () => (PreviewParameterHelper),
  PreviewParameterValueValidator: () => (PreviewParameterValueValidator),
  PreviewParametersPanelModel: () => (PreviewParametersPanelModel),
  _convertLocalDateToUTC: () => (_convertLocalDateToUTC),
  createPreviewParametersViewModel: () => (createPreviewParametersViewModel),
  getEditorType: () => (getEditorType),
  updateViewModel: () => (updateViewModel)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-settings.js
var reporting_viewer_settings_namespaceObject = {};
__webpack_require__.r(reporting_viewer_settings_namespaceObject);
__webpack_require__.d(reporting_viewer_settings_namespaceObject, {
  AsyncExportApproach: () => (AsyncExportApproach),
  EditablePreviewEnabled: () => (EditablePreviewEnabled),
  HandlerUri: () => (HandlerUri),
  MessageHandler: () => (MessageHandler),
  MultipageScrollingThrottle: () => (MultipageScrollingThrottle),
  PollingDelay: () => (PollingDelay),
  PreloadedPagesOffset: () => (PreloadedPagesOffset),
  ReportServerDownloadUri: () => (ReportServerDownloadUri),
  ReportServerExportUri: () => (ReportServerExportUri),
  ReportServerInvokeUri: () => (ReportServerInvokeUri),
  SearchAvailable: () => (SearchAvailable),
  TimeOut: () => (TimeOut),
  previewDefaultResolution: () => (previewDefaultResolution)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-utils.js
var reporting_viewer_utils_namespaceObject = {};
__webpack_require__.r(reporting_viewer_utils_namespaceObject);

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets.js
var reporting_viewer_widgets_namespaceObject = {};
__webpack_require__.r(reporting_viewer_widgets_namespaceObject);
__webpack_require__.d(reporting_viewer_widgets_namespaceObject, {
  DateRangeEditor: () => (DateRangeEditor),
  PictureEditMode: () => (PictureEditMode),
  createDateRangeEditor: () => (createDateRangeEditor),
  createDateRangeEditorViewModel: () => (createDateRangeEditorViewModel),
  predefinedDateRanges: () => (predefinedDateRanges),
  predefinedDateRangesModel: () => (predefinedDateRangesModel),
  viewerEditorTemplates: () => (viewerEditorTemplates)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets-internal.js
var reporting_viewer_widgets_internal_namespaceObject = {};
__webpack_require__.r(reporting_viewer_widgets_internal_namespaceObject);
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, {
  ImagePainter: () => (ImagePainter),
  ImagePickerAction: () => (ImagePickerAction),
  MultiValueEditor: () => (MultiValueEditor),
  Painter: () => (Painter),
  ParametersGroupEditor: () => (ParametersGroupEditor),
  PictureEditorActionId: () => (PictureEditorActionId),
  PictureEditorActionProvider: () => (PictureEditorActionProvider),
  PictureEditorModel: () => (PictureEditorModel),
  PictureEditorToolbarItem: () => (PictureEditorToolbarItem),
  PictureEditorToolbarItemWithPopup: () => (PictureEditorToolbarItemWithPopup),
  SignaturePainter: () => (SignaturePainter)
});

;// external "DevExpress.Analytics.Internal"
const external_DevExpress_Analytics_Internal_namespaceObject = DevExpress.Analytics.Internal;
;// ./node_modules/devexpress-reporting/common/customAction.js

class CustomAction extends external_DevExpress_Analytics_Internal_namespaceObject.BaseAction {
    constructor(model) {
        super(model);
    }
}

;// ./node_modules/devexpress-reporting/common/imageSource.js

class ImageSource {
    constructor(sourceType, data) {
        this.sourceType = sourceType;
        this.data = data;
    }
    getDataUrl() {
        switch (this.sourceType) {
            case 'svg':
                return 'data:image/svg+xml;charset=UTF-8;base64,' + encodeURI(this.data);
            case 'img':
                return 'data:image/x;base64,' + this.data;
        }
        if (this.sourceType === 'png' || this.sourceType === 'jpg' || this.sourceType === 'jpeg')
            return 'data:image/' + this.sourceType + ';base64,' + this.data;
    }
    static parse(val) {
        const [sourceType, data] = (val || '').split(',');
        return sourceType && new ImageSource(sourceType, data);
    }
    static toString(val) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('{0},{1}', val.sourceType, val.data);
    }
}

;// external "DevExpress.Analytics.Localization"
const external_DevExpress_Analytics_Localization_namespaceObject = DevExpress.Analytics.Localization;
;// external "DevExpress.localization"
const external_DevExpress_localization_namespaceObject = DevExpress.localization;
;// ./node_modules/devexpress-reporting/common/defaultCulture.js

const defaultCulture = 'Default';
const availableCultures = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)({
    'Default': '(Default)'
});

;// ./node_modules/devexpress-reporting/common/binding/exportOptionsEventArgs.js

class CustomizeExportOptionsEventArgs {
    constructor(options) {
        this._options = options;
    }
    HideExportOptionsPanel() { this._options.panelVisible = false; }
    HideFormat(format) { delete this._options.exportOptions[format.propertyName || format.format]; }
    HideProperties(format, ...paths) {
        const patchPropName = (propName, obj) => {
            const info = obj.getInfo && obj.getInfo();
            if (info) {
                const p = info.filter(x => x.modelName === propName || x.modelName === '@' + propName)[0];
                if (p)
                    return p.propertyName;
            }
            return propName;
        };
        const addPredicate = (obj, propName) => {
            propName = patchPropName(propName, obj);
            const oldPredicate = obj.isPropertyVisible;
            obj.isPropertyVisible =
                oldPredicate
                    ? ((x) => oldPredicate.apply(obj, [x]) && x !== propName)
                    : ((x) => x !== propName);
        };
        if (paths.length == 0) {
            addPredicate(this._options.exportOptions, format.format);
        }
        else {
            paths.forEach(property => {
                const path = Array.isArray(property)
                    ? property
                    : property.split('.');
                let obj = this._options.exportOptions[format.format];
                while (path.length > 1) {
                    obj = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(obj[patchPropName(path[0], obj)]);
                    path.splice(0, 1);
                }
                addPredicate(obj, path[0]);
            });
        }
    }
    GetExportOptionsModel(format) { return this._options.exportOptions[format.format]; }
}

;// ./node_modules/devexpress-reporting/common/binding/eventGenerator.js





class EventGenerator {
    static generateCustomizeLocalizationCallback(fireEvent) {
        return function (localizationCallbacks) {
            fireEvent('CustomizeLocalization', {
                LoadMessages: (messages) => {
                    if (!messages)
                        return;
                    if (typeof messages.then === 'function') {
                        localizationCallbacks.push(messages);
                    }
                    else {
                        (0,external_DevExpress_Analytics_Localization_namespaceObject.loadMessages)(messages);
                    }
                },
                SetAvailableCultures: (customCultures) => {
                    const newCultures = {};
                    newCultures[defaultCulture] = availableCultures()[defaultCulture];
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(newCultures, customCultures);
                    availableCultures(newCultures);
                },
                WidgetLocalization: external_DevExpress_localization_namespaceObject
            });
        };
    }
    static generateDesignerEvents(fireEvent) {
        const customizeActionsEvent = { publicName: 'CustomizeMenuActions', privateName: 'customizeActions' };
        const reportTabClosingEvent = { publicName: 'ReportTabClosing', privateName: 'reportTabClosing' };
        const reportTabClosedEvent = { publicName: 'ReportTabClosed', privateName: 'reportTabClosed' };
        const customizeParameterPropertiesEvent = { publicName: 'CustomizeParameterProperties', privateName: 'customizeParameterProperties' };
        const customizeParameterEditorsEvent = { publicName: 'CustomizeParameterEditors', privateName: 'customizeParameterEditors' };
        const customizeParameterLookUpSourceEvent = { publicName: 'CustomizeParameterLookUpSource', privateName: 'customizeParameterLookUpSource' };
        const exitDesignerEvent = { publicName: 'ExitDesigner', privateName: 'exitDesigner' };
        const reportSavingEvent = { publicName: 'ReportSaving', privateName: 'reportSaving' };
        const reportSavedEvent = { publicName: 'ReportSaved', privateName: 'reportSaved' };
        const reportOpeningEvent = { publicName: 'ReportOpening', privateName: 'reportOpening' };
        const reportOpenedEvent = { publicName: 'ReportOpened', privateName: 'reportOpened' };
        const tabChangedEvent = { publicName: 'TabChanged', privateName: 'tabChanged' };
        const onServerErrorEvent = { publicName: 'OnServerError', privateName: 'onServerError' };
        const customizePartsEvent = { publicName: 'CustomizeElements', privateName: 'customizeParts' };
        const componentAddedEvent = { publicName: 'ComponentAdded', privateName: 'componentAdded' };
        const customizeSaveDialogEvent = { publicName: 'CustomizeSaveDialog', privateName: 'customizeSaveDialog' };
        const customizeSaveAsDialogEvent = { publicName: 'CustomizeSaveAsDialog', privateName: 'customizeSaveAsDialog' };
        const customizeOpenDialogEvent = { publicName: 'CustomizeOpenDialog', privateName: 'customizeOpenDialog' };
        const customizeToolboxEvent = { publicName: 'CustomizeToolbox', privateName: 'customizeToolbox' };
        const customizeLocalizationEvent = { publicName: 'CustomizeLocalization', privateName: 'customizeLocalization' };
        const customizeFieldListActionsEvent = { publicName: 'CustomizeFieldListActions', privateName: 'customizeFieldListActions' };
        const onInitializingEvent = { publicName: 'OnInitializing', privateName: 'onInitializing' };
        const beforeRenderEvent = { publicName: 'BeforeRender', privateName: 'beforeRender' };
        const customizeWizardEvent = { publicName: 'CustomizeWizard', privateName: 'customizeWizard' };
        onInitializingEvent['callback'] = function onInitializing() {
            fireEvent(onInitializingEvent.publicName);
        };
        customizeLocalizationEvent['callback'] = EventGenerator.generateCustomizeLocalizationCallback(fireEvent);
        customizeActionsEvent['callback'] = function customizeActions(actions) {
            fireEvent(customizeActionsEvent.publicName, {
                Actions: actions,
                GetById: (actionId) => {
                    return actionId ? actions.filter(function (item) { return actionId === item.id; })[0] : null;
                }
            });
        };
        beforeRenderEvent['callback'] = function beforeRender(designerModel) {
            fireEvent(beforeRenderEvent.publicName, designerModel);
        };
        customizeParameterPropertiesEvent['callback'] = function customizeParameterProperties(parameter, parameterPanelLayoutItem, editors, getEditor, editOptions) {
            fireEvent(customizeParameterPropertiesEvent.publicName, {
                parameter,
                parameterPanelLayoutItem,
                editors,
                getEditor,
                editOptions
            });
        };
        customizeParameterEditorsEvent['callback'] = function customizeParameterEditors(parameter, info) {
            fireEvent(customizeParameterEditorsEvent.publicName, {
                parameter: parameter,
                info: info
            });
        };
        customizeParameterLookUpSourceEvent['callback'] = function customizeParameterLookUpSource(parameter, items) {
            const arg = {
                parameter,
                items,
                dataSource: null
            };
            fireEvent(customizeParameterLookUpSourceEvent.publicName, arg);
            return arg.dataSource;
        };
        exitDesignerEvent['callback'] = function exitDesigner() {
            fireEvent(exitDesignerEvent.publicName);
        };
        reportSavingEvent['callback'] = function reportSaving(args) {
            const arg = {
                Url: args.url,
                Report: args.report,
                Cancel: args.cancel
            };
            fireEvent(reportSavingEvent.publicName, arg);
            args.cancel = arg.Cancel;
        };
        reportSavedEvent['callback'] = function reportSaved(args) {
            const arg = {
                Url: args.url,
                Report: args.report
            };
            fireEvent(reportSavedEvent.publicName, arg);
        };
        reportOpenedEvent['callback'] = function reportOpened(args) {
            const arg = {
                Url: args.url,
                Report: args.report
            };
            fireEvent(reportOpenedEvent.publicName, arg);
        };
        reportOpeningEvent['callback'] = function reportOpening(args) {
            const arg = {
                Url: args.url,
                Report: args.report,
                Cancel: args.cancel
            };
            fireEvent(reportOpeningEvent.publicName, arg);
            args.cancel = arg.Cancel;
        };
        tabChangedEvent['callback'] = function tabChanged(tab) {
            fireEvent(tabChangedEvent.publicName, {
                Tab: tab
            });
        };
        onServerErrorEvent['callback'] = function onServerError(args) {
            fireEvent(onServerErrorEvent.publicName, { Error: args });
        };
        componentAddedEvent['callback'] = function componentAdded(args) {
            fireEvent(componentAddedEvent.publicName, { Model: args.model, Parent: args.parent });
        };
        customizePartsEvent['callback'] = function customizeParts(parts) {
            fireEvent(customizePartsEvent.publicName, {
                Elements: parts,
                GetById: id => {
                    return id
                        ? parts.filter(item => id === item.id)[0]
                        : null;
                }
            });
        };
        customizeSaveDialogEvent['callback'] = function customizeSaveDialog(popup) {
            fireEvent(customizeSaveDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeSaveAsDialogEvent['callback'] = function customizeSaveAsDialog(popup) {
            fireEvent(customizeSaveAsDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeOpenDialogEvent['callback'] = function customizeOpenDialog(popup) {
            fireEvent(customizeOpenDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeToolboxEvent['callback'] = function customizeToolbox(controlsFactory) {
            fireEvent(customizeToolboxEvent.publicName, {
                ControlsFactory: controlsFactory
            });
        };
        customizeFieldListActionsEvent['callback'] = function customizeFieldListActions(item, actions) {
            fireEvent(customizeFieldListActionsEvent.publicName, {
                Item: item,
                Actions: actions
            });
        };
        customizeWizardEvent['callback'] = function customizeWizard(type, wizard) {
            fireEvent(customizeWizardEvent.publicName, {
                Type: type,
                Wizard: wizard
            });
        };
        reportTabClosingEvent['callback'] = function reportTabClosing(tab, deffered) {
            const args = {
                Tab: tab,
                ReadyToClose: deffered,
                Handled: false
            };
            fireEvent(reportTabClosingEvent.publicName, args);
            return args.Handled;
        };
        reportTabClosedEvent['callback'] = function reportTabClosed(tab) {
            fireEvent(reportTabClosedEvent.publicName, {
                Tab: tab
            });
        };
        return [
            customizeActionsEvent,
            reportTabClosingEvent,
            reportTabClosedEvent,
            customizeParameterPropertiesEvent,
            customizeParameterEditorsEvent,
            customizeParameterLookUpSourceEvent,
            exitDesignerEvent,
            reportSavingEvent,
            reportSavedEvent,
            reportOpeningEvent,
            reportOpenedEvent,
            tabChangedEvent,
            onServerErrorEvent,
            customizePartsEvent,
            componentAddedEvent,
            customizeSaveDialogEvent,
            customizeSaveAsDialogEvent,
            customizeOpenDialogEvent,
            customizeToolboxEvent,
            customizeLocalizationEvent,
            customizeFieldListActionsEvent,
            onInitializingEvent,
            beforeRenderEvent,
            customizeWizardEvent
        ];
    }
    static generatePreviewEvents(fireEvent, prefix) {
        function generateBrickMethods(brick) {
            return {
                GetBrickText: function () { return brick() && brick().text(); },
                GetBrickValue: function (key = 'value') {
                    const contentValue = brick() && brick().content && brick().content.filter(function (x) { return x.Key === key; })[0];
                    return contentValue && contentValue.Value;
                },
            };
        }
        const previewClickEvent = { publicName: 'PreviewClick', privateName: 'previewClick' };
        const documentReadyEvent = { publicName: [prefix, 'DocumentReady'].join(''), privateName: 'documentReady' };
        const editingFieldChangedEvent = { publicName: [prefix, 'EditingFieldChanged'].join(''), privateName: 'editingFieldChanged' };
        const parametersSubmittedEvent = { publicName: [prefix, 'ParametersSubmitted'].join(''), privateName: 'parametersSubmitted' };
        const parametersInitializedEvent = { publicName: [prefix, 'ParametersInitialized'].join(''), privateName: 'parametersInitialized' };
        const parametersResetEvent = { publicName: [prefix, 'ParametersReset'].join(''), privateName: 'parametersReset' };
        const customizeParameterLookUpSourceEvent = { publicName: [prefix, 'CustomizeParameterLookUpSource'].join(''), privateName: 'customizeParameterLookUpSource' };
        const customizeParameterEditorsEvent = { publicName: 'CustomizeParameterEditors', privateName: 'customizeParameterEditors' };
        const customizeActionsEvent = { publicName: [prefix, 'CustomizeMenuActions'].join(''), privateName: 'customizeActions' };
        const customizePartsEvent = { publicName: [prefix, 'CustomizeElements'].join(''), privateName: 'customizeParts' };
        const customizeExportOptionsEvent = { publicName: [prefix, 'CustomizeExportOptions'].join(''), privateName: 'customizeExportOptions' };
        const onServerErrorEvent = { publicName: 'OnServerError', privateName: 'onServerError' };
        const onExportEvent = { publicName: [prefix, 'OnExport'].join(''), privateName: 'onExport' };
        customizeParameterEditorsEvent['callback'] = function customizeParameterEditors(parameter, info) {
            fireEvent(customizeParameterEditorsEvent.publicName, { parameter, info });
        };
        customizePartsEvent['callback'] = function customizeParts(parts) {
            fireEvent(customizePartsEvent.publicName, {
                Elements: parts,
                GetById: (templateId) => {
                    return templateId ? parts.filter(function (item) { return templateId === item.templateName; })[0] : null;
                }
            });
        };
        customizeActionsEvent['callback'] = function customizeActions(actions) {
            fireEvent(customizeActionsEvent.publicName, {
                Actions: actions,
                GetById: (actionId) => {
                    return actionId ? actions.filter(function (item) { return actionId === item.id; })[0] : null;
                }
            });
        };
        customizeParameterLookUpSourceEvent['callback'] = function customizeParameterLookUpSource(parameter, items) {
            const arg = {
                parameter,
                items,
                dataSource: null
            };
            fireEvent(customizeParameterLookUpSourceEvent.publicName, arg);
            return arg.dataSource;
        };
        previewClickEvent['callback'] = function previewClick(pageIndex, brick, defaultHandler) {
            const arg = {
                PageIndex: pageIndex,
                Brick: brick,
                DefaultHandler: defaultHandler,
                ...generateBrickMethods(() => brick),
                Handled: false
            };
            fireEvent(previewClickEvent.publicName, arg);
            return arg.Handled;
        };
        parametersResetEvent['callback'] = function parametersReset(model, parameters) {
            fireEvent(parametersResetEvent.publicName, {
                ParametersViewModel: model,
                Parameters: parameters
            });
        };
        parametersSubmittedEvent['callback'] = function parametersSubmitted(model, parameters) {
            fireEvent(parametersSubmittedEvent.publicName, {
                ParametersViewModel: model,
                Parameters: parameters
            });
        };
        parametersInitializedEvent['callback'] = function parametersInitialized(model, info, submit, shouldRequestParameters) {
            fireEvent(parametersInitializedEvent.publicName, {
                ParametersModel: model,
                ActualParametersInfo: info,
                Submit: submit,
                ShouldRequestParameters: shouldRequestParameters
            });
        };
        editingFieldChangedEvent['callback'] = function editingFieldChanged(field, oldValue, newValue) {
            const arg = {
                Field: field,
                OldValue: oldValue,
                NewValue: newValue,
                ...generateBrickMethods(() => field.brick)
            };
            fireEvent(editingFieldChangedEvent.publicName, arg);
            return arg.NewValue;
        };
        documentReadyEvent['callback'] = function documentReady(documentId, reportId, pageCount) {
            fireEvent(documentReadyEvent.publicName, {
                ReportId: reportId,
                DocumentId: documentId,
                PageCount: pageCount
            });
        };
        onServerErrorEvent['callback'] = function onServerError(args) {
            fireEvent(onServerErrorEvent.publicName, { Error: args });
        };
        onExportEvent['callback'] = function onExport(args) {
            fireEvent(onExportEvent.publicName, args);
        };
        customizeExportOptionsEvent['callback'] = function customizeExportOptions(options) {
            const arg = new CustomizeExportOptionsEventArgs(options);
            fireEvent(customizeExportOptionsEvent.publicName, arg);
        };
        const result = [
            previewClickEvent,
            documentReadyEvent,
            editingFieldChangedEvent,
            parametersSubmittedEvent,
            parametersInitializedEvent,
            parametersResetEvent,
            customizeParameterLookUpSourceEvent,
            customizeParameterEditorsEvent,
            customizeActionsEvent,
            customizePartsEvent,
            customizeExportOptionsEvent,
            onServerErrorEvent,
            onExportEvent,
        ];
        if (!prefix) {
            const onInitializingEvent = { publicName: 'OnInitializing', privateName: 'onInitializing' };
            onInitializingEvent['callback'] = function onInitializing() {
                fireEvent(onInitializingEvent.publicName);
            };
            result.push(onInitializingEvent);
            const beforeRenderEvent = { publicName: 'BeforeRender', privateName: 'beforeRender' };
            beforeRenderEvent['callback'] = function beforeRender(designerModel) {
                fireEvent(beforeRenderEvent.publicName, designerModel);
            };
            result.push(beforeRenderEvent);
            const customizeLocalizationEvent = { publicName: 'CustomizeLocalization', privateName: 'customizeLocalization' };
            customizeLocalizationEvent['callback'] = EventGenerator.generateCustomizeLocalizationCallback(fireEvent);
            result.push(customizeLocalizationEvent);
        }
        return result;
    }
}

;// external "DevExpress.Analytics.Internal.dxversions"
const external_DevExpress_Analytics_Internal_dxversions_namespaceObject = DevExpress.Analytics.Internal.dxversions;
;// ./node_modules/devexpress-reporting/dx-reporting-version.js
const version = '24.1.7';

;// ./node_modules/devexpress-reporting/common/versions.js


(external_DevExpress_Analytics_Internal_dxversions_namespaceObject.dxversions || external_DevExpress_Analytics_Internal_dxversions_namespaceObject)['reporting'] = version;

;// ./node_modules/devexpress-reporting/common/types.js
function convertMapToKeyValuePair(object) {
    const result = [];
    if (object) {
        Object.keys(object).forEach(key => {
            result.push({ Key: key, Value: object[key] });
        });
    }
    return result;
}

;// ./node_modules/devexpress-reporting/scopes/reporting.js















;// external "DevExpress.Analytics.Utils"
const external_DevExpress_Analytics_Utils_namespaceObject = DevExpress.Analytics.Utils;
;// external "DevExpress.Analytics.Widgets.Internal"
const external_DevExpress_Analytics_Widgets_Internal_namespaceObject = DevExpress.Analytics.Widgets.Internal;
;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/pictureEditMode.js
var PictureEditMode;
(function (PictureEditMode) {
    PictureEditMode[PictureEditMode["Image"] = 0] = "Image";
    PictureEditMode[PictureEditMode["Signature"] = 1] = "Signature";
    PictureEditMode[PictureEditMode["ImageAndSignature"] = 2] = "ImageAndSignature";
})(PictureEditMode || (PictureEditMode = {}));

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorTypes.js
var PictureEditorActionId;
(function (PictureEditorActionId) {
    PictureEditorActionId[PictureEditorActionId["OpenFile"] = 0] = "OpenFile";
    PictureEditorActionId[PictureEditorActionId["PickImage"] = 1] = "PickImage";
    PictureEditorActionId[PictureEditorActionId["Alignment"] = 2] = "Alignment";
    PictureEditorActionId[PictureEditorActionId["Brush"] = 3] = "Brush";
    PictureEditorActionId[PictureEditorActionId["Clear"] = 4] = "Clear";
    PictureEditorActionId[PictureEditorActionId["Reset"] = 5] = "Reset";
})(PictureEditorActionId || (PictureEditorActionId = {}));

;// ./node_modules/devexpress-reporting/common/utils/editingFieldExtensions.js





const Categories = {
    Image: () => 'Image',
    Numeric: () => 'Numeric',
    DateTime: () => 'Date-Time',
    Letters: () => 'Letters'
};
const ___isCancelFlag = '___isCancel';
class EditingFieldExtensions {
    constructor() {
        this._editors = {};
    }
    static instance() {
        if (!EditingFieldExtensions._instance) {
            EditingFieldExtensions._instance = new EditingFieldExtensions();
            EditingFieldExtensions._instance._registerStandartEditors();
        }
        return EditingFieldExtensions._instance;
    }
    _registerStandartEditors() {
        const getLocalizedString = external_DevExpress_Analytics_Utils_namespaceObject.getLocalization;
        EditingFieldExtensions.registerRegExpEditor('Integer', getLocalizedString('Integer', 'PreviewStringId.EditingFieldEditors_Integer'), Categories.Numeric(), /^-?\d*$/, /^-?\d+$/, '0');
        EditingFieldExtensions.registerRegExpEditor('IntegerPositive', getLocalizedString('Integer Positive', 'PreviewStringId.EditingFieldEditors_IntegerPositive'), Categories.Numeric(), /^\d+$/, /^\d+$/, '0');
        EditingFieldExtensions.registerRegExpEditor('FixedPoint', getLocalizedString('Fixed-Point', 'PreviewStringId.EditingFieldEditors_FixedPoint'), Categories.Numeric(), /^-?(\d+([\.,]?\d*)?)?$/, /^-?\d+([\.,]?\d*)?$/, '0');
        EditingFieldExtensions.registerRegExpEditor('FixedPointPositive', getLocalizedString('Fixed-Point Positive', 'PreviewStringId.EditingFieldEditors_FixedPointPositive'), Categories.Numeric(), /^\d+([\.,]?\d*)?$/, /^\d+([\.,]?\d*)?$/, '0');
        const dateEditorOptions = {
            onPreRender: (data, field) => {
                if (!(data.options.value instanceof Date)) {
                    const dateValue = (0,external_DevExpress_Analytics_Internal_namespaceObject.parseDate)(data.options.value, false) || new Date(Date.now());
                    data.options.value = dateValue;
                    field._editorValue = dateValue;
                }
            },
            onHideEditor: (field) => {
                field.setEditValue((0,external_DevExpress_Analytics_Internal_namespaceObject.formatDate)(field._editorValue));
            }
        };
        EditingFieldExtensions.registerEditor('Date', getLocalizedString('Date', 'PreviewStringId.EditingFieldEditors_Date'), Categories.DateTime(), dateEditorOptions, 'dxrp-editing-field-datetime');
        EditingFieldExtensions.registerImageEditor({
            name: 'Image',
            displayName: getLocalizedString('Image', 'PreviewStringId.EditingFieldEditors_Image'),
            drawingEnabled: false,
            imageLoadEnabled: true
        });
        EditingFieldExtensions.registerImageEditor({
            name: 'Signature',
            displayName: getLocalizedString('Signature', 'PreviewStringId.EditingFieldEditors_Signature'),
            drawingEnabled: true,
            imageLoadEnabled: false
        });
        EditingFieldExtensions.registerImageEditor({
            name: 'ImageAndSignature',
            displayName: getLocalizedString('Image And Signature', 'PreviewStringId.EditingFieldEditors_ImageAndSignature'),
            drawingEnabled: true,
            imageLoadEnabled: true
        });
        EditingFieldExtensions.registerRegExpEditor('OnlyLatinLetters', getLocalizedString('Only Latin Letters', 'PreviewStringId.EditingFieldEditors_OnlyLatinLetters'), Categories.Letters(), /^[a-zA-Z]*$/, /^[a-zA-Z]*$/, '');
    }
    static enableImageEditorShading() {
        ['Image', 'ImageAndSignature', 'Signature'].forEach(editorType => {
            const editor = EditingFieldExtensions.instance()._editors[editorType];
            (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, editor, { options: { registrationOptions: { shadingEnabled: true } } });
        });
    }
    static registerImageEditor(imageRegistrationOptions) {
        imageRegistrationOptions.imageLoadEnabled = imageRegistrationOptions.imageLoadEnabled === undefined ? !imageRegistrationOptions.images : imageRegistrationOptions.imageLoadEnabled;
        imageRegistrationOptions.drawingEnabled = imageRegistrationOptions.drawingEnabled === undefined ? false : imageRegistrationOptions.drawingEnabled;
        let editMode = PictureEditMode.ImageAndSignature;
        if (!imageRegistrationOptions.imageLoadEnabled)
            editMode = PictureEditMode.Signature;
        if (!imageRegistrationOptions.drawingEnabled)
            editMode = PictureEditMode.Image;
        const options = {
            editMode: editMode,
            registrationOptions: imageRegistrationOptions
        };
        options['callbacks'] = {
            customizeActions: (s, actions) => {
                if (imageRegistrationOptions.images) {
                    const imagePickerAction = s.actionsProvider.createImagePickerAction(imageRegistrationOptions.images, imageRegistrationOptions.searchEnabled, (base64) => {
                        s.painter.image = base64;
                        s.painter.refresh();
                    });
                    actions.splice(0, 0, imagePickerAction);
                    if (!imageRegistrationOptions.sizeOptionsEnabled) {
                        const alignmentAction = actions.filter(x => x.id === PictureEditorActionId.Alignment)[0];
                        alignmentAction && actions.splice(actions.indexOf(alignmentAction), 1);
                    }
                }
                if (!imageRegistrationOptions.imageLoadEnabled) {
                    const openFile = actions.filter((x => x.id === PictureEditorActionId.OpenFile))[0];
                    openFile && actions.splice(actions.indexOf(openFile), 1);
                }
                if (imageRegistrationOptions.sizeOptionsEnabled !== undefined && !imageRegistrationOptions.sizeOptionsEnabled) {
                    const alignmentAction = actions.filter(x => x.id === PictureEditorActionId.Alignment)[0];
                    alignmentAction && actions.splice(actions.indexOf(alignmentAction), 1);
                }
                if (imageRegistrationOptions.clearEnabled !== undefined && !imageRegistrationOptions.clearEnabled) {
                    const clearAction = actions.filter(x => x.id === PictureEditorActionId.Clear)[0];
                    clearAction && actions.splice(actions.indexOf(clearAction), 1);
                }
                if (imageRegistrationOptions.customizeActions) {
                    imageRegistrationOptions.customizeActions(s, actions);
                    return;
                }
            }
        };
        EditingFieldExtensions.registerEditor(imageRegistrationOptions.name, imageRegistrationOptions.displayName, Categories.Image(), options, 'dxrp-editing-field-image');
    }
    static registerEditor(name, displayName, category, options, template, validate, defaultVal = '') {
        let initValue;
        const extendOptions = {
            onInitialized: e => {
                if (validate) {
                    external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ValueEditorHelper.validateWidgetValue(e, validate, defaultVal);
                }
                initValue = e.component.option('value');
            },
            onKeyUp: e => {
                const editor = e.component;
                (0,external_DevExpress_Analytics_Internal_namespaceObject.processTextEditorHotKeys)(e.event, {
                    esc: () => {
                        editor[___isCancelFlag] = true;
                        editor.blur();
                        delete editor[___isCancelFlag];
                        editor.option('value', initValue);
                    },
                    ctrlEnter: () => {
                        editor.blur();
                    }
                });
            }
        };
        EditingFieldExtensions.instance()._editors[name] = {
            name: name,
            displayName: displayName,
            category: category,
            options: (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, options, extendOptions),
            template: template
        };
    }
    static registerMaskEditor(editorID, displayName, category, mask) {
        EditingFieldExtensions.registerEditor(editorID, displayName, category, { mask: mask });
    }
    static registerRegExpEditor(editorID, displayName, category, regExpEditing, regExpFinal, defaultVal) {
        const validate = (val) => { return regExpFinal.test(val); };
        EditingFieldExtensions.registerEditor(editorID, displayName, category, external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ValueEditorHelper.getValueEditorOptions(regExpEditing, validate, defaultVal), null, validate, defaultVal);
    }
    static unregisterEditor(editorID) {
        delete EditingFieldExtensions.instance()._editors[editorID];
    }
    categories(excludeCategories = []) {
        const categories = [];
        Object.keys(this._editors).forEach(p => {
            const category = this._editors[p].category;
            if (excludeCategories.indexOf(category) === -1 && categories.indexOf(category) === -1) {
                categories.push(category);
            }
        });
        return categories;
    }
    editors() {
        return Object.keys(this._editors).map(key => this._editors[key]);
    }
    editorsByCategories(categories = []) {
        const editors = [];
        Object.keys(this._editors).forEach(p => {
            if (categories.indexOf(this._editors[p].category) != -1) {
                editors.push(this._editors[p]);
            }
        });
        return editors;
    }
    editor(editorID) {
        return this._editors[editorID];
    }
}

;// ./node_modules/devexpress-reporting/scopes/reporting-editing.js



;// external "DevExpress.Analytics.Widgets"
const external_DevExpress_Analytics_Widgets_namespaceObject = DevExpress.Analytics.Widgets;
;// external "DevExpress.devices"
const external_DevExpress_devices_namespaceObject = DevExpress.devices;
var external_DevExpress_devices_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_devices_namespaceObject);
;// ./node_modules/devexpress-reporting/common/utils/_utils.js



const cultureInfo = {};
const generateGuid = () => {
    const getNewQuartet = function (i) {
        return Math.floor((1 + Math.random()) * Math.pow(0x10000, i)).toString(16).substring(1);
    };
    return getNewQuartet(2) + '-' + getNewQuartet(1) + '-' + getNewQuartet(1) + '-' + getNewQuartet(1) + '-' + getNewQuartet(3);
};
const fullscreenEventsList = ['fullscreenchange', 'mozfullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];
function createFullscreenComputed(element, parent) {
    const fullscreen = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(false, (newVal) => toggleFullscreen(element, newVal));
    let func = () => {
        const isFullscreen = document.fullscreen || !!document['msFullscreenElement'] || !!document['webkitFullscreenElement'];
        fullscreen.notifySubscribers(isFullscreen);
    };
    addFullscreenListener(document, func);
    parent._disposables.push({
        dispose: () => {
            removeFullscreenListener(document, func);
            func = null;
        }
    });
    return fullscreen;
}
function processZoomFactor(accessibilityCompliant) {
    if (!accessibilityCompliant)
        return;
    const defaultFontSize = 16;
    const zoomFactor = (parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('font-size')) || defaultFontSize) / defaultFontSize;
    if (zoomFactor !== (0,external_DevExpress_Analytics_Internal_namespaceObject.accessibilityFontSizeZoomFactor)()) {
        (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.propertiesGridEditorsPaddingLeft)(zoomFactor * (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.propertiesGridEditorsPaddingLeft)());
        (0,external_DevExpress_Analytics_Internal_namespaceObject.accessibilityFontSizeZoomFactor)(zoomFactor);
    }
}
function addFullscreenListener(element, func) {
    fullscreenEventsList.forEach((eventName) => {
        element.addEventListener(eventName, func);
    });
}
function removeFullscreenListener(element, func) {
    fullscreenEventsList.forEach((eventName) => {
        element.removeEventListener(eventName, func);
    });
}
function showFullscreen(element) {
    if (element.requestFullscreen)
        element.requestFullscreen();
    else if (element['mozRequestFullScreen'])
        element['mozRequestFullScreen']();
    else if (element['webkitRequestFullscreen'])
        element['webkitRequestFullscreen']();
    else if (element['msRequestFullscreen']) {
        element['msRequestFullscreen']();
    }
}
function exitFullscreen() {
    if (document.exitFullscreen)
        document.exitFullscreen();
    else if (document['mozCancelFullScreen'])
        document['mozCancelFullScreen']();
    else if (document['webkitExitFullscreen'])
        document['webkitExitFullscreen']();
    else if (document['msExitFullscreen']) {
        document['msExitFullscreen']();
    }
}
function toggleFullscreen(element, value) {
    if (!element)
        return;
    if (value)
        showFullscreen(element);
    else
        exitFullscreen();
}
const isIOS = external_DevExpress_devices_default().real().ios || external_DevExpress_devices_default().real()['mac'] && window.navigator.maxTouchPoints > 0;
const isAndroid = external_DevExpress_devices_default().real().android;
const isMobile = isIOS || isAndroid;
function transformNewLineCharacters(value) {
    return value.replace(/(\r\n|\n|\r)/g, '\r\n');
}

;// ./node_modules/devexpress-reporting/common/widgets/_editorTemplates.js


const editorTemplates = {
    csvSeparator: { header: 'dx-text',
        extendedOptions: () => ({
            placeholder: (cultureInfo['csvTextSeparator'] || '') + ' ' + (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('(Using System Separator)', 'PreviewStringId.ExportOption_CsvSeparator_UsingSystem')
        })
    }
};

;// ./node_modules/devexpress-reporting/common/exportOptions/metadata.js




const pageBorderColor = { propertyName: 'pageBorderColor', modelName: '@PageBorderColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Page Border Color', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.PageBorderColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'Black' };
const pageBorderWidth = { propertyName: 'pageBorderWidth', modelName: '@PageBorderWidth', displayName: 'Page Border Width', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.PageBorderWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1 };
const pageRange = { propertyName: 'pageRange', modelName: '@PageRange', displayName: 'Page Range', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.PageRange', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '' };
const expotOptionsTitle = { propertyName: 'title', modelName: '@Title', displayName: 'Title', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.Title', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: 'Document' };
const htmlTableLayout = { propertyName: 'tableLayout', modelName: '@TableLayout', displayName: 'Table Layout', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.TableLayout', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: true };
const docxTableLayout = { propertyName: 'tableLayout', modelName: '@TableLayout', displayName: 'Table Layout', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.TableLayout', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: false };
const allowURLsWithJSContent = { propertyName: 'allowURLsWithJSContent', modelName: '@AllowURLsWithJSContent', displayName: 'Allow URLs with JS Content', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.AllowURLsWithJSContent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: false };
const rasterizationResolution = { propertyName: 'rasterizationResolution', modelName: '@RasterizationResolution', displayName: 'Rasterization Resolution', localizationId: 'DevExpress.XtraPrinting.PageByPageExportOptionsBase.RasterizationResolution', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 96 };
const rasterizeImages = { propertyName: 'rasterizeImages', modelName: '@RasterizeImages', displayName: 'Rasterize Images', localizationId: 'DevExpress.XtraPrinting.PageByPageExportOptionsBase.RasterizeImages', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const useHRefHyperlinks = { propertyName: 'useHRefHyperlinks', modelName: '@UseHRefHyperlinks', displayName: 'Use HRef Hyperlinks', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.UseHRefHyperlinks', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: false };
const exportWatermarks = { propertyName: 'exportWatermarks', modelName: '@ExportWatermarks', displayName: 'Export Watermarks', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.ExportWatermarks', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const inlineCss = { propertyName: 'inlineCss', modelName: '@InlineCss', displayName: 'Inline CSS', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.InlineCss', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const removeSecondarySymbols = { propertyName: 'removeSecondarySymbols', modelName: '@RemoveSecondarySymbols', displayName: 'Remove Secondary Symbols', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.RemoveSecondarySymbols', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: false };
const characterSet = {
    propertyName: 'characterSet', modelName: '@CharacterSet', displayName: 'Character Set', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.CharacterSet', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'utf-8',
    valuesArray: [{ value: 'windows-1256', displayValue: 'Arabic (Windows)' }, { value: 'iso-8859-4', displayValue: 'Baltic (ISO)' }, { value: 'windows-1257', displayValue: 'Baltic (Windows)' }, { value: 'iso-8859-2', displayValue: 'Central European (ISO)' }, { value: 'windows-1250', displayValue: 'Central European (Windows)' }, { value: 'iso-8859-5', displayValue: 'Cyrillic (ISO)' }, { value: 'koi8-r', displayValue: 'Cyrillic (KOI8-r)' }, { value: 'windows-1251', displayValue: 'Cyrillic (Windows)' }, { value: 'iso-8859-15', displayValue: 'Latin 9 (ISO)' }, { value: 'utf-7', displayValue: 'Unicode (UTF-7)' }, { value: 'utf-8', displayValue: 'Unicode (UTF-8)' }, { value: 'iso-8859-1', displayValue: 'Western European (ISO)' }, { value: 'windows-1252', displayValue: 'Western European (Windows)' }]
};
function getExportModeValues(format = 'Html', preview, merged) {
    const singleFile = { value: 'SingleFile', displayValue: 'Single File', localizationId: (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('DevExpress.XtraPrinting.{0}ExportMode.SingleFile', format) };
    const singleFilePageByPage = { value: 'SingleFilePageByPage', displayValue: 'Single File (Page-by-Page)', localizationId: (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('DevExpress.XtraPrinting.{0}ExportMode.SingleFilePageByPage', format) };
    const differentFiles = { value: 'DifferentFiles', displayValue: 'Different Files', localizationId: (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('DevExpress.XtraPrinting.{0}ExportMode.DifferentFiles', format) };
    if (merged) {
        return [singleFilePageByPage];
    }
    else if (preview) {
        return [singleFile, singleFilePageByPage];
    }
    else {
        return [singleFile, singleFilePageByPage, differentFiles];
    }
}
const exportPageBreaks = { propertyName: 'exportPageBreaks', modelName: '@ExportPageBreaks', displayName: 'Export Page Breaks', localizationId: 'DevExpress.XtraPrinting.FormattedTextExportOptions.ExportPageBreaks', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const rtfExportMode = {
    propertyName: 'rtfExportMode', modelName: '@ExportMode', defaultVal: 'SingleFilePageByPage',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions.ExportMode',
    valuesArray: getExportModeValues('Rtf', true)
};
const docxExportMode = {
    propertyName: 'docxExportMode', modelName: '@ExportMode', defaultVal: 'SingleFilePageByPage',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.ExportMode',
    valuesArray: getExportModeValues('Docx', true)
};
const htmlExportMode = {
    propertyName: 'htmlExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.ExportMode',
    valuesArray: getExportModeValues('Html')
};
const embedImagesInHTML = {
    propertyName: 'embedImagesInHTML', modelName: '@EmbedImagesInHTML', defaultVal: false,
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Embed Images In HTML', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions.EmbedImagesInHTML', descriptionLocalizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.EmbedImagesInHTML.Description'
};
const imageExportMode = {
    propertyName: 'imageExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.ExportMode',
    valuesArray: getExportModeValues('Image')
};
const xlsExportMode = {
    propertyName: 'xlsExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.ExportMode',
    valuesArray: getExportModeValues('Xls')
};
const xlsxExportMode = {
    propertyName: 'xlsxExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions.ExportMode',
    valuesArray: getExportModeValues('Xlsx')
};
function getTextExportModeValues() {
    return [
        { value: 'Text', displayValue: 'Text', localizationId: 'DevExpress.XtraPrinting.TextExportMode.Text' },
        { value: 'Value', displayValue: 'Value', localizationId: 'DevExpress.XtraPrinting.TextExportMode.Value' }
    ];
}
const textExportMode = {
    propertyName: 'textExportMode', modelName: '@TextExportMode', displayName: 'Text Export Mode', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.TextExportMode', defaultVal: 'Text', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: getTextExportModeValues()
};
const xlsTextExportMode = {
    propertyName: 'textExportMode', modelName: '@TextExportMode', displayName: 'Text Export Mode', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.TextExportMode', defaultVal: 'Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: getTextExportModeValues()
};
const csvTextSeparator = { propertyName: 'separator', modelName: '@Separator', defaultVal: '', displayName: 'Separator', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.Separator', descriptionLocalizationId: 'DevExpress.XtraPrinting.CsvExportOptions.Separator.Description', editor: editorTemplates.csvSeparator };
const useCustomSeparator = { propertyName: 'useCustomSeparator', displayName: 'Use Custom Separator', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions.UseCustomSeparator', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const textEncodingType = {
    propertyName: 'encodingType', modelName: '@EncodingType', displayName: 'Encoding', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.Encoding', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Default', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'Default', displayValue: 'Windows-1252', localizationId: 'DevExpress.XtraPrinting.EncodingType.Default' },
        { value: 'ASCII', displayValue: 'us-ascii', localizationId: 'DevExpress.XtraPrinting.EncodingType.ASCII' },
        { value: 'Unicode', displayValue: 'utf-16', localizationId: 'DevExpress.XtraPrinting.EncodingType.Unicode' },
        { value: 'BigEndianUnicode', displayValue: 'utf-16BE', localizationId: 'DevExpress.XtraPrinting.EncodingType.BigEndianUnicode' },
        { value: 'UTF7', displayValue: 'utf-7', localizationId: 'DevExpress.XtraPrinting.EncodingType.UTF7' },
        { value: 'UTF8', displayValue: 'utf-8', localizationId: 'DevExpress.XtraPrinting.EncodingType.UTF8' },
        { value: 'UTF32', displayValue: 'utf-32', localizationId: 'DevExpress.XtraPrinting.EncodingType.UTF32' }
    ]
};
const xlsExportHyperlinks = {
    propertyName: 'exportHyperlinks', modelName: '@ExportHyperlinks', displayName: 'Export Hyperlinks', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.ExportHyperlinks', descriptionLocalizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.ExportHyperlinks.Description', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool
};
const xlsRawDataMode = {
    propertyName: 'rawDataMode', modelName: '@RawDataMode', displayName: 'Raw Data Mode', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.RawDataMode', descriptionLocalizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.RawDataMode.Description', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool
};
const xlsShowGridLines = {
    propertyName: 'showGridLines', modelName: '@ShowGridLines', displayName: 'Show Grid Lines', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.ShowGridLines', descriptionLocalizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.ShowGridLines.Description', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool
};
const xlsExportOptionsSheetName = {
    propertyName: 'sheetName', modelName: '@SheetName', displayName: 'Sheet Name', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.SheetName', descriptionLocalizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.SheetName.Description', defaultVal: 'Sheet', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text')
};

;// ./node_modules/devexpress-reporting/common/exportOptions/csvMetaData.js



const csvExportOptionsSerializationInfo = [
    textEncodingType,
    textExportMode,
    { propertyName: 'quoteStringsWithSeparators', modelName: '@QuoteStringsWithSeparators', displayName: 'Quote Strings with Separators', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.QuoteStringsWithSeparators', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    useCustomSeparator, csvTextSeparator,
    { propertyName: 'skipEmptyRows', modelName: '@SkipEmptyRows', displayName: 'Skip Empty Rows', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions.SkipEmptyRows', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'skipEmptyColumns', modelName: '@SkipEmptyColumns', displayName: 'Skip Empty Columns', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions.SkipEmptyColumns', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }
];

;// external "DevExpress.Analytics.Serializer.Native"
const external_DevExpress_Analytics_Serializer_Native_namespaceObject = DevExpress.Analytics.Serializer.Native;
;// ./node_modules/devexpress-reporting/common/exportOptions/csvExportOptions.js


class CsvExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new CsvExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, csvExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return csvExportOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.defaultSeparatorValue = '';
        this.assignProperty('useCustomSeparator', this._get('separator') !== this.defaultSeparatorValue);
        this.assignProperty('_separatorValue', this._get('separator'));
        this.addDisposable(this.subscribeProperty('useCustomSeparator', (newValue) => {
            if (!newValue)
                this._set('_separatorValue', this.defaultSeparatorValue);
        }));
        this.createComputedProperty('separator', {
            read: () => { return this._get('_separatorValue'); },
            write: (newValue) => {
                this._set('_separatorValue', newValue);
                if (this.useCustomSeparator)
                    this._set('useCustomSeparator', newValue !== this.defaultSeparatorValue);
            }
        }, [
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(this, ['_separatorValue'])
        ]);
    }
    isPropertyDisabled(name) {
        return (name === 'separator') && !(this._get('useCustomSeparator'));
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/options/docxExportDocumentOptions.js


class DocxExportDocumentOptions {
    static from(model, serializer) {
        return new DocxExportDocumentOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, docxExportDocumentOptionsSerializationInfo, refs);
    }
    getInfo() {
        return docxExportDocumentOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
    }
}
const docxExportDocumentOptionsSerializationInfo = [
    { propertyName: 'title', modelName: '@Title', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Title', displayName: 'Title', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'subject', modelName: '@Subject', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Subject', displayName: 'Subject', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'keywords', modelName: '@Keywords', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Keywords', displayName: 'Keywords', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'category', modelName: '@Category', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Category', displayName: 'Category', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'comments', modelName: '@Comments', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Comments', displayName: 'Comments', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'author', modelName: '@Author', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Author', displayName: 'Author', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
];

;// ./node_modules/devexpress-reporting/common/exportOptions/rtfMetaData.js



const rtfExportOptionsSerializationInfoBase = [
    pageRange,
    rasterizationResolution,
    exportPageBreaks,
    exportWatermarks
];
const emptyFirstPageHeaderFooter = { propertyName: 'emptyFirstPageHeaderFooter', modelName: '@EmptyFirstPageHeaderFooter', displayName: 'Empty First Page Header/Footer', localizationId: 'DevExpress.XtraPrinting.FormattedTextExportOptions.EmptyFirstPageHeaderFooter', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const keepRowHeight = { propertyName: 'keepRowHeight', modelName: '@KeepRowHeight', displayName: 'Keep Row Height', localizationId: 'DevExpress.XtraPrinting.FormattedTextExportOptions.KeepRowHeight', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const rtfExportOptionsSerializationInfo = [
    emptyFirstPageHeaderFooter,
    keepRowHeight,
    rtfExportMode
].concat(rtfExportOptionsSerializationInfoBase);

;// ./node_modules/devexpress-reporting/common/exportOptions/docxMetaData.js





const docxDocumentOptions = { propertyName: 'documentOptions', modelName: 'DocumentOptions', displayName: 'Document Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.DocumentOptions', from: DocxExportDocumentOptions.from, toJsonObject: DocxExportDocumentOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const docxExportOptionsSerializationInfo = [
    docxExportMode,
    exportWatermarks,
    pageRange,
    rasterizeImages,
    rasterizationResolution,
    emptyFirstPageHeaderFooter,
    keepRowHeight,
    exportPageBreaks,
    docxTableLayout,
    { propertyName: 'allowFloatingPictures', modelName: '@AllowFloatingPictures', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.AllowFloatingPictures', displayName: 'Allow Floating Pictures', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: false },
    docxDocumentOptions,
];

;// ./node_modules/devexpress-reporting/common/exportOptions/docxExportOptions.js



class DocxExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new DocxExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, docxExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return docxExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        const exportMode = this.docxExportMode ? this._get('docxExportMode') : docxExportMode.defaultVal;
        if (name === 'pageRange' || name === 'tableLayout')
            return exportMode === 'SingleFile';
        else if (name === 'emptyFirstPageHeaderFooter' || name === 'exportPageBreaks') {
            return exportMode === 'SingleFilePageByPage';
        }
        else if (name === 'keepRowHeight') {
            return exportMode === 'SingleFilePageByPage' && !this._get('tableLayout');
        }
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/emailExportOptions.js



class AdditionalRecipientModel {
    getInfo() {
        return additionalRecipientSerializationsInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
    }
}
AdditionalRecipientModel.createNew = () => {
    return new AdditionalRecipientModel({});
};

const additionalRecipientSerializationsInfo = [
    { propertyName: 'ContactName', modelName: '@ContactName', displayName: 'ContactName', localizationId: 'DevExpress.XtraPrinting.Recipient.ContactName', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'Address', modelName: '@Address', displayName: 'Address', localizationId: 'DevExpress.XtraPrinting.Recipient.Address', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'Prefix', modelName: '@Prefix', displayName: 'Prefix', localizationId: 'DevExpress.XtraPrinting.Recipient.Prefix', defaultVal: 'SMTP:', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    {
        propertyName: 'fieldType', modelName: '@FieldType', displayName: 'Field Type', localizationId: 'DevExpress.XtraPrinting.Recipient.FieldType', defaultVal: 'TO', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'TO', displayValue: 'TO', localizationId: 'DevExpress.XtraPrinting.RecipientFieldType.TO' },
            { value: 'CC', displayValue: 'CC', localizationId: 'DevExpress.XtraPrinting.RecipientFieldType.CC' },
            { value: 'BCC', displayValue: 'BCC', localizationId: 'DevExpress.XtraPrinting.RecipientFieldType.BCC' }
        ]
    },
];

;// ./node_modules/devexpress-reporting/common/exportOptions/emailMetaData.js



const nativeFormatOptionsSerializationInfo = [
    { propertyName: 'compressed', modelName: '@Compressed', displayName: 'Compressed', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.Compressed', descriptionLocalizationId: 'DevExpress.XtraPrinting.NativeFormatOptions.Compressed.Description', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'showOptionsBeforeSave', modelName: '@ShowOptionsBeforeSave', displayName: 'Show Options Before Save', localizationId: 'DevExpress.XtraPrinting.NativeFormatOptions.ShowOptionsBeforeSave', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }
];
const additionalRecipients = { propertyName: 'additionalRecipients', modelName: 'AdditionalRecipients', displayName: 'Additional Recipients', localizationId: 'DevExpress.XtraPrinting.EmailOptions.AdditionalRecipients', array: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'), addHandler: AdditionalRecipientModel.createNew, template: '#dxrd-commonCollectionItem' };
const emailOptionsSerializationInfo = [
    { propertyName: 'recipientName', modelName: '@RecipientName', displayName: 'Recipient Name', localizationId: 'DevExpress.XtraPrinting.EmailOptions.RecipientName', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'recipientAddress', modelName: '@RecipientAddress', displayName: 'Recipient Address', localizationId: 'DevExpress.XtraPrinting.EmailOptions.RecipientAddress', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'recipientAddressPrefix', modelName: '@RecipientAddressPrefix', displayName: 'Recipient Address Prefix', localizationId: 'DevExpress.XtraPrinting.EmailOptions.RecipientAddressPrefix', defaultVal: 'SMTP:', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'subject', modelName: '@Subject', displayName: 'Subject', localizationId: 'DevExpress.XtraPrinting.EmailOptions.Subject', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'body', modelName: '@Body', displayName: 'Body', localizationId: 'DevExpress.XtraPrinting.EmailOptions.Body', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    additionalRecipients
];

;// ./node_modules/devexpress-reporting/common/exportOptions/htmlMetaData.js

const htmlExportOptionsSerializationInfoBase = [
    pageBorderColor,
    pageBorderWidth,
    pageRange,
    rasterizationResolution,
    expotOptionsTitle,
    htmlTableLayout,
    useHRefHyperlinks,
    allowURLsWithJSContent,
    removeSecondarySymbols,
    exportWatermarks,
    characterSet
];
const htmlExportOptionsSerializationInfo = [htmlExportMode, embedImagesInHTML, inlineCss].concat(htmlExportOptionsSerializationInfoBase);

;// ./node_modules/devexpress-reporting/common/exportOptions/htmlExportOptions.js



class HtmlExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new HtmlExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, htmlExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return htmlExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return ((name === 'pageRange') || (name === 'pageBorderWidth') || (name === 'exportWatermarks')) && ((this.htmlExportMode ? this._get('htmlExportMode') : htmlExportMode.defaultVal) === 'SingleFile');
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/imageMetaData.js



const imageExportOptionsSerializationInfoBase = [
    pageBorderColor,
    pageBorderWidth,
    pageRange,
    { propertyName: 'resolution', modelName: '@Resolution', displayName: 'Resolution', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.Resolution', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 96 },
    {
        propertyName: 'format', modelName: '@Format', displayName: 'Format', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.Format', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Png', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'Png', displayValue: 'PNG' },
            { value: 'Jpeg', displayValue: 'JPEG' },
            { value: 'Svg', displayValue: 'SVG' },
            { value: 'Bmp', displayValue: 'BMP' },
            { value: 'Emf', displayValue: 'EMF' },
            { value: 'Wmf', displayValue: 'WMF' },
            { value: 'Tiff', displayValue: 'TIFF' },
            { value: 'Gif', displayValue: 'GIF' },
        ]
    }
];
const imageExportOptionsSerializationInfo = [imageExportMode,
    { propertyName: 'retainBackgroundTransparency', modelName: '@RetainBackgroundTransparency', displayName: 'Retain Background Transparency', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.RetainBackgroundTransparency', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    {
        propertyName: 'textRenderingMode', modelName: '@TextRenderingMode', displayName: 'Text Rendering Mode', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.TextRenderingMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'SystemDefault', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'SystemDefault', displayValue: 'SystemDefault', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.SystemDefault' },
            { value: 'SingleBitPerPixelGridFit', displayValue: 'SingleBitPerPixelGridFit', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.SingleBitPerPixelGridFit' },
            { value: 'SingleBitPerPixel', displayValue: 'SingleBitPerPixel', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.SingleBitPerPixel' },
            { value: 'AntiAliasGridFit', displayValue: 'AntiAliasGridFit', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.AntiAliasGridFit' },
            { value: 'AntiAlias', displayValue: 'AntiAlias', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.AntiAlias' },
            { value: 'ClearTypeGridFit', displayValue: 'ClearTypeGridFit', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.ClearTypeGridFit' }
        ]
    }
].concat(imageExportOptionsSerializationInfoBase);

;// ./node_modules/devexpress-reporting/common/exportOptions/imageExportOptions.js



class ImageExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new ImageExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, imageExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return imageExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return ((name === 'pageRange') || (name === 'pageBorderWidth')) && ((this.imageExportMode ? this._get('imageExportMode') : imageExportMode.defaultVal) === 'SingleFile');
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/mhtMetaData.js

const mhtExportOptionsSerializationInfoBase = [
    pageBorderColor,
    pageBorderWidth,
    pageRange,
    rasterizationResolution,
    expotOptionsTitle,
    characterSet,
    htmlTableLayout,
    useHRefHyperlinks,
    allowURLsWithJSContent,
    removeSecondarySymbols,
    exportWatermarks
];
const mhtExportOptionsSerializationInfo = [htmlExportMode, inlineCss].concat(mhtExportOptionsSerializationInfoBase);

;// ./node_modules/devexpress-reporting/common/exportOptions/mhtExportOptions.js



class MhtExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new MhtExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, mhtExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return mhtExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return ((name === 'pageRange') || (name === 'pageBorderWidth')) && ((this.htmlExportMode ? this._get('htmlExportMode') : htmlExportMode.defaultVal) === 'SingleFile');
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/options/pdfExportDocumentOptions.js


class PdfExportDocumentOptions {
    static from(model, serializer) {
        return new PdfExportDocumentOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportDocumentOptionsSerializationInfo, refs);
    }
    getInfo() {
        return pdfExportDocumentOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
    }
}
const author = { propertyName: 'author', modelName: '@Author', displayName: 'Author', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Author', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const application = { propertyName: 'application', modelName: '@Application', displayName: 'Application', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Application', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const title = { propertyName: 'title', modelName: '@Title', displayName: 'Title', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Title', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const subject = { propertyName: 'subject', modelName: '@Subject', displayName: 'Subject', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Subject', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const pdfExportDocumentOptionsSerializationInfo = [
    author, application, title, subject,
    { propertyName: 'keywords', modelName: '@Keywords', displayName: 'Keywords', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Keywords', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }
];

;// ./node_modules/devexpress-reporting/common/exportOptions/options/pdfPermissionsOptions.js



class PdfPermissionsOptions {
    static from(model, serializer) {
        return new PdfPermissionsOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportPermissionsOptionsSerializationInfo, refs);
    }
    getInfo() {
        return pdfExportPermissionsOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
    }
}
const pdfExportPermissionsOptionsSerializationInfo = [
    {
        propertyName: 'printingPermissions', modelName: '@PrintingPermissions', displayName: 'Printing Permissions', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.PrintingPermissions', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.PrintingPermissions.None' },
            { value: 'LowResolution', displayValue: 'LowResolution', localizationId: 'DevExpress.XtraPrinting.PrintingPermissions.LowResolution' },
            { value: 'HighResolution', displayValue: 'HighResolution', localizationId: 'DevExpress.XtraPrinting.PrintingPermissions.HighResolution' }
        ]
    },
    {
        propertyName: 'changingPermissions', modelName: '@ChangingPermissions', displayName: 'Changing Permissions', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.ChangingPermissions', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.None' },
            { value: 'InsertingDeletingRotating', displayValue: 'InsertingDeletingRotating', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.InsertingDeletingRotating' },
            { value: 'FillingSigning', displayValue: 'FillingSigning', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.FillingSigning' },
            { value: 'CommentingFillingSigning', displayValue: 'CommentingFillingSigning', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.CommentingFillingSigning' },
            { value: 'AnyExceptExtractingPages', displayValue: 'AnyExceptExtractingPages', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.AnyExceptExtractingPages' }
        ]
    },
    { propertyName: 'enableCopying', modelName: '@EnableCopying', displayName: 'Enable Copying', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.EnableCopying', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'enableScreenReaders', modelName: '@EnableScreenReaders', displayName: 'Enable Screen Readers', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.EnableScreenReaders', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }
];

;// ./node_modules/devexpress-reporting/common/exportOptions/options/pdfPasswordSecurityOptions.js




class PdfPasswordSecurityOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new PdfPasswordSecurityOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportPasswordSecurityOptionsSerializationInfo, refs);
    }
    getInfo() {
        return pdfExportPasswordSecurityOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        if (!(this.permissionsPassword && this._get('permissionsPassword'))) {
            if (name === 'permissionsOptions')
                return true;
            if (name === pdfEncryptionLevel.propertyName)
                return !(this.openPassword && this._get('openPassword'));
            return false;
        }
    }
    hasSensitiveData() {
        return !!(this.openPassword && this._get('openPassword') || this.permissionsPassword && this._get('permissionsPassword'));
    }
}
const pdfEncryptionLevel = {
    propertyName: 'encryptionLevel', modelName: '@EncryptionLevel', displayName: 'Encryption Level', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions.EncryptionLevel', defaultVal: 'AES128', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'ARC4', displayValue: 'ARC4', localizationId: 'DevExpress.XtraPrinting.PdfEncryptionLevel.ARC4' },
        { value: 'AES128', displayValue: 'AES128', localizationId: 'DevExpress.XtraPrinting.PdfEncryptionLevel.AES128' },
        { value: 'AES256', displayValue: 'AES256', localizationId: 'DevExpress.XtraPrinting.PdfEncryptionLevel.AES256' },
    ]
};
const pdfExportPasswordSecurityOptionsSerializationInfo = [
    (0,external_DevExpress_Analytics_Internal_namespaceObject.createPasswordSerializationInfo)({ propertyName: 'openPassword', modelName: '@OpenPassword', displayName: 'Open Password', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions.OpenPassword', defaultVal: '' }),
    pdfEncryptionLevel,
    (0,external_DevExpress_Analytics_Internal_namespaceObject.createPasswordSerializationInfo)({ propertyName: 'permissionsPassword', modelName: '@PermissionsPassword', displayName: 'Permissions Password', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions.PermissionsPassword', defaultVal: '' }),
    { propertyName: 'permissionsOptions', modelName: 'PermissionsOptions', displayName: 'Pdf Permissions Options', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions', from: PdfPermissionsOptions.from, toJsonObject: PdfPermissionsOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }
];

;// ./node_modules/devexpress-reporting/common/exportOptions/pdfMetaData.js





const pdfACompatibilityValues = { None: 'None', PdfA1a: 'PdfA1a', PdfA1b: 'PdfA1b', PdfA2a: 'PdfA2a', PdfA2b: 'PdfA2b', PdfA3a: 'PdfA3a', PdfA3b: 'PdfA3b' };
const pdfACompatibility = {
    propertyName: 'pdfACompatibility', modelName: '@PdfACompatibility', displayName: 'PDF A Compatibility', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.PdfACompatibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: pdfACompatibilityValues.None, from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: pdfACompatibilityValues.None, displayValue: pdfACompatibilityValues.None, localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.None' },
        { value: pdfACompatibilityValues.PdfA1a, displayValue: 'PDF/A-1a', localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA1a' },
        { value: pdfACompatibilityValues.PdfA1b, displayValue: 'PDF/A-1b', localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA1b' },
        { value: pdfACompatibilityValues.PdfA2a, displayValue: 'PDF/A-2a', localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA2a' },
        { value: pdfACompatibilityValues.PdfA2b, displayValue: 'PDF/A-2b', localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA2b' },
        { value: pdfACompatibilityValues.PdfA3a, displayValue: 'PDF/A-3a', localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA3a' },
        { value: pdfACompatibilityValues.PdfA3b, displayValue: 'PDF/A-3b', localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA3b' }
    ]
};
const pdfUACompatibilityValues = { None: 'None', PdfUA1: 'PdfUA1' };
const pdfUACompatibility = {
    propertyName: 'pdfUACompatibility', modelName: '@PdfUACompatibility', displayName: 'PDF UA Compatibility', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.PdfUACompatibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: pdfUACompatibilityValues.None, from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: pdfUACompatibilityValues.None, displayValue: pdfACompatibilityValues.None, localizationId: 'DevExpress.XtraPrinting.PdfUACompatibility.None' },
        { value: pdfUACompatibilityValues.PdfUA1, displayValue: pdfUACompatibilityValues.PdfUA1, localizationId: 'DevExpress.XtraPrinting.PdfUACompatibility.PdfUA1' }
    ]
};
const showPrintDialogOnOpen = {
    propertyName: 'showPrintDialogOnOpen', modelName: '@ShowPrintDialogOnOpen', displayName: 'Show Print Dialog on Open', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ShowPrintDialogOnOpen', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool
};
const pdfExportOptionsSerializationInfo = [
    { propertyName: 'convertImagesToJpeg', modelName: '@ConvertImagesToJpeg', displayName: 'Convert Images to Jpeg', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ConvertImagesToJpeg', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    showPrintDialogOnOpen,
    { propertyName: 'neverEmbeddedFonts', modelName: '@NeverEmbeddedFonts', displayName: 'Never Embedded Fonts', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.NeverEmbeddedFonts', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'exportEditingFieldsToAcroForms', modelName: '@ExportEditingFieldsToAcroForms', displayName: 'Export Editing Fields To AcroForms', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ExportEditingFieldsToAcroForms', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    {
        propertyName: 'imageQuality', modelName: '@ImageQuality', displayName: 'Image Quality', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ImageQuality', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Highest', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'Lowest', displayValue: 'Lowest', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Lowest' },
            { value: 'Low', displayValue: 'Low', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Low' },
            { value: 'Medium', displayValue: 'Medium', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Medium' },
            { value: 'High', displayValue: 'High', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.High' },
            { value: 'Highest', displayValue: 'Highest', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Highest' }
        ]
    },
    pdfACompatibility,
    pdfUACompatibility,
    pageRange,
    rasterizationResolution,
    rasterizeImages,
    { propertyName: 'documentOptions', modelName: 'DocumentOptions', displayName: 'Document Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.DocumentOptions', from: PdfExportDocumentOptions.from, toJsonObject: PdfExportDocumentOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'pdfPasswordSecurityOptions', modelName: 'PasswordSecurityOptions', displayName: 'Pdf Password Security Options', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions', from: PdfPasswordSecurityOptions.from, toJsonObject: PdfPasswordSecurityOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }
];

;// ./node_modules/devexpress-reporting/common/exportOptions/pdfExportOptions.js


class PdfExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new PdfExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportOptionsSerializationInfo, refs);
    }
    isPropertyDisabled(propertyName) {
        const _pdfACompatibility = this.pdfACompatibility ? this._get('pdfACompatibility') : pdfACompatibility.defaultVal;
        const _pdfUACompatibility = this.pdfUACompatibility ? this._get('pdfUACompatibility') : pdfUACompatibility.defaultVal;
        const _showDialogOnOpen = this.showPrintDialogOnOpen ? this._get('showPrintDialogOnOpen') : showPrintDialogOnOpen.defaultVal;
        if (propertyName === 'exportEditingFieldsToAcroForms')
            return _pdfACompatibility === pdfACompatibilityValues.PdfA1b || _pdfACompatibility === pdfACompatibilityValues.PdfA1a;
        else if (propertyName === 'neverEmbeddedFonts')
            return _pdfACompatibility != pdfACompatibilityValues.None || _pdfUACompatibility != pdfUACompatibilityValues.None;
        else if (propertyName === 'pdfPasswordSecurityOptions' || propertyName === 'showPrintDialogOnOpen')
            return _pdfACompatibility != pdfACompatibilityValues.None;
        else if (propertyName === 'pdfACompatibility')
            return _showDialogOnOpen;
    }
    getInfo() {
        return pdfExportOptionsSerializationInfo;
    }
    hasSensitiveData() {
        return this.pdfPasswordSecurityOptions && this.pdfPasswordSecurityOptions.hasSensitiveData();
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/printPreviewMetaData.js

const printPreviewOptionsSerializationInfo = [
    { propertyName: 'defaultFileName', modelName: '@DefaultFileName', displayName: 'Default File Name', localizationId: 'DevExpress.XtraPrinting.PrintPreviewOptions.DefaultFileName', defaultVal: 'Document', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }
];

;// ./node_modules/devexpress-reporting/common/exportOptions/printPreviewOptions.js


class PrintPreviewOptions {
    static from(model, serializer) {
        return new PrintPreviewOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, printPreviewOptionsSerializationInfo, refs);
    }
    getInfo() {
        return printPreviewOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/rtfExportOptions.js



class RtfExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new RtfExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, rtfExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return rtfExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        const exportMode = this.rtfExportMode ? this._get('rtfExportMode') : rtfExportMode.defaultVal;
        if (name === 'pageRange')
            return exportMode === 'SingleFile';
        else if (name === 'emptyFirstPageHeaderFooter' || name === 'exportPageBreaks' || name === 'keepRowHeight') {
            return exportMode === 'SingleFilePageByPage';
        }
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/textMetaData.js



const textExportOptionsSerializationInfo = [
    textEncodingType,
    { propertyName: 'quoteStringsWithSeparators', modelName: '@QuoteStringsWithSeparators', displayName: 'Quote Strings with Separators', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.QuoteStringsWithSeparators', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'separator', modelName: '@Separator', displayName: 'Separator', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.Separator', defaultVal: 'TAB', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    textExportMode
];

;// ./node_modules/devexpress-reporting/common/exportOptions/textExportOptions.js


class TextExportOptions {
    static from(model, serializer) {
        return new TextExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, textExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return textExportOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/xlsMetaData.js





const documentOptionsSerializationsInfo = [
    author, application, title, subject,
    { propertyName: 'tags', modelName: '@Tags', displayName: 'Tags', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Tags', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'category', modelName: '@Category', displayName: 'Category', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Category', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'comments', modelName: '@Comments', displayName: 'Comments', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Comments', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'company', modelName: '@Company', displayName: 'Company', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Company', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }
];
const documentOptions = { propertyName: 'documentOptions', modelName: 'DocumentOptions', displayName: 'Document Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.DocumentOptions', info: documentOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const encryptionOptionsSerializationsInfo = [
    {
        propertyName: 'type', modelName: '@Type', displayName: 'Type', localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Type', defaultVal: 'Strong', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'Strong', displayValue: 'Strong', localizationId: 'DevExpress.XtraPrinting.XlEncryptionType.Strong' },
            { value: 'Compatible', displayValue: 'Compatible', localizationId: 'DevExpress.XtraPrinting.XlEncryptionType.Compatible' }
        ]
    },
    (0,external_DevExpress_Analytics_Internal_namespaceObject.createPasswordSerializationInfo)({ propertyName: 'password', modelName: '@Password', displayName: 'Password', localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Password', defaultVal: '' })
];
const encryptionOptions = { propertyName: 'encryptionOptions', modelName: 'EncryptionOptions', displayName: 'Encryption Options', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.EncryptionOptions', info: encryptionOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const xlsExportOptionsSerializationInfoCommon = [
    xlsExportHyperlinks,
    pageRange,
    xlsRawDataMode,
    xlsExportOptionsSheetName,
    xlsShowGridLines,
    xlsTextExportMode,
    rasterizeImages,
    rasterizationResolution,
    { propertyName: 'fitToPrintedPageWidth', modelName: '@FitToPrintedPageWidth', displayName: 'Fit To Printed Page Width', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.FitToPrintedPageWidth', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'fitToPrintedPageHeight', modelName: '@FitToPrintedPageHeight', displayName: 'Fit To Printed Page Height', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.FitToPrintedPageHeight', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    {
        propertyName: 'ignoreErrors', modelName: '@IgnoreErrors', displayName: 'Ignore Errors', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.IgnoreErrors', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'None', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum, valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.XlIgnoreErrors.None' },
            { value: 'NumberStoredAsText', displayValue: 'Number Stored As Text', localizationId: 'DevExpress.XtraPrinting.XlIgnoreErrors.NumberStoredAsText' }
        ]
    },
    {
        propertyName: 'rightToLeftDocument', modelName: '@RightToLeftDocument', displayName: 'Right To Left Document', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.RightToLeftDocument', defaultVal: 'Default', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
            { value: 'True', displayValue: 'True', localizationId: 'DevExpress.Utils.DefaultBoolean.True' },
            { value: 'False', displayValue: 'False', localizationId: 'DevExpress.Utils.DefaultBoolean.False' },
            { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.Utils.DefaultBoolean.Default' }
        ]
    },
    documentOptions,
    encryptionOptions
];
const xlsExportOptionsSerializationInfoBase = [
    { propertyName: 'suppress256ColumnsWarning', modelName: '@Suppress256ColumnsWarning', displayName: 'Suppress 256 Columns Warning', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.Suppress256ColumnsWarning', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'suppress65536RowsWarning', modelName: '@Suppress65536RowsWarning', displayName: 'Suppress 65536 Rows Warning', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.Suppress65536RowsWarning', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    {
        propertyName: 'workbookColorPaletteCompliance', modelName: '@WorkbookColorPaletteCompliance', displayName: 'Workbook Color Palette Compliance', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.WorkbookColorPaletteCompliance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'ReducePaletteForExactColors', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'ReducePaletteForExactColors', displayValue: 'ReducePaletteForExactColors', localizationId: 'DevExpress.XtraPrinting.WorkbookColorPaletteCompliance.ReducePaletteForExactColors' },
            { value: 'AdjustColorsToDefaultPalette', displayValue: 'AdjustColorsToDefaultPalette', localizationId: 'DevExpress.XtraPrinting.WorkbookColorPaletteCompliance.AdjustColorsToDefaultPalette' }
        ]
    }
];
const xlsExportOptionsSerializationInfo = [xlsExportMode].concat(xlsExportOptionsSerializationInfoCommon, xlsExportOptionsSerializationInfoBase);

;// ./node_modules/devexpress-reporting/common/exportOptions/xlsExportOptions.js



class XlsExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new XlsExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, xlsExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return xlsExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return name === 'pageRange' && (this.xlsExportMode ? this._get('xlsExportMode') : xlsExportMode.defaultVal) === 'SingleFile';
    }
    hasSensitiveData() {
        return !!(this.encryptionOptions && this.unwrap(external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.getPropertyValue(this.encryptionOptions, 'password')));
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/xlsxMetaData.js


const xlsxExportOptionsSerializationInfo = [xlsxExportMode].concat(xlsExportOptionsSerializationInfoCommon);

;// ./node_modules/devexpress-reporting/common/exportOptions/xlsxExportOptions.js



class XlsxExportOptions extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    static from(model, serializer) {
        return new XlsxExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, xlsxExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return xlsxExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return name === 'pageRange' && (this.xlsxExportMode ? this._get('xlsxExportMode') : xlsxExportMode.defaultVal) === 'SingleFile';
    }
    hasSensitiveData() {
        return !!(this.encryptionOptions && this.unwrap(external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.getPropertyValue(this.encryptionOptions, 'password')));
    }
}

;// ./node_modules/devexpress-reporting/common/exportOptions/exportOptionsMetaData.js













const exportOptionsSerializationInfo = [
    { propertyName: 'csv', modelName: 'Csv', displayName: 'CSV Export Options', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Csv.Description', from: CsvExportOptions.from, toJsonObject: CsvExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'email', modelName: 'Email', displayName: 'E-mail Options', localizationId: 'DevExpress.XtraPrinting.EmailOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Email.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: emailOptionsSerializationInfo },
    { propertyName: 'html', modelName: 'Html', displayName: 'HTML Export Options', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Html.Description', from: HtmlExportOptions.from, toJsonObject: HtmlExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'image', modelName: 'Image', displayName: 'Image Export Options', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Image.Description', from: ImageExportOptions.from, toJsonObject: ImageExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'mailMessage', modelName: 'MailMessage', displayName: 'Mail Message Export Options', localizationId: 'DevExpress.XtraPrinting.MailMessageExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.MailMessage.Description', from: MhtExportOptions.from, toJsonObject: MhtExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'mht', modelName: 'Mht', displayName: 'MHT Export Options', localizationId: 'DevExpress.XtraPrinting.MhtExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Mht.Description', from: MhtExportOptions.from, toJsonObject: MhtExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'nativeFormat', modelName: 'NativeFormat', displayName: 'Native Format Options', localizationId: 'DevExpress.XtraPrinting.NativeFormatOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.NativeFormat.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: nativeFormatOptionsSerializationInfo },
    { propertyName: 'pdf', modelName: 'Pdf', displayName: 'PDF Export Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Pdf.Description', from: PdfExportOptions.from, toJsonObject: PdfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'printPreview', modelName: 'PrintPreview', displayName: 'Print Preview Options', localizationId: 'DevExpress.XtraPrinting.PrintPreviewOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.PrintPreview.Description', from: PrintPreviewOptions.from, toJsonObject: PrintPreviewOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'rtf', modelName: 'Rtf', displayName: 'RTF Export Options', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Rtf.Description', from: RtfExportOptions.from, toJsonObject: RtfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'textExportOptions', modelName: 'Text', displayName: 'Text Export Options', localizationId: 'DevExpress.XtraPrinting.TextExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Text.Description', from: TextExportOptions.from, toJsonObject: TextExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'xls', modelName: 'Xls', displayName: 'XLS Export Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Xls.Description', from: XlsExportOptions.from, toJsonObject: XlsExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'xlsx', modelName: 'Xlsx', displayName: 'XLSx Export Options', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Xlsx.Description', from: XlsxExportOptions.from, toJsonObject: XlsxExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
    { propertyName: 'docx', modelName: 'Docx', displayName: 'Docx Export Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Docx.Description', from: DocxExportOptions.from, toJsonObject: DocxExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }
];

;// ./node_modules/devexpress-reporting/common/exportOptions/exportOptions.js


class ExportOptions {
    static from(model, serializer) {
        return new ExportOptions().deserialize(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, exportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return exportOptionsSerializationInfo;
    }
    deserialize(model, serializer) {
        serializer = serializer || (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)();
        serializer.deserialize(this, model);
        return this;
    }
}

;// ./node_modules/devexpress-reporting/scopes/reporting-export.js



































;// ./node_modules/devexpress-reporting/scopes/reporting-export-metadata.js





























;// external "ko"
const external_ko_namespaceObject = ko;
;// ./node_modules/devexpress-reporting/common/utils/_chartUtils.js

function getChartChildComponents(chartComponent, path, displayPath = '') {
    const result = [];
    if (chartComponent?.getChildComponents) {
        const childComponents = chartComponent.getChildComponents();
        childComponents.forEach(childComponent => {
            if (!childComponent.component)
                return;
            const currentPath = path ? `${path}.${childComponent.path}` : childComponent.path;
            const currentDisplayPath = displayPath ? `${displayPath}.${childComponent.path}` : childComponent.path;
            result.push(..._getChartSubComponents(childComponent.component, currentPath, currentDisplayPath));
        });
    }
    return result;
}
function _getChartSubComponents(component, path, displayPath) {
    const result = [];
    if (Array.isArray(component)) {
        component.forEach((element, index) => {
            result.push(..._getChartSubComponents(element, `${path}.${index}`, `${displayPath}.${external_ko_namespaceObject.unwrap(element.name)}`));
        });
    }
    else {
        result.push({ component: component, path: path, displayPath: displayPath });
        result.push(...getChartChildComponents(component, path, displayPath));
    }
    return result;
}

;// ./node_modules/devexpress-reporting/common/utils/_locker.js
class Locker {
    constructor() {
        this.lock = (action) => {
            if (!this.isUpdate) {
                this.isUpdate = true;
                action();
                this.isUpdate = false;
            }
        };
        this.isUpdate = false;
    }
}

;// ./node_modules/devexpress-reporting/scopes/reporting-internal.js









;// external "DevExpress.Analytics.Elements"
const external_DevExpress_Analytics_Elements_namespaceObject = DevExpress.Analytics.Elements;
;// ./node_modules/devexpress-reporting/common/metadata.js


const previewBackColor = { propertyName: 'backColor', modelName: '@BackColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
const previewSides = { propertyName: 'borders', modelName: '@Sides' };
const previewBorderColor = { propertyName: 'borderColor', modelName: '@BorderColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
const previewBorderStyle = { propertyName: 'borderStyle', modelName: '@BorderStyle' };
const previewBorderDashStyle = { propertyName: 'borderDashStyle', modelName: '@BorderDashStyle' };
const previewBorderWidth = { propertyName: 'borderWidth', modelName: '@BorderWidthSerializable', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel };
const previewForeColor = { propertyName: 'foreColor', modelName: '@ForeColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
const previewFont = { propertyName: 'font', modelName: '@Font' };
const previewPadding = { propertyName: 'padding', modelName: '@Padding', from: external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.from };
const previewTextAlignment = { propertyName: 'textAlignment', modelName: '@TextAlignment' };
const brickStyleSerializationsInfo = [
    previewBackColor,
    previewSides,
    previewBorderColor,
    previewBorderStyle,
    previewBorderDashStyle,
    previewBorderWidth,
    previewForeColor,
    previewFont,
    previewPadding,
    previewTextAlignment
];

;// ./node_modules/devexpress-reporting/scopes/reporting-metadata.js





;// ./node_modules/devexpress-reporting/viewer/constants.js
const ActionId = {
    Design: 'dxxrp-design',
    FirstPage: 'dxxrp-first-page',
    PrevPage: 'dxxrp-prev-page',
    Pagination: 'dxxrp-pagination',
    NextPage: 'dxxrp-next-page',
    LastPage: 'dxxrp-last-page',
    MultipageToggle: 'dxxrp-multipage-toggle',
    HighlightEditingFields: 'dxxrp-highlight-editing-fields',
    ZoomOut: 'dxxrp-zoom-out',
    ZoomSelector: 'dxxrp-zoom-selector',
    ZoomIn: 'dxxrp-zoom-in',
    Print: 'dxxrp-print',
    PrintPage: 'dxxrp-print-page',
    ExportTo: 'dxxrp-export-menu',
    Search: 'dxxrp-search',
    FullScreen: 'dxrd-fullscreen'
};
const ExportFormatID = {
    PDF: { text: 'PDF', textId: 'ASPxReportsStringId.ExportName_pdf', format: 'pdf' },
    XLS: { text: 'XLS', textId: 'ASPxReportsStringId.ExportName_xls', format: 'xls' },
    XLSX: { text: 'XLSX', textId: 'ASPxReportsStringId.ExportName_xlsx', format: 'xlsx' },
    RTF: { text: 'RTF', textId: 'ASPxReportsStringId.ExportName_rtf', format: 'rtf' },
    MHT: { text: 'MHT', textId: 'ASPxReportsStringId.ExportName_mht', format: 'mht' },
    HTML: { text: 'HTML', textId: 'ASPxReportsStringId.ExportName_html', format: 'html' },
    Text: { text: 'Text', textId: 'ASPxReportsStringId.ExportName_txt', format: 'txt', propertyName: 'textExportOptions' },
    CSV: { text: 'CSV', textId: 'ASPxReportsStringId.ExportName_csv', format: 'csv' },
    Image: { text: 'Image', textId: 'ASPxReportsStringId.ExportName_png', format: 'image' },
    DOCX: { text: 'DOCX', textId: 'ASPxReportsStringId.ExportName_docx', format: 'docx' }
};
const PreviewElements = {
    Toolbar: 'dxrd-preview-toolbar-scrollable',
    Breadcrumb: 'dxrd-preview-breadcrumb',
    Surface: 'dxrdp-surface',
    RightPanel: 'dxrd-right-panel-template-base',
    ExportTool: 'dxrd-export-tool',
    ParametersPanel: 'dxrd-preview-parameters'
};
var ZoomAutoBy;
(function (ZoomAutoBy) {
    ZoomAutoBy[ZoomAutoBy["None"] = 1] = "None";
    ZoomAutoBy[ZoomAutoBy["WholePage"] = 0] = "WholePage";
    ZoomAutoBy[ZoomAutoBy["PageWidth"] = -1] = "PageWidth";
})(ZoomAutoBy || (ZoomAutoBy = {}));

;// ./node_modules/devexpress-reporting/viewer/accessibility/_previewBricksKeyboardHelper.js

class PreviewBricksKeyboardHelper extends external_DevExpress_Analytics_Internal_namespaceObject.KeyboardHelperWithArrowButtonBase {
    dispose() {
        this._activeBricksSubscription && this._activeBricksSubscription.dispose();
        this._afterInitializeCallback = null;
        this._initTimeout && clearTimeout(this._initTimeout);
        super.dispose();
    }
    constructor(viewModel) {
        super();
        this.controlElementClassName = 'dx-accessibility-page-item';
        this.liveRegionId = 'dxrd-preview-bricks-live-region';
        this._needFocusNext = false;
        this._firstSelectedBrickIndex = 0;
        this._lastSelectedBrickIndex = 0;
        this._resetBricksIndexes = () => {
            this._firstSelectedBrickIndex = 0;
            this._lastSelectedBrickIndex = 0;
        };
        this._resetBricks = () => {
            return this._currentPage.selectBrick('');
        };
        this.delayedInit = () => {
            this._initTimeout && clearTimeout(this._initTimeout);
            this._initTimeout = setTimeout(() => {
                this.initialize();
            }, 20);
        };
        this.reset = () => {
            this._resetBricks();
            this._resetBricksIndexes();
        };
        this.active = false;
        this._getSelectedContent = viewModel.getSelectedContent;
        this._pages = () => viewModel.pages;
        this._goToPage = viewModel.goToPage.bind(viewModel);
        this._usePageKeyboardNavigation = () => viewModel.showMultipagePreview;
        this._disposables.push({
            dispose: viewModel.events.on('currentPageChanged', (args) => {
                const newPage = args.newValue;
                if (newPage) {
                    this._currentPage = newPage;
                    this.delayedInit();
                }
            })
        });
    }
    initialize() {
        if (!this._currentPage)
            return;
        this._bricks = () => this._currentPage.bricks;
        if (this._usePageKeyboardNavigation()) {
            this.startIndex = this._pages().indexOf(this._currentPage);
        }
        else {
            this.startIndex = 0;
        }
        super.initialize();
        this._afterInitializeCallback && this._afterInitializeCallback();
        this._afterInitializeCallback = null;
        if (this._needFocusNext) {
            this.controlElements[this.startIndex].element.focus();
            this.lastFocusItem().setAttribute('tabindex', '-1');
            this._needFocusNext = false;
        }
        this._activeBricksSubscription && this._activeBricksSubscription.dispose();
        this._activeBricksSubscription = {
            dispose: this._currentPage.events.on('activeBricksChanged', (args) => {
                const activeBricks = this._currentPage.activeBricks;
                this._liveRegionTimeout && clearTimeout(this._liveRegionTimeout);
                if (!activeBricks.length)
                    return;
                this._liveRegionTimeout = this.liveRegion().changeText(this._getSelectedContent(','));
                const _bricks = this._bricks();
                for (let i = 0; i < _bricks.length; i++) {
                    const brick = _bricks[i];
                    if (brick === activeBricks[0])
                        this._firstSelectedBrickIndex = i;
                    if (brick === activeBricks[activeBricks.length - 1]) {
                        this._lastSelectedBrickIndex = i;
                        break;
                    }
                }
            })
        };
    }
    clickHandler() { }
    itemHandleEscKey(e, index) {
        if (!this.active)
            return false;
        this.controlElements[index].element.classList.remove('dx-accessibility-active-state');
        this.active = false;
        this._resetBricks();
        return true;
    }
    _actionExecute(brick, e) {
        if (brick.navigation) {
            brick.onClick(e);
        }
        else if (brick.efIndex) {
            const editField = this._currentPage.editingFields[brick.efIndex - 1];
            const efItems = Array.prototype.slice.call(e.target.querySelectorAll('.dx-accessibility-editing-field-item'));
            const efItem = efItems[brick.efIndex - 1];
            if (efItem && editField.canActivateEditor) {
                editField.activateEditor(editField, { target: efItem, currentTarget: efItem });
                const subscriptionDispose = editField.events.on('activeChanged', (args) => {
                    if (!args.newValue) {
                        if (document.activeElement === document.body) {
                            e.target.focus();
                        }
                        this._currentPage.activateBrick(brick);
                        this.active = true;
                        e.target.classList.add('dx-accessibility-active-state');
                        subscriptionDispose();
                    }
                });
                this._disposables.push({ dispose: subscriptionDispose });
            }
            else if (editField.onClick) {
                editField.onClick(editField, e);
            }
        }
    }
    _getNonEmptyBrick(index, reverse) {
        const nextIndex = index + (reverse ? -1 : 1);
        const _bricks = this._bricks();
        let brick = _bricks[nextIndex];
        if (reverse && nextIndex < 0 || nextIndex > _bricks.length - 1) {
            brick = this._getNonEmptyBrick(reverse ? _bricks.length : -1, reverse);
        }
        if (brick.efIndex && brick.efIndex > 0)
            return brick;
        else if (brick.accessibleDescription || brick.text() || brick.efIndex || brick.navigation)
            return brick;
        return this._getNonEmptyBrick(nextIndex, reverse);
    }
    _pageChangeHandle(action, newIndex, reverse = false) {
        this._needFocusNext = true;
        this.reset();
        if (!this.active) {
            if (this._usePageKeyboardNavigation())
                return action();
            else {
                const lastFocusItem = this.lastFocusItem();
                lastFocusItem.setAttribute('tabindex', '0');
                lastFocusItem.focus();
                return false;
            }
        }
        this._currentPage.activateBrick(this._getNonEmptyBrick(newIndex, reverse));
        return true;
    }
    _activatePage(e, index) {
        if (this._bricks().length) {
            const page = this.controlElements[index];
            this.active = true;
            page.element.classList.add('dx-accessibility-active-state');
            const lastBrick = this._getNonEmptyBrick(this._lastSelectedBrickIndex - 1, false);
            lastBrick && this._currentPage.activateBrick(lastBrick);
        }
    }
    itemHandleHomeKey(e, index) {
        return this._pageChangeHandle(() => super.itemHandleHomeKey(e, index), -1);
    }
    itemHandleEndKey(e, index) {
        return this._pageChangeHandle(() => super.itemHandleEndKey(e, index), this._bricks().length, true);
    }
    itemHandleLeftArrowKey(e, index) {
        return this._pageChangeHandle(() => {
            this.setFocusToPrevious(index);
            return true;
        }, this._firstSelectedBrickIndex, true);
    }
    itemHandleRightArrowKey(e, index) {
        return this._pageChangeHandle(() => {
            this.setFocusToNext(index);
            return true;
        }, this._lastSelectedBrickIndex);
    }
    itemHandleEnterKey(e, index) {
        if (this.active) {
            if (this._lastSelectedBrickIndex !== this._firstSelectedBrickIndex)
                return false;
            const brick = this._bricks()[this._lastSelectedBrickIndex];
            if (brick && brick.active) {
                this._actionExecute(brick, e);
            }
        }
        else if (this._usePageKeyboardNavigation() && this._currentPage !== this._pages()[index]) {
            this._goToPage(index);
            this._afterInitializeCallback = () => {
                this._activatePage(e, index);
            };
        }
        else {
            this._activatePage(e, index);
        }
        return true;
    }
    itemHandleSpaceKey(e, index) {
        return this.itemHandleEnterKey(e, index);
    }
    setFocusToPrevious(currentIndex) {
        return super.setFocusToPrevious(currentIndex);
    }
    setFocusToNext(currentIndex) {
        return super.setFocusToNext(currentIndex);
    }
    createControlElement(element, index) {
        return new PreviewPageControlsElement(element, this);
    }
}
class PreviewPageControlsElement extends external_DevExpress_Analytics_Internal_namespaceObject.AccessibilityControlElementBase {
    dispose() {
        this.element.removeEventListener('focus', this._focusHandler);
        super.dispose();
    }
    constructor(element, _keyboardHelper) {
        super(element);
        this.element = element;
        this._keyboardHelper = _keyboardHelper;
        this._focusHandler = () => {
            this._keyboardHelper.liveRegion().changeText((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Press Enter or Space to switch to the document reading mode.', 'ASPxReportsStringId.WebDocumentViewer_AriaSwitchToDocumentReadingMode'));
            this.element.classList.remove('dx-accessibility-active-state');
            if (this._keyboardHelper.active) {
                this._keyboardHelper.reset();
            }
            this._keyboardHelper.active = false;
        };
        element.addEventListener('focus', this._focusHandler);
    }
}

;// ./node_modules/devexpress-reporting/viewer/settings.js

const EditablePreviewEnabled = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(true);
const SearchAvailable = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(true);
const ReportServerInvokeUri = '/RSWebDocumentViewerApi/Invoke';
const ReportServerExportUri = '/RSWebDocumentViewerApi/Download';
const AsyncExportApproach = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(false);
const MessageHandler = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)({
    processError: (message, showForUser, prefix = '', element) => {
        showForUser && (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(message.substr(prefix.length), undefined, undefined, undefined, undefined, element);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)(message, false);
    },
    processMessage: (message, showForUser, element) => { showForUser && (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(message, external_DevExpress_Analytics_Internal_namespaceObject.NotifyType.success, 10000, undefined, undefined, element); },
    processWarning: (message, showForUser, element) => { showForUser && (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(message, undefined, undefined, undefined, undefined, element); }
});
const HandlerUri = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)('DXXRDV.axd');
const previewDefaultResolution = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(96);
const ReportServerDownloadUri = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)('');
const PollingDelay = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(300);
const TimeOut = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(105000);
const PreloadedPagesOffset = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(15);
const MultipageScrollingThrottle = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(150);

;// ./node_modules/devexpress-reporting/viewer/editing/models/editingFieldBase.js
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

class EditingFieldBase extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    deferredUpdateViewModel() { return false; }
    constructor(page) {
        super();
        this.canActivateEditor = false;
        this.zoom = page.zoom;
        this.addDisposable(page.events.on('zoomChanged', (args) => {
            this.zoom = page.zoom;
        }));
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('zoom', this.zoom)
            .generateProperty('template', this.template)
            .generateProperty('field', this.field.getViewModel())
            .generateProperty('canActivateEditor', this.canActivateEditor)
            .generateProperty('activateEditor', (viewModel, event) => this.activateEditor(viewModel.getModel(), event))
            .generateProperty('onClick', (viewModel, event) => this.onClick(viewModel.getModel(), event))
            .generateProperty('containerStyle', this.containerStyle)
            .generateProperty('active', this.active)
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'zoom')
            viewModel.zoom = this.zoom;
        if (args.propertyName === 'active')
            viewModel.active = this.active;
        if (args.propertyName === 'containerStyle')
            viewModel.containerStyle = this.containerStyle;
    }
    onPropertyChanged(args) { }
    activateEditor(model, event) { }
    onClick(model, event) { }
}
__decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], EditingFieldBase.prototype, "containerStyle", void 0);
__decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1)
], EditingFieldBase.prototype, "zoom", void 0);
__decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], EditingFieldBase.prototype, "active", void 0);

;// ./node_modules/devexpress-reporting/viewer/editing/models/textEditingField.js





class TextEditingFieldViewModelBase extends EditingFieldBase {
    constructor() {
        super(...arguments);
        this.canActivateEditor = true;
    }
    keypressAction(data, event) {
        this.field._editorValue = event.target['value'];
        (0,external_DevExpress_Analytics_Internal_namespaceObject.processTextEditorHotKeys)(event, {
            esc: () => {
                this.hideEditor(false);
            },
            ctrlEnter: () => {
                this.hideEditor(true);
            }
        });
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('textStyle', this.textStyle)
            .getViewModel();
    }
    activateEditor(model, event, elementFocused = false) {
        const eventTarget = event?.currentTarget;
        if (!elementFocused) {
            setTimeout(() => {
                focusTextElement(eventTarget);
            });
        }
    }
}
class TextEditingFieldViewModel extends TextEditingFieldViewModelBase {
    constructor(field, pageWidth, pageHeight, page, bounds) {
        super(page);
        this.template = 'dxrp-editing-field-container';
        this.wordWrap = true;
        this.canActivateEditor = true;
        const brickStyle = field.model().brickOptions;
        const style = { rtl: () => brickStyle.rtl };
        (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        const cssCalculator = new external_DevExpress_Analytics_Internal_namespaceObject.CssCalculator(style, !!brickStyle.rtlLayout);
        const padding = cssCalculator.paddingsCss();
        let verticalPadding = parseInt(padding['paddingTop']) + parseInt(padding['paddingBottom']);
        if (cssCalculator.borderCss()['borderTop'] !== 'none') {
            verticalPadding += external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borderWidth']);
        }
        if (cssCalculator.borderCss()['borderBottom'] !== 'none') {
            verticalPadding += external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borderWidth']);
        }
        this.breakOffsetStyle = {
            top: bounds.offset.y * -100 / bounds.height + '%',
            left: bounds.offset.x * -100 / bounds.width + '%'
        };
        this.textStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, cssCalculator.fontCss(), cssCalculator.foreColorCss(), cssCalculator.textAlignmentCss());
        this.field = field;
        if (brickStyle.wordWrap != undefined) {
            this.wordWrap = brickStyle.wordWrap;
        }
        this.hideEditor = (shouldCommit) => {
            setTimeout(() => {
                if (shouldCommit && this.active) {
                    if (editorOptions.onHideEditor) {
                        editorOptions.onHideEditor(field);
                    }
                    else {
                        field.setEditValue(field._editorValue);
                    }
                }
                else {
                    field._editorValue = field.getEditValue();
                }
                this.active = false;
            }, 1);
        };
        const editor = EditingFieldExtensions.instance().editor(field.editorName());
        const editorOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, editor?.options || {});
        this.data = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)().createDefaultModel(this)
            .generateProperty('value', field._editorValue)
            .generateProperty('hideEditor', (shouldCommit) => this.hideEditor(shouldCommit))
            .generateProperty('keypressAction', (data, event) => this.keypressAction(data, event))
            .generateProperty('textStyle', this.textStyle)
            .generateProperty('options', editorOptions)
            .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
            .generateProperty('getOptions', (templateOptions) => (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.data.options, templateOptions))
            .getViewModel();
        const isCustomEditor = !!(editor && editor.template && editor.template !== 'dxrp-editing-field-datetime');
        if (!isCustomEditor) {
            const self = this;
            this.data.options = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, editorOptions, {
                value: field._editorValue,
                onValueChanged: (event) => {
                    if (!event.component[___isCancelFlag]) {
                        editorOptions?.onValueChanged && editorOptions?.onValueChanged(event);
                        this.field._editorValue = event.value;
                        this.data.options.value = event.value;
                    }
                },
                onFocusOut: (e) => {
                    self.hideEditor(true);
                }
            });
        }
        if (editor) {
            this.editorTemplate = editor.template || 'dxrp-editing-field-mask';
        }
        else {
            this.editorTemplate = 'dxrp-editing-field-text';
        }
        this._updateContainerStyle = () => {
            if (!bounds)
                return;
            this.containerStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
                width: bounds.width + 'px',
                height: bounds.height + 'px',
                'line-height': (bounds.height - verticalPadding) + 'px',
                top: bounds.top * 100 / pageHeight + '%',
                left: bounds.left * 100 / pageWidth + '%',
                cursor: this.field.readOnly ? 'auto' : 'text'
            }, this.active || !this.field.htmlValue ? cssCalculator.borderCss() : { border: 'none' }, isCustomEditor && this.active || (!!this.field.htmlValue && !this.active) ? { padding: 0 } : cssCalculator.paddingsCss(), { 'border-color': 'transparent' });
        };
        const borderWidth = external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borderWidth']);
        const borders = external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borders']);
        if (borderWidth && borderWidth > 0 && borders !== 'None') {
            this.borderStyle = {
                left: '-' + borderWidth + 'px',
                top: '-' + borderWidth + 'px',
                paddingRight: (borderWidth * 2 - 2) + 'px',
                paddingBottom: (borderWidth * 2 - 2) + 'px'
            };
        }
        this.addDisposable(this.field.events.on('htmlValueChanged', (args) => {
            this._updateContainerStyle();
        }), this.field.events.on('readOnlyChanged', (args) => {
            this._updateContainerStyle();
        }), this.field.events.on('_editorValueChanged', (args) => {
            this.data.value = this.field._editorValue;
        }));
        this._updateContainerStyle();
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'active')
            this._updateContainerStyle();
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('borderStyle', this.borderStyle)
            .generateProperty('breakOffsetStyle', this.breakOffsetStyle)
            .generateProperty('wordWrap', this.wordWrap)
            .generateProperty('editorTemplate', this.editorTemplate)
            .generateProperty('data', this.data)
            .getViewModel();
    }
    activateEditor(viewModel, e) {
        if (this.field.readOnly || this.active) {
            return;
        }
        const data = viewModel.data;
        if (data && data.options && data.options.onPreRender) {
            data.options.onPreRender(this.data, this.field);
        }
        this.active = true;
        let elementFocused = false;
        const options = viewModel['options'];
        if (options?.onEditorShown) {
            elementFocused = options.onEditorShown(this.data, e?.currentTarget);
        }
        super.activateEditor(viewModel, e, elementFocused);
    }
}
function focusTextElement(target) {
    const element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(target).find('input:visible').element || (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(target).find('textarea:visible').element;
    if (!element)
        return;
    element?.focus();
    if (element['setSelectionRange']) {
        element['setSelectionRange'](element['value'].length, element['value'].length);
    }
}

;// ./node_modules/devexpress-reporting/viewer/editing/models/characterCombEditingField.js




class CharacterCombEditingFieldViewModel extends TextEditingFieldViewModelBase {
    constructor(field, pageWidth, pageHeight, page, bounds) {
        super(page);
        this.field = field;
        this.template = 'dxrp-character-comb-editing-field';
        this.canActivateEditor = true;
        const brickStyle = field.model().brickOptions;
        const style = { rtl: () => brickStyle.rtl };
        (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        const cssCalculator = new external_DevExpress_Analytics_Internal_namespaceObject.CssCalculator(style, !!brickStyle.rtlLayout);
        let verticalPadding = parseInt(cssCalculator.paddingsCss()['paddingTop']) + parseInt(cssCalculator.paddingsCss()['paddingBottom']);
        const borderCss = cssCalculator.borderCss();
        if (borderCss['borderTop'] !== 'none') {
            verticalPadding += external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borderWidth']);
        }
        if (borderCss['borderBottom'] !== 'none') {
            verticalPadding += external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borderWidth']);
        }
        this.textStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, cssCalculator.fontCss(), cssCalculator.foreColorCss(), cssCalculator.textAlignmentCss());
        this.hideEditor = (shouldCommit) => {
            setTimeout(() => {
                if (shouldCommit) {
                    field.setEditValue(field._editorValue);
                }
                else {
                    field._editorValue = field.getEditValue();
                }
                this.active = false;
            });
        };
        this.containerStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
            width: bounds.width + 'px',
            height: bounds.height + 'px',
            'line-height': (bounds.height - verticalPadding) + 'px',
            top: bounds.top * 100 / pageHeight + '%',
            left: bounds.left * 100 / pageWidth + '%'
        }, cssCalculator.fontCss(), cssCalculator.foreColorCss());
        let cellVerticalPadding = 0;
        let borderCellStyle = 'none';
        ['Left', 'Top', 'Right', 'Bottom'].forEach((item) => {
            if (borderCss['border' + item] !== 'none') {
                borderCellStyle = borderCss['border' + item];
                cellVerticalPadding = external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['borderWidth']) * 2;
            }
        });
        const cellStyle = {
            'border': borderCellStyle,
            'text-align': 'center',
            'position': 'absolute',
            'box-sizing': 'border-box',
            'border-color': 'transparent'
        };
        const characterCombBounds = field.model().brickOptions.characterCombBounds;
        const cells = [];
        const rowTops = {};
        for (let i = 0; i < characterCombBounds.length; i++) {
            cells.push({
                style: (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
                    width: characterCombBounds[i].width + 'px',
                    height: characterCombBounds[i].height + 'px',
                    'line-height': (characterCombBounds[i].height - cellVerticalPadding) + 'px',
                    top: characterCombBounds[i].top + 'px',
                    left: characterCombBounds[i].left + 'px'
                }, cellStyle),
                text: ''
            });
            rowTops[characterCombBounds[i].top] = i;
        }
        const rowsCount = Object.keys(rowTops).length;
        const colsCount = cells.length / rowsCount;
        this.cells = this._createCellViewModels(cells);
        CharacterCombEditingFieldViewModel.setText(this.cells, external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['textAlignment']), style.rtl(), field.getEditValue(), rowsCount, colsCount);
        this.addDisposable(this.field.events.on('editValueChanged', (args) => {
            CharacterCombEditingFieldViewModel.setText(this.cells, external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(style['textAlignment']), style.rtl(), args.newValue, rowsCount, colsCount);
        }));
    }
    _createCellViewModels(cells) {
        return cells.map(cell => (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .createDefaultModel(this)
            .generateProperty('text', cell.text)
            .generateProperty('style', cell.style)
            .getViewModel());
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('cells', this.cells)
            .generateProperty('hideEditor', (data) => this.hideEditor(!!data))
            .generateProperty('keypressAction', (data, event) => this.keypressAction(data, event))
            .getViewModel();
    }
    activateEditor(viewModel, event) {
        if (!this.field.readOnly && !this.active) {
            this.active = true;
            super.activateEditor(viewModel, event);
        }
    }
    static setText(cells, textAlignment, rtl, text, rowsCount, colsCount) {
        for (let j = 0; j < cells.length; j++) {
            cells[j].text = '';
        }
        const textRowsCount = Math.ceil(text.length / colsCount);
        const textLastRowColCount = text.length % colsCount;
        let startRow = -1;
        if (textAlignment.indexOf('Bottom') === 0) {
            startRow = rowsCount - textRowsCount;
        }
        else if (textAlignment.indexOf('Middle') === 0) {
            startRow = Math.floor((rowsCount - textRowsCount) / 2);
        }
        else {
            startRow = 0;
        }
        let lastRowStartCol = -1;
        if (textAlignment.indexOf('Right') > 0) {
            lastRowStartCol = rtl ? 0 : (colsCount - textLastRowColCount);
        }
        else if (textAlignment.indexOf('Center') > 0) {
            lastRowStartCol = Math.floor((colsCount - textLastRowColCount) / 2);
        }
        else {
            lastRowStartCol = rtl ? (colsCount - textLastRowColCount) : 0;
        }
        let j = startRow * colsCount;
        let i = 0;
        for (; i < text.length - textLastRowColCount; i++, j++) {
            if (j >= 0 && j < cells.length) {
                cells[j].text = text[i];
            }
        }
        for (; i < text.length; i++, j++) {
            if (j >= 0 && j < cells.length) {
                cells[j + lastRowStartCol].text = text[i];
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/viewer/editing/models/checkEditingField.js
var checkEditingField_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var GlyphStyle;
(function (GlyphStyle) {
    GlyphStyle[GlyphStyle["StandardBox1"] = 0] = "StandardBox1";
    GlyphStyle[GlyphStyle["StandardBox2"] = 1] = "StandardBox2";
    GlyphStyle[GlyphStyle["YesNoBox"] = 2] = "YesNoBox";
    GlyphStyle[GlyphStyle["YesNoSolidBox"] = 3] = "YesNoSolidBox";
    GlyphStyle[GlyphStyle["YesNo"] = 4] = "YesNo";
    GlyphStyle[GlyphStyle["RadioButton"] = 5] = "RadioButton";
    GlyphStyle[GlyphStyle["Smiley"] = 6] = "Smiley";
    GlyphStyle[GlyphStyle["Thumb"] = 7] = "Thumb";
    GlyphStyle[GlyphStyle["Toggle"] = 8] = "Toggle";
    GlyphStyle[GlyphStyle["Star"] = 9] = "Star";
    GlyphStyle[GlyphStyle["Heart"] = 10] = "Heart";
})(GlyphStyle || (GlyphStyle = {}));
var CheckState;
(function (CheckState) {
    CheckState[CheckState["Unchecked"] = 0] = "Unchecked";
    CheckState[CheckState["Checked"] = 1] = "Checked";
    CheckState[CheckState["Indeterminate"] = 2] = "Indeterminate";
})(CheckState || (CheckState = {}));
function createCustomGlyphStyleCss(imageSource) {
    let backgroundResult = {};
    if (imageSource) {
        const urlContent = imageSource.getDataUrl();
        if (urlContent) {
            backgroundResult = { background: 'url(' + urlContent + ') no-repeat' };
            backgroundResult['backgroundPosition'] = 'center center';
            backgroundResult['backgroundSize'] = 'cover';
        }
    }
    return backgroundResult;
}
function getCheckBoxTemplate(style, state, customGlyph) {
    if (customGlyph && Object.keys(customGlyph).length > 0) {
        return 'dxrd-checkboxcustomglyph';
    }
    else {
        return external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.getExistingTemplate('dxrd-svg-checkboxglyphs-' + style + '_' + state);
    }
}
class CheckEditingFieldViewModel extends EditingFieldBase {
    _toggleCheckState() {
        if (this.field.getEditValue() === CheckState.Checked) {
            this.field.setEditValue(CheckState.Unchecked);
        }
        else {
            this.field.setEditValue(CheckState.Checked);
        }
    }
    constructor(field, pageWidth, pageHeight, page, editingFieldsProvider) {
        super(page);
        this._editingFieldsProvider = editingFieldsProvider;
        this.template = 'dxrp-editing-field-checkbox';
        this.field = field;
        const bounds = this.field.model().bounds;
        const checkBounds = this.field.model().brickOptions.checkBoxBounds;
        const rtl = this.field.model().brickOptions.rtlLayout;
        this._updateContainerStyle = () => {
            if (!bounds)
                return;
            this.containerStyle = {
                height: bounds.height + 'px',
                width: bounds.width + 'px',
                top: bounds.top * 100 / pageHeight + '%',
                left: bounds.left * 100 / pageWidth + '%',
                cursor: this.field.readOnly ? 'auto' : 'pointer'
            };
        };
        this._updateCheckStyle = () => {
            if (!checkBounds)
                return;
            this.checkStyle = {
                height: checkBounds.height + 'px',
                width: checkBounds.width + 'px',
                top: checkBounds.top + 'px',
                left: (rtl ? (bounds.width - checkBounds.left - checkBounds.width) : checkBounds.left) + 'px'
            };
        };
        this._updateCustomGlyphStyleCss = () => {
            const checkBoxGlyphOptions = field.model().brickOptions.checkBoxGlyphOptions;
            if (!checkBoxGlyphOptions)
                return;
            const imageSourceData = checkBoxGlyphOptions.customGlyphs.filter(item => item.key === this.field.getEditValue())[0];
            if (!imageSourceData.value) {
                this.customGlyphStyleCss = {};
                return;
            }
            const imageSource = new ImageSource(imageSourceData.value.imageType, imageSourceData.value.image);
            this.customGlyphStyleCss = createCustomGlyphStyleCss(imageSource);
        };
        this._updateCheckStateStyleIcon = () => {
            const checkBoxGlyphOptions = field.model().brickOptions.checkBoxGlyphOptions;
            if (!checkBoxGlyphOptions)
                return;
            this.checkStateStyleIcon = getCheckBoxTemplate(GlyphStyle[checkBoxGlyphOptions.glyphStyle], CheckState[this.field.getEditValue()], this.customGlyphStyleCss);
        };
        this.addDisposable(this.field.events.on('editValueChanged', (args) => {
            this._updateCustomGlyphStyleCss();
            this._updateCheckStateStyleIcon();
            this._updateCheckedState();
        }), this.field.events.on('readOnlyChanged', (args) => {
            this._updateContainerStyle();
        }));
        this._updateCheckStyle();
        this._updateContainerStyle();
        this._updateCheckedState();
        this._updateCustomGlyphStyleCss();
    }
    onPropertyChanged(args) {
        super.onPropertyChanged(args);
        if (args.propertyName === 'customGlyphStyleCss')
            this._updateCheckStateStyleIcon();
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const viewModel = this.getViewModel();
        if (args.propertyName === 'customGlyphStyleCss')
            viewModel.customGlyphStyleCss = this.customGlyphStyleCss;
        if (args.propertyName === 'checkStateStyleIcon')
            viewModel.checkStateStyleIcon = this.checkStateStyleIcon;
        if (args.propertyName === 'checked')
            viewModel.checked = this.checked;
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('checkStateStyleIcon', this.checkStateStyleIcon)
            .generateProperty('customGlyphStyleCss', this.customGlyphStyleCss)
            .generateProperty('checked', this.checked)
            .generateProperty('checkStyle', this.checkStyle)
            .generateProperty('onKeyDown', (event) => this.onKeyDown(event))
            .generateProperty('onFocus', () => this.onFocus())
            .generateProperty('onBlur', () => this.onBlur())
            .getViewModel();
    }
    onKeyDown(event) {
        if (event.key == external_DevExpress_Analytics_Internal_namespaceObject.KeyboardEnum.Space) {
            this.toggleCheckState();
        }
        else {
        }
    }
    onBlur() {
        this.focused = false;
    }
    onFocus() {
        this.focused = true;
    }
    onClick(model, event) {
        event.target.focus();
        this.toggleCheckState();
        event.stopPropagation();
    }
    _updateCheckedState() {
        if (this.field.getEditValue() === CheckState.Checked) {
            this.checked = true;
        }
        if (this.field.getEditValue() === CheckState.Unchecked) {
            this.checked = false;
        }
    }
    toggleCheckState() {
        if (this.field.readOnly)
            return;
        if (!this.field.groupID()) {
            this._toggleCheckState();
        }
        else if (this.checked === false) {
            this._editingFieldsProvider().forEach(value => {
                if (value.groupID() === this.field.groupID()) {
                    value.setEditValue(CheckState.Unchecked);
                }
            });
            this._toggleCheckState();
        }
    }
}
checkEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], CheckEditingFieldViewModel.prototype, "checkStateStyleIcon", void 0);
checkEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], CheckEditingFieldViewModel.prototype, "customGlyphStyleCss", void 0);
checkEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], CheckEditingFieldViewModel.prototype, "focused", void 0);
checkEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], CheckEditingFieldViewModel.prototype, "checked", void 0);

;// external "DevExpress.ui.dxPopup"
const external_DevExpress_ui_dxPopup_namespaceObject = DevExpress.ui.dxPopup;
var external_DevExpress_ui_dxPopup_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxPopup_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/internal/_previewSelection.js


function rectIntersection(r1, r2) {
    return !(r2.left > r1.right ||
        r2.right < r1.left ||
        r2.top > r1.bottom ||
        r2.bottom < r1.top);
}
class PreviewSelection {
    _getBodyScrollTop() {
        return document.documentElement && document.documentElement.scrollTop || (document.body && document.body.scrollTop);
    }
    _getBodyScrollLeft() {
        return document.documentElement && document.documentElement.scrollLeft || (document.body && document.body.scrollLeft);
    }
    _updateSelectionContent(event) {
        if (this._startRect.left > event.clientX) {
            this._$selectionContent.css('left', event.clientX + 'px');
        }
        else {
            this._$selectionContent.css('right', document.documentElement.clientWidth - event.clientX + 'px');
        }
        if (this._startRect.top > event.clientY) {
            this._$selectionContent.css('top', event.clientY + 'px');
        }
        else {
            this._$selectionContent.css('bottom', document.documentElement.clientHeight - event.clientY + 'px');
        }
        const offset = this._$element.offset();
        const currentRect = {
            left: (parseInt(this._$selectionContent.css('left')) - offset.left + this._getBodyScrollLeft()) / this._$element.width() * 100,
            width: this._$selectionContent.width() / this._$element.width() * 100,
            top: (parseInt(this._$selectionContent.css('top')) - offset.top + this._getBodyScrollTop()) / this._$element.height() * 100,
            height: this._$selectionContent.height() / this._$element.height() * 100
        };
        currentRect['right'] = currentRect.left + currentRect.width;
        currentRect['bottom'] = currentRect.top + currentRect.height;
        const bricks = this._page.bricks;
        for (let i = 0; i < bricks.length; i++) {
            if (!bricks[i].bricks) {
                const isActive = rectIntersection({
                    left: parseFloat(bricks[i].leftP),
                    top: parseFloat(bricks[i].topP),
                    right: parseFloat(bricks[i].leftP) + parseFloat(bricks[i].widthP),
                    bottom: parseFloat(bricks[i].topP) + parseFloat(bricks[i].heightP),
                }, currentRect);
                isActive ? this._page.activateBrick(bricks[i]) : this._page.deactivateBrick(bricks[i]);
            }
        }
    }
    _mouseMove(event) {
        if (!this._startRect || !this._page.active || PreviewSelection.disabled)
            return;
        const leftButtonPressed = event.which === 1;
        if (leftButtonPressed) {
            if (!this._$selectionContainer) {
                if (Math.abs(this._startRect.left - event.clientX) >= 2 || Math.abs(this._startRect.top - event.clientY) >= 2) {
                    PreviewSelection.started = true;
                    const selectionContainer = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(document.createElement('div'));
                    selectionContainer.css({ position: 'fixed', top: '0', bottom: '0', left: '0', right: '0' });
                    this._$selectionContainer = selectionContainer.appendTo(document.body);
                    this._$selectionContent = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(document.createElement('div')).appendTo(this._$selectionContainer[0]);
                    this._$selectionContent.css({
                        'left': this._startRect.left + 'px',
                        'right': this._startRect.right + 'px',
                        'top': this._startRect.top + 'px',
                        'bottom': this._startRect.bottom + 'px',
                        'width': this._startRect.width + 'px',
                        'height': this._startRect.height + 'px',
                    });
                    this._$selectionContent.addClass('dxrd-selection-content ui-selectable-helper');
                    if ((external_DevExpress_ui_dxPopup_default()).prototype._zIndexInitValue)
                        this._$selectionContent.css('z-index', external_DevExpress_ui_dxPopup_default().prototype._zIndexInitValue() + 100);
                    this._updateSelectionContent(event);
                    this._bodyEvents.move = event => this._mouseMove(event);
                    this._bodyEvents.up = event => this._mouseUp(event);
                    document.body.addEventListener('mousemove', this._bodyEvents.move);
                    document.body.addEventListener('mouseup', this._bodyEvents.up);
                }
            }
            else {
                this._updateSelectionContent(event);
            }
        }
    }
    _mouseUp(event) {
        this._$selectionContainer && this._$selectionContainer.remove();
        this._$selectionContainer = null;
        this._bodyEvents.move && document.body.removeEventListener('mousemove', this._bodyEvents.move);
        this._bodyEvents.up && document.body.removeEventListener('mouseup', this._bodyEvents.up);
        this._startRect = null;
        setTimeout(() => {
            PreviewSelection.started = false;
        }, 1);
    }
    _mouseDown(event) {
        if (PreviewSelection.disabled) {
            return;
        }
        this._startRect = {
            left: event.clientX,
            top: event.clientY,
            right: document.documentElement.clientWidth - event.clientX,
            bottom: document.documentElement.clientHeight - event.clientY
        };
        this._click(this._page.pageIndex);
    }
    constructor(_element, _page, _click) {
        this._element = _element;
        this._page = _page;
        this._click = _click;
        this._bodyEvents = {
            move: null,
            up: null
        };
        this.dispose = () => this._dispose && this._dispose();
        this._$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(this._element);
        let mousemove = event => this._mouseMove(event);
        let mouseup = event => this._mouseUp(event);
        let mousedown = event => this._mouseDown(event);
        this._element.addEventListener('mousemove', mousemove);
        this._element.addEventListener('mouseup', mouseup);
        this._element.addEventListener('mousedown', mousedown);
        this._dispose = () => {
            this._element.removeEventListener('mousemove', mousemove);
            this._element.removeEventListener('mouseup', mouseup);
            this._element.removeEventListener('mousedown', mousedown);
            this._dispose = null;
            this._click = null;
            this._page = null;
            this._element = null;
            mousemove = null;
            mouseup = null;
            mousedown = null;
        };
    }
}
PreviewSelection.started = false;
PreviewSelection.disabled = false;

function initializeBrickSelectionProg(element, options) {
    const selection = new PreviewSelection(element, options.page, options.click);
    return () => {
        selection.dispose();
    };
}

;// ./node_modules/devexpress-reporting/viewer/editing/models/imageEditingField.js
var imageEditingField_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






class ImageEditingFieldViewModel extends EditingFieldBase {
    constructor(field, pageWidth, pageHeight, page, bounds) {
        super(page);
        this.field = field;
        this.bounds = bounds;
        this.popupTarget = '.dx-designer';
        this.popupOptions = {
            target: this.popupTarget,
            boundary: this.popupTarget,
            container: this.popupTarget
        };
        this.template = 'dxrp-editing-field-image';
        this.shadingEnabled = true;
        const brickStyle = field.model().brickOptions;
        const style = { rtl: () => brickStyle.rtl };
        (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentModelSerializer)().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        const cssCalculator = new external_DevExpress_Analytics_Internal_namespaceObject.CssCalculator(style, !!brickStyle.rtlLayout);
        this.addDisposable(this.field.events.on('editValueChanged', (args) => {
            this.alignment = this.field.getEditValue().alignment;
            this.sizeMode = this.field.getEditValue().sizeMode;
        }));
        this.alignment = this.field.getEditValue().alignment;
        this.sizeMode = this.field.getEditValue().sizeMode;
        const editor = EditingFieldExtensions.instance().editor(field.editorName()) || EditingFieldExtensions.instance().editor('ImageAndSignature');
        const options = editor.options;
        this.shadingEnabled = !!options.registrationOptions?.shadingEnabled;
        this.editMode = options.editMode;
        this._updateContainerStyle = () => {
            if (!this.bounds)
                return;
            this.containerStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
                height: this.bounds.height * this.zoom + 'px',
                width: this.bounds.width * this.zoom + 'px',
                zIndex: this.active ? 10 : 0,
                top: this.bounds.top * 100 / pageHeight + '%',
                left: this.bounds.left * 100 / pageWidth + '%'
            }, cssCalculator.borderCss(), cssCalculator.paddingsCss());
        };
        this._updateContainerStyle();
        this.callbacks = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
            onDraw: (s) => this.onDraw(s),
            onFocusIn: (s) => this.onFocusIn(s),
            onFocusOut: (s) => this.onBlur(s)
        }, options.callbacks);
    }
    onPropertyChanged(args) {
        super.onPropertyChanged(args);
        if (args.propertyName === 'zoom' || args.propertyName === 'active')
            this._updateContainerStyle && this._updateContainerStyle();
    }
    getImage() {
        return this.field.getEditValue().image;
    }
    getImageType() {
        return this.field.getEditValue().imageType;
    }
    onKeyDown(event) {
        if (event.key == external_DevExpress_Analytics_Internal_namespaceObject.KeyboardEnum.Space) {
        }
        else {
        }
    }
    onFocusIn(s) {
        PreviewSelection.disabled = true;
    }
    onDraw(s) {
        PreviewSelection.disabled = true;
    }
    onBlur(s) {
        const options = s.getCurrentOptions();
        const result = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.field.getEditValue(), options);
        if (!!result.imageType) {
            result.imageType = result.imageType === 'svg' ? 'svg' : ImageEditingFieldViewModel.__DefaultImageType;
        }
        const currentVal = this.field.getEditValue();
        const isNotEqual = Object.keys(currentVal).some(x => {
            if (!result[x] && !currentVal[x])
                return false;
            return result[x] !== currentVal[x];
        });
        if (isNotEqual)
            this.field.setEditValue(result);
        PreviewSelection.disabled = false;
    }
}
ImageEditingFieldViewModel.__DefaultImageType = 'img';
imageEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ImageEditingFieldViewModel.prototype, "alignment", void 0);
imageEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ImageEditingFieldViewModel.prototype, "sizeMode", void 0);


;// ./node_modules/devexpress-reporting/viewer/editing/models/popupImageEditingField.js
var popupImageEditingField_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class PopupImageEditingFieldViewModel extends ImageEditingFieldViewModel {
    constructor() {
        super(...arguments);
        this._parentPopupClass = 'dxrp-editing-field-popup-container';
        this._popupInitializedClass = 'dxrp-editing-field-popup-container-initialized';
        this._getPopupContainer = (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).closest('.' + this._parentPopupClass);
        this._resetPictureEditor = (pictureEditorModel) => {
            pictureEditorModel.reset(this.painterData.imageSource, this.painterData.alignment, this.painterData.sizeMode, this.painterData.imageType);
            this._resetPainter(pictureEditorModel.painter);
        };
        this._resetPainter = (painter) => {
            painter.imagePainter.format = painter.imageFormatByType(this.getImageType());
            painter.imageSizeMode = this.sizeMode;
            painter.imageAlignment = this.alignment;
            painter.image = this.getImage();
            painter.refresh();
        };
        this.canActivateEditor = true;
        this.template = 'dxrp-popup-editing-field-image';
    }
    _getPainterOptions() {
        if (this.painterData == null) {
            this.painterData = {
                imageSource: this.getImage(),
                imageType: this.getImageType(),
                alignment: this.alignment,
                sizeMode: this.sizeMode,
                editingFieldModel: this,
                setPainter: (painter) => this.painter = painter
            };
        }
        return this.painterData;
    }
    createViewModel() {
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('parentPopupClass', this._parentPopupClass)
            .generateProperty('getPainterOptions', () => this._getPainterOptions())
            .generateProperty('popupData', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('contentTemplate', 'dxrp-editing-field-image-editor')
            .generateProperty('visible', this.active)
            .generateProperty('getPositionTarget', (element) => this._getPopupContainer(element).element)
            .generateProperty('shading', this.shadingEnabled)
            .generateProperty('showContent', this._showContent)
            .generateProperty('onShown', () => this._showContent = true)
            .generateProperty('onHiding', (event) => {
            this.pictureEditor.painter.signaturePainter.resetLastPosition();
            this._resetPainter(this.painter);
            document.activeElement['blur']();
            this.active = false;
            this._showContent = false;
        })
            .generateProperty('onContentReady', (event) => {
            this._resetPainter(this.painter);
            event.component && event.component.registerKeyHandler('tab', (_) => {
                viewModel.popupData.onHiding(event);
            });
        })
            .generateProperty('renderedHandler', () => this._renderedHandler())
            .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
            .getViewModel())
            .getViewModel();
        return viewModel;
    }
    _renderedHandler() {
        this._resetPictureEditor(this.pictureEditor);
    }
    _setPictureEditor(editor) {
        this.pictureEditor = editor;
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const viewModel = this.getViewModel();
        if (args.propertyName === 'active')
            viewModel.popupData.visible = this.active;
        if (args.propertyName === '_showContent')
            viewModel.popupData.showContent = this._showContent;
    }
    activateEditor(viewModel, e) {
        if (!this.field.readOnly) {
            const _parentPopup = this._getPopupContainer(e.target);
            if (!_parentPopup.hasClass(this._popupInitializedClass))
                _parentPopup.addClass(this._popupInitializedClass);
            this.active = true;
        }
    }
    deferredUpdateViewModel() { return false; }
}
popupImageEditingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PopupImageEditingFieldViewModel.prototype, "_showContent", void 0);
const DefaultImageEditingFieldViewModel = PopupImageEditingFieldViewModel;

;// ./node_modules/devexpress-reporting/viewer/editing/editingField.js
var editingField_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var ImageAlignment;
(function (ImageAlignment) {
    ImageAlignment[ImageAlignment["TopLeft"] = 1] = "TopLeft";
    ImageAlignment[ImageAlignment["TopCenter"] = 2] = "TopCenter";
    ImageAlignment[ImageAlignment["TopRight"] = 3] = "TopRight";
    ImageAlignment[ImageAlignment["MiddleLeft"] = 4] = "MiddleLeft";
    ImageAlignment[ImageAlignment["MiddleCenter"] = 5] = "MiddleCenter";
    ImageAlignment[ImageAlignment["MiddleRight"] = 6] = "MiddleRight";
    ImageAlignment[ImageAlignment["BottomLeft"] = 7] = "BottomLeft";
    ImageAlignment[ImageAlignment["BottomCenter"] = 8] = "BottomCenter";
    ImageAlignment[ImageAlignment["BottomRight"] = 9] = "BottomRight";
})(ImageAlignment || (ImageAlignment = {}));
var ImageSizeMode;
(function (ImageSizeMode) {
    ImageSizeMode[ImageSizeMode["Normal"] = 0] = "Normal";
    ImageSizeMode[ImageSizeMode["StretchImage"] = 1] = "StretchImage";
    ImageSizeMode[ImageSizeMode["ZoomImage"] = 4] = "ZoomImage";
    ImageSizeMode[ImageSizeMode["Squeeze"] = 5] = "Squeeze";
    ImageSizeMode[ImageSizeMode["Cover"] = 7] = "Cover";
})(ImageSizeMode || (ImageSizeMode = {}));
const sizing = {
    propertyName: 'sizing', modelName: '@Sizing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Sizing', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.Sizing', defaultVal: 'Normal', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum, valuesArray: [
        { value: 'Normal', displayValue: 'Normal', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Normal' },
        { value: 'StretchImage', displayValue: 'Stretch Image', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.StretchImage' },
        { value: 'AutoSize', displayValue: 'Auto-Size', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.AutoSize' },
        { value: 'CenterImage', displayValue: 'Center Image', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.CenterImage' },
        { value: 'ZoomImage', displayValue: 'Zoom Image', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.ZoomImage' },
        { value: 'Squeeze', displayValue: 'Squeeze', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Squeeze' },
        { value: 'Tile', displayValue: 'Tile', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Tile' },
        { value: 'Cover', displayValue: 'Cover', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Cover' }
    ]
};
const imageAlignment = {
    propertyName: 'imageAlignment', modelName: '@ImageAlignment', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Alignment', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.Alignment', defaultVal: 'Default', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum, valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.Default' },
        { value: 'TopLeft', displayValue: 'Top Left', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.TopLeft' },
        { value: 'TopCenter', displayValue: 'Top Center', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.TopCenter' },
        { value: 'TopRight', displayValue: 'Top Right', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.TopRight' },
        { value: 'MiddleLeft', displayValue: 'Middle Left', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.MiddleLeft' },
        { value: 'MiddleCenter', displayValue: 'Middle Center', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.MiddleCenter' },
        { value: 'MiddleRight', displayValue: 'Middle Right', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.MiddleRight' },
        { value: 'BottomLeft', displayValue: 'Bottom Left', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.BottomLeft' },
        { value: 'BottomCenter', displayValue: 'Bottom Center', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.BottomCenter' },
        { value: 'BottomRight', displayValue: 'Bottom Right', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.BottomRight' }
    ]
};
class EditingField extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    constructor(model, index, htmlProvider) {
        super();
        this._needToUseHtml = false;
        this._index = -1;
        this._fieldModel = model;
        this._index = index;
        this.readOnly = model.readOnly || !EditablePreviewEnabled();
        this.addDisposable(EditablePreviewEnabled.subscribe(value => {
            if (!value)
                this.readOnly = false;
        }));
        this.editValue = model.editValue;
        this._editorValue = model.editValue;
        this.htmlValue = model.htmlValue;
        this._htmlProvider = htmlProvider;
    }
    _refreshHtmlValue(newValue) {
        this.htmlValue = null;
        if (this._needToUseHtml) {
            this._htmlProvider.getEditingFieldHtml(newValue, this._index).then((html) => {
                this.htmlValue = html;
            });
        }
    }
    setEditValue(newVal) {
        const oldVal = this.editValue;
        this.editValue = newVal;
        let val = this.editingFieldChanged(this, oldVal, newVal);
        val = val == null ? newVal : val;
        if (val !== oldVal) {
            this._refreshHtmlValue(val);
        }
        if (val !== newVal) {
            this.editValue = val;
            this._editorValue = val;
        }
    }
    getEditValue() {
        return this.editValue;
    }
    onPropertyChanged(args) { }
    editingFieldChanged(field, oldVal, newVal) {
        return newVal;
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('readOnly', this.readOnly)
            .generateProperty('editValue', this.editValue)
            .generateProperty('htmlValue', this.htmlValue)
            .generateProperty('editorValue', this._editorValue)
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'readOnly')
            viewModel.readOnly = this.readOnly;
        if (args.propertyName === 'editValue')
            viewModel.editValue = this.editValue;
        if (args.propertyName === 'htmlValue')
            viewModel.htmlValue = this.htmlValue;
        if (args.propertyName === '_editorValue')
            viewModel.editorValue = this._editorValue;
    }
    editorName() { return this._fieldModel.editorName; }
    id() { return this._fieldModel.id; }
    groupID() { return this._fieldModel.groupID; }
    pageIndex() { return this._fieldModel.pageIndex; }
    type() { return this._fieldModel.type; }
    model() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this._fieldModel, {
            readOnly: this.readOnly,
            editValue: this.editValue,
            htmlValue: this.htmlValue,
        });
    }
    createModel(page, pageWidth, pageHeight, editingFieldsProvider, bounds) {
        if (this._fieldModel.type === 'check') {
            return new CheckEditingFieldViewModel(this, pageWidth, pageHeight, page, editingFieldsProvider);
        }
        else if (this._fieldModel.type === 'text') {
            this._needToUseHtml = bounds.height !== this._fieldModel.bounds.height || !!this._fieldModel.brickOptions.formatString;
            if (!this._needToUseHtml) {
                this.htmlValue = null;
            }
            return new TextEditingFieldViewModel(this, pageWidth, pageHeight, page, bounds);
        }
        else if (this._fieldModel.type === 'charactercomb') {
            return new CharacterCombEditingFieldViewModel(this, pageWidth, pageHeight, page, bounds);
        }
        else if (this._fieldModel.type === 'image') {
            return new DefaultImageEditingFieldViewModel(this, pageWidth, pageHeight, page, bounds);
        }
    }
}
editingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], EditingField.prototype, "readOnly", void 0);
editingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], EditingField.prototype, "editValue", void 0);
editingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], EditingField.prototype, "_editorValue", void 0);
editingField_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], EditingField.prototype, "htmlValue", void 0);

;// ./node_modules/devexpress-reporting/viewer/exportOptions/csvExportOptionsPreview.js


class CsvExportOptionsPreview extends CsvExportOptions {
    isPropertyVisible(name) {
        return name !== useCustomSeparator.propertyName;
    }
    isPropertyDisabled(name) {
        return false;
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/metadata.js



const rtfExportModeMergedPreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, rtfExportMode, {
    valuesArray: getExportModeValues('Rtf', true, true)
});
const docxExportModeMergedPreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, docxExportMode, {
    valuesArray: getExportModeValues('Docx', true, true)
});
const excludeModesForMergedDocuments = 'SingleFilePageByPage';
const exportModePreviewBase = {
    from: (val, serializer) => {
        const engine = serializer.engineType === 'multiplatform' ? external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine : external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine;
        return engine.wrap(val === 'DifferentFiles' ? 'SingleFile' : val);
    }
};
const htmlExportModePreviewBase = {
    propertyName: htmlExportMode.propertyName, modelName: htmlExportMode.modelName, defaultVal: htmlExportMode.defaultVal,
    editor: htmlExportMode.editor, displayName: htmlExportMode.displayName, localizationId: htmlExportMode.localizationId
};
const htmlExportModePreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, htmlExportModePreviewBase, exportModePreviewBase, {
    valuesArray: getExportModeValues('Html', true)
});
const htmlExportModeMergedPreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, htmlExportModePreviewBase, {
    valuesArray: getExportModeValues('Html', true, true)
});
const xlsExportModePreviewBase = {
    propertyName: xlsExportMode.propertyName, modelName: xlsExportMode.modelName, defaultVal: xlsExportMode.defaultVal,
    editor: xlsExportMode.editor, displayName: xlsExportMode.displayName, localizationId: xlsExportMode.localizationId
};
const xlsExportModePreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, xlsExportModePreviewBase, exportModePreviewBase, {
    valuesArray: getExportModeValues('Xls', true)
});
const xlsExportModeMergedPreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, xlsExportModePreviewBase, {
    valuesArray: getExportModeValues('Xls', true, true)
});
const imageExportModePreviewBase = {
    propertyName: imageExportMode.propertyName, modelName: imageExportMode.modelName, defaultVal: imageExportMode.defaultVal,
    editor: imageExportMode.editor, displayName: imageExportMode.displayName, localizationId: imageExportMode.localizationId
};
const imageExportModePreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, imageExportModePreviewBase, exportModePreviewBase, {
    valuesArray: getExportModeValues('Image', true)
});
const imageExportModeMergedPreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, imageExportModePreviewBase, {
    valuesArray: getExportModeValues('Image', true, true)
});
const xlsxExportModePreviewBase = {
    propertyName: xlsxExportMode.propertyName, modelName: xlsxExportMode.modelName, defaultVal: xlsxExportMode.defaultVal,
    editor: xlsxExportMode.editor, displayName: xlsxExportMode.displayName, localizationId: xlsxExportMode.localizationId
};
const xlsxExportModePreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, xlsxExportModePreviewBase, exportModePreviewBase, {
    valuesArray: getExportModeValues('Xlsx', true)
});
const xlsxExportModeMergedPreview = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, xlsxExportModePreviewBase, {
    valuesArray: getExportModeValues('Xlsx', true, true)
});

;// ./node_modules/devexpress-reporting/viewer/exportOptions/htmlExportOptionsPreview.js



const htmlExportOptionsSerializationInfoPreview = [].concat(htmlExportOptionsSerializationInfoBase);
class HtmlExportOptionsPreview extends HtmlExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(htmlExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [htmlExportModePreview];
    }
}
class HtmlExportOptionsMergedPreview extends HtmlExportOptionsPreview {
    _getVariableInfo() {
        return [htmlExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === htmlExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('htmlExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/imageExportOptionsPreview.js



const imageExportOptionsSerializationInfoPreview = [].concat(imageExportOptionsSerializationInfoBase);
class ImageExportOptionsPreview extends ImageExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(imageExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [imageExportModePreview];
    }
}
class ImageExportOptionsMergedPreview extends ImageExportOptionsPreview {
    _getVariableInfo() {
        return [imageExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === imageExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('imageExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/mhtExportOptionsPreview.js



const mhtExportOptionsSerializationInfoPreview = [].concat(mhtExportOptionsSerializationInfoBase);
class MhtExportOptionsPreview extends MhtExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(mhtExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [htmlExportModePreview];
    }
}
class MhtExportOptionsMergedPreview extends MhtExportOptionsPreview {
    _getVariableInfo() {
        return [htmlExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === htmlExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('htmlExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/rtfExportOptionsPreview.js




const rtfExportOptionsSerializationInfoPreview = [].concat(rtfExportOptionsSerializationInfoBase);
class RtfExportOptionsPreview extends RtfExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(rtfExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [rtfExportMode];
    }
}
class RtfExportOptionsMergedPreview extends RtfExportOptionsPreview {
    _getVariableInfo() {
        return [rtfExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === rtfExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('rtfExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/xlsExportOptionsPreview.js



const xlsExportOptionsSerializationInfoPreview = [].concat(xlsExportOptionsSerializationInfoBase, xlsExportOptionsSerializationInfoCommon);
class XlsExportOptionsPreview extends XlsExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(xlsExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [xlsExportModePreview];
    }
}
class XlsExportOptionsMergedPreview extends XlsExportOptionsPreview {
    _getVariableInfo() {
        return [xlsExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === xlsExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('xlsExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/xlsxExportOptionsPreview.js



const xlsxExportOptionsSerializationInfoPreview = [].concat(xlsExportOptionsSerializationInfoCommon);
class XlsxExportOptionsPreview extends XlsxExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(xlsxExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [xlsxExportModePreview];
    }
}
class XlsxExportOptionsMergedPreview extends XlsxExportOptionsPreview {
    _getVariableInfo() {
        return [xlsxExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === xlsxExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('xlsxExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/docxExportOptionsPreview.js





const docxExportOptionsSerializationInfoPreview = [
    pageRange,
    docxTableLayout,
    keepRowHeight,
    rasterizeImages,
    rasterizationResolution,
    exportPageBreaks,
    exportWatermarks,
    docxDocumentOptions,
];
class DocxExportOptionsPreview extends DocxExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        const variableInfo = this._getVariableInfo();
        return variableInfo.concat(docxExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [docxExportMode];
    }
}
class DocxExportOptionsMergedPreview extends DocxExportOptionsPreview {
    _getVariableInfo() {
        return [docxExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === docxExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this._set('docxExportMode', excludeModesForMergedDocuments);
    }
}

;// ./node_modules/devexpress-reporting/viewer/widgets/_groupEditor.js


class ParametersGroupEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.PropertyGridEditor {
    constructor() {
        super(...arguments);
        this.isGroupLabel = true;
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('isGroupLabel', this.isGroupLabel)
            .generateProperty('hideBorder', this.editorOptions.borderVisible === false)
            .generateProperty('hideEditorHeader', !this.editorOptions.titleVisible)
            .generateProperty('showHorizontally', this.editorOptions.orientation === 'Horizontal')
            .getViewModel();
    }
    _setPadding(position, value) {
        const padding = super._setPadding(position, value);
        padding['padding-' + position] = 10;
        padding['padding-bottom'] = 6;
        return padding;
    }
    createObjectProperties() {
        const editorOptions = this.editorOptions;
        this._set('collapsed', !editorOptions.expanded && editorOptions.titleVisible);
        this.hideEditorHeader = !editorOptions.titleVisible;
        this._set('alwaysShow', !editorOptions.showExpandButton);
        this.hideBorder = editorOptions.borderVisible === false;
        this.showHorizontally = editorOptions.orientation === 'Horizontal';
        this.level = -1;
        this._set('editorCreated', true);
        return super.createObjectProperties();
    }
}

;// ./node_modules/devexpress-reporting/viewer/widgets/_multiValueEditor.js




class MultiValueEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor() {
        super(...arguments);
        this._multiValueEditorSubscriptions = [];
    }
    _createMultiValueEditorValueViewModel(currentValue) {
        this._multiValueEditorSubscriptions.forEach(x => x());
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .createDefaultModel(currentValue)
            .generateProperty('value', currentValue.value)
            .generateProperty('disabled', this._get('disabled'))
            .generateProperty('displayName', this._get('displayName'))
            .generateProperty('dataSource', currentValue.dataSource)
            .generateProperty('items', currentValue.items)
            .generateProperty('displayExpr', 'displayValue')
            .generateProperty('editorInputId', this.editorInputId)
            .generateProperty('getOptions', (options) => {
            return {
                ...this.getOptions(options),
                onValueChanged: (e) => {
                    currentValue.value = e.value;
                },
                onMultiTagPreparing: (args) => {
                    const selectedItemsLength = args.selectedItems.length, totalCount = currentValue.items.length;
                    if (selectedItemsLength === totalCount) {
                        const stringFormat = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('All selected ({0})', 'ASPxReportsStringId.WebDocumentViewer_MultiValueEditor_AllSelected');
                        args.text = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(stringFormat, selectedItemsLength);
                    }
                }
            };
        })
            .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
            .generateProperty('maxDisplayedTags', currentValue.maxDisplayedTags)
            .generateProperty('placeholder', (0,external_DevExpress_Analytics_Internal_namespaceObject.selectPlaceholder)())
            .generateProperty('searchExpr', ['displayValue'])
            .generateProperty('selectAllText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select All', 'AnalyticsCoreStringId.SelectAll'))
            .generateProperty('validationRules', this.validationRules)
            .generateProperty('valueExpr', 'value')
            .getViewModel();
        this._multiValueEditorSubscriptions.push(currentValue.events.on('_valueChanged', x => viewModel.value = currentValue.value), this.subscribeProperty('disabled', (x) => viewModel.disabled = x), this.subscribeProperty('displayName', (x) => viewModel.displayName = x));
        return viewModel;
    }
    createViewModel() {
        const currentValue = this._get('value');
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('value', this._createMultiValueEditorValueViewModel(currentValue))
            .getViewModel();
        this.destroyPropertySubscription('value');
        this.addDisposable(this.subscribeProperty('value', (x) => {
            const viewModel = this.getViewModel();
            viewModel.value = this._createMultiValueEditorValueViewModel(this._get('value'));
        }));
        return viewModel;
    }
    dispose() {
        super.dispose();
        this._multiValueEditorSubscriptions.forEach(x => x());
        this._multiValueEditorSubscriptions = [];
    }
}

;// ./node_modules/devexpress-reporting/viewer/widgets/editorTemplates.js


const viewerEditorTemplates = {
    multiValue: { header: 'dxrd-multivalue', editorType: MultiValueEditor },
    groupEditor: { header: 'dx-emptyHeader', custom: 'dxrd-parameters-property-editor', content: 'dxrd-parameters-editor-content', editorType: ParametersGroupEditor },
    rangeEditor: { header: 'dxrv-range-parameter' },
    multiValueEditable: { custom: 'dxrd-multivalue-editable' },
    selectBox: { header: 'dx-selectbox' },
    separatorEditor: { header: 'dx-emptyHeader', custom: 'dxrd-parameters-separator' },
    signatures: { header: 'dxrdv-signature' },
};

;// ./node_modules/devexpress-reporting/viewer/exportOptions/pdfExportOptionsPreview.js
var pdfExportOptionsPreview_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class PdfExportOptionsPreview extends PdfExportOptions {
    getInfo() {
        return [
            { propertyName: 'signature', defaultVal: null, editor: viewerEditorTemplates.signatures, displayName: 'Signature', localizationId: 'PreviewStringId.EditingFieldEditors_Signature', valueStore: this._signatures },
            ...super.getInfo()
        ];
    }
    isPropertyVisible(name) {
        return name !== 'signature' || !!this._signatures.length;
    }
    constructor(model, serializer, _signatures) {
        super(model, serializer);
        this._signatures = _signatures;
    }
}
pdfExportOptionsPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(undefined)
], PdfExportOptionsPreview.prototype, "signature", void 0);

;// ./node_modules/devexpress-reporting/viewer/exportOptions/exportOptionsPreview.js













class ExportOptionsPreview extends ExportOptions {
    _generateFromFunction(exportType) {
        return (model, serializer) => {
            return new exportType(model || {}, serializer);
        };
    }
    constructor(_signatures) {
        super();
        this._signatures = _signatures;
    }
    hasSensitiveData() {
        return (this.xls && this.xls.hasSensitiveData())
            || (this.xlsx && this.xlsx.hasSensitiveData())
            || (this.pdf && this.pdf.hasSensitiveData());
    }
    getInfo() {
        return [
            { propertyName: 'csv', modelName: 'Csv', displayName: 'CSV Export Options', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Csv.Description', from: this._generateFromFunction(CsvExportOptionsPreview), toJsonObject: CsvExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'html', modelName: 'Html', displayName: 'HTML Export Options', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Html.Description', from: this._generateFromFunction(HtmlExportOptionsPreview), toJsonObject: HtmlExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'image', modelName: 'Image', displayName: 'Image Export Options', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Image.Description', from: this._generateFromFunction(ImageExportOptionsPreview), toJsonObject: ImageExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'mht', modelName: 'Mht', displayName: 'MHT Export Options', localizationId: 'DevExpress.XtraPrinting.MhtExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Mht.Description', from: this._generateFromFunction(MhtExportOptionsPreview), toJsonObject: MhtExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'pdf', modelName: 'Pdf', displayName: 'PDF Export Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Pdf.Description', from: (model, serializer) => new PdfExportOptionsPreview(model, serializer, this._signatures), toJsonObject: PdfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'rtf', modelName: 'Rtf', displayName: 'RTF Export Options', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Rtf.Description', from: this._generateFromFunction(RtfExportOptionsPreview), toJsonObject: RtfExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'textExportOptions', modelName: 'Text', displayName: 'Text Export Options', localizationId: 'DevExpress.XtraPrinting.TextExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Text.Description', from: this._generateFromFunction(TextExportOptions), toJsonObject: TextExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'xls', modelName: 'Xls', displayName: 'XLS Export Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Xls.Description', from: this._generateFromFunction(XlsExportOptionsPreview), toJsonObject: XlsExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'xlsx', modelName: 'Xlsx', displayName: 'XLSx Export Options', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Xlsx.Description', from: this._generateFromFunction(XlsxExportOptionsPreview), toJsonObject: XlsxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'docx', modelName: 'Docx', displayName: 'Docx Export Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions', descriptionLocalizationId: 'DevExpress.XtraPrinting.ExportOptions.Docx.Description', from: this._generateFromFunction(DocxExportOptionsPreview), toJsonObject: DocxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }
        ];
    }
}
class ExportOptionsMergedPreview extends ExportOptionsPreview {
    getInfo() {
        return [
            { propertyName: 'html', modelName: 'Html', displayName: 'HTML Export Options', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions', from: this._generateFromFunction(HtmlExportOptionsMergedPreview), toJsonObject: HtmlExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'image', modelName: 'Image', displayName: 'Image Export Options', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions', from: this._generateFromFunction(ImageExportOptionsMergedPreview), toJsonObject: ImageExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'mht', modelName: 'Mht', displayName: 'MHT Export Options', localizationId: 'DevExpress.XtraPrinting.MhtExportOptions', from: this._generateFromFunction(MhtExportOptionsMergedPreview), toJsonObject: MhtExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'pdf', modelName: 'Pdf', displayName: 'PDF Export Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions', from: (model, serializer) => new PdfExportOptionsPreview(model, serializer, this._signatures), toJsonObject: PdfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'rtf', modelName: 'Rtf', displayName: 'RTF Export Options', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions', from: this._generateFromFunction(RtfExportOptionsMergedPreview), toJsonObject: RtfExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'xls', modelName: 'Xls', displayName: 'XLS Export Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions', from: this._generateFromFunction(XlsExportOptionsMergedPreview), toJsonObject: XlsExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'xlsx', modelName: 'Xlsx', displayName: 'XLSx Export Options', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions', from: this._generateFromFunction(XlsxExportOptionsMergedPreview), toJsonObject: XlsxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') },
            { propertyName: 'docx', modelName: 'Docx', displayName: 'Docx Export Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions', from: this._generateFromFunction(DocxExportOptionsMergedPreview), toJsonObject: DocxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }
        ];
    }
}

;// external "DevExpress.utils.browser"
const external_DevExpress_utils_browser_namespaceObject = DevExpress.utils.browser;
var external_DevExpress_utils_browser_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_utils_browser_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/internal/_exportHandler.viewModel.js


function createExportHandlerViewModel(base) {
    const printingTextParts = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('If the operation fails, you can download the {0} and print it out from another application.', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Text').split('{0}');
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('popupOptions', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
        .generateProperty('width', '515px')
        .generateProperty('height', 'auto')
        .generateProperty('title', this.getPopupTitle())
        .generateProperty('visible', this.popupVisible)
        .generateProperty('toolbarItems', [{
            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('OK', external_DevExpress_Analytics_Internal_namespaceObject.StringId.DataAccessBtnOK), type: 'default', stylingMode: 'contained', onClick: () => {
                    this.popupVisible = false;
                }
            }
        }])
        .generateProperty('wrapperAttr', { class: 'dxrd-print-dialog dx-editors dx-widget' })
        .generateProperty('getPopupContainer', (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(element))
        .generateProperty('onHidden', () => this.clearExportTools())
        .getViewModel())
        .generateProperty('printingTexts', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
        .generateProperty('link', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('document in PDF format', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_LinkText'))
        .generateProperty('caption', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('The browser sent the document to the printer.', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Caption'))
        .generateProperty('postfix', printingTextParts[1])
        .generateProperty('prefix', printingTextParts[0])
        .getViewModel())
        .generateProperty('exportActionUri', this.exportActionUri)
        .generateProperty('exportFormData', this.exportFormData)
        .generateProperty('printingLinkCallback', (_, event) => {
        this.printingLinkCallback();
        event.preventDefault();
    })
        .getViewModel();
}
function updateExportHandlerViewModel(args) {
    const viewModel = this.getViewModel();
    if (args.propertyName === 'popupVisible')
        viewModel.popupOptions.visible = this.popupVisible;
    if (args.propertyName === 'reportDisplayName')
        viewModel.popupOptions.title = this.getPopupTitle();
    if (args.propertyName === 'exportActionUri')
        viewModel.exportActionUri = this.exportActionUri;
    if (args.propertyName === 'exportFormData')
        viewModel.exportFormData = this.exportFormData;
}

;// ./node_modules/devexpress-reporting/viewer/internal/_previewRequestWrapper.js



var ColumnSortOrder;
(function (ColumnSortOrder) {
    ColumnSortOrder[ColumnSortOrder["None"] = 0] = "None";
    ColumnSortOrder[ColumnSortOrder["Ascending"] = 1] = "Ascending";
    ColumnSortOrder[ColumnSortOrder["Descending"] = 2] = "Descending";
})(ColumnSortOrder || (ColumnSortOrder = {}));
class PreviewRequestWrapper {
    constructor(handlers, _callbacks) {
        this._callbacks = _callbacks;
        Object.keys(handlers || {}).forEach((name) => {
            this[name] = handlers[name];
        });
    }
    static getProcessErrorCallback(reportPreview, defaultErrorMessage, showMessage = true) {
        return function (message, jqXHR, textStatus) {
            let messageWithStatusCode;
            if (jqXHR) {
                const statusCodeText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(jqXHR.statusText, 'ASPxReportsStringId.HttpResponseStatusCode_' + jqXHR.status);
                if (defaultErrorMessage) {
                    const stringFormat = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} ({1} {2})', 'ASPxReportsStringId.Error_WithStatus');
                    messageWithStatusCode = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(stringFormat, defaultErrorMessage, jqXHR.status, statusCodeText);
                }
                else {
                    messageWithStatusCode = statusCodeText;
                }
            }
            if (!reportPreview) {
                const error = (0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(jqXHR);
                MessageHandler().processError(error || messageWithStatusCode || defaultErrorMessage || 'Internal Server Error', showMessage);
            }
            else {
                reportPreview._processError(messageWithStatusCode || defaultErrorMessage, jqXHR, showMessage);
            }
        };
    }
    static getPage(url, ignoreError) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(url, undefined, undefined, PreviewRequestWrapper.getProcessErrorCallback(), ignoreError, { type: 'GET' });
    }
    initialize(reportPreview, parametersModel, searchModel) {
        this._reportPreview = reportPreview;
        this._parametersModel = parametersModel;
        this._searchModel = searchModel;
    }
    findTextRequest(text, ignore) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'findText', JSON.stringify({
            text: text,
            documentId: this._reportPreview.documentId,
            matchCase: this._searchModel.matchCase,
            wholeWord: this._searchModel.matchWholeWord,
            searchUp: this._searchModel.searchUp
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during search', 'ASPxReportsStringId.WebDocumentViewer_SearchError')), () => ignore);
    }
    startSearch(text, ignore) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'startSearch', JSON.stringify({
            text: text,
            documentId: this._reportPreview.documentId,
            matchCase: this._searchModel.matchCase,
            wholeWord: this._searchModel.matchWholeWord,
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during search', 'ASPxReportsStringId.WebDocumentViewer_SearchError')), () => ignore);
    }
    getSearchStatus(searchOperationId, startIndex = 0, resultLimitPerRequest = 1000, ignore) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'getSearchStatus', JSON.stringify({
            searchOperationId: searchOperationId,
            documentId: this._reportPreview.documentId,
            startIndex: startIndex,
            resultLimitPerRequest: resultLimitPerRequest
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during search', 'ASPxReportsStringId.WebDocumentViewer_SearchError')), () => ignore);
    }
    stopSearch(searchOperationId, ignore) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'stopSearch', JSON.stringify({
            searchOperationId: searchOperationId,
            documentId: this._reportPreview.documentId,
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during search', 'ASPxReportsStringId.WebDocumentViewer_SearchError')), () => ignore);
    }
    stopBuild(id) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'stopBuild', id, undefined, () => true);
    }
    sendCloseRequest(documentId, reportId) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'close', JSON.stringify({
            reportId: reportId,
            documentId: documentId
        }), undefined, () => true);
    }
    startBuildRequest(shouldIgnoreError) {
        const parameters = this._parametersModel.serializeParameters();
        this._callbacks && this._callbacks.parametersSubmitted && this._callbacks.parametersSubmitted(this._parametersModel, parameters);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)({
            uri: HandlerUri(),
            action: 'startBuild',
            arg: JSON.stringify({
                reportId: this._reportPreview.reportId,
                reportUrl: this._reportPreview.reportUrl,
                drillDownKeys: this._reportPreview['_drillDownState'],
                sortingState: this._reportPreview['_sortingState'],
                timeZoneOffset: 0 - new Date().getTimezoneOffset(),
                parameters: parameters
            }),
            ignoreError: shouldIgnoreError,
            isError: (data) => !!data.error || !!(data.result && data.result.faultMessage),
            processErrorCallback: PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cannot create a document for the current report', 'ASPxReportsStringId.WebDocumentViewer_DocumentCreationError'))
        });
    }
    getBuildStatusRequest(documentId, shouldIgnoreError, isFirstRequest, firstPageRequest) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)({
            uri: HandlerUri(),
            action: 'getBuildStatus',
            arg: JSON.stringify({
                documentId: documentId,
                firstPageRequest: firstPageRequest,
                isFirstRequest: isFirstRequest,
                timeOut: Math.max(5000, TimeOut())
            }),
            processErrorCallback: PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Error obtaining a build status', 'ASPxReportsStringId.WebDocumentViewer_GetBuildStatusError')),
            ignoreError: shouldIgnoreError,
            isError: (data) => !!data.error || !!(data.result && data.result.faultMessage) || !data.success,
            getErrorMessage: this._reportPreview._getErrorMessage
        });
    }
    getDocumentData(documentId, shouldIgnoreError) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'getDocumentData', documentId, PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cannot obtain additional document data for the current document', 'ASPxReportsStringId.WebDocumentViewer_GetDocumentDataError')), shouldIgnoreError);
    }
    customDocumentOperation(documentId, serializedExportOptions, editindFields, customData, hideMessageFromUser) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'documentOperation', JSON.stringify({
            documentId: documentId,
            customData: customData,
            exportOptions: serializedExportOptions,
            editingFieldValues: editindFields
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The requested document operation cannot be performed.', 'ASPxReportsStringId.WebDocumentViewer_CustomDocumentOperationsDenied_Error'), !hideMessageFromUser));
    }
    openReport(reportName) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'openReport', reportName, PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Could not open report', 'ASPxReportsStringId.WebDocumentViewer_OpenReportError') + " '" + reportName + "'"));
    }
    drillThrough(drillThroughData) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'drillThrough', JSON.stringify({
            reportId: this._reportPreview.reportId,
            reportUrl: this._reportPreview.reportUrl,
            drillThroughData: drillThroughData
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Drill through operation failed', 'ASPxReportsStringId.WebDocumentViewer_DrillThroughError')));
    }
    goToReport(customData) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'goToReport', JSON.stringify({
            reportId: this._reportPreview.reportId,
            reportUrl: this._reportPreview.reportUrl,
            documentId: this._reportPreview.documentId,
            parameters: this._parametersModel.serializeParameters(),
            editingFields: this._reportPreview.editingFieldsProvider().map(field => field.model()),
            customData: customData
        }), PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Go to report operation failed', 'ASPxReportsStringId.WebDocumentViewer_DrillThroughError')));
    }
    getStartExportOperation(arg, shouldIgnoreError) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'startExport', arg, PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError')), shouldIgnoreError);
    }
    getExportResult(requestData, shouldIgnoreError, method = 'POST') {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)({
            uri: requestData.RequestUrl,
            action: requestData.FormData.actionKey,
            arg: requestData.FormData.arg,
            processErrorCallback: PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError')),
            ignoreError: shouldIgnoreError,
            method
        });
    }
    cancelExportRequest(operationId, shouldIgnoreError) {
        const arg = JSON.stringify({
            id: operationId
        });
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'cancelExport', arg, PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError')), shouldIgnoreError);
    }
    getExportStatusRequest(operationId) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)({
            uri: HandlerUri(),
            action: 'getExportStatus',
            arg: JSON.stringify({
                id: operationId,
                timeOut: Math.max(5000, TimeOut())
            }),
            processErrorCallback: PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Error obtaining an export status', 'ASPxReportsStringId.WebDocumentViewer_GetExportStatusError')),
            isError: (data) => !!data.error || !!(data.result && data.result.faultMessage) || !data.success,
            getErrorMessage: this._reportPreview._getErrorMessage
        });
    }
    getEditingFieldHtml(value, editingFieldIndex) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'getEditingFieldHtmlValue', JSON.stringify({
            documentId: this._reportPreview.documentId,
            value: value,
            editingFieldIndex: editingFieldIndex
        }));
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_utils.js


function getCurrentResolution(zoom) {
    return Math.floor((zoom || 1) * previewDefaultResolution());
}
function getImageBase64(url) {
    const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
    const background = new Image();
    background.src = url;
    background.crossOrigin = 'anonymous';
    background.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = background.width;
        canvas.height = background.height;
        canvas.getContext('2d').drawImage(background, 0, 0);
        try {
            deferred.resolve(canvas.toDataURL());
        }
        catch (e) {
            deferred.reject(e);
        }
    };
    return deferred.promise();
}
function getEnumValues(enumType) {
    return Object.keys(enumType).filter(key => !isNaN(Number(enumType[key])));
}
function safelyRunWindowOpen(url, target = '_blank') {
    const newWindow = window.open(url, target);
    target === '_blank' && newWindow && (newWindow.opener = newWindow);
    return newWindow;
}

;// ./node_modules/devexpress-reporting/viewer/internal/_exportHandler.js
var _exportHandler_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









class ExportResultRequestData {
    constructor() {
        this.RequestUrl = '';
        this.FormData = {};
        this.QueryParameters = {};
    }
}
class ExportHandler extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    onPropertyChanged(args) { }
    createViewModel() {
        return createExportHandlerViewModel.call(this, super.createViewModel());
    }
    updateViewModel(args) {
        updateExportHandlerViewModel.call(this, args);
    }
    constructor(exportSetting, preview) {
        super();
        this.preview = preview;
        this.exportingFrameName = 'dxrd-exporting-frame' + generateGuid();
        this.printingLinkCallback = () => { };
        this.getPopupTitle = () => this.reportDisplayName || '';
        this._exportResultRequestData = new ExportResultRequestData();
        this._showPrintNotificationDialog = true;
        this._useSameTabExport = true;
        this._useAsynchronousExport = true;
        this._workerTicker = null;
        this._workerFunctionBlobUrl = null;
        this._xhr = null;
        this._exportResultDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._workerTickerFunction = function () {
            let started, interval;
            self.onmessage = function (e) {
                if (e.data === 'stop') {
                    clearInterval(interval);
                    return;
                }
                if (started)
                    return;
                interval = setInterval(() => {
                    postMessage.apply(self, ['tick']);
                }, 10);
                started = true;
            };
        };
        this._window = null;
        this._handleFile = (fileMetadata, _url) => {
            if (fileMetadata.url) {
                const link = document.createElement('a');
                link.href = fileMetadata.url;
                link.rel = 'noreferrer noopener';
                link.download = fileMetadata.contentFilename;
                document.body.appendChild(link);
                link.click();
                link.remove();
                _url.revokeObjectURL(fileMetadata.url);
            }
        };
        this._timeouts = [];
        if (exportSetting) {
            if (exportSetting.useAsynchronousExport !== undefined)
                this._useAsynchronousExport = exportSetting.useAsynchronousExport;
            if (exportSetting.useSameTab !== undefined)
                this._useSameTabExport = exportSetting.useSameTab;
            if (exportSetting.showPrintNotificationDialog !== undefined)
                this._showPrintNotificationDialog = exportSetting.showPrintNotificationDialog;
        }
    }
    _getUrlObject() {
        return window.URL || window['webkitURL'] || window['mozURL'] || window['msURL'] || window['oURL'];
    }
    _createWorker() {
        this._terminateWorker();
        const blob = new Blob(['(' + this._workerTickerFunction.toString() + ')()'], { type: 'text/javascript' });
        const _url = this._getUrlObject();
        this._workerFunctionBlobUrl = _url.createObjectURL(blob);
        this._workerTicker = new Worker(this._workerFunctionBlobUrl);
        return this._workerTicker;
    }
    _terminateWorker() {
        if (this._workerTicker) {
            this._workerTicker.terminate();
            this._workerTicker = null;
        }
        if (this._workerFunctionBlobUrl) {
            const _url = this._getUrlObject();
            _url && _url.revokeObjectURL(this._workerFunctionBlobUrl);
            this._workerFunctionBlobUrl = null;
        }
    }
    _callPrint(_window) {
        if (_window && !isAndroid && ((external_DevExpress_utils_browser_default()).chrome || (external_DevExpress_utils_browser_default()).safari)) {
            const worker = this._createWorker();
            const checkOnTick = () => {
                try {
                    if (_window.document && _window.document.contentType === 'application/pdf') {
                        _window.print();
                        worker.postMessage('stop');
                        this._terminateWorker();
                    }
                }
                catch (ex) {
                    this._terminateWorker();
                }
            };
            worker.onerror = (e) => { checkOnTick(); };
            worker.onmessage = (e) => { checkOnTick(); };
            worker.postMessage('start');
        }
    }
    clearExportTools() {
        const iframe = this.exportingFrame.contentWindow;
        iframe && iframe.location.replace('about:blank');
        this.printingLinkCallback = () => { };
        this.popupVisible = false;
    }
    _initPrintingWindow() {
        if (this._showPrintNotificationDialog) {
            this.popupVisible = true;
        }
    }
    _setPrintingLinkCallback(printingLinkCallback) {
        if (this._showPrintNotificationDialog) {
            this.printingLinkCallback = printingLinkCallback;
        }
    }
    _formSubmit(_requestData, _formTarget) {
        if (this.postingForm) {
            this.postingForm.target = _formTarget;
            this.exportActionUri = _requestData.RequestUrl;
            const formData = [];
            for (const key in _requestData.FormData) {
                formData.push({ name: key, value: _requestData.FormData[key] });
            }
            this.exportFormData = formData;
            this.postingForm.submit();
        }
    }
    _doExportSync(_exportWindow, printable, useSameTab, shouldChangePrintJobName, operationId, abortController) {
        this.onExportCustomEvent && this.onExportCustomEvent(this._exportResultRequestData);
        const _requestData = this._exportResultRequestData;
        useSameTab && printable && this._initPrintingWindow();
        const formTarget = useSameTab || (this._useSameTabExport && !useSameTab && isMobile) ? this.exportingFrameName : '_blank';
        if (!this._useSameTabExport && !printable) {
            this._replaceLocation(_exportWindow, _requestData);
        }
        else if (this._useSameTabExport && (!printable || (!useSameTab && isMobile))) {
            if ((0,external_DevExpress_Analytics_Utils_namespaceObject._isFetchConfigured)()) {
                const method = 'POST';
                this._getExportResultUsingFetch(_requestData, method, printable, this._handleFile, operationId, abortController);
            }
            else {
                this._formSubmit(_requestData, formTarget);
            }
        }
        else {
            if (!_exportWindow) {
                _exportWindow = this.exportingFrame && (useSameTab || (this._useSameTabExport && isMobile)) ? this.exportingFrame.contentWindow : this._replaceLocation(null, null);
            }
            const method = this._useSameTabExport ? 'POST' : 'GET';
            this._printUsingBlob(_exportWindow, _requestData, method, useSameTab, printable, shouldChangePrintJobName, operationId, abortController);
        }
    }
    _getExportResultUsingFetch(_requestData, _method, printable, handleFile, operationId, abortController) {
        const _url = this._getUrlObject();
        const shouldIgnoreError = (operationId) => () => this.preview.progressBar.wasCancelRequested(operationId);
        this._exportResultDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this.preview.requestWrapper.getExportResult(_requestData, shouldIgnoreError(operationId), _method)
            .then(response => this._exportResultDeferred?.resolve(response))
            .catch(fail => this._exportResultDeferred?.fail(fail));
        this.preview.progressBar.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Downloading the document...', 'WebDocumentViewer_DownloadingDocument');
        this._exportResultDeferred.done(response => {
            if (response.ok) {
                return this._handleBlobUsingFetch(response, _url, operationId, printable, abortController)
                    .then(fileMetadata => {
                    handleFile(fileMetadata, _url);
                });
            }
        }).fail(response => {
            if (!this.preview)
                return;
            this.preview.progressBar.complete(operationId);
            const message = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError');
            PreviewRequestWrapper.getProcessErrorCallback(this.preview, message, true)('', this, '');
        });
    }
    _handleBlobUsingFetch(response, _url, operationId, printable, abortController) {
        const contentLength = +response.headers.get('Content-Length');
        const contentDisposition = response.headers.get('Content-Disposition');
        const contentFilename = this._getFileName(contentDisposition);
        const contentType = !printable && response.headers.get('Content-Type') === 'application/pdf' && isIOS ? 'application/octet-stream' : response.headers.get('Content-Type');
        const reader = response.body.getReader();
        abortController && (abortController.signal.onabort = () => {
            reader.cancel();
        });
        const readChunk = (controller) => {
            reader.read().then(({ done, value }) => {
                if (done) {
                    controller.close();
                    return;
                }
                receivedLenght += value.byteLength;
                const currentProgress = Math.round(receivedLenght * 100 / contentLength) + 100;
                this._useSameTabExport && this.updateExportStatus(currentProgress, operationId);
                controller.enqueue(value);
                readChunk(controller);
            });
        };
        let receivedLenght = 0;
        return Promise.resolve(new ReadableStream({
            start(controller) {
                readChunk(controller);
            }
        }))
            .then(stream => {
            return new Response(stream, {
                headers: {
                    'Content-Type': contentType
                }
            });
        })
            .then(response => response.blob())
            .then(blob => {
            return {
                contentType,
                contentLength,
                contentFilename,
                url: !abortController.signal.aborted ? _url.createObjectURL(blob) : null
            };
        });
    }
    _getFileName(contentDisposition) {
        const utf8FileNameRegex = /filename\*=UTF-8''(.*?)$/i;
        const fileNameRegex = /^attachment; filename=\"?(.*[^\"?$])/;
        let fileName = 'downloaded file';
        if (utf8FileNameRegex.test(contentDisposition)) {
            fileName = utf8FileNameRegex.exec(contentDisposition)[1];
        }
        else if (fileNameRegex.test(contentDisposition)) {
            fileName = fileNameRegex.exec(contentDisposition)[1];
        }
        return decodeURIComponent(fileName);
    }
    _initExportWindow() {
        const message = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Do not close this tab to get the resulting file.', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportCloseWarning');
        let div = this._window.document.createElement('div');
        div.style['text-align'] = 'center';
        div.innerText = message;
        div.style.position = 'absolute';
        div.style.left = '0';
        div.style.top = '0';
        div.style.right = '0';
        div.style.fontSize = '20px';
        this._window.document.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Exporting...', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportTabTitle');
        this._window.document.body.appendChild(div);
        div = this._window.document.createElement('div');
        div.id = 'loading';
        div.style.position = 'absolute';
        div.style.left = '0';
        div.style.top = '0';
        div.style.bottom = '0';
        div.style.right = '0';
        div.style['text-align'] = 'center';
        div.style.margin = 'auto';
        div.style.height = '0';
        div.style.fontSize = '32px';
        this._window.document.body.appendChild(div);
    }
    _startExportAsync(args, useSameTabLocal, deferred, inlineResult, printable = false, abortController) {
        if (useSameTabLocal) {
            this._setPrintingLinkCallback(() => this._startExportAsync(args, false, deferred, inlineResult, printable, abortController));
        }
        else {
            if (!this._useSameTabExport) {
                this._window = window.open();
                this._window && (this._window.onunload = () => {
                    this.preview.progressBar.cancelAction();
                    this._terminateWorker();
                });
                this._initExportWindow();
            }
        }
        this.preview.progressBar.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Exporting the document...', 'PreviewStringId.Msg_ExportingDocument');
        this.preview.progressBar.cancelText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel');
        const exportOperationIdDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const startExportOperationId = generateGuid();
        const shouldIgnoreError = (operationId) => () => this.preview.progressBar.wasCancelRequested(operationId || startExportOperationId);
        this.preview.progressBar.startProgress(startExportOperationId, (operationId) => {
            if ((0,external_DevExpress_Analytics_Utils_namespaceObject._isFetchConfigured)() && this.preview.progressBar.progress >= 50)
                abortController.abort();
            else
                this.preview.requestWrapper.cancelExportRequest(operationId, shouldIgnoreError(operationId));
        }, exportOperationIdDeferred.promise());
        this.preview.requestWrapper.getStartExportOperation(args, shouldIgnoreError())
            .then((response) => {
            this.preview.previewHandlersHelper.doneStartExportHandler(deferred, inlineResult, response, exportOperationIdDeferred, startExportOperationId, useSameTabLocal, printable, abortController);
        })
            .catch((error) => {
            this.preview.previewHandlersHelper.errorStartExportHandler(deferred, startExportOperationId);
            exportOperationIdDeferred.reject();
            !this._useSameTabExport && error.responseJSON && error.responseJSON['error'] && this._showAsyncExportError(this._window, error.responseJSON['error']);
        });
    }
    export(args, actionUri, inlineResult, printable = false) {
        this._terminateWorker();
        const abortController = new AbortController();
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const requestData = this._exportResultRequestData;
        requestData.RequestUrl = actionUri;
        if (this.preview._editingFields.length > 0 || AsyncExportApproach() || this._useAsynchronousExport || (this.preview.exportOptionsModel && this.preview.exportOptionsModel.hasSensitiveData())) {
            setTimeout(() => {
                this._startExportAsync(args(), this._useSameTabExport, deferred, inlineResult, printable, abortController);
            });
        }
        else {
            deferred.resolve(true);
            if (this._useSameTabExport) {
                requestData.FormData['arg'] = args();
                requestData.FormData['actionKey'] = 'exportTo';
                this._setPrintingLinkCallback(() => this._doExportSync(null, true, false, false, null, abortController));
            }
            else {
                requestData.QueryParameters['arg'] = args();
                requestData.QueryParameters['actionKey'] = 'exportTo';
            }
            this._doExportSync(null, printable, this._useSameTabExport, false, null, abortController);
        }
        return deferred.promise();
    }
    _showAsyncExportError(window, message, status, statusText) {
        if (window) {
            const div = window.document.getElementById('loading');
            if (div) {
                if (status || statusText) {
                    const stringFormat = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} ({1} {2})', 'ASPxReportsStringId.Error_WithStatus');
                    div.innerText = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(stringFormat, message, status, statusText);
                }
                else
                    div.innerText = message;
            }
        }
    }
    _printUsingBlob(_exportWindow, _requestData, _method, useSameTab, printable, shouldChangePrintJobName, operationId, abortControler) {
        if (!this._useSameTabExport && _exportWindow && shouldChangePrintJobName) {
            _exportWindow.location.replace(_requestData.RequestUrl);
            this.preview.progressBar.complete(operationId);
            return;
        }
        _method === 'GET' && (_requestData.RequestUrl = this._addQueryParamsToUri(_requestData.RequestUrl, _requestData.QueryParameters));
        if ((0,external_DevExpress_Analytics_Utils_namespaceObject._isFetchConfigured)()) {
            this._printUsingBlobFetch(_exportWindow, _requestData, _method, useSameTab, printable, operationId, abortControler);
            return;
        }
        this._executeXhr(_exportWindow, _requestData, _method, this._handleXhrReady);
    }
    _executeXhr(_exportWindow, _requestData, _method, _handleXhrReady) {
        this._prepareXhr(_exportWindow, _requestData, _method, _requestData.RequestUrl, _handleXhrReady);
        const formData = new FormData();
        for (const key in _requestData.FormData) {
            formData.append(key, _requestData.FormData[key]);
        }
        this._xhr.send(formData);
    }
    _printUsingBlobFetch(_exportWindow, _requestData, _method, useSameTab, printable, operationId, abortController) {
        if (this._useSameTabExport && (!printable || (isMobile && !useSameTab))) {
            this._getExportResultUsingFetch(_requestData, _method, printable, this._handleFile, operationId, abortController);
            return;
        }
        const handleFile = (fileMetadata, _url) => {
            if (fileMetadata.url && _exportWindow) {
                _exportWindow.location.replace(fileMetadata.url);
                setTimeout(() => { _url.revokeObjectURL(fileMetadata.url); }, 1);
                this._callPrint(_exportWindow);
            }
        };
        this._getExportResultUsingFetch(_requestData, _method, printable, handleFile, operationId, abortController);
    }
    _prepareXhr(_exportWindow, _requestData, _method, _exportUrl, _handleXhrReady) {
        const _this = this;
        this._xhr = new XMLHttpRequest();
        this._xhr.onreadystatechange = function () {
            _handleXhrReady(_this, this, _exportWindow, _requestData);
        };
        this._xhr.open(_method, _exportUrl);
        this._xhr.responseType = 'blob';
    }
    _handleXhrReady(_this, _xmlHttpRequest, _exportWindow, _requestData) {
        if (_xmlHttpRequest.readyState == 4 && _xmlHttpRequest.status == 200) {
            const _url = _this._getUrlObject();
            const blobUrl = _url.createObjectURL(_xmlHttpRequest.response);
            _exportWindow && _exportWindow.location.replace(blobUrl);
            setTimeout(() => { _url.revokeObjectURL(blobUrl); }, 1);
            _this._callPrint(_exportWindow);
        }
        else if (_xmlHttpRequest.readyState == 4 && _xmlHttpRequest.status >= 400) {
            const message = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError');
            PreviewRequestWrapper.getProcessErrorCallback(_this.preview, message, true)('', this, '');
            if (_exportWindow && _exportWindow.name != _this.exportingFrameName) {
                _this._showAsyncExportError(_exportWindow, message, _xmlHttpRequest.status, _xmlHttpRequest.statusText);
            }
        }
    }
    _addQueryParamsToUri(_exportUri, _queryParameters) {
        const keys = Object.keys(_queryParameters || {});
        if (keys.length > 0) {
            _exportUri += '?';
            _exportUri += keys.map(x => x + '=' + _queryParameters[x]).join('&');
        }
        return _exportUri;
    }
    _replaceLocation(_exportWindow, _requestData) {
        if (!_requestData) {
            return safelyRunWindowOpen('');
        }
        const _exportUrl = this._addQueryParamsToUri(_requestData.RequestUrl, _requestData.QueryParameters);
        _exportWindow ? _exportWindow.location.replace(_exportUrl) : (_exportWindow = safelyRunWindowOpen(_exportUrl));
        return _exportWindow;
    }
    dispose() {
        super.dispose();
        this._exportResultDeferred?.reject();
        if (this._xhr)
            this._xhr.onreadystatechange = null;
        (this._timeouts || []).forEach(tic => clearTimeout(tic));
        this.removeProperties();
    }
    updateExportStatus(progress, operationId) {
        if ((0,external_DevExpress_Analytics_Utils_namespaceObject._isFetchConfigured)() && this._useSameTabExport) {
            progress = Math.floor(progress / 2);
        }
        if (this.preview.progressBar)
            this.preview.progressBar.progress = progress;
        if (this._window) {
            const div = this._window.document.getElementById('loading');
            const exportText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Exporting the document...', 'PreviewStringId.Msg_ExportingDocument') + ' ' + progress + '%';
            div && (div.innerText = exportText);
            this._window.document.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Exporting...', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportTabTitle') + progress + '%';
        }
        if (progress >= 100) {
            this.preview.progressBar.complete(operationId);
        }
    }
    getExportStatus(operationId) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._timeouts.push(setTimeout(() => {
            this.preview.requestWrapper.getExportStatusRequest(operationId)
                .then((response) => {
                this.preview.previewHandlersHelper.doneExportStatusHandler(deferred, operationId, response);
            })
                .catch((error) => {
                this.preview.previewHandlersHelper.errorExportStatusHandler(deferred, operationId);
                !this._useSameTabExport && error.responseJSON && error.responseJSON['error'] && this._showAsyncExportError(this._window, error.responseJSON['error']);
            });
        }, 250));
        return deferred.promise();
    }
    getExportResult(operationId, inlineDisposition, useSameTab, token, printable = false, uri = '', abortController) {
        const requestData = this._exportResultRequestData;
        if (uri) {
            requestData.RequestUrl = uri;
        }
        else if (token) {
            requestData.RequestUrl = ReportServerDownloadUri();
            requestData.QueryParameters['token'] = token;
            requestData.QueryParameters['printable'] = printable.toString();
        }
        else {
            const arg = JSON.stringify({ id: operationId, inlineResult: !!inlineDisposition });
            requestData.RequestUrl = HandlerUri();
            if (this._useSameTabExport) {
                requestData.FormData['actionKey'] = 'getExportResult';
                requestData.FormData['arg'] = arg;
            }
            else {
                requestData.QueryParameters['actionKey'] = 'getExportResult';
                requestData.QueryParameters['arg'] = arg;
            }
        }
        this._window && (this._window.onunload = null);
        this._doExportSync(this._window, printable, useSameTab, !!uri, operationId, abortController);
        this._window = null;
    }
}
_exportHandler_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ExportHandler.prototype, "exportActionUri", void 0);
_exportHandler_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], ExportHandler.prototype, "exportFormData", void 0);
_exportHandler_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ExportHandler.prototype, "reportDisplayName", void 0);
_exportHandler_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ExportHandler.prototype, "popupVisible", void 0);

;// ./node_modules/devexpress-reporting/viewer/accessibility/_previewEditingFieldsKeyboardHelper.js

class PreviewEditingFieldsKeyboardHelper extends external_DevExpress_Analytics_Internal_namespaceObject.AccessibilityKeyboardHelperBase {
    constructor(_page) {
        super();
        this._page = _page;
        this.controlElementClassName = 'dx-accessibility-editing-field-item';
        this.accessibilityCompliantEnabled = true;
    }
    initialize() {
        super.initialize();
        this.setTabIndexes(0);
    }
    clickHandler() { }
    itemHandleEnterKey(e, index) {
        const item = this.controlElements[index];
        item.actionExecute(e);
        return true;
    }
    itemHandleSpaceKey(e, index) {
        return this.itemHandleEnterKey(e, index);
    }
    createControlElement(element, index) {
        return new PreviewEditingFieldsElement(element, this._page.editingFields[index]);
    }
}
class PreviewEditingFieldsElement extends external_DevExpress_Analytics_Internal_namespaceObject.AccessibilityControlElementBase {
    dispose() {
        this.element.removeEventListener('mousedown', this._isClick);
        this.element.removeEventListener('focus', this._activateHandler);
        this.element.removeEventListener('blur', this._blur);
        super.dispose();
    }
    actionExecute(e) {
        if (this.model.canActivateEditor)
            this._activateHandler(e);
        else if (this.model.onClick)
            this.model.onClick(this.model, e);
    }
    constructor(element, model) {
        super(element);
        this.element = element;
        this.model = model;
        this._processFocus = true;
        this._isClick = (e) => this._processFocus = false;
        this._activateHandler = (e) => {
            if (this.model.canActivateEditor && this._processFocus) {
                this.model.activateEditor(this.model, { target: this.element, currentTarget: this.element });
                this.element.setAttribute('tabindex', '-1');
                const subscriptionDispose = this.model.events.on('activeChanged', (args) => {
                    if (!args.newValue) {
                        this.element.setAttribute('tabindex', '0');
                        if (document.activeElement === document.body) {
                            this._processFocus = false;
                            this.element.focus();
                        }
                        subscriptionDispose();
                    }
                });
                this._disposables.push({ dispose: subscriptionDispose });
            }
        };
        this._blur = (e) => {
            this._processFocus = true;
        };
        element.addEventListener('mousedown', this._isClick);
        element.addEventListener('focus', this._activateHandler);
        element.addEventListener('blur', this._blur);
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_brickUtils.js
function convertToPercent(childSize, parentSize) {
    return childSize * 100 / parentSize + '%';
}
function getBrickValueForKey(brick, key = 'text') {
    const brickTextProperty = brick.content && brick.content.filter(x => x.Key === key)[0];
    return brickTextProperty && brickTextProperty.Value;
}
function brickText(brick, editingFieldsProvider) {
    const fields = editingFieldsProvider ? editingFieldsProvider() : [];
    if (brick.efIndex && brick.efIndex > 0 && brick.efIndex <= fields.length && fields[brick.efIndex - 1].type() === 'text') {
        return fields[brick.efIndex - 1].getEditValue();
    }
    else {
        return getBrickValueForKey(brick);
    }
}
function updateBricksPosition(brick, height, width) {
    if (!brick) {
        return;
    }
    brick[brick.rtl ? 'rightP' : 'leftP'] = convertToPercent(brick.left, width);
    brick.widthP = convertToPercent(brick.width, width);
    brick.topP = convertToPercent(brick.top, height);
    brick.heightP = convertToPercent(brick.height, height);
    brick.bricks && brick.bricks.forEach((childBrick) => {
        updateBricksPosition(childBrick, height, width);
    });
}
function initializeBrick(brick, processClick, editingFieldBricks) {
    if (!brick) {
        return;
    }
    brick.active = false;
    brick['onClick'] = (e) => { processClick && processClick(brick, e); };
    brick.bricks && brick.bricks.forEach(childBrick => {
        if (!childBrick)
            return;
        childBrick.top += brick.top;
        childBrick.left += brick.left;
        initializeBrick(childBrick, processClick, editingFieldBricks);
    });
    if (brick.efIndex > 0) {
        editingFieldBricks.push(brick);
    }
    brick.text = () => brickText(brick);
    brick.accessibleDescription = getBrickValueForKey(brick, 'AccessibleDescription');
}

;// ./node_modules/devexpress-reporting/viewer/internal/_page.viewModel.js


function createPreviewPageViewModel(base) {
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('pageLoading', this.pageLoading)
        .generateProperty('brickLoading', this.brickLoading)
        .generateProperty('width', this.size.width)
        .generateProperty('height', this.size.height)
        .generateProperty('displayImageSrc', this.displayImageSrc)
        .generateProperty('loadingText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Loading...', 'AnalyticsCoreStringId.Loading'))
        .generateProperty('delayedInit', () => this.reportPreview.delayedInit())
        .generateProperty('brickSelectionProg', {
        page: this, preview: this.reportPreview, click: (pageIndex) => this.reportPreview.goToPage(pageIndex)
    })
        .generateProperty('autoFitOptions', {
        setZoom: (newValue) => {
            if (this.isDisposing)
                return;
            this.reportPreview.originalZoom = newValue;
        },
        setAutoFitChangedEvent: (callback) => {
            this._onAutoFitChanged = callback;
            return () => this._onAutoFitChanged = undefined;
        },
        getPageSizeConfiguration: () => this._getPageSizeConfiguration()
    })
        .generateProperty('clickToBrick', (_, event) => this._clickToBrick(event))
        .generateProperty('currentPageAriaLabelImgAlt', this.currentPageAriaLabelImgAlt)
        .generateProperty('editingFields', this.editingFields)
        .generateProperty('color', this.color)
        .generateProperty('bricks', this.bricks)
        .generateProperty('activeBricks', this.activeBricks)
        .generateProperty('active', this.active)
        .generateProperty('clickableBricks', this.clickableBricks)
        .generateProperty('setPageActiveChangedEvent', (callback) => {
        this._onPageActiveChanged = callback;
        return () => {
            this._onPageActiveChanged = undefined;
        };
    })
        .generateProperty('editingFieldsKeyboardHelper', this.editingFieldsKeyboardHelper)
        .generateProperty('unifier', this._unifier)
        .getViewModel();
}
function updatePreviewPageViewModel(args) {
    const viewModel = this.getViewModel();
    if (args.propertyName === 'displayImageSrc') {
        viewModel.displayImageSrc = this.displayImageSrc;
    }
    else if (args.propertyName === 'pageLoading') {
        viewModel.pageLoading = this.pageLoading;
    }
    else if (args.propertyName === 'brickLoading') {
        viewModel.brickLoading = this.brickLoading;
    }
    else if (args.propertyName === 'isClientVisible') {
        viewModel.isClientVisible = this.isClientVisible;
    }
    else if (args.propertyName === 'active') {
        viewModel.active = this.active;
    }
    else if (args.propertyName === 'size') {
        viewModel.width = args.newValue['width'];
        viewModel.height = args.newValue['height'];
    }
    else if (args.propertyName === 'brick') {
        viewModel.bricks = this.bricks;
        viewModel.activeBricks = this.activeBricks;
        viewModel.clickableBricks = this.clickableBricks;
    }
    else if (args.propertyName === 'activeBricks') {
        if ('added' in args) {
            const arrayArgs = args;
            viewModel.activeBricks.push(...arrayArgs.added.map(x => x.item));
            arrayArgs.removed.forEach((x) => {
                viewModel.activeBricks.splice(viewModel.activeBricks.indexOf(x.item), 1);
            });
        }
        else {
            viewModel.activeBricks = this.activeBricks;
        }
    }
    else if (args.propertyName === 'editingFields') {
        viewModel.editingFields = this.editingFields.map(x => x.getViewModel());
    }
    else if (args.propertyName === 'currentPageAriaLabelImgAlt') {
        viewModel.currentPageAriaLabelImgAlt = this.currentPageAriaLabelImgAlt;
    }
    else if (args.propertyName === '_unifier') {
        viewModel.unifier = this._unifier;
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_page.js
var _page_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












const imageSrcMutableOptions = { rateLimit: { timeout: 100, method: 'notifyWhenChangesStop' } };
class PreviewPage extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    createViewModel() {
        return createPreviewPageViewModel.call(this, super.createViewModel());
    }
    updateViewModel(args) {
        updatePreviewPageViewModel.call(this, args);
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'zoom') {
            this._updatePageSize();
        }
        if (args.propertyName === 'previewSize')
            this._onResize();
        if (args.propertyName === 'originalSize' || args.propertyName === 'autoFitBy' || args.propertyName === 'brickLoading' || args.propertyName === 'previewSize') {
            this._onAutoFitChanged && this._onAutoFitChanged();
        }
        if (args.propertyName === 'active' || args.propertyName === 'brick') {
            if (!this.active) {
                this.resetBrickRecusive(this.brick);
                this._selectedBrickPath = null;
            }
            this._onPageActiveChanged && this._onPageActiveChanged(this.active);
        }
        if (args.propertyName === 'brick') {
            this.bricks = this.getBricksFlatList(this.brick);
            this.clickableBricks = this.bricks.filter((x) => !!x.navigation);
            this.updateActiveBricks();
        }
        if (args.propertyName === 'isClientVisible') {
            if (args.newValue) {
                this._setPageImgSrc(this.reportPreview.documentId, this._unifier, this.zoom);
            }
        }
        if (args.propertyName === 'imageSrc')
            this._onImageSrcChanged();
    }
    _initializeEditingFields(editingFieldBricks, originalWidth, originalHeight) {
        if (this._editingFieldsSubscriptionDispose) {
            this.editingFields.forEach(field => field.dispose && field.dispose());
            this._editingFieldsSubscriptionDispose();
        }
        const createEditingFields = () => {
            const allEditingFields = this.reportPreview._editingFields;
            if (!allEditingFields || editingFieldBricks.length === 0) {
                return [];
            }
            const pageFieldViewModels = [];
            for (let i = 0; i < editingFieldBricks.length; i++) {
                const brick = editingFieldBricks[i];
                const editingField = allEditingFields[brick.efIndex - 1];
                if (!editingField)
                    return [];
                editingField.brick = brick;
                pageFieldViewModels.push(editingField.createModel(this, originalWidth, originalHeight, () => allEditingFields, brick.absoluteBounds));
                brick.text = (brick => (() => brickText(brick, () => allEditingFields)))(brick);
            }
            return pageFieldViewModels;
        };
        this.editingFields = createEditingFields();
        this._editingFieldsSubscriptionDispose = this.reportPreview.events.on('_editingFieldsChanged', (args) => {
            this.editingFields = createEditingFields();
        });
    }
    _getPixelRatio() {
        return window['devicePixelRatio'] || 1;
    }
    _onPageLoaded(result, processClick) {
        if (!result)
            return;
        this.imageHeight = result.height;
        this.imageWidth = result.width;
        this.currentScaleFactor = this._currentScaleFactor;
        this._updatePageSize();
        this.displayImageSrc = 'data:image/png;base64,' + result.base64string;
        if (this._isDisposed)
            return;
        this.pageLoading = false;
        try {
            if (!result || !result.brick) {
                return;
            }
            this.brickColumnWidthArray = result.columnWidthArray;
            this.originalSize = { width: result.brick.width, height: result.brick.height };
            const editignFieldBricks = [];
            this.initializeBrick(result.brick, processClick, editignFieldBricks);
            this._initializeEditingFields(editignFieldBricks, result.brick.width, result.brick.height);
            this._selectedBrickPath && this.selectBrick(this._selectedBrickPath);
        }
        finally {
            if (!this.shouldSkipBrickLoading) {
                this.brickLoading = false;
            }
            this.shouldSkipBrickLoading = false;
        }
    }
    _onPageLoadFailed() {
        if (this._isDisposed)
            return;
        if (this.isClientVisible) {
            this.pageLoading = false;
            this.pageIndex !== -1 && (this.brickLoading = false);
        }
    }
    _updatePageSize() {
        const newSize = {
            width: this.imageWidth * this.zoom / this.currentScaleFactor / this._getPixelRatio(),
            height: this.imageHeight * this.zoom / this.currentScaleFactor / this._getPixelRatio()
        };
        if (!(0,external_DevExpress_Analytics_Elements_namespaceObject.compareSizes)(newSize, this.size)) {
            this.size = newSize;
        }
    }
    _getAriaLabel() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Report Preview page {0} of {1}', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPreviewPage'), this.pageIndex + 1, this.reportPreview.pages.length);
    }
    constructor(reportPreview, pageIndex, processClick, subscribeToPageLoading = false) {
        super();
        this.reportPreview = reportPreview;
        this.actualResolution = 0;
        this.currentScaleFactor = 1;
        this.imageHeight = 0;
        this.imageWidth = 0;
        this.imageSrcOptions = { rateLimit: { timeout: 100, method: 'notifyWhenChangesStop' } };
        this.shouldSkipBrickLoading = false;
        this.bricks = [];
        this.clickableBricks = [];
        this.maxZoom = 0;
        this.disableResolutionReduction = false;
        this.shouldSendRequest = true;
        this._lastZoom = 0;
        this._selectedBrickPath = null;
        this._resizeTimeout = null;
        this._onResize = () => {
            imageSrcMutableOptions.rateLimit.timeout = 500;
            this._resizeTimeout && clearTimeout(this._resizeTimeout);
            this._resizeTimeout = setTimeout(() => {
                imageSrcMutableOptions.rateLimit.timeout = 100;
            }, 500);
        };
        this._editingFieldsSubscriptionDispose = null;
        this.pageIndex = pageIndex;
        this._onImageSrcChanged = () => {
            this.lastGetPageDeferred && this.lastGetPageDeferred.resolve(null);
            const currentGetPageDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            this.lastGetPageDeferred = currentGetPageDeferred;
            currentGetPageDeferred
                .done((response) => this._onPageLoaded(response, processClick))
                .fail((_e) => this._onPageLoadFailed());
            this.shouldSendRequest && this._requestPage(reportPreview);
        };
        this._unifier = reportPreview._unifier || generateGuid();
        this.originalSize = { height: reportPreview._pageHeight, width: reportPreview._pageWidth };
        this.addDisposable(reportPreview.events.on('originalZoomChanged', (args) => {
            this.zoom = args.newValue;
        }), reportPreview.events.on('previewSizeChanged', (args) => {
            this.previewSize = args.newValue;
        }), reportPreview.events.on('autoFitByChanged', (args) => {
            this.autoFitBy = args.newValue;
        }), reportPreview.events.on('_unifierChanged', (args) => {
            this._unifier = args.newValue;
        }), reportPreview.events.on('pageLoadingChanged', (args) => {
            if (subscribeToPageLoading) {
                this.pageLoading = args.newValue;
            }
        }), reportPreview.events.on('pagesChanged', () => {
            this.currentPageAriaLabelImgAlt = this._getAriaLabel();
        }));
        this.previewSize = reportPreview.previewSize;
        this.autoFitBy = reportPreview.autoFitBy;
        this.imageWidth = this.originalSize.width * this._getPixelRatio();
        this.imageHeight = this.originalSize.height * this._getPixelRatio();
        this.color = reportPreview._pageBackColor || '';
        this.zoom = reportPreview.originalZoom;
        this.isEmpty = pageIndex === -1 && !this.brick && !processClick;
        this.currentPageAriaLabelImgAlt = this._getAriaLabel();
        this._updatePageSize();
        this.resetBrickRecusive = (brick) => {
            if (brick && brick.active !== undefined) {
                this.deactivateBrick(brick);
                if (brick.bricks) {
                    brick.bricks.forEach((childBrick) => { this.resetBrickRecusive(childBrick); });
                }
            }
        };
        this.selectBrick = (path, ctrlKey) => {
            if (PreviewSelection.started)
                return;
            processClick && processClick(null);
            let currentBrick = this.brick;
            !ctrlKey && this.resetBrickRecusive(currentBrick);
            if (!path) {
                return;
            }
            if (!currentBrick) {
                this._selectedBrickPath = path;
                return;
            }
            const pathElements = path.split(',');
            pathElements.forEach((el) => {
                currentBrick = currentBrick.bricks[parseInt(el)];
            });
            this.activateBrick(currentBrick);
        };
        this.editingFieldsKeyboardHelper = new PreviewEditingFieldsKeyboardHelper(this);
        this._disposables.push(this.editingFieldsKeyboardHelper);
    }
    updateSize(zoom) {
        const newResolution = getCurrentResolution(zoom);
        return newResolution;
    }
    updateActiveBricks() {
        this.activeBricks = this.bricks.filter(x => x.active);
    }
    activateBrick(brick) {
        if (brick.active)
            return;
        brick.active = true;
        this.updateActiveBricks();
    }
    deactivateBrick(brick) {
        if (!brick.active)
            return;
        brick.active = false;
        this.updateActiveBricks();
    }
    clearBricks() {
        this.brickLoading = true;
    }
    dispose() {
        super.dispose();
        this._isDisposed = true;
        this._editingFieldsSubscriptionDispose && this._editingFieldsSubscriptionDispose();
        this.reportPreview = null;
        this.lastGetPageDeferred?.reject();
    }
    _setPageImgSrc(documentId, unifier, zoom, shouldSkipBricks) {
        if (!documentId || this.pageIndex === -1) {
            return;
        }
        if (this.maxZoom && this.maxZoom < zoom) {
            zoom = this.maxZoom;
        }
        if (this._lastZoom < zoom) {
            this._lastZoom = zoom;
        }
        else {
            if (this.actualResolution && this.disableResolutionReduction && this.imageSrc)
                return;
        }
        const newResolution = this.updateSize(zoom);
        if ((this.actualResolution === newResolution || newResolution < 9) && this.imageSrc) {
            return;
        }
        this.actualResolution = newResolution;
        this._currentScaleFactor = zoom;
        this.shouldSkipBrickLoading = shouldSkipBricks ?? false;
        this.imageSrc = HandlerUri() +
            '?actionKey=getPage&unifier=' + unifier +
            '&arg=' + encodeURIComponent(JSON.stringify(this._getCurrentPageRequest(documentId, shouldSkipBricks)));
    }
    _requestPage(preview) {
        if (this.isDisposing)
            return;
        this.brickLoading = true;
        const documentId = this.reportPreview.documentId;
        const currentGetPageDeferred = this.lastGetPageDeferred;
        const ignoreError = preview._closeDocumentRequests && (() => preview._closeDocumentRequests[documentId] || currentGetPageDeferred.state() != 'pending');
        PreviewRequestWrapper.getPage(this.imageSrc, ignoreError)
            .then((response) => {
            currentGetPageDeferred.resolve(response);
        }).catch((_e) => {
            currentGetPageDeferred.reject(_e);
        });
    }
    _getCurrentPageRequest(documentId, shouldSkipBricks) {
        return {
            pageIndex: this.pageIndex,
            documentId: documentId,
            resolution: Math.floor(this.actualResolution * this._getPixelRatio()),
            includeBricks: shouldSkipBricks ? false : this.brickLoading
        };
    }
    _getPageSizeConfiguration() {
        return {
            width: this.originalSize.width,
            height: this.originalSize.height,
            autoFitBy: this.autoFitBy,
            skipIfInvisible: false,
        };
    }
    _clear() {
        this.pageIndex = -1;
        this.isClientVisible = false;
        this._setPageImgSrc(null, null, 1);
        this.actualResolution = 0;
    }
    initializeBrick(brick, processClick, editingFieldBricks) {
        initializeBrick(brick, processClick, editingFieldBricks);
        updateBricksPosition(brick, brick.height, brick.width);
        this.brick = brick;
    }
    _clickToBrick(e) {
        const target = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(e.currentTarget);
        const offset = target.offset();
        const xPerc = (e.clientX - offset.left + window.scrollX) / target.width() * 100;
        const yPerc = (e.clientY - offset.top + window.scrollY) / target.height() * 100;
        const bricks = this.bricks;
        for (let i = 0; i < bricks.length; i++) {
            if (parseFloat(bricks[i].topP) < yPerc && parseFloat(bricks[i].topP) + parseFloat(bricks[i].heightP) > yPerc
                && parseFloat(bricks[i].leftP) < xPerc && parseFloat(bricks[i].leftP) + parseFloat(bricks[i].widthP) > xPerc) {
                bricks[i].onClick && bricks[i].onClick(e);
                break;
            }
        }
    }
    getBricksFlatList(brick) {
        if (brick) {
            let bricks = [];
            const innerBricksLength = brick.bricks && brick.bricks.length || 0;
            for (let i = 0; i < innerBricksLength; i++) {
                bricks = bricks.concat(this.getBricksFlatList(brick.bricks[i]));
            }
            bricks.push(brick);
            return bricks;
        }
        return [];
    }
}
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], PreviewPage.prototype, "editingFields", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PreviewPage.prototype, "isClientVisible", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1)
], PreviewPage.prototype, "zoom", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], PreviewPage.prototype, "previewSize", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(ZoomAutoBy.WholePage)
], PreviewPage.prototype, "autoFitBy", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => { return { with: 0, height: 0 }; }, { deferred: true })
], PreviewPage.prototype, "size", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => { return { with: 0, height: 0 }; })
], PreviewPage.prototype, "originalSize", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => '', imageSrcMutableOptions)
], PreviewPage.prototype, "imageSrc", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], PreviewPage.prototype, "pageLoading", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], PreviewPage.prototype, "brickLoading", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => '')
], PreviewPage.prototype, "displayImageSrc", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PreviewPage.prototype, "active", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], PreviewPage.prototype, "brick", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], PreviewPage.prototype, "_unifier", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], PreviewPage.prototype, "currentPageAriaLabelImgAlt", void 0);
_page_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], PreviewPage.prototype, "activeBricks", void 0);

;// ./node_modules/devexpress-reporting/viewer/internal/_pageLoader.js


class PageLoader {
    get pages() {
        return this._preview.pages || [];
    }
    _getNextStartingIndex(currentIndex) {
        return this.pages.find(page => page?.pageIndex > currentIndex && !page.imageSrc)?.pageIndex;
    }
    _getPagesToUpdate(startIndex, endIndex, currentPageIndex) {
        return this.pages.slice(startIndex, endIndex).filter(page => {
            if (currentPageIndex !== undefined) {
                return page.pageIndex !== currentPageIndex;
            }
            return !page.imageSrc;
        });
    }
    _performPrefetch(pagesToUpdate, resolution) {
        pagesToUpdate.forEach(page => this._preview.updatePage(page, resolution));
    }
    _scheduleNextPrefetch(currentIndex, pendingPages) {
        this._loadTimeout = setTimeout(() => {
            const startIndex = this._getNextStartingIndex(currentIndex);
            if (!startIndex) {
                this.reset();
                return;
            }
            const promises = pendingPages.map(page => page.lastGetPageDeferred?.promise()).filter(x => !!x);
            external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred.when(promises).done(() => {
                !this._disabled && this.prefetchPages(startIndex, startIndex + PreloadedPagesOffset(), undefined);
            });
        }, 700);
    }
    constructor(_preview) {
        this._preview = _preview;
        this._defaultResolution = 0.25;
        this._requestCyclesLimit = 5;
        this._currentPrefetchCycle = 0;
        this._disabled = true;
    }
    prefetchPages(startIndex, endIndex, currentPageIndex) {
        this._disabled = false;
        let zoom = this._preview.originalZoom;
        if (currentPageIndex === undefined) {
            zoom = this._defaultResolution;
            this._currentPrefetchCycle++;
        }
        if (startIndex > this.pages.length - 1 || this._currentPrefetchCycle >= this._requestCyclesLimit) {
            this.reset();
            return;
        }
        const pendingPages = this._getPagesToUpdate(startIndex, endIndex, currentPageIndex);
        this._performPrefetch(pendingPages, zoom);
        this._scheduleNextPrefetch(endIndex, pendingPages);
    }
    reset() {
        this._loadTimeout && clearTimeout(this._loadTimeout);
        this._loadTimeout = null;
        this._disabled = true;
        this._currentPrefetchCycle = 0;
    }
    isActive() {
        return !!this._loadTimeout;
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_previewHandlersHelper.js


class PreviewHandlersHelper {
    constructor(preview) {
        this._preview = preview;
    }
    doneStartExportHandler(deferred, inlineResult, response, exportOperationIdDeferred, startExportOperationId, useSameTab = false, printable = false, abortController) {
        try {
            if (!response) {
                exportOperationIdDeferred.reject();
                this._preview.progressBar.complete(startExportOperationId);
                return;
            }
            const exportOperationId = response;
            exportOperationIdDeferred.resolve(exportOperationId);
            let progress = 0;
            const doGetExportStatus = (operationId) => {
                if (!this._preview?.exportHandler)
                    return;
                const promise = this._preview.exportHandler.getExportStatus(operationId);
                promise.then((result) => {
                    if (result && result.requestAgain) {
                        if (progress < result.progress) {
                            progress = result.progress;
                            this._preview.exportHandler.updateExportStatus(result.progress, operationId);
                        }
                        const doStatusRequest = () => { doGetExportStatus(operationId); };
                        PollingDelay() ? setTimeout(doStatusRequest, PollingDelay()) : doStatusRequest();
                    }
                    else {
                        if (!(0,external_DevExpress_Analytics_Utils_namespaceObject._isFetchConfigured)())
                            this._preview.progressBar.complete(operationId);
                        if (!result.requestAgain && result.completed && !this._preview._cancelExportRequests[operationId]) {
                            this._preview.exportHandler.updateExportStatus(result.progress, operationId);
                            this._preview.exportHandler.getExportResult(operationId, inlineResult, useSameTab, result.token, printable, result.uri, abortController);
                        }
                    }
                });
            };
            doGetExportStatus(exportOperationId);
        }
        finally {
            deferred.resolve(true);
            this._preview._startBuildOperationId = '';
        }
    }
    errorStartExportHandler(deferred, startExportOperationId) {
        this._preview.progressBar.complete(startExportOperationId);
        deferred.reject();
    }
    doneExportStatusHandler(deferred, operationId, response) {
        try {
            if (!response) {
                deferred.resolve({ requestAgain: false });
                this._preview.progressBar.complete(operationId);
                return;
            }
            if (this._preview.progressBar && this._preview.progressBar.progress < response.progress)
                this._preview.progressBar.progress = response.progress;
            deferred.resolve(response);
        }
        finally {
            if (!deferred.state || deferred.state() === 'pending') {
                deferred.resolve({ requestAgain: false });
            }
        }
    }
    errorExportStatusHandler(deferred, operationId) {
        this._preview.progressBar.complete(operationId);
        deferred.resolve({ requestAgain: false, completed: false });
    }
    doneStartBuildHandler(deferred, response, startBuildOperationId, doucmentIdDeferred) {
        try {
            const removeAllEmptyPages = (all) => {
                all && this._preview.removeAllPages();
                this._preview.removeEmptyPages();
            };
            if (!response || !response.documentId) {
                doucmentIdDeferred.reject();
                this._preview.progressBar.complete(startBuildOperationId);
                removeAllEmptyPages();
                return;
            }
            const documentId = response.documentId;
            const stopBuildRequest = this._preview._stopBuildRequests[startBuildOperationId];
            const closeDocumentRequest = this._preview._closeDocumentRequests[startBuildOperationId];
            if (startBuildOperationId && (stopBuildRequest || closeDocumentRequest)) {
                if (closeDocumentRequest) {
                    closeDocumentRequest && this._preview.closeDocument(documentId);
                }
                else {
                    stopBuildRequest && this._preview.stopBuild(documentId);
                }
                doucmentIdDeferred.reject();
                this._preview.progressBar.complete(startBuildOperationId);
                removeAllEmptyPages();
                return;
            }
            this._preview.documentId = documentId;
            doucmentIdDeferred.resolve(documentId);
            const doGetBuildStatus = this._preview.getDoGetBuildStatusFunc();
            doGetBuildStatus(documentId);
        }
        finally {
            deferred.resolve(true);
        }
    }
    errorStartBuildHandler(deferred, startBuildOperationId) {
        this._preview.pageLoading = false;
        this._preview.errorMessage = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Document creation was cancelled due to server error', 'WebDocumentViewer_DocumentCreationCancelled');
        this._preview.progressBar.complete(startBuildOperationId);
        deferred.resolve(true);
        this._preview.removeEmptyPages();
    }
    errorGetBuildStatusHandler(deferred) {
        deferred.resolve({ requestAgain: false, completed: false });
    }
    processPages(pageCount, stopProcessingPredicate) {
        const wereNoPagesAndNewOnesExist = this._preview.pageIndex === -1 && pageCount > 0;
        if (wereNoPagesAndNewOnesExist) {
            this._preview.pageIndex = 0;
        }
        const newPages = [];
        for (let i = 0; i < pageCount && !stopProcessingPredicate(); i++) {
            const createNewPage = (index) => {
                return this._preview.createPage(index, this._preview.createBrickClickProcessor(index));
            };
            if (i < this._preview.pages.length) {
                let page = this._preview.pages[i];
                if (!page || page.isEmpty) {
                    page = createNewPage(i);
                    const deleted = this._preview.pages.splice(i, 1, page);
                    deleted[0]?.dispose();
                }
                if (page.pageIndex === -1) {
                    page.pageIndex = i;
                    if (this._preview.pageIndex === i) {
                        this._preview.setPageVisibility(page, true);
                    }
                }
            }
            else {
                const newPage = createNewPage(i);
                newPages.push(newPage);
            }
        }
        this._preview.pages.push(...newPages);
        this._preview._raiseOnSizeChanged();
        if (wereNoPagesAndNewOnesExist) {
            const pageIndex = this._preview.pages.length ? 0 : -1;
            this._preview.goToPage(pageIndex, true);
        }
    }
    doneGetBuildStatusHandler(deferred, documentId, response, stopProcessingPredicate) {
        try {
            if (!response) {
                deferred.resolve({ requestAgain: false });
                return;
            }
            if (this._preview.progressBar.progress < response.progress && !this._preview._stopBuildRequests[documentId] && !stopProcessingPredicate())
                this._preview.progressBar.progress = response.progress;
            this.processPages(response.pageCount, stopProcessingPredicate);
            this._preview._resolveFirstPage(response);
            deferred.resolve(response);
        }
        finally {
            if (deferred.state() === 'pending') {
                deferred.resolve({ requestAgain: false });
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_progressViewModel.js
var _progressViewModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class ProgressViewModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    deferredUpdateViewModel() { return false; }
    constructor(enableKeyboardSupport) {
        super();
        this._cancelExportRequests = {};
        if (enableKeyboardSupport) {
            this.progressBarAccessibility = new external_DevExpress_Analytics_Internal_namespaceObject.ListKeyboardHelper();
            this._disposables.push(this.progressBarAccessibility);
        }
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.visible = !this._forceInvisible && this.inProgress;
        viewModel.text = this.text;
        viewModel.progress = this.progress;
        viewModel.cssClasses = this._cssClasses;
        viewModel.cancelButton.visible = this._operationId && !this._isCancelling;
        viewModel.cancelButton.text = this.cancelText;
        viewModel.cancelButton.action = this.cancelAction;
    }
    createViewModel() {
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('visible', this.visible)
            .generateProperty('text', this.text)
            .generateProperty('progress', this.progress)
            .generateProperty('cssClasses', this._cssClasses)
            .generateProperty('progressBarAccessibilityKeyboardHelper', this.progressBarAccessibility)
            .generateProperty('cancelButton', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('visible', false)
            .generateProperty('text', this.cancelText)
            .generateProperty('action', this.cancelAction)
            .getViewModel())
            .getViewModel();
        return viewModel;
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'visible') {
            this._forceInvisible = !args['newValue'];
        }
    }
    _rejectLastOperationIdDeferred() {
        this._lastOperationIdDeferred && this._lastOperationIdDeferred.reject();
    }
    _rejectLastOperationDeferred() {
        this._lastOperationDeferred && this._lastOperationDeferred.reject();
    }
    startProgress(startOperationId, onStop, operationIdPromise) {
        if (this.inProgress) {
            this.cancelAction();
            this._rejectLastOperationDeferred();
            this._rejectLastOperationIdDeferred();
        }
        this._startOperationId = startOperationId;
        this.inProgress = true;
        this.progress = 0;
        const newOperationDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const newOperationIdDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._lastOperationDeferred = newOperationDeferred;
        this._lastOperationIdDeferred = newOperationIdDeferred;
        operationIdPromise
            .then(operationId => {
            newOperationIdDeferred.resolve(operationId);
        }).catch(() => {
            newOperationIdDeferred.reject();
            newOperationDeferred.reject();
            this.complete(startOperationId);
        });
        newOperationIdDeferred.done(operationId => {
            this._operationId = operationId;
        });
        this.cancelAction = () => {
            this._isCancelling = true;
            this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancelling...', 'ASPxReportsStringId.WebDocumentViewer_Cancelling');
            const operationId = this._operationId;
            const finalizeId = operationId || this._startOperationId;
            try {
                (0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(onStop) && onStop(finalizeId);
                if (operationId)
                    this._cancelExportRequests[operationId] = true;
                if (this._startOperationId)
                    this._cancelExportRequests[this._startOperationId] = true;
            }
            finally {
                this.complete(operationId);
            }
        };
        return this._lastOperationDeferred.promise();
    }
    complete(completeOperationId) {
        if (completeOperationId === this._operationId || this._startOperationId === completeOperationId || !completeOperationId) {
            this.inProgress = false;
            this.progress = 0;
            this._startOperationId = null;
            this._operationId = null;
            this._lastOperationDeferred && this._lastOperationDeferred.resolve(completeOperationId);
            this._rejectLastOperationIdDeferred();
            this._isCancelling = false;
        }
    }
    wasCancelRequested(id) {
        return !!(id && this._cancelExportRequests[id]);
    }
    setPosition(position) {
        const result = [];
        if (!position) {
            result.push('dxrd-align-default');
        }
        else {
            if (position.top)
                result.push('dxrd-align-top');
            if (position.right)
                result.push('dxrd-align-right');
            if (position.bottom)
                result.push('dxrd-align-bottom');
            if (position.left)
                result.push('dxrd-align-left');
        }
        this._cssClasses = result.join(' ');
    }
    dispose() {
        this._rejectLastOperationIdDeferred();
        super.dispose();
    }
}
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => false)
], ProgressViewModel.prototype, "visible", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => '')
], ProgressViewModel.prototype, "text", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => 0)
], ProgressViewModel.prototype, "progress", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'))
], ProgressViewModel.prototype, "cancelText", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => () => { })
], ProgressViewModel.prototype, "cancelAction", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => false)
], ProgressViewModel.prototype, "inProgress", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => '')
], ProgressViewModel.prototype, "_operationId", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => false)
], ProgressViewModel.prototype, "_isCancelling", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => false)
], ProgressViewModel.prototype, "_forceInvisible", void 0);
_progressViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => '')
], ProgressViewModel.prototype, "_cssClasses", void 0);

;// ./node_modules/devexpress-reporting/viewer/internal/_sortingProcessor.js

class SortingProcessor {
    constructor(_getSortingStage) {
        this._getSortingStage = _getSortingStage;
    }
    doSorting(sortData, shiftKey, ctrlKey) {
        if (!sortData)
            return;
        if (ctrlKey) {
            if (this._detachSorting(sortData))
                return;
        }
        else if (shiftKey)
            this._appendSorting(sortData);
        else
            this._applySorting(sortData);
        return true;
    }
    _applySorting(sortData) {
        const sortingStage = this._getSortingStage();
        for (let i = 0; i < sortingStage.length; i++) {
            if (sortingStage[i] && sortingStage[i].Key === sortData.target) {
                const value = sortingStage[i].Value || [];
                for (let index = 0; index < value.length; index++) {
                    if (value[index] && (value[index].fieldName === sortData.field)) {
                        if (index != 0) {
                            const x = value.splice(index, 1)[0];
                            this._changeSortOrder(x);
                            value.unshift(x);
                        }
                        else
                            this._changeSortOrder(value[index]);
                    }
                    else
                        value[index].sortOrder = ColumnSortOrder.None;
                }
                return;
            }
        }
    }
    _appendSorting(sortData) {
        const sortingStage = this._getSortingStage();
        for (let i = 0; i < sortingStage.length; i++) {
            if (sortingStage[i] && sortingStage[i].Key === sortData.target) {
                const value = sortingStage[i].Value || [];
                for (let index = 0; index < value.length; index++) {
                    if (value[index] && (value[index].fieldName === sortData.field)) {
                        if (index != value.length - 1) {
                            const x = value.splice(index, 1)[0];
                            this._changeSortOrder(x);
                            value.push(x);
                            return;
                        }
                        this._changeSortOrder(value[index]);
                        return;
                    }
                }
            }
        }
    }
    _detachSorting(sortData) {
        let skipProcessing = false;
        const sortingStage = this._getSortingStage();
        for (let i = 0; i < sortingStage.length; i++) {
            if (sortingStage[i] && sortingStage[i].Key === sortData.target) {
                (sortingStage[i].Value || []).forEach(f => {
                    if (f.sortOrder === ColumnSortOrder.None)
                        skipProcessing = true;
                    else
                        f.sortOrder = ColumnSortOrder.None;
                });
                return;
            }
        }
        return skipProcessing;
    }
    _changeSortOrder(fieldInfo) {
        fieldInfo.sortOrder = fieldInfo.sortOrder === ColumnSortOrder.Ascending ? ColumnSortOrder.Descending : ColumnSortOrder.Ascending;
    }
}

;// ./node_modules/devexpress-reporting/viewer/reportPreview.viewModel.js

function createReportPreviewViewModel(base) {
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('editingFieldsHighlighted', this.editingFieldsHighlighted)
        .generateProperty('rtlReport', this.rtlReport)
        .generateProperty('currentPage', this.currentPage?.getViewModel())
        .generateProperty('progressBar', this.progressBar?.getViewModel())
        .generateProperty('showMultipagePreview', this.showMultipagePreview)
        .generateProperty('previewVisible', this.previewVisible)
        .generateProperty('getSelectedContent', (mask) => this.getSelectedContent(mask))
        .generateProperty('lazyImagesOptions', {
        getEnabled: () => this.showMultipagePreview,
        setLoadVisibleImagesCallback: (callback) => {
            this._loadVisibleImages = callback;
            return () => {
                this._loadVisibleImages = null;
            };
        },
        getPage: (index) => {
            return this.pages[index];
        },
        setPageVisibility: (page, isVisible) => this.setPageVisibility(page.getModel(), isVisible)
    })
        .generateProperty('pages', this._getPagesViewModels())
        .generateProperty('delayedInit', () => this.delayedInit())
        .generateProperty('emptyDocumentCaption', this.emptyDocumentCaption)
        .generateProperty('previewBrickKeyboardHelper', this.previewBrickKeyboardHelper)
        .getViewModel();
}
function updateReportPreviewViewModel(args) {
    const viewModel = this.getViewModel();
    if (args.propertyName === 'editingFieldsHighlighted') {
        viewModel.editingFieldsHighlighted = this.editingFieldsHighlighted;
    }
    if (args.propertyName === 'showMultipagePreview') {
        viewModel.showMultipagePreview = this.showMultipagePreview;
    }
    if (args.propertyName === 'rtlReport') {
        viewModel.rtlReport = this.rtlReport;
    }
    if (args.propertyName === 'emptyDocumentCaption') {
        viewModel.emptyDocumentCaption = this.emptyDocumentCaption;
    }
    if (args.propertyName === 'previewVisible') {
        viewModel.previewVisible = this.previewVisible;
    }
    if (args.propertyName === 'currentPage') {
        viewModel.currentPage = this.currentPage?.getViewModel();
    }
    if (args.propertyName === 'pages') {
        if ('removed' in args) {
            args.removed.forEach(removed => viewModel.pages.splice(removed.index, 1));
        }
        if ('added' in args) {
            let array = [];
            const addItems = () => {
                if (array.length === 0)
                    return;
                const items = array.map(x => x.item.getViewModel());
                viewModel.pages.splice(array[0].index, 0, ...items);
            };
            args.added.forEach(added => {
                const lastAdded = array[array.length - 1];
                if (!lastAdded || added.index === lastAdded.index + 1) {
                    array.push(added);
                }
                else {
                    addItems();
                    array = [added];
                }
            });
            addItems();
        }
        else {
            viewModel.pages = this._getPagesViewModels();
        }
    }
    if (args.propertyName === 'signatures') {
        viewModel.signatures = this.signatures;
    }
}

;// ./node_modules/devexpress-reporting/viewer/accessibility/_breadcrumbsKeyboardHelper.js

class BreadcrumbsKeyboardHelper extends external_DevExpress_Analytics_Internal_namespaceObject.AccessibilityKeyboardHelperBase {
    constructor(_breadcrumbsModel) {
        super();
        this._breadcrumbsModel = _breadcrumbsModel;
        this.controlElementClassName = 'breadcrumb-item';
        this.addDisposable(this._breadcrumbsModel.events.on('listItemsChanged', () => {
            this._initialize();
        }));
    }
    _initialize() {
        this._initTimeout && clearTimeout(this._initTimeout);
        this._initTimeout = setTimeout(() => {
            this.initialize();
        }, 1);
    }
    bindHandler(el) {
        super.bindHandler(el);
        this._initialize();
    }
    initialize() {
        super.initialize();
        this.setTabIndexes('-1');
        if (this.controlElements && this.controlElements.length) {
            this.controlElements[0].setTabIndex('0');
        }
    }
    createControlElement(element, index) {
        return new external_DevExpress_Analytics_Internal_namespaceObject.AccessibilityControlElementBase(element);
    }
    itemHandleEnterKey(e, index) {
        if (this.controlElements && this.controlElements[index]) {
            this.controlElements[index].element?.dispatchEvent(new Event('click'));
            return true;
        }
        return false;
    }
    itemHandleDownArrowKey(e, index) {
        this.setTabIndexes('-1');
        this.setFocusToNext(index, true);
        return true;
    }
    itemHandleLeftArrowKey(e, index) {
        return this.itemHandleUpArrowKey(e, index);
    }
    itemHandleUpArrowKey(e, index) {
        this.setTabIndexes('-1');
        this.setFocusToPrevious(index, true);
        return true;
    }
    itemHandleRightArrowKey(e, index) {
        return this.itemHandleDownArrowKey(e, index);
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_previewBreadcrumbs.js
var _previewBreadcrumbs_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class BreadcrumbItem extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    constructor(position, previewInitData, onItemClick) {
        super();
        this.previewInitData = previewInitData;
        this.onItemClick = onItemClick;
        this.position = position;
    }
    getModel() {
        return this;
    }
    onPropertyChanged(args) {
        this.updateViewModel(args);
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'displayText') {
            viewModel.displayText = this.displayText;
        }
        else if (args.propertyName === 'previewInitData') {
            viewModel.previewInitData = this.previewInitData;
        }
        else if (args.propertyName === 'parameterValues') {
            viewModel.parameterValues = this.parameterValues;
        }
        else if (args.propertyName === 'position') {
            viewModel.position = this.position;
        }
        else if (args.propertyName === 'pageIndex') {
            viewModel.pageIndex = this.pageIndex;
        }
        else if (args.propertyName === 'indexes') {
            viewModel.indexes = this.indexes;
        }
    }
    createViewModel() {
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('displayText', this.displayText)
            .generateProperty('position', this.position)
            .generateProperty('onItemClick', this.onItemClick)
            .generateProperty('previewInitData', this.previewInitData)
            .generateProperty('parameterValues', this.parameterValues)
            .generateProperty('pageIndex', this.pageIndex)
            .generateProperty('indexes', this.indexes)
            .getViewModel();
        return viewModel;
    }
}
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], BreadcrumbItem.prototype, "pageIndex", void 0);
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], BreadcrumbItem.prototype, "indexes", void 0);
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], BreadcrumbItem.prototype, "displayText", void 0);
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], BreadcrumbItem.prototype, "position", void 0);
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)()
], BreadcrumbItem.prototype, "parameterValues", void 0);
class BreadcrumbModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    addItem(previewInitData, itemClick, displayText) {
        const position = this.listItems.length;
        this.listItems.push(new BreadcrumbItem(position, previewInitData, itemClick));
    }
    reset() {
        const model = this.getModel();
        model.listItems = [];
        this.listItems = model.listItems;
    }
    updateCurrentParameters(parametersViewModel) {
        const currentItem = this._currentIndex() !== -1 && this.listItems[this._currentIndex()];
        const parameterValues = {};
        if (currentItem) {
            parametersViewModel['_parameters'].forEach(parameter => {
                if (!parameter.visible)
                    return;
                const getValue = (parameter) => parameter.value ? [...parameter.value] : parameter;
                const searchForValue = (groupLayoutItem, parameterPath) => {
                    let parameterValue;
                    if (groupLayoutItem[parameterPath])
                        return getValue(groupLayoutItem[parameterPath]);
                    groupLayoutItem.groupLayoutItems?.forEach(groupLayoutItem => {
                        const valueFound = searchForValue(groupLayoutItem, parameterPath);
                        if (valueFound)
                            parameterValue = valueFound;
                    });
                    return parameterValue;
                };
                parameterValues[parameter.path] = searchForValue(parametersViewModel, parameter.path);
            });
            this.listItems[this._currentIndex()].parameterValues = parameterValues;
        }
    }
    updateCurrentItem(previewInitData, itemClick, displayText) {
        const newItemData = new BreadcrumbItem(0, previewInitData, itemClick);
        newItemData.setProperty('displayText', displayText);
        if (this._currentIndex() === -1) {
            this.listItems.push(newItemData);
        }
        else {
            this.listItems.splice(this._currentIndex(), 1, newItemData);
            this.listItems[this._currentIndex()].position = this._currentIndex();
        }
    }
    updateCurrentDocumentId(documentId) {
        if (!documentId)
            return;
        if (this.listItems[this._currentIndex()] && this.listItems[this._currentIndex()].previewInitData)
            this.listItems[this._currentIndex()].previewInitData.documentId = documentId;
    }
    updateCurrentPosition(pageIndex, indexes) {
        const currentItemIndex = this._currentIndex();
        this.listItems[currentItemIndex].pageIndex = pageIndex;
        this.listItems[currentItemIndex].indexes = indexes;
    }
    updateCurrentReportName(displayText) {
        if (displayText && displayText.length)
            this.listItems[this._currentIndex()].displayText = displayText;
        this.updatePreviewSize && this.updatePreviewSize();
    }
    getCurrentPageInfo() {
        const index = this._currentIndex();
        return index < 0 ? {} : { pageIndex: this.listItems[index].pageIndex, indexes: this.listItems[index].indexes };
    }
    _currentIndex() {
        return this.listItems.length - 1;
    }
    onClick(itemIndex) {
        if (this.listItems.length > itemIndex + 1) {
            this.listItems = this.listItems.slice(0, itemIndex + 1);
            const model = this.getModel();
            model.listItems = this.listItems.map(item => item.getModel());
        }
        const activeItem = this.listItems[itemIndex];
        activeItem.onItemClick(activeItem.previewInitData, activeItem.parameterValues, activeItem.pageIndex);
    }
    constructor() {
        super();
        this.keyboardHelper = new BreadcrumbsKeyboardHelper(this);
        this.templateName = PreviewElements.Breadcrumb;
        this.listItems = [];
    }
    dispose() {
        super.dispose();
        this.listItems.splice(0);
    }
    getModel() {
        return this;
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'listItems') {
            this.visible = args.newValue.length > 0;
            const viewModel = this.getViewModel();
            viewModel.listItems = this.listItems.map(item => (item.getViewModel && item.getViewModel())).filter(item => item);
        }
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.listItems = this.listItems.map(item => (item.getViewModel && item.getViewModel())).filter(item => item);
    }
    createViewModel() {
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('visible', this.visible)
            .generateProperty('listItems', this.listItems.map(item => item.getViewModel()))
            .generateProperty('templateName', this.templateName)
            .generateProperty('onClick', this.onClick)
            .generateProperty('keyboardHelper', this.keyboardHelper)
            .getViewModel();
        return viewModel;
    }
}
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], BreadcrumbModel.prototype, "visible", void 0);
_previewBreadcrumbs_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], BreadcrumbModel.prototype, "listItems", void 0);

;// ./node_modules/devexpress-reporting/viewer/reportHolder.js
var reportHolder_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class ReportHolder extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    _clearReportInfo() {
        this.closeReport();
        this.originalParametersInfo = null;
    }
    constructor(handlerUri, previewRequestWrapper, element) {
        super();
        this.element = element;
        this._deferreds = [];
        this._closeReportRequests = {};
        HandlerUri(handlerUri || HandlerUri());
        this.requestWrapper = previewRequestWrapper;
    }
    onPropertyChanged(args) { }
    dispose() {
        super.dispose();
        (this._deferreds || []).forEach(deferred => deferred.reject());
    }
    closeReport() {
        this._openReportOperationDeferred && this._openReportOperationDeferred.reject();
        this._initializeDataPromise = null;
        const currentReportId = this.reportId;
        if (!currentReportId) {
            return;
        }
        this._closeReportRequests[currentReportId] = true;
        this.requestWrapper.sendCloseRequest(null, currentReportId);
    }
    deactivate() {
        this.closeReport();
        this.reportId = null;
        this.reportUrl = null;
        this.originalParametersInfo = null;
    }
    openReport(reportName) {
        this._clearReportInfo();
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._deferreds.push(deferred);
        this._openReportOperationDeferred = deferred;
        this.requestWrapper.openReport(reportName).done((response) => {
            deferred.resolve(response);
        }).fail((error) => {
            deferred.reject(error);
        });
        return this.initialize(deferred.promise());
    }
    initialize(initializeDataPromise) {
        this.reportId = null;
        this.reportUrl = null;
        this._initializeDataPromise = initializeDataPromise;
        initializeDataPromise.then((previewInitialize) => {
            if (this._initializeDataPromise !== initializeDataPromise)
                return;
            (0,external_DevExpress_Analytics_Internal_namespaceObject._addLicenseTrigger)(previewInitialize?._licenseOptions);
            if (previewInitialize && !previewInitialize.error && !previewInitialize.startBuildFaultMessage && (previewInitialize.reportId || previewInitialize.documentId)) {
                this.reportId = previewInitialize.reportId;
                this.reportUrl = previewInitialize.reportUrl;
                this.originalParametersInfo = previewInitialize.parametersInfo;
            }
        });
        return initializeDataPromise;
    }
    _getErrorMessage(jqXHR) {
        const serverError = (0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(jqXHR);
        if (!serverError)
            return jqXHR && jqXHR.responseJSON && jqXHR.responseJSON.result && jqXHR.responseJSON.result.faultMessage ?
                jqXHR.responseJSON.result.faultMessage :
                serverError;
        return serverError;
    }
    _processError(error, jqXHR, showForUser = true, serverError) {
        const prefix = error + ': ';
        serverError = serverError || this._getErrorMessage(jqXHR);
        serverError && (error = prefix + serverError);
        MessageHandler().processError(error, showForUser, serverError && prefix, this._getToastMessageContainer());
    }
    _getToastMessageContainer() {
        return this.element?.getElementsByClassName('dx-designer-viewport')[0];
    }
}
reportHolder_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportHolder.prototype, "originalParametersInfo", void 0);
reportHolder_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportHolder.prototype, "reportId", void 0);
reportHolder_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportHolder.prototype, "reportUrl", void 0);

;// ./node_modules/devexpress-reporting/viewer/reportPreview.js
var reportPreview_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






















class ReportPreview extends ReportHolder {
    _doDrillDown(drillDownKey) {
        this._drillDownState.forEach((x) => x.Key === drillDownKey && (x.Value = !x.Value));
        const documentId = this.documentId;
        this.closeDocument();
        this.progressBar.complete(documentId);
        this.documentMap = null;
        for (let i = this.pages.length - 1; i >= 0; i--) {
            const page = this.pages[i];
            if (i > this.pageIndex) {
                this.removePage(page);
            }
            else {
                page._clear();
            }
        }
        this._startBuildRequest();
    }
    _doSorting(sortData, shiftKey, ctrlKey) {
        if (!this._sortingProcessor.doSorting(sortData, shiftKey, ctrlKey))
            return;
        this.closeDocument();
        this.documentMap = null;
        this.pages.forEach(page => page._clear());
        this._startBuildRequest();
    }
    dispose() {
        super.dispose();
        this.pageLoader.reset();
        this.removeAllPages();
        (this._timeouts || []).forEach(tic => clearTimeout(tic));
        (this._deferreds || []).forEach(deferred => deferred.reject());
        this.exportHandler && this.exportHandler.dispose();
        this.removeProperties();
        this._sortingProcessor = null;
    }
    removePage(page) {
        const deletedPage = this.pages.splice(this.pages.indexOf(page), 1)[0];
        deletedPage?.dispose();
    }
    removeAllPages() {
        this.pages.forEach(x => x.dispose());
        this.pages = [];
    }
    removeEmptyPages(all) {
        all && this.removeAllPages();
        for (let idx = this.pages?.length - 1; idx >= 0; idx--) {
            const tempPage = this.pages[idx];
            (tempPage.isEmpty || tempPage.pageIndex === -1) && this.removePage(tempPage);
        }
    }
    _initialize(closeDocument = true) {
        this._drillDownState = [];
        this._sortingState = [];
        this._initialDocumentData = null;
        if (this.requestWrapper && this.requestWrapper['_searchModel']?.loading && this.requestWrapper['_searchModel']?.useAsyncSearch)
            this.requestWrapper['_searchModel']?.stopSearchProcess();
        if (closeDocument)
            this.closeDocument();
        this._editingFields = [];
        this.disposeArray(this._editingFields);
        this.documentMap = null;
        this.pageIndex = -1;
        this.pageLoading = true;
        this.errorMessage = '';
        this.exportOptionsModel = null;
        this.progressBar.complete(null);
        this._getBuildStatusDeferreds.forEach(a => a.reject());
        this._getBuildStatusDeferreds = [];
        this.disposePagesChangedEvent && this.disposePagesChangedEvent();
        this.pages.forEach(x => x.dispose());
        this.pages = [this.createPage(-1, undefined)];
        this.exportHandler.reportDisplayName = null;
    }
    createPage(pageIndex, processClick, subscribeToPageLoading = false) {
        return new PreviewPage(this, pageIndex, processClick, subscribeToPageLoading);
    }
    _getIgnorePredicate(documentId) {
        return () => this._closeDocumentRequests && this._closeDocumentRequests[documentId];
    }
    _cleanTabInfo() {
        this.exportOptionsModel = null;
        this.documentMap = null;
    }
    _clearReportInfo() {
        this._cleanTabInfo();
        super._clearReportInfo();
    }
    createBrickClickProcessor(cyclePageIndex) {
        const _self = this;
        return (brick, e) => {
            _self.goToPage(cyclePageIndex, true);
            if (!brick)
                return;
            const page = _self.pages[cyclePageIndex];
            if (!page)
                return;
            page.selectBrick('');
            const shiftKey = !!(e && e.shiftKey);
            const ctrlKey = !!(e && e.ctrlKey);
            const brickNavigation = brick && brick.navigation;
            const defaultHandler = () => {
                if (brickNavigation) {
                    if (brickNavigation.drillThroughData && _self.reportId) {
                        this._breadcrumb.updateCurrentPosition(this.pageIndex, brick.indexes);
                        _self.drillThrough(brickNavigation.drillThroughData);
                    }
                    else if (brickNavigation.drillDownKey && _self.reportId && _self._doDrillDown && _self._drillDownState.length > 0) {
                        if (_self._startBuildOperationId)
                            return;
                        _self._doDrillDown(brickNavigation.drillDownKey);
                    }
                    else if (brickNavigation.sortData && _self.reportId && _self._doSorting && _self._sortingState.length > 0) {
                        if (_self._startBuildOperationId)
                            return;
                        _self._doSorting(brickNavigation.sortData, shiftKey, ctrlKey);
                    }
                    else if (brickNavigation.pageIndex >= 0) {
                        const targetPage = _self.pages.filter(page => page.pageIndex === brickNavigation.pageIndex)[0];
                        if (targetPage) {
                            _self.goToPage(brickNavigation.pageIndex);
                            targetPage.selectBrick(brickNavigation.indexes);
                            _self.brickClickDocumentMapHandler && _self.brickClickDocumentMapHandler(brickNavigation);
                        }
                    }
                    else {
                        const validateUrl = function (url) {
                            const isUrlString = typeof url === 'string';
                            if (isUrlString) {
                                url = url.toLowerCase();
                            }
                            if (url === 'empty') {
                                return false;
                            }
                            return _self.allowURLsWithJSContent || (isUrlString && (url.indexOf('javascript:') === -1));
                        };
                        if (brickNavigation.url && validateUrl(brickNavigation.url)) {
                            safelyRunWindowOpen(brickNavigation.url, brickNavigation.target || '_blank');
                        }
                    }
                }
            };
            if (_self.customProcessBrickClick && _self.customProcessBrickClick(cyclePageIndex, brick, defaultHandler))
                return;
            defaultHandler();
        };
    }
    constructor(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl = false, enableKeyboardSupport, exportSettings, element, breadcrumb) {
        super(handlerUri, previewRequestWrapper, element);
        this.enableKeyboardSupport = enableKeyboardSupport;
        this.predefinedZoomLevels = [5, 2, 1.5, 1, 0.75, 0.5, 0.25];
        this._stopBuildRequests = {};
        this._closeReportRequests = {};
        this._closeDocumentRequests = {};
        this._cancelExportRequests = {};
        this._startBuildOperationId = '';
        this._drillDownState = [];
        this._sortingState = [];
        this._sortingProcessor = new SortingProcessor(() => this._sortingState || []);
        this._getBuildStatusDeferreds = [];
        this._timeouts = [];
        this._zoomLocker = new Locker();
        this.getSelectedContent = (punctuationMark = '') => {
            const currentPage = this.pages[this.pageIndex];
            if (!currentPage || !currentPage.brickColumnWidthArray) {
                return '';
            }
            const activeBricks = [];
            const getActiveBricks = function (currentBrick, resultArray) {
                if (!currentBrick) {
                    return;
                }
                currentBrick.active && currentBrick.genlIndex != -1 && activeBricks.push(currentBrick);
                currentBrick.bricks && currentBrick.bricks.length != 0 && currentBrick.bricks.forEach((innerBrick) => { getActiveBricks(innerBrick, resultArray); });
            };
            getActiveBricks(currentPage.brick, activeBricks);
            if (!activeBricks) {
                return '';
            }
            const sortedActiveBricks = [];
            const extendWithSpaces = function (width, text) {
                const spaceCount = width - text.length;
                for (let i = 0; i <= spaceCount; i++) {
                    text += ' ';
                }
                return text;
            };
            let firstUsedColumn = currentPage.brickColumnWidthArray.length, lastUsedColumn = -1;
            activeBricks.forEach((activeBrick) => {
                let row = sortedActiveBricks[activeBrick.row];
                if (!row) {
                    row = [];
                    sortedActiveBricks[activeBrick.row] = row;
                }
                row[activeBrick.col] = activeBrick.accessibleDescription || activeBrick.text();
                if (firstUsedColumn > activeBrick.col) {
                    firstUsedColumn = activeBrick.col;
                }
                if (lastUsedColumn < activeBrick.col) {
                    lastUsedColumn = activeBrick.col;
                }
            });
            let result = '';
            sortedActiveBricks.forEach((row, index) => {
                for (let c = firstUsedColumn; c <= lastUsedColumn; c++) {
                    const rowText = row[c] ? row[c] + punctuationMark : '';
                    result += c == lastUsedColumn ? rowText : extendWithSpaces(currentPage.brickColumnWidthArray[c], rowText);
                }
                if (index != sortedActiveBricks.length - 1) {
                    result += '\r\n';
                }
            });
            return result;
        };
        this.editingFieldsProvider = () => this._editingFields;
        this._raiseOnSizeChanged = () => { this._loadVisibleImages && this._loadVisibleImages(); };
        this._loadVisibleImages = null;
        this._getPagesViewModels = () => this.pages?.map(x => x.getViewModel());
        this.canSwitchToDesigner = true;
        this.allowURLsWithJSContent = false;
        this.zoomStep = 0.05;
        this._progressFirstTime = false;
        this.pageLoader = new PageLoader(this);
        this.progressBar = new ProgressViewModel(enableKeyboardSupport);
        this.editingFieldChanged = callbacks && callbacks.editingFieldChanged;
        this.previewHandlersHelper = previewHandlersHelper || new PreviewHandlersHelper(this);
        this.requestWrapper = previewRequestWrapper || new PreviewRequestWrapper(null, callbacks);
        this.rtlViewer = rtl;
        this._breadcrumb = breadcrumb ?? new BreadcrumbModel();
        this.exportHandler = new ExportHandler(exportSettings, this);
        if (callbacks) {
            this.customProcessBrickClick = callbacks.previewClick;
            this.customizeExportOptions = callbacks.customizeExportOptions;
            this.documentReady = callbacks.documentReady;
            this.exportHandler.onExportCustomEvent = callbacks.onExport;
            this._onGetBuildStatus = callbacks._onGetBuildStatus;
            this._onGetDocumentDetails = callbacks._onGetDocumentDetails;
        }
        this.addDisposable(EditablePreviewEnabled.subscribe((newValue) => !newValue && (this.editingFieldsHighlighted = false)));
        this._onDocumentBuildingChanged = (newVal) => {
            if (!newVal) {
                this._unifier = generateGuid();
                const documentId = this.documentId;
                const pageCount = this.pages.length;
                for (let i = 0; i < pageCount; i++) {
                    const page = this.pages[i];
                    if (!page.pageLoading) {
                        page.clearBricks();
                    }
                    page.updateSize(this.originalZoom);
                    page.actualResolution = 0;
                    page.isClientVisible && page._setPageImgSrc(documentId, this._unifier, this.originalZoom);
                }
                if (!this.pageLoader.isActive()) {
                    this.pageLoader.prefetchPages(0, 0, undefined);
                }
            }
            else {
                this.progressBar.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Creating the document...', 'PreviewStringId.Msg_CreatingDocument');
                this.progressBar.cancelText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel');
            }
        };
        this._disposables.push(this.progressBar);
        this._onOriginalZoomChanged = () => {
            if (this.showMultipagePreview) {
                this.pages.forEach((page) => {
                    page.updateSize(this.originalZoom);
                    page.isClientVisible = false;
                });
                this._raiseOnSizeChanged();
            }
            else {
                const currentPage = this.pages[this.pageIndex];
                currentPage && Promise.resolve().then(() => {
                    currentPage.onPropertyChanged({ propertyName: 'isClientVisible', newValue: currentPage.isClientVisible });
                });
            }
        };
        this._updateCurrentPage = () => {
            const pagesArray = this.pages;
            const pageIndex = this.pageIndex;
            if (!pagesArray || pageIndex >= pagesArray.length)
                return;
            let currentPage = null;
            if (pageIndex >= 0)
                currentPage = pagesArray[pageIndex];
            if (currentPage != this.currentPage)
                this.currentPage = currentPage;
        };
        if (enableKeyboardSupport) {
            this.previewBrickKeyboardHelper = new PreviewBricksKeyboardHelper(this);
            this._disposables.push(this.previewBrickKeyboardHelper);
        }
        this.addDisposable(this.progressBar.events.on('inProgressChanged', (args) => {
            this._updateExportDisabled();
        }), this.progressBar.events.on('progressChanged', (args) => {
            if (this.currentPage) {
                this._updateEmptyDocumentCaption();
            }
        }), this.exportHandler.events.on('reportDisplayNameChanged', (args) => {
            this._breadcrumb.updateCurrentReportName(args.newValue);
        }), this.events.on('documentIdChanged', (args) => {
            this._breadcrumb.updateCurrentDocumentId(this.documentId);
        }));
        this._updateExportDisabled();
    }
    delayedInit() {
        this.previewBrickKeyboardHelper && this.previewBrickKeyboardHelper.delayedInit();
    }
    goToReport(customData, closeCurrentReport = true) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const promise = deferred.promise();
        this._deferreds.push(deferred);
        this.requestWrapper.goToReport(customData).then(response => {
            if (closeCurrentReport) {
                this._clearReportInfo();
                this.initialize(promise);
            }
            deferred.resolve(response);
        }).catch((error) => {
            deferred.reject(error);
        });
        return promise;
    }
    drillThrough(drillThroughData) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const promise = deferred.promise();
        this._deferreds.push(deferred);
        this.requestWrapper.drillThrough(drillThroughData).then(response => {
            this._breadcrumb.addItem(response);
            this.initialize(promise, false);
            deferred.resolve(response);
        }).catch((error) => {
            deferred.reject(error);
        });
        return promise;
    }
    _sortCustomParametersLookUpValues(reportParameterInfo) {
        if (!reportParameterInfo || !reportParameterInfo.knownEnums)
            return;
        reportParameterInfo.parameters?.forEach((parameter) => {
            if (!parameter.LookUpValues)
                return;
            if (reportParameterInfo.knownEnums.some(x => x.enumType === parameter.TypeName)) {
                external_DevExpress_Analytics_Internal_namespaceObject.CustomSortedArrayStore._sortItems(parameter.LookUpValues, 'Description');
            }
        });
    }
    _resolveFirstPage(status) {
        const firstPage = this.pages[0];
        firstPage.shouldSendRequest = !!status.pageCount;
        if (firstPage.displayImageSrc || status.pageCount === 0)
            return;
        if (status.firstPageResponse && firstPage.lastGetPageDeferred) {
            firstPage.lastGetPageDeferred.resolve(status.firstPageResponse);
        }
        else {
            firstPage.lastGetPageDeferred && firstPage._requestPage(this);
        }
        this.setPageVisibility(firstPage, true);
    }
    initialize(initializeDataPromise, closeDocument = true) {
        this.reportOpening = true;
        this.reportId = null;
        this.reportUrl = null;
        this.documentId = null;
        this._initialize(closeDocument);
        const _initializeDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._deferreds.push(_initializeDeferred);
        _initializeDeferred.done(() => {
            initializeDataPromise.then((previewInitialize) => {
                (0,external_DevExpress_Analytics_Internal_namespaceObject._addLicenseTrigger)(previewInitialize?._licenseOptions);
                this.reportOpening = false;
                if (previewInitialize && !previewInitialize.error && !previewInitialize.startBuildFaultMessage && (previewInitialize.reportId || previewInitialize.documentId)) {
                    const setReport = (previewInitialize, parameters, pageIndex) => {
                        this._initialize(false);
                        this.documentBuilding = false;
                        this.progressBar.inProgress = false;
                        this.reportId = previewInitialize.reportId;
                        this.reportUrl = previewInitialize.reportUrl;
                        this.documentId = previewInitialize.documentId;
                        this.rtlReport = previewInitialize.rtlReport;
                        const pageSettings = previewInitialize.pageSettings;
                        if (pageSettings) {
                            if (pageSettings.height)
                                this._pageHeight = pageSettings.height;
                            if (pageSettings.width)
                                this._pageWidth = pageSettings.width;
                            this._pageBackColor = (pageSettings.color && this.readerMode) ? 'rgba(' + pageSettings.color + ')' : '';
                        }
                        this._initialDocumentData = previewInitialize.documentData;
                        this._sortCustomParametersLookUpValues(previewInitialize.parametersInfo);
                        this.originalParametersInfo = previewInitialize.parametersInfo;
                        if (previewInitialize.documentId && !this.documentBuilding) {
                            const documentIdPromise = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(previewInitialize.documentId).promise();
                            this.progressBar.startProgress(null, () => { this.stopBuild(); }, documentIdPromise)
                                .always(() => { this.documentBuilding = false; });
                            this.documentBuilding = true;
                            const doGetBuildStatusFunc = this.getDoGetBuildStatusFunc(true);
                            doGetBuildStatusFunc(previewInitialize.documentId);
                        }
                        if (parameters) {
                            Object.keys(parameters).forEach(path => {
                                this.previewParametersViewModel.setParameterValueByPath(path, parameters[path]);
                            });
                        }
                        this._breadcrumb.updatePreviewSize && this._breadcrumb.updatePreviewSize();
                        this.disposePagesChangedEvent && this.disposePagesChangedEvent();
                        if (pageIndex !== undefined) {
                            this.disposePagesChangedEvent = this.events.on('pagesChanged', (args) => {
                                const pageInfo = this._breadcrumb.getCurrentPageInfo();
                                if (this.pages.length && this.pages.length > pageInfo.pageIndex) {
                                    const targetPage = this.pages[pageInfo.pageIndex];
                                    if (targetPage) {
                                        this.pageIndex !== pageInfo.pageIndex && this.goToPage(pageInfo.pageIndex);
                                        pageInfo.indexes && pageInfo.indexes.length && targetPage.selectBrick(pageInfo.indexes);
                                        this.disposePagesChangedEvent && this.disposePagesChangedEvent();
                                    }
                                }
                            });
                        }
                    };
                    setReport(previewInitialize);
                    this._breadcrumb.updateCurrentItem(previewInitialize, setReport, previewInitialize.documentData?.displayName);
                }
                else if (previewInitialize.startBuildFaultMessage) {
                    this._processError((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cannot create a document for the current report', 'ASPxReportsStringId.WebDocumentViewer_DocumentCreationError'), null, true, previewInitialize.startBuildFaultMessage);
                }
                else {
                    this.pageLoading = false;
                    this._processError((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The report preview initialization has failed', 'ASPxReportsStringId.WebDocumentViewer_InitializationError'), previewInitialize && previewInitialize.error);
                }
            }, (error) => {
                this.reportOpening = false;
                this.removeEmptyPages();
            });
        }).resolve();
        return initializeDataPromise;
    }
    _deserializeExportOptions(exportOptionsString, isMerged) {
        const jsonModel = exportOptionsString && JSON.parse(exportOptionsString);
        return (isMerged ? new ExportOptionsMergedPreview(this.signatures) : new ExportOptionsPreview(this.signatures)).deserialize(jsonModel, (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeModelSerializer)());
    }
    deactivate() {
        this._initialize();
        this._cleanTabInfo();
        super.deactivate();
        this.documentId = null;
    }
    startBuild() {
        this._initialize();
        return this._startBuildRequest();
    }
    customDocumentOperation(customData, hideMessageFromUser) {
        const documentId = this.documentId;
        if (this.documentBuilding || !documentId)
            return;
        const serializedExportOptions = this.exportOptionsModel ? JSON.stringify((0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeModelSerializer)().serialize(this.exportOptionsModel)) : null;
        const editingFields = () => this._editingFields.map(item => item.getEditValue());
        const customDocumentOperationPromise = new Promise((resolve, reject) => {
            setTimeout(() => this.requestWrapper.customDocumentOperation(documentId, serializedExportOptions, editingFields(), customData, hideMessageFromUser)
                .then((response) => {
                try {
                    if (response && response.message) {
                        if (response.succeeded) {
                            MessageHandler().processMessage(response.message, !hideMessageFromUser, this._getToastMessageContainer());
                        }
                        else {
                            MessageHandler().processError(response.message, !hideMessageFromUser, undefined, this._getToastMessageContainer());
                        }
                    }
                }
                finally {
                    resolve(response);
                }
            })
                .catch(error => {
                const response = { message: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The requested document operation cannot be performed.', 'ASPxReportsStringId.WebDocumentViewer_CustomDocumentOperationsDenied_Error') };
                reject(response);
            }));
        });
        return customDocumentOperationPromise;
    }
    _initializeStartBuild(documentIdPromise) {
        if (this.documentBuilding || this._startBuildOperationId) {
            return false;
        }
        this._startBuildOperationId = generateGuid();
        this.documentId = null;
        this.progressBar.startProgress(this._startBuildOperationId, () => { this.stopBuild(); }, documentIdPromise)
            .always(() => { this.documentBuilding = false; });
        this.documentBuilding = true;
        return true;
    }
    _startBuildRequest() {
        const documentIdDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        if (!this._initializeStartBuild(documentIdDeferred.promise())) {
            return null;
        }
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const currentReportId = this.reportId;
        const startBuildOperationId = this._startBuildOperationId;
        const shouldIgnoreError = () => this._closeReportRequests[currentReportId];
        this.requestWrapper.startBuildRequest(shouldIgnoreError)
            .then((response) => {
            this.previewHandlersHelper && this.previewHandlersHelper.doneStartBuildHandler(deferred, response, startBuildOperationId, documentIdDeferred);
            this._breadcrumb.updateCurrentParameters(this.previewParametersViewModel);
        })
            .catch(() => {
            this.previewHandlersHelper && this.previewHandlersHelper.errorStartBuildHandler(deferred, startBuildOperationId);
            documentIdDeferred.reject();
        });
        deferred.always(() => this._startBuildOperationId = '');
        return deferred.promise();
    }
    getBuildStatus(documentId, isFirstRequest, shouldRequestFirstPage) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._deferreds.push(deferred);
        const sessionDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._getBuildStatusDeferreds.push(sessionDeferred);
        this._timeouts.push(setTimeout(() => {
            const ignorePredicate = this._getIgnorePredicate(documentId);
            const firstPage = this.pages[0];
            const firstPageRequest = (firstPage?.shouldSendRequest || !shouldRequestFirstPage) ? undefined : firstPage?._getCurrentPageRequest(documentId);
            this.requestWrapper.getBuildStatusRequest(documentId, ignorePredicate, isFirstRequest, firstPageRequest)
                .then((response) => {
                sessionDeferred.resolve(response);
            })
                .catch((error) => {
                sessionDeferred.reject(error);
            });
            sessionDeferred.done((response) => {
                this._onGetBuildStatus && this._onGetBuildStatus(response);
                this.previewHandlersHelper && this.previewHandlersHelper.doneGetBuildStatusHandler(deferred, documentId, response, ignorePredicate);
            }).fail(() => {
                this.previewHandlersHelper && this.previewHandlersHelper.errorGetBuildStatusHandler(deferred);
            });
        }, 250));
        return deferred.promise();
    }
    getDoGetBuildStatusFunc(shouldRequestFirstPage = false) {
        const preview = this;
        let isFirstRequest = true;
        this.previewHandlersHelper.processPages(1, this._getIgnorePredicate(this.documentId));
        this.pages[0].shouldSendRequest = false;
        const doGetBuildStatus = (documentId) => {
            const promise = preview.getBuildStatus(documentId, isFirstRequest, shouldRequestFirstPage);
            promise.then((result) => {
                isFirstRequest = false;
                if (documentId !== preview.documentId)
                    return;
                if (result && result.requestAgain && !preview._closeDocumentRequests[documentId]) {
                    const doStatusRequest = () => {
                        if (!preview._closeDocumentRequests[documentId]) {
                            doGetBuildStatus(documentId);
                        }
                    };
                    PollingDelay() ? this._timeouts.push(setTimeout(doStatusRequest, PollingDelay())) : doStatusRequest();
                }
                else {
                    try {
                        if (result.error || !result.requestAgain && !result.pageCount) {
                            preview.pageLoading = false;
                            preview.removeEmptyPages(!result.pageCount);
                            if (!preview.pages.length)
                                preview.pageIndex = -1;
                            return;
                        }
                        if (!result.completed) {
                            return;
                        }
                        else if (result.pageCount < preview.pages.length) {
                            preview.pageIndex = Math.min(result.pageCount - 1, preview.pageIndex);
                            preview.pages.splice(result.pageCount, preview.pages.length);
                        }
                        preview.getDocumentData(documentId);
                    }
                    finally {
                        preview.progressBar.complete(documentId);
                        this._timeouts.push(setTimeout(preview._raiseOnSizeChanged, 1000));
                    }
                }
            });
        };
        return doGetBuildStatus;
    }
    getDocumentData(documentId) {
        const ignoreErrorPredicate = this._getIgnorePredicate(documentId);
        const documentDataDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._deferreds.push(documentDataDeferred);
        documentDataDeferred.done((response) => {
            if (!response) {
                return;
            }
            this.signatures = (response.signatures || []).map(x => {
                const fields = [];
                let image = null;
                if (x.issuer)
                    fields.push({
                        label: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Issuer:', 'PreviewStringId.ExportOption_PdfSignature_Issuer'),
                        value: x.issuer
                    });
                if (x.contactInfo)
                    fields.push({
                        label: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Contact Info', 'PreviewStringId.ExportOption_PdfSignatureOptions_ContactInfo') + ':',
                        value: x.contactInfo
                    });
                if (x.location)
                    fields.push({
                        label: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Location', 'PreviewStringId.ExportOption_PdfSignatureOptions_Location') + ':',
                        value: x.location
                    });
                if (x.reason)
                    fields.push({
                        label: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Reason', 'PreviewStringId.ExportOption_PdfSignatureOptions_Reason') + ':',
                        value: x.reason
                    });
                if (x.validFrom && x.validTo)
                    fields.push({
                        value: (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Valid From: {0:d} to {1:d}', 'PreviewStringId.ExportOption_PdfSignature_ValidRange'), x.validFrom, x.validTo)
                    });
                if (x.image)
                    image = ImageSource.parse(x.image).getDataUrl();
                return {
                    displayName: fields.map(x => x.value).join('; '),
                    image,
                    key: x.key,
                    fields
                };
            });
            this.previewHandlersHelper.processPages(response.pageCount, () => false);
            this._onGetDocumentDetails && this._onGetDocumentDetails(response);
            this.exportHandler.reportDisplayName = response.displayName;
            this._drillDownState = response.drillDownKeys || [];
            this._sortingState = response.sortingState || [];
            const isMerged = this.reportId
                ? response.canPerformContinuousExport === false
                : !this._initialDocumentData?.canPerformContinuousExport ?? true;
            const deserializedExportOptions = this._deserializeExportOptions(response.exportOptions, isMerged);
            const customizeExportOptionsArgs = { exportOptions: deserializedExportOptions, panelVisible: true };
            this.customizeExportOptions && this.customizeExportOptions(customizeExportOptionsArgs);
            this.exportOptionsTabVisible = customizeExportOptionsArgs.panelVisible;
            this.exportOptionsModel = deserializedExportOptions;
            this.documentMap = response.documentMap;
            this.disposeArray(this._editingFields);
            this._editingFields = (response.editingFields || []).map((item, index) => {
                const field = this.createEditingField(item, index);
                if (this.editingFieldChanged) {
                    field.editingFieldChanged = this.editingFieldChanged;
                }
                return field;
            });
        });
        this.requestWrapper.getDocumentData(documentId, ignoreErrorPredicate)
            .then(response => {
            documentDataDeferred.resolve(response);
            if (this.documentReady && documentId) {
                this._timeouts.push(setTimeout(() => {
                    const pageCount = this.pages.length;
                    this.documentReady(documentId, this.reportId, pageCount);
                }));
            }
        }).catch((error) => {
            documentDataDeferred.reject(error);
        });
    }
    exportDocumentTo(format, inlineResult) {
        if (!this.documentId)
            return;
        this.pageLoader.reset();
        let signature = null;
        if (format === 'pdf') {
            signature = this.exportOptionsModel.pdf._get('signature');
        }
        const serializedExportOptions = this.exportOptionsModel ? JSON.stringify((0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeModelSerializer)().serialize(this.exportOptionsModel)) : null;
        const args = () => JSON.stringify({
            documentId: this.documentId,
            exportOptions: serializedExportOptions,
            format: format,
            signature,
            inlineResult: inlineResult,
            editingFieldValues: this._editingFields.map(item => {
                const editValue = item.getEditValue();
                if (typeof editValue === 'string')
                    return transformNewLineCharacters(editValue);
                return editValue;
            })
        });
        this.exportHandler.export(args, HandlerUri(), inlineResult);
    }
    printDocument(pageIndex) {
        if (!this.documentId)
            return;
        this.pageLoader.reset();
        const signature = this.exportOptionsModel.pdf._get('signature');
        const previousShowPrintDialogOnOpen = this.exportOptionsModel.pdf._get('showPrintDialogOnOpen');
        const previousPdfACompatibility = this.exportOptionsModel.pdf._get('pdfACompatibility');
        const previousPageRange = this.exportOptionsModel.pdf._get('pageRange');
        this.exportOptionsModel.pdf._set('showPrintDialogOnOpen', true);
        this.exportOptionsModel.pdf._set('pdfACompatibility', 'None');
        pageIndex = parseInt(pageIndex);
        if ((!!pageIndex && pageIndex > 0 || pageIndex === 0) && (this.pages.length > pageIndex)) {
            this.exportOptionsModel.pdf._set('pageRange', pageIndex + 1);
        }
        const serializedExportOptions = JSON.stringify((0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeModelSerializer)().serialize(this.exportOptionsModel));
        const args = () => JSON.stringify({
            documentId: this.documentId,
            exportOptions: serializedExportOptions,
            format: 'printpdf',
            signature,
            inlineResult: !isIOS,
            editingFieldValues: this._editingFields.map(item => item.getEditValue())
        });
        this.exportHandler.export(args, HandlerUri(), true, true);
        this.exportOptionsModel.pdf._set('showPrintDialogOnOpen', previousShowPrintDialogOnOpen);
        this.exportOptionsModel.pdf._set('pdfACompatibility', previousPdfACompatibility);
        this.exportOptionsModel.pdf._set('pageRange', previousPageRange);
    }
    stopBuild(documentId) {
        const id = documentId || this.documentId;
        if (!id) {
            this._startBuildOperationId && (this._stopBuildRequests[this._startBuildOperationId] = true);
            return;
        }
        this._stopBuildRequests[id] = true;
        this.requestWrapper.stopBuild(id);
    }
    closeDocument(documentId) {
        const _documentId = documentId || this.documentId;
        if (!_documentId) {
            this._startBuildOperationId && (this._closeDocumentRequests[this._startBuildOperationId] = true);
            return;
        }
        this._closeDocumentRequests[_documentId] = true;
        this.progressBar.complete(documentId);
        this.requestWrapper.sendCloseRequest(_documentId);
    }
    setPageVisibility(page, visible) {
        page.isClientVisible = visible;
        if (visible) {
            this.pageLoader.reset();
            const offset = PreloadedPagesOffset();
            if (offset === 0)
                return;
            let startIndex = page.pageIndex - 2;
            startIndex = startIndex < 0 ? 0 : startIndex;
            const endIndex = page.pageIndex + offset;
            this.pageLoader.prefetchPages(startIndex, endIndex, page.pageIndex);
        }
    }
    updatePage(page, zoom = this.originalZoom) {
        page._setPageImgSrc(this.documentId, this._unifier, zoom, this.documentBuilding);
    }
    goToPage(pageIndex, forcePageChanging, throttle) {
        if (!forcePageChanging && this.pageIndex === pageIndex || this.pages.length === 0 || pageIndex < 0 || pageIndex >= this.pages.length) {
            return;
        }
        if (this._goToPageTimer !== undefined) {
            clearTimeout(this._goToPageTimer);
        }
        const updateActivePage = (activePageIndex) => {
            this.pages.forEach((page) => {
                const visible = page.pageIndex === activePageIndex;
                page.active = visible;
                this.setPageVisibility(page, visible);
            });
            this._goToPageTimer = undefined;
        };
        if (throttle && !this.pages[pageIndex]?.imageSrc)
            this._timeouts.push(this._goToPageTimer = setTimeout(() => updateActivePage(this.pageIndex), throttle));
        else
            updateActivePage(pageIndex);
        this.pageIndex = pageIndex;
    }
    createEditingField(item, index) {
        return new EditingField(item, index, this.requestWrapper);
    }
    _updateExportDisabled() {
        this.exportDisabled = this.progressBar.inProgress || !this.exportOptionsModel;
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'zoom') {
            const zoom = args.newValue;
            this._zoomLocker.lock(() => {
                if (zoom > 0) {
                    this.autoFitBy = ZoomAutoBy.None;
                    this.originalZoom = zoom;
                }
                else {
                    this.autoFitBy = zoom;
                }
            });
        }
        if (args.propertyName === 'autoFitBy' || args.propertyName === 'originalZoom') {
            this._zoomLocker.lock(() => {
                this.zoom = (this.autoFitBy != ZoomAutoBy.None || this.originalZoom === 0) ? this.autoFitBy : this.originalZoom;
            });
        }
        if (args.propertyName === 'documentId')
            this._unifier = args.newValue ? generateGuid() : '';
        if (args.propertyName === 'originalZoom')
            this._onOriginalZoomChanged();
        if (args.propertyName === 'previewSize')
            this._raiseOnSizeChanged();
        if (args.propertyName === 'pages' || args.propertyName === 'pageIndex')
            this._updateCurrentPage();
        if (args.propertyName === 'documentBuilding')
            this._onDocumentBuildingChanged(args.newValue);
        if (args.propertyName === 'exportOptionsModel')
            this._updateExportDisabled();
        if (args.propertyName === 'showMultipagePreview') {
            if (!args.newValue) {
                const currentPage = this.pages[this.pageIndex];
                if (currentPage)
                    currentPage.isClientVisible = true;
            }
            else {
                this._loadVisibleImages && this._loadVisibleImages(500);
            }
        }
        if (args.propertyName === 'documentId' || args.propertyName === 'currentPage' || args.propertyName === 'pageIndex'
            || args.propertyName === 'documentBuilding' || args.propertyName == 'reportOpening' || args.propertyName == 'errorMessage'
            || args.propertyName === 'originalParametersInfo') {
            this._updateEmptyDocumentCaption();
        }
    }
    createViewModel() {
        return createReportPreviewViewModel.call(this, super.createViewModel());
    }
    updateViewModel(args) {
        updateReportPreviewViewModel.call(this, args);
    }
    _updateEmptyDocumentCaption() {
        const parametersInfo = this.originalParametersInfo;
        const parametersExist = parametersInfo && parametersInfo.parameters.some(x => x.Visible);
        let newCaption = '';
        if (this.documentBuilding) {
            if (this.currentPage) {
                if (!this._progressFirstTime)
                    newCaption = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Progress {0}%', 'ASPxReportsStringId.WebDocumentViewer_AriaDocumentProgress'), this.progressBar.progress.toString());
                else
                    newCaption = this.progressBar.progress + '%';
                this._progressFirstTime = true;
            }
            else {
                newCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Creating the document...', 'PreviewStringId.Msg_CreatingDocument');
            }
        }
        else if (parametersExist && !this.documentId) {
            newCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Waiting for parameter values...', 'PreviewStringId.Msg_WaitingForParameterValues');
        }
        else if (this.documentId) {
            this._progressFirstTime = false;
            if (this.pageIndex !== -1 && !this.progressBar.inProgress) {
                newCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Document is ready', 'ASPxReportsStringId.WebDocumentViewer_AriaDocumentReady');
            }
            else {
                newCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The document does not contain any pages.', 'PreviewStringId.Msg_EmptyDocument');
            }
        }
        else if (this.reportOpening) {
            this._progressFirstTime = false;
            newCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Loading...', 'AnalyticsCoreStringId.Loading');
        }
        else if (this.errorMessage) {
            newCaption = this.errorMessage;
        }
        this.emptyDocumentCaption = newCaption;
    }
}
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportPreview.prototype, "exportOptionsModel", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], ReportPreview.prototype, "errorMessage", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "reportOpening", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "exportDisabled", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], ReportPreview.prototype, "pages", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(-1)
], ReportPreview.prototype, "pageIndex", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportPreview.prototype, "currentPage", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "showMultipagePreview", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "rtlReport", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "editingFieldsHighlighted", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportPreview.prototype, "documentMap", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "pageLoading", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(ZoomAutoBy.WholePage)
], ReportPreview.prototype, "autoFitBy", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1)
], ReportPreview.prototype, "originalZoom", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(ZoomAutoBy.WholePage)
], ReportPreview.prototype, "zoom", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], ReportPreview.prototype, "previewSize", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], ReportPreview.prototype, "documentId", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "documentBuilding", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], ReportPreview.prototype, "_unifier", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(818)
], ReportPreview.prototype, "_pageWidth", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1058)
], ReportPreview.prototype, "_pageHeight", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], ReportPreview.prototype, "_pageBackColor", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('', { rateLimit: { timeout: 1000 } })
], ReportPreview.prototype, "emptyDocumentCaption", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], ReportPreview.prototype, "exportOptionsTabVisible", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportPreview.prototype, "previewVisible", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], ReportPreview.prototype, "_editingFields", void 0);
reportPreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], ReportPreview.prototype, "signatures", void 0);

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportViewerBase.js
var jsReportViewerBase_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


class JSReportViewerBase extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseModel {
    onPropertyChanged(args) {
        if (args.propertyName === 'previewModel') {
            args.oldValue?.dispose();
        }
    }
    dispose() {
        const previewModel = this.GetPreviewModel();
        if (previewModel)
            previewModel.dispose();
    }
    constructor(_previewModel) {
        super();
        this.previewModel = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(_previewModel);
        if (external_DevExpress_Analytics_Internal_namespaceObject.koUtils.isSubscribable(_previewModel)) {
            let inUpdate = false;
            const lock = (callback) => {
                if (!inUpdate) {
                    inUpdate = true;
                    callback();
                    inUpdate = false;
                }
            };
            this.addDisposable(_previewModel.subscribe((newVal) => {
                lock(() => this.previewModel = newVal);
            }), this.events.on('propertyChanged', (args) => {
                if (args.propertyName === 'previewModel') {
                    lock(() => _previewModel(args.newValue));
                }
            }));
        }
    }
    previewExists() {
        return this.previewModel && this.previewModel.reportPreview;
    }
    GetPreviewModel() {
        return this.previewModel;
    }
    GetParametersModel() {
        return this.previewModel && this.previewModel.GetParametersModel();
    }
    OpenReport(reportName) {
        return this.previewExists() && this.previewModel.OpenReport(reportName);
    }
    Close() {
        this.previewExists() && this.previewModel.Close();
    }
    ResetParameters() {
        this.previewModel && this.previewModel.ResetParameters();
    }
}
jsReportViewerBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], JSReportViewerBase.prototype, "previewModel", void 0);

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportViewer.js


class JSReportViewer extends JSReportViewerBase {
    GetReportPreview() {
        return this.previewExists();
    }
    PerformCustomDocumentOperation(customData, hideMessageFromUser) {
        return this.previewExists() && this.previewModel.PerformCustomDocumentOperation(customData, hideMessageFromUser);
    }
    Print(pageIndex) {
        return this.previewExists() && this.previewModel.Print(pageIndex);
    }
    ExportTo(format, inlineResult) {
        this.previewExists() && this.previewModel.ExportTo(format, inlineResult);
    }
    GetCurrentPageIndex() {
        return this.previewExists() && this.previewModel.GetCurrentPageIndex();
    }
    GoToPage(pageIndex) {
        this.previewExists() && this.previewModel.GoToPage(pageIndex);
    }
    StartBuild() {
        return this.previewModel && this.previewModel.StartBuild();
    }
    UpdateLocalization(localization) {
        (0,external_DevExpress_Analytics_Utils_namespaceObject.updateLocalization)(localization);
    }
    AdjustControlCore() {
        this.previewModel && this.previewModel.updateSurfaceSize && this.previewModel.updateSurfaceSize();
    }
}

;// external "DevExpress.config"
const external_DevExpress_config_namespaceObject = DevExpress.config;
var external_DevExpress_config_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_config_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/documentMap/_documentMapItemsProvider.js

class DocumentMapItemsProvider {
    constructor(bookmark) {
        this.bookmarkDict = {};
        this.getItems = (pathRequest) => {
            const result = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            if (bookmark) {
                if (pathRequest.fullPath) {
                    const nodes = this._selectNode(bookmark, pathRequest.fullPath);
                    result.resolve(nodes);
                }
                else {
                    const root = this._getRootNode(bookmark);
                    result.resolve(root);
                }
            }
            else {
                result.reject();
            }
            return result.promise();
        };
    }
    _selectNode(root, path) {
        if (!!this.bookmarkDict[path]) {
            return this.bookmarkDict[path];
        }
        const pathComponents = path.split('.');
        let currentNode = root;
        if (pathComponents[0] !== '0') {
            return null;
        }
        for (let i = 1, index = pathComponents[i]; i < pathComponents.length; i++, index = pathComponents[i]) {
            if (currentNode && currentNode.nodes && currentNode.nodes[index]) {
                currentNode = currentNode.nodes[index];
            }
            else {
                return null;
            }
        }
        const result = DocumentMapItemsProvider.fillNode(currentNode);
        if (result && result.length !== 0) {
            this.bookmarkDict[path] = result;
        }
        return result;
    }
    static fillNode(bookmark) {
        if (!bookmark || !bookmark.nodes || bookmark.nodes.length <= 0) {
            return null;
        }
        return bookmark.nodes.map((node, i) => { return { name: i + '', displayName: node.text, isList: node.nodes && node.nodes.length > 0, bookmark: node, specifics: 'node' }; });
    }
    _getRootNode(bookmark) {
        return [{ name: '0', displayName: bookmark.text, isList: bookmark.nodes && bookmark.nodes.length > 0, bookmark: bookmark, specifics: 'node' }];
    }
}

;// ./node_modules/devexpress-reporting/viewer/documentMap/_documentMapTreeListController.js
class DocumentMapTreeListController {
    constructor() {
        this.clickHandler = (item) => void 0;
    }
    itemsFilter(item) {
        return true;
    }
    hasItems(item) {
        return item.isList === true;
    }
    canSelect(value) {
        return true;
    }
    select(value) {
        if (this.canSelect(value) && value !== this.selectedItem) {
            this.selectedItem && (this.selectedItem.isSelected = false);
            this.selectedItem = value;
            value.isSelected = true;
        }
    }
    showIconsForChildItems() {
        return false;
    }
}

;// ./node_modules/devexpress-reporting/viewer/documentMap/_documentMapModel.js
var _documentMapModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class DocumentMapModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    onPropertyChanged(args) {
        if (args.propertyName === 'isEmpty') {
            this.tabInfo.visible = !this.isEmpty;
        }
        else if (args.propertyName === 'selectedPath') {
            this._selectedPathChangedEvent && this._selectedPathChangedEvent(this.selectedPath);
        }
        else if (args.propertyName === 'treeListOptions') {
            this._treeListChangedEvent && this._treeListChangedEvent(this.treeListOptions);
        }
    }
    getTreeListModel(documentMap) {
        return {
            itemsProvider: new DocumentMapItemsProvider(documentMap),
            expandRootItems: true,
            selectedPath: this.selectedPath,
            treeListController: this.treeListController,
            onItemsVisibilityChanged: () => this.tabInfo?.keyboardHelper?.initialize(),
            setSelectedPathChangedEvent: (callback) => {
                this._selectedPathChangedEvent = callback;
                return () => this._selectedPathChangedEvent = undefined;
            },
            setTreeListChangedEvent: (callback) => {
                this._treeListChangedEvent = callback;
                return () => this._treeListChangedEvent = undefined;
            },
            getSelectedPath: () => this.selectedPath,
            setSelectedPath: (newPath) => this.selectedPath = newPath
        };
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.treeListOptions = this.treeListOptions;
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('treeListOptions', this.treeListOptions)
            .generateProperty('onInitialized', (event) => event.component.option('useKeyboard', false))
            .generateProperty('keyboardHelper', this.tabInfo.keyboardHelper)
            .getViewModel();
    }
    constructor(reportPreview) {
        super();
        this._setSelectedPathByNavigationNode = (nodes, brickNavigation, path = '0') => {
            nodes.forEach((item, index) => {
                if (item.indexes === brickNavigation.indexes && item.pageIndex === brickNavigation.pageIndex) {
                    this.selectedPath = path + '.' + index.toString();
                }
                else if (item.nodes) {
                    this.selectedPath = this._setSelectedPathByNavigationNode(item.nodes, brickNavigation, path + '.' + index.toString());
                }
            });
            return this.selectedPath;
        };
        this.treeListOptions = this.getTreeListModel(reportPreview.documentMap);
        this.treeListController = new DocumentMapTreeListController();
        this.treeListController.clickHandler = (item) => {
            const bookmark = item.data.bookmark;
            if (bookmark) {
                const pageIndex = bookmark.pageIndex < 0 ? 0 : bookmark.pageIndex;
                reportPreview.pages[pageIndex].selectBrick(bookmark.indexes);
            }
        };
        reportPreview.brickClickDocumentMapHandler = (brickNavigation) => {
            if (reportPreview.documentMap)
                this._setSelectedPathByNavigationNode(reportPreview.documentMap.nodes, brickNavigation);
        };
        this._disposables.push({
            dispose: reportPreview.events.on('documentMapChanged', (args) => {
                this.treeListOptions = this.getTreeListModel(reportPreview.documentMap);
                this.isEmpty = !(reportPreview.documentMap?.nodes?.length > 0);
            })
        });
        this._disposables.push({ dispose: () => delete reportPreview.brickClickDocumentMapHandler });
        this._disposables.push(this.tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
            text: 'Document Map',
            template: 'dxrd-preview-document-map',
            model: this,
            keyboardHelper: new external_DevExpress_Analytics_Internal_namespaceObject.TreeListKeyboardHelper(this.treeListController),
            localizationId: 'DevExpress.XtraPrinting.PrintingSystemCommand.DocumentMap',
            imageClassName: 'reportexplorer',
            imageTemplateName: 'dxrd-svg-tabs-reportexplorer',
            visible: !this.isEmpty
        }));
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
}
_documentMapModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('0')
], DocumentMapModel.prototype, "selectedPath", void 0);
_documentMapModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], DocumentMapModel.prototype, "treeListOptions", void 0);
_documentMapModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], DocumentMapModel.prototype, "isEmpty", void 0);

;// ./node_modules/devexpress-reporting/viewer/internal/_actions.js
var _actions_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class PreviewDesignerActions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    constructor(reportPreview, fullscreen) {
        super();
        this.actions = [];
        const designAction = {
            id: ActionId.Design,
            text: 'Design',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Design', 'ASPxReportsStringId.ToolBarItemText_Design'),
            imageClassName: 'dxrd-image-design',
            imageTemplateName: 'dxrd-svg-preview-report_designer',
            templateName: reportPreview.canSwitchToDesigner ? 'dxrd-toolbar-two-way-switch' : undefined,
            visible: reportPreview.canSwitchToDesigner,
            hotKey: { ctrlKey: true, keyCode: 68 },
            clickAction: () => {
                reportPreview.previewVisible = false;
                reportPreview.deactivate();
            }
        };
        designAction.contentData = {
            items: [
                { itemData: designAction, active: false },
                { getDisplayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Preview', 'ASPxReportsStringId.ToolBarItemText_Preview'), active: true }
            ]
        };
        this.actions.push(designAction);
        this.actions.push(new FullScreenViewerAction(reportPreview, fullscreen));
    }
    getActions(context) {
        return this.actions;
    }
}
class ActionLists extends external_DevExpress_Analytics_Internal_namespaceObject.ActionListsBase {
    constructor(reportPreview, globalActionProviders, customizeActions, enabled) {
        super(enabled);
        this.updateToolbarItems = () => {
            const globalActions = [];
            this.globalActionProviders.forEach((actionProvider) => {
                globalActions.push.apply(globalActions, actionProvider.getActions(reportPreview));
            });
            customizeActions && customizeActions(globalActions);
            this.toolbarItems = globalActions;
        };
        this.globalActionProviders = globalActionProviders;
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'globalActionProviders')
            this.updateToolbarItems();
    }
    processShortcut(e) {
        if (this.shouldIgnoreProcessing(e))
            return;
        super.processShortcut(e);
    }
    dispose() {
        super.dispose();
        this.globalActionProviders = [];
        this.removeProperties();
    }
}
_actions_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], ActionLists.prototype, "globalActionProviders", void 0);
class PreviewActions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    wrapDisposable(object) {
        this.addDisposable(object);
        return object;
    }
    constructor(reportPreview) {
        super();
        this.actions = [];
        const actions = [
            new FirstPageAction(reportPreview),
            new PreviousPageAction(reportPreview),
            new PaginationAction(reportPreview),
            new NextPageAction(reportPreview),
            new LastPageAction(reportPreview),
            new MultipageModeAction(reportPreview),
            new ZoomOutAction(reportPreview),
            new ZoomAction(reportPreview),
            new ZoomInAction(reportPreview),
            new HighlightingAction(reportPreview),
            new PrintAction(reportPreview),
            new PrintPageAction(reportPreview),
        ];
        this.addDisposable(...actions);
        this.actions.push(...actions);
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    getActions(context) {
        return this.actions;
    }
}
class ViewerAction extends external_DevExpress_Analytics_Internal_namespaceObject.BaseAction {
    constructor(reportPreview, visibilityDependencies = [], disabilityDependencies = [], model) {
        super(model);
        this.reportPreview = reportPreview;
        this.visible = this.isVisible();
        this.disabled = this.isDisabled();
        visibilityDependencies.forEach(dependency => {
            this.addDisposable(this.reportPreview.events.on(`${dependency}Changed`, () => {
                this.visible = this.isVisible();
            }));
        });
        disabilityDependencies.forEach(dependency => {
            this.addDisposable(this.reportPreview.events.on(`${dependency}Changed`, () => {
                this.disabled = this.isDisabled();
            }));
        });
    }
}
class FullScreenActionBase extends external_DevExpress_Analytics_Internal_namespaceObject.BaseAction {
    constructor(fullscreen, model) {
        super(model);
        this.fullscreen = fullscreen;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Full Screen', 'ASPxReportsStringId.ToolBarItemText_FullScreen');
        this.imageClassName = 'dxrd-image-fullscreen';
        this.imageTemplateName = this.getFullScreenImageTemplateName();
        this.selected = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(this.fullscreen);
        this.addDisposable(fullscreen?.subscribe(() => {
            this.selected = this.fullscreen();
            this.imageTemplateName = this.getFullScreenImageTemplateName();
        }));
        this.clickAction = () => {
            fullscreen(!fullscreen());
        };
    }
    getFullScreenImageTemplateName() { return external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(this.fullscreen) ? 'dxrd-svg-toolbar-fullscreen-exit' : 'dxrd-svg-toolbar-fullscreen'; }
}
class FullScreenViewerAction extends FullScreenActionBase {
    constructor(reportPreview, fullscreen) {
        super(fullscreen);
        this.id = ActionId.FullScreen;
        this.visible = !reportPreview.canSwitchToDesigner;
    }
}
class NavigationAction extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview, ['previewVisible'], ['pageIndex', 'pages']);
    }
    isVisible() {
        return this.reportPreview.previewVisible;
    }
}
class GoBackwardsAction extends NavigationAction {
    isDisabled() {
        return this.reportPreview.pageIndex < 1;
    }
}
class FirstPageAction extends GoBackwardsAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.FirstPage;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('First Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_FirstPage');
        this.imageClassName = 'dxrd-image-preview-first';
        this.imageTemplateName = 'dxrd-svg-preview-first_page';
        this.hotKey = { ctrlKey: true, keyCode: 37 };
        this.clickAction = () => {
            if (reportPreview.pageIndex > 0) {
                reportPreview.goToPage(0);
            }
        };
    }
}
class PreviousPageAction extends GoBackwardsAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.PrevPage;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Previous Page', 'ASPxReportsStringId.ToolBarItemText_PreviousPage');
        this.imageClassName = 'dxrd-image-preview-prev';
        this.imageTemplateName = 'dxrd-svg-preview-previous_page';
        this.hotKey = { ctrlKey: false, keyCode: 37 };
        this.clickAction = () => {
            if (reportPreview.pageIndex >= 1) {
                reportPreview.goToPage(reportPreview.pageIndex - 1, false, 500);
            }
        };
    }
}
class PaginationAction extends NavigationAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.Pagination;
        this.text = 'Pagination';
        this.selectedItem = this.getSelectedItem();
        this.addDisposable(reportPreview.events.on('pageIndexChanged', (args) => {
            this.selectedItem = this.getSelectedItem();
        }));
        this.pageItems = this.getPageItems();
        this.addDisposable(reportPreview.events.on('pagesChanged', (args) => {
            this.pageItems = this.getPageItems();
            this.selectedItem = this.getSelectedItem();
        }));
        this._isPageChanged = (value) => {
            let val = parseInt && parseInt(value);
            if (!!val && val-- > 0 && val < reportPreview.pages.length) {
                reportPreview.goToPage(val);
                return true;
            }
            return false;
        };
        this.displayExpr = function (value) {
            if (reportPreview.pageIndex !== -1 && value && reportPreview.pageIndex !== value.index) {
                return value.text;
            }
            if (reportPreview.pageIndex === -1) {
                return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('0 pages', 'ASPxReportsStringId.WebDocumentViewer_0Pages');
            }
            else {
                const ofText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('of', 'ASPxReportsStringId.ToolBarItemText_OfLabel');
                return (reportPreview.pageIndex + 1) + ' ' + ofText + ' ' + reportPreview.pages.length;
            }
        };
        this.itemTemplate = function (value) { return value.text; };
        this.searchMode = 'startswith';
        this.searchTimeout = 10;
        this.templateName = 'dxrd-preview-pager';
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const selectBoxViewModel = this.getViewModel();
        if (args.propertyName === 'pageItems')
            selectBoxViewModel.widget.dataSource = args.newValue;
        if (args.propertyName === 'selectedItem')
            selectBoxViewModel.widget.value = args.newValue;
    }
    createViewModel(parent, index) {
        const viewModel = super.createViewModel(parent, index);
        const selectBoxViewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(viewModel)
            .generateProperty('templateName', this.templateName)
            .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
            .generateProperty('widget', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('dataSource', this.pageItems)
            .generateProperty('displayExpr', this.displayExpr)
            .generateProperty('value', this.selectedItem)
            .generateProperty('searchEnabled', true)
            .generateProperty('onValueChanged', (e) => {
            this.selectItem(e.value);
        })
            .generateProperty('searchMode', this.searchMode)
            .generateProperty('searchTimeout', this.searchTimeout)
            .generateProperty('itemTemplate', this.itemTemplate)
            .generateProperty('dropDownOptions', {
            wrapperAttr: {
                'aria-label': (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pager', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox'),
                'class': 'dx-page-selectbox-popup-wrapper'
            }
        })
            .generateProperty('inputAttr', {
            'aria-label': (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pager', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox')
        })
            .getViewModel())
            .getViewModel();
        return selectBoxViewModel;
    }
    selectItem(newValue) {
        if (!!newValue && (newValue.index || newValue.index === 0)) {
            this.reportPreview.goToPage(newValue.index);
        }
    }
    getPageItems() {
        const pageCount = this.reportPreview.pages.length;
        if (pageCount === 0 || this.reportPreview.pageIndex === -1) {
            return [];
        }
        const pagesArray = new Array();
        for (let i = 0; i < pageCount;) {
            pagesArray.push({ index: i, text: ++i });
        }
        return {
            store: pagesArray,
            paginate: pageCount > 200,
            pageSize: 100
        };
    }
    getSelectedItem() {
        if (this.reportPreview.pageIndex < 0) {
            return null;
        }
        const items = this.getPageItems();
        return items && items.store && (items.store.length > this.reportPreview.pageIndex) && items.store[this.reportPreview.pageIndex];
    }
    isDisabled() {
        return this.reportPreview.pages.length === 0 || this.reportPreview.pageIndex === -1;
    }
}
_actions_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => null)
], PaginationAction.prototype, "selectedItem", void 0);
_actions_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => null)
], PaginationAction.prototype, "pageItems", void 0);
class GoForwardAction extends NavigationAction {
    isDisabled() {
        return this.reportPreview.pageIndex < 0 || this.reportPreview.pageIndex >= this.reportPreview.pages.length - 1;
    }
}
class NextPageAction extends GoForwardAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.NextPage;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Next Page', 'ASPxReportsStringId.ToolBarItemText_NextPage');
        this.imageClassName = 'dxrd-image-preview-next';
        this.imageTemplateName = 'dxrd-svg-preview-next_page';
        this.hotKey = { ctrlKey: false, keyCode: 39 };
        this.clickAction = () => {
            if (reportPreview.pageIndex < reportPreview.pages.length - 1) {
                reportPreview.goToPage(reportPreview.pageIndex + 1, false, 500);
            }
        };
    }
}
class LastPageAction extends GoForwardAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.LastPage;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Last Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_LastPage');
        this.imageClassName = 'dxrd-image-preview-last';
        this.imageTemplateName = 'dxrd-svg-preview-last_page';
        this.hotKey = { ctrlKey: true, keyCode: 39 };
        this.clickAction = () => {
            if (reportPreview.pageIndex < reportPreview.pages.length - 1) {
                reportPreview.goToPage(reportPreview.pages.length - 1);
            }
        };
    }
}
class MultipageModeAction extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview, ['previewVisible']);
        this.id = ActionId.MultipageToggle;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Toggle Multipage Mode', 'ASPxReportsStringId.WebDocumentViewer_ToggleMultipageMode');
        this.imageClassName = this.getMultipageToggleImageClassName(reportPreview.showMultipagePreview);
        this.imageTemplateName = this.getMultipageToggleImageTemplateName(reportPreview.showMultipagePreview);
        this.hotKey = { ctrlKey: true, keyCode: 77 };
        this.clickAction = () => {
            const zoom = reportPreview.originalZoom;
            reportPreview.showMultipagePreview = !reportPreview.showMultipagePreview;
            reportPreview.zoom = zoom;
        };
        this.addDisposable(reportPreview.events.on('showMultipagePreviewChanged', (args) => {
            this.imageClassName = this.getMultipageToggleImageClassName(reportPreview.showMultipagePreview);
            this.imageTemplateName = this.getMultipageToggleImageTemplateName(reportPreview.showMultipagePreview);
        }));
        this.hasSeparator = true;
    }
    getMultipageToggleImageClassName(showMultipagePreview) {
        return showMultipagePreview ? 'dxrd-image-preview-single-page' : 'dxrd-image-preview-multipage';
    }
    getMultipageToggleImageTemplateName(showMultipagePreview) {
        return showMultipagePreview ? 'dxrd-svg-preview-single_page' : 'dxrd-svg-preview-multi_page_preview';
    }
    isVisible() {
        return this.reportPreview.previewVisible;
    }
}
class ZoomOutAction extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.ZoomOut;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Zoom Out', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomOut');
        this.imageClassName = 'dxrd-image-zoomout';
        this.imageTemplateName = 'dxrd-svg-toolbar-zoomout';
        this.hotKey = { ctrlKey: false, keyCode: 109 };
        this.clickAction = () => {
            const currentZoom = reportPreview.zoom;
            const zoomLevel = currentZoom > 0 ? currentZoom : reportPreview.originalZoom;
            reportPreview.zoom = Math.max(zoomLevel - reportPreview.zoomStep, 0.1);
        };
        this.hasSeparator = true;
    }
}
class ZoomAction extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.ZoomSelector;
        this.hotKey = { ctrlKey: true, keyCode: 187 };
        this.templateName = 'dxrd-zoom-autofit-select-template';
        this.displayExpr = (val) => {
            if (val === ZoomAutoBy.PageWidth) {
                return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Width', 'DevExpress.XtraReports.UI.XtraReport.PageWidth');
            }
            else if (Math.round(val * 100) === 0) {
                return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Whole Page', 'PreviewStringId.MenuItem_ZoomWholePage');
            }
            else {
                return Math.round((val || reportPreview.zoom) * 100) + '%';
            }
        },
            this.onCustomItemCreating = (e) => { e.customItem = (0,external_DevExpress_Analytics_Internal_namespaceObject.parseZoom)(e.text); };
        this.zoom = reportPreview.zoom;
        this.clickAction = () => {
            reportPreview.zoom = ZoomAutoBy.WholePage;
        },
            this.addDisposable(reportPreview.events.on('zoomChanged', (args) => {
                this.zoom = reportPreview.zoom;
            }));
        this.zoomLevels = this.getZoomLevels();
        this.addDisposable(reportPreview.events.on('showMultipagePreviewChanged', (args) => {
            this.zoomLevels = this.getZoomLevels();
        }));
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'zoom') {
            this.reportPreview.zoom = this.zoom;
        }
    }
    createViewModel(parent, index) {
        const viewModel = super.createViewModel(parent, index);
        const selectBoxViewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(viewModel)
            .configureProperty('widget', (property) => {
            property.inputAttr = {
                'aria-label': (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Zoom', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox')
            };
        })
            .getViewModel();
        return selectBoxViewModel;
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const selectBoxViewModel = this.getViewModel();
        if (args.propertyName === 'zoomLevels')
            selectBoxViewModel.widget.dataSource = args.newValue;
        if (args.propertyName === 'zoom')
            selectBoxViewModel.widget.value = args.newValue;
    }
    getZoomLevels() {
        const items = this.reportPreview.predefinedZoomLevels.slice(0);
        if (this.reportPreview.showMultipagePreview === false && items.indexOf(0) === -1) {
            items.push(ZoomAutoBy.PageWidth);
            items.push(ZoomAutoBy.WholePage);
        }
        return items;
    }
}
_actions_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], ZoomAction.prototype, "zoom", void 0);
_actions_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], ZoomAction.prototype, "zoomLevels", void 0);
class ZoomInAction extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.ZoomIn;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Zoom In', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomIn');
        this.imageClassName = 'dxrd-image-zoomin';
        this.imageTemplateName = 'dxrd-svg-toolbar-zoomin';
        this.hotKey = { ctrlKey: false, keyCode: 107 };
        this.clickAction = () => {
            const currentZoom = reportPreview.zoom;
            const zoomLevel = currentZoom > 0 ? currentZoom : reportPreview.originalZoom;
            reportPreview.zoom = Math.min(zoomLevel + reportPreview.zoomStep, 10);
        };
    }
}
class HighlightingAction extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview, ['previewVisible'], ['_editingFields']);
        this.id = ActionId.HighlightEditingFields;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Highlight Editing Fields', 'DevExpress.XtraPrinting.PrintingSystemCommand.HighlightEditingFields');
        this.imageClassName = 'dxrp-image-hightlight-editing-fields';
        this.imageTemplateName = 'dxrd-svg-toolbar-hightlightEditingFields';
        EditablePreviewEnabled.subscribe(() => this.visible = this.isVisible());
        this.selected = reportPreview.editingFieldsHighlighted;
        this.addDisposable(reportPreview.events.on('editingFieldsHighlightedChanged', (args) => {
            this.selected = args.newValue;
        }));
        this.hotKey = { ctrlKey: true, keyCode: 72 };
        this.clickAction = () => {
            reportPreview.editingFieldsHighlighted = !reportPreview.editingFieldsHighlighted;
        },
            this.hasSeparator = true;
    }
    isDisabled() {
        return this.reportPreview.editingFieldsProvider().length < 1;
    }
    isVisible() {
        return EditablePreviewEnabled() && this.reportPreview.previewVisible;
    }
}
class ExportActionBase extends ViewerAction {
    constructor(reportPreview) {
        super(reportPreview, undefined, ['exportDisabled']);
    }
    isDisabled() {
        return this.reportPreview.exportDisabled;
    }
}
class PrintAction extends ExportActionBase {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.Print;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Print', 'ASPxReportsStringId.DocumentViewer_RibbonPrintGroupText');
        this.imageClassName = 'dxrd-image-print';
        this.imageTemplateName = 'dxrd-svg-preview-print';
        this.hasSeparator = true;
        this.hotKey = { ctrlKey: true, keyCode: 80 };
        this.clickAction = () => {
            if (reportPreview.exportDisabled) {
                return;
            }
            reportPreview.printDocument();
        };
    }
}
class PrintPageAction extends ExportActionBase {
    constructor(reportPreview) {
        super(reportPreview);
        this.id = ActionId.PrintPage;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Print Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_PrintPage');
        this.imageClassName = 'dxrd-image-print-page';
        this.imageTemplateName = 'dxrd-svg-preview-print_page';
        this.clickAction = () => {
            if (reportPreview.exportDisabled) {
                return;
            }
            reportPreview.printDocument(reportPreview.pageIndex);
        };
    }
}

;// ./node_modules/devexpress-reporting/viewer/exportOptions/exportOptionsModel.js
var exportOptionsModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class ExportOptionsModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(reportPreview, enableKeyboardSupport) {
        super();
        this.actions = [];
        this._reportPreview = reportPreview;
        const getTabPanelVisible = () => !!reportPreview.exportOptionsModel && reportPreview.exportOptionsTabVisible !== false;
        const keyboardHelperViewModelAccessor = () => this.tabInfo.getViewModel().propertyGrid.editors;
        const keyboardHelper = enableKeyboardSupport ? new external_DevExpress_Analytics_Internal_namespaceObject.PropertyGridKeyboardHelper(keyboardHelperViewModelAccessor) : undefined;
        this.tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfoWithPropertyGrid({
            text: 'Export Options',
            template: 'dxrd-preview-export-options',
            propertyGridModel: reportPreview.exportOptionsModel,
            model: undefined,
            keyboardHelper,
            localizationId: 'DevExpress.XtraPrinting.ExportOptions',
            imageClassName: 'properties',
            imageTemplateName: 'dxrd-svg-tabs-properties',
            visible: getTabPanelVisible(),
            engineType: 'native'
        });
        this.addDisposable(reportPreview.events.on('exportOptionsModelChanged', (args) => {
            if (reportPreview.exportOptionsModel)
                this.tabInfo.propertyGridModel = reportPreview.exportOptionsModel;
            this.tabInfo.visible = getTabPanelVisible();
        }), reportPreview.events.on('exportOptionsTabVisibleChanged', (args) => {
            this.tabInfo.visible = getTabPanelVisible();
        }));
        const actionExportTo = new ExportAction(reportPreview, this);
        this.actions.push(actionExportTo);
        this.addDisposable(actionExportTo);
        this._disposables.push(this.tabInfo);
    }
    _getExportFormatItems() {
        const result = [];
        const exportOptionsModel = this._reportPreview.exportOptionsModel;
        if (exportOptionsModel) {
            exportOptionsModel.pdf && result.push(ExportFormatID.PDF);
            exportOptionsModel.xls && result.push(ExportFormatID.XLS);
            exportOptionsModel.xlsx && result.push(ExportFormatID.XLSX);
            exportOptionsModel.rtf && result.push(ExportFormatID.RTF);
            exportOptionsModel.docx && result.push(ExportFormatID.DOCX);
            exportOptionsModel.mht && result.push(ExportFormatID.MHT);
            exportOptionsModel.html && result.push(ExportFormatID.HTML);
            exportOptionsModel.textExportOptions && result.push(ExportFormatID.Text);
            exportOptionsModel.csv && result.push(ExportFormatID.CSV);
            exportOptionsModel.image && result.push(ExportFormatID.Image);
        }
        return result;
    }
    _exportDocumentByFormat(format) {
        format && this._reportPreview.exportDocumentTo(format);
    }
    getActions(context) {
        return this.actions;
    }
    dispose() {
        super.dispose();
        this.disposeArray(this.actions);
        this.removeProperties();
    }
}
class ExportOptionsEventHandlers {
    onSubmenuShowing(popupContainer, element) {
        return (e) => {
            e.submenu._overlay.option('container', popupContainer);
            e.submenu._overlay.option('focusStateEnabled', false);
            e.submenu._overlay.option('position', { my: 'left top', at: 'left bottom', of: element, collision: 'none', boundary: popupContainer });
            this._menuButton = e.component.option('focusedElement');
            e.submenu._attachHoverEvents();
        };
    }
    onSubmenuShown(e) {
        const submenu = e.submenu;
        submenu.registerKeyHandler('escape', (e) => submenu.hide());
        submenu.registerKeyHandler('leftArrow', (e) => submenu.hide());
        submenu.registerKeyHandler('rightArrow', (e) => submenu.hide());
    }
    onSubmenuHiding(e) {
        if (this._menuButton) {
            e.component.option('focusedElement', this._menuButton);
            e.component.focus();
        }
    }
    onItemRendered(e) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$unwrap)(e.itemElement).setAttribute('aria-label', e.itemData?.text);
    }
}
class ExportAction extends ExportActionBase {
    constructor(reportPreview, model) {
        super(reportPreview);
        this.model = model;
        this.id = ActionId.ExportTo;
        this.text = 'Export To';
        this.textId = 'ASPxReportsStringId.WebDocumentViewer_ExportToText';
        this.items = this.getExportItems();
        this.addDisposable(reportPreview.events.on('exportOptionsModelChanged', () => {
            this.items = this.getExportItems();
        }));
        this.clickAction = (model) => {
            if (reportPreview.exportDisabled)
                return;
            this.model._exportDocumentByFormat(model.itemData.format);
        };
        this.templateName = 'dxrd-preview-export-to';
        this.imageTemplateName = 'dxrd-svg-preview-export-export-to';
        this.eventHandlers = new ExportOptionsEventHandlers();
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const selectBoxViewModel = this.getViewModel();
        if (args.propertyName === 'items')
            selectBoxViewModel.widget.items = args.newValue;
    }
    createViewModel(parent, index) {
        const viewModel = super.createViewModel(parent, index);
        const getItems = (items) => {
            return items.map(x => ({
                imageClassName: x.imageClassName,
                imageTemplateName: x.imageTemplateName,
                text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(x.text, x.textId),
                format: x.format,
                items: x.items && getItems(x.items) || undefined
            }));
        };
        const exportActionViewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(viewModel)
            .generateProperty('widget', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('items', getItems(this.items))
            .generateProperty('onItemRendered', (e) => this.eventHandlers.onItemRendered(e))
            .generateProperty('onSubmenuHiding', (e) => this.eventHandlers.onSubmenuHiding(e))
            .generateProperty('onSubmenuShown', (e) => this.eventHandlers.onSubmenuShown(e))
            .generateProperty('onSubmenuShowing', (container, element) => this.eventHandlers.onSubmenuShowing(container, element))
            .getViewModel())
            .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
            .getViewModel();
        return exportActionViewModel;
    }
    getExportItems() {
        const items = this.model._getExportFormatItems();
        const result = {
            text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Export To', 'ASPxReportsStringId.WebDocumentViewer_ExportToText'),
            textId: 'ASPxReportsStringId.WebDocumentViewer_ExportToText',
            imageClassName: 'dxrd-image-export-to',
            items: items
        };
        Object.defineProperty(result, 'imageTemplateName', {
            enumerable: true,
            configurable: true,
            get: () => {
                return this.imageTemplateName;
            },
            set: (newVal) => {
                this.imageTemplateName = newVal;
            }
        });
        return [result];
    }
}
exportOptionsModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], ExportAction.prototype, "items", void 0);

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobilePage.js
var _mobilePage_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


class MobilePreviewPage extends PreviewPage {
    deferredUpdateViewModel() { return false; }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('readerMode', this.readerMode)
            .generateProperty('hasBricks', this.hasBricks)
            .getViewModel();
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const viewModel = this.getViewModel();
        viewModel.hasBricks = this.hasBricks;
    }
    constructor(preview, pageIndex, processClick, subscribeToPageLoading = false) {
        super(preview, pageIndex, processClick, subscribeToPageLoading);
        this.maxZoom = 1;
        this.readerMode = preview.readerMode;
        this.selectBrick = (path, ctrlKey) => {
            const currentBrick = this.brick;
            !ctrlKey && this.resetBrickRecusive(currentBrick);
            if (!path) {
                return;
            }
            if (!currentBrick) {
                this._selectedBrickPath = path;
                return;
            }
            this.bricks.forEach((brick) => { if (brick.indexes === path)
                this.activateBrick(brick); });
        };
    }
}
_mobilePage_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobilePreviewPage.prototype, "hasBricks", void 0);

;// ./node_modules/devexpress-reporting/viewer/mobile/mobilePreview.viewModel.js

function createMobileReportPreviewViewModel(base) {
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('mobileZoomOptions', {
        getZoom: () => this.mobileZoomRead,
        setZoomUpdating: (newValue) => this.setZoomUpdating(newValue),
        setZoom: (newValue) => this.mobileZoom = newValue,
    })
        .generateProperty('zoomUpdating', this.zoomUpdating)
        .generateProperty('previewWrapperSizeWidth', this.previewWrapperSize.width)
        .generateProperty('previewWrapperSizeHeight', this.previewWrapperSize.height)
        .generateProperty('surfaceEvents', this.documentId === null ? 'none' : '')
        .generateProperty('galleryEvents', this.zoomUpdating ? 'none' : '')
        .generateProperty('pageEvents', this.brickEventsDisabled ? 'none' : '')
        .generateProperty('slideOptions', this.slideOptions)
        .generateProperty('topOffset', this.topOffset)
        .generateProperty('click', () => !this.brickEventsDisabled && this.showActions())
        .generateProperty('scrollViewOptions', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
        .generateProperty('direction', 'both')
        .generateProperty('pushBackValue', '0')
        .generateProperty('bounceEnabled', false)
        .generateProperty('disabled', this.zoomUpdating)
        .generateProperty('onUpdated', (e) => { this.setScrollReached(e); })
        .getViewModel())
        .generateProperty('onSlide', (event) => this.onSlide(event))
        .getViewModel();
}
function updateMobileReportPreviewViewModel(args) {
    const viewModel = this.getViewModel();
    if (args.propertyName === 'zoomUpdating') {
        viewModel.zoomUpdating = this.zoomUpdating;
    }
    if (args.propertyName === 'previewWrapperSize') {
        viewModel.previewWrapperSizeHeight = this.previewWrapperSize.height;
        viewModel.previewWrapperSizeWidth = this.previewWrapperSize.width;
    }
    if (args.propertyName === 'documentId') {
        viewModel.surfaceEvents = this.documentId === null ? 'none' : '';
    }
    if (args.propertyName === 'brickEventsDisabled') {
        viewModel.pageEvents = this.brickEventsDisabled ? 'none' : '';
    }
    if (args.propertyName === 'zoomUpdating') {
        viewModel.surfaceEvents = this.zoomUpdating ? 'none' : '';
        viewModel.scrollViewOptions.disabled = this.zoomUpdating;
    }
    if (args.propertyName === 'slideOptions') {
        viewModel.slideOptions = this.slideOptions;
    }
    if (args.propertyName === 'topOffset') {
        viewModel.topOffset = this.topOffset;
    }
}

;// ./node_modules/devexpress-reporting/viewer/mobile/mobilePreview.js
var mobilePreview_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class MobileReportPreview extends ReportPreview {
    deferredUpdateViewModel() { return false; }
    _getScrollAvailable() {
        return !(this.scrollReachedTop && this.scrollReachedLeft
            && this.scrollReachedRight && this.scrollReachedBottom);
    }
    constructor(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl = false, mobileSettings = { readerMode: true, animationEnabled: true }, breadcrumb, exportSettings) {
        super(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl, undefined, exportSettings, undefined, breadcrumb);
        this.readerMode = mobileSettings.readerMode;
        const globalAnimationEnabled = mobileSettings.animationEnabled;
        this.animationSettings = { zoomEnabled: globalAnimationEnabled, swipeEnabled: globalAnimationEnabled };
        this.canSwitchToDesigner = false;
        this.autoFitBy = ZoomAutoBy.PageWidth;
        this.showMultipagePreview = true;
    }
    onPropertyChanged(args) {
        super.onPropertyChanged(args);
        if (args.propertyName === 'mobileZoom') {
            this.zoom = args.newValue;
        }
        if (args.propertyName === 'zoom' || args.propertyName === 'originalZoom') {
            const currentZoom = this.zoom;
            this.mobileZoomRead = currentZoom > 0 ? currentZoom : this.originalZoom;
        }
        if (args.propertyName === 'searchPanelVisible') {
            if (args.newValue) {
                this.actionsVisible = false;
            }
        }
        if (args.propertyName == 'pageIndex') {
            this.actionsVisible = false;
        }
        if (args.propertyName === 'pages') {
            this.interactionDisabled = this.pages.length === 0;
        }
        if (args.propertyName === 'pages' || args.propertyName === 'availablePages') {
            if (!this.availablePages) {
                this.visiblePages = [].concat(this.pages);
            }
            else {
                this.visiblePages = this.pages.filter((x) => this.availablePages.indexOf(x.pageIndex) !== -1);
            }
        }
    }
    createViewModel() {
        return createMobileReportPreviewViewModel.call(this, super.createViewModel());
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        updateMobileReportPreviewViewModel.call(this, args);
    }
    setZoomUpdating(newValue) {
        this.zoomUpdating = newValue;
    }
    createPage(pageIndex, processClick, subscribeToPageLoading = false) {
        return new MobilePreviewPage(this, pageIndex, processClick, subscribeToPageLoading);
    }
    createBrickClickProcessor(cyclePageIndex) {
        const _clickHandler = super.createBrickClickProcessor(cyclePageIndex);
        const func = (brick) => {
            if (this.zoomUpdating)
                return;
            if (cyclePageIndex !== this.pageIndex) {
                this.actionsVisible = false;
                const supscriptionDispose = this.events.on('actionsVisibleChanged', (args) => {
                    supscriptionDispose();
                    this.actionsVisible = false;
                });
            }
            _clickHandler(brick);
        };
        return func;
    }
    _hasActiveEditingFields() {
        return this.visiblePages.some(p => {
            const pageEditFields = p.editingFields;
            return pageEditFields && pageEditFields.some(x => x.active);
        });
    }
    showActions() {
        if (this.zoomUpdating || this.interactionDisabled)
            return;
        const searchVisible = this.searchPanelVisible;
        if (!searchVisible) {
            if (!this._hasActiveEditingFields()) {
                this.actionsVisible = !this.actionsVisible;
            }
        }
        else {
            this.searchPanelVisible = !searchVisible;
        }
    }
    onSlide(e) {
        this.scrollReachedLeft = true;
        this.scrollReachedRight = true;
        if (this.autoFitBy === ZoomAutoBy.None && e.removedItems && e.removedItems[0].blocks.length === 1 && e.addedItems && e.addedItems[0].blocks.length === 1)
            this.autoFitBy = ZoomAutoBy.PageWidth;
    }
    goToPage(pageIndex, forcePage) {
        super.goToPage(pageIndex, forcePage);
    }
    setScrollReached(e) {
        this.scrollReachedLeft = e.reachedLeft;
        this.scrollReachedRight = e.reachedRight;
        this.scrollReachedTop = e.reachedTop;
        this.scrollReachedBottom = e.reachedBottom;
    }
    initializeSlideOptions(searchModel, gallery) {
        const viewModel = this.getViewModel();
        viewModel.gallery = gallery.getViewModel();
        viewModel.slideOptions = {
            readerMode: this.readerMode,
            animationSettings: this.animationSettings,
            searchPanel: searchModel,
            getTopOffset: () => this.topOffset,
            setTopOffset: (value) => this.topOffset = value,
            getReachedTop: () => this.scrollReachedTop,
            getReachedLeft: () => this.scrollReachedLeft,
            getReachedRight: () => this.scrollReachedRight,
            getDisabled: () => this.interactionDisabled,
            setAutoFitBy: (value) => this.autoFitBy = value,
            getGalleryIsAnimated: () => gallery.isAnimated,
            getRepaintTimeout: () => gallery.repaintTimeout,
            setRepaintTimeout: (value) => gallery.repaintTimeout = value,
            setZoomUpdating: (value) => this.zoomUpdating = value,
            getZoomUpdating: () => this.zoomUpdating,
            getBrickEventsDisabled: () => this.brickEventsDisabled,
            setBrickEventsDisabled: (value) => this.brickEventsDisabled = value,
            getScrollAvailable: () => this._getScrollAvailable(),
            getSwipeEnabled: () => {
                if (this.zoomUpdating) {
                    return false;
                }
                if (searchModel.height > 0 && !searchModel.editorVisible) {
                    return false;
                }
                if (!this.scrollReachedLeft && !this.scrollReachedRight) {
                    return false;
                }
                return true;
            }
        };
    }
}
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], MobileReportPreview.prototype, "slideOptions", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], MobileReportPreview.prototype, "topOffset", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)({ width: 0, height: 0 })
], MobileReportPreview.prototype, "previewWrapperSize", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], MobileReportPreview.prototype, "availablePages", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], MobileReportPreview.prototype, "visiblePages", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileReportPreview.prototype, "searchPanelVisible", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileReportPreview.prototype, "actionsVisible", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileReportPreview.prototype, "scrollReachedLeft", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileReportPreview.prototype, "scrollReachedRight", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], MobileReportPreview.prototype, "scrollReachedTop", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], MobileReportPreview.prototype, "scrollReachedBottom", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileReportPreview.prototype, "zoomUpdating", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1)
], MobileReportPreview.prototype, "mobileZoom", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1)
], MobileReportPreview.prototype, "mobileZoomRead", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileReportPreview.prototype, "brickEventsDisabled", void 0);
mobilePreview_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], MobileReportPreview.prototype, "scrollAvailable", void 0);

;// external "DevExpress.data.DataSource"
const external_DevExpress_data_DataSource_namespaceObject = DevExpress.data.DataSource;
var external_DevExpress_data_DataSource_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_DataSource_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/accessibility/_searchKeyboardHelper.js

class SearchKeyboardHelper extends external_DevExpress_Analytics_Internal_namespaceObject.ListKeyboardHelper {
    constructor(searchModel) {
        super();
        this.liveRegionId = 'dxrd-preview-search-live-region';
        this.addDisposable(searchModel.events.on('searchResultChanged', (args) => {
            const result = searchModel.searchResult;
            if (result.length > 0)
                this.liveRegion().changeText((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('{0} results are available', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchResultsAvailable'), result.length));
            else if (!searchModel.loading && !!searchModel.searchText)
                this.liveRegion().changeText(searchModel.noResultText());
        }), searchModel.events.on('searchTextChanged', (args) => {
            if (!!searchModel.searchText)
                this.liveRegion().changeText((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('You searched for {0}', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchString'), '"' + searchModel.searchText + '"'));
        }));
    }
}

;// ./node_modules/devexpress-reporting/viewer/search/_searchResultNavigator.js

class SearchResultNavigator extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(searchModel, reportPreview) {
        super();
        const goToMatchedResult = (foundResult) => {
            if (!foundResult) {
                return;
            }
            reportPreview.goToPage && reportPreview.goToPage(foundResult.pageIndex);
            const page = reportPreview.pages[foundResult.pageIndex];
            page && page.selectBrick(foundResult.indexes);
        };
        this.getFirstMatchFromPage = (pageIndex, up, thisPageOnly) => {
            if (!searchModel.searchResult || searchModel.searchResult.length === 0) {
                return null;
            }
            let firstMatch;
            const sortOutResult = (index) => {
                searchModel.searchResult.forEach((m) => {
                    if (thisPageOnly && m.pageIndex === index) {
                        if (!firstMatch || (m.id < firstMatch.id && !up || m.id > firstMatch.id && up)) {
                            firstMatch = m;
                        }
                    }
                    else {
                        if (m.pageIndex >= index && !up && (!firstMatch || m.id < firstMatch.id) || m.pageIndex <= index && up && (!firstMatch || m.id > firstMatch.id)) {
                            firstMatch = m;
                        }
                    }
                });
            };
            sortOutResult(pageIndex);
            !firstMatch && sortOutResult(up ? reportPreview.pages.length : 0);
            return firstMatch;
        };
        const _setCurrentResult = (highlight, resultId, thisPageOnly) => {
            if (searchModel.searchResult && searchModel.searchResult.length !== 0) {
                const currentResult = (resultId >= 0 && searchModel.searchResult.length > resultId) ?
                    searchModel.searchResult[resultId] :
                    this.getFirstMatchFromPage(reportPreview.pageIndex, searchModel.searchUp, thisPageOnly);
                this.currentResult = currentResult;
                highlight && goToMatchedResult(this.currentResult);
            }
            else {
                reportPreview.pages && reportPreview.pages[reportPreview.pageIndex] && reportPreview.pages[reportPreview.pageIndex].selectBrick('');
            }
        };
        this.goToResult = (id) => {
            if (id !== 0 && !id) {
                return null;
            }
            _setCurrentResult(true, id);
        };
        this.addDisposable(searchModel.events.on('searchResultChanged', (args) => {
            if (!this.currentResult)
                _setCurrentResult(true);
        }), reportPreview.events.on('pageIndexChanged', (args) => {
            if (!this.currentResult || args.newValue !== this.currentResult.pageIndex)
                this.currentResult = null;
        }));
        this.next = (up) => {
            if (!searchModel.searchResult) {
                return false;
            }
            if (!this.currentResult) {
                const prevPageIndex = (reportPreview.pageIndex === 0 ? reportPreview.pages.length : reportPreview.pageIndex) - 1;
                const pageIndexToSearchFrom = up ? prevPageIndex : reportPreview.pageIndex;
                const firstResult = this.getFirstMatchFromPage(pageIndexToSearchFrom, up);
                this.currentResult = firstResult;
                if (firstResult) {
                    goToMatchedResult(firstResult);
                    return true;
                }
                else {
                    return false;
                }
            }
            let id;
            const currentId = this.currentResult.id;
            if (up) {
                id = (currentId === 0) ? searchModel.searchResult.length - 1 : (currentId - 1);
            }
            else {
                id = (currentId === searchModel.searchResult.length - 1) ? 0 : (currentId + 1);
            }
            this.currentResult = searchModel.searchResult[id];
            goToMatchedResult(this.currentResult);
            return true;
        };
    }
}

;// external "DevExpress.data.CustomStore"
const external_DevExpress_data_CustomStore_namespaceObject = DevExpress.data.CustomStore;
var external_DevExpress_data_CustomStore_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_CustomStore_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/search/_utils.js

const formatSearchResult = function (value) { return value && ((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('page', 'ASPxReportsStringId.WebDocumentViewer_SearchPageNumberText') + ' ' + (value.pageIndex + 1)); };

;// ./node_modules/devexpress-reporting/viewer/search/_searchViewModel.js
var _searchViewModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};











class SearchViewModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.buttons.searchButton.text = this.loading ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Stop', 'ASPxReportsStringId.SearchDialog_StopButton') :
            (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Search', 'ASPxReportsStringId.SearchDialog_SearchButton');
        viewModel.buttons.searchButton.disabled = this.loading && !this.useAsyncSearch;
        viewModel.buttons.searchButton.text = this.getSearchButtonText();
        viewModel.searchCompleted = this.searchCompleted;
        viewModel.searchResultCount = this.searchResultCount;
        viewModel.searchResultPageCount = this.searchResultPageCount;
        viewModel.noResultText = this.noResultText();
        if (args.propertyName === 'searchResultDataSource')
            viewModel.searchResultDataSource = this.searchResultDataSource;
        if (args.propertyName === 'loading')
            viewModel.loading = this.loading;
        if (args.propertyName === 'matchCase')
            viewModel.matchCaseEditor.value = this.matchCase;
        if (args.propertyName === 'matchWholeWord')
            viewModel.matchWholeWordEditor.value = this.matchWholeWord;
    }
    createViewModel() {
        const searchViewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('buttons', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('searchButton', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('text', this.getSearchButtonText())
            .generateProperty('disabled', this.loading && !this.useAsyncSearch)
            .generateProperty('onClick', () => this.searchButtonClick())
            .getViewModel())
            .generateProperty('upButton', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('template', (0,external_DevExpress_Analytics_Internal_namespaceObject.generateIconTemplate)(''))
            .generateProperty('icon', 'dxrd-svg-operations-arrowup')
            .generateProperty('onClick', () => this.findNext(true))
            .getViewModel())
            .generateProperty('downButton', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('template', (0,external_DevExpress_Analytics_Internal_namespaceObject.generateIconTemplate)(''))
            .generateProperty('icon', 'dxrd-svg-operations-arrowdown')
            .generateProperty('onClick', () => this.findNext(false))
            .getViewModel())
            .getViewModel())
            .generateProperty('searchEditor', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('onKeyDown', (e) => {
            const findNext = (searchUp, text) => {
                if (this.searchText !== text) {
                    this.searchText = text;
                }
                else {
                    this.findNext(searchUp);
                    return true;
                }
            };
            if (e.event.key === external_DevExpress_Analytics_Internal_namespaceObject.KeyboardEnum.Enter) {
                e.event.stopPropagation();
                e.event.preventDefault();
                findNext(e.event.shiftKey, e.component.option('text'));
            }
            if (e.event.key == 'ArrowUp')
                findNext(true, e.component.option('text')) && e.event.stopPropagation();
            if (e.event.key == 'ArrowDown')
                findNext(false, e.component.option('text')) && e.event.stopPropagation();
        })
            .generateProperty('onFocusOut', (e) => this.onSearchTextChanged(e))
            .generateProperty('inputAttr', {
            type: 'search',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Search', 'ASPxReportsStringId.SearchDialog_Header')
        })
            .getViewModel())
            .generateProperty('matchCaseEditor', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('text', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Match case', 'ASPxReportsStringId.SearchDialog_Case'))
            .generateProperty('value', this.matchCase)
            .generateProperty('onValueChanged', (event) => {
            this.matchCase = event.value;
        })
            .getViewModel())
            .generateProperty('matchWholeWordEditor', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('text', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Match whole word only', 'ASPxReportsStringId.SearchDialog_WholeWord'))
            .generateProperty('value', this.matchWholeWord)
            .generateProperty('onValueChanged', (event) => {
            this.matchWholeWord = event.value;
        })
            .getViewModel())
            .generateProperty('loading', this.loading)
            .generateProperty('searchCompleted', this.searchCompleted)
            .generateProperty('headerText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Search', 'ASPxReportsStringId.SearchDialog_Header'))
            .generateProperty('noResultText', this.noResultText())
            .generateProperty('searchResultCount', this.searchResultCount)
            .generateProperty('searchResultPageCount', this.searchResultPageCount)
            .generateProperty('resultsInText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('results in', 'ASPxReportsStringId.SearchDialog_Results_In'))
            .generateProperty('resultsPagesText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('pages', 'ASPxReportsStringId.SearchDialog_Results_Pages'))
            .generateProperty('searchResultHeaderId', `dxrd-${(0,external_DevExpress_Analytics_Internal_namespaceObject.guid)()}`)
            .generateProperty('searchResultDataSource', this.searchResultDataSource)
            .generateProperty('doSearch', (searchUp) => this.findNext(searchUp))
            .generateProperty('onItemRendered', (event) => this.onItemRendered())
            .getViewModel();
        return searchViewModel;
    }
    resetSearchResult() {
        this._cachedRequests = {};
        this._cachedWholeWordRequests = {};
        this._cachedCaseSensitiveRequests = {};
        this._cachedWholeWordWithCaseRequests = {};
        this.searchResult = [];
        this.searchText = '';
        this.resetSearchResultDataSource();
    }
    findTextRequestDone(result, cache) {
        this.loading = false;
        if (!result) {
            this.searchResult = [];
            return;
        }
        cache = (result.success ? result.matches : []) || [];
        this.searchResult = cache;
    }
    appentSearchResult(result) {
        if (result && result.matches && result.matches.length) {
            this.searchResult = [...this.searchResult, ...result.matches];
        }
    }
    performSearchAsync(text, reportPreview, ignore = true) {
        this.searchRequestDeferred.reject();
        const getResult = (searchOperationId, startIndex, fetchLimit, ignore) => {
            this.searchRequestDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            reportPreview.requestWrapper.getSearchStatus(searchOperationId, startIndex, fetchLimit, ignore)
                .then(result => this.searchRequestDeferred.resolve(result))
                .catch(fail => this.failRequestHandler(ignore));
            this.searchRequestDeferred.done(result => {
                if (result.faultMessage) {
                    this.loading = false;
                    return;
                }
                this.appentSearchResult(result);
                if (result.completed) {
                    this.loading = false;
                    this.searchCompleted = true;
                    return;
                }
                if (result.requestAgain) {
                    setTimeout(() => {
                        getResult(searchOperationId, this.searchResult.length, fetchLimit, ignore);
                    }, 100);
                }
            });
        };
        this.resetDeffereds();
        reportPreview.requestWrapper.startSearch(text, ignore)
            .then(result => this.startSearchDeferred.resolve(result))
            .catch(fail => this.failRequestHandler(ignore));
        this.startSearchDeferred.done(result => {
            if (result.success) {
                if (result.faultMessage) {
                    this.failRequestHandler(ignore);
                    return;
                }
                if (result.completed) {
                    this.appentSearchResult(result);
                    this.loading = false;
                    this.searchCompleted = true;
                    return;
                }
                this.searchOperationId = result.searchOperationId;
                getResult(this.searchOperationId, 0, this.fetchLimit, ignore);
            }
            else {
                this.failRequestHandler(ignore);
            }
        });
    }
    performSearch(text, reportPreview, cache, ignore = true) {
        this.resetDeffereds();
        reportPreview.requestWrapper.findTextRequest(text, ignore)
            .then(result => this.searchRequestDeferred.resolve(result))
            .catch(fail => this.failRequestHandler(ignore));
        this.searchRequestDeferred.done((result) => {
            if (!ignore)
                this.findTextRequestDone(result, cache[text]);
            this.searchCompleted = true;
        });
    }
    mapSearchResultsToViewModels(results) {
        return results.map(item => (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .createDefaultModel(item)
            .generateProperty('data', item.data)
            .generateProperty('itemClickAction', (data) => this.goToResult(data))
            .generateProperty('attr', {
            'aria-label': item.data.text + ', ' + formatSearchResult(item.data) + ', ' + (this.searchResult.indexOf(item.data) + 1) + ' of ' + this.searchResult.length
        })
            .generateProperty('info', formatSearchResult(item.data))
            .getViewModel());
    }
    resetSearchResultDataSource() {
        if (this.searchResultDataSource) {
            this.searchResultDataSource.reload();
            this.searchResultDataSource.dispose();
        }
        this.searchResultDataSource = new (external_DevExpress_data_DataSource_default())({
            store: new (external_DevExpress_data_CustomStore_default())({
                load: (loadOptions) => {
                    let resultData = [];
                    if (loadOptions.take) {
                        resultData = this._renderedSearchResult.slice(loadOptions.skip, (loadOptions.skip + loadOptions.take));
                    }
                    else
                        resultData = this._renderedSearchResult;
                    const totalCount = this.fetchLimit > this.searchResult.length ? this.fetchLimit : this.searchResult.length;
                    const resultViewModels = this.mapSearchResultsToViewModels(resultData);
                    return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(resultViewModels, { totalCount: totalCount }).promise();
                }
            }),
            paginate: true,
            pageSize: this.pageSize
        });
    }
    resetDeffereds() {
        this.startSearchDeferred.reject();
        this.startSearchDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this.searchRequestDeferred.reject();
        this.searchRequestDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
    }
    failRequestHandler(ignore) {
        if (!ignore) {
            this.searchResult = [];
            this.loading = false;
        }
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'matchCase' || args.propertyName === 'matchWholeWord') {
            this.updateSearch(100);
        }
        if (args.propertyName === 'searchText') {
            this.updateSearch(200);
        }
        if (args.propertyName === 'searchResult') {
            if (this.searchResult) {
                this._renderedSearchResult = this.searchResult.map((item) => { return { data: item }; });
                if (this.searchResultDataSource.items().length < this.pageSize)
                    this.searchResultDataSource.reload();
            }
            if (this.searchResult?.length) {
                this.searchResultPageCount = new Set((this.searchResult.map(result => result.pageIndex))).size;
                this.searchResultCount = this.searchResult.length;
            }
            else {
                this.searchResultPageCount = this.searchResultCount = 0;
            }
        }
    }
    constructor(reportPreview, searchSettings, enableKeyboardSupport) {
        super();
        this.reportPreview = reportPreview;
        this._searchIgnoreObs = false;
        this.actions = [];
        this.searchUp = false;
        this.searchResultCount = 0;
        this.searchResultPageCount = 0;
        this.stopSearchDisabled = false;
        this.searchCompleted = false;
        this._renderedSearchResult = [];
        this.useAsyncSearch = true;
        this.searchRequestDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this.startSearchDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this.fetchLimit = 1000;
        this.pageSize = 30;
        this.resetSearchResult();
        this.useAsyncSearch = searchSettings?.useAsyncSearch ?? true;
        const searchEnabled = searchSettings?.searchEnabled ?? true;
        if (!searchEnabled && SearchAvailable()) {
            SearchAvailable(false);
        }
        this._resultNavigator = SearchViewModel.createResultNavigator(this, reportPreview);
        const getDisabled = () => reportPreview.documentBuilding || !reportPreview.documentId || reportPreview.pageIndex === -1;
        this.addDisposable(reportPreview.events.on('documentIdChanged', (args) => {
            this.resetSearchResult();
            this.tabInfo.visible = tabInfoVisible();
        }), reportPreview.events.on('pageIndexChanged', (args) => {
            this.tabInfo.visible = tabInfoVisible();
        }), reportPreview.events.on('documentBuildingChanged', (args) => {
            this.tabInfo.visible = tabInfoVisible();
        }), reportPreview.events.on('reportIdChanged', (args) => {
            this.resetSearchResult();
        }));
        const tabInfoVisible = () => !getDisabled() && SearchAvailable();
        this.tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
            text: 'Search',
            template: 'dxrd-preview-search',
            model: this,
            keyboardHelper: enableKeyboardSupport ? new SearchKeyboardHelper(this) : undefined,
            localizationId: 'ASPxReportsStringId.SearchDialog_Header',
            imageClassName: 'search',
            imageTemplateName: 'dxrd-svg-preview-search',
            visible: tabInfoVisible()
        });
        const searchAction = new SearchAction(this.tabInfo, reportPreview);
        this.addDisposable(searchAction);
        this.actions.push(searchAction);
        this.addDisposable(SearchAvailable.subscribe(() => {
            this.tabInfo.visible = tabInfoVisible();
        }));
        this._disposables.push(this.tabInfo);
    }
    goToResult(result) {
        this._resultNavigator.goToResult(result.id);
    }
    newSearch(text, matchCase, matchWholeWord) {
        this._searchTimeout && clearTimeout(this._searchTimeout);
        this._searchTimeout = setTimeout(() => {
            this._resultNavigator.currentResult = null;
            const mCase = this.matchCase;
            text = mCase ? this.searchText : this.searchText.toLocaleLowerCase();
            const cache = this.matchWholeWord
                ? mCase ? this._cachedWholeWordWithCaseRequests : this._cachedWholeWordRequests
                : mCase ? this._cachedCaseSensitiveRequests : this._cachedRequests;
            if (cache[text]) {
                this.loading = false;
                this.searchResult = cache[text];
                return;
            }
            this._searchIgnoreObs = true;
            this._searchIgnoreObs = false;
            ((ignore) => {
                if (this.useAsyncSearch)
                    this.performSearchAsync(text, this.reportPreview, ignore);
                else
                    this.performSearch(text, this.reportPreview, cache, ignore);
            })(this._searchIgnoreObs);
        }, 100);
    }
    stopSearchProcess() {
        this.resetDeffereds();
        if (this.searchOperationId && this.searchOperationId.length) {
            this.reportPreview.requestWrapper.stopSearch(this.searchOperationId, false);
        }
        this.loading = false;
        this.searchCompleted = false;
    }
    startSearchProcess() {
        this.resetDeffereds();
        this.searchCompleted = false;
        this.searchResult = [];
        this.resetSearchResultDataSource();
        if (this.searchText) {
            this.loading = true;
            this.newSearch(this.searchText, this.matchCase, this.matchWholeWord);
        }
        else {
            this.reportPreview.currentPage?.selectBrick('');
        }
    }
    searchButtonClick() {
        if (this.loading) {
            this.stopSearchProcess();
        }
        else {
            this.startSearchProcess();
        }
    }
    updateSearch(timeout) {
        if (!this.useAsyncSearch) {
            setTimeout(() => {
                this.startSearchProcess();
            }, timeout);
            return;
        }
        if (this.loading)
            this.stopSearchProcess();
        setTimeout(() => {
            if (!this.loading)
                this.startSearchProcess();
        }, timeout);
    }
    findNext(searchUp) {
        if (searchUp != undefined)
            this.searchUp = searchUp;
        if (this.loading && !this.useAsyncSearch) {
            return;
        }
        this._resultNavigator.next(this.searchUp);
    }
    dispose() {
        this._searchTimeout && clearTimeout(this._searchTimeout);
        super.dispose();
    }
    onItemRendered() {
        this._timeoutItemRendered && clearTimeout(this._timeoutItemRendered);
        this._timeoutItemRendered = setTimeout(() => {
            this.tabInfo.keyboardHelper && this.tabInfo.keyboardHelper.initialize();
        }, 100);
    }
    getActions(context) {
        return this.actions;
    }
    noResultText() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('No results found for {0}', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchNoResults'), '"' + this.searchText + '"');
    }
    getSearchButtonText() {
        return this.loading ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Stop', 'ASPxReportsStringId.SearchDialog_StopButton') : (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Search', 'ASPxReportsStringId.SearchDialog_SearchButton');
    }
    onSearchTextChanged(e) {
        this.searchText = e.component.option('text');
    }
}
SearchViewModel.createResultNavigator = (seacrhModel, reportPreview) => {
    return new SearchResultNavigator(seacrhModel, reportPreview);
};
_searchViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], SearchViewModel.prototype, "matchWholeWord", void 0);
_searchViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], SearchViewModel.prototype, "matchCase", void 0);
_searchViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], SearchViewModel.prototype, "searchText", void 0);
_searchViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], SearchViewModel.prototype, "searchResult", void 0);
_searchViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], SearchViewModel.prototype, "loading", void 0);
_searchViewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => new (external_DevExpress_data_DataSource_default())([]))
], SearchViewModel.prototype, "searchResultDataSource", void 0);

class SearchAction extends ViewerAction {
    constructor(tabInfo, reportPreview) {
        super(reportPreview, undefined, ['documentId', 'pageIndex', 'documentBuilding']);
        this.id = ActionId.Search;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Search', 'ASPxReportsStringId.SearchDialog_Header');
        this.imageClassName = 'dxrd-image-search';
        this.imageTemplateName = 'dxrd-svg-preview-search';
        this.addDisposable(SearchAvailable.subscribe(() => this.visible = this.isVisible()));
        this.hasSeparator = true;
        this.hotKey = { ctrlKey: false, keyCode: 70 };
        this.clickAction = () => {
            tabInfo.active = true;
            tabInfo.collapsed = false;
        };
    }
    isVisible() {
        return SearchAvailable();
    }
    isDisabled() {
        return this.reportPreview.documentBuilding || !this.reportPreview.documentId || this.reportPreview.pageIndex === -1;
    }
}

;// external "DevExpress.ui.dxTextBox"
const external_DevExpress_ui_dxTextBox_namespaceObject = DevExpress.ui.dxTextBox;
var external_DevExpress_ui_dxTextBox_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxTextBox_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobileSearch.js
var _mobileSearch_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






class MobileSearchViewModel extends SearchViewModel {
    focusEditor(event) {
        if (this.searchPanelVisible) {
            this.editorVisible = true;
            const previewSearch = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dxrdp-search-editor');
            const searchEditor = external_DevExpress_ui_dxTextBox_default().getInstance(previewSearch.get(0));
            searchEditor.focus();
            setTimeout(() => {
                event.currentTarget.blur();
                searchEditor.focus();
            }, 1);
        }
    }
    _updateBricks(page, searchResult) {
        if (page.brick && searchResult && searchResult.length > 0) {
            const results = searchResult.filter((x) => { return x.pageIndex === page.pageIndex; });
            for (let i = 0; i < results.length; i++) {
                page.selectBrick(results[i].indexes, true);
            }
        }
        else {
            const subscriptionDispose = page.events.on('brickChanged', (args) => {
                subscriptionDispose();
                this._updateBricks(page, this.searchResult);
            });
        }
    }
    onPropertyChanged(args) {
        super.onPropertyChanged(args);
        if (args.propertyName === 'searchResult') {
            const newResult = this.searchResult;
            if (!newResult || newResult.length === 0) {
                this.reportPreview.availablePages = null;
                this.reportPreview.pages.forEach(page => page.resetBrickRecusive(page.brick));
            }
            else {
                this.reportPreview.availablePages = newResult.map(x => x.pageIndex);
            }
            const blocks = this.gallery?.items[this.gallery.selectedIndex].blocks;
            blocks?.forEach(block => {
                block.page && block.page.resetBrickRecusive(block.page.brick);
                this._updateBricks(block.page, this.searchResult);
            });
        }
        else if (args.propertyName === 'searchPanelVisible') {
            const newVal = args.newValue;
            if (newVal !== this.reportPreview.searchPanelVisible)
                this.reportPreview.searchPanelVisible = newVal;
            if (!newVal || !SearchAvailable()) {
                this.stopSearching();
            }
            else {
                this.height = MobileSearchViewModel.maxHeight;
            }
        }
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('enabled', this.enabled)
            .generateProperty('height', this.height)
            .generateProperty('editorVisible', this.editorVisible)
            .generateProperty('focusEditor', (_, event) => this.focusEditor(event))
            .generateProperty('startSearch', () => this.startSearch())
            .generateProperty('onSearchTextChanged', (event) => this.onSearchTextChanged(event))
            .generateProperty('tapToSearchText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Tap here to Search', 'ASPxReportsStringId.WebDocumentViewer_Mobile_TapHereToSearch'))
            .getViewModel();
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const viewModel = this.getViewModel();
        if (args.propertyName === 'height') {
            viewModel.height = this.height;
        }
        if (args.propertyName === 'editorVisible') {
            viewModel.editorVisible = this.editorVisible;
            viewModel.height = this.height;
            viewModel.enabled = this.enabled;
        }
    }
    constructor(reportPreview, gallery) {
        super(reportPreview);
        this.gallery = gallery;
        this['_resultNavigator']['_disposables'].forEach((x) => { x.dispose(); });
        let _galleryCurrentItemBlocksSubscriptionDispose;
        const currentBlocksSubscribe = (selectedIndex) => {
            _galleryCurrentItemBlocksSubscriptionDispose && _galleryCurrentItemBlocksSubscriptionDispose();
            _galleryCurrentItemBlocksSubscriptionDispose = gallery.items[selectedIndex].events.on('blocksChanged', (args) => {
                this.updatePagesInBlocks(args.newValue);
            });
            this.updatePagesInBlocks(gallery.items[selectedIndex].blocks);
        };
        let _gallerySelectedIndexSubscriptionDispose;
        const currentIndexSubscribe = () => {
            _gallerySelectedIndexSubscriptionDispose && _gallerySelectedIndexSubscriptionDispose();
            _gallerySelectedIndexSubscriptionDispose = gallery.events.on('selectedIndexChanged', (args) => {
                currentBlocksSubscribe(args.newValue);
            });
            currentBlocksSubscribe(gallery.selectedIndex);
        };
        this.addDisposable(gallery.events.on('itemsChanged', (args) => {
            currentIndexSubscribe();
        }));
        currentIndexSubscribe();
        this.searchPanelVisible = reportPreview.searchPanelVisible;
        this.addDisposable(reportPreview.events.on('searchPanelVisibleChanged', (args) => {
            if (args.newValue !== this.searchPanelVisible)
                this.searchPanelVisible = args.newValue;
        }));
        this.enabled = SearchAvailable();
        this.addDisposable(SearchAvailable.subscribe(x => this.enabled = x));
    }
    updatePagesInBlocks(blocks) {
        blocks.forEach(block => {
            if (block.page && this.searchResult?.length > 0) {
                this._updateBricks(block.page, this.searchResult);
            }
        });
    }
    stopSearching() {
        this.height = 0;
        this.editorVisible = false;
        this.searchResult = null;
    }
    startSearch() {
        if (this.searchResult === null)
            this.findNext();
    }
}
MobileSearchViewModel.maxHeight = 80;
_mobileSearch_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileSearchViewModel.prototype, "editorVisible", void 0);
_mobileSearch_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], MobileSearchViewModel.prototype, "height", void 0);
_mobileSearch_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileSearchViewModel.prototype, "searchPanelVisible", void 0);
_mobileSearch_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileSearchViewModel.prototype, "enabled", void 0);

class SearchBarModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(viewModel, element, $searchText) {
        super();
        this.viewModel = viewModel;
        this.addDisposable(viewModel.events.on('heightChanged', (args) => {
            const newValue = args.newValue;
            if (!newValue) {
                element.style.display = 'none';
            }
            else {
                element.style.display = 'block';
            }
            $searchText.css({
                'opacity': Math.min((newValue / MobileSearchViewModel.maxHeight), 1).toString()
            });
        }));
    }
    dispose() {
        super.dispose();
        this.viewModel.stopSearching();
    }
}

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/gallery/_galleryItem.js
var _galleryItem_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

class GalleryItemBlock extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    deferredUpdateViewModel() { return false; }
    onPropertyChanged(args) { }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('repaint', this.repaint)
            .generateProperty('classSet', this.classSet)
            .generateProperty('visible', this.visible)
            .generateProperty('position', this.position)
            .generateProperty('active', this.active)
            .generateProperty('page', this.page?.getViewModel())
            .generateProperty('reportPreview', this.preview)
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'position') {
            viewModel.position = this.position;
        }
        viewModel.active = this.active;
    }
    constructor(options) {
        super();
        this.repaint = options.repaint;
        this.page = options.page;
        this.classSet = options.classSet;
        this.visible = options.visible;
        this.position = options.position;
        this.preview = options.reportPreview;
    }
}
_galleryItem_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], GalleryItemBlock.prototype, "position", void 0);
_galleryItem_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], GalleryItemBlock.prototype, "active", void 0);
class GalleryItem extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    deferredUpdateViewModel() { return false; }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('blocks', this.blocks.map(x => x.getViewModel()))
            .generateProperty('gallery', this.gallery, true)
            .generateProperty('reportPreview', this.preview)
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'blocks') {
            const arrayArgs = args;
            if (arrayArgs.added || arrayArgs.removed) {
                arrayArgs.added?.forEach(change => viewModel.blocks.splice(change.index, 0, change.item.getViewModel()));
                arrayArgs.removed?.sort((a, b) => b.index - a.index).forEach(change => viewModel.blocks.splice(change.index, 1));
            }
            else {
                viewModel.blocks = arrayArgs.newValue.map(x => x.getViewModel());
            }
        }
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'blocks') {
            this.enabled = this.blocks.length > 1;
        }
        else if (args.propertyName === 'enabled') {
            this.blocks.forEach(x => x.active === args.newValue);
        }
    }
    constructor(preview, gallery) {
        super();
        this.preview = preview.getViewModel();
        this.gallery = gallery.getViewModel();
    }
}
_galleryItem_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], GalleryItem.prototype, "blocks", void 0);
_galleryItem_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], GalleryItem.prototype, "enabled", void 0);

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/gallery/_galleryModel.js
var _galleryModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class GalleryModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    deferredUpdateViewModel() { return false; }
    _createBlock(galleryItem, previewPage, className, visible) {
        previewPage.disableResolutionReduction = true;
        previewPage.maxZoom = 1;
        const classSet = {};
        if (this.animationEnabled && this.pageCount > 1) {
            className && (classSet[className] = true);
            classSet['dxrdp-animation'] = true;
        }
        return new GalleryItemBlock({
            page: previewPage,
            visible: visible,
            classSet: classSet,
            position: { top: 0, left: 0, width: 0, height: 0 },
            reportPreview: galleryItem.preview
        });
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('animationEnabled', this.animationEnabled)
            .generateProperty('selectedIndex', this.selectedIndex)
            .generateProperty('items', this.items.map(x => x.getViewModel()))
            .generateProperty('onOptionChanged', (event) => {
            if (event.name === 'selectedIndex')
                this.selectedIndex = event.value;
        })
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.selectedIndex = this.selectedIndex;
        viewModel.animationEnabled = this.animationEnabled;
        if (args.propertyName === 'items') {
            viewModel.items = this.items.map(x => x.getViewModel());
        }
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'selectedIndexReal') {
            if (args.newValue >= 0) {
                this.changePage(this.preview);
            }
            else if (args.newValue < 0) {
                this.selectedIndexReal = 0;
            }
        }
        else if (args.propertyName === 'selectedIndex') {
            const result = args.newValue - args.oldValue;
            if (result === -2 || result === 1) {
                this.selectedIndexReal += 1;
            }
            else if (result === 2 || result === -1) {
                this.selectedIndexReal -= 1;
            }
        }
        if (args.propertyName === 'items' || args.propertyName === 'selectedIndex') {
            this.updateContentSize();
        }
    }
    updateContentSize() {
        const currentItem = this.items[this.selectedIndex];
        this._currentItemSubscriptionDispose && this._currentItemSubscriptionDispose();
        this._currentItemSubscriptionDispose = currentItem.events.on('blocksChanged', (args) => {
            _onCurrentItemBlocksChanged(currentItem.blocks);
        });
        let _currentBlockSubscriptions = [];
        const _onCurrentItemBlocksChanged = (blocks) => {
            const block = blocks && blocks[0];
            _currentBlockSubscriptions.forEach(x => x());
            _currentBlockSubscriptions = [];
            if (!block) {
                this.contentSize = { width: 'auto', height: 'auto' };
            }
            else {
                _currentBlockSubscriptions.push(block.events.on('positionChanged', (args) => {
                    onBlockChanged();
                }), block.page.events.on('sizeChanged', (args) => {
                    onBlockChanged();
                }));
                const onBlockChanged = () => {
                    const position = block.position;
                    const width = Math.max(position.width, block.page.size.width);
                    const height = Math.max(position.height, block.page.size.height);
                    this.contentSize = { width: width + 'px', height: height + 'px' };
                };
                onBlockChanged();
            }
        };
        _onCurrentItemBlocksChanged(currentItem.blocks);
    }
    constructor(preview) {
        super();
        this.preview = preview;
        this._spacing = 1;
        this._animationTimeout = null;
        this._currentItemSubscriptionDispose = null;
        this._repaint = () => {
            const args = { propertyName: 'repaint', newValue: {}, oldValue: {} };
            this.events.call('propertyChanged', args);
        };
        this.horizontal = 1;
        this.vertical = 1;
        this.pageCount = 0;
        const oldIndex = this.selectedIndex;
        this.items = [
            new GalleryItem(preview, this),
            new GalleryItem(preview, this),
            new GalleryItem(preview, this)
        ];
        this.animationEnabled = preview.animationSettings.swipeEnabled;
        const _calcHorizontalVertical = () => {
            const _zoom = preview.originalZoom;
            const pageHeight = Math.ceil(preview._pageHeight * getCurrentResolution(_zoom) / previewDefaultResolution());
            const pageWidth = Math.ceil(preview._pageWidth * getCurrentResolution(_zoom) / previewDefaultResolution());
            const _containerSize = preview.previewWrapperSize;
            const horizontal = (preview.autoFitBy != ZoomAutoBy.PageWidth && (Math.floor(_containerSize.width / (pageWidth + 2 * this._spacing)))) || 1;
            const vertical = Math.floor(_containerSize.height / (pageHeight + 2 * this._spacing)) || 1;
            this.horizontal = horizontal;
            this.vertical = vertical;
        };
        const updateGalleryContent = () => {
            _calcHorizontalVertical();
            this.pageCount = this.horizontal * this.vertical;
            this.updateContent(preview, this.pageCount);
        };
        this.addDisposable(preview.events.on('previewWrapperSizeChanged', (args) => {
            this.items.forEach(item => item.blocks.forEach(block => block.repaint = true));
            updateGalleryContent();
            const currentGalleryItem = this.items[this.selectedIndex];
            this.updateBlocks(currentGalleryItem, this.pageCount, preview, this.selectedIndexReal, preview.animationSettings.zoomEnabled);
            this._repaint();
        }), preview.events.on('visiblePagesChanged', (args) => {
            for (let i = 0; i < this.items.length; i++) {
                this.items[i].blocks = [];
                this.items[i].realIndex = -1;
            }
            updateGalleryContent();
        }), preview.events.on('zoomUpdatingChanged', (args) => {
            if (!args.newValue) {
                clearTimeout(this.repaintTimeout);
                this.repaintTimeout = setTimeout(() => this._repaint(), 410);
            }
        }), preview.events.on('originalZoomChanged', (args) => {
            _calcHorizontalVertical();
            const pageCount = this.horizontal * this.vertical;
            if (this.pageCount !== pageCount) {
                this.pageCount = pageCount;
                this.items.forEach(item => item.blocks.forEach(block => block.repaint = true));
                this.updateContent(preview, pageCount);
            }
            else if (this.pageCount === 1) {
                const block = this.items[this.selectedIndex].blocks[0];
                this.items.forEach((item, index) => {
                    if (index != this.selectedIndex)
                        item.blocks.forEach(block => block.repaint = true);
                });
                setTimeout(() => {
                    block.position = {
                        left: block.position.left,
                        top: block.position.top,
                        height: Math.max(this.preview.previewWrapperSize.height, block.page.size.height),
                        width: Math.max(this.preview.previewWrapperSize.width, block.page.size.width)
                    };
                });
            }
        }), preview.events.on('pageIndexChanged', (args) => {
            updateGalleryContent();
        }));
        this.getSwipeLeftEnabled = () => {
            return this.selectedIndexReal !== 0;
        };
        this.getSwipeRightEnabled = () => {
            return this.selectedIndexReal != (Math.ceil(preview.visiblePages.length / (this.horizontal * this.vertical)) - 1);
        };
    }
    dispose() {
        clearTimeout(this.repaintTimeout);
        super.dispose();
    }
    updatePagesVisible(preview) {
        if (this.items[this.selectedIndex]) {
            let someActive = false;
            const pages = this.items[this.selectedIndex].blocks;
            if (pages.length > 0) {
                for (let i = 0; i < pages.length; i++) {
                    if (pages[i].page) {
                        pages[i].page.isClientVisible = true;
                        if (pages[i].page.active) {
                            someActive = true;
                        }
                    }
                }
                if (!someActive) {
                    pages[0].page && preview.goToPage(pages[0].page.pageIndex);
                }
            }
        }
    }
    updateCurrentBlock() {
        if (this.items[this.selectedIndex]) {
            const blocks = this.items[this.selectedIndex].blocks;
            if (blocks.length > 0) {
                if (blocks.length > 1) {
                    this.currentBlockText = [blocks[0].page.pageIndex + 1, blocks[blocks.length - 1].page.pageIndex + 1].join(' - ');
                }
                else {
                    if (blocks[0].page) {
                        this.currentBlockText = (this.preview.pageIndex + 1).toString();
                    }
                }
            }
        }
    }
    updateContent(preview, pagesCount) {
        const itemsCount = Math.ceil(preview.visiblePages.length / pagesCount);
        let pageIndex = 0;
        let isCurrentBlock = false;
        let realIndex = 0;
        for (let i = 0; i < itemsCount; i++) {
            for (let j = 0; j < pagesCount; j++) {
                if (preview.visiblePages[pageIndex].active) {
                    isCurrentBlock = true;
                    realIndex = i;
                    break;
                }
                pageIndex++;
                if (preview.visiblePages.length === pageIndex) {
                    break;
                }
            }
            if (isCurrentBlock)
                break;
        }
        if (this.selectedIndexReal !== realIndex) {
            this.selectedIndexReal = realIndex;
        }
        else {
            this.changePage(preview);
        }
    }
    updateBlockPositions(blocks, visible) {
        const height = this.preview.previewWrapperSize.height / this.vertical;
        const width = this.preview.previewWrapperSize.width / this.horizontal;
        for (let i = 0; i < blocks.length; i++) {
            const vertical = Math.floor((i) / this.horizontal);
            const horizontal = i - (this.horizontal * vertical);
            const left = horizontal * width;
            if (blocks[i].visible === visible || blocks[i].visible === true) {
                blocks[i].position = {
                    top: vertical * height,
                    left: left,
                    width: width,
                    height: height
                };
                blocks[i].visible = true;
            }
            else {
                blocks[i].position = {
                    top: vertical * height,
                    left: blocks[i].classSet['left'] ? ((this.preview.previewWrapperSize.width + left) * -1) : this.preview.previewWrapperSize.width + left,
                    width: width,
                    height: height
                };
            }
        }
    }
    updateStartBlocks(galleryItem, pages) {
        const currentBlockPages = galleryItem.blocks.map(x => x.page);
        let firstPage = pages.indexOf(currentBlockPages[0]);
        if (firstPage !== -1) {
            for (let i = 0; i < firstPage; i++) {
                galleryItem.blocks.splice(i, 0, this._createBlock(galleryItem, pages[i], 'left', false));
            }
        }
        else {
            firstPage = currentBlockPages.indexOf(pages[0]);
            if (firstPage !== -1) {
                galleryItem.blocks.splice(0, firstPage);
            }
        }
        return firstPage;
    }
    updateLastBlocks(galleryItem, pages) {
        const currentBlockPages = galleryItem.blocks.map(x => x.page);
        let lastPage = pages.indexOf(currentBlockPages[currentBlockPages.length - 1]);
        if (lastPage !== -1) {
            for (let i = lastPage + 1; i < pages.length; i++) {
                galleryItem.blocks.splice(i, 0, this._createBlock(galleryItem, pages[i], 'right', false));
            }
        }
        else {
            lastPage = currentBlockPages.indexOf(pages[pages.length - 1]);
            galleryItem.blocks.splice(lastPage + 1, currentBlockPages.length - lastPage);
        }
        return lastPage;
    }
    updateBlocks(galleryItem, pagesCount, preview, index, useAnimation = false) {
        const blocks = galleryItem.blocks;
        if (galleryItem.realIndex !== index
            || (blocks.length !== pagesCount || blocks[0].page.pageIndex === -1)
            || blocks.some(x => x.repaint)) {
            galleryItem.realIndex = index;
            clearTimeout(this._animationTimeout);
            const startIndex = pagesCount * index;
            if (startIndex < 0 || startIndex >= preview.visiblePages.length) {
                galleryItem.blocks = [];
                return;
            }
            const pages = [];
            for (let i = startIndex; i < startIndex + pagesCount; i++) {
                if (i >= preview.visiblePages.length) {
                    break;
                }
                pages.push(preview.visiblePages[i]);
            }
            const first = this.updateStartBlocks(galleryItem, pages);
            const last = this.updateLastBlocks(galleryItem, pages);
            if (first === -1 && last === -1) {
                galleryItem.blocks = [];
                for (let i = 0; i < pages.length; i++) {
                    galleryItem.blocks.splice(i, 0, this._createBlock(galleryItem, pages[i], null, true));
                }
            }
            this.updateBlockPositions(galleryItem.blocks, true);
            const self = this;
            if (useAnimation) {
                this._animationTimeout = setTimeout(() => {
                    !self.isDisposing && self.updateBlockPositions(galleryItem.blocks, false);
                }, 400);
            }
            else {
                self.updateBlockPositions(galleryItem.blocks, false);
            }
        }
    }
    changePage(preview) {
        const pagesCount = this.horizontal * this.vertical;
        const itemsCount = Math.ceil(preview.visiblePages.length / pagesCount);
        if (this.selectedIndex === this.items.length - 1) {
            this.updateBlocks(this.items[0], pagesCount, preview, this.selectedIndexReal + 1);
            this.updateBlocks(this.items[1], pagesCount, preview, this.selectedIndexReal - 1);
        }
        else if (this.selectedIndex === 0) {
            this.updateBlocks(this.items[2], pagesCount, preview, this.selectedIndexReal - 1);
            this.updateBlocks(this.items[1], pagesCount, preview, this.selectedIndexReal + 1);
        }
        else {
            this.updateBlocks(this.items[0], pagesCount, preview, this.selectedIndexReal - 1);
            this.updateBlocks(this.items[2], pagesCount, preview, this.selectedIndexReal + 1);
        }
        const currentGalleryItem = this.items[this.selectedIndex];
        this.updateBlocks(currentGalleryItem, pagesCount, preview, this.selectedIndexReal, preview.animationSettings.zoomEnabled);
        if (!this.isAnimated) {
            this.updatePagesVisible(preview);
        }
        this.updateCurrentBlock();
    }
}
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => { })
], GalleryModel.prototype, "repaint", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(null)
], GalleryModel.prototype, "repaintTimeout", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], GalleryModel.prototype, "isAnimated", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], GalleryModel.prototype, "items", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], GalleryModel.prototype, "currentBlockText", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], GalleryModel.prototype, "selectedIndexReal", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(0)
], GalleryModel.prototype, "selectedIndex", void 0);
_galleryModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], GalleryModel.prototype, "animationEnabled", void 0);

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_paginator.js
var _paginator_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class MobilePaginator extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    _updateText() {
        setTimeout(() => { this.visible = true; }, 1);
        if (this.reportPreview.pageIndex === -1) {
            this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('0 pages', 'ASPxReportsStringId.WebDocumentViewer_0Pages');
        }
        else {
            const ofText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('of', 'ASPxReportsStringId.ToolBarItemText_OfLabel');
            const pageText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page', 'ASPxReportsStringId.ToolBarItemText_PageLabel');
            this.text = pageText + ' ' + this.gallery.currentBlockText + ' ' + ofText + ' ' + this.reportPreview.pages.length;
        }
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'visible') {
            this._updateVisibility && this._updateVisibility(args.newValue);
        }
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('visible', this.visible)
            .generateProperty('text', this.text)
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.text = this.text;
        viewModel.visible = this.visible;
    }
    initialize(element) {
        const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
        let timeoutId = null;
        let hideAnimationTimeoutId = null;
        this._updateVisibility = (newVal) => {
            if (newVal) {
                $element.removeClass('dxrdp-hide').addClass('dxrdp-show');
                timeoutId && clearTimeout(timeoutId);
                timeoutId = setTimeout(() => { this.visible = false; }, 2000);
            }
            else {
                $element.removeClass('dxrdp-show').addClass('dxrdp-hide');
                hideAnimationTimeoutId && clearTimeout(hideAnimationTimeoutId);
                hideAnimationTimeoutId = setTimeout(() => {
                    $element.removeClass('dxrdp-hide');
                }, 500);
            }
        };
    }
    constructor(reportPreview, gallery) {
        super();
        this.reportPreview = reportPreview;
        this.gallery = gallery;
        this._updateText();
        this.addDisposable(reportPreview.events.on('pagesChanged', (args) => {
            this._updateText();
        }), reportPreview.events.on('pageIndexChanged', (args) => {
            this._updateText();
        }), gallery.events.on('currentBlockTextChanged', (args) => {
            this._updateText();
        }));
    }
}
_paginator_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false, { notify: 'always' })
], MobilePaginator.prototype, "visible", void 0);
_paginator_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], MobilePaginator.prototype, "text", void 0);

;// external "DevExpress.data.ArrayStore"
const external_DevExpress_data_ArrayStore_namespaceObject = DevExpress.data.ArrayStore;
var external_DevExpress_data_ArrayStore_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_ArrayStore_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/parameters/multiValuesHelper.js
var multiValuesHelper_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


class MultiValuesHelper extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseModel {
    onPropertyChanged(args) { }
    constructor(parameter) {
        super();
        const items = parameter.lookUpValues;
        this.items = items;
        this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(this, 'value', {
            read: () => parameter._value,
            write: (newVal) => parameter._value = newVal
        }, [
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['_value'])
        ]));
        this.dataSource = items;
        let allValues;
        this.maxDisplayedTags = Math.min(((items && items.length) || 1) - 1, MultiValuesHelper.maxDisplayedTags);
        this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(this, 'isSelectedAll', {
            read: () => this.value?.length == items.length,
            write: (selectAll) => {
                const newValue = selectAll ? (allValues || (allValues = items.map(x => x.value))) : [];
                if (!(0,external_DevExpress_Analytics_Internal_namespaceObject.compareArrays)(this.value, newValue))
                    this.value = newValue;
            }
        }, [
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(this, ['value'])
        ]));
        if (parameter.selectAllValues)
            this.isSelectedAll = true;
    }
}
MultiValuesHelper.maxDisplayedTags = 3;
multiValuesHelper_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], MultiValuesHelper.prototype, "selectedItems", void 0);
multiValuesHelper_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], MultiValuesHelper.prototype, "_value", void 0);


;// ./node_modules/devexpress-reporting/viewer/parameters/parameterHelper.js
var parameterHelper_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







function getEditorType(typeString) {
    if (typeString === 'multiValueWithLookUp') {
        return viewerEditorTemplates.multiValue;
    }
    if (typeString === 'multiValue') {
        return viewerEditorTemplates.multiValueEditable;
    }
    if (typeString === 'Enum') {
        return viewerEditorTemplates.selectBox;
    }
    return undefined;
}
function _convertLocalDateToUTC(localDate) {
    return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), localDate.getHours(), localDate.getMinutes(), localDate.getSeconds()));
}
class MultiValueItem extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    constructor(engine) {
        super(undefined, undefined, engine);
        this.key = (0,external_DevExpress_Analytics_Internal_namespaceObject.guid)();
    }
}
parameterHelper_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(undefined)
], MultiValueItem.prototype, "value", void 0);
class ParameterHelper extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingMultiplatformModel {
    constructor() {
        super(...arguments);
        this.getUnspecifiedDisplayText = () => { return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('(none)', 'PreviewStringId.NoneString'); };
    }
    _isKnownEnumType(type) {
        return !!this._knownEnums && this._knownEnums.some((knownEnumType) => { return knownEnumType.enumType === type; });
    }
    static getSerializationValue(value, dateConverter) {
        if (value instanceof Array) {
            return value.map((item) => {
                const itemValue = item?.value ? external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap(item.value) : item;
                return (itemValue instanceof Date) ? dateConverter(itemValue) : itemValue;
            });
        }
        return (value instanceof Date) ? dateConverter(value) : value;
    }
    static createDefaultDataSource(store) {
        return new (external_DevExpress_data_DataSource_default())({
            store: store,
            paginate: true,
            pageSize: 100
        });
    }
    initialize(knownEnums, callbacks) {
        if (arguments.length > 0) {
            this._knownEnums = knownEnums;
            if (callbacks) {
                callbacks.customizeParameterEditors && this._set('_customizeParameterEditors', callbacks.customizeParameterEditors);
                callbacks.customizeParameterLookUpSource && (this.customizeParameterLookUpSource = callbacks.customizeParameterLookUpSource);
            }
        }
    }
    createInfo(parameter) {
        const parameterDescriptor = parameter.getParameterDescriptor();
        const typeString = this.isEnumType(parameter) ? 'Enum' : external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameterDescriptor.type);
        const editorType = Object.assign({}, getEditorType(typeString) || (0,external_DevExpress_Analytics_Internal_namespaceObject.getEditorType)(typeString));
        const info = {
            propertyName: 'value',
            displayName: parameterDescriptor['displayName'],
            localizationId: parameterDescriptor['localizationId'],
            editor: editorType,
            editorOptions: {}
        };
        if (parameterDescriptor.type === 'System.Guid') {
            info.editorOptions.isNullable = parameterDescriptor.allowNull;
        }
        return info;
    }
    addShowCleanButton(info, parameter) {
        info.editorOptions.showClearButton = parameter.allowNull;
        this.addDisposable(this._getEngine().createComputedProperty(info.editorOptions, 'placeholder', () => {
            if (external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameter.allowNull))
                return this.getUnspecifiedDisplayText();
            return external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameter.isMultiValue) ? (0,external_DevExpress_Analytics_Internal_namespaceObject.selectPlaceholder)() : '';
        }, [
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['allowNull', 'isMultiValue'])
        ]));
    }
    assignValueStore(info, parameter) {
        const items = this.getEnumCollection(parameter);
        info.valueStore = this.getItemsSource(parameter.getParameterDescriptor(), items, true);
        const multiValueInfo = this._getEngine().getPropertyValue(parameter, 'multiValueInfo');
        multiValueInfo.valueStore = info.valueStore;
    }
    createMultiValue(parameter, value) {
        const model = new MultiValueItem(this._engineType);
        if (value !== null && value !== void 0) {
            model._set('value', value);
        }
        model.getInfo = () => {
            return [
                this._getEngine().unwrap(this._getEngine().getPropertyValue(parameter, 'multiValueInfo'))
            ];
        };
        return model;
    }
    createMultiValueArray(fromArray, parameter, convertSingleValue) {
        const converter = convertSingleValue ? convertSingleValue : this.getValueConverter(external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameter.type));
        return fromArray.map((item) => {
            return this.createMultiValue(parameter, converter(item));
        });
    }
    isEnumType(parameter) {
        return this._isKnownEnumType(external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameter.type));
    }
    getItemsSource(parameterDescriptor, items, sort) {
        if (items) {
            let newItems;
            if (this.customizeParameterLookUpSource)
                newItems = this.customizeParameterLookUpSource(parameterDescriptor, items.slice(0));
            return newItems ? newItems : ParameterHelper.createDefaultDataSource(sort ? new external_DevExpress_Analytics_Internal_namespaceObject.SortedArrayStore(items, 'displayValue') : new (external_DevExpress_data_ArrayStore_default())(items));
        }
        return items;
    }
    getEnumCollection(parameter) {
        const type = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameter.type);
        if (this._isKnownEnumType(type)) {
            const currentKnownEnumInfo = this._knownEnums.filter((knownEnumType) => { return knownEnumType.enumType === type; })[0];
            if (currentKnownEnumInfo && currentKnownEnumInfo.values && currentKnownEnumInfo.values.length !== 0) {
                return currentKnownEnumInfo.values.map((val) => { return { value: val.value, displayValue: val.displayName }; });
            }
        }
    }
    getParameterInfo(parameter) {
        const valueInfo = this.createInfo(parameter);
        this._getEngine().setPropertyValue(parameter, 'multiValueInfo', ((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, valueInfo, { propertyName: 'value' })));
        this.assignValueStore(valueInfo, parameter);
        if (parameter.allowNull !== undefined) {
            this.addShowCleanButton(valueInfo, parameter);
        }
        if (external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(parameter.isMultiValue)) {
            const editorType = Object.assign({}, getEditorType(parameter['isMultiValueWithLookUp'] ? 'multiValueWithLookUp' : 'multiValue'));
            valueInfo.editor = editorType;
            valueInfo['addHandler'] = () => { return this.createMultiValue(parameter); };
        }
        valueInfo.editor.custom = valueInfo.editor.custom || 'dxrd-parameters-property-editor';
        if (this._get('_customizeParameterEditors')) {
            this._get('_customizeParameterEditors')(parameter.getParameterDescriptor(), valueInfo);
        }
        return valueInfo;
    }
    getValueConverter(type) {
        return (val => { return val; });
    }
}
parameterHelper_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(undefined)
], ParameterHelper.prototype, "_customizeParameterEditors", void 0);

;// ./node_modules/devexpress-reporting/viewer/parameters/previewParameterHelper.js






class PreviewParameterHelper extends ParameterHelper {
    mapLookUpValues(type, lookUpValues) {
        const converter = this.getValueConverter(type);
        return (lookUpValues || []).map((lookUpValue) => { return { value: converter(lookUpValue.Value), displayValue: lookUpValue.Description }; });
    }
    static fixPropertyName(propertyName) {
        return propertyName.replace(/\./g, '_');
    }
    static getPrivatePropertyName(propertyName) {
        return '_' + PreviewParameterHelper.fixPropertyName(propertyName);
    }
    createInfo(parameter) {
        const info = super.createInfo(parameter);
        info.propertyName = PreviewParameterHelper.getPrivatePropertyName(parameter.path);
        if (!parameter.isMultiValue && (parameter.lookUpValues || this.isEnumType(parameter))) {
            info.editorOptions.searchEnabled = true;
            if (!parameter.allowNull)
                info.editorOptions.allowClearing = false;
        }
        if (parameter.isRange) {
            info.editor = this.getRangeEditor();
            return info;
        }
        if ((parameter.type === 'System.DateTime' || parameter.isTypesCurrentType(parameter.intTypes.concat(parameter.floatTypes), parameter.type)) && !parameter.allowNull && !parameter.isMultiValue && !parameter.isMultiValueWithLookUp) {
            info.validationRules = external_DevExpress_Analytics_Widgets_Internal_namespaceObject.requiredValidationRules;
        }
        else if (parameter.type === 'System.Guid') {
            info.editorOptions.displayCustomValue = false;
        }
        return info;
    }
    assignValueStore(info, parameter) {
        const _helper = this;
        if (!parameter.isMultiValueWithLookUp) {
            parameter.multiValueInfo['events'] = new external_DevExpress_Analytics_Utils_namespaceObject.EventPropertyManager();
            info.events = new external_DevExpress_Analytics_Utils_namespaceObject.EventPropertyManager();
            this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(info, 'valueStore', {
                read: () => {
                    let items = [];
                    let needSorting = false;
                    const lookupValues = parameter.lookUpValues;
                    if (parameter.isFilteredLookUpSettings || lookupValues && lookupValues.length !== 0) {
                        items = lookupValues;
                    }
                    else {
                        items = _helper.getEnumCollection(parameter);
                        needSorting = true;
                    }
                    if (parameter.valueStoreCache)
                        return parameter.valueStoreCache;
                    const itemsSource = _helper.getItemsSource(parameter.getParameterDescriptor(), items, needSorting);
                    if (itemsSource)
                        parameter.valueStoreCache = itemsSource;
                    return itemsSource;
                },
                write: (values) => {
                    parameter.lookUpValues = values;
                }
            }, [
                (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['lookUpValues'])
            ]));
            this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(parameter.multiValueInfo, 'valueStore', {
                read: () => info.valueStore,
                write: (value) => info.valueStore = value
            }, [
                (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(info, ['valueStore'])
            ]));
        }
    }
    isEnumType(parameter) {
        return parameter.isFilteredLookUpSettings || !!parameter.lookUpValues || super.isEnumType(parameter);
    }
    getValueConverter(type) {
        if (type === 'System.DateTime') {
            return (dateString) => { return (0,external_DevExpress_Analytics_Internal_namespaceObject.parseDate)(dateString); };
        }
        else if (['System.Int16', 'System.Int32', 'System.Int64'].indexOf(type) > -1) {
            return val => (0,external_DevExpress_Analytics_Internal_namespaceObject.integerValueConverter)(val, '0');
        }
        else if (['System.Single', 'System.Double', 'System.Decimal'].indexOf(type) > -1) {
            return val => (0,external_DevExpress_Analytics_Internal_namespaceObject.floatValueConverter)(val, '0');
        }
        return super.getValueConverter(type);
    }
    getRangeEditor() {
        return viewerEditorTemplates.rangeEditor;
    }
    constructor(knownEnums, callbacks) {
        super(undefined, undefined, 'native');
        this.callbacks = callbacks;
        this.initialize(knownEnums, callbacks);
    }
}

;// ./node_modules/devexpress-reporting/viewer/parameters/previewParameterValueValidator.js

class PreviewParameterValueValidator {
    _registerType(typeName, validator) {
        this._validatorMap[typeName] = validator;
    }
    constructor() {
        this._validatorMap = {};
        this._numericTypes = [
            'System.SByte',
            'System.Decimal',
            'System.Int64',
            'System.Int32',
            'System.Int16',
            'System.Single',
            'System.Double',
            'System.Byte',
            'System.UInt16',
            'System.UInt32',
            'System.UInt64'
        ];
        this._registerType('System.String', (value) => typeof value === 'string');
        this._registerType('System.Guid', (value) => typeof value === 'string' && (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.validateGuid)(value));
        this._registerType('System.Boolean', (value) => typeof value === 'boolean');
        this._registerType('System.DateTime', (value) => {
            return !isNaN(new Date(value));
        });
        this._numericTypes.forEach((type) => this._registerType(type, (value) => typeof value === 'string' && external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ValueEditorHelper.isValid(type, undefined, value)));
    }
    validate(type, value) {
        return this._validatorMap[type] ? this._validatorMap[type](value) : true;
    }
    isNumericType(type) {
        return this._numericTypes.some(x => x === type);
    }
}

;// ./node_modules/devexpress-reporting/viewer/parameters/previewParameter.js
var previewParameter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








class PreviewParameter extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseModel {
    onPropertyChanged(args) {
        if (args.propertyName === 'lookUpValues') {
            this.valueStoreCache = null;
        }
    }
    static _compareValues(value1, value2) {
        if (value1 instanceof Date && value2 instanceof Date) {
            return value1 - value2 === 0;
        }
        return value1 === value2;
    }
    constructor(parameterInfo, parameterHelper) {
        super();
        this.valueStoreCache = null;
        this.intTypes = ['System.Int16', 'System.Int32', 'System.Int64'];
        this.floatTypes = ['System.Single', 'System.Double', 'System.Decimal'];
        this.isTypesCurrentType = (types, type) => types.indexOf(type) > -1;
        this.tag = parameterInfo.Tag;
        this.type = parameterInfo.TypeName;
        this.isRange = parameterInfo.Value && parameterInfo.Value.Start !== undefined && parameterInfo.Value.End !== undefined;
        this.path = parameterInfo.Path;
        this.assignProperty('visible', parameterInfo.Visible);
        this.assignProperty('enabled', parameterInfo.Enabled);
        this.isFilteredLookUpSettings = parameterInfo.IsFilteredLookUpSettings;
        this.hasBindedExpressions = !!(parameterInfo.EnabledExpression || parameterInfo.VisibleExpression);
        this.hasVisibleExpression = !!parameterInfo.VisibleExpression;
        this._originalLookUpValues = parameterInfo.LookUpValues ? parameterHelper.mapLookUpValues(this.type, parameterInfo.LookUpValues || []) : null;
        this.lookUpValues = this._originalLookUpValues;
        this.isMultiValue = parameterInfo.MultiValue;
        this.selectAllValues = parameterInfo.SelectAllValues;
        this.allowNull = parameterInfo.AllowNull;
        this.isMultiValueWithLookUp = this.isMultiValue && !!this.lookUpValues;
        this._originalValue = parameterInfo.Value;
        if (parameterInfo.ValueInfo && this.isTypesCurrentType(this.intTypes.concat(this.floatTypes), this.type) && !this.isMultiValueWithLookUp) {
            this._originalValue = parameterInfo.ValueInfo;
        }
        this.getParameterDescriptor = () => {
            return {
                description: parameterInfo.Description,
                displayName: parameterInfo.Description || parameterInfo.Name,
                name: parameterInfo.Name,
                tag: parameterInfo.Tag,
                type: parameterInfo.TypeName,
                value: this._originalValue,
                multiValue: parameterInfo.MultiValue,
                selectAllValues: parameterInfo.SelectAllValues,
                allowNull: parameterInfo.AllowNull,
                hasLookUpValues: !!this.lookUpValues || parameterHelper.isEnumType(this),
                visible: parameterInfo.Visible,
                enabled: parameterInfo.Enabled
            };
        };
        this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(this, `___${(0,external_DevExpress_Analytics_Internal_namespaceObject.guid)()}`, () => {
            const info = parameterHelper.getParameterInfo(this);
            info.propertyName = PreviewParameterHelper.getPrivatePropertyName(parameterInfo.Path);
            info.editor.editorType = info.editor.editorType || external_DevExpress_Analytics_Widgets_namespaceObject.Editor;
            info.editorOptions.hasVerticalLabel = this.hasVerticalLabel;
            this.valueInfo = info;
        }, [
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(this, ['type', 'hasVerticalLabel', 'lookUpValues']),
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameterHelper, ['_customizeParameterEditors'])
        ]));
        this.initialize(this._originalValue, parameterHelper);
    }
    safeAssignObservable(name, value) {
        if (name in this) {
            if (PreviewParameter._compareValues(this[name], value))
                this[name] = this.type === 'System.DateTime' ? new Date(0, 0, 0) : null;
            let isEqual = false;
            if (value instanceof MultiValuesHelper && Array.isArray(value.items))
                isEqual = (0,external_DevExpress_Analytics_Internal_namespaceObject.compareArrays)(this[name].items, value.items);
            else if (Array.isArray(value))
                isEqual = (0,external_DevExpress_Analytics_Internal_namespaceObject.compareArrays)(this[name], value);
            if (!isEqual) {
                this[name] = value;
            }
        }
        else {
            if (Array.isArray(value))
                this.assignArrayProperty(name, value);
            else
                this.assignProperty(name, value);
        }
    }
    _validateRangeType(value) {
        return Array.isArray(value) && value.every(x => x instanceof Date) && value.length === 2;
    }
    validateAndAssignValue(value) {
        if (value === undefined || value === null) {
            this.value = value;
            return;
        }
        if (this.isRange && !this._validateRangeType(value))
            throw new Error(`The '${this.path}' parameter must be in the format [Date, Date].`);
        if (!this.isRange) {
            const validator = new PreviewParameterValueValidator();
            if (validator.isNumericType(this.type))
                value = '' + value;
            if (!validator.validate(this.type, value))
                throw new Error(`The '${this.path}' parameter must be a '${this.type}' type.`);
        }
        this.value = value;
    }
    initialize(value, parameterHelper) {
        let resultValue;
        if (this.isMultiValueWithLookUp) {
            this.safeAssignObservable('_value', (value || []).map((arrayItem) => {
                return parameterHelper.getValueConverter(this.type)(arrayItem);
            }));
            if (this.value)
                this.value._value = this._value;
            const multiValuesHelper = new MultiValuesHelper(this);
            let newItems;
            if (parameterHelper.customizeParameterLookUpSource)
                newItems = parameterHelper.customizeParameterLookUpSource(this.getParameterDescriptor(), multiValuesHelper.dataSource);
            if (newItems) {
                multiValuesHelper.dataSource = newItems;
            }
            else {
                const store = new (external_DevExpress_data_ArrayStore_default())({
                    data: multiValuesHelper.dataSource,
                    key: 'value',
                });
                multiValuesHelper.dataSource = ParameterHelper.createDefaultDataSource(store);
            }
            resultValue = multiValuesHelper;
        }
        else if (this.isMultiValue) {
            resultValue = value ? parameterHelper.createMultiValueArray(value, this) : [];
        }
        else if (this.allowNull && !value && value !== false) {
            resultValue = null;
        }
        else if (this.isRange) {
            const converter = parameterHelper.getValueConverter(this.type);
            resultValue = [this._originalValue.Start, this._originalValue.End].map(x => converter(x));
        }
        else {
            resultValue = parameterHelper.getValueConverter(this.type)(value);
        }
        this.safeAssignObservable('value', resultValue);
    }
    serialize() {
        const convertItem = (item) => {
            return (this.type === 'System.DateTime' && !!item && (item instanceof Date)) ? _convertLocalDateToUTC(item) : item;
        };
        let value = this.isMultiValueWithLookUp ? this._value : this.value;
        if (this.allowNull) {
            if ((this.isMultiValue && Array.isArray(value) && value['length'] === 0) || value === '') {
                value = null;
            }
        }
        return { Value: ParameterHelper.getSerializationValue(value, convertItem), Key: this.path, TypeName: this.type };
    }
}
previewParameter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PreviewParameter.prototype, "hasVerticalLabel", void 0);
previewParameter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(undefined)
], PreviewParameter.prototype, "valueInfo", void 0);
previewParameter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(undefined, { notify: 'always' })
], PreviewParameter.prototype, "lookUpValues", void 0);
previewParameter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(undefined)
], PreviewParameter.prototype, "multiValueInfo", void 0);
previewParameter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], PreviewParameter.prototype, "visible", void 0);
previewParameter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], PreviewParameter.prototype, "enabled", void 0);

;// ./node_modules/devexpress-reporting/viewer/parameters/parameterPanelItemBase.js
var parameterPanelItemBase_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






class ParameterPanelItemBase extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    onPropertyChanged(args) {
        if (args.propertyName === '_getInfo') {
            const newArgs = {
                ...args,
                propertyName: 'getInfo'
            };
            (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.updateViewModel)(this, args);
            this['events'] && this['events'].call('propertyChanged', newArgs);
        }
    }
    constructor(parameterHelper, layoutInfo) {
        super();
        this.parameterHelper = parameterHelper;
        this.layoutInfo = layoutInfo;
        this._parameters = [];
        this._separatorNames = [];
        this._groupLayoutItems = [];
        this.getInfo = () => this._getInfo;
        this.parameterHelper = parameterHelper || new PreviewParameterHelper();
    }
    _fixGroupPropertyName(name) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(Object.keys(this), name.toLocaleLowerCase().replace(/\s/g, '_'));
    }
    _getParameterByPath(path) {
        return this._parameters.filter(parameter => PreviewParameterHelper.getPrivatePropertyName(parameter.path) === path)[0];
    }
    _proceedLayoutInfo(layoutInfo, previewParameters) {
        this._getInfo = [];
        this._groupLayoutItems = [];
        layoutInfo.layoutItems.forEach(itemInfo => {
            if (itemInfo.type === 'Group') {
                const groupItemInfo = itemInfo;
                const name = this._fixGroupPropertyName(groupItemInfo.title);
                const info = {
                    propertyName: name,
                    displayName: groupItemInfo.title,
                    editor: viewerEditorTemplates.groupEditor,
                    editorOptions: {
                        expanded: groupItemInfo.expanded,
                        titleVisible: groupItemInfo.titleVisible,
                        showExpandButton: groupItemInfo.showExpandButton,
                        borderVisible: itemInfo.borderVisible,
                        orientation: groupItemInfo.orientation
                    }
                };
                const item = new ParameterPanelItemBase(this.parameterHelper, groupItemInfo);
                this[name] = item;
                this._groupLayoutItems.push(item);
                const newinfo = this._getInfo.concat(info);
                this._getInfo = newinfo;
            }
            else if (itemInfo.type === 'Parameter') {
                const parameterLayoutInfo = itemInfo;
                const previewParameter = previewParameters.filter(x => x.path === parameterLayoutInfo.path)[0];
                previewParameter && this._add(previewParameter, parameterLayoutInfo);
            }
            else if (itemInfo.type === 'Separator') {
                const generatedName = this._fixGroupPropertyName('Separator');
                this[generatedName] = new external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseEmptyModel();
                this[generatedName].assignProperty('name', generatedName);
                const info = {
                    propertyName: generatedName,
                    editor: viewerEditorTemplates.separatorEditor
                };
                const newinfo = this._getInfo.concat(info);
                this._getInfo = newinfo;
                this._separatorNames.push(generatedName);
            }
        });
    }
    _add(parameter, parameterInfo) {
        if (this._parameters.indexOf(parameter) === -1) {
            this._parameters.push(parameter);
        }
        if (!parameter.visible && !parameter.hasVisibleExpression) {
            return parameter;
        }
        parameter.hasVerticalLabel = parameterInfo.labelOrientation === 'Vertical';
        const privatePropertyName = PreviewParameterHelper.getPrivatePropertyName(parameter.path);
        if (Array.isArray(parameter.value)) {
            this.assignArrayProperty(privatePropertyName, parameter.value);
        }
        else {
            this.assignProperty(privatePropertyName, parameter.value);
        }
        const locker = new Locker();
        this.events.on(`${privatePropertyName}Changed`, (e) => {
            locker.lock(() => parameter.value = this[privatePropertyName]);
        });
        this.addDisposable(parameter.events.on('valueChanged', () => {
            locker.lock(() => this[privatePropertyName] = parameter.value);
        }));
        const parameterPropertyName = PreviewParameterHelper.fixPropertyName(parameter.path);
        if (parameter.isMultiValue || !parameter.isTypesCurrentType(parameter.intTypes.concat(parameter.floatTypes), parameter.type)) {
            this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(this, parameterPropertyName, {
                read: () => parameter.value,
                write: (newVal) => {
                    parameter.value = newVal;
                }
            }, [
                (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['value'])
            ]));
        }
        else {
            this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(this, parameterPropertyName, {
                read: () => {
                    let parseValue = parameter.value;
                    if (parseValue === null || parseValue === undefined) {
                        return parseValue;
                    }
                    if (parameter.isTypesCurrentType(parameter.intTypes, parameter.type)) {
                        parseValue = parseInt(parseValue);
                    }
                    else if (parameter.isTypesCurrentType(parameter.floatTypes, parameter.type)) {
                        parseValue = parseFloat(parseValue);
                    }
                    return parseValue;
                },
                write: (newVal) => {
                    let expandValue = newVal;
                    if (parameter.allowNull && (expandValue === '' || expandValue === undefined)) {
                        expandValue = null;
                    }
                    else if (parameter.isTypesCurrentType(parameter.intTypes, parameter.type)) {
                        expandValue = (0,external_DevExpress_Analytics_Internal_namespaceObject.integerValueConverter)(expandValue, '0');
                    }
                    else if (parameter.isTypesCurrentType(parameter.floatTypes, parameter.type)) {
                        expandValue = (0,external_DevExpress_Analytics_Internal_namespaceObject.floatValueConverter)(expandValue, '0');
                    }
                    parameter.value = expandValue;
                }
            }, [
                (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['value'])
            ]));
        }
        const newinfo = this._getInfo.concat(parameter.valueInfo);
        this._getInfo = newinfo;
        return parameter;
    }
    get groupLayoutItems() {
        return this._groupLayoutItems;
    }
    isPropertyDisabled(name) {
        const parameter = this._getParameterByPath(name);
        return parameter && !parameter.enabled;
    }
    isPropertyVisible(name) {
        const parameter = this._getParameterByPath(name);
        return !parameter || parameter.visible;
    }
    getPropertyDependencies(name, status) {
        const parameter = this._getParameterByPath(name);
        if (status === 'visible')
            return [(0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['visible'])];
        if (status === 'disabled')
            return [(0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(parameter, ['enabled'])];
        return [];
    }
    initialize(originalParametersInfo, parameters) {
        this._parameters.forEach((usedParameter) => {
            delete this[PreviewParameterHelper.fixPropertyName(usedParameter.path)];
            delete this[PreviewParameterHelper.getPrivatePropertyName(usedParameter.path)];
        });
        this._parameters = [];
        if (!originalParametersInfo) {
            this.isEmpty = true;
            this._getInfo = [];
            return;
        }
        parameters = parameters || (originalParametersInfo.parameters || []).map((parameter) => {
            const previewParameter = new PreviewParameter(parameter, this.parameterHelper);
            this._parameters.push(previewParameter);
            return previewParameter;
        });
        const layoutInfo = originalParametersInfo.parameterPanelLayout || this.layoutInfo;
        layoutInfo && this._proceedLayoutInfo(layoutInfo, parameters);
        this._groupLayoutItems.forEach(item => item.initialize({}, parameters));
    }
    setParameterValueByPath(parameterPath, value) {
        if (this[parameterPath] !== undefined) {
            this[parameterPath].value ? this[parameterPath].value = value
                : this[parameterPath] = value;
        }
        else {
            this.groupLayoutItems?.forEach(groupLayoutItem => {
                groupLayoutItem.setParameterValueByPath(parameterPath, value);
            });
        }
    }
}
parameterPanelItemBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], ParameterPanelItemBase.prototype, "isEmpty", void 0);
parameterPanelItemBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], ParameterPanelItemBase.prototype, "_getInfo", void 0);

;// ./node_modules/devexpress-reporting/viewer/parameters/previewParametersViewModel.viewmodel.js


function createPreviewParametersViewModel(baseModel) {
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(baseModel)
        .generateProperty('headerText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Preview Parameters', 'ASPxReportsStringId.ReportDesigner_Preview_ParametersTitle'))
        .generateProperty('showHeader', this._showHeader)
        .generateProperty('emptyText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('The report does not contain any parameters.', 'ASPxReportsStringId.WebDocumentViewer_NoParameters'))
        .generateProperty('isEmpty', this.isEmpty)
        .generateProperty('buttons', this.buttons)
        .generateProperty('showButtons', this.showButtons)
        .generateProperty('parametersLoading', this.parametersLoading)
        .getViewModel();
}
function updateViewModel(args) {
    const viewModel = this.getViewModel();
    viewModel.isEmpty = this.isEmpty;
    viewModel.parametersLoading = this.parametersLoading;
    viewModel.showHeader = this._showHeader;
    viewModel.showButtons = this.showButtons;
    if (args.propertyName === 'buttons') {
        viewModel.buttons = [].concat(this.buttons);
    }
}

;// ./node_modules/devexpress-reporting/viewer/parameters/parametersPanelModelBase.js
var parametersPanelModelBase_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







class ParametersPanelModelBase extends ParameterPanelItemBase {
    get parameters() {
        return this._parameters;
    }
    createViewModel() {
        return createPreviewParametersViewModel.call(this, super.createViewModel());
    }
    updateViewModel(args) {
        updateViewModel.call(this, args);
    }
    get _visibleParameters() {
        return this._parameters.filter((p) => { return p.visible; });
    }
    _shouldProcessParameter(param) {
        return this.processInvisibleParameters || (param && (param.visible || param.hasVisibleExpression || param.isFilteredLookUpSettings));
    }
    subscribeParameter(parameter) {
        const needToUpdateParameter = this._needToUpdateParameter || (this._shouldProcessParameter(parameter)) &&
            (parameter.isFilteredLookUpSettings || parameter.hasBindedExpressions);
        this._needToUpdateParameter = needToUpdateParameter;
        if (this._shouldProcessParameter(parameter)) {
            this.addDisposable(parameter.events.on(`${parameter.isMultiValueWithLookUp ? '_value' : 'value'}Changed`, (newValue) => {
                if (this._needToUpdateParameter) {
                    this.updateParameters(parameter);
                }
            }));
        }
    }
    _setLookUpValues(parameter, lookUpValues) {
        if (!lookUpValues) {
            parameter.lookUpValues = [];
            return;
        }
        parameter.lookUpValues = this.parameterHelper.mapLookUpValues(parameter.type, lookUpValues);
        const _parameterValuesContainedInLookUps = this._getParameterValuesContainedInLookups(lookUpValues, parameter);
        if (parameter.isMultiValue) {
            parameter.initialize(_parameterValuesContainedInLookUps.length > 0 ? _parameterValuesContainedInLookUps : [], this.parameterHelper);
        }
        else {
            parameter.initialize(_parameterValuesContainedInLookUps[0] && _parameterValuesContainedInLookUps[0].Value || (lookUpValues.length > 0 ? lookUpValues[0].Value : null), this.parameterHelper);
        }
    }
    _getParameterValuesContainedInLookups(parameterLookUpValues, parameter) {
        if (parameterLookUpValues) {
            if (parameter.isMultiValue) {
                const selectedItems = parameter.value.value;
                return selectedItems.filter((item) => this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, item).length > 0);
            }
            else {
                return this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, parameter.value);
            }
        }
        return [];
    }
    _filterParameterValuesContainsInLookups(parameterLookUpValues, parameterType, value) {
        return parameterLookUpValues.filter((x) => PreviewParameter._compareValues(this.parameterHelper.getValueConverter(parameterType)(x.Value), value));
    }
    _setParameterValue(parameter, value) {
        const descriptor = parameter.getParameterDescriptor();
        if (descriptor.multiValue) {
            if (value && !Array.isArray(value))
                throw new Error(`The '${parameter.path}' parameter must be an array.`);
            if (descriptor.hasLookUpValues) {
                parameter.value.value = value;
            }
            else {
                const parameterValues = this.parameterHelper.createMultiValueArray(value, parameter);
                parameter.value = parameterValues;
            }
        }
        else {
            parameter.validateAndAssignValue(value);
        }
    }
    setParameterValue(parameterName, value) {
        const parameter = this._parameters.filter(x => x.path === parameterName)[0];
        if (!parameter)
            throw new Error(`The '${parameterName}' parameter is not found.`);
        this._setParameterValue(parameter, value);
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'isEmpty') {
            this.tabInfo.visible = !this.isEmpty;
            if (this._popupInfo)
                this._popupInfo.notEmpty = !this.isEmpty;
        }
        if (args.propertyName === '_popupVisible') {
            this._popupVisibleSwitch = this._popupVisible;
            if (this._popupInfo)
                this._popupInfo.visible = this._popupVisible;
        }
        if (args.propertyName == '_popupVisibleSwitch' || args.propertyName === 'isEmpty') {
            this._popupVisible = !this.isEmpty && this._popupVisibleSwitch;
        }
        if (args.propertyName == '_getInfo') {
            this.tabInfo && this.tabInfo.propertyGrid.updateEditorsInfo(this, this.getInfo());
        }
    }
    constructor(parametersHolder, parameterHelper, enableKeyboardSupport, getRootElement) {
        super(parameterHelper);
        this._getParametersStateRequest = (argsObject) => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'getParametersState', JSON.stringify(argsObject), (message, jqXHR, textStatus) => this._parametersHolder._processError((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cannot supply filtered lookup values to a report parameter editor', 'ASPxReportsStringId.WebDocumentViewer_GetLookUpValuesError'), jqXHR));
        };
        this._getDoneGetParametersStateHandler = (changedParameter) => {
            const parametersViewModel = this;
            return (response) => {
                try {
                    if (!response || !response.parameters) {
                        return;
                    }
                    response.parameters.forEach((parametersInfoCollection) => {
                        const matchedParameter = parametersViewModel._parameters.filter((p) => { return p.path === parametersInfoCollection.Key; })[0];
                        if (!parametersViewModel._shouldProcessParameter(matchedParameter))
                            return;
                        matchedParameter.visible = parametersInfoCollection.Value.visible;
                        matchedParameter.enabled = parametersInfoCollection.Value.enabled;
                        if (parametersViewModel._parameters.indexOf(changedParameter) < parametersViewModel._parameters.indexOf(matchedParameter) && parametersInfoCollection.Value.lookUpValues != null) {
                            parametersViewModel._setLookUpValues(matchedParameter, parametersInfoCollection.Value.lookUpValues);
                        }
                    });
                }
                finally {
                    parametersViewModel.parametersLoading = false;
                }
            };
        };
        this._getFailGetParametersStateHandler = () => {
            const parametersViewModel = this;
            return (jqXHRError) => {
                parametersViewModel.parametersLoading = false;
            };
        };
        this.restore = () => {
            if (this.parametersLoading) {
                return;
            }
            try {
                this.parametersLoading = true;
                this._parameters.forEach((parameter) => {
                    if (!this._shouldProcessParameter(parameter))
                        return;
                    parameter.lookUpValues = parameter._originalLookUpValues;
                    parameter.initialize(parameter._originalValue, this.parameterHelper);
                });
            }
            finally {
                this.parameterHelper.callbacks && this.parameterHelper.callbacks.parametersReset && this.parameterHelper.callbacks.parametersReset(this, this._parameters);
                this.parametersLoading = false;
            }
        };
        this.submit = () => { };
        this.processInvisibleParameters = false;
        this.prevParametersStateRequest = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._parametersHolder = parametersHolder;
        this._validateAndSubmit = (params) => {
            const result = params && params.validationGroup && params.validationGroup.validate && params.validationGroup.validate();
            if (!result || result.isValid)
                this.submit();
        };
        this.addDisposable(parametersHolder.events.on('originalParametersInfoChanged', (args) => {
            this.initialize(args.newValue);
        }));
        this.initialize(parametersHolder.originalParametersInfo);
        this._popupVisible = !this.isEmpty && this._popupVisibleSwitch;
        this._popupInfo = { visible: this._popupVisible, notEmpty: !this.isEmpty };
        const keyboardHelperViewModelAccessor = () => this.tabInfo.getViewModel().propertyGrid.editors;
        const keyboardHelper = enableKeyboardSupport ? new external_DevExpress_Analytics_Internal_namespaceObject.PropertyGridKeyboardHelper(keyboardHelperViewModelAccessor) : undefined;
        this.tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfoWithPropertyGrid({
            text: 'Parameters',
            template: 'dxrd-preview-parameters',
            model: this.getViewModel(),
            propertyGridModel: this,
            keyboardHelper,
            localizationId: 'PreviewStringId.RibbonPreview_Parameters_Caption',
            imageClassName: 'parameters',
            imageTemplateName: 'dxrd-svg-tabs-parameters',
            visible: !this.isEmpty,
            engineType: 'native'
        });
        this._disposables.push({
            dispose: () => {
                clearTimeout(this._updateParametersTimeOut);
                this.prevParametersStateRequest?.reject();
            }
        });
        this.buttons = [{
                text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Reset', 'ASPxReportsStringId.ParametersPanel_Reset'),
                onClick: (e) => this.restore()
            }];
    }
    initialize(originalParametersInfo) {
        originalParametersInfo && this.parameterHelper.initialize(originalParametersInfo.knownEnums);
        super.initialize(originalParametersInfo);
        if (!originalParametersInfo)
            return;
        const layout = originalParametersInfo.parameterPanelLayout;
        if ((!layout || layout.layoutItems.length === 0) && originalParametersInfo.parameters) {
            this._parameters.forEach(x => this._add(x, {}));
        }
        this.isEmpty = this._visibleParameters.length === 0;
        const actualParametersInfo = [];
        this._parameters.forEach(x => {
            this.subscribeParameter(x);
            const model = new external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseEmptyModel();
            this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(model, 'value', {
                read: () => {
                    return x.serialize().Value;
                },
                write: (newVal) => {
                    this._setParameterValue(x, newVal);
                }
            }, [
                (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(x, '*')
            ]));
            this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(model, 'selectAll', {
                read: () => {
                    const value = x.value;
                    return value?.isSelectedAll;
                },
                write: (newVal) => {
                    const value = x.value;
                    if (value?.isSelectedAll) {
                        value.isSelectedAll = newVal;
                    }
                }
            }, [
                (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(x, [{
                        propertyName: 'value',
                        subscribables: ['isSelectedAll']
                    }
                ])
            ]));
            model['parameterDescriptor'] = x.getParameterDescriptor(),
                this.addDisposable(external_DevExpress_Analytics_Serializer_Native_namespaceObject.nativeMultiPlatformEngine.createComputedProperty(model, 'lookUpValues', {
                    read: () => x.lookUpValues,
                    write: (newVal) => x.lookUpValues = newVal
                }, [(0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(x, ['lookUpValues'])]));
            actualParametersInfo.push(model);
        });
        if (this.parameterHelper.callbacks && this.parameterHelper.callbacks.parametersInitialized) {
            this.parameterHelper.callbacks.parametersInitialized(this, actualParametersInfo, this.submit, originalParametersInfo.shouldRequestParameters);
        }
    }
    getPathsAfterPath(parameterPath) {
        let startIndex = 0;
        for (let index = 0; index < this._parameters.length; index++) {
            if (this._parameters[index].path === parameterPath) {
                startIndex = index + 1;
                break;
            }
        }
        const paths = this._parameters
            .filter((param, index) => {
            return this._shouldProcessParameter(param) &&
                (param.hasBindedExpressions || param.isFilteredLookUpSettings && index >= startIndex);
        })
            .map((x) => x.path);
        return paths || [];
    }
    serializeParameters() {
        return this._parameters.map(x => x.serialize());
    }
    updateParameters(changedParameter) {
        const requiredParameterPaths = this.getPathsAfterPath(changedParameter.path);
        if (!requiredParameterPaths || requiredParameterPaths.length === 0) {
            return;
        }
        const changedParameterIndex = this._parameters.indexOf(changedParameter);
        const updateTopChangedParameter = (index, changedParameter, requiredParameterPaths) => {
            this._topChangedParameter = { index: index, changedParameter: changedParameter, requiredParameterPaths: requiredParameterPaths };
        };
        if (this._topChangedParameter && changedParameterIndex !== -1) {
            if (this._topChangedParameter.index > changedParameterIndex)
                updateTopChangedParameter(changedParameterIndex, changedParameter, requiredParameterPaths);
            return;
        }
        updateTopChangedParameter(changedParameterIndex, changedParameter, requiredParameterPaths);
        this.prevParametersStateRequest.reject();
        clearTimeout(this._updateParametersTimeOut);
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._updateParametersTimeOut = setTimeout(() => {
            this.parametersLoading = true;
            const argsObject = {
                reportId: this._parametersHolder.reportId,
                reportUrl: this._parametersHolder.reportUrl,
                requiredParameterPaths: this._topChangedParameter.requiredParameterPaths,
                changedParameterPath: this._topChangedParameter.changedParameter.path,
                parameters: this.serializeParameters(),
                timeZoneOffset: 0 - new Date().getTimezoneOffset()
            };
            this._getParametersStateRequest(argsObject)
                .done((result) => deferred.resolve(result))
                .fail(() => deferred.resolve());
            deferred.done(this._getDoneGetParametersStateHandler(this._topChangedParameter.changedParameter));
            deferred.fail(this._getFailGetParametersStateHandler());
            this.prevParametersStateRequest = deferred;
            this._topChangedParameter = null;
        }, 20);
    }
}
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ParametersPanelModelBase.prototype, "_needToUpdateParameter", void 0);
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], ParametersPanelModelBase.prototype, "showButtons", void 0);
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], ParametersPanelModelBase.prototype, "_showHeader", void 0);
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], ParametersPanelModelBase.prototype, "buttons", void 0);
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ParametersPanelModelBase.prototype, "parametersLoading", void 0);
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], ParametersPanelModelBase.prototype, "_popupVisible", void 0);
parametersPanelModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(true)
], ParametersPanelModelBase.prototype, "_popupVisibleSwitch", void 0);

;// ./node_modules/devexpress-reporting/viewer/parameters/previewParametersModel.js


class PreviewParametersPanelModel extends ParametersPanelModelBase {
    constructor(reportPreview, parameterHelper, enableKeyboardSupport) {
        super(reportPreview, parameterHelper, enableKeyboardSupport);
        this.submit = () => {
            if (this.parametersLoading)
                return;
            this.parametersLoading = true;
            const promise = reportPreview.startBuild();
            promise && promise.then((val) => { this.parametersLoading = false; });
        };
        this.buttons.push({
            text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Submit', 'ASPxReportsStringId.ParametersPanel_Submit'),
            onClick: (params) => this._validateAndSubmit(params)
        });
    }
    initialize(originalParametersInfo) {
        super.initialize(originalParametersInfo);
        if (!originalParametersInfo || this._parametersHolder.documentId)
            return;
        if (!originalParametersInfo.shouldRequestParameters || this.isEmpty) {
            this.submit();
        }
        else {
            this._parametersHolder.removeEmptyPages();
            this.tabInfo.active = true;
            if (this.tabInfo.visible && this.tabInfo.collapsed !== undefined)
                this.tabInfo.collapsed = false;
            this._popupVisible = true;
            this._parametersHolder.pageLoading = false;
        }
    }
}

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_sizeUtils.js
function updatePreviewContentSizeMobile(mobilePreview, $root) {
    return () => {
        const height = $root.outerHeight();
        const width = $root.outerWidth();
        mobilePreview.previewWrapperSize = { width, height };
    };
}

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_editorTemplates.js
const _editorTemplates_editorTemplates = {
    rangeEditor: { header: 'dxrv-range-parameter-mobile' },
};

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobilePreviewParameterHelper.js


class MobilePreviewParameterHelper extends PreviewParameterHelper {
    getRangeEditor() {
        return _editorTemplates_editorTemplates.rangeEditor;
    }
}

;// ./node_modules/devexpress-reporting/viewer/mobile/utils/_mobileActionList.js
var _mobileActionList_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class MobileActionList extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    constructor(actions, reportPreview) {
        super();
        this.actions = actions;
        this.addDisposable(reportPreview.events.on('actionsVisibleChanged', (args) => {
            this.visible = args.newValue;
        }));
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('visible', this.visible)
            .generateProperty('actions', this.actions)
            .getViewModel();
    }
    updateViewModel() {
        const viewModel = this.getViewModel();
        viewModel.visible = this.visible;
    }
    onPropertyChanged() { }
    dispose() {
        this.actions.forEach(action => {
            if (action.content && action.content.dispose) {
                action.content.dispose();
                delete action.content.dispose;
            }
        });
        super.dispose();
    }
}
_mobileActionList_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], MobileActionList.prototype, "visible", void 0);
function getPreviewActionsMobile(options) {
    const getItems = () => {
        const allFormats = options.exportModel._getExportFormatItems();
        const availableFormats = options.exportTypes.filter(x => allFormats.indexOf(x) !== -1);
        if (availableFormats.length > 9) {
            availableFormats.splice(9, availableFormats.length - 9);
        }
        else if (availableFormats.length < 9) {
            const notUsedFormats = allFormats.filter(x => availableFormats.indexOf(x) === -1);
            availableFormats.push.apply(availableFormats, notUsedFormats.slice(0, 9 - availableFormats.length));
        }
        return availableFormats.map((item) => {
            item.action = () => { options.exportModel._exportDocumentByFormat(item.format); };
            return item;
        });
    };
    const disposables = [
        options.reportPreview.events.on('exportOptionsModelChanged', (args) => {
            exportToModel.items = getItems();
        }),
        options.designerModel.events.on('availableFormatsChanged', (args) => {
            exportToModel.items = getItems();
        })
    ];
    const exportToModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
        .generateProperty('visible', false)
        .generateProperty('items', getItems())
        .generateProperty('hide', () => exportToModel.visible = false)
        .getViewModel();
    disposables.push(exportToModel?._viewModelEvents?.on(external_DevExpress_Analytics_Serializer_Native_namespaceObject.ViewModelChangedEvent, args => {
        const eventArgs = { ...args, propertyName: `mobileActions.exportTo.${args.propertyName}` };
        options.designerModel.getViewModel()?._viewModelEvents.call(external_DevExpress_Analytics_Serializer_Native_namespaceObject.ViewModelChangedEvent, eventArgs);
    }));
    const searchAction = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
        clickAction: () => {
            options.searchModel.searchPanelVisible = true;
            options.searchModel.editorVisible = true;
            options.searchModel.focusEditor({ currentTarget: (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dxrdp-taptosearch')[0] });
            options.reportPreview.actionsVisible = false;
        },
        imageClassName: 'dxrd-image-search',
        imageTemplateName: 'dxrd-svg-preview-search'
    })
        .generateProperty('visible', SearchAvailable())
        .getViewModel();
    const subsciption = SearchAvailable.subscribe((newVal) => searchAction.visible = newVal);
    const actions = [
        searchAction,
        {
            clickAction: () => { exportToModel.visible = !exportToModel.visible; },
            imageClassName: 'dxrd-image-export-to',
            imageTemplateName: 'dxrd-svg-preview-export-export-to',
            visible: true,
            content: {
                name: 'dxrd-menu-export-content',
                data: exportToModel,
                dispose: () => {
                    exportToModel.items.forEach(item => {
                        delete item.action;
                    });
                    disposables.forEach(dispose => dispose());
                }
            }
        },
    ];
    const parametersAction = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
        clickAction: () => {
            options.parametersModel._popupVisible = !options.parametersModel._popupVisible;
            options.reportPreview.actionsVisible = false;
        },
        imageClassName: 'dxrd-image-parameters',
        imageTemplateName: 'dxrd-svg-tabs-parameters',
    })
        .generateProperty('visible', options.parametersModel._popupInfo.notEmpty)
        .getViewModel();
    actions.push(parametersAction);
    options.parametersModel.events.on('isEmptyChanged', (args) => {
        parametersAction.visible = options.parametersModel._popupInfo.notEmpty;
    });
    options.callbacks && options.callbacks.customizeActions && options.callbacks.customizeActions(actions);
    const actionList = new MobileActionList(actions, options.reportPreview);
    actionList.addDisposable(subsciption);
    return actionList;
}

;// ./node_modules/devexpress-reporting/viewer/internal/_previewModelBase.js
var _previewModelBase_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class PreviewDisposableModelBase extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    constructor(options, viewPortCss) {
        super();
        this.rootStyle = options.rootStyle;
        this.reportPreview = options.reportPreview;
        this.parametersModel = options.parametersModel;
        this.rtl = options.rtl;
        this.viewPortCss = viewPortCss;
        this._disposables.push(options.reportPreview);
        this._disposables.push(options.parametersModel);
    }
    onPropertyChanged(args) { }
    createViewModel() {
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('parts', this.parts)
            .generateProperty('rootStyle', this.rootStyle)
            .generateProperty('rtl', this.rtl)
            .getViewModel();
        (0,external_DevExpress_Analytics_Internal_namespaceObject.appendStaticContextToRootViewModel)(viewModel, {
            _static: {
                ...external_DevExpress_Analytics_Internal_namespaceObject.staticContext._static,
                formatSearchResult: formatSearchResult
            }
        }, this.viewPortCss);
        return viewModel;
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'parts')
            viewModel.parts = this.parts;
    }
    subscribeViewModelToDesignerParts() {
        const viewModel = this.getViewModel();
        const viewModelEventManager = viewModel;
        viewModel
            .parts
            .filter(part => part.viewModel)
            .forEach(part => {
            const disposeCallback = part.viewModel._viewModelEvents?.on(external_DevExpress_Analytics_Serializer_Native_namespaceObject.ViewModelChangedEvent, args => {
                const eventArgs = {
                    ...args,
                    propertyName: `parts.${part.id}.${args.propertyName}`
                };
                viewModelEventManager._viewModelEvents.call(external_DevExpress_Analytics_Serializer_Native_namespaceObject.ViewModelChangedEvent, eventArgs);
            });
            this._disposables.push({ dispose: disposeCallback });
        });
    }
    OpenReport(reportName) {
        return this.reportPreview.openReport(reportName);
    }
    GetParametersModel() {
        return this.parametersModel;
    }
    ResetParameters() {
        this.parametersModel && this.parametersModel.restore();
    }
    Close() {
        this.reportPreview.deactivate();
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
}
_previewModelBase_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => [])
], PreviewDisposableModelBase.prototype, "parts", void 0);

;// ./node_modules/devexpress-reporting/viewer/internal/_previewModel.js



class PreviewDisposableModel extends PreviewDisposableModelBase {
    constructor(options) {
        super(options, 'dx-report-viewer');
        this.exportModel = options.exportModel;
        this.searchModel = options.searchModel;
        this._disposables.push(options.exportModel);
        this._disposables.push(options.searchModel);
    }
    createViewModel() {
        const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('reportPreview', this.reportPreview.getViewModel())
            .generateProperty('exportHandler', this.reportPreview.exportHandler.getViewModel())
            .getViewModel();
        return viewModel;
    }
    _addDisposable(object) {
        this._disposables.push(object);
    }
    Print(pageIndex) {
        this.reportPreview.printDocument(pageIndex);
    }
    ExportTo(format, inlineResult) {
        if (!this.reportPreview.exportDisabled) {
            this.reportPreview.exportDocumentTo(format || 'pdf', inlineResult);
        }
    }
    GetCurrentPageIndex() {
        return this.reportPreview.pageIndex;
    }
    GoToPage(pageIndex) {
        this.reportPreview.goToPage(pageIndex);
    }
    StartBuild() {
        this.parametersModel && this.parametersModel.submit();
    }
    PerformCustomDocumentOperation(customData, hideMessageFromUser) {
        return this.reportPreview.customDocumentOperation(customData, hideMessageFromUser);
    }
}
class PreviewModel extends PreviewDisposableModel {
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('reportPreview', this.reportPreview.getViewModel())
            .generateProperty('accessibilityCompliant', this.accessibilityCompliant)
            .generateProperty('toolBar', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('actionLists', this.actionLists.getViewModel())
            .generateProperty('canSwitchToDesigner', this.reportPreview.canSwitchToDesigner)
            .generateProperty('keyboardHelper', new external_DevExpress_Analytics_Internal_namespaceObject.ToolbarKeyboardHelper(this.actionLists.toolbarItems))
            .getViewModel())
            .generateProperty('breadcrumb', this.breadcrumb.getViewModel())
            .generateProperty('tabPanel', this.tabPanel.getViewModel())
            .getViewModel();
    }
    constructor(options) {
        super(options);
        this.documentMapModel = options.documentMapModel;
        this.tabPanel = options.tabPanel;
        this.actionLists = options.actionLists;
        this.accessibilityCompliant = options.accessibilityCompliant;
        this.breadcrumb = options.breadcrumb;
        this._disposables.push(options.documentMapModel);
        this._disposables.push(options.tabPanel);
        this._disposables.push(options.actionLists);
    }
}

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobilePreviewModel.js
var _mobilePreviewModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


class MobilePreviewModel extends PreviewDisposableModel {
    deferredUpdateViewModel() { return false; }
    constructor(options) {
        super(options);
        this.gallery = options.gallery;
        this.availableFormats = options.availableFormats;
        this._disposables.push(options.gallery);
        this._disposables.push(options.paginator);
        this._disposables.push(options.searchModel);
        this.paginator = options.paginator;
        this.reportPreview.initializeSlideOptions(options.searchModel, options.gallery);
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('paginator', this.paginator.getViewModel())
            .generateProperty('searchModel', this.searchModel.getViewModel())
            .getViewModel();
    }
}
_mobilePreviewModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], MobilePreviewModel.prototype, "availableFormats", void 0);

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_parametersPopup.viewModel.js



function createParametersPopupBaseViewModel(base) {
    this._cancelButton = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({ className: 'dxrdp-parameters-cancel', text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), action: this._cancel, visible: true, id: 'dxrv-mobile-cancel' })
        .generateProperty('disabled', this.cancelDisabled)
        .getViewModel();
    this._cancelAction = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({ className: 'dxrdp-parameters-cancel dxrdp-image-parameters-cancel', action: this._cancel, visible: true })
        .generateProperty('disabled', this.cancelDisabled)
        .getViewModel();
    this._submitButton = { className: 'dxrdp-parameters-submit', text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Submit', 'ASPxReportsStringId.ParametersPanel_Submit'), action: this._submit, disabled: false, visible: true, id: 'dxrv-mobile-submit' };
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('className', this.className)
        .generateProperty('title', this.title)
        .generateProperty('contentTemplate', this.contentTemplate)
        .generateProperty('visible', this.visible)
        .generateProperty('showIcons', this.showIcons)
        .generateProperty('cancelDisabled', this.cancelDisabled)
        .generateProperty('cacheElementContent', (element) => this.cacheElementContent(element))
        .generateProperty('actionButtons', [
        { className: 'dxrdp-parameters-reset', text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Reset', 'ASPxReportsStringId.ParametersPanel_Reset'), action: this._reset, disabled: false, visible: !!this._formModel.reset, id: 'dxrv-mobile-reset' },
        this._cancelButton,
        this._submitButton
    ])
        .generateProperty('actionIcons', [
        { className: 'dxrdp-parameters-reset dxrdp-image-parameters-reset', action: this._reset, disabled: false, visible: !!this._formModel.reset },
        { className: 'dxrdp-parameters-cancel dxrdp-image-parameters-cancel', action: this._cancel, disabled: this.cancelDisabled, visible: true },
        { className: 'dxrdp-parameters-submit dxrdp-image-parameters-submit', action: this._submit, disabled: false, visible: true }
    ])
        .generateProperty('onHidden', (event) => {
        this.model._popupVisible = false;
    })
        .getViewModel();
}
function createParametersPopupViewModel(base) {
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('model', this.objectProperties)
        .getViewModel();
}
function createDateRangeParemeterPopupViewModel(base) {
    const defaultButtonSettings = {
        stylingMode: 'contained',
        focusStateEnabled: false,
        activeStateEnabled: false
    };
    const startButtonTextPlaceholder = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Start Date', 'AnalyticsCoreStringId.Mobile_DateRange_StartDate');
    const endButtonTextPlaceholder = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('End Date', 'AnalyticsCoreStringId.Mobile_DateRange_EndDate');
    const getButtonText = (val, placeholder) => val && this.getStringDate(val) || placeholder;
    this.startButton = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({ ...defaultButtonSettings })
        .generateProperty('text', getButtonText(this.model.startDate, startButtonTextPlaceholder))
        .generateProperty('focused', false)
        .generateProperty('onClick', () => {
        this.startButton.focused = true,
            this.endButton.focused = false;
    })
        .getViewModel();
    this.endButton = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({ ...defaultButtonSettings })
        .generateProperty('text', getButtonText(this.model.endDate, endButtonTextPlaceholder))
        .generateProperty('focused', true)
        .generateProperty('onClick', () => {
        this.startButton.focused = false,
            this.endButton.focused = true;
    })
        .getViewModel();
    this.addDisposable(this.model.events.on('startDateChanged', (ev) => {
        this.startButton.text = getButtonText(this.model.startDate, startButtonTextPlaceholder);
    }), this.model.events.on('endDateChanged', (ev) => {
        this.endButton.text = getButtonText(this.model.endDate, endButtonTextPlaceholder);
    }));
    if (this._submitButton)
        this._submitButton.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('OK', external_DevExpress_Analytics_Internal_namespaceObject.StringId.DataAccessBtnOK);
    return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(base)
        .generateProperty('startButton', this.startButton)
        .generateProperty('endButton', this.endButton)
        .generateProperty('textRangeValue', this.textRangeValue)
        .generateProperty('onTextChanged', (event) => {
        this.setRangeValue(event.value);
    })
        .generateProperty('selectPeriodPlaceholder', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select Period', 'AnalyticsCoreStringId.Mobile_DateRange_SelectPeriod'))
        .generateProperty('fromText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('From', 'AnalyticsCoreStringId.Mobile_DateRange_From'))
        .generateProperty('untilText', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Until', 'AnalyticsCoreStringId.Mobile_DateRange_Until'))
        .generateProperty('onHidden', (event) => {
        this.model._popupVisible = false;
    })
        .generateProperty('model', this.model)
        .getViewModel();
}

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_parametersPopup.js
var _parametersPopup_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class ParametersPopupModelBase extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    createViewModel() {
        return createParametersPopupBaseViewModel.call(this, super.createViewModel());
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        viewModel.visible = this.visible;
        viewModel.showIcons = this.showIcons;
        viewModel.cancelDisabled = this.cancelDisabled;
        this._cancelButton.disabled = this.cancelDisabled;
        this._cancelAction.disabled = this.cancelDisabled;
    }
    onPropertyChanged() { }
    constructor(_formModel) {
        super();
        this._formModel = _formModel;
        this._submit = (params) => {
            const result = params.validationGroup && params.validationGroup.validate && params.validationGroup.validate();
            if (!result || result.isValid) {
                this._formModel.submit && this._formModel.submit();
                this.visible = false;
            }
        };
        this._reset = () => {
            this._formModel.reset && this._formModel.reset();
        };
        this._cancel = () => {
            this._formModel.cancel && this._formModel.cancel();
            this.visible = false;
        };
        this.className = '';
        this.visible = _formModel.visible;
    }
    cacheElementContent(element) {
        this._parametersButtonContaner = (0,external_DevExpress_Analytics_Internal_namespaceObject.$unwrap)(element);
        setTimeout(() => this.initVisibilityIcons());
    }
    dispose() {
        super.dispose();
        this._parametersButtonContaner = null;
    }
    initVisibilityIcons() {
        if (!this._parametersButtonContaner)
            return;
        let result = this.showIcons;
        const nodeTop = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(this._parametersButtonContaner).offset().top;
        const actions = Array.from(this._parametersButtonContaner.querySelectorAll('.dxrdp-parameter-action'));
        actions.forEach(element => {
            result = nodeTop !== element.getBoundingClientRect().top;
        });
        this.showIcons = result;
    }
}
_parametersPopup_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ParametersPopupModelBase.prototype, "visible", void 0);
_parametersPopup_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ParametersPopupModelBase.prototype, "cancelDisabled", void 0);
_parametersPopup_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ParametersPopupModelBase.prototype, "showIcons", void 0);
class ParametersPopupModel extends ParametersPopupModelBase {
    constructor(model, _reportPreview) {
        super({ visible: model._popupInfo.visible, submit: model.submit, reset: model.restore });
        this.model = model;
        this._reportPreview = _reportPreview;
        const updateCancelDisabled = () => this.cancelDisabled = !this._reportPreview.documentId || this._reportPreview.pages.length === 0;
        updateCancelDisabled();
        this.addDisposable(this._reportPreview.events.on('pagesChanged', (args) => {
            updateCancelDisabled();
        }), this._reportPreview.events.on('documentIdChanged', (args) => {
            updateCancelDisabled();
        }));
        this.addDisposable(model.events.on('_popupVisibleChanged', (args) => {
            this.visible = model._popupInfo.visible;
        }), model.events.on('_getInfoChanged', (args) => {
            this.objectProperties.updateEditorsInfo(model, model.getInfo());
        }));
        this.addDisposable(this.objectProperties = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(model, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'native'));
        this.contentTemplate = 'dx-propertieseditor';
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Parameters', 'DevExpress.XtraReports.UI.XtraReport.Parameters');
    }
    createViewModel() {
        return createParametersPopupViewModel.call(this, super.createViewModel());
    }
}
class DateRangeParemeterPopupModel extends ParametersPopupModelBase {
    constructor(model) {
        super({
            visible: model._popupVisible, cancel: () => {
                this.model.startDate = this._oldStart;
                this.model.endDate = this._oldEnd;
                this.model.applyValue();
            }
        });
        this.model = model;
        this.getStringDate = (value) => (0,external_DevExpress_Analytics_Internal_namespaceObject.formatDate)(value);
        this.model.calendarHeight = undefined;
        this.textRangeValue = this.model._displayText;
        this._oldStart = this.model.startDate;
        this._oldEnd = this.model.endDate;
        this.addDisposable(this.model.events.on('_displayTextChanged', (ev) => {
            this.textRangeValue = this.model._displayText;
        }), this.model.events.on('_popupVisibleChanged', (ev) => {
            this.visible = this.model._popupVisible;
        }));
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Date Range Parameter', 'AnalyticsCoreStringId.Mobile_DateRange_Title');
        this.contentTemplate = 'dxrv-preview-date-range-mobile';
        this.className = 'dxrv-preview-date-range-mobile-popup';
    }
    createViewModel() {
        return createDateRangeParemeterPopupViewModel.call(this, super.createViewModel());
    }
    setRangeValue(value) {
        this.model.applyDate(value.range(), true);
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const viewModel = this.getViewModel();
        viewModel.textRangeValue = this.textRangeValue;
    }
}
_parametersPopup_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], DateRangeParemeterPopupModel.prototype, "textRangeValue", void 0);

;// ./node_modules/devexpress-reporting/viewer/mobile/constants.js
const MobilePreviewElements = {
    Surface: 'dxrdp-surface-mobile',
    Search: 'dxrdp-search-mobile',
    Pages: 'dxrdp-pages-mobile',
    MobileActions: 'dxrdp-surface-mobile-bottom',
    Parameters: 'dxrd-menu-parameters-content'
};

;// ./node_modules/devexpress-reporting/viewer/internal/_sizeUtils.js



function stringToPosition(position) {
    const lowerCased = (position || '').toLowerCase();
    if (!lowerCased || lowerCased === 'default') {
        return null;
    }
    const top = lowerCased.indexOf('top') !== -1;
    const right = lowerCased.indexOf('right') !== -1;
    return { top: top, bottom: !top, right: right, left: !right };
}
function getDockedElementCallback($targetElement, $viewer, $window, selector, position = null) {
    if (!selector)
        return void (0);
    return (viewer) => {
        if ($viewer.length === 0)
            $viewer = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(viewer);
        if ($targetElement.length === 0)
            $targetElement = $viewer.find(selector);
        if (!$window)
            $window = window;
        if (!position || position.bottom) {
            const elementTop = parseInt($targetElement.css('bottom')) + $targetElement.height();
            const viewerTop = $viewer.offset().top;
            const viewerHeight = $viewer.height();
            const windowContentHeight = $window.innerHeight + $window.scrollY;
            let result = viewerTop + viewerHeight - windowContentHeight;
            if (result < viewerHeight - elementTop) {
                result = Math.max(0, result);
                const transform = 'translateY(-' + result * (0,external_DevExpress_Analytics_Internal_namespaceObject.accessibilityFontSizeZoomFactor)() + 'px)';
                $targetElement.css({
                    '-webkit-transform': transform,
                    'transform': transform
                });
            }
        }
        else {
            const previewWrapper = $viewer.find('.dxrd-preview-wrapper')[0];
            const clientRect = previewWrapper && previewWrapper.getBoundingClientRect();
            if (!clientRect || clientRect.top < 0 && (clientRect.height + clientRect.top < $targetElement.outerHeight()))
                return;
            const translateY = clientRect.top < 0 ? -clientRect.top : 0;
            const transform = 'translateY(' + translateY * (0,external_DevExpress_Analytics_Internal_namespaceObject.accessibilityFontSizeZoomFactor)() + 'px)';
            $targetElement.css({
                '-webkit-transform': transform,
                'transform': transform
            });
        }
    };
}
function _getRightAreaWidth($container) {
    const rightAreaWidth = ($container.find('.dxrd-right-panel:visible').outerWidth() || 0) + ($container.find('.dxrd-right-tabs:visible').outerWidth() || 0);
    return isNaN(rightAreaWidth) ? 0 : rightAreaWidth;
}
function updatePreviewContentSize(reportPreview, root, rtl) {
    let _cashedSizeFactorClass = 'lg';
    return (tabPanelPosition) => {
        const $_root = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(root);
        const $root = $_root.find('.dxrd-preview');
        if (!$root.length)
            return;
        const $viewPort = $_root.children('.dx-designer-viewport');
        const sizeFactor = (0,external_DevExpress_Analytics_Internal_namespaceObject.getSizeFactor)($_root.outerWidth());
        if (!!$viewPort.length && _cashedSizeFactorClass !== sizeFactor) {
            $viewPort.removeClass('dx-designer-viewport-' + _cashedSizeFactorClass);
            $viewPort.addClass('dx-designer-viewport-' + sizeFactor);
        }
        _cashedSizeFactorClass = sizeFactor;
        const rightAreaWidth = _getRightAreaWidth($root);
        const surfaceWidth = (($root.width() - rightAreaWidth - 10) * (0,external_DevExpress_Analytics_Internal_namespaceObject.accessibilityFontSizeZoomFactor)());
        const breadcrumbs = $root.find('.breadcrumbs-wrapper');
        const previewWrapper = $root.find('.dxrd-preview-wrapper');
        let topAreaHeight = 84;
        if (breadcrumbs.element) {
            const padding = 18;
            breadcrumbs.css({ 'width': (surfaceWidth - padding) + 'px' });
            topAreaHeight += (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(breadcrumbs.element).height() - padding;
        }
        const cssStyleData = (tabPanelPosition === external_DevExpress_Analytics_Utils_namespaceObject.TabPanel.Position.Left) ? { 'right': '', 'left': rightAreaWidth + 'px', top: topAreaHeight + 'px' } : { 'right': rightAreaWidth + 'px', 'left': '', top: topAreaHeight + 'px' };
        previewWrapper.css(cssStyleData);
        reportPreview.previewSize = surfaceWidth;
    };
}
function updatePreviewZoomWithAutoFit(width, height, element, autoFitBy = ZoomAutoBy.WholePage) {
    const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
    const $previewWrapper = $element.closest('.dxrd-preview-wrapper');
    const $preview = $element.closest('.dxrd-preview');
    if ($previewWrapper.length === 0 || $preview.length === 0 || $preview.width() === 0) {
        return 1;
    }
    const surfaceWidth = $preview.width() - _getRightAreaWidth($preview) - 10;
    const topAreaHeight = parseFloat($previewWrapper.css('top').split('px')[0]);
    const designerHeight = $preview.outerHeight();
    const surfaceHeight = designerHeight - topAreaHeight;
    if (autoFitBy === ZoomAutoBy.PageWidth) {
        return (surfaceWidth - 12) / width;
    }
    const heightZoom = surfaceHeight / (height + 6);
    const widthZoom = surfaceWidth / width;
    return Math.min(heightZoom, widthZoom);
}

;// ./node_modules/devexpress-reporting/viewer/internal/_progressBarUtils.js


function getUpdateProgressBarCallback(progressBarSettings, designerModel, reportPreview, rootElement, $window = window) {
    const keepProgressBarVisible = !progressBarSettings || progressBarSettings.keepOnVisibleArea !== false;
    const position = stringToPosition(progressBarSettings && progressBarSettings.position);
    reportPreview.progressBar.setPosition(position);
    if (!keepProgressBarVisible)
        return void (0);
    const $root = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(rootElement);
    const $progress = $root.find('.dxrd-preview-progress');
    const updateProgressBarPosition = getDockedElementCallback($progress, $root, $window, '.dxrd-preview-progress', position);
    const progressBar = reportPreview.progressBar;
    const unsubscribe = progressBar && progressBar.events.on('inProgressChanged', (args) => {
        setTimeout(() => {
            progressBar.inProgress && updateProgressBarPosition(rootElement);
        });
    });
    designerModel.addDisposable(unsubscribe);
    const wrappedUpdateProgressPosition = () => {
        if (reportPreview.progressBar && reportPreview.progressBar.inProgress)
            updateProgressBarPosition(rootElement);
    };
    window.addEventListener('scroll', wrappedUpdateProgressPosition);
    designerModel.addDisposable(() => window.removeEventListener('scroll', wrappedUpdateProgressPosition));
    return wrappedUpdateProgressPosition;
}

;// ./node_modules/devexpress-reporting/viewer/mobile/utils/_mobileInitializer.js


















function createMobilePreview(bindingSettings) {
    const callbacks = bindingSettings.callbacks;
    const bindingModel = bindingSettings.model;
    const bindingElement = bindingSettings.element;
    const previewWrapper = new PreviewRequestWrapper(null, callbacks), breadcrumb = new BreadcrumbModel(), reportPreview = new MobileReportPreview(bindingModel.handlerUri, previewWrapper, undefined, callbacks, undefined, bindingModel.mobileModeSettings, breadcrumb, bindingModel.exportSettings);
    const $root = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(bindingElement);
    const updatePreviewContentSize_ = updatePreviewContentSizeMobile(reportPreview, $root);
    updatePreviewContentSize_();
    const gallery = new GalleryModel(reportPreview);
    const searchModel = new MobileSearchViewModel(reportPreview, gallery);
    const parametersModel = new PreviewParametersPanelModel(reportPreview, new MobilePreviewParameterHelper(bindingModel.parametersInfo && bindingModel.parametersInfo.knownEnums, callbacks));
    const exportModel = new ExportOptionsModel(reportPreview);
    reportPreview.allowURLsWithJSContent = bindingModel.allowURLsWithJSContent;
    reportPreview.previewParametersViewModel = parametersModel;
    previewWrapper.initialize(reportPreview, parametersModel, searchModel);
    const exportTypes = ([
        ExportFormatID.PDF, ExportFormatID.XLS, ExportFormatID.XLSX,
        ExportFormatID.RTF, ExportFormatID.DOCX, ExportFormatID.HTML,
        ExportFormatID.Text, ExportFormatID.CSV, ExportFormatID.Image
    ]);
    const paginator = new MobilePaginator(reportPreview, gallery);
    const designerModelOptions = {
        rootStyle: 'dxrd-preview dxrdp-mobile dxd-back-primary',
        reportPreview: reportPreview,
        parametersModel: parametersModel,
        exportModel: exportModel,
        searchModel: searchModel,
        rtl: reportPreview.rtlViewer,
        gallery: gallery,
        paginator: paginator,
        availableFormats: exportTypes
    };
    const designerModel = new MobilePreviewModel(designerModelOptions);
    const mobileActions = getPreviewActionsMobile({ designerModel, reportPreview, exportModel, parametersModel, searchModel, exportTypes, callbacks: callbacks });
    const parametersPopup = new ParametersPopupModel(parametersModel, reportPreview);
    const designerViewModel = designerModel.getViewModel();
    designerModel.parts = [
        { id: MobilePreviewElements.Surface, templateName: MobilePreviewElements.Surface, model: designerViewModel.reportPreview },
        { id: MobilePreviewElements.Search, templateName: MobilePreviewElements.Search, model: designerViewModel.searchModel },
        { id: MobilePreviewElements.Pages, templateName: MobilePreviewElements.Pages, model: designerViewModel.paginator },
        { id: MobilePreviewElements.MobileActions, templateName: MobilePreviewElements.MobileActions, model: mobileActions, viewModel: mobileActions.getViewModel() },
        { id: MobilePreviewElements.Parameters, templateName: MobilePreviewElements.Parameters, model: parametersPopup, viewModel: parametersPopup.getViewModel() },
        { id: PreviewElements.ExportTool, templateName: PreviewElements.ExportTool, model: designerViewModel.exportHandler }
    ];
    designerModel.subscribeViewModelToDesignerParts();
    callbacks && callbacks.customizeParts && callbacks.customizeParts(designerModel.parts);
    const $actions = $root.find('.dxrdp-mobile-actions');
    const updateProgressPosition = getUpdateProgressBarCallback(bindingModel.progressBarSettings, designerModel, reportPreview, bindingElement, window);
    const updateMobilePreviewActionsPosition_ = getDockedElementCallback($actions, $root, window, '.dxrdp-mobile-actions');
    const updateSizesCallback = () => {
        updatePreviewContentSize_ && updatePreviewContentSize_();
        updateProgressPosition && updateProgressPosition();
    };
    designerModel.updateSurfaceSize = updateSizesCallback;
    designerModel.resizeCallback = () => {
        if (parametersModel._popupInfo.visible) {
            parametersPopup.initVisibilityIcons();
        }
        updateSizesCallback();
        if (reportPreview.actionsVisible)
            updateMobilePreviewActionsPosition_(bindingElement);
    };
    window.addEventListener('resize', designerModel.resizeCallback);
    const onScroll = () => {
        if (reportPreview.actionsVisible)
            updateMobilePreviewActionsPosition_(bindingElement);
    };
    window.addEventListener('scroll', onScroll);
    designerModel.addDisposable(() => {
        window.removeEventListener('resize', designerModel.resizeCallback);
        window.removeEventListener('scroll', onScroll);
        mobileActions.dispose();
    });
    designerModel.addDisposable(reportPreview.events.on('actionsVisibleChanged', (args) => {
        if (args.newValue)
            updateMobilePreviewActionsPosition_(bindingElement);
    }));
    (0,external_DevExpress_Analytics_Internal_namespaceObject.appendStaticContextToRootViewModel)(designerModel, external_DevExpress_Analytics_Internal_namespaceObject.staticContext);
    return designerModel;
}

;// ./node_modules/devexpress-reporting/viewer/parameters/parametersPanelStandalone.js


class ParametersPanelStandalone extends ParametersPanelModelBase {
    constructor() {
        super(...arguments);
        this.showButtons = false;
        this._showHeader = false;
    }
    getDesignerParts() {
        return [
            { id: PreviewElements.ParametersPanel, templateName: PreviewElements.ParametersPanel, model: this.tabInfo, viewModel: this.tabInfo.getViewModel() }
        ];
    }
    initialize(originalParametersInfo) {
        super.initialize(originalParametersInfo);
        if (originalParametersInfo) {
            this.tabInfo.visible = true;
            this.tabInfo.active = true;
        }
    }
}

;// ./node_modules/devexpress-reporting/viewer/internal/_initializer.js























function createStandaloneParametersPanel(bindingSettings) {
    const bindingModel = bindingSettings.model;
    const previewWrapper = new PreviewRequestWrapper(null, bindingSettings.callbacks);
    const reportHolder = new ReportHolder(bindingModel.handlerUri, previewWrapper, bindingSettings.element);
    const requestHelper = new PreviewParameterHelper(bindingModel.parametersInfo?.knownEnums, bindingSettings.callbacks);
    const parametersPanel = new ParametersPanelStandalone(reportHolder, requestHelper, bindingModel.accessibilityCompliant);
    previewWrapper.initialize(reportHolder, parametersPanel);
    const designerModel = new PreviewDisposableModelBase({
        rootStyle: 'dxrd-preview dxd-back-primary2',
        reportPreview: reportHolder,
        parametersModel: parametersPanel,
        rtl: bindingModel.rtl
    }, 'dxrv-parameters-panel-standalone');
    designerModel.parts = parametersPanel.getDesignerParts();
    return designerModel;
}
function createDesktopPreview(bindingSettings) {
    processZoomFactor(bindingSettings.model.accessibilityCompliant);
    const enableKeyboardSupport = !!bindingSettings.model.accessibilityCompliant;
    const callbacks = bindingSettings.callbacks;
    const bindingModel = bindingSettings.model;
    const bindingElement = bindingSettings.element;
    const previewWrapper = new PreviewRequestWrapper(null, callbacks), breadcrumb = new BreadcrumbModel(), reportPreview = new ReportPreview(bindingModel.handlerUri, previewWrapper, undefined, callbacks, bindingModel.rtl, enableKeyboardSupport, bindingModel.exportSettings, bindingSettings.element, breadcrumb), searchModel = new SearchViewModel(reportPreview, bindingModel?.searchSettings, enableKeyboardSupport);
    const documentMapModel = new DocumentMapModel(reportPreview);
    const parametersModel = new PreviewParametersPanelModel(reportPreview, new PreviewParameterHelper(bindingModel.parametersInfo && bindingModel.parametersInfo.knownEnums, bindingSettings.callbacks), enableKeyboardSupport);
    const exportModel = new ExportOptionsModel(reportPreview, enableKeyboardSupport);
    reportPreview.canSwitchToDesigner = !bindingModel.previewVisible;
    reportPreview.previewParametersViewModel = parametersModel;
    reportPreview.allowURLsWithJSContent = bindingModel.allowURLsWithJSContent;
    previewWrapper.initialize(reportPreview, parametersModel, searchModel);
    const tabPanel = new external_DevExpress_Analytics_Utils_namespaceObject.TabPanel({
        tabs: [
            parametersModel.tabInfo,
            exportModel.tabInfo,
            searchModel.tabInfo,
            documentMapModel.tabInfo
        ],
        width: 396,
        autoSelectTab: true,
        rtl: bindingModel.rtl
    });
    tabPanel.collapsed = true;
    const fullscreenEnabled = createFullscreenComputed(bindingElement, reportPreview);
    reportPreview.previewVisible = bindingModel.previewVisible;
    reportPreview.tabPanel = tabPanel;
    const previewActions = new PreviewActions(reportPreview);
    const designPreviewActions = new PreviewDesignerActions(reportPreview, fullscreenEnabled);
    const globalActionProviders = [previewActions, exportModel, searchModel, designPreviewActions];
    const actionLists = new ActionLists(reportPreview, globalActionProviders, callbacks && callbacks.customizeActions, () => reportPreview.previewVisible);
    const designerModelOptions = {
        rootStyle: 'dxrd-preview dxd-back-primary-invariant' + (reportPreview.canSwitchToDesigner ? ' dxrd-designer-preview' : ''),
        reportPreview: reportPreview,
        parametersModel: parametersModel,
        exportModel: exportModel,
        searchModel: searchModel,
        documentMapModel: documentMapModel,
        tabPanel: tabPanel,
        actionLists: actionLists,
        rtl: reportPreview.rtlViewer,
        accessibilityCompliant: bindingModel.accessibilityCompliant,
        breadcrumb: breadcrumb
    };
    const designerModel = new PreviewModel(designerModelOptions);
    designerModel.addDisposable(previewActions);
    designerModel.addDisposable(designPreviewActions);
    const designerViewModel = designerModel.getViewModel();
    designerModel.parts = [
        { id: PreviewElements.Toolbar, templateName: PreviewElements.Toolbar, model: designerViewModel.toolBar, viewModel: designerViewModel.toolBar },
        { id: PreviewElements.Breadcrumb, templateName: PreviewElements.Breadcrumb, model: designerViewModel.breadcrumb },
        { id: PreviewElements.Surface, templateName: PreviewElements.Surface, model: designerModel.reportPreview, viewModel: designerViewModel.reportPreview },
        { id: PreviewElements.RightPanel, templateName: PreviewElements.RightPanel, model: designerModel, viewModel: designerViewModel.tabPanel },
        { id: PreviewElements.ExportTool, templateName: PreviewElements.ExportTool, model: designerModel.reportPreview.exportHandler, viewModel: designerViewModel.exportHandler }
    ];
    callbacks && callbacks.customizeParts && callbacks.customizeParts(designerModel.parts);
    const timers = [];
    let updateProgressPosition = getUpdateProgressBarCallback(bindingModel.progressBarSettings, designerModel, reportPreview, bindingElement, window);
    let updatePreviewContentSize_ = updatePreviewContentSize(reportPreview, bindingElement, bindingModel.rtl);
    if (bindingModel.tabPanelSettings) {
        if (bindingModel.tabPanelSettings.width)
            tabPanel.width = parseInt(bindingModel.tabPanelSettings.width);
        if (bindingModel.tabPanelSettings.position)
            tabPanel.position = bindingModel.tabPanelSettings.position;
    }
    const updateSizesCallback = () => {
        updatePreviewContentSize_ && updatePreviewContentSize_(tabPanel.position);
        updateProgressPosition && updateProgressPosition();
    };
    breadcrumb.updatePreviewSize = updateSizesCallback;
    designerModel.updateSurfaceSize = updateSizesCallback;
    designerModel.resizeCallback = updateSizesCallback;
    window.addEventListener('resize', designerModel.resizeCallback);
    designerModel.addDisposable(fullscreenEnabled.subscribe(designerModel.resizeCallback));
    designerModel.addDisposable(tabPanel.events.on('widthChanged', (args) => {
        timers.push(setTimeout(() => updatePreviewContentSize_(tabPanel.position), 1));
    }), tabPanel.events.on('isEmptyChanged', (args) => {
        timers.push(setTimeout(() => updatePreviewContentSize_(tabPanel.position), 1));
    }), tabPanel.events.on('positionChanged', (args) => {
        updatePreviewContentSize_(tabPanel.position);
    }));
    updateSizesCallback();
    designerModel.addDisposable({
        dispose: () => {
            window.removeEventListener('resize', designerModel.resizeCallback);
            designerModel.updateSurfaceSize = null;
            designerModel.resizeCallback = null;
            timers.forEach(x => clearTimeout(x));
            updatePreviewContentSize_ = null;
            updateProgressPosition = null;
        }
    });
    return designerModel;
}
function _createPreview(bindingSettings) {
    const bindingModel = bindingSettings.model;
    bindingModel.previewVisible = bindingModel.previewVisible !== undefined ? bindingModel.previewVisible : true;
    bindingModel.allowURLsWithJSContent = bindingModel.allowURLsWithJSContent !== undefined ? bindingModel.allowURLsWithJSContent : false;
    bindingModel.accessibilityCompliant = bindingModel.accessibilityCompliant !== undefined ? bindingModel.accessibilityCompliant : false;
    bindingSettings.applyBindings = bindingSettings.applyBindings !== undefined ? bindingSettings.applyBindings : true;
    const disposableCallback = bindingSettings.callbacks && bindingSettings.callbacks.onServerError && (0,external_DevExpress_Analytics_Internal_namespaceObject.processErrorEvent)(bindingSettings.callbacks.onServerError);
    external_DevExpress_config_default()({ rtlEnabled: !!bindingModel.rtl });
    if (bindingModel._licenseOptions && !bindingModel._licenseOptions.isLicensed) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject._addLicenseTrigger)(bindingModel._licenseOptions);
    }
    if (bindingModel.remoteSettings && (bindingModel.remoteSettings.authToken || bindingModel.remoteSettings.serverUri)) {
        AsyncExportApproach(true);
        bindingModel.handlerUri = external_DevExpress_Analytics_Internal_namespaceObject.RequestHelper.generateUri(bindingModel.remoteSettings.serverUri, ReportServerInvokeUri);
        SearchAvailable(false);
        EditablePreviewEnabled(false);
        ReportServerDownloadUri(external_DevExpress_Analytics_Internal_namespaceObject.RequestHelper.generateUri(bindingModel.remoteSettings.serverUri, ReportServerExportUri));
        if (bindingModel.remoteSettings.authToken) {
            const headers = {
                'Authorization': `Bearer ${bindingModel.remoteSettings.authToken}`
            };
            const requestManagerSetup = {
                ajaxSetup: external_DevExpress_Analytics_Utils_namespaceObject.ajaxSetup,
                fetchSetup: external_DevExpress_Analytics_Utils_namespaceObject.fetchSetup
            };
            const requestManagerInstance = external_DevExpress_Analytics_Utils_namespaceObject.requestManager.getInstance(requestManagerSetup);
            if ((0,external_DevExpress_Analytics_Utils_namespaceObject._isFetchConfigured)()) {
                external_DevExpress_Analytics_Utils_namespaceObject.fetchSetup.fetchSettings.headers = { ...external_DevExpress_Analytics_Utils_namespaceObject.fetchSetup.fetchSettings.headers, ...headers };
            }
            else {
                external_DevExpress_Analytics_Utils_namespaceObject.ajaxSetup.ajaxSettings.headers = { ...external_DevExpress_Analytics_Utils_namespaceObject.ajaxSetup.ajaxSettings.headers, ...headers };
            }
        }
    }
    let designerModel;
    if (bindingModel.isMobile) {
        designerModel = createMobilePreview(bindingSettings);
    }
    else {
        designerModel = createDesktopPreview(bindingSettings);
    }
    if (bindingSettings.element && bindingSettings.applyBindings && !designerModel.reportPreview.canSwitchToDesigner) {
        bindingSettings.callbacks?.beforeRender && bindingSettings.callbacks.beforeRender(designerModel);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(bindingSettings.element).empty();
        external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.applyBindings(designerModel.getViewModel(), bindingSettings.element);
    }
    if (disposableCallback) {
        designerModel.addDisposable(disposableCallback);
    }
    return designerModel;
}
function createPreview(bindingSettings) {
    if (bindingSettings.model && bindingSettings.model.localization) {
        (0,external_DevExpress_Analytics_Utils_namespaceObject.addCultureInfo)({
            messages: bindingSettings.model.localization
        });
    }
    const localizationCallbacks = [];
    bindingSettings.callbacks && bindingSettings.callbacks.customizeLocalization && bindingSettings.callbacks.customizeLocalization(localizationCallbacks);
    return (0,external_DevExpress_Analytics_Internal_namespaceObject.resolveFromPromises)(localizationCallbacks, () => {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.troubleshootingPageWrapper)(() => {
            return _createPreview(bindingSettings);
        }, bindingSettings.model.developmentMode, bindingSettings.element);
    });
}
function createPreviewModel(viewerModel, element, callbacks, applyBindings) {
    (0,external_DevExpress_Analytics_Internal_namespaceObject.initGlobalize)(viewerModel);
    return createPreview({ model: viewerModel, element: element, callbacks: callbacks, applyBindings: applyBindings }).done(() => {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, cultureInfo, viewerModel.cultureInfoList);
    });
}
function initPreviewModel(previewModel, viewerModel) {
    if (viewerModel.reportId || viewerModel.documentId) {
        previewModel.reportPreview.initialize(Promise.resolve(viewerModel));
    }
    else {
        const unwrappedUrl = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(viewerModel.reportUrl);
        if (unwrappedUrl) {
            previewModel.OpenReport(unwrappedUrl);
        }
    }
}

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportViewerBindingBase.js





class JSReportViewerBindingBase extends external_DevExpress_Analytics_Internal_namespaceObject.JSDesignerBindingCommon {
    dispose() {
        if (this._closeReportOnDisposing && this.sender && this.sender.Close)
            this.sender.Close();
        (this._deferreds || []).forEach((deferred) => {
            deferred.reject();
        });
        super.dispose();
    }
    _initializeCallbacks() {
        if (this._options.callbacks) {
            const previewEvents = EventGenerator.generatePreviewEvents((eventName, args) => {
                this._fireEvent(eventName, args);
            });
            this._checkCallbackName(previewEvents);
            const availablePreviewEvents = this._generateCallbackDictionary(previewEvents);
            return availablePreviewEvents;
        }
    }
    _applyBindings(model, _$element, shouldInitPreviewModel) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.troubleshootingPageWrapper)(() => {
            if (shouldInitPreviewModel) {
                this._callbacks && this._callbacks.beforeRender && this._callbacks.beforeRender(model);
                initPreviewModel(model, this._options);
            }
            this._disposables.push(model);
            if (this._shouldApplyBindings) {
                _$element.empty();
                _$element.append(this._templateHtml);
                const child = _$element[0].children[0];
                if (!child)
                    return;
                external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.cleanNode(child);
                external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.applyBindings(model.getViewModel(), child);
            }
            this._fireEvent('Init');
        }, this._showTroubleshootingPageWrapper(), _$element);
    }
    constructor(_options, customEventRaiser, _shouldApplyBindings = true) {
        super(_options, customEventRaiser);
        this._shouldApplyBindings = _shouldApplyBindings;
        this._deferreds = [];
        _options.viewerModel = (0,external_DevExpress_Analytics_Internal_namespaceObject._wrapModelInObservable)(_options.viewerModel);
        this.sender = this._createSender(_options.viewerModel);
        this._closeReportOnDisposing = !_options.keepReportOnComponentDisposal;
        _options.callbacks && _options.callbacks._eventSenderCreated && _options.callbacks._eventSenderCreated(this.sender);
        this._callbacks = this._initializeCallbacks();
        this._callbacks && this._callbacks.onInitializing && this._callbacks.onInitializing();
    }
    _createModel(element) {
        return createPreviewModel(this._options, element, this._callbacks, false);
    }
    _showTroubleshootingPageWrapper() {
        return this.developmentMode;
    }
    applyBindings(element) {
        const _$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
        _$element.addClass('dx-designer');
        if (this._options.reportPreview && this._options.parts) {
            this._applyBindings(this._options, _$element);
            return;
        }
        const requestOptions = this._options.requestOptions;
        const applyModel = () => {
            if (!('isDisposing' in this && !this.isDisposing)) {
                return;
            }
            if (requestOptions && requestOptions.invokeAction) {
                this._options.handlerUri = this._getServerActionUrl(requestOptions.host, requestOptions.invokeAction);
            }
            this._deferreds.push(this._createModel(element)
                .done((previewModel) => {
                this.sender.previewModel = previewModel;
                if (this._options.reportUrl) {
                    if (external_DevExpress_Analytics_Internal_namespaceObject.koUtils.isSubscribable(this._options.reportUrl)) {
                        this._disposables.push(this._options.reportUrl.subscribe((newVal) => {
                            this.sender.OpenReport(newVal);
                        }));
                    }
                }
                if (this._shouldApplyBindings)
                    this._createDisposeFunction(element);
                this._applyBindings(this.sender.previewModel, _$element, true);
            }));
        };
        if (requestOptions) {
            this._getLocalizationRequest().done((localization) => {
                localization && (0,external_DevExpress_Analytics_Utils_namespaceObject.addCultureInfo)(localization);
            }).always(() => {
                applyModel();
            });
        }
        else {
            applyModel();
        }
    }
}

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportViewerBinding.js



class JSReportViewerBinding extends JSReportViewerBindingBase {
    _createModel(element) {
        return createPreviewModel(this._options, element, this._callbacks, false);
    }
    _createSender(viewModel) {
        return new JSReportViewer(viewModel);
    }
}

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportViewerBinding.binding.js










const dxReportViewerBindingName = 'dxReportViewer';
class DxReportViewer extends external_DevExpress_Analytics_Internal_namespaceObject.DxAnalyticsComponentCommon {
    constructor(_element, _options) {
        super(_element, _options);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.useKoIntegration)();
    }
    getBindingName() {
        return dxReportViewerBindingName;
    }
}
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.registerBaseBinding)(dxReportViewerBindingName, '$data');
external_ko_namespaceObject.bindingHandlers[dxReportViewerBindingName] = {
    init: function (element, valueAccessor) {
        new JSReportViewerBinding(external_ko_namespaceObject.unwrap(valueAccessor()) || {}).applyBindings(element);
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportParametersPanel.js

class JSReportParametersPanel extends JSReportViewerBase {
    SerializeParametersState() {
        const parametersModelState = this.GetParametersModel()?.serializeParameters();
        return JSON.stringify(parametersModelState);
    }
}

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportParametersPanelBinding.js




class JSReportParametersPanelBinding extends JSReportViewerBindingBase {
    _createModel(element) {
        const model = createStandaloneParametersPanel({
            model: this._options,
            callbacks: this._callbacks,
            element
        });
        return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(model);
    }
    _createSender(viewModel) {
        return new JSReportParametersPanel(viewModel);
    }
    _showTroubleshootingPageWrapper() {
        return false;
    }
}

;// ./node_modules/devexpress-reporting/viewer/binding/jsReportParametersPanelBinding.binding.js










const dxReportParametersPanelBindingName = 'dxReportParametersPanel';
class DxReportParametersPanel extends external_DevExpress_Analytics_Internal_namespaceObject.DxAnalyticsComponentCommon {
    constructor(_element, _options) {
        super(_element, _options);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.useKoIntegration)();
    }
    getBindingName() {
        return dxReportParametersPanelBindingName;
    }
}
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.registerBaseBinding)(dxReportParametersPanelBindingName, '$data');
external_ko_namespaceObject.bindingHandlers[dxReportParametersPanelBindingName] = {
    init: function (element, valueAccessor) {
        new JSReportParametersPanelBinding(external_ko_namespaceObject.unwrap(valueAccessor()) || {}).applyBindings(element);
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/viewer/accessibility/_dateRangeKeyboardHelper.js

class DateRangeDialogElementWithHighlight extends external_DevExpress_Analytics_Internal_namespaceObject.ControlElementWithParentHighlight {
    _getTargetElement() {
        return this.element.querySelector(this.elementClassName);
    }
    dispose() {
        this.element.removeEventListener('focus', this.dateRangeItemHandleFocus);
        const target = this._getTargetElement();
        target && target.removeEventListener('blur', this.toolbarItemHandleBlur);
        super.dispose();
    }
    constructor(element, _parentElement) {
        super(element, _parentElement);
        this.element = element;
        this.elementClassName = '.dx-calendar-views-wrapper';
        this.dateRangeItemHandleFocus = () => {
            const target = this._getTargetElement();
            target?.focus();
            if (!this._parentElement.classList.contains(this._borderCssClassName[1]))
                this._parentElement.classList.add(...this._borderCssClassName);
        };
        this.element.addEventListener('focus', this.dateRangeItemHandleFocus);
        const target = this._getTargetElement();
        target && target.addEventListener('blur', this.toolbarItemHandleBlur);
    }
}
class DateRangeDialogElementsKeyboardHelper extends external_DevExpress_Analytics_Internal_namespaceObject.AccessibilityKeyboardHelperBase {
    createControlElement(element, index) {
        return new DateRangeDialogElementWithHighlight(element, this.getContainer().getElementsByClassName('dxrv-daterange-editor-item')[index]);
    }
    constructor(_dateRangeEditor) {
        super();
        this._dateRangeEditor = _dateRangeEditor;
        this.controlElementClassName = 'dx-accessibility-daterange-item';
        this._next = 1;
        this.predefinedDateRangesKeyboardHelper = new PredefinedDateRangesKeyboardHelper(this);
        this.addDisposable(this.predefinedDateRangesKeyboardHelper, this._dateRangeEditor.events.on('_popupVisibleChanged', (args) => {
            const timeout = setTimeout(() => { this._dateRangeEditor._popupVisible && this.predefinedDateRangesKeyboardHelper.focus(); }, 300);
            this._disposables.push({ dispose: () => clearTimeout(timeout) });
        }));
    }
    itemHandleEscKey(e, index) {
        this._dateRangeEditor._hidePopup();
        return true;
    }
    itemHandleUpArrowKey(e, index) {
        if (!!(e && e.altKey)) {
            this._dateRangeEditor._hidePopup();
            return true;
        }
        return super.itemHandleUpArrowKey(e, index);
    }
    itemHandleTabKey(e, index) {
        const nextIndex = this.setFocusToNext(index);
        if (nextIndex == 0) {
            this.predefinedDateRangesKeyboardHelper.focus();
        }
        return true;
    }
    itemHandleShiftTabKey(e, index) {
        const nextIndex = this.setFocusToPrevious(index);
        if (nextIndex == 0) {
            this.predefinedDateRangesKeyboardHelper.focus();
        }
        return true;
    }
    handleTabKey(e) {
        const nextIndex = this.setFocusToNext(this._next, true);
        if (nextIndex == 0) {
            this.predefinedDateRangesKeyboardHelper.focus();
        }
        return true;
    }
    setFocusToNext(currentIndex, roundTrip) {
        this._next = currentIndex + 1;
        return super.setFocusToNext(currentIndex, roundTrip);
    }
}
class PredefinedDateRangesKeyboardHelper extends external_DevExpress_Analytics_Internal_namespaceObject.ListKeyboardHelper {
    constructor(owner) {
        super();
        this.owner = owner;
    }
    itemHandleEscKey(e, index) {
        this.owner.itemHandleEscKey.call(this.owner, e, 0);
        return true;
    }
    itemHandleTabKey(e, index) {
        this.owner.setFocusToNext(0);
        return true;
    }
    itemHandleShiftTabKey(e, index) {
        this.owner.setFocusToPrevious(0);
        return true;
    }
    itemHandleUpArrowKey(e, index) {
        if (!!(e && e.altKey)) {
            return this.owner.itemHandleUpArrowKey.call(this.owner, e);
        }
        return super.itemHandleUpArrowKey(e, index);
    }
}

;// ./node_modules/devexpress-reporting/scopes/reporting-viewer.js




































;// ./node_modules/devexpress-reporting/dx-reporting-svg-bindings.js

(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_field_to_column_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_column_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_field_to_data_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_data_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_field_to_filter_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_filter_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_field_to_row_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_row_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_group\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_group'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_parameter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_parameter'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-add_separator\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_separator'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_bottoms\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_bottoms'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_centers\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_centers'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_lefts\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_lefts'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_middles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_middles'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_rights\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_rights'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_tops\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_tops'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-align_to_grid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_to_grid'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-apply_localization_service\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-apply_localization_service'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-bottom_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-bottom_margin'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-bring_to_front\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-bring_to_front'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-center_horizontally\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-center_horizontally'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-center_vertically\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-center_vertically'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-convert\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-convert'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-convertation\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-convertation'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-decrease_horizontal_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-decrease_horizontal_spacing'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-decrease_vertical_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-decrease_vertical_spacing'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-delete_cell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-delete_cell'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-delete_column\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-delete_column'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-delete_row\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-delete_row'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-detail'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-detail_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-detail_report'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-distribute_columns_evenly\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-distribute_columns_evenly'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-distribute_rows_evenly\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-distribute_rows_evenly'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-fit_bounds_to_text\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-fit_bounds_to_text'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-fit_text_to_bounds\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-fit_text_to_bounds'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-fit_to_container\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-fit_to_container'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-group_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-group_footer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-group_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-group_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-increase_horizontal_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-increase_horizontal_spacing'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-increase_vertical_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-increase_vertical_spacing'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-insert_cell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_cell'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-insert_column_to_left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_column_to_left'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-insert_column_to_right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_column_to_right'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-insert_row_above\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_row_above'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-insert_row_below\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_row_below'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-make_horizontal_spacing_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_horizontal_spacing_equal'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-make_same_height\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_same_height'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-make_same_sizes\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_same_sizes'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-make_same_width\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_same_width'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-make_vertical_spacing_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_vertical_spacing_equal'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-master_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-master_report'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-none\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-none'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-page_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-page_footer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-page_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-page_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-remove_horizontal_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-remove_horizontal_spacing'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-remove_vertical_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-remove_vertical_spacing'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-report_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-report_footer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-report_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-report_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-reset\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-reset'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-send_to_back\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-send_to_back'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-size_to_grid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-size_to_grid'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-subband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-subband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-top_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-top_margin'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-ungroup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-ungroup'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-vertical_detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-vertical_detail'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-vertical_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-vertical_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-actions-vertical_total\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-vertical_total'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-bottom_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-bottom_margin'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-detail'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-detail_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-detail_report'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-group_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-group_footer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-group_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-group_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-master_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-master_report'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-page_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-page_footer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-page_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-page_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-report_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-report_footer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-report_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-report_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-sub_band\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-sub_band'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-top_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-top_margin'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-vertical_detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-vertical_detail'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-vertical_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-vertical_header'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-bands-vertical_total\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-vertical_total'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-axes\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-axes'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-axisx\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-axisx'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-axisy\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-axisy'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-chart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-chart'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-constantline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-constantline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-constantlines\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-constantlines'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-defaultpane\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-defaultpane'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-diagram\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-diagram'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-legend\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-legend'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-panes\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-panes'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-series\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-series'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-seriescollection\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-seriescollection'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-title\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-title'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-chartstructure-titles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-titles'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Heart_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Heart_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Heart_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Heart_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-RadioButton_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-RadioButton_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-RadioButton_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-RadioButton_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Smiley_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Smiley_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Smiley_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Smiley_Indeterminate'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Smiley_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Smiley_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-StandardBox1_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox1_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-StandardBox2_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox2_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Star_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Star_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Star_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Star_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Thumb_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Thumb_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Thumb_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Thumb_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Toggle_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Toggle_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-Toggle_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Toggle_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNoBox_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoBox_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNo_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNo_Checked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-checkboxglyphs-YesNo_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNo_Unchecked'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-color_gear\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-color_gear'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-errorPanel-collectErrors\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-collectErrors'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-errorPanel-error\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-error'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-errorPanel-information\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-information'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-errorPanel-notification\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-notification'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-errorPanel-notification_empty\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-notification_empty'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-errorPanel-warning\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-warning'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-bottommarginband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-bottommarginband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-calcbool\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcbool'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-calcdate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcdate'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-calcdefault\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcdefault'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-calcfloat\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcfloat'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-calcinteger\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcinteger'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-calcstring\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcstring'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-component\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-component'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-components\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-components'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-detailband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-detailband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-detailreportband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-detailreportband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-formattingrule\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-formattingrule'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-formattingrules\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-formattingrules'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-groupfooterband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-groupfooterband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-groupheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-groupheaderband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-master_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-master_report'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-pagefooterband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-pagefooterband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-pageheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-pageheaderband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-parametergroup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-parametergroup'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-parameterseparator\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-parameterseparator'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-reportfooterband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-reportfooterband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-reportheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-reportheaderband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-stylemodel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-stylemodel'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-styles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-styles'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-subband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-subband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-topmarginband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-topmarginband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-verticaldetailband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-verticaldetailband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-verticalheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-verticalheaderband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-verticaltotalband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-verticaltotalband'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrbarcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrbarcode'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrcharactercomb\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcharactercomb'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrchart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrchart'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrcheckbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcheckbox'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrcrossbandbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcrossbandbox'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrcrossbandline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcrossbandline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrcrosstab\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcrosstab'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrgauge\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrgauge'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrlabel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrlabel'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpagebreak\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpagebreak'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpageinfo\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpageinfo'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpanel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpanel'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpdfcontent\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpdfcontent'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpdfsignature\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpdfsignature'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpicturebox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpicturebox'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrpivotgrid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpivotgrid'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrrichtext\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrrichtext'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrshape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrshape'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrsparkline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrsparkline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrsubreport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrsubreport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrtable\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtable'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrtablecell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtablecell'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrtableofcontents\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtableofcontents'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrtablerow\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtablerow'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-fieldlist-xrzipcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrzipcode'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-landscape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-landscape'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-add_datasource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-add_datasource'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-back\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-back'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-exit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-exit'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-localization\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-localization'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-newreport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-newreport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-new_via_wizard\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-new_via_wizard'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-run_wizard\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-run_wizard'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-multi_select\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-multi_select'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-none\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-none'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_bottomcenter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_bottomcenter'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_bottomleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_bottomleft'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_bottomright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_bottomright'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_middlecenter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_middlecenter'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_middleleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_middleleft'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_middleright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_middleright'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_topcenter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_topcenter'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_topleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_topleft'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-alignment_topright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_topright'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-image_gallery\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-image_gallery'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-size_mode_cover\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_cover'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-size_mode_normal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_normal'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-size_mode_squeeze\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_squeeze'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-size_mode_stretchimage\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_stretchimage'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-size_mode_zoomimage\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_zoomimage'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-toolbar_brush_options\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_brush_options'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-toolbar_clear\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_clear'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-toolbar_open\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_open'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-toolbar_reset\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_reset'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-portrait\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-portrait'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-breadcrumbs_seperator\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-breadcrumbs_seperator'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-csv\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-csv'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-html\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-html'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-image\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-image'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-mht\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-mht'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-pdf\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-pdf'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-rtf\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-rtf'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-txt\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-txt'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-xls\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-xls'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to-xlsx\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-xlsx'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-export-to\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-export-Export\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-Export'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-first_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-first_page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-last_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-last_page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-multi_page_preview\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-multi_page_preview'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-next_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-next_page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-previous_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-previous_page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-print\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-print'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-print_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-print_page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-print_preview\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-print_preview'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-report_designer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-report_designer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-search\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-search'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-signature_img_placeholder\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-signature_img_placeholder'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-single_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-single_page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-sort_asc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-sort_asc'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-sort_desc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-sort_desc'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-component\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-component'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-components\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-components'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-formatting_rule\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-formatting_rule'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-formatting_rules\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-formatting_rules'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-style\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-style'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-styles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-styles'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-tablecell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-tablecell'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-reportexplorer-tablerow\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-tablerow'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-boxplot\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-boxplot'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-bubbles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-bubbles'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-candle_stick\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-candle_stick'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-doughnut\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-doughnut'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-doughnut3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-doughnut3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_bar3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_line3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_spline_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_spline_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-full_stacked_spline_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_spline_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-funnel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-funnel'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-funnel3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-funnel3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-gantt\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-gantt'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-line3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-manhattan_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-manhattan_bar3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-nested_doughnut\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-nested_doughnut'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-pie\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-pie'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-pie3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-pie3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-point\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-point'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-polar_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-polar_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-polar_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-polar_line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-polar_point\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-polar_point'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-radar_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-radar_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-radar_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-radar_line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-radar_point\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-radar_point'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-range_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-range_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-range_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-range_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-range_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-range_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-scatter_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-scatter_line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_bar3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_full_stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_full_stacked_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_full_stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_full_stacked_bar3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_gantt\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_gantt'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_range_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_range_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_stacked_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-side_by_side_stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_stacked_bar3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-spline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-spline3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-spline_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-spline_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_bar3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_line3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_spline_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_spline_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stacked_spline_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_spline_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-step_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_area'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-step_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_area3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-step_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-step_line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_line3d'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-stock\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stock'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-swift_plot\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-swift_plot'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-series-waterfall\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-waterfall'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-collapse\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-collapse'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-expand\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-expand'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-expressions\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-expressions'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-fieldlist\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-fieldlist'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-parameters\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-parameters'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-reportexplorer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-reportexplorer'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-tabs-search\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-search'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-bottom_center\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-bottom_center'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-bottom_left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-bottom_left'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-bottom_right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-bottom_right'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-left_bottom_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-left_bottom_vertical'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-left_center_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-left_center_vertical'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-left_top_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-left_top_vertical'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-right_bottom_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-right_bottom_vertical'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-right_center_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-right_center_vertical'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-right_top_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-right_top_vertical'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-top_center\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-top_center'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-top_left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-top_left'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-titles-top_right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-top_right'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-todo-chart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-chart'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-todo-pdfcontent\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pdfcontent'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-todo-pdfsignature\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pdfsignature'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-todo-pivotgrid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pivotgrid'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-todo-sparkline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-sparkline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbar-fullscreen-exit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-fullscreen-exit'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbar-fullscreen\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-fullscreen'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbar-hightlightEditingFields\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-hightlightEditingFields'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbar-scripts\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-scripts'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbar-validateBindingMode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-validateBindingMode'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-barcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-barcode'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-charactercomb\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-charactercomb'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-chart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-chart'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-checkbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-checkbox'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-crossbandbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-crossbandbox'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-crossbandline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-crossbandline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-crosstab\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-crosstab'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-gauge\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-gauge'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-label\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-label'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-line'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-pagebreak\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pagebreak'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-pageinfo\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pageinfo'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-panel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-panel'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-pdfcontent\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pdfcontent'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-pdfsignature\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pdfsignature'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-picturebox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-picturebox'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-pivotgrid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pivotgrid'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-richtext\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-richtext'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-shape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-shape'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-sparkline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-sparkline'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-subreport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-subreport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-table\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-table'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-tableofcontents\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-tableofcontents'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-unknown\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-unknown'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbox-zipcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-zipcode'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-crosstab-columns\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-columns'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-crosstab-data\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-data'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-crosstab-fields\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-fields'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-crosstab-rows\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-rows'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-CrossTabReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-CrossTabReport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-EmptyReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-EmptyReport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-LabelReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-LabelReport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-StandardReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-StandardReport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-UndefinedReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-UndefinedReport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-VerticalReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-VerticalReport'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-warning\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-warning'; } }; });

;// ./node_modules/devexpress-reporting/dx-reporting-svg-templates.js

external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.addTemplates({
    'dxrd-svg-actions-add_field_to_column_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_2_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm0-6h4V0h-4v4zM6 16h4v-4H6v4zm0-6h4V6H6v4zm0-6h4V0H6v4z"/></g><path class="dxd-icon-fill" d="M0 0h4v16H0z"/></svg>',
    'dxrd-svg-actions-add_field_to_data_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_1_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M9 0C5.1 0 2 1.5 2 3.5v10C2 15.4 5.1 17 9 17s7-1.6 7-3.5v-10c0-2-3.1-3.5-7-3.5zm0 2c2.9 0 4.4 1.1 4.5 1.5C13.4 3.8 11.9 5 9 5S4.6 3.8 4.5 3.4C4.6 3.1 6.1 2 9 2z"/></svg>',
    'dxrd-svg-actions-add_field_to_filter_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="Parameters" class="dxd-icon-fill" d="M.2 3.2L7 10v9c0 .6.4 1 1 1h4c.6 0 1-.4 1-1v-9l6.8-6.8c.4-.4.1-1.2-.5-1.2H.7c-.6 0-.9.8-.5 1.2zm10.8 6V18H9V9.2L3.8 4h12.3L11 9.2z"/><path id="ZoomIn" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/></svg>',
    'dxrd-svg-actions-add_field_to_row_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_3_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M0 0h16v4H0z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm-6 6h4v-4H6v4zm0-6h4V6H6v4zm-6 6h4v-4H0v4zm0-6h4V6H0v4z"/></g></svg>',
    'dxrd-svg-actions-add_group': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M15.5 11H13V8.5c0-.3-.2-.5-.5-.5h-1c-.3 0-.5.2-.5.5V11H8.5c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5H11v2.5c0 .3.2.5.5.5h1c.3 0 .5-.2.5-.5V13h2.5c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5z"/><path class="dxd-icon-fill" d="M4 4h5.5c.3 0 .5.2.5.5v5c0 .3-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5V4zm-1-.5c0-.3.2-.5.5-.5H7V1.5c0-.3-.2-.5-.5-.5h-5c-.3 0-.5.2-.5.5v5c0 .3.2.5.5.5H3V3.5z"/></svg>',
    'dxrd-svg-actions-add_parameter': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9.5 10h-7c-.3 0-.5-.2-.5-.5v-7c0-.3.2-.5.5-.5h7c.3 0 .5.2.5.5v7c0 .3-.2.5-.5.5z"/><path class="dxd-icon-fill" d="M15.5 11H13V8.5c0-.3-.2-.5-.5-.5h-1c-.3 0-.5.2-.5.5V11H8.5c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5H11v2.5c0 .3.2.5.5.5h1c.3 0 .5-.2.5-.5V13h2.5c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-actions-add_separator': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M15.5 11H13V8.5c0-.3-.2-.5-.5-.5h-1c-.3 0-.5.2-.5.5V11H8.5c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5H11v2.5c0 .3.2.5.5.5h1c.3 0 .5-.2.5-.5V13h2.5c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5zM12.5 7h-11c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h11c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-actions-align_bottoms': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18H6c-.6 0-1-.5-1-1V3c0-.5.4-1 1-1h4c.6 0 1 .5 1 1v14c0 .5-.4 1-1 1zM18 18h-4c-.6 0-1-.5-1-1v-6c0-.6.4-1 1-1h4c.5 0 1 .4 1 1v6c0 .5-.5 1-1 1zM2 20h20v2H2z"/></svg>',
    'dxrd-svg-actions-align_centers': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 11H9c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h6c.6 0 1 .4 1 1v4c0 .6-.4 1-1 1zM19 19H5c-.6 0-1-.5-1-1v-4c0-.6.4-1 1-1h14c.5 0 1 .4 1 1v4c0 .5-.5 1-1 1z"/><path class="dxd-icon-fill" d="M11 2h2v20h-2z"/></svg>',
    'dxrd-svg-actions-align_lefts': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h2v20H2zM13 11H7c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h6c.6 0 1 .4 1 1v4c0 .6-.4 1-1 1zM21 19H7c-.6 0-1-.5-1-1v-4c0-.6.4-1 1-1h14c.5 0 1 .4 1 1v4c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-align_middles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 11h20v2H2z"/><path class="dxd-icon-fill" d="M18 20h-4c-.6 0-1-.5-1-1V5c0-.6.4-1 1-1h4c.5 0 1 .4 1 1v14c0 .5-.5 1-1 1zM10 16H6c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1h4c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1z"/></svg>',
    'dxrd-svg-actions-align_rights': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2h2v20h-2zM17 11h-6c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h6c.5 0 1 .4 1 1v4c0 .6-.5 1-1 1zM17 19H3c-.5 0-1-.5-1-1v-4c0-.6.5-1 1-1h14c.5 0 1 .4 1 1v4c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-align_tops': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 22H6c-.6 0-1-.5-1-1V7c0-.6.4-1 1-1h4c.6 0 1 .4 1 1v14c0 .5-.4 1-1 1zM18 14h-4c-.6 0-1-.4-1-1V7c0-.6.4-1 1-1h4c.5 0 1 .4 1 1v6c0 .6-.5 1-1 1zM2 2h20v2H2z"/></svg>',
    'dxrd-svg-actions-align_to_grid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 8V6h-5V1h-2v5H8V1H6v5H1v2h5v8H1v2h5v5h2v-5h8v5h2v-5h5v-2h-5V8h5zm-7 8H8v-2h6V8h2v8z"/></svg>',
    'dxrd-svg-actions-apply_localization_service': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6h-9V3c0-.6-.4-1-1-1s-1 .4-1 1v3H2c-.6 0-1 .4-1 1s.4 1 1 1h12c0 2.3-.7 4.5-2 6.3-.7-1.1-1.3-2.3-1.6-3.5-.2-.5-.5-.8-1-.8-.6 0-1.1.6-.9 1.2.4 1.7 1.2 3.3 2.3 4.6C8.7 17.8 6 19 3 19c-.6 0-1 .4-1 1s.4 1 1 1c3.5 0 6.7-1.4 9-3.6 2.3 2.3 5.5 3.6 9 3.6.6 0 1-.4 1-1s-.4-1-1-1c-3 0-5.7-1.2-7.7-3.1C15 13.7 16 11 16 8h6c.6 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-actions-bottom_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M21 16V3c0-.5-.5-1-1-1H4c-.5 0-1 .5-1 1v13h18z"/></g><path class="dxd-icon-fill" d="M3 18v3c0 .5.5 1 1 1h16c.5 0 1-.5 1-1v-3H3z"/></svg>',
    'dxrd-svg-actions-bring_to_front': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 8h-5V3c0-.5-.5-1-1-1H3c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h5v5c0 .5.5 1 1 1h12c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-1 12H10v-4h5c.5 0 1-.5 1-1v-5h4v10z"/></svg>',
    'dxrd-svg-actions-center_horizontally': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 22H2V2h2v20zM22 2h-2v20h2V2zm-7 16V6c0-.6-.4-1-1-1h-4c-.6 0-1 .4-1 1v12c0 .5.4 1 1 1h4c.6 0 1-.5 1-1z"/></svg>',
    'dxrd-svg-actions-center_vertically': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 20h20v2H2v-2zM2 2v2h20V2H2zm16 7H6c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h12c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-convert': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 10l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4l2.3-2.3H11c-.6 0-1-.4-1-1s.4-1 1-1h8.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L23 10zM1 14l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L4.8 15H13c.6 0 1-.4 1-1s-.4-1-1-1H4.8l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L1 14z"/></svg>',
    'dxrd-svg-actions-convertation': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 10l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4l2.3-2.3H11c-.6 0-1-.4-1-1s.4-1 1-1h8.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L23 10zM1 14l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L4.8 15H13c.6 0 1-.4 1-1s-.4-1-1-1H4.8l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L1 14z"/></svg>',
    'dxrd-svg-actions-decrease_horizontal_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L6.2 19H1c-.6 0-1-.4-1-1s.4-1 1-1h5.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L10 18zm4 0l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L17.8 19H23c.6 0 1-.4 1-1s-.4-1-1-1h-5.2l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L14 18zm1-11V5h-2v2h2zm-4 0V5H9v2h2zm6-5v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1h-4c-.5 0-1 .5-1 1zM1 2v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1z"/></svg>',
    'dxrd-svg-actions-decrease_vertical_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 10l4.7-4.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L19 6.2V1c0-.6-.4-1-1-1s-1 .4-1 1v5.2l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4L18 10zm0 4l4.7 4.7c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L19 17.8V23c0 .6-.4 1-1 1s-1-.4-1-1v-5.2l-2.3 2.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L18 14zM5 13h2v2H5v-2zm0-4h2v2H5V9zm6 9v4c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1v-4c0-.6.5-1 1-1h8c.5 0 1 .5 1 1zm0-16v4c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1V2c0-.6.5-1 1-1h8c.5 0 1 .5 1 1z"/></svg>',
    'dxrd-svg-actions-delete_cell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 8h4v4H8z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M14 12h4V8h-4v4zm0-6h4V2h-4v4zM8 18h4v-4H8v4zM8 6h4V2H8v4zM2 18h4v-4H2v4zm0-6h4V8H2v4zm0-6h4V2H2v4z"/></g><path class="dxd-icon-fill" d="M19.4 18l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L18 16.6l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.3-2.3 2.3 2.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L19.4 18z"/></svg>',
    'dxrd-svg-actions-delete_column': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M14 12h4V8h-4v4zm0-6h4V2h-4v4zM8 18h4v-4H8v4zm0-6h4V8H8v4zm0-6h4V2H8v4z"/></g><path class="dxd-icon-fill" d="M2 2h4v16H2zM19.4 18l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L18 16.6l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.3-2.3 2.3 2.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L19.4 18z"/></svg>',
    'dxrd-svg-actions-delete_row': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8 14h4v4H8v-4zm0-2h4V8H8v4zm0-6h4V2H8v4zM2 18h4v-4H2v4zm0-6h4V8H2v4zm0-6h4V2H2v4z"/></g><path class="dxd-icon-fill" d="M19.4 18l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L18 16.6l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.3-2.3 2.3 2.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L19.4 18zM14 2h4v10h-4z"/></svg>',
    'dxrd-svg-actions-detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2H4c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h16c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H5V4h14v16zM16 9H8V7h8v2zm0 4H8v-2h8v2zm0 4H8v-2h8v2z"/></svg>',
    'dxrd-svg-actions-detail_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v3h8V2h-2zm2 6H8v2h8V8zm0 6H8v-2h8v2zm0 4H8v-2h8v2z"/></svg>',
    'dxrd-svg-actions-distribute_columns_evenly': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 22H2c-.5 0-1-.5-1-1v-8c0-.6.5-1 1-1h8c.6 0 1 .4 1 1v8c0 .5-.4 1-1 1zm13-1v-8c0-.6-.5-1-1-1h-8c-.6 0-1 .4-1 1v8c0 .5.4 1 1 1h8c.5 0 1-.5 1-1zM21 2v3h-8V2h-2v3H3V2H1v8h2V7h8v3h2V7h8v3h2V2h-2z"/></svg>',
    'dxrd-svg-actions-distribute_rows_evenly': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 14v8c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-8c0-.5.5-1 1-1h8c.5 0 1 .5 1 1zM11 1H3c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm11 2V1h-8v2h3v8h-3v2h3v8h-3v2h8v-2h-3v-8h3v-2h-3V3h3z"/></svg>',
    'dxrd-svg-actions-fit_bounds_to_text': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3V1c0-.6-.4-1-1-1s-1 .4-1 1v4h4c.6 0 1-.4 1-1s-.4-1-1-1h-2zM3 3H1c-.6 0-1 .4-1 1s.4 1 1 1h4V1c0-.6-.4-1-1-1S3 .4 3 1v2zM21 21v2c0 .6-.4 1-1 1s-1-.4-1-1v-4h4c.6 0 1 .4 1 1s-.4 1-1 1h-2zM3 21H1c-.6 0-1-.4-1-1s.4-1 1-1h4v4c0 .6-.4 1-1 1s-1-.4-1-1v-2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 15h2v2H3v-2zm4 6h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 13h2v-2H3v2zm0-4h2V7H3v2zm4-4h2V3H7v2zm4 0h2V3h-2v2zm4 0h2V3h-2v2zm4 12h2v-2h-2v2zm0-4h2v-2h-2v2zm0-4h2V7h-2v2z"/></g><path class="dxd-icon-fill" d="M16.7 14.5h-.6l-2.9-7.3c0-.1-.2-.2-.3-.2H11c-.1 0-.2.1-.3.2l-2.9 7.3h-.5c-.2 0-.3.1-.3.3v.9c0 .2.1.3.3.3h3.4c.2 0 .3-.1.3-.3v-.9c0-.2-.1-.3-.3-.3H10l.4-1h3.2l.4 1h-.7c-.2 0-.3.1-.3.3v.9c0 .2.1.3.3.3h3.4c.2 0 .3-.1.3-.3v-.9c0-.2-.1-.3-.3-.3zM11 12l1-3.1 1 3.1h-2z"/></svg>',
    'dxrd-svg-actions-fit_text_to_bounds': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 22v-2c0-.6-.4-1-1-1s-1 .4-1 1v4h4c.6 0 1-.4 1-1s-.4-1-1-1H2zM22 22h-2c-.6 0-1 .4-1 1s.4 1 1 1h4v-4c0-.6-.4-1-1-1s-1 .4-1 1v2zM2 2v2c0 .6-.4 1-1 1s-1-.4-1-1V0h4c.6 0 1 .4 1 1s-.4 1-1 1H2zM22 2h-2c-.6 0-1-.4-1-1s.4-1 1-1h4v4c0 .6-.4 1-1 1s-1-.4-1-1V2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 11h2v2H0v-2zm0-2h2V7H0v2zm11-7h2V0h-2v2zM7 2h2V0H7v2zm8 0h2V0h-2v2zm-4 22h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zM0 17h2v-2H0v2zm22-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8h2v-2h-2v2z"/></g><path class="dxd-icon-fill" d="M18.5 16h-.9L13.5 5.3c-.1-.2-.3-.3-.5-.3h-2.1c-.2 0-.4.1-.5.3L6.3 16h-.8c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5h-.7l.7-2h4.8l.7 2h-.6c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4.1c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5zm-8.2-4l1.6-4.8h.1l1.7 4.8h-3.4z"/></svg>',
    'dxrd-svg-actions-fit_to_container': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 22v-2c0-.6-.4-1-1-1s-1 .4-1 1v4h4c.6 0 1-.4 1-1s-.4-1-1-1H2zM22 22h-2c-.6 0-1 .4-1 1s.4 1 1 1h4v-4c0-.6-.4-1-1-1s-1 .4-1 1v2zM2 2v2c0 .6-.4 1-1 1s-1-.4-1-1V0h4c.6 0 1 .4 1 1s-.4 1-1 1H2zM22 2h-2c-.6 0-1-.4-1-1s.4-1 1-1h4v4c0 .6-.4 1-1 1s-1-.4-1-1V2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 11h2v2H0v-2zm0-2h2V7H0v2zm11-7h2V0h-2v2zM7 2h2V0H7v2zm8 0h2V0h-2v2zm-4 22h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zM0 17h2v-2H0v2zm22-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8h2v-2h-2v2z"/></g><path class="dxd-icon-fill" d="M16 17H8c-.6 0-1-.5-1-1V8c0-.6.4-1 1-1h8c.5 0 1 .4 1 1v8c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-group_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 23H3c-.5 0-1-.5-1-1v-4c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .5-.4 1-1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 7H3c-.5 0-1-.4-1-1V2c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .6-.4 1-1 1zm7 2H8v2h14V9zm0 4H8v2h14v-2z"/></g></svg>',
    'dxrd-svg-actions-group_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 7H3c-.5 0-1-.4-1-1V2c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .6-.4 1-1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 23H3c-.5 0-1-.5-1-1v-4c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .5-.4 1-1 1zm7-14H8v2h14V9zm0 4H8v2h14v-2z"/></g></svg>',
    'dxrd-svg-actions-increase_horizontal_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19.3 13.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3H15c-.6 0-1 .4-1 1s.4 1 1 1h5.2l-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L24 18l-4.7-4.7zM9 17H3.8l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L0 18l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L3.8 19H9c.6 0 1-.4 1-1 0-.5-.4-1-1-1zM13 5h2v2h-2zM9 5h2v2H9zM17 2v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1h-4c-.5 0-1 .5-1 1zM1 2v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1z"/></svg>',
    'dxrd-svg-actions-increase_vertical_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 24l4.7-4.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L19 20.2V15c0-.6-.4-1-1-1s-1 .4-1 1v5.2l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4L18 24zm0-24l4.7 4.7c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L19 3.8V9c0 .6-.4 1-1 1s-1-.4-1-1V3.8l-2.3 2.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L18 0zM5 13h2v2H5zM5 9h2v2H5zM10 17H2c-.5 0-1 .4-1 1v4c0 .5.5 1 1 1h8c.5 0 1-.5 1-1v-4c0-.5-.4-1-1-1zM10 1H2c-.5 0-1 .4-1 1v4c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.4-1-1-1z"/></svg>',
    'dxrd-svg-actions-insert_cell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_5_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M6 6h4v4H6z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm0-6h4V0h-4v4zM6 16h4v-4H6v4zM6 4h4V0H6v4zM0 16h4v-4H0v4zm0-6h4V6H0v4zm0-6h4V0H0v4z"/></g></svg>',
    'dxrd-svg-actions-insert_column_to_left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_4_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm0-6h4V0h-4v4zM6 16h4v-4H6v4zm0-6h4V6H6v4zm0-6h4V0H6v4z"/></g><path class="dxd-icon-fill" d="M0 0h4v16H0z"/></svg>',
    'dxrd-svg-actions-insert_column_to_right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_6_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M12 0h4v16h-4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M6 12h4v4H6v-4zm0-2h4V6H6v4zm0-6h4V0H6v4zM0 16h4v-4H0v4zm0-6h4V6H0v4zm0-6h4V0H0v4z"/></g></svg>',
    'dxrd-svg-actions-insert_row_above': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_7_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm-6 6h4v-4H6v4zm0-6h4V6H6v4zm-6 6h4v-4H0v4zm0-6h4V6H0v4z"/></g><path class="dxd-icon-fill" d="M0 0h16v4H0z"/></svg>',
    'dxrd-svg-actions-insert_row_below': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_8_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M0 12h16v4H0z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 6h4v4h-4V6zm0-2h4V0h-4v4zm-6 6h4V6H6v4zm0-6h4V0H6v4zm-6 6h4V6H0v4zm0-6h4V0H0v4z"/></g></svg>',
    'dxrd-svg-actions-make_horizontal_spacing_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 5h-4c-.5 0-1 .5-1 1v5h-3V3c0-.5-.5-1-1-1h-4c-.5 0-1 .5-1 1v8H6V9c0-.5-.5-1-1-1H1c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h4c.5 0 1-.5 1-1v-2h3v8c0 .5.5 1 1 1h4c.5 0 1-.5 1-1v-8h3v5c0 .5.5 1 1 1h4c.5 0 1-.5 1-1V6c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-make_same_height': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M9 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h6c.6 0 1-.5 1-1V3c0-.5-.4-1-1-1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M21 8h-6c-.6 0-1 .4-1 1v6c0 .6.4 1 1 1h6c.5 0 1-.4 1-1V9c0-.6-.5-1-1-1z"/></g><path class="dxd-icon-fill" d="M14 2h8v2h-8zM14 20h8v2h-8z"/></svg>',
    'dxrd-svg-actions-make_same_sizes': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 4H8V2h8v2zm0 16H8v2h8v-2zM4 8H2v8h2V8zm18 0h-2v8h2V8z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 16H9c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1h6c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1z"/></g></svg>',
    'dxrd-svg-actions-make_same_width': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 14H9c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h6c.5 0 1-.5 1-1v-6c0-.5-.5-1-1-1z"/></g><path class="dxd-icon-fill" d="M20 14h2v8h-2zM2 14h2v8H2z"/></svg>',
    'dxrd-svg-actions-make_vertical_spacing_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 23v-4c0-.5-.5-1-1-1h-5v-3h8c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1h-8V6h2c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1H9c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h2v3H3c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h8v3H6c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h12c.5 0 1-.5 1-1z"/></svg>',
    'dxrd-svg-actions-master_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H4V6h16v14z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M18 12H6V8h12v4zm0 2H6v4h12v-4z"/></g></svg>',
    'dxrd-svg-actions-none': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
    'dxrd-svg-actions-page_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 20h3v3H4c-.5 0-1-.5-1-1v-2zm5 3h8v-3H8v3zM3 2v2h3V1H4c-.5 0-1 .5-1 1zm5 11h8V6H8v7zm-5 5h3V6H3v12zm15 5h2c.5 0 1-.5 1-1v-2h-3v3zm0-5h3V6h-3v12zm2-17h-2v3h3V2c0-.5-.5-1-1-1zM8 4h8V1H8v3z"/></g><path class="dxd-icon-fill" d="M8 15h8v3H8z"/></svg>',
    'dxrd-svg-actions-page_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 20h3v3H4c-.5 0-1-.5-1-1v-2zm5 3h8v-3H8v3zM3 2v2h3V1H4c-.5 0-1 .5-1 1zm5 16h8v-7H8v7zm-5 0h3V6H3v12zm15 5h2c.5 0 1-.5 1-1v-2h-3v3zm0-5h3V6h-3v12zm2-17h-2v3h3V2c0-.5-.5-1-1-1zM8 4h8V1H8v3z"/></g><path class="dxd-icon-fill" d="M8 6h8v3H8z"/></svg>',
    'dxrd-svg-actions-remove_horizontal_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L6.2 19H1c-.6 0-1-.4-1-1s.4-1 1-1h5.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L10 18zm4 0l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L17.8 19H23c.6 0 1-.4 1-1s-.4-1-1-1h-5.2l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L14 18zM10 11H6c-.6 0-1-.4-1-1V2c0-.5.4-1 1-1h4c.6 0 1 .5 1 1v8c0 .6-.4 1-1 1zm9-1V2c0-.5-.5-1-1-1h-4c-.6 0-1 .5-1 1v8c0 .6.4 1 1 1h4c.5 0 1-.4 1-1z"/></svg>',
    'dxrd-svg-actions-remove_vertical_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 10l4.7-4.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L19 6.2V1c0-.6-.4-1-1-1s-1 .4-1 1v5.2l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4L18 10zm0 4l4.7 4.7c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L19 17.8V23c0 .6-.4 1-1 1s-1-.4-1-1v-5.2l-2.3 2.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L18 14zM11 14v4c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1v-4c0-.6.5-1 1-1h8c.5 0 1 .5 1 1zm-1-9H2c-.5 0-1 .4-1 1v4c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V6c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-report_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v2h8V2h-2z"/><path class="dxd-icon-fill" d="M7 16h10v3H7z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M7 6h10v8H7z"/></g></svg>',
    'dxrd-svg-actions-report_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v2h8V2h-2z"/><path class="dxd-icon-fill" d="M7 6h10v3H7z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M7 11h10v8H7z"/></g></svg>',
    'dxrd-svg-actions-reset': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 12h2c0 5.5-4.5 10-10 10-3.3 0-6.2-1.6-8-4v3c0 .6-.4 1-1 1s-1-.4-1-1v-7h7c.6 0 1 .4 1 1s-.4 1-1 1H5.1c1.4 2.4 4 4 6.9 4 4.4 0 8-3.6 8-8zm1-10c-.6 0-1 .4-1 1v3c-1.8-2.4-4.7-4-8-4C6.5 2 2 6.5 2 12h2c0-4.4 3.6-8 8-8 3 0 5.5 1.6 6.9 4H15c-.6 0-1 .4-1 1s.4 1 1 1h7V3c0-.6-.4-1-1-1z"/></svg>',
    'dxrd-svg-actions-send_to_back': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 8h-5V3c0-.5-.5-1-1-1H3c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h5v5c0 .5.5 1 1 1h12c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-1 12H10V10h10v10z"/></svg>',
    'dxrd-svg-actions-size_to_grid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 8V6h-5V1h-2v5H8V1H6v5H1v2h5v8H1v2h5v5h2v-5h8v5h2v-5h5v-2h-5V8z"/></svg>',
    'dxrd-svg-actions-subband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M14 11H2c-.5 0-1-.4-1-1V4c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v6c0 .6-.4 1-1 1z"/></g><path class="dxd-icon-fill" d="M22 21H10c-.6 0-1-.5-1-1v-6c0-.6.4-1 1-1h12c.5 0 1 .4 1 1v6c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-top_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 8v13c0 .5.5 1 1 1h16c.5 0 1-.5 1-1V8H3z"/></g><path class="dxd-icon-fill" d="M20 2H4c-.5 0-1 .5-1 1v3h18V3c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-ungroup': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 4H4.5c-.3 0-.5.2-.5.5V8H2.5c-.3 0-.5-.2-.5-.5v-5c0-.3.2-.5.5-.5h5c.3 0 .5.2.5.5V4zm-.9 5.9c-.3-.3-.4-.6-.4-1s.2-.8.5-1.1l.7-.7c.3-.3.7-.5 1.1-.5s.8.2 1.1.5l.9 1.1V5.5c0-.3-.2-.5-.5-.5H5v5.5c0 .3.2.5.5.5h2.7L7.1 9.9z"/><path class="dxd-icon-fill" d="M14.2 12.8L12.4 11l1.8-1.8c.2-.2.2-.5 0-.7l-.7-.7c-.2-.2-.5-.2-.7 0L11 9.6 9.2 7.8c-.2-.2-.5-.2-.7 0l-.7.7c-.2.2-.2.5 0 .7L9.6 11l-1.8 1.8c-.2.2-.2.5 0 .7l.7.7c.2.2.5.2.7 0l1.8-1.8 1.8 1.8c.2.2.5.2.7 0l.7-.7c.2-.2.2-.5 0-.7z"/></svg>',
    'dxrd-svg-actions-vertical_detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 3h2v3H0V4c0-.5.5-1 1-1zM0 16h3V8H0v8zm5 5h14v-3H5v3zm-5-1c0 .5.5 1 1 1h2v-3H0v2zM23 3h-2v3h3V4c0-.5-.5-1-1-1zm-2 18h2c.5 0 1-.5 1-1v-2h-3v3zm-5-5h3V8h-3v8zM5 16h3V8H5v8zm16 0h3V8h-3v8zM5 6h14V3H5v3z"/></g><path class="dxd-icon-fill" d="M10 8h4v8h-4z"/></svg>',
    'dxrd-svg-actions-vertical_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 3h2v3H0V4c0-.5.5-1 1-1zM0 16h3V8H0v8zm5 5h14v-3H5v3zm-5-1c0 .5.5 1 1 1h2v-3H0v2zM23 3h-2v3h3V4c0-.5-.5-1-1-1zm-2 18h2c.5 0 1-.5 1-1v-2h-3v3zm-11-5h9V8h-9v8zm11 0h3V8h-3v8zM5 6h14V3H5v3z"/></g><path class="dxd-icon-fill" d="M5 8h3v8H5z"/></svg>',
    'dxrd-svg-actions-vertical_total': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 8h3v8H0V8zm0 12c0 .5.5 1 1 1h2v-3H0v2zM0 4v2h3V3H1c-.5 0-1 .5-1 1zm14 4H5v8h9V8zM5 6h14V3H5v3zm16 10h3V8h-3v8zm2-13h-2v3h3V4c0-.5-.5-1-1-1zm-2 18h2c.5 0 1-.5 1-1v-2h-3v3zM5 21h14v-3H5v3z"/></g><path class="dxd-icon-fill" d="M16 8h3v8h-3z"/></svg>',
    'dxrd-svg-bands-bottom_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM18 0h2v2h-2zM2 4h2v14H2zM6 4h10v14H6z"/><path class="dxd-icon-fill" d="M18 20h2v2h-2zM2 20h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 4h2v14h-2zM2 0h2v2H2z"/></svg>',
    'dxrd-svg-bands-detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v22h18V0H2zm14 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6V8h10v2zm0-4H6V4h10v2z"/></svg>',
    'dxrd-svg-bands-detail_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 2h-2V0H8v2H6v2h10z"/><path class="dxd-icon-fill" d="M18 2v4H4V2H2v22h18V2h-2zm-2 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6v-2h10v2z"/></svg>',
    'dxrd-svg-bands-group_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h12v6H0z"/><path class="dxd-icon-fill" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 8h14v2H8zM8 12h14v2H8z"/></svg>',
    'dxrd-svg-bands-group_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h12v6H0z"/><path class="dxd-icon-fill" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 12h14v2H8zM8 8h14v2H8z"/></svg>',
    'dxrd-svg-bands-master_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2h-2V0H6v2H4v2h8zM14 14h10v4H14zM14 20h10v4H14z"/><path class="dxd-icon-fill" d="M12 12h4V2h-2v4H2V2H0v20h12z"/></svg>',
    'dxrd-svg-bands-page_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM6 4h10v8H6z"/><path class="dxd-icon-fill" d="M6 14h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 0h2v2h-2zM6 20h10v2H6zM2 20h2v2H2zM2 4h2v14H2zM18 20h2v2h-2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-bands-page_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M6 10h10v8H6zM6 20h10v2H6zM18 0h2v2h-2zM2 4h2v14H2z"/><path class="dxd-icon-fill" d="M6 4h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM18 20h2v2h-2zM2 20h2v2H2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-bands-report_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 16h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 2h2v2h-2zM6 6h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-bands-report_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 6h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 2h2v2h-2zM6 12h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-bands-sub_band': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M2 4h14v6H2z"/><path class="dxd-icon-fill" d="M8 14h14v6H8z"/></svg>',
    'dxrd-svg-bands-top_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M6 20h10v2H6z"/><path class="dxd-icon-fill" d="M6 0h10v2H6zM18 0h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4h2v14H2zM6 4h10v14H6zM18 20h2v2h-2zM2 20h2v2H2zM18 4h2v14h-2z"/><path class="dxd-icon-fill" d="M2 0h2v2H2z"/></svg>',
    'dxrd-svg-bands-vertical_detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g id="VerticalDetail"><path class="dxd-icon-fill" d="M10 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6h-4v10h4V6zM8 6H4v10h4V6zm12-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-vertical_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g id="VerticalHeader"><path class="dxd-icon-fill" d="M4 6h4v10H4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6H10v10h10V6zm0-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-vertical_total': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g id="VerticalTotal"><path class="dxd-icon-fill" d="M16 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM14 6H4v10h10V6zm6-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-chartstructure-axes': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M24 6V4h-2V2h-2V0h-2v2h-4V0h-2v2H8V0H6v4h14v14h4v-2h-2v-4h2v-2h-2V6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M10 14V6H6v2h2v4H6v2h2v2h2v2h2v-2h4v2h2v-4z"/></svg>',
    'dxrd-svg-chartstructure-axisx': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 17l-6-5v4h-4v-2h-2v2H6v-2H4v2H0v2h4v2h2v-2h4v2h2v-2h4v4zM4 8h2V6h4v4l6-5-6-5v4H6V2H4v2H0v2h4z"/></svg>',
    'dxrd-svg-chartstructure-axisy': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M17 0l-5 6h4v4h-2v2h2v4h-2v2h2v4h2v-4h2v-2h-2v-4h2v-2h-2V6h4zM8 18v-2H6v-4h4L5 6l-5 6h4v4H2v2h2v4h2v-4z"/></svg>',
    'dxrd-svg-chartstructure-chart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M10 22V12H0c.5 5 5 9.5 10 10zM12 12v10c5-.5 9.5-5 10-10H12z"/><path class="dxd-icon-fill" d="M0 6h4v4H0zM6 4h4v6H6zM12 2h4v8h-4z"/><g><path class="dxd-icon-fill" d="M18 0h4v10h-4z"/></g></svg>',
    'dxrd-svg-chartstructure-constantline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 6h-6V0h-2v6H0v2h16v16h2V8h6z"/></svg>',
    'dxrd-svg-chartstructure-constantlines': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M24 6V4h-4V0h-2v4h-4V0h-2v4H6v2h6v4H6v2h6v6h2v-6h4v6h2v-6h4v-2h-4V6h4zm-10 4V6h4v4h-4z"/></svg>',
    'dxrd-svg-chartstructure-defaultpane': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 0v10h10V0H12zm8 8h-6V2h6v6zM12 22h10V12H12v10zm2-8h6v6h-6v-6z"/></svg>',
    'dxrd-svg-chartstructure-diagram': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h4v6H0zM12 10h4v12h-4z"/><path class="dxd-icon-fill" d="M18 2h4v20h-4zM6 6h4v16H6z"/></svg>',
    'dxrd-svg-chartstructure-legend': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h10v10H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M0 12h10v10H0z"/><path class="dxd-icon-fill" d="M12 2h10v2H12zM12 6h10v2H12zM12 14h10v2H12zM12 18h10v2H12z"/></svg>',
    'dxrd-svg-chartstructure-panes': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill" d="M12 0v10h10V0H12z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 22h10V12H12v10z"/></svg>',
    'dxrd-svg-chartstructure-series': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 22h22V10l-4-4-8 8-4-4-6 6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 0l-8 8-4-4-6 6v4l6-6 4 4 8-8 4 4V4z"/></svg>',
    'dxrd-svg-chartstructure-seriescollection': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M15 7l-9 9v2h18v-2z"/><path class="dxd-icon-fill" d="M15 4l9 9V4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 13l9-9-9-4z"/></svg>',
    'dxrd-svg-chartstructure-title': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M4 8v14h14V8H4zm12 8h-2v-2h2v2zm-6 0v-2h2v2h-2zm2 2v2h-2v-2h2zm-4-2H6v-2h2v2zm8-6v2h-2v-2h2zm-4 2h-2v-2h2v2zm-4-2v2H6v-2h2zm-2 8h2v2H6v-2zm8 2v-2h2v2h-2z"/><path class="dxd-icon-fill" d="M8 0h6v6H8z"/></svg>',
    'dxrd-svg-chartstructure-titles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h4v4H2zM10 2h4v4h-4zM10 18h4v4h-4zM18 2h4v4h-4zM2 18h4v4H2zM2 10h4v4H2zM18 17.9h4v4h-4zM18 10h4v4h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/></svg>',
    'dxrd-svg-checkboxglyphs-Heart_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M16 5.5C16 3 14 1 11.5 1c-1.4 0-2.7.7-3.5 1.7C7.2 1.7 5.9 1 4.5 1 2 1 0 3 0 5.5c0 1.2.5 2.4 1.3 3.2L8 15.4l6.7-6.7c.8-.8 1.3-2 1.3-3.2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Heart_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M11.5 1c-1.4 0-2.7.7-3.5 1.7C7.2 1.7 5.9 1 4.5 1 2 1 0 3 0 5.5c0 1.2.5 2.4 1.3 3.2L8 15.4l6.7-6.7c.8-.8 1.3-2 1.3-3.2C16 3 14 1 11.5 1zm1.8 6.3L8 12.5 2.7 7.3C2.3 6.8 2 6.2 2 5.5 2 4.1 3.1 3 4.5 3c.7 0 1.5.3 1.9 1L8 6l1.6-2c.5-.6 1.2-1 1.9-1C12.9 3 14 4.1 14 5.5c0 .7-.3 1.3-.7 1.8z"/></svg>',
    'dxrd-svg-checkboxglyphs-RadioButton_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zm4-6c0 2.2-1.8 4-4 4s-4-1.8-4-4 1.8-4 4-4 4 1.8 4 4z"/></svg>',
    'dxrd-svg-checkboxglyphs-RadioButton_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-green" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM10.9 8c.7 0 1.2.6.9 1.3-.5 1.6-2 2.7-3.8 2.7-1.8 0-3.3-1.1-3.8-2.7-.2-.7.3-1.3.9-1.3.4 0 .8.2 1 .6.3.8 1 1.4 1.9 1.4.9 0 1.6-.6 1.9-1.4.1-.4.5-.6 1-.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Indeterminate': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM11 11H5c-.6 0-1-.4-1-1s.4-1 1-1h6c.6 0 1 .4 1 1s-.4 1-1 1z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM10.9 12c-.4 0-.8-.2-1-.6-.3-.8-1-1.4-1.9-1.4-.9 0-1.6.6-1.9 1.4-.1.4-.5.6-1 .6-.7 0-1.2-.6-.9-1.3C4.7 9.1 6.2 8 8 8c1.8 0 3.3 1.1 3.8 2.7.2.7-.3 1.3-.9 1.3z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v12h12V0H0zm11 11H1V1h10v10z"/><path class="dxd-icon-fill" d="M10 4V2L4 8 2 6v2l2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v12h12V0H0zm11 11H1V1h10v10z"/><path class="dxd-icon-fill" d="M4 4h4v4H4z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M12 12H0V0h12v12zM1 11h10V1H1v10z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="dxrd-svg-black" d="M11.6 4.6L13 6l-6 6-4-4 1.4-1.4L7 9.2l4.6-4.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.6 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="dxrd-svg-black" d="M4 4h8v8H4z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.6 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/></svg>',
    'dxrd-svg-checkboxglyphs-Star_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-yellow" d="M8 .6l2.5 4.9 5.5.7-4 3.9.9 5.3L8 12.9l-4.9 2.5.9-5.3-4-3.9 5.5-.7z"/></svg>',
    'dxrd-svg-checkboxglyphs-Star_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-black" d="M16 6.2l-5.5-.7L8 .6 5.5 5.5 0 6.2l4 3.9-.9 5.3L8 12.9l4.9 2.5-.9-5.3 4-3.9zm-5.7 5.6L8 10.7l-2.3 1.2.4-2.4-1.7-1.8 2.4-.3L8 5l1.2 2.3 2.4.3-1.7 1.8.4 2.4z"/></svg>',
    'dxrd-svg-checkboxglyphs-Thumb_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-green" d="M0 6h2c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1H0V6zm6 9h5.7c.8 0 1.5-.5 1.8-1.2l2.3-5.4c.1-.3.2-.5.2-.8V6c0-.6-.4-1-1-1H9l1.1-3.7c.1-.4 0-.8-.2-1-.3-.3-.8-.3-1.1 0L4.6 4.4c-.4.4-.6.9-.6 1.4V13c0 1.1.9 2 2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Thumb_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M16 10h-2c-.6 0-1-.4-1-1V3c0-.6.4-1 1-1h2v8zm-6-9H4.3c-.8 0-1.5.5-1.8 1.2L.2 7.6c-.1.3-.2.5-.2.8V10c0 .6.4 1 1 1h6l-1.1 3.7c-.1.4 0 .8.2 1 .3.3.8.3 1.1 0l4.2-4.2c.4-.4.6-.9.6-1.4V3c0-1.1-.9-2-2-2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Toggle_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-green" d="M12 4H4C1.8 4 0 5.8 0 8s1.8 4 4 4h8c2.2 0 4-1.8 4-4s-1.8-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Toggle_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M12 4H4C1.8 4 0 5.8 0 8s1.8 4 4 4h8c2.2 0 4-1.8 4-4s-1.8-4-4-4zm-8 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoBox_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-green" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="dxrd-svg-green" d="M11.6 4.6L13 6l-6 6-4-4 1.4-1.4L7 9.2l4.6-4.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 14H2V2h12v12z"/><path class="dxrd-svg-red" d="M13 4.4L11.6 3 8 6.6 4.4 3 3 4.4 6.6 8 3 11.6 4.4 13 8 9.4l3.6 3.6 1.4-1.4L9.4 8z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-green" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zM6.9 12L3 8.1l1.4-1.4 2.5 2.5 5.7-5.7L14 4.9 6.9 12z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-yellow" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zM9 13H7v-2h2v2zm0-4H7V3h2v6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-2 11.6L11.6 13 8 9.4 4.4 13 3 11.6 6.6 8 3 4.4 4.4 3 8 6.6 11.6 3 13 4.4 9.4 8l3.6 3.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNo_Checked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-green" d="M0 8l2-2 4 4 8-8 2 2L6 14z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNo_Unchecked': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxrd-svg-red" d="M14 4l-2-2-4 4-4-4-2 2 4 4-4 4 2 2 4-4 4 4 2-2-4-4z"/></svg>',
    'dxrd-svg-color_gear': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-white" d="M30 18v-4l-4.4-.7c-.2-.8-.5-1.5-.9-2.1l2.6-3.6-2.8-2.8-3.6 2.6c-.7-.4-1.4-.7-2.1-.9L18 2h-4l-.7 4.4c-.8.2-1.5.5-2.1.9L7.5 4.7 4.7 7.5l2.6 3.6c-.4.7-.7 1.4-.9 2.1L2 14v4l4.4.7c.2.8.5 1.5.9 2.1l-2.6 3.6 2.8 2.8 3.6-2.6c.7.4 1.4.7 2.1.9L14 30h4l.7-4.4c.8-.2 1.5-.5 2.1-.9l3.6 2.6 2.8-2.8-2.6-3.6c.4-.7.7-1.4.9-2.1L30 18zm-14 2c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/></svg>',
    'dxrd-svg-errorPanel-collectErrors': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1.1 7C1.6 3.6 4.5 1 8 1c2 0 3.7.8 5 2.1V2c0-.5.5-1 1-1s1 .5 1 1v5h-5c-.5 0-1-.5-1-1s.5-1 1-1h2c-.9-1.2-2.3-2-4-2-2.4 0-4.4 1.7-4.9 4h-2zm11.8 2c-.5 2.3-2.5 4-4.9 4-1.6 0-3.1-.8-4-2h2c.5 0 1-.5 1-1s-.5-1-1-1H1v5c0 .5.5 1 1 1s1-.5 1-1v-1.1C4.3 14.2 6 15 8 15c3.5 0 6.4-2.6 6.9-6h-2z"/></svg>',
    'dxrd-svg-errorPanel-error': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm3.9 10.4c.2.2.2.5 0 .7l-.7.7c-.2.2-.5.2-.7 0L12 13.4l-2.4 2.4c-.2.2-.6.2-.7.1l-.7-.7c-.2-.2-.2-.6-.1-.8l2.4-2.4-2.4-2.4c-.1-.2-.1-.6 0-.7l.7-.7c.2-.2.6-.2.8-.1l2.4 2.4 2.4-2.4c.2-.1.6-.1.7 0l.7.7c.2.2.2.6.1.8L13.4 12l2.5 2.4z"/></svg>',
    'dxrd-svg-errorPanel-information': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm-.5 3h1c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5h-1c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5zm1 10h-1c-.3 0-.5-.2-.5-.5v-5c0-.3.2-.5.5-.5h1c.3 0 .5.2.5.5v5c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-errorPanel-notification': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 19h4c0 1.1-.9 2-2 2s-2-.9-2-2zm7.6-4.8c-.4-.4-.6-.9-.6-1.4v-.9c-2.3-.5-4-2.5-4-4.9 0-.6.1-1.2.3-1.8-.1 0-.2-.1-.3-.1V4c0-.6-.4-1-1-1s-1 .4-1 1v1.1c-2.3.5-4 2.5-4 4.9v2.8c0 .5-.2 1-.6 1.4l-2.1 2.1c-.6.6-.2 1.7.7 1.7h14c.9 0 1.3-1.1.7-1.7l-2.1-2.1z"/><circle cx="18" cy="7" r="4" fill="#d03044"/></svg>',
    'dxrd-svg-errorPanel-notification_empty': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 19h4c0 1.1-.9 2-2 2s-2-.9-2-2zm9.7-2.7l-2.1-2.1c-.4-.4-.6-.9-.6-1.4V10c0-2.4-1.7-4.4-4-4.9V4c0-.6-.4-1-1-1s-1 .4-1 1v1.1c-2.3.5-4 2.5-4 4.9v2.8c0 .5-.2 1-.6 1.4l-2.1 2.1c-.6.6-.2 1.7.7 1.7h14c.9 0 1.3-1.1.7-1.7z"/></svg>',
    'dxrd-svg-errorPanel-warning': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.8 18.3L12.9 3.5c-.4-.7-1.4-.7-1.8 0L2.2 18.3c-.5.7 0 1.7.9 1.7h17.8c.9 0 1.4-1 .9-1.7zM12.5 17h-1c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h1c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5zm0-4h-1c-.3 0-.5-.2-.5-.5v-4c0-.3.2-.5.5-.5h1c.3 0 .5.2.5.5v4c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-bottommarginband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M2 4h2v8H2V4zm10-1h2V1.5c0-.3-.2-.5-.5-.5H12v2zM5 4v8h6V4H5zm0-3v2h6V1H5zm9 3h-2v8h2V4zM4 3V1H2.5c-.3 0-.5.2-.5.5V3h2z"/></g></svg>',
    'dxrd-svg-fieldlist-calcbool': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm18 8L8 18l-4-4v-4l4 4L18 4v4z"/></svg>',
    'dxrd-svg-fieldlist-calcdate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm11 18c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z"/><path class="dxd-icon-fill" d="M15 10h-3V7c0-.5-.4-1-1-1-.5 0-1 .4-1 1v4c0 .5.4 1 1 1h4c.5 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-fieldlist-calcdefault': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm17.6 5.8c-.2.1-.4.2-.7.2-.3 0-.5-.1-.7-.2-.2-.1-.2-.3-.2-.4 0-.2 0-.4.1-.6.1-.1.2-.2.2-.3 0-.1 0-.1-.1-.1s-.1-.1-.2-.1c-.4 0-.8.3-1.2.6-.7.6-1.4 2.1-1.8 3.1h2l-1 1.9h-1.6l-.8 2.3c-.6 1.7-1.1 2.8-1.6 3.6-.5.7-1.2 1.3-1.9 1.6-.7.4-1.6.6-2.5.6-.6 0-1-.1-1.3-.3-.2-.1-.3-.5-.3-.7s.2-1 1.2-1c.9 0 1 .8 1 1s-.1.3-.2.4-.2.1-.2.2l.1.1H6c.2 0 .4 0 .5-.1.4-.2.6-.5.8-.9.1-.2.4-.7.7-1.7l1.7-5H8l1-1.9h1.3c.2-.1.6-.9.7-1.1.8-1 1.4-1.7 2.2-2.2.9-.6 1.8-.8 2.9-.8.7 0 1.1.1 1.4.3.3.2.5.4.5.7s-.2.6-.4.8z"/></svg>',
    'dxrd-svg-fieldlist-calcfloat': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm8 16H2v-2h2v-4H2V8h2V6h2v8h2v2zm4 0h-2v-2h2v2zm8-8v2h-2v2h-2v2h4v2h-6v-4h2v-2h2V8h-4V6h6v2z"/></svg>',
    'dxrd-svg-fieldlist-calcinteger': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm6 16H4v-6H2V8h2V6h2v10zm6-9v3h-2v4h2v2H8v-6h2V8H8V6h4v1zm8 0v9h-6v-2h4v-2h-2v-2h2V8h-4V6h6v1z"/></svg>',
    'dxrd-svg-fieldlist-calcstring': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm10 18H4v-6h4v-2H4V8h6v10zm8-4.3V18h-6V4h2v6h4v3.7z"/><path class="dxd-icon-fill" d="M6 14h2v2H6zM14 12h2v4h-2z"/></svg>',
    'dxrd-svg-fieldlist-component': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 2C5.2 2 3 3.3 3 5v6c0 1.7 2.2 3 5 3s5-1.3 5-3V5c0-1.7-2.2-3-5-3zm0 4c-1.8 0-2.9-.8-3-1 .1-.2 1.2-1 3-1s2.9.8 3 1c-.1.2-1.2 1-3 1z"/></svg>',
    'dxrd-svg-fieldlist-components': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="st1"><path class="dxd-icon-fill" d="M8.3 9V7H11V3c0-1.7-2-3-4.5-3S2 1.3 2 3v5c0 1.7 2 3 4.5 3 2 0 3.6-.8 4.2-2H8.3zm-4-6c0-.4.9-1 2.3-1s2.3.6 2.3 1-1 1-2.4 1-2.2-.6-2.2-1z"/></g><path class="dxd-icon-fill" d="M10.5 5C8 5 6 6.3 6 8v5c0 1.7 2 3 4.5 3s4.5-1.3 4.5-3V8c0-1.7-2-3-4.5-3zm0 4c-1.4 0-2.2-.6-2.2-1s.9-1 2.3-1 2.3.6 2.3 1-1 1-2.4 1z"/></svg>',
    'dxrd-svg-fieldlist-detailband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M13.5 1h-11c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5zM12 12H4V3h8v9zm-2-6H6V5h4v1zm0 2H6V7h4v1zm0 2H6V9h4v1z"/></svg>',
    'dxrd-svg-fieldlist-detailreportband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5zM13 12H3V3h10v9z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M11 7H5V5h6v2zm0 1H5v2h6V8z"/></g></svg>',
    'dxrd-svg-fieldlist-formattingrule': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6.6 10H3V3h7v3h2V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v9c0 .5.5 1 1 1h6.6l-2-2z"/><path class="dxd-icon-fill" d="M15.3 7H6.7c-.6 0-.9.8-.5 1.2L10 12v4h2v-4l3.8-3.8c.4-.4.1-1.2-.5-1.2z"/></svg>',
    'dxrd-svg-fieldlist-formattingrules': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9 12.4L7.6 11H5V5h6v1h2V3.5c0-.3-.2-.5-.5-.5H10V.5c0-.3-.2-.5-.5-.5h-9C.2 0 0 .2 0 .5v9c0 .3.2.5.5.5H3v2.5c0 .3.2.5.5.5H9v-.6zM3 3.5V8H2V2h6v1H3.5c-.3 0-.5.2-.5.5z"/><path class="dxd-icon-fill" d="M15.3 7H6.7c-.6 0-.9.8-.5 1.2L10 12v4h2v-4l3.8-3.8c.4-.4.1-1.2-.5-1.2z"/></svg>',
    'dxrd-svg-fieldlist-groupfooterband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8.5 14h-6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8.5 5h-6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5zM14 6H7v1h7V6zm0 2H7v1h7V8z"/></g></svg>',
    'dxrd-svg-fieldlist-groupheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9 4.5v-3c0-.3-.2-.5-.5-.5h-6c-.3 0-.5.2-.5.5v3c0 .3.2.5.5.5h6c.3 0 .5-.2.5-.5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8.5 14h-6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5zM7 9h7V8H7v1zm0-3v1h7V6H7z"/></g></svg>',
    'dxrd-svg-fieldlist-master_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm-1 4H6v1h4V6zm0 2H6v1h4V8zm0 2H6v1h4v-1zm3.5-8H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-fieldlist-pagefooterband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 10h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2zm-1-4V4H5v5h6zM4 1H2.5c-.3 0-.5.2-.5.5V3h2V1zm7 0H5v2h6V1zM4 4H2v8h2V4zm9.5-3H12v2h2V1.5c0-.3-.2-.5-.5-.5zM12 12h2V4h-2v8z"/></g></svg>',
    'dxrd-svg-fieldlist-pageheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 4h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2zM4 1H2.5c-.3 0-.5.2-.5.5V3h2V1zm7 0H5v2h6V1zM4 4H2v8h2V4zm9.5-3H12v2h2V1.5c0-.3-.2-.5-.5-.5zM5 7v5h6V7H5zm7 5h2V4h-2v8z"/></g></svg>',
    'dxrd-svg-fieldlist-parametergroup': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 6h6.5c.3 0 .5.2.5.5v6c0 .3-.2.5-.5.5h-6c-.3 0-.5-.2-.5-.5V6zm-1-.5c0-.3.2-.5.5-.5H10V3.5c0-.3-.2-.5-.5-.5h-6c-.3 0-.5.2-.5.5v6c0 .3.2.5.5.5H5V5.5z"/></svg>',
    'dxrd-svg-fieldlist-parameterseparator': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M13.5 9h-11c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h11c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-reportfooterband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm2.5 0H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/><path class="dxd-icon-fill" d="M5 10h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5h6v4H5z"/></g></svg>',
    'dxrd-svg-fieldlist-reportheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm2.5 0H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/><path class="dxd-icon-fill" d="M5 5h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 8h6v4H5z"/></g></svg>',
    'dxrd-svg-fieldlist-stylemodel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8.4 11l1.6 1.6C9.2 15 6.9 15 5 15c1.8-1.8 1.9-4 3.4-4zm-.3-1H3V3h7v4.7l2-2V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v9c0 .5.5 1 1 1h3.9c.5-.9 1.1-1.8 2.2-2zm7.8-3.6l-1.3-1.3c-.2-.1-.4-.1-.6 0L9.1 10c-.2.2-.2.4 0 .5l1.3 1.3c.2.2.4.2.5 0l5-4.8c.1-.2.1-.4 0-.6z"/></svg>',
    'dxrd-svg-fieldlist-styles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 16c1.9 0 4.2 0 5-2.4L8.4 12c-1.5 0-1.6 2.2-3.4 4zM8.1 11H5V5h6v2.7l2-2V3.5c0-.3-.2-.5-.5-.5H10V.5c0-.3-.2-.5-.5-.5h-9C.2 0 0 .2 0 .5v9c0 .3.2.5.5.5H3v2.5c0 .3.2.5.5.5h2.4c.5-.9 1.1-1.8 2.2-2zM3 3.5V8H2V2h6v1H3.5c-.3 0-.5.2-.5.5zM15.9 7.4l-1.3-1.3c-.2-.1-.4-.1-.6 0L9.1 11c-.2.2-.2.4 0 .5l1.3 1.3c.2.2.4.2.5 0l5-4.8c.1-.2.1-.4 0-.6z"/></svg>',
    'dxrd-svg-fieldlist-subband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M9.5 7h-8c-.2 0-.5-.2-.5-.5v-4c0-.3.3-.5.5-.5h8c.3 0 .5.2.5.5v4c0 .3-.2.5-.5.5z"/></g><path class="dxd-icon-fill" d="M14.5 14h-8c-.3 0-.5-.2-.5-.5v-4c0-.3.2-.5.5-.5h8c.2 0 .5.2.5.5v4c0 .3-.3.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-topmarginband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4 3H2V1.5c0-.3.2-.5.5-.5H4v2zm7-2H5v2h6V1zm2.5 0H12v2h2V1.5c0-.3-.2-.5-.5-.5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2zm-1-1V4H5v8h6zM4 4H2v8h2V4zm8 8h2V4h-2v8z"/></g></svg>',
    'dxrd-svg-fieldlist-verticaldetailband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M7 5h2v6H7z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 5h2v6H1V5zm0 8.5c0 .3.2.5.5.5H3v-2H1v1.5zm3 .5h8v-2H4v2zm2-9H4v6h2V5zM1 2.5V4h2V2H1.5c-.3 0-.5.2-.5.5zM14.5 2H13v2h2V2.5c0-.3-.2-.5-.5-.5zM13 11h2V5h-2v6zm0 3h1.5c.3 0 .5-.2.5-.5V12h-2v2zm-3-3h2V5h-2v6zM4 4h8V2H4v2z"/></g></svg>',
    'dxrd-svg-fieldlist-verticalheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4h2v6H4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 4h2v6H1V4zm0 8.5c0 .3.2.5.5.5H3v-2H1v1.5zm3 .5h8v-2H4v2zM1 1.5V3h2V1H1.5c-.3 0-.5.2-.5.5zM14.5 1H13v2h2V1.5c0-.3-.2-.5-.5-.5zM13 10h2V4h-2v6zm0 3h1.5c.3 0 .5-.2.5-.5V11h-2v2zm-6-3h5V4H7v6zM4 3h8V1H4v2z"/></g></svg>',
    'dxrd-svg-fieldlist-verticaltotalband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M10 4h2v6h-2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 4h2v6H1V4zm0 8.5c0 .3.2.5.5.5H3v-2H1v1.5zm3 .5h8v-2H4v2zm5-9H4v6h5V4zM1 1.5V3h2V1H1.5c-.3 0-.5.2-.5.5zM14.5 1H13v2h2V1.5c0-.3-.2-.5-.5-.5zM13 10h2V4h-2v6zm0 3h1.5c.3 0 .5-.2.5-.5V11h-2v2zM4 3h8V1H4v2z"/></g></svg>',
    'dxrd-svg-fieldlist-xrbarcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M2 14H0V2h2v12zM9 2H7v12h2V2zm3 0h-2v12h2V2zm4 0h-3v12h3V2zM6 2H3v12h3V2z"/></svg>',
    'dxrd-svg-fieldlist-xrcharactercomb': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 3H1c-.5 0-1 .5-1 1v15c0 .5.5 1 1 1h22c.5 0 1-.5 1-1V4c0-.5-.5-1-1-1zM11 18H2V5h9v13zm11 0h-9V5h9v13zM8.3 9.6c.5.4.7 1.1.7 2V15H7.6v-.7c-.3.6-.8.8-1.6.8-.4 0-.8-.1-1.1-.2-.3-.2-.5-.4-.7-.6-.2-.3-.2-.6-.2-.9 0-.6.2-1 .6-1.3.4-.3.9-.5 1.7-.5h1.2c0-.4-.1-.7-.3-.9-.2-.2-.5-.3-.9-.3-.3 0-.6 0-.8.1-.3.1-.5.2-.7.4l-.7-1.2c.3-.2.6-.4 1-.5C5.6 9 6 9 6.4 9c.9 0 1.5.2 1.9.6zM7 13.7c.2-.1.4-.3.4-.6v-.6h-1c-.6 0-1 .2-1 .7 0 .2.1.4.2.5.2.1.4.2.6.2.4 0 .6 0 .8-.2zm12.4-4.4c.4.3.7.6.9 1.1.2.5.3 1 .3 1.6 0 .6-.1 1.2-.3 1.6-.2.5-.5.8-.9 1.1-.4.3-.9.4-1.4.4-.7 0-1.2-.3-1.6-.8v.7H15V7h1.5v2.7c.4-.5.9-.7 1.6-.7.4-.1.9.1 1.3.3zm-.7 3.9c.2-.3.4-.7.4-1.2s-.1-.9-.4-1.2c-.2-.3-.6-.4-.9-.4-.4 0-.7.1-.9.4-.2.3-.4.7-.4 1.2s.1.9.4 1.2c.2.3.6.5.9.5.4 0 .7-.2.9-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrchart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M10 5.5v9c0 .3-.2.5-.5.5h-3c-.3 0-.5-.2-.5-.5v-9c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5zm-9 4v5c0 .3.2.5.5.5h3c.3 0 .5-.2.5-.5v-5c0-.3-.2-.5-.5-.5h-3c-.3 0-.5.2-.5.5zM14.5 1h-3c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h3c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrcheckbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M7.4 11L3.7 7.3l1.4-1.4 2.3 2.3L14.6 1 16 2.4z"/><path class="dxd-icon-fill" d="M13 6.8V13H3V3h8.2l2-2H1.5c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5V4.8l-2 2z"/></svg>',
    'dxrd-svg-fieldlist-xrcrossbandbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15.5 7H.5C.2 7 0 6.8 0 6.5v-2c0-.3.2-.5.5-.5h15c.3 0 .5.2.5.5v2c0 .3-.2.5-.5.5zm.5 4.5v-2c0-.3-.2-.5-.5-.5H.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5h15c.3 0 .5-.2.5-.5z"/></g><path class="dxd-icon-fill" d="M14 9h-2V7h2v2zM4 4V2h8v2h2V0H2v4h2zM2 9h2V7H2v2zm10 3v2H4v-2H2v4h12v-4h-2z"/></svg>',
    'dxrd-svg-fieldlist-xrcrossbandline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15.5 7H.5C.2 7 0 6.8 0 6.5v-2c0-.3.2-.5.5-.5h15c.3 0 .5.2.5.5v2c0 .3-.2.5-.5.5zm.5 4.5v-2c0-.3-.2-.5-.5-.5H.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5h15c.3 0 .5-.2.5-.5z"/></g><path class="dxd-icon-fill" d="M7 0h2v4H7zM7 7h2v2H7zM7 12h2v4H7z"/></svg>',
    'dxrd-svg-fieldlist-xrcrosstab': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14 15H2c-.9 0-1.3-1.1-.7-1.7L6.6 8 1.3 2.7C.7 2.1 1.1 1 2 1h12v3h-2V3H4.4l5 5-5 5H12v-1h2v3z"/></svg>',
    'dxrd-svg-fieldlist-xrgauge': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 8c0 .8.3 1.6.9 2.1l-1.4 1.4C3.6 10.6 3 9.4 3 8c0-2.8 2.2-5 5-5 .6 0 1.3.1 1.8.4L8.2 5H8C6.3 5 5 6.3 5 8zm6-.2V8c0 .8-.3 1.6-.9 2.1l1.4 1.4c.9-.9 1.5-2.1 1.5-3.5 0-.6-.1-1.3-.4-1.8L11 7.8z"/></g><path class="dxd-icon-fill" d="M12 5c0-.6-.4-1-1-1-.3 0-.5.1-.7.3L8.5 6.1C8.3 6 8.2 6 8 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.2 0-.3-.1-.5l1.8-1.8c.2-.2.3-.4.3-.7z"/></svg>',
    'dxrd-svg-fieldlist-xrlabel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 12h-.9L9.5 1.3C9.4 1.1 9.2 1 9 1H6.9c-.2 0-.4.1-.5.3L2.3 12h-.8c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5h-.7l.7-2h4.8l.7 2h-.6c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4c.3 0 .5-.2.5-.5v-1c.1-.3-.1-.5-.4-.5zM6.3 8L8 3.2 9.6 8H6.3z"/></svg>',
    'dxrd-svg-fieldlist-xrline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path transform="rotate(-45.001 8 8)" class="dxd-icon-fill" d="M7-.5h2v17H7z"/><path class="dxd-icon-fill" d="M4.5 5h-3c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5zM14.5 15h-3c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-xrpagebreak': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1 7h2v2H1zM4 7h2v2H4zM7 7h2v2H7zM10 7h2v2h-2zM13 7h2v2h-2zM13 1v3H3V1H1v4.5c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5V1h-2zM13 15v-3H3v3H1v-4.5c0-.3.2-.5.5-.5h13c.3 0 .5.2.5.5V15h-2z"/></svg>',
    'dxrd-svg-fieldlist-xrpageinfo': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 11H3V3h8v2c.7 0 1.4.1 2 .3V1.5c0-.3-.2-.5-.5-.5h-11c-.3 0-.5.2-.5.5v11c0 .3.2.5.5.5h3.8c-.2-.6-.3-1.3-.3-2z"/><path class="dxd-icon-fill" d="M11 6c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm1 8h-2v-3h2v3zm0-4h-2V8h2v2z"/></svg>',
    'dxrd-svg-fieldlist-xrpanel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 13H3V3h10v10z"/></svg>',
    'dxrd-svg-fieldlist-xrpdfcontent': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 18h2v4c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1v-4h2v3h14v-3zM5 3h14v2h2V2c0-.5-.5-1-1-1H4c-.5 0-1 .5-1 1v3h2V3zm2.1 6.9h-1v1.7h1c.4 0 .6-.1.8-.2.2-.2.3-.4.3-.6 0-.3-.1-.5-.3-.6-.2-.2-.4-.3-.8-.3zM23 6v11H1V6h22zM9.4 10.8c0-.4-.1-.7-.3-1-.2-.2-.4-.4-.7-.6C8 9.1 7.6 9 7.2 9H5v5h1.2v-1.4h1c.4 0 .8-.1 1.2-.2.3-.1.6-.4.8-.6s.2-.6.2-1zm5.9.7c0-.5-.1-.9-.3-1.3-.2-.4-.6-.7-1-.9-.5-.2-.9-.3-1.5-.3h-2.3v5h2.3c.5 0 1-.1 1.5-.3.4-.2.7-.5 1-.9.2-.4.3-.8.3-1.3zM20 9h-3.8v5h1.2v-1.8h2.3v-.9h-2.3V9.9H20V9zm-7.5.9h-1.1V13h1.1c.5 0 .9-.1 1.2-.4.3-.3.5-.7.5-1.1 0-.5-.2-.9-.5-1.1-.3-.3-.7-.5-1.2-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrpdfsignature': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1.8 15c-.5 0-.8-.3-.8-.8 0-.2.1-.4.2-.6.4-.4.7-.8 1.1-1.1.3-.3.5-.6.8-.8-.5-1.2-.9-2.8-.9-4.3C2.2 3 4.5 1 6.7 1c1.5 0 2.6 1.7 2.6 3.9C9.3 6.6 8.1 8.6 5 12c.4.5.7.8 1 .8.9 0 1.3-.6 2-2 .4-.9 1-2.4 2.4-2.4 1.2 0 1.2 1.5 1.2 2.1v.9c.2-.2.5-.6.8-1l.1-.1c.6-.9 1.4-2 2.7-2 .5 0 .8.3.8.8s-.3.8-.8.8-.8.4-1.5 1.4l-.1.1c-.5.8-1.1 1.7-2.2 1.7-1.6 0-1.6-2-1.6-2.6v-.1c-.1.2-.3.6-.5.9-.6 1.3-1.4 3-3.3 3-.8 0-1.6-.4-2.2-1.2l-.9.9-.6.6c-.1.3-.3.4-.5.4zM6.7 2.6c-1.4 0-2.8 1.5-2.8 4.7 0 1 .2 2 .5 3C6.8 7.6 7.8 6 7.8 4.9 7.7 3.4 7 2.6 6.7 2.6z"/></svg>',
    'dxrd-svg-fieldlist-xrpicturebox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1H2c-.6 0-1 .4-1 1v12.5c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 13H3V3h10v10zm-3-9c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm-6 8V9l2-2 5 5H4z"/></svg>',
    'dxrd-svg-fieldlist-xrpivotgrid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14 15H2c-.9 0-1.3-1.1-.7-1.7L6.6 8 1.3 2.7C.7 2.1 1.1 1 2 1h12v3h-2V3H4.4l5 5-5 5H12v-1h2v3z"/></svg>',
    'dxrd-svg-fieldlist-xrrichtext': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M12 7.4V12H4V4h4.6l2-2H2.5c-.3 0-.5.2-.5.5v11c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5V5.4l-2 2z"/><path transform="rotate(-45.001 14.177 1.823)" class="dxd-icon-fill" d="M13 .4h2.3v2.8H13z"/><path class="dxd-icon-fill" d="M11.6 2.4L7 7v2h2l4.6-4.6z"/><g><path transform="rotate(-45.001 14.177 1.823)" class="dxd-icon-fill" d="M13 .4h2.3v2.8H13z"/><path class="dxd-icon-fill" d="M11.6 2.4L7 7v2h2l4.6-4.6z"/></g></svg>',
    'dxrd-svg-fieldlist-xrshape': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M10 5c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3zM4.3 8c-.2.6-.3 1.3-.3 2H2c-.5 0-1-.4-1-1V2c0-.6.5-1 1-1h7c.5 0 1 .4 1 1v2c-.7 0-1.4.1-2 .3V3H3v5h1.3z"/></svg>',
    'dxrd-svg-fieldlist-xrsparkline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 3v.6l-5 5-2-2-3 3V3h10zM3 13v-.6l3-3 2 2 5-5V13H3z"/></svg>',
    'dxrd-svg-fieldlist-xrsubreport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm-1 4H6v1h4V6zm0 2H6v1h4V8zm0 2H6v1h4v-1zm3.5-8H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrtable': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 13H3V3h10v10z"/><path class="dxd-icon-fill" d="M4 4h2v2H4zM7 4h2v2H7zM10 4h2v2h-2zM4 7h2v2H4zM7 7h2v2H7zM10 7h2v2h-2zM4 10h2v2H4zM7 10h2v2H7zM10 10h2v2h-2z"/></svg>',
    'dxrd-svg-fieldlist-xrtablecell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 6h4v4H6z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5H1V1h4v4zm5-4H6v4h4V1zm5 0h-4v4h4V1zM5 6H1v4h4V6zm10 0h-4v4h4V6zM5 11H1v4h4v-4zm5 0H6v4h4v-4zm5 0h-4v4h4v-4z"/></g></svg>',
    'dxrd-svg-fieldlist-xrtableofcontents': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 4h-2V2h2v2zm0 1h-2v2h2V5zm0 3h-2v2h2V8zm0 3h-2v2h2v-2z"/></g><path class="dxd-icon-fill" d="M9 4H1V2h8v2zm6-2h-2v2h2V2zM9 5H1v2h8V5zm6 0h-2v2h2V5zM9 8H1v2h8V8zm6 0h-2v2h2V8zm-6 3H1v2h8v-2zm6 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-fieldlist-xrtablerow': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1 6h14v4H1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5H1V1h4v4zm5-4H6v4h4V1zm5 0h-4v4h4V1zM5 11H1v4h4v-4zm5 0H6v4h4v-4zm5 0h-4v4h4v-4z"/></g></svg>',
    'dxrd-svg-fieldlist-xrzipcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 3H2V1.5c0-.3.2-.5.5-.5h2c.3 0 .5.2.5.5V3zM2 3H.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5H2V3zm3 3H2v2h3V6zm1.5-3H5v3h1.5c.3 0 .5-.2.5-.5v-2c0-.3-.2-.5-.5-.5zM2 8H.5c-.3 0-.5.2-.5.5v3c0 .3.2.5.5.5H2V8zm3 4H2v1.5c0 .3.2.5.5.5h2c.3 0 .5-.2.5-.5V12zm1.5-4H5v4h1.5c.3 0 .5-.2.5-.5v-3c0-.3-.2-.5-.5-.5zM13 3h-3V1.5c0-.3.2-.5.5-.5h2c.3 0 .5.2.5.5V3zm-3 0H8.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5H10V3zm3 3h-3v2h3V6zm1.5-3H13v3h1.5c.3 0 .5-.2.5-.5v-2c0-.3-.2-.5-.5-.5zM10 8H8.5c-.3 0-.5.2-.5.5v3c0 .3.2.5.5.5H10V8zm3 4h-3v1.5c0 .3.2.5.5.5h2c.3 0 .5-.2.5-.5V12zm1.5-4H13v4h1.5c.3 0 .5-.2.5-.5v-3c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-landscape': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34"><path class="dxd-icon-fill" d="M33 4H1c-.5 0-1 .5-1 1v24c0 .5.5 1 1 1h32c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 24H2V6h30v22z"/><g class="dxrd-svg-st2"><path class="dxd-icon-fill" d="M28 12H6v-2h22v2zm0 2H6v2h22v-2zm0 4H6v2h22v-2zm0 4H6v2h22v-2z"/></g></svg>',
    'dxrd-svg-menu-add_datasource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1zM9 0C5.1 0 2 1.5 2 3.5v10C2 15.4 5.1 17 9 17s7-1.6 7-3.5v-10c0-2-3.1-3.5-7-3.5zm0 2c2.9 0 4.4 1.1 4.5 1.5C13.4 3.8 11.9 5 9 5S4.6 3.8 4.5 3.4C4.6 3.1 6.1 2 9 2z"/></svg>',
    'dxrd-svg-menu-back': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 12l9-9 2 2-7 7 7 7-2 2z"/></svg>',
    'dxrd-svg-menu-exit': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 20c.6 0 1 .4 1 1 0 .5-.4 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h11c.6 0 1 .5 1 1 0 .6-.4 1-1 1H5v16h10zm4.3-12.7c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3H11c-.5 0-1 .5-1 1s.5 1 1 1h9.2l-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L24 12l-4.7-4.7z"/></svg>',
    'dxrd-svg-menu-localization': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 6h-8V4c0-.5-.5-1-1-1s-1 .5-1 1v2H3c-.5 0-1 .5-1 1s.5 1 1 1h11c0 2.5-.7 4.7-2 6.6-.8-1.1-1.3-2.4-1.7-3.8-.1-.5-.5-.8-1-.8-.6 0-1.1.6-1 1.2.4 1.8 1.2 3.5 2.3 4.9C8.9 17.9 6.6 19 4 19c-.6 0-1 .4-1 1s.4 1 1 1c3.1 0 5.9-1.3 8-3.3 2.1 2.1 4.9 3.3 8 3.3.6 0 1-.4 1-1s-.4-1-1-1c-2.6 0-4.9-1.1-6.7-2.8C15 13.9 16 11.1 16 8h5c.5 0 1-.5 1-1s-.5-1-1-1z"/></svg>',
    'dxrd-svg-menu-newreport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 8V3c0-.6-.4-1-1-1H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V9c0-.6-.4-1-1-1h-5zm4 12H4V4h10v5c0 .5.5 1 1 1h5v10z"/></svg>',
    'dxrd-svg-menu-new_via_wizard': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19.2 22H3c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h18c.5 0 1 .5 1 1v16.2l-2-2V4H4v16h13.2l2 2zm4.5 1.7c.4-.4.4-1 0-1.4l-7-7c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l7 7c.4.4 1 .4 1.4 0zm-6.2-10.4l-3.2 1-1 3.2c-.2.6-1 .8-1.4.2L10 15H6.6c-.7 0-1-.8-.6-1.3L8 11 6.9 7.9c-.2-.6.4-1.2 1-1L11.1 8l2.7-2c.5-.4 1.3 0 1.3.6V10l2.7 1.9c.4.4.3 1.2-.3 1.4zm-3-1.2L13 11V9l-1.6 1.2-1.8-.6.6 1.8L9 13h2l1.1 1.5.6-1.9 1.8-.5z"/></svg>',
    'dxrd-svg-menu-run_wizard': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.3 22.7l-6-6c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0l6 6c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0zm-2.9-9.9l-4.2 1.3-1.3 4.2c-.2.8-1.3 1-1.8.3L8.5 15H4c-.8 0-1.3-.9-.8-1.6l2.6-3.5-1.4-4.2c-.2-.8.5-1.5 1.3-1.3l4.2 1.4 3.5-2.6A1 1 0 0115 4v4.4l3.6 2.6c.7.5.5 1.6-.2 1.8zm-2.6-1.3l-2.8-2V6l-2.7 2.1L7 7l1.1 3.3L6 13h3.5l2 2.8 1-3.3 3.3-1z"/></svg>',
    'dxrd-svg-multi_select': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 12h12v12H12zM12 0H0v12h4V4h8z"/><path class="dxd-icon-fill" d="M18 6H6v12h4v-8h8z"/></svg>',
    'dxrd-svg-none': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomcenter': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M10 16h12v12H10z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomleft': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M4 16h12v12H4z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomright': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M16 16h12v12H16z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_middlecenter': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M10 10h12v12H10z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_middleleft': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M4 10h12v12H4z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_middleright': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M16 10h12v12H16z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_topcenter': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M10 4h12v12H10z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_topleft': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M4 4h12v12H4z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_topright': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="dxrd-svg-green" d="M16 4h12v12H16z"/></svg>',
    'dxrd-svg-pictureeditor-image_gallery': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="dxrd-svg-white" d="M22 2H2c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H3V4h18v16zM15.5 6C16.9 6 18 7.1 18 8.5S16.9 11 15.5 11 13 9.9 13 8.5 14.1 6 15.5 6zM15 19l-8-8-3 3v5h11z"/><g class="dxrd-svg-st2"><path class="dxrd-svg-white" d="M16.4 19H19l-4-4-1.3 1.3z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_cover': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-blue" d="M10 10h12v12H10z"/><path class="dxrd-svg-black" d="M6.2 4.8l2.1 2.1-1.4 1.4-2.1-2.1L2 9V2h7L6.2 4.8zm19.6 0l-2.1 2.1 1.4 1.4 2.1-2.1L30 9V2h-7l2.8 2.8zM6.2 27.2l2.1-2.1-1.4-1.4-2.1 2.1L2 23v7h7l-2.8-2.8zM23 30h7v-7l-2.8 2.8-2.1-2.1-1.4 1.4 2.1 2.1L23 30z"/></svg>',
    'dxrd-svg-pictureeditor-size_mode_normal': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-blue" d="M10 10h12v12H10z"/><g class="dxrd-svg-st0"><path class="dxrd-svg-black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/></g><path class="dxrd-svg-black" d="M28 22c-2.2 0-4 1.8-4 4v5c0 .6.4 1 1 1h6c.6 0 1-.4 1-1v-5c0-2.2-1.8-4-4-4zm0 2c1.1 0 2 .9 2 2h-4c0-1.1.9-2 2-2z"/></svg>',
    'dxrd-svg-pictureeditor-size_mode_squeeze': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-blue" d="M10 10h12v12H10z"/><path class="dxrd-svg-black" d="M28.2 26.8l2.1 2.1-1.4 1.4-2.1-2.1L24 31v-7h7l-2.8 2.8zm-24.4 0l-2.1 2.1 1.4 1.4 2.1-2.1L8 31v-7H1l2.8 2.8zM28.2 5.2l2.1-2.1-1.4-1.4-2.1 2.1L24 1v7h7l-2.8-2.8zM1 8h7V1L5.2 3.8 3.1 1.7 1.7 3.1l2.1 2.1L1 8z"/></svg>',
    'dxrd-svg-pictureeditor-size_mode_stretchimage': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-blue" d="M10 10h12v12H10z"/><path class="dxrd-svg-black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/></svg>',
    'dxrd-svg-pictureeditor-size_mode_zoomimage': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-blue" d="M10 10h12v12H10z"/><path class="dxrd-svg-black" d="M6.2 4.8l2.1 2.1-1.4 1.4-2.1-2.1L2 9V2h7L6.2 4.8zm19.6 0l-2.1 2.1 1.4 1.4 2.1-2.1L30 9V2h-7l2.8 2.8zM6.2 27.2l2.1-2.1-1.4-1.4-2.1 2.1L2 23v7h7l-2.8-2.8zM23 30h7v-7l-2.8 2.8-2.1-2.1-1.4 1.4 2.1 2.1L23 30z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_brush_options': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="dxrd-svg-brush-color" d="M2 21c8.5 8.6 11.8-4.5 19 0-8.4-8.6-11.8 4.6-19 0z"/><path class="dxrd-svg-white" d="M8 13l2 2c-2.5 4.2-4 4-8 4 2.5-2.5 3.3-6 6-6zm6-1l6.5-6.5c.3-.3.3-.7 0-1l-2-2c-.3-.3-.7-.3-1 0L11 9l3 3zm-5-1c-.3.3-.3.7 0 1l2 2c.3.3.7.3 1 0l1-1-3-3-1 1z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_clear': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="dxrd-svg-white" d="M19 5c.6 0 1 .4 1 1v1H4V6c0-.6.4-1 1-1h5V4c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v1h5zm0 3v12c0 .6-.4 1-1 1H6c-.6 0-1-.4-1-1V8h14zM9 10H7v9h2v-9zm4 0h-2v9h2v-9zm4 0h-2v9h2v-9z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_open': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g class="dxrd-svg-st075"><path class="dxrd-svg-white" d="M7.9 11.9c.4-.6 1-.9 1.7-.9H19V8.7c0-.4-.3-.7-.7-.7H10V5.7c0-.4-.3-.7-.7-.7H3.7c-.4 0-.7.3-.7.7v14l4.9-7.8z"/></g><path class="dxrd-svg-white" d="M9.6 12h13.2c.5 0 .9.6.6 1.1l-4 6.5c-.2.3-.5.5-.8.5H4l4.7-7.5c.2-.4.5-.6.9-.6z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_reset': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="dxrd-svg-white" d="M12 3C9.5 3 7.3 4 5.6 5.6L3 3v8h8L7.8 7.8C8.9 6.7 10.3 6 12 6c3.3 0 6 2.7 6 6s-2.7 6-6 6c-2.6 0-4.8-1.7-5.6-4H3.2c.9 4 4.5 7 8.8 7 5 0 9-4 9-9s-4-9-9-9z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="dxrd-svg-white" d="M20 12V4h-8l3 3-8 8-3-3v8h8l-3-3 8-8z"/></svg>',
    'dxrd-svg-portrait': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 34 34"><path class="dxd-icon-fill" d="M29 0H5c-.5 0-1 .5-1 1v32c0 .5.5 1 1 1h24c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 32H6V2h22v30z"/><g class="dxrd-svg-st2"><path class="dxd-icon-fill" d="M24 8H10V6h14v2zm0 2H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2z"/></g></svg>',
    'dxrd-svg-preview-breadcrumbs_seperator': '<svg data-bind="svgAttrs" width="11" height="9" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M6.527 9l-.766-.756 3.152-3.152H.75V4h8.163L5.761.857 6.527.09l4.455 4.454L6.527 9z"/></svg>',
    'dxrd-svg-preview-export-export-to-csv': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v11h10v-7l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3zM0 3v7h13V3H0zm4 2H2v3h2v1H2V8H1V5h1V4h2v1zm4 0H6v1h1v1h1v1H7v1H5V8h2V7H6V6H5V5h1V4h2v1zm4 3h-1v1h-1V8H9V4h1v4h1V4h1v4z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4z"/></svg>',
    'dxrd-svg-preview-export-export-to-html': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h19V3H0zm4 6H3V7H2v2H1V4h1v2h1V4h1v5zm4-4H7v4H6V5H5V4h3v1zm6 4h-1V6h-1v1h-1V6h-1v3H9V4h1v1h1v1h1V5h1V4h1v5zm4 0h-3V4h1v4h2v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-image': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm2 6H1V4h1v5zm6 0H7V6H6v1H5V6H4v3H3V4h1v1h1v1h1V5h1V4h1v5zm5-4h-3v3h2V7h1v2h-3V8H9V5h1V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-mht': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1h1v2H3V7H2v2H1V4h2v1h1v1zm4-1H7v4H6V5H5V4h3v1zm4 0h-2v1h1v1h-1v2H9V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-pdf': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1H2v2H1V4h2v1h1v1zm4 2H7v1H5V4h2v1h1v3zm4-3h-2v1h1v1h-1v2H9V4h3v1z"/><path class="dxd-icon-fill" d="M6 5h1v3H6z"/></svg>',
    'dxrd-svg-preview-export-export-to-rtf': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm6 6H5V6H4v1H3V6H2v3H1V4h1v1h1v1h1V5h1V4h1v5zm4 0H9V7H8v2H7V4h1v2h1V4h1v5zm4-4h-1v4h-1V5h-1V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-txt': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM18 3H0v7h19V3h-1zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1zm4 1h-1v1h1v2h-1V7h-1v2h-1V7h1V6h-1V4h1v2h1V4h1v2z"/></svg>',
    'dxrd-svg-preview-export-export-to-xls': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM12.3 3H0v7h13V3h-.7zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-xlsx': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h13V3H0zm4 2H3v4H2V5H1V4h3v1zm4 1H7v1h1v2H7V7H6v2H5V7h1V6H5V4h1v2h1V4h1v2zm4-1h-1v4h-1V5H9V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7.7 9.1L11 5.8V16c0 .6.4 1 1 1s1-.4 1-1V5.8l3.3 3.3c.4.4 1 .4 1.4 0s.4-1 0-1.4L12 2 6.3 7.7c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0zM22 16v4c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-4c0-.5.5-1 1-1s1 .5 1 1v3h16v-3c0-.5.5-1 1-1s1 .5 1 1z"/></svg>',
    'dxrd-svg-preview-export-Export': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 10l-4-4v2h-1.4C11.8 8 8 11.1 8 15.9V18c1-4.2 4.6-6 8.6-6H18v2l4-4z"/><path class="dxd-icon-fill" d="M18 22H4V2h14l2 2V0H2v24h18v-8l-2 2z"/></svg>',
    'dxrd-svg-preview-first_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7 19c-.6 0-1-.4-1-1V6c0-.5.4-1 1-1 .5 0 1 .4 1 1v12c0 .6-.4 1-1 1zm11.7-.3c.4-.4.4-1 0-1.4L13.4 12l5.3-5.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L10.6 12l6.7 6.7c.4.4 1 .4 1.4 0z"/></svg>',
    'dxrd-svg-preview-last_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6v12c0 .5-.5 1-1 1s-1-.5-1-1V6c0-.5.5-1 1-1s1 .5 1 1zM5.3 5.3c-.4.4-.4 1 0 1.4l5.3 5.3-5.3 5.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l6.7-6.7-6.7-6.7c-.4-.4-1-.4-1.4 0z"/></svg>',
    'dxrd-svg-preview-multi_page_preview': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 1H2c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM9 9H3V3h6v6zm13-8h-8c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm-1 8h-6V3h6v6zm-11 4H2c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1v-8c0-.5-.5-1-1-1zm-1 8H3v-6h6v6z"/></svg>',
    'dxrd-svg-preview-next_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M9.7 5.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l5.3 5.3-5.3 5.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l6.7-6.7-6.7-6.7z"/></svg>',
    'dxrd-svg-preview-previous_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14.3 18.7L7.6 12l6.7-6.7c.4-.4 1-.4 1.4 0 .4.4.4 1 0 1.4L10.4 12l5.3 5.3c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0z"/></svg>',
    'dxrd-svg-preview-print': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 9c0-.6-.5-1-1-1h-3V2c0-.5-.5-1-1-1H7c-.6 0-1 .5-1 1v6H3c-.5 0-1 .4-1 1v10h4v2c0 .5.4 1 1 1h10c.5 0 1-.5 1-1v-2h4V9zM8 3h8v5H8V3zm8 17H8v-5h8v5zm4-3h-2v-4H6v4H4v-7h16v7z"/></svg>',
    'dxrd-svg-preview-print_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M3 10h16v1h2V9c0-.5-.5-1-1-1h-3V2c0-.5-.5-1-1-1H6c-.5 0-1 .5-1 1v6H2c-.5 0-1 .5-1 1v10h11v-2H3v-7zm4-7h8v5H7V3zm16 9h-9c-.5 0-1 .5-1 1v10c0 .5.5 1 1 1h9c.5 0 1-.5 1-1V13c0-.5-.5-1-1-1zm-1 10h-7v-8h7v8zM5 13h7v2H5v-2z"/></svg>',
    'dxrd-svg-preview-print_preview': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 4l-4-4v4zM21.7 22.3l-4.5-4.5c.5-.8.8-1.8.8-2.8 0-2.8-2.2-5-5-5s-5 2.2-5 5 2.2 5 5 5c1 0 2-.3 2.8-.8l4.5 4.5c.4.4 1 .4 1.4 0s.4-1 0-1.4zM13.1 18c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3z"/><path class="dxd-icon-fill" d="M13 8c2 0 3.7.8 5 2.1V6h-6V0H0v20h8.1C6.8 18.7 6 17 6 15c0-3.9 3.1-7 7-7z"/></svg>',
    'dxrd-svg-preview-report_designer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6l-4-4v4h4zM14 18h2l8-8-2-2-8 8z"/><path class="dxd-icon-fill" d="M12 20v-4l6-6V8h-6V2H0v20h18v-4l-2 2h-4zm-6-4c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/><path class="dxd-icon-fill" d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2H6v-2z"/></svg>',
    'dxrd-svg-preview-search': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.7 20.3l-5.4-5.4c1.1-1.4 1.7-3.1 1.7-4.9 0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.8 0 3.5-.6 4.9-1.7l5.4 5.4c.4.4 1 .4 1.4 0s.4-1 0-1.4zM4 10c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z"/></svg>',
    'dxrd-svg-preview-signature_img_placeholder': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 150 95" fill="none"><path fill="#F66" fill-opacity=".7" fill-rule="evenodd" d="M98 47.5C98 59.926 87.926 70 75.5 70S53 59.926 53 47.5 63.074 25 75.5 25 98 35.074 98 47.5zm-6.818 0c0 8.66-7.021 15.682-15.682 15.682-3.02 0-5.842-.854-8.236-2.334l21.584-21.584a15.608 15.608 0 012.334 8.236zm-28.803 8.59L84.09 34.38a15.608 15.608 0 00-8.591-2.56c-8.66 0-15.682 7.02-15.682 15.681 0 3.172.942 6.123 2.56 8.59z" clip-rule="evenodd"/><path stroke="#fff" stroke-width="2" d="M1 1h148v93H1z"/></svg>',
    'dxrd-svg-preview-single_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6V2c0-.6-.4-1-1-1H2c-.5 0-1 .5-1 1v20c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V7c0-.6-.4-1-1-1h-4zm3 15H3V3h13v4c0 .5.5 1 1 1h4v13z"/></svg>',
    'dxrd-svg-preview-sort_asc': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 11 11" xml:space="preserve"><path class="dxd-icon-fill" d="M0 7l5-5 5 5z"/></svg>',
    'dxrd-svg-preview-sort_desc': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 11 11" xml:space="preserve"><path class="dxd-icon-fill" d="M10 3L5 8 0 3z"/></svg>',
    'dxrd-svg-reportexplorer-component': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2C7.6 2 4 3.8 4 6v12c0 2.2 3.6 4 8 4s8-1.8 8-4V6c0-2.2-3.6-4-8-4zm0 6C8.1 8 6 6.5 6 6s2.1-2 6-2 6 1.5 6 2-2.1 2-6 2z"/></svg>',
    'dxrd-svg-reportexplorer-components': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 11c0-2.5 2.4-4.3 6-4.9V3c0-1.7-2.7-3-6-3S2 1.3 2 3v10c0 1.7 2.7 3 6 3v-5zm0-9c2.1 0 3.4.6 3.9 1-.5.4-1.8 1-3.9 1s-3.4-.6-3.9-1c.5-.4 1.8-1 3.9-1zm8 6c-3.3 0-6 1.3-6 3v10c0 1.7 2.7 3 6 3s6-1.3 6-3V11c0-1.7-2.7-3-6-3zm0 4c-2.1 0-3.4-.6-3.9-1 .5-.4 1.8-1 3.9-1s3.4.6 3.9 1c-.5.4-1.8 1-3.9 1z"/></svg>',
    'dxrd-svg-reportexplorer-formatting_rule': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 10h6V2H2v18h12v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
    'dxrd-svg-reportexplorer-formatting_rules': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 0H0v16h2V2h10z"/><path class="dxd-icon-fill" d="M10 10h6V4H4v16h10v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
    'dxrd-svg-reportexplorer-style': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V2H0v18h6zm5.4-6.4c-.1.3-.2.4 0 0zM21.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM12.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.3.3-.6.8-.8 1.3-.2.9-.7 1.7-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.3-.7-.5-1-.8z"/></svg>',
    'dxrd-svg-reportexplorer-styles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 0v2H2v14H0V0z"/><path class="dxd-icon-fill" d="M8 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V4H4v16h4zm5.4-6.4c-.1.3-.2.4 0 0zM23.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM14.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.4.4-.6.9-.8 1.4-.3.9-.7 1.6-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.4-.7-.6-1-.9z"/></svg>',
    'dxrd-svg-reportexplorer-tablecell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 2v20h20V2H2zm18 6h-4v2h4v4h-4v2h4v4h-4v-4h-2v4h-4v-4H8v4H4v-4h4v-2H4v-4h4V8H4V4h4v4h2V4h4v4h2V4h4v4z"/></svg>',
    'dxrd-svg-reportexplorer-tablerow': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 8H2v8h20V8h-6zm-8 6H4v-4h4v4zm6 0h-4v-4h4v4zm6 0h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M4 8V4h4v4h2V4h4v4h2V4h4v4h2V2H2v6zM20 16v4h-4v-4h-2v4h-4v-4H8v4H4v-4H2v6h20v-6z"/></svg>',
    'dxrd-svg-series-area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 20v-4l8-8 4 4 8-8v16z"/></svg>',
    'dxrd-svg-series-area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M12 8L8 4l-8 8v4h6v-6h14V0z"/></svg>',
    'dxrd-svg-series-boxplot': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"><path fill="#606060" fill-rule="evenodd" d="M15 0h6v2h-2v4h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v3h2v2h-6v-2h2v-3h-2a2 2 0 01-2-2V8a2 2 0 012-2h2V2h-2V0zm6 8h-6v6h6V8zM3 6h6v2H7v3h2a2 2 0 012 2v4a2 2 0 01-2 2H7v3h2v2H3v-2h2v-3H3a2 2 0 01-2-2v-4a2 2 0 012-2h2V8H3V6zm0 7h6v4H3v-4z" clip-rule="evenodd"/><path fill="#606060" d="M7 3H5v2h2V3zM5 0h2v2H5V0zm14 22h-2v2h2v-2z"/></svg>',
    'dxrd-svg-series-bubbles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><circle class="dxd-icon-fill" cx="8" cy="4" r="2"/><circle class="dxd-icon-fill" cx="16" cy="10" r="4"/><circle class="dxd-icon-fill" cx="7" cy="19" r="3"/></svg>',
    'dxrd-svg-series-candle_stick': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 4V2h-2v2h-2v16h2v2h2v-2h2V4h-2zm0 14h-2V6h2v12zM8 2H6v2H4v16h2v2h2v-2h2V4H8z"/></svg>',
    'dxrd-svg-series-doughnut': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M5.1 10C5.5 7 7 5.5 10 5.1V0C5 .5.5 5 0 10h5.1zM12 5.1c3 .5 5 2.9 5 5.9 0 1.3-.4 2.5-1.1 3.5l3.6 3.6c1.5-2 2.5-4.4 2.5-7.1C22 5.3 18 .5 12 0v5.1zM14.5 15.9c-1 .7-2.2 1.1-3.5 1.1-3 0-5.4-2-5.9-5H0c.5 6 5.2 10 11 10 2.7 0 5.1-1 7-2.6l-3.5-3.5z"/></svg>',
    'dxrd-svg-series-doughnut3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2.5v-5.9L22 12zm0 8h-2v-6h2v6zM10 4.9V0C5 .5.5 5 0 10h5c.5-3 2-4.6 5-5.1zM12 0v4.9c2 .4 4.5 2.1 4.9 5.1h5C21.5 5 17 .5 12 0zM5.1 12H0c.4 5 4 7.9 8 9.1v-5.3C6 14.9 5.4 14 5.1 12z"/></svg>',
    'dxrd-svg-series-full_stacked_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2v14L12 6l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 10L2 20v2h20V8l-6 6z"/></svg>',
    'dxrd-svg-series-full_stacked_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM14 8l6-6V0H0v14L10 4z"/><path class="dxd-icon-fill" d="M10 8L0 18v2h8v-8h6zM20 6l-6 6h6z"/></svg>',
    'dxrd-svg-series-full_stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4h4v10H4zM10 4h4v6h-4zM10 12h4v8h-4zM16 4h4v8h-4zM16 14h4v6h-4zM4 16h4v4H4z"/></svg>',
    'dxrd-svg-series-full_stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0h4v10H2zM8 0h4v6H8zM8 8h4v4H8zM14 0h4v8h-4zM14 10h4v2h-4zM2 12h4v4H2zM8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
    'dxrd-svg-series-full_stacked_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h20v2H2zM12 8L2 18v4l10-10 4 4 6-6V6l-6 6z"/></svg>',
    'dxrd-svg-series-full_stacked_line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h20v2H0z"/><path class="dxd-icon-fill" d="M12 12h4l4-4V4l-6 6-4-4L0 16v4l10-10z"/></svg>',
    'dxrd-svg-series-full_stacked_spline_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 11.9c1.8 0 2.6 1.3 3.3 2.3S6.5 16 8 16c1.4 0 2.6-2.1 3.7-4.2C13.3 9.1 14.9 6 18 6c1.5 0 2.8.7 4 1.8V2H2v9.9z"/><path class="dxd-icon-fill" d="M18 8c-1.9 0-3.2 2.4-4.5 4.7C12.1 15.3 10.6 18 8 18s-3.7-1.6-4.4-2.7C3 14.3 2.7 14 2 14v8h20V10.7C20.8 9.3 19.4 8 18 8z"/></svg>',
    'dxrd-svg-series-full_stacked_spline_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM16 4c1.5 0 2.8.7 4 1.8V0H0v9.9c1.8 0 2.6 1.3 3.3 2.3C4 13.2 4.5 14 6 14c1.4 0 2.6-2.1 3.7-4.2C11.3 7.1 12.9 4 16 4z"/><path class="dxd-icon-fill" d="M11.5 10.8l-.6 1.2H20V8.7C18.8 7.3 17.4 6 16 6c-1.9 0-3.2 2.5-4.5 4.8zM1.6 13.3C1 12.3.7 12 0 12v8h8v-4.6c-1 .4-1.2.6-2 .6-2.6 0-3.6-1.6-4.4-2.7z"/></svg>',
    'dxrd-svg-series-funnel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12h4l6-6H4zM4 2h16v2H4zM10 22l4-2v-6h-4z"/></svg>',
    'dxrd-svg-series-funnel3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 10h4l6-6H0zM0 0h16v2H0zM6 20l2-1v-7H6z"/></svg>',
    'dxrd-svg-series-gantt': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 4h8v4H2zM6 10h14v4H6zM2 16h12v4H2z"/></svg>',
    'dxrd-svg-series-line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 16L12 6l4 4 6-6v4l-6 6-4-4L2 20z"/></svg>',
    'dxrd-svg-series-line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v4L10 6l4 4 6-6z"/><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12h-2zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
    'dxrd-svg-series-manhattan_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 12h4v8H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 5.9h4V10h-4z"/><path class="dxd-icon-fill" d="M8 10h2V2H6v18h2z"/></svg>',
    'dxrd-svg-series-nested_doughnut': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 10h2c-.5-5-5-9.5-10-10v2c4 .5 7.5 4 8 8z"/><path class="dxd-icon-fill" d="M11 20c-5 0-9-4-9-9 0-4.6 3-8.5 8-9V0C4 .5 0 5.2 0 11c0 6.1 4.9 11 11 11 5.7 0 10.5-4 11-10h-2c-.5 5-4.3 8-9 8z"/><path class="dxd-icon-fill" d="M11 16c-2.4 0-4.4-2-4.9-4h-2c.5 3 3.4 6 6.9 6 1.4 0 2.7-.4 3.8-1.2l-1.5-1.5c-.6.5-1.4.7-2.3.7zM4.1 10h2c.5-2 2.5-4 4.9-4 2.8 0 5 2.2 5 5 0 .9-.2 1.7-.7 2.4l1.5 1.5c.8-1.1 1.2-2.5 1.2-3.9 0-3.9-3.1-7-7-7-3.5 0-6.4 3-6.9 6z"/></svg>',
    'dxrd-svg-series-pie': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2v10H2c0 5.5 4.5 10 10 10s10-4.5 10-10S17.5 2 12 2z"/><path class="dxd-icon-fill" d="M10 0C4.5 0 0 4.5 0 10h10V0z"/></svg>',
    'dxrd-svg-series-pie3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM10 0C4.5 0 0 4.5 0 10h10V0zM12 2v8h9.8c-.9-4.6-5-8-9.8-8zM8 21.1V12H2c0 4.1 2 7.6 6 9.1z"/></svg>',
    'dxrd-svg-series-point': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><circle class="dxd-icon-fill" cx="4" cy="16" r="2"/><circle class="dxd-icon-fill" cx="8" cy="8" r="2"/><circle class="dxd-icon-fill" cx="14" cy="12" r="2"/><circle class="dxd-icon-fill" cx="20" cy="6" r="2"/></svg>',
    'dxrd-svg-series-polar_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M6 6h10v10z"/></svg>',
    'dxrd-svg-series-polar_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/></svg>',
    'dxrd-svg-series-polar_point': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm8.8 10H12V2.1c4 .5 7.5 3.8 7.9 7.9zM10 2v8H2.1 2c.5-4.2 4-7.5 8-8zm0 18c-4-.4-7.5-3.8-8-8h8v8zm2-.1V12h7.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/></svg>',
    'dxrd-svg-series-radar_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11.9 15.9c-.3.1-.6.1-.9.1-2.8 0-5-2.2-5-5 0-.3 0-.6.1-.9L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 3.9 3.1 7 7 7 .9 0 1.7-.2 2.5-.5l-1.6-1.6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/></svg>',
    'dxrd-svg-series-radar_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-80" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.7 0-1.4-.2-2.1-.5-.2.7-.8 1.3-1.6 1.4 1.1.7 2.3 1 3.6 1 1.3 0 2.6-.4 3.7-1-.7-.1-1.3-.6-1.5-1.4zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM8.9 6.5c.7-.3 1.4-.5 2.1-.5.7 0 1.5.2 2.1.5.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9.7.2 1.3.7 1.5 1.5zM6.5 13.1c-.3-.7-.5-1.4-.5-2.1s.2-1.4.5-2.1c-.8-.2-1.3-.8-1.5-1.6-.6 1.1-1 2.4-1 3.7s.4 2.6 1 3.7c.2-.8.7-1.4 1.5-1.6z"/></g></svg>',
    'dxrd-svg-series-radar_point': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-80" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.3 0-.6 0-.9-.1h-.2c-.2-.1-.5-.1-.7-.2-.1 0-.2-.1-.3-.1-1.1-.5-2-1.4-2.5-2.5-.1-.1-.1-.2-.1-.3-.1-.2-.2-.4-.2-.7v-.2c-.1-.3-.1-.6-.1-.9 0-.5.1-1 .2-1.5.1-.2.1-.4.2-.6-.7-.2-1.2-.8-1.4-1.6-.1.3-.2.5-.4.8 0 .1-.1.1-.1.2 0 .2-.1.4-.2.6 0 .1-.1.2-.1.3 0 .2-.1.4-.1.6v.3c-.1.3-.1.6-.1.9 0 .3 0 .6.1.9v.2c0 .3.1.5.2.8v.1c.5 1.7 1.6 3.1 3.1 4 .5.3 1.1.6 1.7.8h.1c.3.1.5.1.8.2h.2c.3 0 .6.1.9.1h.5c1.1-.1 2.2-.4 3.1-1-.8-.3-1.4-.8-1.6-1.6zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM7.4 5c.8.1 1.4.7 1.6 1.4.6-.2 1.3-.4 2-.4s1.5.2 2.1.5c.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9z"/></g></svg>',
    'dxrd-svg-series-range_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 14L12 4l4 4 6-6v6l-6 6-4-4L2 20z"/></svg>',
    'dxrd-svg-series-range_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v6L10 8l2 2h4l4-4z"/></svg>',
    'dxrd-svg-series-range_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v14h-4z"/></svg>',
    'dxrd-svg-series-scatter_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22.8 8c-1.5-2.7-4-4.7-7-5.5-3-.8-6.1-.8-8.8.8C3 5.6.5 10 0 14h2.1c.4-4 2.5-6.9 6-8.9 2.2-1.3 4.8-1.4 7.2-.7 2.4.6 4.4 2.3 5.7 4.5 1 1.7 1.2 3.8.7 5.7-.5 1.9-1.8 3.5-3.5 4.5-2.7 1.6-6.2.6-7.8-2.2-1.2-2.1-.4-4.8 1.6-6 .8-.4 1.6-.5 2.5-.3.8.2 1.5.8 2 1.6.3.6.4 1.2.2 1.9-.2.6-.6 1.2-1.1 1.5-.8.5-1.9.2-2.4-.7-.3-.6-.1-1.3.4-1.6l-1-1.8c-1.5.9-2.1 2.9-1.2 4.4 1 1.8 3.3 2.5 5.1 1.4 2.1-1.2 2.9-4 1.7-6.1-.7-1.3-1.8-2.1-3.2-2.5-1.4-.4-2.8-.2-4 .5C8 11 6.9 14.9 8.7 18c2.1 3.8 6.8 5.1 10.6 2.9 2.2-1.3 3.8-3.3 4.4-5.7.6-2.4.3-5-.9-7.2z"/></svg>',
    'dxrd-svg-series-side_by_side_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v18h-4z"/></svg>',
    'dxrd-svg-series-side_by_side_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 10h4v8H0zM12 4h4v6h-4zM10 0H6v18h2v-8h2z"/></svg>',
    'dxrd-svg-series-side_by_side_full_stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h4v12H0zM0 14h4v8H0zM12 0h4v16h-4zM12 18h4v4h-4zM18 8h4v14h-4zM18 0h4v6h-4zM6 8h4v14H6zM6 0h4v6H6z"/></svg>',
    'dxrd-svg-series-side_by_side_full_stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h4v12H0zM0 14h4v8H0zM12 0h4v12h-4zM18 8h4v4h-4zM18 0h4v6h-4zM6 0h4v6H6zM10 8H6v14h2V12h2z"/></svg>',
    'dxrd-svg-series-side_by_side_gantt': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0h8v4H2zM4 12h12v4H4zM6 18h12v4H6zM6 6h14v4H6z"/></svg>',
    'dxrd-svg-series-side_by_side_range_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 12h4v8H0zM12 6h4v12h-4zM18 4h4v12h-4zM6 2h4v14H6z"/></svg>',
    'dxrd-svg-series-side_by_side_stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 10h4v2H0zM0 14h4v8H0zM6 12h4v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v12h-4zM18 2h4v4h-4zM18 8h4v14h-4z"/></svg>',
    'dxrd-svg-series-side_by_side_stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 8h4v4H0zM0 14h4v8H0zM6 12h2v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v2h-4zM18 2h4v4h-4zM18 8h4v2h-4z"/></svg>',
    'dxrd-svg-series-spline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 11.5C22.1 8.6 19.7 6 17 6c-3 0-4.7 3.1-6.2 5.8C9.6 13.8 8.4 16 7 16c-1.5 0-2-.8-2.7-1.8-.6-1-1.5-2.2-3.3-2.3-.4 0-.7.1-1 .2V15c0-.1.1-.5.4-.8.2-.2.5-.3.6-.3.7 0 1 .4 1.6 1.3C3.4 16.4 4.4 18 7 18c2.6 0 4.1-2.7 5.5-5.2C13.8 10.4 15.1 8 17 8c2.9 0 5.9 5.4 6.9 7.2l.1.2v-3.9z"/></svg>',
    'dxrd-svg-series-spline3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM15 2c2.9 0 5.9 5.4 6.9 7.2l.1.2V5.5C20.1 2.6 17.7 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v2.3c.2.2.4.5.6.9C1.4 10.4 2.4 12 5 12c2.6 0 4.1-2.7 5.5-5.2C11.8 4.4 13.1 2 15 2z"/></svg>',
    'dxrd-svg-series-spline_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h22V7.5C20.1 4.6 17.8 2 15 2z"/></svg>',
    'dxrd-svg-series-spline_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M22 7.5C20.1 4.6 17.8 2 15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h8v-8h14V7.5z"/></svg>',
    'dxrd-svg-series-stacked_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 8l-4-4L2 14v4L12 8l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 12L2 22h20V10l-6 6z"/></svg>',
    'dxrd-svg-series-stacked_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM8 22v-8l-8 8z"/><path class="dxd-icon-fill" d="M20 2l-6 6-4-4L0 14v4L10 8l2 2h4l4-4z"/></svg>',
    'dxrd-svg-series-stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 8h4v4H4zM4 14h4v6H4zM10 2h4v6h-4zM10 10h4v10h-4zM16 6h4v4h-4zM16 12h4v8h-4z"/></svg>',
    'dxrd-svg-series-stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 6h4v4H0zM0 12h4v6H0zM6 0h4v6H6zM10 8H6v10h2v-6h2zM12 4h4v4h-4zM12 10h4v2h-4z"/></svg>',
    'dxrd-svg-series-stacked_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 8l-4-4L0 14v4L10 8l4 4 8-8V0z"/><path class="dxd-icon-fill" d="M10 10L0 20v4l10-10 8 8 4-4v-4l-4 4z"/></svg>',
    'dxrd-svg-series-stacked_line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 12l8-8V0l-8 8-4-4L0 14v4L10 8zM10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M10 10l-2 2h4zM0 24l8-8v-4l-8 8zM22 10V6l-6 6h4z"/></svg>',
    'dxrd-svg-series-stacked_spline_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0z"/><path class="dxd-icon-fill" d="M15 9c-3 0-4.7 3.1-6.2 5.8C7.6 16.8 6.4 19 5 19c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V22h22v-7.5C20.1 11.6 17.8 9 15 9z"/></svg>',
    'dxrd-svg-series-stacked_spline_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6z"/><path class="dxd-icon-fill" d="M5.1 19c-1.5 0-2.1-.8-2.8-1.8-.5-.8-1.2-1.7-2.3-2.1V22h8v-5.7C7 17.8 6.1 19 5.1 19zM10.4 12h9.7c-1.5-1.7-3.2-3-5.2-3-1.9 0-3.3 1.3-4.5 3z"/></svg>',
    'dxrd-svg-series-step_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6V0h-6v12H6V8H0v14h24V6z"/></svg>',
    'dxrd-svg-series-step_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM18 14v10h4l2-2v-6l-2-2h-4zm4 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M18 6V0h-6v10H6V6H0v14h8v-8h16V6z"/></svg>',
    'dxrd-svg-series-step_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 2v18H8v-6H0v2h6v6h10V4h6v8h2V2z"/></svg>',
    'dxrd-svg-series-step_line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 12H0v2h4v6h4v-2H6zM16 10h4V8h-2V0h-8v12h2V2h4v6z"/></svg>',
    'dxrd-svg-series-stock': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 0H4v4H0v4h4v14h4v-4h4v-4H8zM20 18V0h-8v4h4v18h8v-4z"/></svg>',
    'dxrd-svg-series-swift_plot': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 8l-4 4-2-2-6 6-4-4-2 2-4-4-2 2v-2l2-2 4 4 2-2 4 4 6-6 2 2 4-4"/></svg>',
    'dxrd-svg-series-waterfall': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 1h4v22h-4V1zm-6 14h4V1h-4v14zm-6 0h4V9H7v6zm-6 8h4V9H1v14z"/><g class="dxd-icon-fill"><path class="dxd-icon-fill" d="M17 1h2v2h-2V1zM5 11h2V9H5v2zm6 4h2v-2h-2v2z"/></g></svg>',
    'dxrd-svg-tabs-collapse': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 12l-6 6-2-2 4-4-4-4 2-2z"/></svg>',
    'dxrd-svg-tabs-expand': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 12l6 6 2-2-4-4 4-4-2-2z"/></svg>',
    'dxrd-svg-tabs-expressions': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 2c-.9 0-2.2.1-3.6.4-2.4.5-2.7 2.2-2.9 3.1L10.9 9H9c-.6 0-1 .4-1 1s.4 1 1 1h1.5l-1.1 6.1-.2 1.4c-.1.5-.2 1-.9 1.2-1.2.2-1.9.3-2.3.3-.6 0-1 .4-1 1s.4 1 1 1c.9 0 1.5-.1 2.9-.4 2.4-.5 2.7-2.2 2.9-3.1l.3-1.4 1.1-6.1h2.9c.6 0 1-.4 1-1s-.4-1-1-1h-2.5l.6-3.5c.1-.5.2-1 .9-1.2 1.1-.2 2.5-.3 2.9-.3.6 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-tabs-fieldlist': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2C7.6 2 4 3.8 4 6v12c0 2.2 3.6 4 8 4s8-1.8 8-4V6c0-2.2-3.6-4-8-4zm0 6C8.4 8 6.5 6.5 6.5 6S8.4 4 12 4s5.5 1.5 5.5 2-1.9 2-5.5 2z"/></svg>',
    'dxrd-svg-tabs-parameters': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 22h-4c-.6 0-1-.4-1-1v-8.6L1.3 4.7C.7 4.1 1.1 3 2 3h20c.9 0 1.3 1.1.7 1.7L15 12.4V21c0 .6-.4 1-1 1zm-3-2h2v-8.4L19.6 5H4.4l6.6 6.6V20z"/></svg>',
    'dxrd-svg-tabs-reportexplorer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 15h-3v-3c0-.6-.4-1-1-1h-5V9h3c.6 0 1-.5 1-1V2c0-.5-.4-1-1-1H8c-.6 0-1 .5-1 1v6c0 .5.4 1 1 1h3v2H6c-.6 0-1 .4-1 1v3H2c-.6 0-1 .5-1 1v6c0 .5.4 1 1 1h8c.6 0 1-.5 1-1v-6c0-.5-.4-1-1-1H7v-2h10v2h-3c-.6 0-1 .5-1 1v6c0 .5.4 1 1 1h8c.6 0 1-.5 1-1v-6c0-.5-.4-1-1-1zM9 7V3h6v4H9zm0 10v4H3v-4h6zm12 4h-6v-4h6v4z"/></svg>',
    'dxrd-svg-tabs-search': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.5c1.1.7 2.5 1.1 4 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.7.7-.7 1.9.1 2.7zM10 10c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.8-4-4z"/></svg>',
    'dxrd-svg-titles-bottom_center': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 0v14h14V0H4zm6 8V6h2v2h-2zm2 2v2h-2v-2h2zm-2-6V2h2v2h-2zM6 2h2v2H6V2zm0 4h2v2H6V6zm0 4h2v2H6v-2zm10 2h-2v-2h2v2zm0-4h-2V6h2v2zm-2-4V2h2v2h-2z"/><path class="dxd-icon-fill" d="M6 18h10v4H6z"/></svg>',
    'dxrd-svg-titles-bottom_left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 0v14h14V0H6zm6 8V6h1.9v2H12zm1.9 2v2H12v-2h1.9zM12 4V2h1.9v2H12zM8 2h1.9v2H8V2zm0 4h1.9v2H8V6zm0 4h1.9v2H8v-2zm9.9 2H16v-2h1.9v2zm0-4H16V6h1.9v2zM16 4V2h1.9v2H16z"/><path class="dxd-icon-fill" d="M2 18h10v4H2z"/></svg>',
    'dxrd-svg-titles-bottom_right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v14h14V0H2zm6 8V6h2v2H8zm2 2v2H8v-2h2zM8 4V2h2v2H8zm6 0h-2V2h2v2zm0 4h-2V6h2v2zm0 4h-2v-2h2v2zM4 10h2v2H4v-2zm0-4h2v2H4V6zm0-2V2h2v2H4z"/><path class="dxd-icon-fill" d="M10 18h10v4H10z"/></svg>',
    'dxrd-svg-titles-left_bottom_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 2H8v14h14V2zm-8 6h2v2h-2V8zm-2 2h-2V8h2v2zm6-2h2v2h-2V8zm0 6v-2h2v2h-2zm-4 0v-2h2v2h-2zm-4 0v-2h2v2h-2zm2-10v2h-2V4h2zm4 0v2h-2V4h2zm2 0h2v2h-2V4z"/><path class="dxd-icon-fill" d="M0 10h4v10H0z"/></svg>',
    'dxrd-svg-titles-left_center_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 4H8v14h14V4zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V6h2zm-4 0v2h-2V6h2zm-4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 6h4v10H0z"/></svg>',
    'dxrd-svg-titles-left_top_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6H8v14h14V6zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V8h2zm-4 0v2h-2V8h2zm-4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 2h4v10H0z"/></svg>',
    'dxrd-svg-titles-right_bottom_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 16h14V2H0v14zm8-6H6V8h2v2zm2-2h2v2h-2V8zm-6 2H2V8h2v2zm-2 4v-2h2v2H2zm4 0v-2h2v2H6zm4 0v-2h2v2h-2zm2-10v2h-2V4h2zM8 4v2H6V4h2zM4 6H2V4h2v2z"/><path class="dxd-icon-fill" d="M18 10h4v10h-4z"/></svg>',
    'dxrd-svg-titles-right_center_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 18h14V4H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V6h2zm4 0v2H6V6h2zm4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 6h4v10h-4z"/></svg>',
    'dxrd-svg-titles-right_top_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 20h14V6H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V8h2zm4 0v2H6V8h2zm4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 2h4v10h-4z"/></svg>',
    'dxrd-svg-titles-top_center': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 22V8H4v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H6v-2zm0-4h2v2H6v-2zm0-4h2v2H6v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M6 0h10v4H6z"/></svg>',
    'dxrd-svg-titles-top_left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 22V8H6v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H8v-2zm0-4h2v2H8v-2zm0-4h2v2H8v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M2 0h10v4H2z"/></svg>',
    'dxrd-svg-titles-top_right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 22V8H2v14h14zm-6-8v2H8v-2h2zm-2-2v-2h2v2H8zm2 6v2H8v-2h2zm4 2h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2v-2h2v2zM4 10h2v2H4v-2zm0 4h2v2H4v-2zm2 4v2H4v-2h2z"/><path class="dxd-icon-fill" d="M10 0h10v4H10z"/></svg>',
    'dxrd-svg-todo-chart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 10h4v12H0zM18 12h4v10h-4zM6 6h4v16H6zM12 2h4v20h-4z"/></svg>',
    'dxrd-svg-todo-pdfcontent': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path class="dxrd-svg-red" d="M6 8h2v2H6V8zm8 6h2V8h-2v6zM30 2v18H0V2h30zM10 8c0-1-1-2-2-2H4v10h2v-4h2c1 0 2-1 2-2V8zm8 0c0-1-1-2-2-2h-4v10h4c1 0 2-1 2-2V8zm8-2h-6v10h2v-4h2v-2h-2V8h4V6z"/></svg>',
    'dxrd-svg-todo-pdfsignature': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 12c-2.1 0-3.3 1.8-4.3 3.2-.6.9-1.2 1.8-1.7 1.8-.2-.2-.2-1.4-.2-1.9 0-1.2-.1-3.1-1.7-3.1-2 0-2.9 1.9-3.6 3.6C10.4 17.7 9.7 19 8 19c-.7 0-1.4-.6-2.1-1.6C11.2 11.7 13 8.7 13 6c0-3.4-1.8-6-4-6-3.4 0-7 3.1-7 10 0 2.2.5 4.9 1.5 7-1 1-2 2.1-3.2 3.3-.2.2-.3.4-.3.7 0 .6.4 1 1 1 .3 0 .5-.1.7-.3 1-1 1.9-2 2.8-2.8C5.4 20.2 6.6 21 8 21c3.1 0 4.3-2.7 5.2-4.6.6-1.2 1-2 1.4-2.3v1.1c0 1.3.1 3.9 2.3 3.9 1.6 0 2.5-1.4 3.4-2.7 1-1.5 1.7-2.4 2.7-2.4.6 0 1-.4 1-1s-.4-1-1-1zM5 15.4c-.6-1.6-1-3.5-1-5.4 0-5.5 2.6-8 5-8 .8 0 2 1.5 2 4 0 2-1.7 4.7-6 9.4z"/></svg>',
    'dxrd-svg-todo-pivotgrid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
    'dxrd-svg-todo-sparkline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 4v16h20V4H2zm18 10l-2-2-4 4-2-2-4 4-2-2-2 2v-4l2-2 2 2 4-4 2 2 4-4 2 2v4z"/></svg>',
    'dxrd-svg-toolbar-fullscreen-exit': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="FullScreen" class="dxd-icon-fill" d="M21 15c.6 0 1 .4 1 1s-.4 1-1 1h-2.6l3.3 3.3c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L17 18.4V21c0 .6-.4 1-1 1s-1-.4-1-1v-6h6zM3 15c-.6 0-1 .4-1 1s.4 1 1 1h2.6l-3.3 3.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L7 18.4V21c0 .6.4 1 1 1s1-.4 1-1v-6H3zm18-6c.6 0 1-.4 1-1s-.4-1-1-1h-2.6l3.3-3.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L17 5.6V3c0-.6-.4-1-1-1s-1 .4-1 1v6h6zM3 9c-.6 0-1-.4-1-1s.4-1 1-1h2.6L2.3 3.7c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L7 5.6V3c0-.6.4-1 1-1s1 .4 1 1v6H3z"/></svg>',
    'dxrd-svg-toolbar-fullscreen': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="FullScreen" class="dxd-icon-fill" d="M8 2c.6 0 1 .4 1 1s-.4 1-1 1H5.4l3.3 3.3c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L4 5.4V8c0 .6-.4 1-1 1s-1-.4-1-1V2h6zm8 0c-.6 0-1 .4-1 1s.4 1 1 1h2.6l-3.3 3.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L20 5.4V8c0 .6.4 1 1 1s1-.4 1-1V2h-6zM8 22c.6 0 1-.4 1-1s-.4-1-1-1H5.4l3.3-3.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4 18.6V16c0-.6-.4-1-1-1s-1 .4-1 1v6h6zm8 0c-.6 0-1-.4-1-1s.4-1 1-1h2.6l-3.3-3.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0l3.3 3.3V16c0-.6.4-1 1-1s1 .4 1 1v6h-6z"/></svg>',
    'dxrd-svg-toolbar-hightlightEditingFields': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 18.9l2-2V21c0 .5-.5 1-1 1H1c-.5 0-1-.5-1-1v-7c0-.5.5-1 1-1h8.1l-.1.1V15H2v5h13v-1.1zM1 11h10.1l2-2H2V4h13v3.1l2-2V3c0-.5-.5-1-1-1H1c-.5 0-1 .5-1 1v7c0 .5.5 1 1 1zm22.7-2.2L14.5 18H10v-4.5l9.2-9.2c.4-.4 1-.4 1.4 0l3.1 3.1c.4.4.4 1 0 1.4zm-5 2.2L17 9.3l-5 5V16h1.7l5-5zm2.9-2.8l-1.7-1.7L18.4 8 20 9.6l1.6-1.4z"/></svg>',
    'dxrd-svg-toolbar-scripts': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6c-.1-1-1.4-3.4-3-4-.7.5-1.5 1.3-.5 4H22z"/><path class="dxd-icon-fill" d="M16 4c0-1.5.8-2.7 1.9-3.4-.4-.3-1.1-.6-2-.6h-12C1.7 0 0 1.8 0 4v.2L3.4 16H17.2s.2 1.9.4 2.4c.1.3.3 1 .5 1.2.4.6.7 1.1.8 1.1C19.6 20 20 19 20 18L16 4zM17.9.6c.2.1-.1-.1 0 0z"/><path class="dxd-icon-fill" d="M16.4 19.9c-.3-.8-.4-1.9-.4-1.9H0c0 2.2 1.7 4 3.9 4h12c.6 0 1.1-.1 1.6-.3 0-.1-.2-.3-.5-.8-.2-.2-.3-.5-.6-1z"/></svg>',
    'dxrd-svg-toolbar-validateBindingMode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6.4 16.8L9.2 14c.4-.4 1-.4 1.4 0l2.4 2.4 3-3V4.5C16 2.6 12.9 1 9 1S2 2.6 2 4.5v12c0 1.8 2.7 3.3 6.1 3.5l-1.8-1.8c-.3-.4-.3-1 .1-1.4zM4.5 4.5C4.6 4.1 6.1 3 9 3s4.4 1.1 4.5 1.5C13.4 4.9 11.9 6 9 6S4.6 4.9 4.5 4.5zM24 11L13 22l-4.5-4.5 1.4-1.4 3.1 3.1 9.6-9.6L24 11z"/></svg>',
    'dxrd-svg-toolbox-barcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M3 22H1V2h2v20zM9 2H5v20h4V2zm4 0h-2v20h2V2zm4 0h-2v20h2V2zm6 0h-4v20h4V2z"/></svg>',
    'dxrd-svg-toolbox-charactercomb': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 3H1c-.5 0-1 .5-1 1v15c0 .5.5 1 1 1h22c.5 0 1-.5 1-1V4c0-.5-.5-1-1-1zM11 18H2V5h9v13zm11 0h-9V5h9v13zM8.3 9.6c.5.4.7 1.1.7 2V15H7.6v-.7c-.3.6-.8.8-1.6.8-.4 0-.8-.1-1.1-.2-.3-.2-.5-.4-.7-.6-.2-.3-.2-.6-.2-.9 0-.6.2-1 .6-1.3.4-.3.9-.5 1.7-.5h1.2c0-.4-.1-.7-.3-.9-.2-.2-.5-.3-.9-.3-.3 0-.6 0-.8.1-.3.1-.5.2-.7.4l-.7-1.2c.3-.2.6-.4 1-.5C5.6 9 6 9 6.4 9c.9 0 1.5.2 1.9.6zM7 13.7c.2-.1.4-.3.4-.6v-.6h-1c-.6 0-1 .2-1 .7 0 .2.1.4.2.5.2.1.4.2.6.2.4 0 .6 0 .8-.2zm12.4-4.4c.4.3.7.6.9 1.1.2.5.3 1 .3 1.6 0 .6-.1 1.2-.3 1.6-.2.5-.5.8-.9 1.1-.4.3-.9.4-1.4.4-.7 0-1.2-.3-1.6-.8v.7H15V7h1.5v2.7c.4-.5.9-.7 1.6-.7.4-.1.9.1 1.3.3zm-.7 3.9c.2-.3.4-.7.4-1.2s-.1-.9-.4-1.2c-.2-.3-.6-.4-.9-.4-.4 0-.7.1-.9.4-.2.3-.4.7-.4 1.2s.1.9.4 1.2c.2.3.6.5.9.5.4 0 .7-.2.9-.5z"/></svg>',
    'dxrd-svg-toolbox-chart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M1 14v8h6v-8H1zm4 6H3v-4h2v4zM9 8v14h6V8H9zm4 12h-2V10h2v10zm4-18v20h6V2h-6zm4 18h-2V4h2v16z"/></svg>',
    'dxrd-svg-toolbox-checkbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 9.4V20c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V4c0-.5.5-1 1-1h12.1l-2 2H5v14h14v-7.6l2-2zm.3-7.4L11 12.3 7.7 9l-1.4 1.4 4.7 4.7L22.7 3.4 21.3 2z"/></svg>',
    'dxrd-svg-toolbox-crossbandbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 6v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1V6c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1zm0 8v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1z"/></g><path class="dxd-icon-fill" d="M21 1v2c0 .5-.5 1-1 1v1h-2V4c-.5 0-1-.5-1-1H7c0 .5-.5 1-1 1v1H4V4c-.5 0-1-.5-1-1V1c0-.5.5-1 1-1h2c.5 0 1 .5 1 1h10c0-.5.5-1 1-1h2c.5 0 1 .5 1 1zm-1 19v-1h-2v1c-.5 0-1 .5-1 1H7c0-.5-.5-1-1-1v-1H4v1c-.5 0-1 .5-1 1v2c0 .5.5 1 1 1h2c.5 0 1-.5 1-1h10c0 .5.5 1 1 1h2c.5 0 1-.5 1-1v-2c0-.5-.5-1-1-1zM6 11H4v2h2v-2zm14 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-crossbandline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 6v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1V6c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1zm0 8v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1zm2 3"/></g><path class="dxd-icon-fill" d="M14 1v2c0 .5-.5 1-1 1v1h-2V4c-.5 0-1-.5-1-1V1c0-.5.5-1 1-1h2c.5 0 1 .5 1 1zm-1 19v-1h-2v1c-.5 0-1 .5-1 1v2c0 .5.5 1 1 1h2c.5 0 1-.5 1-1v-2c0-.5-.5-1-1-1zm0-9h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-crosstab': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
    'dxrd-svg-toolbox-gauge': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 1C5.9 1 1 5.9 1 12s4.9 11 11 11 11-4.9 11-11S18.1 1 12 1zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8 12c0 1.1.4 2.1 1.2 2.8l-2.1 2.1C5.8 15.7 5 13.9 5 12c0-3.9 3.1-7 7-7 1.3 0 2.5.4 3.6 1l-2.2 2.2c-.5-.1-.9-.2-1.4-.2-2.2 0-4 1.8-4 4zm10-3.6l-2.2 2.2c.2.4.2.9.2 1.3 0 1.1-.4 2.1-1.1 2.8l2.1 2.1c1.2-1.3 2-3 2-4.9 0-1.2-.4-2.4-1-3.5z"/></g><path class="dxd-icon-fill" d="M17.4 7.6c-.3-.4-.6-.7-1-1l-2.1 2.1-1.5 1.5c-.2-.1-.5-.2-.8-.2-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.3-.1-.6-.2-.8l1.5-1.5 2.1-2.1z"/></svg>',
    'dxrd-svg-toolbox-label': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M3.5 19h1.2l5.4-15.4c.2-.3.6-.6 1-.6h1.8c.4 0 .8.3.9.7L19.2 19h1.3c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h1.2l-1.4-4H8.7l-1.4 4h1.2c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5zm5.8-6h5.3L12 5.3h-.1L9.3 13z"/></svg>',
    'dxrd-svg-toolbox-line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 18h-1.6L6 4.6V3c0-.5-.5-1-1-1H3c-.5 0-1 .5-1 1v2c0 .5.5 1 1 1h1.6L18 19.4V21c0 .5.5 1 1 1h2c.5 0 1-.5 1-1v-2c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-toolbox-pagebreak': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 1v7c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1V1h2v6h18V1h2zM3 23v-6h18v6h2v-7c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v7h2zm3-1h12v-2H6v2zM6 2v2h12V2H6zm-3 9H1v2h2v-2zm4 0H5v2h2v-2zm4 0H9v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-pageinfo': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M9.1 18H3V3h15v6.1c.7.1 1.4.3 2 .5V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v17c0 .5.5 1 1 1h7.6c-.3-.6-.4-1.3-.5-2z"/><path class="dxd-icon-fill" d="M17 10c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm1 11h-2v-4h2v4zm0-6h-2v-2h2v2z"/></svg>',
    'dxrd-svg-toolbox-panel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H4V4h16v16z"/></svg>',
    'dxrd-svg-toolbox-pdfcontent': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 18h2v4c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1v-4h2v3h14v-3zM5 3h14v2h2V2c0-.5-.5-1-1-1H4c-.5 0-1 .5-1 1v3h2V3zm2.1 6.9h-1v1.7h1c.4 0 .6-.1.8-.2.2-.2.3-.4.3-.6 0-.3-.1-.5-.3-.6-.2-.2-.4-.3-.8-.3zM23 6v11H1V6h22zM9.4 10.8c0-.4-.1-.7-.3-1-.2-.2-.4-.4-.7-.6C8 9.1 7.6 9 7.2 9H5v5h1.2v-1.4h1c.4 0 .8-.1 1.2-.2.3-.1.6-.4.8-.6s.2-.6.2-1zm5.9.7c0-.5-.1-.9-.3-1.3-.2-.4-.6-.7-1-.9-.5-.2-.9-.3-1.5-.3h-2.3v5h2.3c.5 0 1-.1 1.5-.3.4-.2.7-.5 1-.9.2-.4.3-.8.3-1.3zM20 9h-3.8v5h1.2v-1.8h2.3v-.9h-2.3V9.9H20V9zm-7.5.9h-1.1V13h1.1c.5 0 .9-.1 1.2-.4.3-.3.5-.7.5-1.1 0-.5-.2-.9-.5-1.1-.3-.3-.7-.5-1.2-.5z"/></svg>',
    'dxrd-svg-toolbox-pdfsignature': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 13c-2.1 0-3.3 1.8-4.3 3.2-.6.9-1.2 1.8-1.7 1.8-.2-.2-.2-1.4-.2-1.9 0-1.2-.1-3.1-1.7-3.1-2 0-2.9 1.9-3.6 3.6C10.4 18.7 9.7 20 8 20c-.7 0-1.4-.6-2.1-1.6C11.2 12.7 13 9.7 13 7c0-3.4-1.8-6-4-6-3.4 0-7 3.1-7 10 0 2.2.5 4.9 1.5 7-1 1-2 2.1-3.2 3.3-.2.2-.3.4-.3.7 0 .6.4 1 1 1 .3 0 .5-.1.7-.3 1-1 1.9-2 2.8-2.8C5.4 21.2 6.6 22 8 22c3.1 0 4.3-2.7 5.2-4.6.6-1.2 1-2 1.4-2.3v1.1c0 1.3.1 3.9 2.3 3.9 1.6 0 2.5-1.4 3.4-2.7 1-1.5 1.7-2.4 2.7-2.4.6 0 1-.4 1-1s-.4-1-1-1zM5 16.4c-.6-1.6-1-3.5-1-5.4 0-5.5 2.6-8 5-8 .8 0 2 1.5 2 4 0 2-1.7 4.7-6 9.4z"/></svg>',
    'dxrd-svg-toolbox-picturebox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H4V4h16v16z"/><circle class="dxd-icon-fill" cx="15.5" cy="8.5" r="2.5"/><path class="dxd-icon-fill" d="M6 18v-5l3-3 7 8z"/></svg>',
    'dxrd-svg-toolbox-pivotgrid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 21H4c-.9 0-1.3-1.1-.7-1.7l7.3-7.3-7.3-7.3C2.7 4.1 3.1 3 4 3h16v4h-2V5H6.4l7 7-7 7H18v-2h2v4z"/></svg>',
    'dxrd-svg-toolbox-richtext': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 12.7V20H4V4h7.3l2-2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V10.7l-2 2z"/><path id="EditingFields" class="dxd-icon-fill" d="M23.7 3.4L20.6.3c-.4-.4-1-.4-1.4 0L9 10.5V15h4.5L23.7 4.8c.4-.4.4-1 0-1.4zm-11 9.6H11v-1.7l6-6L18.6 7l-5.9 6zM20 5.6L18.4 4l1.5-1.5 1.7 1.7L20 5.6z"/></svg>',
    'dxrd-svg-toolbox-shape': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7 16H3c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h12c.5 0 1 .5 1 1v4h-.5c-.5 0-1 .1-1.5.1V4H4v10h3.1c0 .5-.1 1-.1 1.5v.5zm16-.5c0 4.1-3.4 7.5-7.5 7.5S8 19.6 8 15.5 11.4 8 15.5 8s7.5 3.4 7.5 7.5zm-2 0c0-3-2.5-5.5-5.5-5.5S10 12.5 10 15.5s2.5 5.5 5.5 5.5 5.5-2.5 5.5-5.5z"/></svg>',
    'dxrd-svg-toolbox-sparkline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 2v2.6l-7 7-3-3-6 6V4h16zM4 20v-.6l6-6 3 3 7-7V20H4z"/></svg>',
    'dxrd-svg-toolbox-subreport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v3h8V2h-2zm2 6H8v2h8V8zm0 6H8v-2h8v2zm0 4H8v-2h8v2z"/></svg>',
    'dxrd-svg-toolbox-table': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-7 2v4h-4V4h4zm-4 6h4v4h-4v-4zM4 4h4v4H4V4zm0 6h4v4H4v-4zm0 10v-4h4v4H4zm6 0v-4h4v4h-4zm10 0h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z"/></svg>',
    'dxrd-svg-toolbox-tableofcontents': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M18 5h-2V3h2v2zm0 2h-2v2h2V7zm0 4h-2v2h2v-2zm0 4h-2v2h2v-2zm0 4h-2v2h2v-2z"/></g><path class="dxd-icon-fill" d="M14 5H2V3h12v2zm8-2h-2v2h2V3zm-8 4H2v2h12V7zm8 0h-2v2h2V7zm-8 4H2v2h12v-2zm8 0h-2v2h2v-2zm-8 4H2v2h12v-2zm8 0h-2v2h2v-2zm-8 4H2v2h12v-2zm8 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-unknown': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"><path fill="#606060" d="M9.98 16.864v-.128c.014-1.357.156-2.436.426-3.239.27-.802.653-1.452 1.15-1.95a9.296 9.296 0 011.79-1.374 5.595 5.595 0 001.13-.905c.333-.355.596-.764.788-1.225.199-.462.298-.973.298-1.534 0-.696-.163-1.3-.49-1.812a3.29 3.29 0 00-1.31-1.182 3.974 3.974 0 00-1.822-.416c-.582 0-1.143.121-1.683.363-.54.241-.99.621-1.353 1.14-.362.518-.572 1.196-.629 2.034H5.591c.057-1.207.369-2.24.937-3.1a5.646 5.646 0 012.27-1.97C9.741 1.11 10.79.883 11.94.883c1.25 0 2.337.248 3.26.745.93.497 1.648 1.18 2.152 2.046.511.866.767 1.853.767 2.961 0 .782-.12 1.488-.362 2.12a5.224 5.224 0 01-1.023 1.694c-.44.498-.973.938-1.598 1.321-.625.391-1.126.803-1.502 1.236a3.9 3.9 0 00-.82 1.524c-.17.59-.263 1.324-.277 2.205v.128H9.98zm1.364 6.306c-.526 0-.977-.188-1.353-.564a1.846 1.846 0 01-.565-1.353c0-.526.188-.977.565-1.353a1.846 1.846 0 011.353-.565c.525 0 .976.188 1.353.565.376.376.564.827.564 1.353 0 .348-.089.668-.266.959a1.99 1.99 0 01-.693.703c-.284.17-.603.256-.958.256z"/></svg>',
    'dxrd-svg-toolbox-zipcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h6v2H2zM0 4h2v6H0zM8 4h2v6H8zM0 12h2v8H0zM8 12h2v8H8zM2 10h6v2H2zM2 20h6v2H2zM14 2h6v2h-6zM12 4h2v6h-2zM20 4h2v6h-2zM12 12h2v8h-2zM20 12h2v8h-2zM14 10h6v2h-6zM14 20h6v2h-6z"/></svg>',
    'dxrd-svg-wizard-crosstab-columns': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-7 2v4h-4V4h4zm-4 6h4v4h-4v-4zM4 4h4v4H4V4zm0 6h4v4H4v-4zm0 10v-4h4v4H4zm6 0v-4h4v4h-4zm10 0h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M4 10h16v4H4z"/></g></svg>',
    'dxrd-svg-wizard-crosstab-data': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 21H4c-.9 0-1.3-1.1-.7-1.7l7.3-7.3-7.3-7.3C2.7 4.1 3.1 3 4 3h16v4h-2V5H6.4l7 7-7 7H18v-2h2v4z"/></svg>',
    'dxrd-svg-wizard-crosstab-fields': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 7H3V5h18v2zm0 4H3v2h18v-2zm0 6H3v2h18v-2z"/></svg>',
    'dxrd-svg-wizard-crosstab-rows': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-7 2v4h-4V4h4zm-4 6h4v4h-4v-4zM4 4h4v4H4V4zm0 6h4v4H4v-4zm0 10v-4h4v4H4zm6 0v-4h4v4h-4zm10 0h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M10 4h4v16h-4z"/></g></svg>',
    'dxrd-svg-wizard-CrossTabReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><g class="dxrd-svg-st075"><path class="dxrd-svg-black" d="M84 92H14c-.6 0-1-.5-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .5-.4 1-1 1z"/></g><path class="dxrd-svg-white" d="M14 5h70v86H14z"/><g class="dxrd-svg-st1"><path class="dxrd-svg-black" d="M48 45H36V35h12v10z"/></g><g class="dxrd-svg-st2"><path class="dxrd-svg-black" d="M34 45H22V35h12v10zm14-12H36V23h12v10zm-14 0H22V23h12v10z"/></g><g class="dxrd-svg-st2"><path class="dxrd-svg-blue" d="M48 47H36v10h12V47zm14-12H50v10h12V35zm0-12H50v10h12V23zM34 57H22V47h12v10z"/></g><path class="dxrd-svg-blue" d="M75 47H51c-.6 0-1 .4-1 1v24c0 .6.4 1 1 1h24c.6 0 1-.4 1-1V48c0-.6-.4-1-1-1zm-4 8h-8.8l5 5-5 5H71v3H55l8-8-8-8h16v3z"/></svg>',
    'dxrd-svg-wizard-EmptyReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><g class="dxrd-svg-st075"><path class="dxrd-svg-black" d="M83 93H13c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/></g><path class="dxrd-svg-white" d="M13 6h70v86H13z"/><g class="dxrd-svg-st1"><path class="dxrd-svg-black" d="M83 14v-1h-7V6h-1v7H21V6h-1v7h-7v1h7v70h-7v1h7v7h1v-7h54v7h1v-7h7v-1h-7V14h7zm-8 70H21V14h54v70z"/></g></svg>',
    'dxrd-svg-wizard-LabelReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><g class="dxrd-svg-st075"><path class="dxrd-svg-black" d="M83 92H13c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/></g><path class="dxrd-svg-white" d="M13 5h70v86H13z"/><g class="dxrd-svg-st1"><path class="dxrd-svg-blue" d="M47 29H21V13h26v16zm28 0H49V13h26v16zM47 47H21V31h26v16zm28 0H49V31h26v16zM47 65H21V49h26v16zm28 0H49V49h26v16zM47 83H21V67h26v16zm28 0H49V67h26v16z"/></g></svg>',
    'dxrd-svg-wizard-StandardReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><g class="dxrd-svg-st2"><path class="dxrd-svg-black" d="M27.5 15C17.8 15 10 13 10 10.5v32C10 45 17.8 47 27.5 47S45 45 45 42.5v-32C45 13 37.2 15 27.5 15z"/></g><g class="dxrd-svg-st1"><ellipse class="dxrd-svg-black" cx="27.5" cy="8.5" rx="17.5" ry="4.5"/></g><g class="dxrd-svg-st075"><path class="dxrd-svg-black" d="M85.8 30h-13L60 42.8 47.2 30H33.9c-.6 0-1 .4-1 1v60c0 .6.4 1 1 1h51.9c.6 0 1-.4 1-1V31c0-.6-.5-1-1-1z"/></g><path class="dxrd-svg-white" d="M85.764 31.036v60h-51.9v-60z"/><g class="dxrd-svg-st1"><path class="dxrd-svg-black" d="M48.9 46h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6z"/></g><g class="dxrd-svg-st2"><path class="dxrd-svg-black" d="M41 38h8v6h-8v-6zm14.2 0H51v6h8v-2.2L55.2 38zm5.8 3.8V44h8v-6h-4.2L61 41.8zM71 38v6h8v-6h-8z"/></g><path class="dxrd-svg-blue" d="M64 30c0-7.2-6.7-13-15-13 3.9 0 7 5.8 7 13h-6l10 10 10-10h-6z"/></svg>',
    'dxrd-svg-wizard-UndefinedReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><g class="dxrd-svg-st075"><path class="dxrd-svg-black" d="M83 92H13c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/></g><path class="dxrd-svg-white" d="M13 5h70v86H13V5z"/><foreignObject x="12" y="5" width="70" height="86"><div class="dxrd-svg-black dxrd-report-type-item-text" data-bind="text: $root.getLocalization(`Report Template`, `ASPxReportsStringId.ReportDesigner_Wizard_ReportTemplate_Thumbnail`)"/></foreignObject></svg>',
    'dxrd-svg-wizard-VerticalReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><g class="dxrd-svg-st2"><path class="dxrd-svg-black" d="M27.5 15C17.8 15 10 13 10 10.5v32C10 45 17.8 47 27.5 47S45 45 45 42.5v-32C45 13 37.2 15 27.5 15z"/></g><g class="dxrd-svg-st1"><ellipse class="dxrd-svg-black" cx="27.5" cy="8.5" rx="17.5" ry="4.5"/></g><g class="dxrd-svg-st075"><path class="dxrd-svg-black" d="M85.8 30h-13L60 42.8 47.2 30H33.9c-.6 0-1 .4-1 1v60c0 .6.4 1 1 1h51.9c.6 0 1-.4 1-1V31c0-.6-.5-1-1-1z"/></g><path class="dxrd-svg-white" d="M85.764 31.036v60h-51.9v-60z"/><g class="dxrd-svg-st1"><path class="dxrd-svg-black" d="M55.2 38H51v6h8v-2.2L55.2 38zm5.8 3.8V44h8v-6h-4.2L61 41.8zM71 38v6h8v-6h-8zm-12.1 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6z"/></g><g class="dxrd-svg-st2"><path class="dxrd-svg-black" d="M41 38h8v6h-8v-6zm7.9 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6z"/></g><path class="dxrd-svg-blue" d="M64 30c0-7.2-6.7-13-15-13 3.9 0 7 5.8 7 13h-6l10 10 10-10h-6z"/></svg>',
    'dxrd-svg-wizard-warning': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 31 31" xml:space="preserve"><path class="dxd-icon-fill" d="M15.5 0C6.9 0 0 6.9 0 15.5S6.9 31 15.5 31 31 24.1 31 15.5 24.1 0 15.5 0zm0 25c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5-1.1 2.5-2.5 2.5zm0-7C14.1 18 13 9.9 13 8.5 13 7.1 14.1 6 15.5 6S18 7.1 18 8.5 16.9 18 15.5 18z"/></svg>',
});

;// ./node_modules/devexpress-reporting/dx-viewer-bindings.js

(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: $data.customGlyphStyleCss', function ($context, $element) { return { 'style': function () { return $context.$data.customGlyphStyleCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: items, displayExpr: \'displayName\', onValueChanged: popupModel.onTextChanged, useItemTextAsTitle: true , placeholder: popupModel.selectPeriodPlaceholder }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.items, 'displayExpr': 'displayName', 'onValueChanged': $context.$data.popupModel.onTextChanged, 'useItemTextAsTitle': true, 'placeholder': $context.$data.popupModel.selectPeriodPlaceholder }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: popupModel.fromText', function ($context, $element) { return { 'text': function () { return $context.$data.popupModel.fromText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-button-default\': popupModel.startButton.focused }, dxButton: popupModel.startButton', function ($context, $element) { return { 'css': function () { return { 'dx-button-default': $context.$data.popupModel.startButton.focused }; }, 'dxButton': function () { return $context.$data.popupModel.startButton; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: popupModel.untilText', function ($context, $element) { return { 'text': function () { return $context.$data.popupModel.untilText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-button-default\': popupModel.endButton.focused }, dxButton: popupModel.endButton', function ($context, $element) { return { 'css': function () { return { 'dx-button-default': $context.$data.popupModel.endButton.focused }; }, 'dxButton': function () { return $context.$data.popupModel.endButton; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: popupModel.startButton.focused', function ($context, $element) { return { 'if': function () { return $context.$data.popupModel.startButton.focused; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrv-daterange-calendar\', data: startRange }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-daterange-calendar', 'data': $context.$data.startRange }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: popupModel.endButton.focused', function ($context, $element) { return { 'if': function () { return $context.$data.popupModel.endButton.focused; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrv-daterange-calendar\', data: endRange }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-daterange-calendar', 'data': $context.$data.endRange }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: clickToBrick, styleunit: { width: width, height: height }, autoFit: autoFitOptions', function ($context, $element) { return { 'dxclick': function () { return $context.$data.clickToBrick; }, 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'autoFit': function () { return $context.$data.autoFitOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: width, height: height, lineHeight: height }, style: { \'background-color\': color }, visible: pageLoading, text: loadingText', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height, 'lineHeight': $context.$data.height }; }, 'style': function () { return { 'background-color': $context.$data.color }; }, 'visible': function () { return $context.$data.pageLoading; }, 'text': function () { return $context.$data.loadingText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { src: displayImageSrc }, style:{ \'background-color\': color }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.displayImageSrc }; }, 'style': function () { return { 'background-color': $context.$data.color }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrdp-active\': active && hasBricks }, visible: !readerMode', function ($context, $element) { return { 'css': function () { return { 'dxrdp-active': $context.$data.active && $context.$data.hasBricks }; }, 'visible': function () { return !$context.$data.readerMode; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { top: topP, left: leftP, right: rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': active }', function ($context, $element) { return { 'style': function () { return { 'top': $context.$data.topP, 'left': $context.$data.leftP, 'right': $context.$data.rightP, 'height': $context.$data.heightP, 'width': $context.$data.widthP }; }, 'css': function () { return { 'dxrd-report-preview-brick-selected': $context.$data.active }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: activeBricks', function ($context, $element) { return { 'foreach': function () { return $context.$data.activeBricks; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-brick-mobile" }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-mobile' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !brickLoading && editingFields', function ($context, $element) { return { 'if': function () { return !$context.$data.brickLoading && $context.$data.editingFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: editingFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.editingFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit:{ height: height }, dxrdSearchBar: $data', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height }; }, 'dxrdSearchBar': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !editorVisible, dxclick: focusEditor', function ($context, $element) { return { 'visible': function () { return !$context.$data.editorVisible; }, 'dxclick': function () { return $context.$data.focusEditor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: tapToSearchText', function ($context, $element) { return { 'text': function () { return $context.$data.tapToSearchText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: editorVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.editorVisible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: searchText, onValueChanged: onSearchTextChanged, onEnterKey: startSearch }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.searchText, 'onValueChanged': $context.$data.onSearchTextChanged, 'onEnterKey': $context.$data.startSearch }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to\' }, items: items, onItemClick: clickAction }, attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'dxMenu': function () { return { 'wrapperAttr': { 'class': 'dxrd-preview-export-to' }, 'items': $context.$data.items, 'onItemClick': $context.$data.clickAction }; }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization($data.text, $data.textId)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization($context.$data.text, $context.$data.textId); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: ko.unwrap($data.imageClassName), template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}', function ($context, $element) { return { 'css': function () { return $context.ko.unwrap($context.$data.imageClassName); }, 'template': function () { return { 'name': $context.ko.unwrap($context.$data.imageTemplateName), 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: visible, css: $data.imageClassName, template: { name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, dxclick: clickAction', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'dxclick': function () { return $context.$data.clickAction; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxrdMobilePaginator: $data', function ($context, $element) { return { 'dxrdMobilePaginator': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text : text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopover: { wrapperAttr: { class: \'dxrd-menu-export-popover\' }, width: \'266px\', height: \'266px\', visible: visible, target: \'.dxrdp-mobile-action.dxrd-image-export-to\', container: $root.getPopupContainer($element), }', function ($context, $element) { return { 'dxPopover': function () { return { 'wrapperAttr': { 'class': 'dxrd-menu-export-popover' }, 'width': '266px', 'height': '266px', 'visible': $context.$data.visible, 'target': '.dxrdp-mobile-action.dxrd-image-export-to', 'container': $context.$root.getPopupContainer($element) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: action, text: text', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; }, 'text': function () { return $context.$data.text; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { wrapperAttr: { class: \'dxrd-menu-parameters-popup\' }, showTitle: false, onHidden: onHidden, width: \'100vw\', height: \'100vh\', visible: visible, container: $root.getPopupContainer($element), }', function ($context, $element) { return { 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dxrd-menu-parameters-popup' }, 'showTitle': false, 'onHidden': $context.$data.onHidden, 'width': '100vw', 'height': '100vh', 'visible': $context.$data.visible, 'container': $context.$root.getPopupContainer($element) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxValidationGroup: {}, css: className', function ($context, $element) { return { 'dxValidationGroup': function () { return {}; }, 'css': function () { return $context.$data.className; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.title', function ($context, $element) { return { 'text': function () { return $context.$data.title; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, bounceEnabled: false }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'bounceEnabled': false }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: { data: $data.actionButtons }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.actionButtons }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { text: text, onClick: function(params){ $data.action(params) }, disabled: disabled, visible: visible }, css: className', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.text, 'onClick': function (params) { $context.$data.action(params); }, 'disabled': $context.$data.disabled, 'visible': $context.$data.visible }; }, 'css': function () { return $context.$data.className; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: showIcons, foreach: { data: $data.actionIcons }', function ($context, $element) { return { 'visible': function () { return $context.$data.showIcons; }, 'foreach': function () { return { 'data': $context.$data.actionIcons }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { onClick: function(params){ $data.action(params)}, disabled: disabled }, css: className', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': function (params) { $context.$data.action(params); }, 'disabled': $context.$data.disabled }; }, 'css': function () { return $context.$data.className; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxrvDateRangeEditor: {value: value, isMobile: true }', function ($context, $element) { return { 'dxrvDateRangeEditor': function () { return { 'value': $context.$data.value, 'isMobile': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.format', function ($context, $element) { return { 'if': function () { return $context.$data.format; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: $data.format', function ($context, $element) { return { 'ifnot': function () { return $context.$data.format; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.enabled', function ($context, $element) { return { 'if': function () { return $context.$data.enabled; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.content', function ($context, $element) { return { 'if': function () { return $context.$data.content; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: $data.content', function ($context, $element) { return { 'template': function () { return $context.$data.content; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrv-preview-parameters-mobile\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-preview-parameters-mobile', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $data.contentTemplate, data: model.getViewModel() }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.model.getViewModel() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { pointerEvents: surfaceEvents, touchEvents: surfaceEvents }, styleunit: { top: topOffset, height: previewWrapperSizeHeight, width: previewWrapperSizeWidth }, slide: slideOptions, mobileZoom: mobileZoomOptions, dxclick: click, css: { \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.surfaceEvents, 'touchEvents': $context.$data.surfaceEvents }; }, 'styleunit': function () { return { 'top': $context.$data.topOffset, 'height': $context.$data.previewWrapperSizeHeight, 'width': $context.$data.previewWrapperSizeWidth }; }, 'slide': function () { return $context.$data.slideOptions; }, 'mobileZoom': function () { return $context.$data.mobileZoomOptions; }, 'dxclick': function () { return $context.$data.click; }, 'css': function () { return { 'dxrp-editing-fields-hightlighted': $context.$data.editingFieldsHighlighted }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { pointerEvents: galleryEvents, touchEvents: galleryEvents }, dxGalleryReportPreview: { dataSource: gallery.items, gallery: gallery, slideOptions: slideOptions, animationEnabled: gallery.animationEnabled, disabled: zoomUpdating, width:\'100%\', height: \'100%\', showIndicator: false, loop: true, onSelectionChanged: onSlide, onOptionChanged: gallery.onOptionChanged }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.galleryEvents, 'touchEvents': $context.$data.galleryEvents }; }, 'dxGalleryReportPreview': function () { return { 'dataSource': $context.$data.gallery.items, 'gallery': $context.$data.gallery, 'slideOptions': $context.$data.slideOptions, 'animationEnabled': $context.$data.gallery.animationEnabled, 'disabled': $context.$data.zoomUpdating, 'width': '100%', 'height': '100%', 'showIndicator': false, 'loop': true, 'onSelectionChanged': $context.$data.onSlide, 'onOptionChanged': $context.$data.gallery.onOptionChanged }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: reportPreview.scrollViewOptions', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.reportPreview.scrollViewOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: gallery.contentSize', function ($context, $element) { return { 'style': function () { return $context.$data.gallery.contentSize; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, css: classSet', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return $context.$data.classSet; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: Math.max(page.width, position.width), height: Math.max(page.height, position.height) }, style: { \'background-color\': page.color }', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.max($context.$data.page.width, $context.$data.position.width), 'height': Math.max($context.$data.page.height, $context.$data.position.height) }; }, 'style': function () { return { 'background-color': $context.$data.page.color }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrdp-active\': page.active && active, \'dxrdp-page-padding\': page.active && active }, visible: reportPreview.slideOptions.readerMode', function ($context, $element) { return { 'css': function () { return { 'dxrdp-active': $context.$data.page.active && $context.$data.active, 'dxrdp-page-padding': $context.$data.page.active && $context.$data.active }; }, 'visible': function () { return $context.$data.reportPreview.slideOptions.readerMode; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: page.width, height: page.height }, style: { pointerEvents: reportPreview.pageEvents, touchEvents: reportPreview.pageEvents }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.page.width, 'height': $context.$data.page.height }; }, 'style': function () { return { 'pointerEvents': $context.$data.reportPreview.pageEvents, 'touchEvents': $context.$data.reportPreview.pageEvents }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: {name: \'dxrd-preview-progress-bar\', data: progressBar }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-progress-bar', 'data': $context.$data.progressBar }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: blocks', function ($context, $element) { return { 'foreach': function () { return $context.$data.blocks; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: page', function ($context, $element) { return { 'if': function () { return $context.$data.page; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name :\'dxrd-preview-page-mobile\', data: page }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-page-mobile', 'data': $context.$data.page }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: containerStyle, zoom: zoom, css: { active: active, readonly: field.readOnly }', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; }, 'zoom': function () { return $context.$data.zoom; }, 'css': function () { return { 'active': $context.$data.active, 'readonly': $context.$data.field.readOnly }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: borderStyle', function ($context, $element) { return { 'style': function () { return $context.$data.borderStyle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: activateEditor', function ($context, $element) { return { 'dxclick': function () { return $context.$data.activateEditor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: textStyle, css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}', function ($context, $element) { return { 'style': function () { return $context.$data.textStyle; }, 'css': function () { return { 'dxrp-editing-field-text-wordwrap': !$context.$data.wordWrap }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: breakOffsetStyle, html: field.htmlValue', function ($context, $element) { return { 'style': function () { return $context.$data.breakOffsetStyle; }, 'html': function () { return $context.$data.field.htmlValue; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: textStyle, css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}, text: field.editValue', function ($context, $element) { return { 'style': function () { return $context.$data.textStyle; }, 'css': function () { return { 'dxrp-editing-field-text-wordwrap': !$context.$data.wordWrap }; }, 'text': function () { return $context.$data.field.editValue; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('value: value, valueUpdate: \'keypress\', style: textStyle, event: { blur: hideEditor, keyup: keypressAction }', function ($context, $element) { return { 'value': function () { return $context.$data.value; }, 'valueUpdate': function () { return 'keypress'; }, 'style': function () { return $context.$data.textStyle; }, 'event': function () { return { 'blur': $context.$data.hideEditor, 'keyup': $context.$data.keypressAction }; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.value = _z; } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: options, childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.options; }, 'childStyle': function () { return { 'style': $context.$data.textStyle, 'selector': '.dx-texteditor-input' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: options, childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.options; }, 'childStyle': function () { return { 'style': $context.$data.textStyle, 'selector': '.dx-texteditor-input' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxDateBox: $data.getOptions({ dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.getOptions({ 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flip', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } } }); }, 'childStyle': function () { return { 'style': $context.$data.textStyle, 'selector': '.dx-texteditor-input' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: containerStyle', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPictureEditor: $data', function ($context, $element) { return { 'dxPictureEditor': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: containerStyle, zoom: zoom, click: onClick', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; }, 'zoom': function () { return $context.$data.zoom; }, 'click': function () { return $context.$data.onClick; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: checkStyle, template: { name: checkStateStyleIcon, if: !!checkStateStyleIcon }', function ($context, $element) { return { 'style': function () { return $context.$data.checkStyle; }, 'template': function () { return { 'name': $context.$data.checkStateStyleIcon, 'if': !!$context.$data.checkStateStyleIcon }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: checkStyle', function ($context, $element) { return { 'style': function () { return $context.$data.checkStyle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { fill: checked ? \'black\' : \'transparent\' }', function ($context, $element) { return { 'style': function () { return { 'fill': $context.$data.checked ? 'black' : 'transparent' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: containerStyle, dxclick: activateEditor, zoom: zoom, css: { active: active, readonly: field.readOnly }', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; }, 'dxclick': function () { return $context.$data.activateEditor; }, 'zoom': function () { return $context.$data.zoom; }, 'css': function () { return { 'active': $context.$data.active, 'readonly': $context.$data.field.readOnly }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: style, text: text', function ($context, $element) { return { 'style': function () { return $context.$data.style; }, 'text': function () { return $context.$data.text; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('value: field.editorValue, valueUpdate: \'keypress\', style: textStyle, event: { blur: hideEditor, keyup: keypressAction }', function ($context, $element) { return { 'value': function () { return $context.$data.field.editorValue; }, 'valueUpdate': function () { return 'keypress'; }, 'style': function () { return $context.$data.textStyle; }, 'event': function () { return { 'blur': $context.$data.hideEditor, 'keyup': $context.$data.keypressAction }; }, '_ko_property_writers': function () { return { 'value': function (_z) { Object($context.$data.field).editorValue = _z; } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !active || field.readOnly', function ($context, $element) { return { 'if': function () { return !$context.$data.active || $context.$data.field.readOnly; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: field.htmlValue', function ($context, $element) { return { 'if': function () { return $context.$data.field.htmlValue; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: field.htmlValue', function ($context, $element) { return { 'ifnot': function () { return $context.$data.field.htmlValue; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: active && !field.readOnly', function ($context, $element) { return { 'if': function () { return $context.$data.active && !$context.$data.field.readOnly; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: editorTemplate, data: data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.editorTemplate, 'data': $context.$data.data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrp-editing-field-image-editor\'', function ($context, $element) { return { 'template': function () { return 'dxrp-editing-field-image-editor'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.cells; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { \'action\': exportActionUri }, foreach: exportFormData', function ($context, $element) { return { 'attr': function () { return { 'action': $context.$data.exportActionUri }; }, 'foreach': function () { return $context.$data.exportFormData; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: {\'name\': name, \'value\': value}', function ($context, $element) { return { 'attr': function () { return { 'name': $context.$data.name, 'value': $context.$data.value }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { width: popupOptions.width, height: popupOptions.height, title: popupOptions.title, visible: popupOptions.visible, showCloseButton: true, onHidden: popupOptions.onHidden, toolbarItems: popupOptions.toolbarItems, wrapperAttr: popupOptions.wrapperAttr, container: popupOptions.getPopupContainer($element), position: { of: popupOptions.getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': $context.$data.popupOptions.width, 'height': $context.$data.popupOptions.height, 'title': $context.$data.popupOptions.title, 'visible': $context.$data.popupOptions.visible, 'showCloseButton': true, 'onHidden': $context.$data.popupOptions.onHidden, 'toolbarItems': $context.$data.popupOptions.toolbarItems, 'wrapperAttr': $context.$data.popupOptions.wrapperAttr, 'container': $context.$data.popupOptions.getPopupContainer($element), 'position': { 'of': $context.$data.popupOptions.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: printingTexts.caption', function ($context, $element) { return { 'text': function () { return $context.$data.printingTexts.caption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: printingTexts.prefix', function ($context, $element) { return { 'text': function () { return $context.$data.printingTexts.prefix; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: printingLinkCallback, text: printingTexts.link', function ($context, $element) { return { 'click': function () { return $context.$data.printingLinkCallback; }, 'text': function () { return $context.$data.printingTexts.link; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: printingTexts.postfix', function ($context, $element) { return { 'text': function () { return $context.$data.printingTexts.postfix; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: printingTexts.prefix', function ($context, $element) { return { 'if': function () { return $context.$data.printingTexts.prefix; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: printingTexts.postfix', function ($context, $element) { return { 'if': function () { return $context.$data.printingTexts.postfix; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Export Options\', \'DevExpress.XtraReports.UI.XtraReport.ExportOptions\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Export Options', 'DevExpress.XtraReports.UI.XtraReport.ExportOptions'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); }  }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxMenu: { elementAttr: { class: \'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted\' }, disabled: disabled, items: widget.items, cssClass: \'dxrdp-export-to-menu\', onItemClick: click, onSubmenuShowing: widget.onSubmenuShowing(getPopupContainer($element), $element), onSubmenuShown: widget.onSubmenuShown, onSubmenuHiding: widget.onSubmenuHiding, onItemRendered: widget.onItemRendered, tabIndex: \'-1\', }', function ($context, $element) { return { 'dxMenu': function () { return { 'elementAttr': { 'class': 'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted' }, 'disabled': $context.$data.disabled, 'items': $context.$data.widget.items, 'cssClass': 'dxrdp-export-to-menu', 'onItemClick': $context.$data.click, 'onSubmenuShowing': $context.$data.widget.onSubmenuShowing($context.$data.getPopupContainer($element), $element), 'onSubmenuShown': $context.$data.widget.onSubmenuShown, 'onSubmenuHiding': $context.$data.widget.onSubmenuHiding, 'onItemRendered': $context.$data.widget.onItemRendered, 'tabIndex': '-1' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { title: text }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.text }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: imageClassName, template: imageTemplateName', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return $context.$data.imageTemplateName; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: propertyGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.propertyGrid }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertygrid-popoverservice\', if: propertyGrid.popover, data: propertyGrid.popover }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertygrid-popoverservice', 'if': $context.$data.propertyGrid.popover, 'data': $context.$data.propertyGrid.popover }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: function(_, event){ onClick(event); event.stopPropagation(); }, style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active, \'dxrd-report-preview-brick-selectable\': !($data.bricks) }', function ($context, $element) { return { 'dxclick': function () { return function (_, event) { $context.$data.onClick(event); event.stopPropagation(); }; }, 'style': function () { return { 'top': $context.$data.topP, 'left': $context.$data.leftP, 'right': $context.$data.rightP, 'height': $context.$data.heightP, 'width': $context.$data.widthP }; }, 'css': function () { return { 'dxrd-report-preview-brick-selected': $context.$data.active, 'dxrd-report-preview-brick-selectable': !($context.$data.bricks) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrdp-navigation-brick-drill-down\' : !!navigation.drillDownKey, \'dxrdp-navigation-brick-sorting\' : !!navigation.sortData, \'dxrdp-navigation-brick-sorting-desc\': navigation.sortData && navigation.sortData.order === 1, \'dxrdp-navigation-brick-sorting-asc\': navigation.sortData && navigation.sortData.order === 2 }', function ($context, $element) { return { 'css': function () { return { 'dxrdp-navigation-brick-drill-down': !!$context.$data.navigation.drillDownKey, 'dxrdp-navigation-brick-sorting': !!$context.$data.navigation.sortData, 'dxrdp-navigation-brick-sorting-desc': $context.$data.navigation.sortData && $context.$data.navigation.sortData.order === 1, 'dxrdp-navigation-brick-sorting-asc': $context.$data.navigation.sortData && $context.$data.navigation.sortData.order === 2 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: {\'aria-label\': currentPageAriaLabelImgAlt }, dxclick: clickToBrick, \'brick-selection-prog\': brickSelectionProg', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$data.currentPageAriaLabelImgAlt }; }, 'dxclick': function () { return $context.$data.clickToBrick; }, 'brick-selection-prog': function () { return $context.$data.brickSelectionProg; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': width + 2, \'height\': height + 2 }, visible: pageLoading', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width + 2, 'height': $context.$data.height + 2 }; }, 'visible': function () { return $context.$data.pageLoading; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'paddingTop\': height / 2.3 }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingTop': $context.$data.height / 2.3 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: loadingText', function ($context, $element) { return { 'text': function () { return $context.$data.loadingText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { src: displayImageSrc, \'alt\': currentPageAriaLabelImgAlt }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.displayImageSrc, 'alt': $context.$data.currentPageAriaLabelImgAlt }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxMutationObserver: editingFieldsKeyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.editingFieldsKeyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.navigation', function ($context, $element) { return { 'if': function () { return $context.$data.navigation; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-brick-mobile", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-mobile', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: clickableBricks', function ($context, $element) { return { 'foreach': function () { return $context.$data.clickableBricks; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-brick-clickable", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-clickable', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !brickLoading && $data.editingFields', function ($context, $element) { return { 'if': function () { return !$context.$data.brickLoading && $context.$data.editingFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: activateEditor, css: parentPopupClass', function ($context, $element) { return { 'dxclick': function () { return $context.$data.activateEditor; }, 'css': function () { return $context.$data.parentPopupClass; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPainter: getPainterOptions()', function ($context, $element) { return { 'dxPainter': function () { return $context.$data.getPainterOptions(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { width: containerStyle.width, height: containerStyle.height, position: { boundary: popupData.getPopupContainer($element), of: popupData.getPositionTarget($element), collision: \'flipfit flipfit\' }, container: popupData.getPopupContainer($element), showTitle: false, target: popupData.getPopupContainer($element), deferRendering: false, hideOnOutsideClick: true, showCloseButton: false, onContentReady: popupData.onContentReady, onHiding: popupData.onHiding, onShown: popupData.onShown, shading: popupData.shading, wrapperAttr: { class: \'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen\' }, animation: { show: { type: \'slide\', duration: 0, to: { opacity: 1 }, from: { opacity: 0 } }, hide: { type: \'fade\', duration: 100, to: { opacity: 0 }, from: { opacity: 1 } } }, visible: popupData.visible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': $context.$data.containerStyle.width, 'height': $context.$data.containerStyle.height, 'position': { 'boundary': $context.$data.popupData.getPopupContainer($element), 'of': $context.$data.popupData.getPositionTarget($element), 'collision': 'flipfit flipfit' }, 'container': $context.$data.popupData.getPopupContainer($element), 'showTitle': false, 'target': $context.$data.popupData.getPopupContainer($element), 'deferRendering': false, 'hideOnOutsideClick': true, 'showCloseButton': false, 'onContentReady': $context.$data.popupData.onContentReady, 'onHiding': $context.$data.popupData.onHiding, 'onShown': $context.$data.popupData.onShown, 'shading': $context.$data.popupData.shading, 'wrapperAttr': { 'class': 'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen' }, 'animation': { 'show': { 'type': 'slide', 'duration': 0, 'to': { 'opacity': 1 }, 'from': { 'opacity': 0 } }, 'hide': { 'type': 'fade', 'duration': 100, 'to': { 'opacity': 0 }, 'from': { 'opacity': 1 } } }, 'visible': $context.$data.popupData.visible }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-picture-editing-popup\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-picture-editing-popup' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: popupData.showContent', function ($context, $element) { return { 'if': function () { return $context.$data.popupData.showContent; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: popupData.contentTemplate, afterRender: popupData.renderedHandler }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.popupData.contentTemplate, 'afterRender': $context.$data.popupData.renderedHandler }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: widget.dataSource, value: widget.value, onValueChanged: widget.onValueChanged, displayExpr: widget.displayExpr, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: widget.onCustomItemCreating, useItemTextAsTitle: true, width: 140, dropDownOptions: { container: getPopupContainer($element), position: { my: \'left top\', at: \'left bottom\', of: $element }, wrapperAttr: { class: \'dx-zoom-selectbox-popup-wrapper\' } }, tabIndex: \'-1\', inputAttr: widget.inputAttr }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.widget.dataSource, 'value': $context.$data.widget.value, 'onValueChanged': $context.$data.widget.onValueChanged, 'displayExpr': $context.$data.widget.displayExpr, 'displayCustomValue': true, 'acceptCustomValue': true, 'onCustomItemCreating': $context.$data.widget.onCustomItemCreating, 'useItemTextAsTitle': true, 'width': 140, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element), 'position': { 'my': 'left top', 'at': 'left bottom', 'of': $element }, 'wrapperAttr': { 'class': 'dx-zoom-selectbox-popup-wrapper' } }, 'tabIndex': '-1', 'inputAttr': $context.$data.widget.inputAttr }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', direction: \'horizontal\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'direction': 'horizontal', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('keyDownActions: actionLists, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'keyDownActions': function () { return $context.$data.actionLists; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(s, e) { $parent.onClick($data.position); }', function ($context, $element) { return { 'click': function () { return function (s, e) { $context.$parent.onClick($context.$data.position); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.displayText', function ($context, $element) { return { 'text': function () { return $context.$data.displayText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-svg-preview-breadcrumbs_seperator\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-svg-preview-breadcrumbs_seperator' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: active && visible, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'visible': function () { return $context.$data.active && $context.$data.visible; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: headerText', function ($context, $element) { return { 'text': function () { return $context.$data.headerText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: searchEditor', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.searchEditor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: buttons.searchButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.buttons.searchButton; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: matchCaseEditor', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.matchCaseEditor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: matchWholeWordEditor', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.matchWholeWordEditor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { id: searchResultHeaderId, \'aria-busy\': loading ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'id': $context.$data.searchResultHeaderId, 'aria-busy': $context.$data.loading ? 'true' : 'false' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: searchResultCount', function ($context, $element) { return { 'text': function () { return $context.$data.searchResultCount; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: resultsInText', function ($context, $element) { return { 'text': function () { return $context.$data.resultsInText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: searchResultPageCount', function ($context, $element) { return { 'text': function () { return $context.$data.searchResultPageCount; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: resultsPagesText', function ($context, $element) { return { 'text': function () { return $context.$data.resultsPagesText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLoadIndicator: { visible: loading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.loading }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: buttons.upButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.buttons.upButton; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: buttons.downButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.buttons.downButton; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { dataSource: searchResultDataSource, pageLoadMode: \'scrollBottom\', focusStateEnabled:false, hoverStateEnabled:false, onItemRendered: onItemRendered, noDataText: \'\', encodeNoDataText: true }, attr: { \'aria-labelledby\': searchResultHeaderId }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.searchResultDataSource, 'pageLoadMode': 'scrollBottom', 'focusStateEnabled': false, 'hoverStateEnabled': false, 'onItemRendered': $context.$data.onItemRendered, 'noDataText': '', 'encodeNoDataText': true }; }, 'attr': function () { return { 'aria-labelledby': $context.$data.searchResultHeaderId }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxAction: { model: data, action: itemClickAction }, attr: attr', function ($context, $element) { return { 'dxAction': function () { return { 'model': $context.$data.data, 'action': $context.$data.itemClickAction }; }, 'attr': function () { return $context.$data.attr; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: data.text', function ($context, $element) { return { 'text': function () { return $context.$data.data.text; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: info', function ($context, $element) { return { 'text': function () { return $context.$data.info; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: noResultText', function ($context, $element) { return { 'text': function () { return $context.$data.noResultText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: visible, css: cssClasses, dxMutationObserver: progressBarAccessibilityKeyboardHelper', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.cssClasses; }, 'dxMutationObserver': function () { return $context.$data.progressBarAccessibilityKeyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style : { width: progress  + \'%\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$data.progress + '%' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: cancelButton.text, visible: cancelButton.visible, click: function() { cancelButton.action && cancelButton.action(); }', function ($context, $element) { return { 'text': function () { return $context.$data.cancelButton.text; }, 'visible': function () { return $context.$data.cancelButton.visible; }, 'click': function () { return function () { $context.$data.cancelButton.action && $context.$data.cancelButton.action(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: model.headerText, visible: model.showHeader', function ($context, $element) { return { 'text': function () { return $context.$data.model.headerText; }, 'visible': function () { return $context.$data.model.showHeader; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: model.emptyText', function ($context, $element) { return { 'text': function () { return $context.$data.model.emptyText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxValidationGroup: {}, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; }, 'dxValidationGroup': function () { return {}; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: model.showButtons', function ($context, $element) { return { 'visible': function () { return $context.$data.model.showButtons; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLoadIndicator: { visible: model.parametersLoading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.model.parametersLoading }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: $data', function ($context, $element) { return { 'dxButton': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: widget.dataSource, onValueChanged: widget.onValueChanged, value: widget.value, displayExpr: widget.displayExpr, useItemTextAsTitle: true, itemTemplate: widget.itemTemplate, searchMode: widget.searchMode, searchEnabled: widget.searchEnabled, searchTimeout: widget.searchTimeout, disabled: widget.disabled, dropDownOptions: { container: getPopupContainer($element), wrapperAttr: widget.wrapperAttr, }, tabIndex: \'-1\', inputAttr: widget.inputAttr }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.widget.dataSource, 'onValueChanged': $context.$data.widget.onValueChanged, 'value': $context.$data.widget.value, 'displayExpr': $context.$data.widget.displayExpr, 'useItemTextAsTitle': true, 'itemTemplate': $context.$data.widget.itemTemplate, 'searchMode': $context.$data.widget.searchMode, 'searchEnabled': $context.$data.widget.searchEnabled, 'searchTimeout': $context.$data.widget.searchTimeout, 'disabled': $context.$data.widget.disabled, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element), 'wrapperAttr': $context.$data.widget.wrapperAttr }, 'tabIndex': '-1', 'inputAttr': $context.$data.widget.inputAttr }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Document Map\', \'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Document Map', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treelist: treeListOptions', function ($context, $element) { return { 'treelist': function () { return $context.$data.treeListOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-tmplt', 'data': $context.$data.actionLists.toolbarItems }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: listItems.length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.listItems.length > 1; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: listItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.listItems; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $index() !== ($parent.listItems.length - 1)', function ($context, $element) { return { 'if': function () { return $context.$index() !== ($context.$parent.listItems.length - 1); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $index() === ($parent.listItems.length - 1)', function ($context, $element) { return { 'if': function () { return $context.$index() === ($context.$parent.listItems.length - 1); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: model.getViewModel()', function ($context, $element) { return { 'with': function () { return $context.$data.model.getViewModel(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: (searchResultCount > 0 || loading)', function ($context, $element) { return { 'if': function () { return ($context.$data.searchResultCount > 0 || $context.$data.loading); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: (searchCompleted && searchResultCount == 0)', function ($context, $element) { return { 'if': function () { return ($context.$data.searchCompleted && $context.$data.searchResultCount == 0); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: (model && !model.isEmpty)', function ($context, $element) { return { 'if': function () { return ($context.$data.model && !$context.$data.model.isEmpty); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: (!model || model.isEmpty)', function ($context, $element) { return { 'if': function () { return (!$context.$data.model || $context.$data.model.isEmpty); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: model.buttons', function ($context, $element) { return { 'foreach': function () { return $context.$data.model.buttons; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: model', function ($context, $element) { return { 'if': function () { return $context.$data.model; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate : { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: reportPreview.previewVisible, cssArray: [ $data.rootStyle , { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl } ]', function ($context, $element) { return { 'visible': function () { return $context.$data.reportPreview.previewVisible; }, 'cssArray': function () { return [$context.$data.rootStyle, { 'dx-rtl': $context.$data.rtl, 'dx-ltr': !$context.$data.rtl }]; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('textCopier, css: { \'dx-rtl\': rtlReport, \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }', function ($context, $element) { return { 'textCopier': function () { return undefined; }, 'css': function () { return { 'dx-rtl': $context.$data.rtlReport, 'dxrp-editing-fields-hightlighted': $context.$data.editingFieldsHighlighted }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxMutationObserver: previewBrickKeyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.previewBrickKeyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('autoFit: autoFitOptions, styleunit: { width: width, height: height }', function ($context, $element) { return { 'autoFit': function () { return $context.$data.autoFitOptions; }, 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('lazyImages: lazyImagesOptions', function ($context, $element) { return { 'lazyImages': function () { return $context.$data.lazyImagesOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': width, \'height\': height }, toView: { setPageActiveChangedEvent: setPageActiveChangedEvent }, css : { \'dxrd-report-preview-active\': active }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'toView': function () { return { 'setPageActiveChangedEvent': $context.$data.setPageActiveChangedEvent }; }, 'css': function () { return { 'dxrd-report-preview-active': $context.$data.active }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-visually-hidden\': !!currentPage }', function ($context, $element) { return { 'css': function () { return { 'dxrd-visually-hidden': !!$context.$data.currentPage }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: emptyDocumentCaption', function ($context, $element) { return { 'text': function () { return $context.$data.emptyDocumentCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { \'aria-label\': $root.getLocalization(\'Clipboard\', \'ASPxReportsStringId.WebDocumentViewer_AriaClipboard\') }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$root.getLocalization('Clipboard', 'ASPxReportsStringId.WebDocumentViewer_AriaClipboard') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxViewerExport: $data', function ($context, $element) { return { 'dxViewerExport': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: progressBar', function ($context, $element) { return { 'with': function () { return $context.$data.progressBar; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-preview-progress-bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-preview-progress-bar'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !showMultipagePreview', function ($context, $element) { return { 'if': function () { return !$context.$data.showMultipagePreview; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: currentPage', function ($context, $element) { return { 'with': function () { return $context.$data.currentPage; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: pageLoading || (!pageLoading && displayImageSrc)', function ($context, $element) { return { 'if': function () { return $context.$data.pageLoading || (!$context.$data.pageLoading && $context.$data.displayImageSrc); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-preview-page\', afterRender: function() { delayedInit() } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-page', 'afterRender': function () { $context.$data.delayedInit(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: showMultipagePreview && !!currentPage', function ($context, $element) { return { 'if': function () { return $context.$data.showMultipagePreview && !!$context.$data.currentPage; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: {data: pages, afterRender: function() { delayedInit() } }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.pages, 'afterRender': function () { $context.$data.delayedInit(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('lazy: { if: pageLoading || (!pageLoading && displayImageSrc) }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$data.pageLoading || (!$context.$data.pageLoading && $context.$data.displayImageSrc) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-preview-page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-preview-page'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('cacheElement: { action: cacheElement }, dxEllipsisEditor: { value: displayValue, readOnly: true, inputAttr: { \'aria-label\': _displayName, id: _editorInputId }, openOnFieldClick: true, buttonAction: function() { showPopup(); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': $context.$data.cacheElement }; }, 'dxEllipsisEditor': function () { return { 'value': $context.$data.displayValue, 'readOnly': true, 'inputAttr': { 'aria-label': $context.$data._displayName, 'id': $context.$data._editorInputId }, 'openOnFieldClick': true, 'buttonAction': function () { $context.$data.showPopup(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: getPopupSettings()', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.getPopupSettings(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: scrollViewOptions', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.scrollViewOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxMutationObserver: dialogKeyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.dialogKeyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: predefinedRanges.attr, dxScrollView: predefinedRanges.scrollViewOptions, dxMutationObserver: predefinedRanges.accessibilityKeyboardHelper', function ($context, $element) { return { 'attr': function () { return $context.$data.predefinedRanges.attr; }, 'dxScrollView': function () { return $context.$data.predefinedRanges.scrollViewOptions; }, 'dxMutationObserver': function () { return $context.$data.predefinedRanges.accessibilityKeyboardHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { \'aria-selected\': selected }, css: { \'dxd-state-selected\': selected }, dxAction: { action: click }', function ($context, $element) { return { 'attr': function () { return { 'aria-selected': $context.$data.selected }; }, 'css': function () { return { 'dxd-state-selected': $context.$data.selected }; }, 'dxAction': function () { return { 'action': $context.$data.click }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCalendar: { value: value, onValueChanged: onValueChanged, cellTemplate: \'select_cell\', height: height, min: min }', function ($context, $element) { return { 'dxCalendar': function () { return { 'value': $context.$data.value, 'onValueChanged': $context.$data.onValueChanged, 'cellTemplate': 'select_cell', 'height': $context.$data.height, 'min': $context.$data.min }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-back-accented\': $parent.inRange(date) }', function ($context, $element) { return { 'css': function () { return { 'dxd-back-accented': $context.$parent.inRange($context.$data.date) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxrvDateRangeEditor: {value: value }', function ($context, $element) { return { 'dxrvDateRangeEditor': function () { return { 'value': $context.$data.value }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: popupTemplate, data: popupModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.popupTemplate, 'data': $context.$data.popupModel }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: predefinedRanges.items', function ($context, $element) { return { 'foreach': function () { return $context.$data.predefinedRanges.items; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate:{ name:\'select_cell\' }', function () { return { dxTemplate: { name: 'select_cell' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-rtl\' : viewmodel.rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$data.viewmodel.rtl }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { \'display\': showHorizontally ? \'flex\' : \'block\' }', function ($context, $element) { return { 'style': function () { return { 'display': $context.$data.showHorizontally ? 'flex' : 'block' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-propertieseditor\', data: $data }, css: { \'dxrd-parameters-border\' : !$data.hideBorder, \'dxrd-parameters-horizontal\' : $data.showHorizontally, }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-propertieseditor', 'data': $context.$data }; }, 'css': function () { return { 'dxrd-parameters-border': !$context.$data.hideBorder, 'dxrd-parameters-horizontal': $context.$data.showHorizontally }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: viewmodel.editors', function ($context, $element) { return { 'foreach': function () { return $context.$data.viewmodel.editors; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTagBox: getOptions({ dataSource: dataSource, searchEnabled: true, useItemTextAsTitle: true, searchExpr: searchExpr || [\'displayValue\'], value: value, displayExpr: displayExpr || \'displayValue\', valueExpr: valueExpr || \'value\', multiline: false, showSelectionControls: true, showDropDownButton: !!showDropDownButton, selectAllMode: \'allPages\', selectedItems: selectedItems, inputAttr: { \'aria-label\': displayName, id: editorInputId }, disabled: disabled, selectAllText: selectAllText, placeholder: placeholder, maxDisplayedTags: maxDisplayedTags, showMultiTagOnly: true, dropDownOptions: { container: getPopupContainer($element), position: { boundary: getPopupContainer($element), collision: \'flipfit flipfit\', of: $element, at: \'bottom\', my: \'top\' } } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxTagBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.dataSource, 'searchEnabled': true, 'useItemTextAsTitle': true, 'searchExpr': $context.$data.searchExpr || ['displayValue'], 'value': $context.$data.value, 'displayExpr': $context.$data.displayExpr || 'displayValue', 'valueExpr': $context.$data.valueExpr || 'value', 'multiline': false, 'showSelectionControls': true, 'showDropDownButton': !!$context.$data.showDropDownButton, 'selectAllMode': 'allPages', 'selectedItems': $context.$data.selectedItems, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId }, 'disabled': $context.$data.disabled, 'selectAllText': $context.$data.selectAllText, 'placeholder': $context.$data.placeholder, 'maxDisplayedTags': $context.$data.maxDisplayedTags, 'showMultiTagOnly': true, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element), 'position': { 'boundary': $context.$data.getPopupContainer($element), 'collision': 'flipfit flipfit', 'of': $element, 'at': 'bottom', 'my': 'top' } } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'info': $context.$data.info, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxdAccordion: { collapsed: collapsed, alwaysShow: alwaysShow, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed, 'alwaysShow': $context.$data.alwaysShow, 'setCollapsed': $context.$data.setCollapsed, 'getCollapsed': $context.$data.getCollapsed, 'setCollapsedChangedEvent': $context.$data.setCollapsedChangedEvent }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-empty-header\': hideEditorHeader }', function ($context, $element) { return { 'css': function () { return { 'dxrd-empty-header': $context.$data.hideEditorHeader }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { role: \'treeitem\', \'id\': isComplexEditor && headerId, \'aria-owns\': isComplexEditor && contentId, \'aria-expanded\': isComplexEditor && (alwaysShow || !collapsed ? \'true\' : \'false\') }, css: { \'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor, \'dxrd-vertical-label\': editorOptions && editorOptions.hasVerticalLabel }', function ($context, $element) { return { 'attr': function () { return { 'role': 'treeitem', 'id': $context.$data.isComplexEditor && $context.$data.headerId, 'aria-owns': $context.$data.isComplexEditor && $context.$data.contentId, 'aria-expanded': $context.$data.isComplexEditor && ($context.$data.alwaysShow || !$context.$data.collapsed ? 'true' : 'false') }; }, 'css': function () { return { 'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented': $context.$data.isComplexEditor, 'dxrd-vertical-label': $context.$data.editorOptions && $context.$data.editorOptions.hasVerticalLabel }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\', \'dxd-back-secondary\': isGroupLabel, \'dx-accordion-hide-collapsing-image\': alwaysShow }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-accordion-empty': $context.$data.templateName === 'dx-emptyHeader', 'dxd-back-secondary': $context.$data.isGroupLabel, 'dx-accordion-hide-collapsing-image': $context.$data.alwaysShow }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$data.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, attr: { \'title\': displayName }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, attr: { \'title\': displayName, for: editorInputId }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: ko.unwrap(isPropertyModified) ? \'Bold\' : \'\'}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName, 'for': $context.$data.editorInputId }; }, 'css': function () { return { 'dx-property-required': $context.$data.isRequired }; }, 'style': function () { return { 'fontWeight': $context.ko.unwrap($context.$data.isPropertyModified) ? 'Bold' : '' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: $data.hideEditorHeader', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hideEditorHeader; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: $data.alwaysShow', function ($context, $element) { return { 'ifnot': function () { return $context.$data.alwaysShow; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: painter.scale', function ($context, $element) { return { 'zoom': function () { return $context.$data.painter.scale; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { width: 48, height: \'auto\', wrapperAttr: { class: \'dx-picture-editing-active\' }, position:{ my: \'left top\', at: \'right top\', boundary: getPopupContainer($element), of: element, collision: \'fit fit\', offset: \'1 -1\' }, container: shadingEnabled ? \'.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen\' : getPopupContainer($element), target: getPopupContainer($element), showTitle: false, onContentReady: onContentReady, showCloseButton: false, animation: {}, shading: false, visible: true }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 48, 'height': 'auto', 'wrapperAttr': { 'class': 'dx-picture-editing-active' }, 'position': { 'my': 'left top', 'at': 'right top', 'boundary': $context.$data.getPopupContainer($element), 'of': $context.$data.element, 'collision': 'fit fit', 'offset': '1 -1' }, 'container': $context.$data.shadingEnabled ? '.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen' : $context.$data.getPopupContainer($element), 'target': $context.$data.getPopupContainer($element), 'showTitle': false, 'onContentReady': $context.$data.onContentReady, 'showCloseButton': false, 'animation': {}, 'shading': false, 'visible': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: action, attr: { title: title }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: icon }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.icon }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: scale', function ($context, $element) { return { 'zoom': function () { return $context.$data.scale; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopover: { width: width, height: height, wrapperAttr: { class: \'dx-picture-edit-popup-content\' }, hideOnOutsideClick: hideOnOutsideClick, onShown: onShown, onHidden: onHidden, onContentReady: onContentReady, position: { my: \'left top\', at: \'right top\', boundary: $root.getPopupContainer($element), of: getPositionTarget($element), collision: \'flipfit fit\', offset: \'-10 0\' }, container: getPositionTarget($element), showTitle: false, target: getPositionTarget($element), showCloseButton: false, shading: false, animation: {}, visible: visible }', function ($context, $element) { return { 'dxPopover': function () { return { 'width': $context.$data.width, 'height': $context.$data.height, 'wrapperAttr': { 'class': 'dx-picture-edit-popup-content' }, 'hideOnOutsideClick': $context.$data.hideOnOutsideClick, 'onShown': $context.$data.onShown, 'onHidden': $context.$data.onHidden, 'onContentReady': $context.$data.onContentReady, 'position': { 'my': 'left top', 'at': 'right top', 'boundary': $context.$root.getPopupContainer($element), 'of': $context.$data.getPositionTarget($element), 'collision': 'flipfit fit', 'offset': '-10 0' }, 'container': $context.$data.getPositionTarget($element), 'showTitle': false, 'target': $context.$data.getPositionTarget($element), 'showCloseButton': false, 'shading': false, 'animation': {}, 'visible': $context.$data.visible }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: brushWidthText', function ($context, $element) { return { 'text': function () { return $context.$data.brushWidthText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSlider: { min: 1, max: 9, value: lineWidth, onValueChanged: onLineWidthChanged, label: { visible: true }, tooltip: { enabled: true, showMode: \'always\', position: \'bottom\' } }', function ($context, $element) { return { 'dxSlider': function () { return { 'min': 1, 'max': 9, 'value': $context.$data.lineWidth, 'onValueChanged': $context.$data.onLineWidthChanged, 'label': { 'visible': true }, 'tooltip': { 'enabled': true, 'showMode': 'always', 'position': 'bottom' } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: brushColorText', function ($context, $element) { return { 'text': function () { return $context.$data.brushColorText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: colors', function ($context, $element) { return { 'foreach': function () { return $context.$data.colors; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { selected: isSelected }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { background: value }, dxclick: action', function ($context, $element) { return { 'style': function () { return { 'background': $context.$data.value }; }, 'dxclick': function () { return $context.$data.action; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: sizeModeText', function ($context, $element) { return { 'text': function () { return $context.$data.sizeModeText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: { data: sizeModeValues }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.sizeModeValues }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { selected: isSelected }, template: iconTemplate, dxclick: action, attr: { title: attrTitle }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; }, 'template': function () { return $context.$data.iconTemplate; }, 'dxclick': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.attrTitle }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: alignmentText', function ($context, $element) { return { 'text': function () { return $context.$data.alignmentText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: { data: alignmentValues }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.alignmentValues }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { selected: isSelected }, template: iconTemplate, dxclick: action, , attr: { title: attrTitle }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; }, 'template': function () { return $context.$data.iconTemplate; }, 'dxclick': function () { return $context.$data.action; }, '': function () { return undefined; }, 'attr': function () { return { 'title': $context.$data.attrTitle }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: contentWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentWidth }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: filter, valueChangeEvent: \'keyup\', onValueChanged: onFilterChanged, placeholder: searchPlaceholder, showClearButton: true  }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.filter, 'valueChangeEvent': 'keyup', 'onValueChanged': $context.$data.onFilterChanged, 'placeholder': $context.$data.searchPlaceholder, 'showClearButton': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: contentWidth }, dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentWidth }; }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: width + 10 }, visible: visible, click: action', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width + 10 }; }, 'visible': function () { return $context.$data.visible; }, 'click': function () { return $context.$data.action; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: width, height: height }, style: { backgroundImage: \'url(\' + (url || data) + \')\' }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'style': function () { return { 'backgroundImage': 'url(' + ($context.$data.url || $context.$data.data) + ')' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('searchHighlighting: { text: text, textToSearch: filter }, attr: { title: text }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.text, 'textToSearch': $context.$data.filter }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { if: $data.template, name: $data.template, data: $data.templateOptions }', function ($context, $element) { return { 'template': function () { return { 'if': $context.$data.template, 'name': $context.$data.template, 'data': $context.$data.templateOptions }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: contentTemplate, data: contentData }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.contentData }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dx-picture-editing-imagespicker\'', function ($context, $element) { return { 'template': function () { return 'dx-picture-editing-imagespicker'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: images', function ($context, $element) { return { 'foreach': function () { return $context.$data.images; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.text', function ($context, $element) { return { 'if': function () { return $context.$data.text; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $parent.filterEnabled', function ($context, $element) { return { 'if': function () { return $context.$parent.filterEnabled; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: $parent.filterEnabled', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.filterEnabled; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, useItemTextAsTitle: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'useItemTextAsTitle': true, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: values, value: value, itemTemplate: \'signature\', displayExpr: \'displayName\', valueExpr: \'key\', showClearButton: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { minWidth: \'300px\', container: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.value, 'itemTemplate': 'signature', 'displayExpr': 'displayName', 'valueExpr': 'key', 'showClearButton': true, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'minWidth': '300px', 'container': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { src: image }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.image }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { title: value }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.value }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: label', function ($context, $element) { return { 'text': function () { return $context.$data.label; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: value', function ($context, $element) { return { 'text': function () { return $context.$data.value; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: image', function ($context, $element) { return { 'if': function () { return $context.$data.image; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: image', function ($context, $element) { return { 'ifnot': function () { return $context.$data.image; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-preview-signature_img_placeholder\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-signature_img_placeholder'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: fields', function ($context, $element) { return { 'foreach': function () { return $context.$data.fields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'signature\' }', function () { return { dxTemplate: { name: 'signature' } }; });

;// ./node_modules/devexpress-reporting/dx-viewer-templates.js

external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.addTemplates({
    'dxrd-checkboxcustomglyph': '<div class="dxrd-checkbox-custom-glyph" data-bind="style: $data.customGlyphStyleCss"></div>',
    'dxrv-preview-date-range-mobile': '<div class="dxrv-preview-date-range-mobile"> <div class="dx-fieldset"> <div class="dx-field"> <div data-bind="dxSelectBox: { dataSource: items, displayExpr: \'displayName\', onValueChanged: popupModel.onTextChanged, useItemTextAsTitle: true , placeholder: popupModel.selectPeriodPlaceholder }"></div> </div> <div class="dx-field"> <div class="dx-fieldset-column"> <div class="dx-fieldset-header" data-bind="text: popupModel.fromText"></div> <div class="dxrv-daterange-editor-button" data-bind="css: { \'dx-button-default\': popupModel.startButton.focused }, dxButton: popupModel.startButton"></div> </div> <div class="dx-fieldset-column dx-fieldset-column-right"> <div class="dx-fieldset-header" data-bind="text: popupModel.untilText"></div> <div class="dxd-back-secondary dx-fieldset-column-separator"></div> <div class="dxrv-daterange-editor-button" data-bind="css: { \'dx-button-default\': popupModel.endButton.focused }, dxButton: popupModel.endButton"></div> </div> </div> <div class="dx-field"> <div class="dxrv-daterange-editor-item"> <!-- ko if: popupModel.startButton.focused --> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: startRange } --> <!-- /ko --> <!-- /ko --> <!-- ko if: popupModel.endButton.focused --> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: endRange } --> <!-- /ko --> <!-- /ko --> </div> </div> </div> </div>',
    'dxrd-preview-page-mobile': '<div class="dxrdp-content" data-bind="dxclick: clickToBrick, styleunit: { width: width, height: height }, autoFit: autoFitOptions"> <div class="dxrdp-loading-wrapper" data-bind="styleunit: { width: width, height: height, lineHeight: height }, style: { \'background-color\': color }, visible: pageLoading, text: loadingText"> </div> <img class="dxrd-width-100 dxrd-height-100" data-bind="attr: { src: displayImageSrc }, style:{ \'background-color\': color }" /> <div class="dxrdp-active-border" data-bind="css: { \'dxrdp-active\': active && hasBricks }, visible: !readerMode"></div> <!-- ko foreach: activeBricks --> <!-- ko template: { name: "dxrd-page-brick-mobile" } --> <!--/ko--> <!--/ko--> <!-- ko if: !brickLoading && editingFields--> <!-- ko foreach: editingFields --> <!-- ko template: template --> <!--/ko--> <!--/ko--> <!--/ko--> </div>',
    'dxrd-page-brick-mobile': '<div class="dxrd-report-preview-brick" data-bind="style: { top: topP, left: leftP, right: rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': active }"> </div>',
    'dxrdp-search-mobile': '<!-- ko if: $data.enabled --> <div class="dxrdp-search-wrapper" data-bind="styleunit:{ height: height }, dxrdSearchBar: $data"> <div class="dxrd-mobile-search"> <div class="dxrdp-taptosearch" data-bind="visible: !editorVisible, dxclick: focusEditor"> <div class="dxrdp-taptosearch-text" data-bind="text: tapToSearchText"></div> </div> <div class="dxrdp-search-panel" data-bind="visible: editorVisible"> <div class="dxrdp-search-editor" data-bind="dxTextBox: { value: searchText, onValueChanged: onSearchTextChanged, onEnterKey: startSearch }"></div> </div> </div> </div> <!-- /ko -->',
    'dxrd-preview-export-to-mobile': '<div class="dxrd-preview-export-to" data-bind="dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to\' }, items: items, onItemClick: clickAction }, attr: { title: $root.getLocalization(text, $data.textId) }"> <div data-options="dxTemplate: { name: \'item\' }" data-bind="attr: { title: $root.getLocalization(text, $data.textId) }"> <!--ko if: $data.format --> <div class="dxrd-preview-export-item-text" data-bind="text: $root.getLocalization($data.text, $data.textId)"></div> <!-- /ko --> <!--ko ifnot: $data.format --> <div class="dxrd-preview-export-item-image-wrapper"> <div class="dxrd-preview-export-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}"> </div> </div> <div class="dx-menu-item-popout-container"> <div class="dx-menu-item-popout"></div> </div> <!-- /ko --> </div> </div>',
    'dxrdp-surface-mobile-bottom': '<div class="dxrdp-mobile-actions" data-bind="visible: visible"> <div class="dxrdp-mobile-actions-content"> <!-- ko foreach: actions --> <div class="dxrdp-mobile-action" data-bind="visible: visible, css: $data.imageClassName, template: { name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, dxclick: clickAction"> </div> <!-- ko if: $data.content --> <!-- ko template: $data.content --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrdp-pages-mobile': '<div class="dxrdp-mobile-paginator" data-bind="dxrdMobilePaginator: $data"> <div class="dxrdp-mobile-paginator-content"> <div class="dxrdp-mobile-paginator-text" data-bind="text : text"></div> </div> </div>',
    'dxrd-menu-export-content': '<div class="dxrd-menu-export-popover" data-bind="dxPopover: { wrapperAttr: { class: \'dxrd-menu-export-popover\' }, width: \'266px\', height: \'266px\', visible: visible, target: \'.dxrdp-mobile-action.dxrd-image-export-to\', container: $root.getPopupContainer($element), }"> <!-- ko foreach: items --> <div class="dxrd-menu-export-item" data-bind="dxclick: action, text: text"> </div> <!-- /ko--> </div>',
    'dxrd-menu-parameters-content': '<div data-bind="dxPopup: { wrapperAttr: { class: \'dxrd-menu-parameters-popup\' }, showTitle: false, onHidden: onHidden, width: \'100vw\', height: \'100vh\', visible: visible, container: $root.getPopupContainer($element), }"> <!-- ko template: { name: \'dxrv-preview-parameters-mobile\', data: $data }--> <!-- /ko --> </div>',
    'dxrv-preview-parameters-mobile': '<div class="dxrdp-parameters-mobile" data-bind="dxValidationGroup: {}, css: className"> <div class="dxrdp-parameters-title" data-bind="text: $data.title"> </div> <div class="dxrdp-parameters-scroll" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, bounceEnabled: false }"> <!-- ko template: { name: $data.contentTemplate, data: model.getViewModel() }--> <!-- /ko --> </div> <div class="dxrdp-parameters-buttons text-buttons" data-bind="foreach: { data: $data.actionButtons }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }"> <div class="dxrdp-parameter-action" data-bind="dxButton: { text: text, onClick: function(params){ $data.action(params) }, disabled: disabled, visible: visible }, css: className"></div> </div> <div class="dxrdp-parameters-buttons" data-bind="visible: showIcons, foreach: { data: $data.actionIcons }"> <div class="dxrdp-parameter-icon" data-bind="dxButton: { onClick: function(params){ $data.action(params)}, disabled: disabled }, css: className"></div> </div> </div>',
    'dxrv-range-parameter-mobile': '<div data-bind="dxrvDateRangeEditor: {value: value, isMobile: true }"></div>',
    'dxrdp-surface-mobile': '<div class="dxrd-preview-wrapper dxrdp-fullscreen dxrd-preview-surface" data-bind="style: { pointerEvents: surfaceEvents, touchEvents: surfaceEvents }, styleunit: { top: topOffset, height: previewWrapperSizeHeight, width: previewWrapperSizeWidth }, slide: slideOptions, mobileZoom: mobileZoomOptions, dxclick: click, css: { \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }"> <!-- ko template: {name: \'dxrd-preview-progress-bar\', data: progressBar }--> <!-- /ko --> <div class="dxrd-mobile-content"> <div class="dxrd-mobile-gallery" data-bind="style: { pointerEvents: galleryEvents, touchEvents: galleryEvents }, dxGalleryReportPreview: { dataSource: gallery.items, gallery: gallery, slideOptions: slideOptions, animationEnabled: gallery.animationEnabled, disabled: zoomUpdating, width:\'100%\', height: \'100%\', showIndicator: false, loop: true, onSelectionChanged: onSlide, onOptionChanged: gallery.onOptionChanged }"> <div data-options="dxTemplate: { name: \'item\' }"> <div class="dxrd-scrollView-mobile" data-bind="dxScrollView: reportPreview.scrollViewOptions"> <div class="dxrd-gallery-blocks" data-bind="style: gallery.contentSize"> <!-- ko foreach: blocks --> <!-- ko if: page --> <div class="dxrd-gallery-block" data-bind="styleunit: position, css: classSet"> <div class="dxrd-gallery-block-content" data-bind="styleunit: { width: Math.max(page.width, position.width), height: Math.max(page.height, position.height) }, style: { \'background-color\': page.color }"> <div class="dxrdp-active-border" data-bind="css: { \'dxrdp-active\': page.active && active, \'dxrdp-page-padding\': page.active && active }, visible: reportPreview.slideOptions.readerMode"></div> <div class="dxrd-mobile-page" data-bind="styleunit: { width: page.width, height: page.height }, style: { pointerEvents: reportPreview.pageEvents, touchEvents: reportPreview.pageEvents }"> <!-- ko template: { name :\'dxrd-preview-page-mobile\', data: page } --> <!-- /ko --> </div> </div> </div> <!-- /ko --> <!-- /ko --> </div> </div> </div> </div> </div> </div> <input type="text" class="dxrd-display-none" />',
    'dxrp-editing-field-container': '<div class="dxrp-editing-field-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle, zoom: zoom, css: { active: active, readonly: field.readOnly }"> <div class="dxrp-editing-field-borders" data-bind="style: borderStyle"></div> <div class="dxrp-editing-field-content" data-bind="dxclick: activateEditor"> <!-- ko if: !active || field.readOnly  --> <!-- ko if: field.htmlValue  --> <div class="dxrp-editing-field-readonly-text" data-bind="style: textStyle, css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}"> <div class="dxrp-editing-field-text-html dxrp-editing-field-text-html-complex" data-bind="style: breakOffsetStyle, html: field.htmlValue"></div> </div> <!--/ko--> <!-- ko ifnot: field.htmlValue  --> <div class="dxrp-editing-field-readonly-text" data-bind="style: textStyle, css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}, text: field.editValue"></div> <!--/ko--> <!--/ko--> <!-- ko if: active && !field.readOnly --> <!-- ko template: { name: editorTemplate, data: data } --> <!--/ko--> <!--/ko--> </div> </div>',
    'dxrp-editing-field-text': '<textarea class="dxrp-editing-field-text" data-bind="value: value, valueUpdate: \'keypress\', style: textStyle, event: { blur: hideEditor, keyup: keypressAction }"></textarea>',
    'dxrp-editing-field-mask': '<div class="dxrp-editing-field-mask" data-bind="dxTextBox: options, childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}"></div>',
    'dxrp-editing-field-number': '<div class="dxrp-editing-field-mask" data-bind="dxNumberBox: options, childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}"></div>',
    'dxrp-editing-field-datetime': '<div  class="dxrp-editing-field-datetime dxrd-width-100" data-bind="dxDateBox: $data.getOptions({ dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}"></div>',
    'dxrp-editing-field-image': '<div class="dxrp-editing-field-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle "> <!-- ko template: \'dxrp-editing-field-image-editor\' --> <!-- /ko --> </div>',
    'dxrp-editing-field-image-editor': '<div class="dxrd-height-100 dxrd-width-100" data-bind="dxPictureEditor: $data"></div>',
    'dxrp-editing-field-checkbox': '<div class="dxrp-editing-field-check-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle, zoom: zoom, click: onClick"> <div class="dxrp-editing-field-check" tabindex="1" data-bind="style: checkStyle, template: { name: checkStateStyleIcon, if: !!checkStateStyleIcon }"> </div> </div>',
    'dxrp-editing-field-radio': '<div class="dxrp-editing-field-check-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle, zoom: zoom, click: onClick"> <div class="dxrp-editing-field-check" data-bind="style: checkStyle"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 760 760" preserveAspectRatio="xMidYMid meet"> <g fill="#010101" stroke="none"> <path d="M32,380a348,348 0 1,0 696,0a348,348 0 1,0 -696,0" class="highlight dxrd-stroke-width-50 dxrd-stroke-rgb-0"  /> <path d="M185,380a195,195 0 1,0 390,0a195,195 0 1,0 -390,0" data-bind="style: { fill: checked ? \'black\' : \'transparent\' }" /> </g> </svg> </div> </div>',
    'dxrp-character-comb-editing-field': '<div class="dxrp-editing-field-charactercomb dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle, dxclick: activateEditor, zoom: zoom, css: { active: active, readonly: field.readOnly }"> <!-- ko if: !active || field.readOnly  --> <!-- ko foreach: cells --> <div class="dxrp-editing-field-charactercomb-cell" data-bind="style: style, text: text"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: active && !field.readOnly --> <textarea  class="dxrp-editing-field-text dxrd-background-white" data-bind="value: field.editorValue, valueUpdate: \'keypress\', style: textStyle, event: { blur: hideEditor, keyup: keypressAction }"></textarea> <!--/ko--> </div>',
    'dxrd-export-tool-content': '<div class="dxrd-visually-hidden"> <form data-bind="attr: { \'action\': exportActionUri }, foreach: exportFormData" method="post"> <input data-bind="attr: {\'name\': name, \'value\': value}"/> </form> </div> <div data-bind="dxPopup: { width: popupOptions.width, height: popupOptions.height, title: popupOptions.title, visible: popupOptions.visible, showCloseButton: true, onHidden: popupOptions.onHidden, toolbarItems: popupOptions.toolbarItems, wrapperAttr: popupOptions.wrapperAttr, container: popupOptions.getPopupContainer($element), position: { of: popupOptions.getPopupContainer($element) } }"> <div class="dxrd-print-dialog-content"> <div data-bind="text: printingTexts.caption"></div> <p></p> <!-- ko if: printingTexts.prefix --> <div class="dxrdp-print-text-prefix" data-bind="text: printingTexts.prefix"></div> <!-- /ko --> <a href="" class="dxrd-preview-printing-link" data-bind="click: printingLinkCallback, text: printingTexts.link"></a> <!-- ko if: printingTexts.postfix --> <div class="dxrdp-print-text-postfix" data-bind="text: printingTexts.postfix"></div> <!-- /ko --> </div> </div>',
    'dxrd-preview-export-options': '<div class="dxrd-preview-export-options-wrapper dxrd-preview-property-wrapper" data-bind="visible: active && visible"> <div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: $root.getLocalization(\'Export Options\', \'DevExpress.XtraReports.UI.XtraReport.ExportOptions\')"></span> </div> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); }  }"> <div class="dx-fieldset" data-bind="dxMutationObserver: keyboardHelper"> <div class="dxrd-right-panel-content dxrd-export-options-content" role="tree"> <!-- ko template: { name: \'dx-propertieseditor\', data: propertyGrid } --> <!-- /ko --> </div> <!-- ko template: { name: \'dx-propertygrid-popoverservice\', if: propertyGrid.popover, data: propertyGrid.popover } --> <!-- /ko --> </div> </div></div>',
    'dxrd-preview-export-to': '<div class="dxrd-preview-export-toolbar-item dxrd-toolbar-item" data-bind="visible: visible"> <div class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented"> <div class="dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted" data-bind="dxMenu: { elementAttr: { class: \'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted\' }, disabled: disabled, items: widget.items, cssClass: \'dxrdp-export-to-menu\', onItemClick: click, onSubmenuShowing: widget.onSubmenuShowing(getPopupContainer($element), $element), onSubmenuShown: widget.onSubmenuShown, onSubmenuHiding: widget.onSubmenuHiding, onItemRendered: widget.onItemRendered, tabIndex: \'-1\', }"> <div data-options="dxTemplate: { name: \'item\' }" data-bind="attr: { title: text }"> <!--ko if: $data.format --> <div class="dxrd-preview-export-item-text" data-bind="text: text"></div> <!-- /ko --> <!--ko ifnot: $data.format --> <div class="dxrd-preview-export-item-image-wrapper"> <div class="dxrd-preview-export-item-image" data-bind="css: imageClassName, template: imageTemplateName"> </div> </div> <div class="dx-menu-item-popout-container"> <div class="dx-menu-item-popout"></div> </div> <!-- /ko --> </div> </div> </div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: hasSeparator"></div> </div>',
    'dxrd-page-brick-clickable': '<div class="dxrd-report-preview-brick" data-bind="dxclick: function(_, event){ onClick(event); event.stopPropagation(); }, style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active, \'dxrd-report-preview-brick-selectable\': !($data.bricks) }"> <!-- ko if: $data.navigation --> <div class="dxrd-report-preview-brick-navigation" data-bind="css: { \'dxrdp-navigation-brick-drill-down\' : !!navigation.drillDownKey, \'dxrdp-navigation-brick-sorting\' : !!navigation.sortData, \'dxrdp-navigation-brick-sorting-desc\': navigation.sortData && navigation.sortData.order === 1, \'dxrdp-navigation-brick-sorting-asc\': navigation.sortData && navigation.sortData.order === 2 }"></div> <!--/ko--> </div>',
    'dxrd-preview-page': '<div role="img" class="dxrd-report-preview-content dxrd-position-relative dxrd-width-100 dxrd-height-100"  data-bind="attr: {\'aria-label\': currentPageAriaLabelImgAlt }, dxclick: clickToBrick, \'brick-selection-prog\': brickSelectionProg"> <div class="dxrd-report-preview-content-loading-wrapper dxrd-background-white"  data-bind="styleunit: { \'width\': width + 2, \'height\': height + 2 }, visible: pageLoading"> <div class="dxrd-report-preview-content-loading-panel dxrd-text-align-center"  data-bind="styleunit: { \'paddingTop\': height / 2.3 }"> <div class="dxrd-report-preview-content-loading-panel-text" data-bind="text: loadingText"></div> </div> </div> <div> <img class="dxrd-pointer-events-none dxrd-width-100 dxrd-height-100" data-bind="attr: { src: displayImageSrc, \'alt\': currentPageAriaLabelImgAlt }" /> <!-- ko foreach: activeBricks --> <!-- ko template: { name: "dxrd-page-brick-mobile", data: $data } --> <!--/ko--> <!--/ko--> <!-- ko foreach: clickableBricks --> <!-- ko template: { name: "dxrd-page-brick-clickable", data: $data } --> <!--/ko--> <!--/ko--> <!-- ko if: !brickLoading && $data.editingFields--> <div data-bind="dxMutationObserver: editingFieldsKeyboardHelper"> <!-- ko foreach: editingFields --> <!-- ko template: template --> <!--/ko--> <!--/ko--> </div> <!--/ko--> </div> </div>',
    'dxrp-popup-editing-field-image': '<div class="dxrp-editing-field-container" data-bind="style: containerStyle"> <div class="dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="dxclick: activateEditor, css: parentPopupClass"> <div class="dxrp-editing-field-popup-container-cloned" data-bind="dxPainter: getPainterOptions()"></div> <!-- ko template: { name: \'dx-picture-editing-popup\' } --> <!-- /ko --> </div> </div>',
    'dx-picture-editing-popup': '<div class="dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen" data-bind="dxPopup: { width: containerStyle.width, height: containerStyle.height, position: { boundary: popupData.getPopupContainer($element), of: popupData.getPositionTarget($element), collision: \'flipfit flipfit\' }, container: popupData.getPopupContainer($element), showTitle: false, target: popupData.getPopupContainer($element), deferRendering: false, hideOnOutsideClick: true, showCloseButton: false, onContentReady: popupData.onContentReady, onHiding: popupData.onHiding, onShown: popupData.onShown, shading: popupData.shading, wrapperAttr: { class: \'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen\' }, animation: { show: { type: \'slide\', duration: 0, to: { opacity: 1 }, from: { opacity: 0 } }, hide: { type: \'fade\', duration: 100, to: { opacity: 0 }, from: { opacity: 1 } } }, visible: popupData.visible }"> <!-- ko if: popupData.showContent --> <!-- ko template: { name: popupData.contentTemplate, afterRender: popupData.renderedHandler } --> <!--/ko--> <!--/ko--> </div>',
    'dxrd-zoom-autofit-select-template': '<div class="dxrd-toolbar-item-zoom" data-bind="visible: visible"> <div class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" > <div class="dxrd-toolbar-item-zoom-editor" data-bind="dxSelectBox: { items: widget.dataSource, value: widget.value, onValueChanged: widget.onValueChanged, displayExpr: widget.displayExpr, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: widget.onCustomItemCreating, useItemTextAsTitle: true, width: 140, dropDownOptions: { container: getPopupContainer($element), position: { my: \'left top\', at: \'left bottom\', of: $element }, wrapperAttr: { class: \'dx-zoom-selectbox-popup-wrapper\' } }, tabIndex: \'-1\', inputAttr: widget.inputAttr }"> </div> </div> </div>',
    'dxrd-preview-toolbar-scrollable': '<div class="dxrd-toolbar-wrapper dxrdp-toolbar-scrollable dx-shadow-top dxd-back-secondary-invariant" data-bind="dxScrollView: { showScrollbar: \'onHover\', direction: \'horizontal\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }"> <div class="dxrd-toolbar" role="toolbar" data-bind="keyDownActions: actionLists, dxMutationObserver: keyboardHelper"> <div id="dxrd-preview-toolbar-live-region" class="dxrd-visually-hidden" aria-live="polite" aria-atomic="true"></div> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems } --> <!-- /ko --> </div> </div>',
    'dxrd-preview-breadcrumb': '<!-- ko if: listItems.length > 1 --><div class="breadcrumbs-wrapper" data-bind="dxMutationObserver: keyboardHelper" aria-label="Breadcrumbs" role="navigation"> <!-- ko foreach: listItems --> <!-- ko if: $index() !== ($parent.listItems.length - 1) --> <a class="breadcrump-link breadcrumb-item dxd-text-accented dx-accessibility-border-accented" data-bind="click: function(s, e) { $parent.onClick($data.position); }"> <span data-bind="text: $data.displayText"></span> </a> <span class="breadcrumb-item-seperator" data-bind="template: { name: \'dxrd-svg-preview-breadcrumbs_seperator\' }"> </span> <!-- /ko --> <!-- ko if: $index() === ($parent.listItems.length - 1) --> <div class="breadcrumb-item dxd-text-primary dx-accessibility-border-accented" aria-current="location"> <span data-bind="text: $data.displayText"></span> </div> <!-- /ko --> <!-- /ko --></div><!-- /ko -->',
    'dxrd-preview-search': '<div role="search" aria-haspopup="listbox" class="dxrd-preview-search-wrapper" data-bind="visible: active && visible, dxMutationObserver: keyboardHelper"> <div id="dxrd-preview-search-live-region" class="dxrd-visually-hidden" aria-live="polite" aria-atomic="true"></div> <!-- ko with: model.getViewModel() --> <div class="dxrd-preview-search-tab-header"> <span class="dxrd-preview-search-tab-header-text dxrd-right-panel-header dxd-text-primary" data-bind="text: headerText"></span> <div class="dxrd-preview-search-tab-editor-button-container"> <div class="dxrd-preview-search-editor dx-searcheditor" data-bind="dxTextBox: searchEditor"></div> <div data-bind="dxButton: buttons.searchButton" class="dxrd-preview-search-button"></div> </div> <div class="dxrd-preview-search-tab-header-text"> <div class="dxrd-preview-search-checkbox" data-bind="dxCheckBox: matchCaseEditor"></div> <div class="dxrd-preview-search-checkbox dxrd-preview-search-checkbox-second" data-bind="dxCheckBox: matchWholeWordEditor"></div> </div> </div> <!-- ko if: (searchResultCount > 0 || loading) --> <div class="dxrd-preview-search-result-wrapper"> <div  class="dxrd-preview-search-result-header dxd-border-primary dxd-text-primary"> <div class="dxrd-preview-search-tab-header dxrd-preview-search-indicator-group"> <div class = "dxrd-preview-search-results dxrd-preview-search-result-text" data-bind="attr: { id: searchResultHeaderId, \'aria-busy\': loading ? \'true\' : \'false\' }"> <span class="dxrd-preview-search-result-text-bold" data-bind="text: searchResultCount"></span>&nbsp <span data-bind="text: resultsInText"></span>&nbsp <span class="dxrd-preview-search-result-text-bold" data-bind="text: searchResultPageCount"></span>&nbsp <span data-bind="text: resultsPagesText"></span> </div> <div class="dxrd-preview-search-results-navigation"> <div class="dxrdp-search-loading" data-bind="dxLoadIndicator: { visible: loading }"></div> <div data-bind="dxButton: buttons.upButton " class="dxrd-preview-search-results-navigation-button dx-searcheditor-button dx-widget dx-dropdowneditor-button dxd-icon-highlighted dx-shape-standard"></div> <div data-bind="dxButton: buttons.downButton " class="dxrd-preview-search-results-navigation-button dx-searcheditor-button dx-widget dx-dropdowneditor-button dxd-icon-highlighted dx-shape-standard"></div> </div> </div> </div> <div class="dx-accessibility-container-background dxd-back-accented"></div> <div class="dxrd-preview-search-result dxd-border-accented" data-bind="dxList: { dataSource: searchResultDataSource, pageLoadMode: \'scrollBottom\', focusStateEnabled:false, hoverStateEnabled:false, onItemRendered: onItemRendered, noDataText: \'\', encodeNoDataText: true }, attr: { \'aria-labelledby\': searchResultHeaderId }"> <div class="dxrd-preview-search-result-item dxd-list-item-back-color dxd-back-highlighted dx-accessibility-list-item dx-accessibility-focus-border-accented" data-bind="dxAction: { model: data, action: itemClickAction }, attr: attr" data-options="dxTemplate : { name: \'item\' }" > <div class="dx-accessibility-field-background dxd-back-accented"></div> <div class="dxrd-preview-search-tab-item-text propertygrid-editor-displayName dxd-text-primary" data-bind="text: data.text"></div> <div class="dxrd-preview-search-tab-item-info dxd-text-primary" data-bind="text: info"></div> </div> </div> </div> <!-- /ko --> <!-- ko if: (searchCompleted && searchResultCount == 0) --> <div  class="dxrd-preview-search-result-header dxd-border-primary dxd-text-primary"> <div class="dxrd-preview-search-tab-header dxrd-preview-search-indicator-group"> <div data-bind="text: noResultText" class = "dxrd-preview-search-result-text"> </div> </div> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-preview-progress-bar': '<div role="dialog" class="dxrd-preview-progress dxd-popup-back-color dxd-back-primary2 dxd-border-primary" data-bind="visible: visible, css: cssClasses, dxMutationObserver: progressBarAccessibilityKeyboardHelper"> <div class="dxrd-preview-progress-text dxd-text-primary" data-bind="text : text"></div> <div class="dxrd-preview-progress-bar dxd-back-primary"> <div class="dxrd-preview-progress-value dxd-preview-progress-bar-value-color dxd-back-accented" data-bind="style : { width: progress  + \'%\' }"></div> </div> <div role="button" class="dxrd-preview-progress-cancel dxd-hyperlink-color dxd-border-accented dxd-text-accented dx-accessibility-list-item dx-accessibility-border-accented" data-bind="text: cancelButton.text, visible: cancelButton.visible, click: function() { cancelButton.action && cancelButton.action(); }"></div> </div>',
    'dxrd-preview-parameters': '<div class="dxrd-preview-parameters-wrapper dxrd-preview-property-wrapper" data-bind="visible: active && visible"> <div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: model.headerText, visible: model.showHeader"></span> <!-- ko if: (model && !model.isEmpty) --> <!-- /ko --> </div> <!-- ko if: (!model || model.isEmpty) --> <div class="dxrd-group-header-parameters-empty dxd-text-primary" data-bind="text: model.emptyText"></div> <!-- /ko --> <!-- ko if: (model && !model.isEmpty) --> <div class="dxrd-right-panel-body" id="propertiesPanel" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxValidationGroup: {}, dxMutationObserver: keyboardHelper"> <div role="tree" class="dx-fieldset dxrd-right-panel-content"> <!-- ko template: { name: \'dx-propertieseditor\', data: propertyGrid } --> <!-- /ko --> </div> <div class="dxrd-preview-parameter-actions-container" data-bind="visible: model.showButtons"> <div class="dxrd-preview-parameter-action dxrd-preview-loading" data-bind="dxLoadIndicator: { visible: model.parametersLoading }"></div> <!-- ko foreach: model.buttons --> <div class="dxrd-preview-parameter-action dxrdp-parameters-reset dx-accessibility-focus-border-accented" data-bind="dxButton: $data"></div> <!-- /ko --> </div> </div> <!-- /ko --> </div>',
    'dxrd-preview-pager': '<div class="dxrd-preview-pager dxrd-toolbar-item" data-bind="visible: visible"> <div class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" > <div class="dxrd-preview-pager-selectbox" data-bind="dxSelectBox: { dataSource: widget.dataSource, onValueChanged: widget.onValueChanged, value: widget.value, displayExpr: widget.displayExpr, useItemTextAsTitle: true, itemTemplate: widget.itemTemplate, searchMode: widget.searchMode, searchEnabled: widget.searchEnabled, searchTimeout: widget.searchTimeout, disabled: widget.disabled, dropDownOptions: { container: getPopupContainer($element), wrapperAttr: widget.wrapperAttr, }, tabIndex: \'-1\', inputAttr: widget.inputAttr }"> </div> </div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div> </div>',
    'dxrd-preview-document-map': '<div class="dxrd-preview-document-map dxrd-height-100 dxrd-overflow-hidden" data-bind="visible: active && visible" > <div class="dxrd-right-panel-header dxd-text-primary"> <div class="dxrd-display-inline-block" data-bind="text: $root.getLocalization(\'Document Map\', \'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap\')"></div> </div> <!-- ko if: model --> <!-- ko with: model.getViewModel() --> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxMutationObserver: keyboardHelper"> <div role="tree" id="documentMapTree" data-bind="treelist: treeListOptions" class="dxrd-width-100 dxrd-height-100"></div> </div> <!-- /ko --> <!-- /ko --></div>',
    'dxrd-report-preview': '<div class="dxrd-preview dxrd-designer-wrapper dxd-scrollbar-color dxd-surface-back-color" data-bind="visible: reportPreview.previewVisible, cssArray: [ $data.rootStyle , { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl } ]"> <!-- ko foreach: parts --> <!-- ko template: { name: templateName, data: viewModel || model }--> <!-- /ko --> <!-- /ko --> </div>',
    'dxrdp-surface': '<div class="dxrd-preview-wrapper" data-bind="textCopier, css: { \'dx-rtl\': rtlReport, \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted } "> <!-- ko with: progressBar --> <!-- ko template: \'dxrd-preview-progress-bar\'--> <!-- /ko --> <!-- /ko --> <div class="dxrd-preview-surface" data-bind="dxMutationObserver: previewBrickKeyboardHelper"> <!-- ko if: !showMultipagePreview --> <div class="dxrd-report-preview-holder" role="tablist"> <!-- ko with: currentPage --> <!-- ko if: pageLoading || (!pageLoading && displayImageSrc) --> <div role="tab" class="dxrd-report-preview dx-accessibility-page-item dx-accessibility-border-accented" data-bind="autoFit: autoFitOptions, styleunit: { width: width, height: height }"> <!-- ko template: { name: \'dxrd-preview-page\', afterRender: function() { delayedInit() } }--> <!-- /ko --> </div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: showMultipagePreview && !!currentPage --> <div class="dxrd-report-preview-holder" role="list" data-bind="lazyImages: lazyImagesOptions"> <!-- ko foreach: {data: pages, afterRender: function() { delayedInit() } }  --> <!-- ko lazy: { if: pageLoading || (!pageLoading && displayImageSrc) } --> <div role="listitem" class="dxrd-report-preview dxrd-report-preview-multipage dx-accessibility-page-item dx-accessibility-border-accented" data-bind="styleunit: { \'width\': width, \'height\': height }, toView: { setPageActiveChangedEvent: setPageActiveChangedEvent }, css : { \'dxrd-report-preview-active\': active }"> <!-- ko template: \'dxrd-preview-page\'--> <!-- /ko --> </div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <div data-bind="css: { \'dxrd-visually-hidden\': !!currentPage }" class="dxrd-report-preview-placeholder"> <div aria-live="assertive" aria-atomic="true" class="dxd-empty-area-placeholder-text-color dxd-text-info" data-bind="text: emptyDocumentCaption"></div> </div> </div> </div> <div id="dxrd-preview-bricks-live-region" class="dxrd-visually-hidden" aria-live="polite" aria-atomic="true"></div> <div id="clipboard-container" class="dxrd-position-absolute dxrd-top--100px"><textarea disabled data-bind="attr: { \'aria-label\': $root.getLocalization(\'Clipboard\', \'ASPxReportsStringId.WebDocumentViewer_AriaClipboard\') }" id="clipboard"></textarea></div>',
    'dxrd-export-tool': '<div data-bind="dxViewerExport: $data"></div>',
    'dxrv-daterange-editor': '<div class="dxrv-daterange-editor"> <div data-bind="cacheElement: { action: cacheElement }, dxEllipsisEditor: { value: displayValue, readOnly: true, inputAttr: { \'aria-label\': _displayName, id: _editorInputId }, openOnFieldClick: true, buttonAction: function() { showPopup(); } }"></div> <!-- ko template: { name: popupTemplate, data: popupModel } --> <!-- /ko --> </div>',
    'dxrv-daterange-editor-popup': '<div role="dialog" aria-modal="true" data-bind="dxPopup: getPopupSettings()"> <div data-bind="dxScrollView: scrollViewOptions"> <div class="dxrv-daterange-editor-popup-container" data-bind="dxMutationObserver: dialogKeyboardHelper"> <div role="listbox" class="dxrv-daterange-editor-list dxrv-daterange-editor-item dxd-border-primary dx-accessibility-daterange-item" data-bind="attr: predefinedRanges.attr, dxScrollView: predefinedRanges.scrollViewOptions, dxMutationObserver: predefinedRanges.accessibilityKeyboardHelper"> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko foreach: predefinedRanges.items --> <div role="option" class="dxrv-daterange-editor-list-item dxd-state-normal dxd-back-highlighted dx-accessibility-list-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-selected\': selected }, css: { \'dxd-state-selected\': selected }, dxAction: { action: click }"> <div class="dx-accessibility-field-background dxd-back-accented"></div> <!-- ko text: displayName --> <!-- /ko --> </div> <!-- /ko --> </div> <div class="dxrv-daterange-editor-item"> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: startRange } --> <!-- /ko --> </div> <div class="dxrv-daterange-editor-item"> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: endRange } --> <!-- /ko --> </div> </div> </div> </div>',
    'dxrv-daterange-calendar': '<div tabIndex="0" class="dx-accessibility-calendar-item dx-accessibility-daterange-item" data-bind="dxCalendar: { value: value, onValueChanged: onValueChanged, cellTemplate: \'select_cell\', height: height, min: min }"> <div class="dxrv-daterange-cell" data-options="dxTemplate:{ name:\'select_cell\' }"> <div class="dxrv-daterange-cell-text" data-bind="text: text"></div> <div data-bind="css: { \'dxd-back-accented\': $parent.inRange(date) }"></div> </div> </div>',
    'dxrv-range-parameter': '<div data-bind="dxrvDateRangeEditor: {value: value }"></div>',
    'dxrd-propertieseditor': '<div data-bind="css: { \'dx-rtl\' : viewmodel.rtl }"> <div class="dx-editors"> <div class="dx-fieldset dxrd-parameters-fieldset dxd-border-primary" data-bind="style: { \'display\': showHorizontally ? \'flex\' : \'block\' }"> <!-- ko foreach: viewmodel.editors --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- /ko --> </div> </div> </div>',
    'dxrd-parameters-editor-content': '<!-- ko if: visible --> <div class="dxrd-parameters-group" data-bind="template: { name: \'dxrd-propertieseditor\', data: $data }, css: { \'dxrd-parameters-border\' : !$data.hideBorder, \'dxrd-parameters-horizontal\' : $data.showHorizontally, }"> </div> <!-- /ko -->',
    'dxrd-parameters-separator': '<div class="dxrd-parameters-item-separator"> <div class="dxrd-item-separator dxd-border-secondary"></div> </div>',
    'dxrd-multivalue': '<!-- ko with: value --> <div data-bind="dxTagBox: getOptions({ dataSource: dataSource, searchEnabled: true, useItemTextAsTitle: true, searchExpr: searchExpr || [\'displayValue\'], value: value, displayExpr: displayExpr || \'displayValue\', valueExpr: valueExpr || \'value\', multiline: false, showSelectionControls: true, showDropDownButton: !!showDropDownButton, selectAllMode: \'allPages\', selectedItems: selectedItems, inputAttr: { \'aria-label\': displayName, id: editorInputId }, disabled: disabled, selectAllText: selectAllText, placeholder: placeholder, maxDisplayedTags: maxDisplayedTags, showMultiTagOnly: true, dropDownOptions: { container: getPopupContainer($element), position: { boundary: getPopupContainer($element), collision: \'flipfit flipfit\', of: $element, at: \'bottom\', my: \'top\' } } }), dxValidator: { validationRules: validationRules || [] }"> </div> <!-- /ko -->',
    'dxrd-multivalue-editable': '<!-- ko if: value --> <div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) }"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties() }"></div> </div> </div> <!-- /ko -->',
    'dxrd-parameters-property-editor': '<div class="dx-editor" data-bind="visible: visible"> <div class="dx-group" data-bind="dxdAccordion: { collapsed: collapsed, alwaysShow: alwaysShow, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent }"> <div class="dx-editor-header" data-bind="css: { \'dxrd-empty-header\': hideEditorHeader }"> <!-- ko ifnot: $data.hideEditorHeader --> <div class="dx-field" data-bind="attr: { role: \'treeitem\', \'id\': isComplexEditor && headerId, \'aria-owns\': isComplexEditor && contentId, \'aria-expanded\': isComplexEditor && (alwaysShow || !collapsed ? \'true\' : \'false\') }, css: { \'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor, \'dxrd-vertical-label\': editorOptions && editorOptions.hasVerticalLabel }"> <div class="dx-field-label dxrd-group-label dxd-back-secondary dx-accordion-header dxd-text-primary" data-bind="styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\', \'dxd-back-secondary\': isGroupLabel, \'dx-accordion-hide-collapsing-image\': alwaysShow }"> <!-- ko if: isComplexEditor --> <div data-bind="enable: templateName === \'dx-emptyHeader\'"> <!-- ko ifnot: $data.alwaysShow --> <div class="dx-collapsing-image dxrd-display-inline-block" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed }"></div> <!-- /ko --> <!-- ko if: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="text: displayName, attr: { \'title\': displayName }"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: !isComplexEditor --> <!-- ko if: !!$data.textToSearch --> <label class="propertygrid-editor-displayName" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName, \'for\': editorInputId }, css: { \'dx-field-label-required\': isRequired }, style: { fontWeight: ko.unwrap(isPropertyModified) ? \'Bold\' : \'\'}"></label> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <label class="propertygrid-editor-displayName" data-bind="text: displayName, attr: { \'title\': displayName, for: editorInputId }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: ko.unwrap(isPropertyModified) ? \'Bold\' : \'\'}"></label> <!-- /ko --> <!-- /ko --> </div> <div class="dx-field-value" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div data-bind="service: { name: \'createEditorAddOn\' }"></div> <!-- ko if: templateName !== \'dx-emptyHeader\' --> <!-- ko lazy: { innerBindings: { template: templateName }, isResolved: function(val) { $data.setIsRendered(val) } } --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> <!-- ko if: isComplexEditor --> <div class="dx-editor-content dx-accordion-content" role="group" data-bind="attr: { \'aria-labelledby\': headerId, \'id\': contentId, \'aria-hidden\': !alwaysShow && collapsed ? \'true\' : \'false\' }"> <!-- ko if: editorCreated --> <!-- ko template: contentTemplateName --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-picture-editing': '<div class="dx-picture-editing"> <canvas data-bind="zoom: painter.scale"></canvas> <div class="dx-picture-editing-active" data-bind="dxPopup: { width: 48, height: \'auto\', wrapperAttr: { class: \'dx-picture-editing-active\' }, position:{ my: \'left top\', at: \'right top\', boundary: getPopupContainer($element), of: element, collision: \'fit fit\', offset: \'1 -1\' }, container: shadingEnabled ? \'.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen\' : getPopupContainer($element), target: getPopupContainer($element), showTitle: false, onContentReady: onContentReady, showCloseButton: false, animation: {}, shading: false, visible: true }"> <div data-options="dxTemplate: { name: \'content\' }"> <div class="dx-picture-editing-toolbar" data-bind="foreach: actions"> <div class="dx-picture-editing-toolbar-item" data-bind="dxclick: action, attr: { title: title }"> <div class="dx-picture-editing-toolbar-item-icon" data-bind="template: { name: icon }"> </div> </div> <!-- ko template: { if: $data.template, name: $data.template, data: $data.templateOptions }--> <!-- /ko --> </div> </div> </div> </div>',
    'dx-painter': '<div class="dx-painter"> <canvas data-bind="zoom: scale"></canvas> </div>',
    'dx-picture-editing-toolbar-popup': '<div class="dx-picture-edit-popup-content" data-bind="dxPopover: { width: width, height: height, wrapperAttr: { class: \'dx-picture-edit-popup-content\' }, hideOnOutsideClick: hideOnOutsideClick, onShown: onShown, onHidden: onHidden, onContentReady: onContentReady, position: { my: \'left top\', at: \'right top\', boundary: $root.getPopupContainer($element), of: getPositionTarget($element), collision: \'flipfit fit\', offset: \'-10 0\' }, container: getPositionTarget($element), showTitle: false, target: getPositionTarget($element), showCloseButton: false, shading: false, animation: {}, visible: visible }"> <!-- ko template: { name: contentTemplate, data: contentData } --> <!--/ko--> </div>',
    'dx-picture-editing-brush-options': '<div class="dx-picture-editing-brush-options"> <div class="dx-picture-editing-line-width"> <div class="dx-picture-editing-text" data-bind="text: brushWidthText"></div> <div class="dx-picture-editing-line-width-slider" data-bind="dxSlider: { min: 1, max: 9, value: lineWidth, onValueChanged: onLineWidthChanged, label: { visible: true }, tooltip: { enabled: true, showMode: \'always\', position: \'bottom\' } }"></div> </div> <div class="dx-picture-editing-line-color"> <div class="dx-picture-editing-text" data-bind="text: brushColorText"></div> <div class="dx-picture-editing-brush-options-colors" data-bind="foreach: colors"> <div class="dx-picture-editing-brush-options-color" data-bind="css: { selected: isSelected }"> <div class="dx-picture-editing-brush-options-color-cell" data-bind="style: { background: value }, dxclick: action"></div> </div> </div> </div> </div>',
    'dx-picture-editing-sizemode-alignment': '<div class="dx-picture-editing-sizemode-alignment"> <div class="dx-picture-editing-sizemode"> <div class="dx-picture-editing-text" data-bind="text: sizeModeText"></div> <div class="dx-picture-editing-sizemode-values" data-bind="foreach: { data: sizeModeValues }"> <div class="dx-picture-editing-sizemode-alignment-value" data-bind="css: { selected: isSelected }, template: iconTemplate, dxclick: action, attr: { title: attrTitle }"> </div> </div> </div> <div class="dx-picture-editing-alignment"> <div class="dx-picture-editing-text" data-bind="text: alignmentText"></div> <div class="dx-picture-editing-alignment-values" data-bind="foreach: { data: alignmentValues }"> <div class="dx-picture-editing-sizemode-alignment-value" data-bind="css: { selected: isSelected }, template: iconTemplate, dxclick: action, , attr: { title: attrTitle }"> </div> </div> </div> </div>',
    'dx-picture-editing-imagepickerwithfilter': '<div class="dx-picture-editing-filtercontent" data-bind="styleunit: { width: contentWidth }"> <div class="dx-picture-editing-filtercontent-editor" data-bind="dxTextBox: { value: filter, valueChangeEvent: \'keyup\', onValueChanged: onFilterChanged, placeholder: searchPlaceholder, showClearButton: true  }"></div> <div class="dx-picture-editing-filtercontent-images"> <!-- ko template: \'dx-picture-editing-imagespicker\' --> <!-- /ko --> </div> </div>',
    'dx-picture-editing-imagespicker': '<div class="dx-picture-editing-imagescontainer dxd-text-primary" data-bind="styleunit: { width: contentWidth }, dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }"> <!-- ko foreach: images --> <div class="dx-picture-editing-block dxd-state-normal dxd-back-highlighted" data-bind="styleunit: { width: width + 10 }, visible: visible, click: action"> <div class="dx-picture-editing-block-image" data-bind="styleunit: { width: width, height: height }, style: { backgroundImage: \'url(\' + (url || data) + \')\' }"></div> <!-- ko if: $data.text--> <!-- ko if: $parent.filterEnabled --> <div class="dx-picture-editing-block-text" data-bind="searchHighlighting: { text: text, textToSearch: filter }, attr: { title: text }"></div> <!-- /ko --> <!-- ko ifnot: $parent.filterEnabled --> <div class="dx-picture-editing-block-text" data-bind="text: text, attr: { title: text }"></div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dx-selectbox': '<div data-bind="dxSelectBox: getOptions({ dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, useItemTextAsTitle: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: $data.validationRules || [] }"></div>',
    'dxrdv-signature': '<div data-bind="dxSelectBox: getOptions({ dataSource: values, value: value, itemTemplate: \'signature\', displayExpr: \'displayName\', valueExpr: \'key\', showClearButton: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { minWidth: \'300px\', container: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: $data.validationRules || [] }"> <div class="dxrdv-signature-editor-item" data-options="dxTemplate: { name: \'signature\' }"> <div class="dxrdv-signature-editor-item-image"> <!-- ko if: image --> <img data-bind="attr: { src: image }"/> <!-- /ko --> <!-- ko ifnot: image --> <!-- ko template: \'dxrd-svg-preview-signature_img_placeholder\' --> <!-- /ko --> <!-- /ko --> </div> <div class="dxrdv-signature-editor-item-info"> <!-- ko foreach: fields --> <div class="dxrdv-signature-editor-item-info-field" data-bind="attr: { title: value }"> <span class="dxrdv-signature-editor-item-info-field-label" data-bind="text: label"></span> <span data-bind="text: value"></span> </div> <!-- /ko --> </div> </div> </div>'
});

;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-editing.js



















;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-export.js

























;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-export-metadata.js



;// ./node_modules/devexpress-reporting/viewer/internal/_bindings.js




function initializeToViewBinding(previewPage, options) {
    const container = previewPage.closest('.dxrd-report-preview-holder'), dispose = options.setPageActiveChangedEvent((active) => {
        if (active) {
            const pageTop = previewPage.getBoundingClientRect().top;
            const containerTop = container.getBoundingClientRect().top;
            const pageHeight = previewPage.getBoundingClientRect().height;
            const containerHeight = container.getBoundingClientRect().height;
            if (pageTop < 0 && (pageTop + (pageHeight - containerTop) < 0) || pageTop >= containerHeight
                || (pageTop - (containerHeight + containerTop)) > 0) {
                container.scrollTop = container.scrollTop + (pageTop - containerTop);
            }
        }
    });
    return dispose;
}
function initializeLazyImagesBinding(element, options) {
    let load = null;
    const loadVisibleImages = (time = 300) => {
        load && clearTimeout(load);
        load = setTimeout(function () {
            if (!options.getEnabled()) {
                return;
            }
            const visibleArea = element.getBoundingClientRect().height + 100;
            for (let i = 0; i < element.children.length; i++) {
                const previewPage = element.children[i], rect = previewPage.getBoundingClientRect(), pageTop = rect.top;
                if (visibleArea > pageTop && pageTop >= 0 || pageTop < 0 && pageTop + rect.height > -100) {
                    const previewPageModel = options.getPage(i);
                    if (previewPageModel?.isClientVisible === false) {
                        options.setPageVisibility(previewPageModel.getViewModel(), true);
                    }
                }
            }
        }, time);
    };
    const dispose = options.setLoadVisibleImagesCallback(loadVisibleImages);
    const scrollLoad = () => loadVisibleImages(MultipageScrollingThrottle());
    element.addEventListener('scroll', scrollLoad);
    loadVisibleImages(500);
    return () => {
        element.removeEventListener('scroll', scrollLoad);
        dispose();
    };
}
function initializeTextCopierBinding(element, options) {
    const keyDownHandler = function (e) {
        const value = options.viewModel.getSelectedContent();
        const target = e.target;
        if (!value || !(e.ctrlKey || e.metaKey)
            || target.matches('textarea')
            || target.matches('input')
            || window.getSelection && window.getSelection() && window.getSelection().toString()
            || document['selection'] && document['selection'].createRange().text) {
            return;
        }
        const clipboardContainer = document.querySelector('#clipboard-container');
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(clipboardContainer).empty().show();
        const textArea = document.createElement('textarea');
        textArea.id = 'clipboard';
        textArea.value = value;
        clipboardContainer.appendChild(textArea);
        textArea.focus();
        textArea.select();
    };
    const keyUpHandler = function (e) {
        const target = e.target;
        if (target instanceof HTMLElement && target.matches('#clipboard')) {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('#clipboard-container').empty().hide();
        }
    };
    document.addEventListener('keydown', keyDownHandler);
    document.addEventListener('keyup', keyUpHandler);
    return () => {
        document.removeEventListener('keydown', keyDownHandler);
        document.removeEventListener('keyup', keyUpHandler);
    };
}
function initializeAutoFitBinding(element, autoFitOptions) {
    const updateZoom = () => {
        const options = autoFitOptions.getPageSizeConfiguration();
        const autoFitBy = options.autoFitBy;
        if (autoFitBy != ZoomAutoBy.None) {
            if (options.skipIfInvisible && !(0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).isVisible())
                return;
            const newZoom = (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(updatePreviewZoomWithAutoFit(options.width, options.height, element, autoFitBy), true);
            Promise.resolve().then(() => autoFitOptions.setZoom(Math.max(newZoom, 0.1)));
        }
    };
    updateZoom();
    return autoFitOptions.setAutoFitChangedEvent(updateZoom);
}
function initializeChildStyleBinding(element, values) {
    (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).find(values.selector).css(values.style);
}
function initializeViewerExportBinding(element, exportHandlerViewModel) {
    const exportHandler = exportHandlerViewModel.getModel();
    const exportFrame = document.createElement('iframe');
    exportFrame.name = exportHandler.exportingFrameName;
    exportFrame.setAttribute('role', 'none');
    element.querySelector('.dxrd-visually-hidden').appendChild(exportFrame);
    exportHandler.exportingFrame = exportFrame;
    exportHandler.postingForm = element.querySelector('form');
}

;// ./node_modules/devexpress-reporting/viewer/internal/_ko_bindings.js





function wrapWithDisposeCallback(element, disposeFunc) {
    (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, disposeFunc);
}
external_ko_namespaceObject.bindingHandlers['toView'] = {
    init: (element, valueAccessor) => wrapWithDisposeCallback(element, initializeToViewBinding(element, valueAccessor()))
};
external_ko_namespaceObject.bindingHandlers['lazyImages'] = {
    init: (element, valueAccessor) => wrapWithDisposeCallback(element, initializeLazyImagesBinding(element, valueAccessor()))
};
external_ko_namespaceObject.bindingHandlers['textCopier'] = {
    init: (element, valueAccessor, allBindings, viewModel, bindingContext) => wrapWithDisposeCallback(element, initializeTextCopierBinding(element, { viewModel }))
};
external_ko_namespaceObject.bindingHandlers['autoFit'] = {
    init: (element, valueAccessor) => wrapWithDisposeCallback(element, initializeAutoFitBinding(element, valueAccessor()))
};
external_ko_namespaceObject.bindingHandlers['childStyle'] = {
    init: (element, valueAccessor) => initializeChildStyleBinding(element, valueAccessor())
};
external_ko_namespaceObject.bindingHandlers['brick-selection-prog'] = {
    init: function (element, valueAccessor) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, initializeBrickSelectionProg(element, valueAccessor()));
    }
};
external_ko_namespaceObject.bindingHandlers['dxViewerExport'] = {
    init: function (element, valueAccessor) {
        const templateHtml = (0,external_DevExpress_Analytics_Utils_namespaceObject.getTemplate)('dxrd-export-tool-content');
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).append(templateHtml);
        initializeViewerExportBinding(element, valueAccessor());
    }
};

;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-internal.js























































;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile.js





;// external "DevExpress.ui.dxGallery"
const external_DevExpress_ui_dxGallery_namespaceObject = DevExpress.ui.dxGallery;
var external_DevExpress_ui_dxGallery_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxGallery_namespaceObject);
;// external "DevExpress.registerComponent"
const external_DevExpress_registerComponent_namespaceObject = DevExpress.registerComponent;
var external_DevExpress_registerComponent_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_registerComponent_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/mobile/internal/gallery/_galleryComponent.js




class dxGalleryExtender {
    constructor(_gallery) {
        this._gallery = _gallery;
        this._disposableCallbacks = [];
    }
    extend(element) {
        this
            ._extendCtor(element)
            ._extendRepaint()
            ._extend_blockItemsHaveExpired()
            ._extend_getNextIndex()
            ._extend_swipeStartHandler()
            ._extend_setSwipeAnimation()
            ._extend_addAnimation()
            ._extend_restoreDefault()
            ._extend_getItem()
            ._extend_swipeUpdateHandler()
            ._extend_swipeEndHandler()
            ._extend_endSwipe();
        this._gallery.repaint();
    }
    dispose() {
        this._disposableCallbacks.forEach(x => x && x());
        this._disposableCallbacks = [];
    }
    _extendCtor(element) {
        this._gallery._animationClassName = 'dxrdp-gallery-item-animation';
        this._gallery.currentBlockItem = null;
        this._gallery.nextBlockItem = null;
        this._gallery.swipeEnabled = true;
        this._gallery.initializeBlockItems = () => {
            this._gallery.blockItems = [];
            const $items = this._gallery['_getAvailableItems']();
            for (let i = 0; i < $items.length; i++) {
                let left = parseFloat($items[i]['style'].left);
                left = isNaN(left) ? 0 : left;
                this._gallery.blockItems.push({
                    element: (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)($items[i]),
                    left: left
                });
            }
        };
        this._gallery.initializeBlockItems();
        this._gallery.gallery = this._gallery['option']('gallery').getModel();
        this._gallery.slideOptions = this._gallery['option']('slideOptions');
        const subscriptionDispose = this._gallery.gallery.events.on('repaintChanged', (args) => {
            if (!this._gallery.gallery.preview._hasActiveEditingFields()) {
                this._gallery.repaint();
            }
        });
        this._disposableCallbacks.push(subscriptionDispose);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => this.dispose());
        return this;
    }
    _extendRepaint() {
        const oldRepaint = this._gallery.repaint;
        this._gallery.repaint = () => {
            oldRepaint.apply(this._gallery);
            this._gallery.initializeBlockItems();
        };
        return this;
    }
    _extend_blockItemsHaveExpired() {
        this._gallery._blockItemsHaveExpired = () => this._gallery.blockItems.length && !document.body.contains(this._gallery.blockItems[0].element[0]);
        return this;
    }
    _extend_swipeStartHandler() {
        const old_swipeStartHandler = this._gallery['_swipeStartHandler'];
        this._gallery['_swipeStartHandler'] = (e) => {
            this._gallery.swipeEnabled = this._gallery.slideOptions.getSwipeEnabled();
            if (!this._gallery.swipeEnabled)
                return;
            old_swipeStartHandler.apply(this._gallery, [e]);
            if (this._gallery._blockItemsHaveExpired()) {
                this._gallery.initializeBlockItems();
            }
            const swipeRightEnable = this._gallery.gallery.getSwipeRightEnabled();
            const swipeLeftEnable = this._gallery.gallery.getSwipeLeftEnabled();
            if (!swipeRightEnable || !swipeLeftEnable) {
                const selectedIndex = swipeRightEnable ? 0 : 2;
                let startOffset = 3 - selectedIndex - 1, endOffset = selectedIndex;
                if (!swipeRightEnable && !swipeLeftEnable) {
                    startOffset = 0;
                    endOffset = 0;
                }
                e.event.maxLeftOffset = startOffset;
                e.event.maxRightOffset = endOffset;
            }
            this._gallery.gallery.isAnimated = true;
            if (this._gallery.gallery.animationEnabled) {
                this._gallery.currentBlockItem && this._gallery.currentBlockItem.element.removeClass(this._gallery._animationClassName);
                this._gallery.nextBlockItem && this._gallery.nextBlockItem.element.removeClass(this._gallery._animationClassName);
            }
        };
        return this;
    }
    _extend_getNextIndex() {
        this._gallery._getNextIndex = (offset) => {
            let index = this._gallery.gallery.selectedIndex;
            if (offset < 0) {
                if (index === 2) {
                    index = 0;
                }
                else {
                    index++;
                }
            }
            else {
                if (index === 0) {
                    index = 2;
                }
                else {
                    index--;
                }
            }
            return index;
        };
        return this;
    }
    _extend_setSwipeAnimation() {
        this._gallery._setSwipeAnimation = (element, difference, offset, right) => {
            const diffperc = 100 * offset / 4;
            let newLeft = '0%';
            if (right) {
                newLeft = (element.left + diffperc) + '%';
            }
            else {
                newLeft = (element.left - diffperc) + '%';
            }
            element.element.css({
                'opacity': difference,
                'transform': 'scale(' + difference + ')',
                'left': newLeft
            });
        };
        return this;
    }
    _extend_addAnimation() {
        this._gallery._addAnimation = (item) => {
            if (item) {
                if (this._gallery.gallery.animationEnabled) {
                    item.element.addClass(this._gallery._animationClassName);
                }
            }
        };
        return this;
    }
    _extend_restoreDefault() {
        this._gallery._restoreDefault = (item) => {
            if (item) {
                item.element.css({
                    'opacity': '1',
                    'transform': 'scale(' + 1 + ')',
                    'left': item.left + '%'
                });
            }
        };
        return this;
    }
    _extend_getItem() {
        this._gallery._getItem = (index, loopTest) => {
            let realIndex = index;
            const currentBlockIndex = this._gallery.blockItems.indexOf(this._gallery.currentBlockItem);
            if (loopTest) {
                if (currentBlockIndex === 2 && index === 0) {
                    realIndex = 3;
                }
                else if (currentBlockIndex === 0 && index === 2) {
                    realIndex = 4;
                }
            }
            const item = this._gallery.blockItems[realIndex];
            if (this._gallery.gallery.animationEnabled) {
                item.element.removeClass(this._gallery._animationClassName);
            }
            return item;
        };
        return this;
    }
    _extend_swipeUpdateHandler() {
        const oldswipeUpdateHandler = this._gallery['_swipeUpdateHandler'];
        this._gallery['_swipeUpdateHandler'] = (e) => {
            if (!this._gallery.swipeEnabled)
                return;
            oldswipeUpdateHandler.apply(this._gallery, [e]);
            let offset = e.event.offset;
            const nextIndex = this._gallery._getNextIndex(offset);
            const currentIndex = this._gallery.gallery.selectedIndex;
            const currentBlockIndex = this._gallery.blockItems.indexOf(this._gallery.currentBlockItem);
            const nextBlockIndex = this._gallery.blockItems.indexOf(this._gallery.nextBlockItem);
            if (!this._gallery.currentBlockItem || currentBlockIndex !== currentIndex) {
                this._gallery.currentBlockItem = this._gallery._getItem(currentIndex, false);
            }
            if (!this._gallery.nextBlockItem || nextBlockIndex !== nextIndex) {
                this._gallery.nextBlockItem = this._gallery._getItem(nextIndex, true);
            }
            if (this._gallery.gallery.animationEnabled) {
                offset = Math.abs(offset);
                const right = (nextIndex - currentIndex === 1) || (currentIndex === 2 && nextIndex === 0);
                this._gallery._setSwipeAnimation(this._gallery.currentBlockItem, Math.min(1, (1 - offset)), offset, right);
                this._gallery._setSwipeAnimation(this._gallery.nextBlockItem, Math.min(1, offset * 1.5), offset, !right);
            }
        };
        return this;
    }
    _extend_swipeEndHandler() {
        const oldSwipeEnd = this._gallery['_swipeEndHandler'];
        this._gallery['_swipeEndHandler'] = (e) => {
            if (!this._gallery.swipeEnabled)
                return;
            oldSwipeEnd.apply(this._gallery, [e]);
            if (this._gallery.gallery.animationEnabled) {
                for (let i = 0; i < this._gallery.blockItems.length; i++) {
                    if (this._gallery.blockItems[i] === this._gallery.currentBlockItem || this._gallery.blockItems[i] === this._gallery.nextBlockItem) {
                        this._gallery._addAnimation(this._gallery.blockItems[i]);
                    }
                    this._gallery._restoreDefault(this._gallery.blockItems[i]);
                }
            }
            else {
                this._gallery.gallery.isAnimated = false;
                this._gallery.gallery.updatePagesVisible(this._gallery.gallery.preview);
            }
        };
        return this;
    }
    _extend_endSwipe() {
        const oldEndSwipe = this._gallery['_endSwipe'];
        const self = this;
        this._gallery['_endSwipe'] = function () {
            oldEndSwipe.apply(self._gallery, arguments);
            self._gallery.gallery.isAnimated = false;
            self._gallery.gallery.updatePagesVisible(self._gallery.gallery.preview);
        };
        return this;
    }
}
class dxGalleryReportPreview extends (external_DevExpress_ui_dxGallery_default()) {
    constructor(element, options) {
        super(element, options);
        new dxGalleryExtender(this).extend(element);
    }
}
external_DevExpress_registerComponent_default()('dxGalleryReportPreview', dxGalleryReportPreview);

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_eventProcessor.js







const slowdownDisctanceFactor = 2.5;
const minScale = 0.92;
function setTransform($element, transform) {
    $element.css({
        '-webkit-transform': transform,
        'transform': transform
    });
}
class EventProcessor extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _getFirstPageOffset() {
        const page = this.$galleryblocks.find('.dxrd-mobile-page')[0];
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(page).offset();
    }
    getDirection(x, y) {
        const differenceY = y - this._startingPositionY;
        const distanceY = Math.abs(differenceY);
        const distanceX = Math.abs(x - this._startingPositionX);
        if (distanceY === 0 && distanceX === 0) {
            this._direction.horizontal = false;
            this._direction.vertical = false;
            return this._direction;
        }
        const tg = !distanceX ? 10 : distanceY / distanceX;
        if (tg < 2) {
            this._direction.horizontal = true;
            this._direction.vertical = false;
            this._direction.scrollDown = false;
        }
        else {
            this._direction.horizontal = false;
            this._direction.vertical = true;
            this._direction.scrollDown = differenceY > 0;
        }
        return this._direction;
    }
    setPosition(x, y) {
        this.isLeftMove = this.latestX > x;
        this.isRightMove = this.latestX < x;
        this.latestY = y;
        this.latestX = x;
    }
    initialize(x, y) {
        this._startingPositionX = x;
        this._startingPositionY = y;
        this.latestX = x;
        this.latestY = y;
        this._direction = { horizontal: false, vertical: false, scrollDown: false };
    }
    start(e) {
        this.$body.addClass('dxrd-prevent-refresh');
        this.$galleryblocks = this.$gallery.find('.dxrd-gallery-blocks');
        if (!this.slideOptions.getTopOffset()) {
            this.firstMobilePageOffset = this._getFirstPageOffset();
            if (this.firstMobilePageOffset) {
                this.firstMobilePageOffset.top = this.firstMobilePageOffset.top * minScale;
            }
        }
        this.initialize(e.pageX, e.pageY);
    }
    move(e) {
        if (this.slideOptions.getZoomUpdating() || this.slideOptions.getGalleryIsAnimated() || this.slideOptions.getDisabled()) {
            return;
        }
        if (SearchAvailable() && !this.slideOptions.searchPanel.editorVisible) {
            const direction = this.getDirection(e.pageX, e.pageY);
            if (!direction.vertical && !direction.horizontal)
                return;
            if (direction.vertical && direction.scrollDown || this.slideOptions.searchPanel.height !== 0) {
                if (this.slideOptions.getReachedTop() && (MobileSearchViewModel.maxHeight + this.$element.offset().top) > this.$window.scrollY) {
                    this.slideOptions.setBrickEventsDisabled(true);
                    e.stopPropagation();
                    const currentHeight = this.slideOptions.searchPanel.height;
                    const difference = currentHeight + (e.clientY - this.latestY) / slowdownDisctanceFactor;
                    const distance = difference > 0 ? Math.min(difference, MobileSearchViewModel.maxHeight) : 0;
                    this.slideOptions.searchPanel.height = distance;
                }
            }
        }
        this.setPosition(e.clientX, e.clientY);
    }
    end(e) {
        const zoomUpdating = this.slideOptions.getZoomUpdating();
        if (zoomUpdating || this.slideOptions.getGalleryIsAnimated()) {
            const touches = e['touches'];
            if (!touches || touches.length === 0) {
                if (zoomUpdating) {
                    e.stopPropagation();
                }
                this.slideOptions.setZoomUpdating(false);
            }
            return;
        }
        const direction = this.getDirection(e.pageX, e.pageY);
        if (this.slideOptions.getScrollAvailable()) {
            if (direction.horizontal && this.slideOptions.getSwipeEnabled()) {
                const galleryInstance = external_DevExpress_ui_dxGallery_default().getInstance(this.$gallery.get(0)) || dxGalleryReportPreview.getInstance(this.$gallery.get(0));
                const gallery = galleryInstance.option('gallery').getModel();
                const repaintTimeout = this.slideOptions.getRepaintTimeout();
                if (this.slideOptions.getReachedLeft() && this.isRightMove && gallery.getSwipeLeftEnabled()) {
                    galleryInstance.prevItem();
                    clearTimeout(repaintTimeout);
                    this.slideOptions.setRepaintTimeout(setTimeout(() => galleryInstance.repaint(), 410));
                }
                else if (this.slideOptions.getReachedRight() && this.isLeftMove && gallery.getSwipeRightEnabled()) {
                    galleryInstance.nextItem();
                    clearTimeout(repaintTimeout);
                    this.slideOptions.setRepaintTimeout(setTimeout(() => galleryInstance.repaint(), 410));
                }
            }
        }
        if (SearchAvailable() && !this.slideOptions.searchPanel.editorVisible) {
            if (this.slideOptions.searchPanel.height >= MobileSearchViewModel.maxHeight / 2) {
                this.slideOptions.searchPanel.height = MobileSearchViewModel.maxHeight;
            }
            else {
                this.slideOptions.searchPanel.height = 0;
            }
            if (this.slideOptions.searchPanel.height == MobileSearchViewModel.maxHeight) {
                this.slideOptions.setAutoFitBy(ZoomAutoBy.PageWidth);
            }
        }
        this.$body.removeClass('dxrd-prevent-refresh');
        setTimeout(() => { this.slideOptions.setBrickEventsDisabled(false); }, 50);
    }
    constructor(element, slideOptions) {
        super();
        this.element = element;
        this.slideOptions = slideOptions;
        this._direction = {
            vertical: false,
            horizontal: false,
            scrollDown: false
        };
        this.isLeftMove = false;
        this.isRightMove = false;
        this.$window = window;
        this.$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element),
            this.$body = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(document.body),
            this.$gallery = this.$element.find('.dxrd-mobile-gallery');
        this.$galleryblocks = this.$gallery.find('.dxrd-gallery-blocks');
        this.firstMobilePageOffset = this._getFirstPageOffset();
        this.addDisposable(this.slideOptions.searchPanel.events.on('heightChanged', (args) => {
            const newVal = args.newValue;
            if (slideOptions.getDisabled())
                return;
            if (!this.firstMobilePageOffset)
                this.firstMobilePageOffset = this._getFirstPageOffset();
            if (this.slideOptions.readerMode) {
                this.slideOptions.setTopOffset(newVal);
            }
            else {
                this.slideOptions.setTopOffset(Math.min(newVal, Math.max(0, MobileSearchViewModel.maxHeight - this.firstMobilePageOffset.top)));
            }
            if (!newVal) {
                this.applySearchAnimation(newVal);
            }
            else if (newVal === MobileSearchViewModel.maxHeight) {
                this.slideOptions.searchPanel.searchPanelVisible = true;
                this.applySearchAnimation(newVal);
            }
            else {
                const dif = 1 - minScale;
                const perc = newVal / MobileSearchViewModel.maxHeight;
                const scale = 1 - dif * perc;
                setTransform(this.$galleryblocks, 'scale(' + Math.max(minScale, scale) + ')');
            }
        }));
    }
    applySearchAnimation(value) {
        if (this.slideOptions.animationSettings.zoomEnabled) {
            this.$galleryblocks.addClass('dxrdp-animation');
            this.$element.addClass('dxrdp-animation');
            setTimeout(() => {
                this.$galleryblocks.removeClass('dxrdp-animation');
                this.$element.removeClass('dxrdp-animation');
            }, 410);
        }
        setTransform(this.$galleryblocks, !value ? '' : 'scale(0.92)');
    }
}

;// external "\"\""
const external_namespaceObject = "";
;// external "DevExpress.events"
const external_DevExpress_events_namespaceObject = DevExpress.events;
;// external "DevExpress.ui.dxScrollView"
const external_DevExpress_ui_dxScrollView_namespaceObject = DevExpress.ui.dxScrollView;
var external_DevExpress_ui_dxScrollView_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxScrollView_namespaceObject);
;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobileBindings.js







function initializeMobileZoomBinding(element, options) {
    let scroll;
    let zoom = options.getZoom();
    (0,external_DevExpress_events_namespaceObject.on)(element, 'dxpinch', (e) => {
        e.stopPropagation();
        e.preventDefault();
        const scale = e['scale'];
        let newZoom = zoom;
        newZoom *= scale;
        newZoom = Math.max(0.15, Math.min(2, newZoom));
        options.setZoom(newZoom);
    });
    (0,external_DevExpress_events_namespaceObject.on)(element, 'dxpinchstart', (e) => {
        scroll = external_DevExpress_ui_dxScrollView_default().getInstance(element.getElementsByClassName('dxrd-scrollView-mobile')[0]);
        e.stopPropagation();
        e.preventDefault();
        options.setZoomUpdating(true);
        scroll && scroll.option('disabled', true);
        zoom = options.getZoom();
    });
    (0,external_DevExpress_events_namespaceObject.on)(element, 'dxpinchend', (e) => {
        e.stopPropagation();
        options.setZoomUpdating(false);
        setTimeout(() => {
            scroll && scroll.option('disabled', false);
            scroll && scroll.refresh();
        }, 10);
    });
}
function initializeSlideBinding(element, options) {
    let isStarted = false;
    const processor = new EventProcessor(element, options);
    (0,external_DevExpress_events_namespaceObject.on)(element, 'dxpointerdown', (e) => {
        processor.start(e);
        isStarted = true;
    });
    (0,external_DevExpress_events_namespaceObject.on)(element, 'dxpointermove', (e) => {
        isStarted && processor.move(e);
    });
    ['dxpointercancel', 'dxpointerleave', 'dxpointerup'].forEach((value) => {
        (0,external_DevExpress_events_namespaceObject.on)(element, value, (e) => {
            if (isStarted) {
                processor.end(e);
                isStarted = false;
            }
        });
    });
    return () => processor.dispose();
}
function initializeMobileSearchBinding(element, viewModel) {
    const model = viewModel.getModel();
    const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
    element.style.display = 'none';
    const $searchText = $element.find('.dxrdp-taptosearch-text');
    const searchBarModel = new SearchBarModel(model, element, $searchText);
    return () => searchBarModel.dispose();
}
function initializeMobilePaginatorBinding(element, viewModel) {
    const values = viewModel.getModel();
    values.initialize(element);
}

;// ./node_modules/devexpress-reporting/viewer/mobile/internal/_ko_mobileBindings.js



external_ko_namespaceObject.bindingHandlers['mobileZoom'] = {
    init: (element, valueAccessor) => initializeMobileZoomBinding(element, valueAccessor())
};
external_ko_namespaceObject.bindingHandlers['slide'] = {
    init: (element, valueAccessor) => (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, initializeSlideBinding(element, valueAccessor()))
};
external_ko_namespaceObject.bindingHandlers['dxrdMobilePaginator'] = {
    init: (element, valueAccessor) => initializeMobilePaginatorBinding(element, valueAccessor())
};
external_ko_namespaceObject.bindingHandlers['dxrdSearchBar'] = {
    init: (element, valueAccessor) => (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, initializeMobileSearchBinding(element, valueAccessor()))
};

;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile-internal.js



































;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-parameters.js





















;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-settings.js



;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-utils.js









;// ./node_modules/devexpress-reporting/viewer/widgets/dateRange/dateRangeEditor.ranges.js
var dateRangeEditor_ranges_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


class CSDateTime {
    static get today() {
        return new CSDateTime().now();
    }
    get date() {
        return this._date;
    }
    get day() {
        return this._date.getDay();
    }
    get month() {
        return this._date.getMonth();
    }
    get year() {
        return this._date.getFullYear();
    }
    constructor(_date = null) {
        this._date = _date;
    }
    addMonths(months) {
        return new CSDateTime(new Date(this._date.setMonth(CSDateTime.today.month + months)));
    }
    addDays(days) {
        const newDate = this.date.getDate() + days;
        return new CSDateTime(new Date(this._date.setDate(newDate)));
    }
    addHours(hours) {
        const newDate = this.date.getHours() + hours;
        return new CSDateTime(new Date(this._date.setHours(newDate)));
    }
    addYears(years) {
        return new CSDateTime(new Date(this._date.setFullYear(this._date.getFullYear() + years)));
    }
    now() {
        return new CSDateTime(new Date(new Date().setHours(0, 0, 0, 0)));
    }
}
function createRangeItem(displayName, localizationId, range) {
    const item = {
        displayName: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(displayName, localizationId),
        range: range
    };
    Object.defineProperty(item, 'displayName', {
        get: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(displayName, localizationId),
        configurable: true
    });
    return item;
}
const defaultRanges = [
    createRangeItem('Today', 'PreviewStringId.DateRangeParameterEditor_Today', () => [
        CSDateTime.today.date,
        CSDateTime.today.date
    ]),
    createRangeItem('Yesterday', 'PreviewStringId.DateRangeParameterEditor_Yesterday', () => [
        CSDateTime.today.addDays(-1).date,
        CSDateTime.today.addDays(-1).date
    ]),
    createRangeItem('Current Week', 'PreviewStringId.DateRangeParameterEditor_CurrentWeek', () => [
        CSDateTime.today.addDays(-CSDateTime.today.day).date,
        CSDateTime.today.addDays(-CSDateTime.today.day).addDays(6).date
    ]),
    createRangeItem('Last Week', 'PreviewStringId.DateRangeParameterEditor_LastWeek', () => [
        CSDateTime.today.addDays(-7).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Week', 'PreviewStringId.DateRangeParameterEditor_PreviousWeek', () => [
        CSDateTime.today.addDays(-CSDateTime.today.day - 7).date,
        CSDateTime.today.addDays(-CSDateTime.today.day - 1).date
    ]),
    createRangeItem('Current Month', 'PreviewStringId.DateRangeParameterEditor_CurrentMonth', () => [
        new Date(CSDateTime.today.year, CSDateTime.today.month, 1),
        new Date(CSDateTime.today.year, CSDateTime.today.month + 1, 0),
    ]),
    createRangeItem('Last Month', 'PreviewStringId.DateRangeParameterEditor_LastMonth', () => [
        CSDateTime.today.addMonths(-1).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Month', 'PreviewStringId.DateRangeParameterEditor_PreviousMonth', () => [
        new Date(CSDateTime.today.year, CSDateTime.today.month - 1, 1),
        new Date(CSDateTime.today.year, CSDateTime.today.month, 0),
    ]),
    createRangeItem('Current Quarter', 'PreviewStringId.DateRangeParameterEditor_CurrentQuarter', () => [
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3).date,
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3 + 3).date,
    ]),
    createRangeItem('Previous Quarter', 'PreviewStringId.DateRangeParameterEditor_PreviousQuarter', () => [
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3 - 3).date,
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3).date,
    ]),
    createRangeItem('Current Year', 'PreviewStringId.DateRangeParameterEditor_CurrentYear', () => [
        new Date(CSDateTime.today.year, 0, 1),
        new Date(CSDateTime.today.year, 11, 31),
    ]),
    createRangeItem('Last Year', 'PreviewStringId.DateRangeParameterEditor_LastYear', () => [
        CSDateTime.today.addYears(-1).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Year', 'PreviewStringId.DateRangeParameterEditor_PreviousYear', () => [
        new Date(CSDateTime.today.year - 1, 0, 1),
        new Date(CSDateTime.today.year - 1, 11, 31),
    ])
];
class PredefinedDateRangeModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseModel {
    onPropertyChanged(args) { }
}
dateRangeEditor_ranges_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => defaultRanges)
], PredefinedDateRangeModel.prototype, "ranges", void 0);
const predefinedDateRangesModel = new PredefinedDateRangeModel();
const predefinedDateRanges = predefinedDateRangesModel.ranges;

;// ./node_modules/devexpress-reporting/viewer/widgets/dateRange/dateRangeEditor.viewmodel.js



function createDateRangeEditorViewModel(baseViewModel) {
    let popupSettings = null;
    const inRange = (date) => {
        const _end = new Date(viewModel.endRange.value.getTime());
        const _start = new Date(viewModel.startRange.value.getTime());
        return date <= new Date(_end.setHours(0, 0, 0, 0)) &&
            date >= new Date(_start.setHours(0, 0, 0, 0));
    };
    const createPredefinedItemsViewModel = () => predefinedDateRanges.map(x => {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
            ...x,
            click: () => this.applyDate(x.range(), true)
        })
            .generateProperty('selected', this._isSelected(x))
            .getViewModel();
    });
    const viewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
        ...baseViewModel,
        showPopup: () => this._showPopup(),
        popupTemplate: this.popupTemplate,
        items: this.items,
        cacheElement: ($element) => this._$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)($element),
        scrollViewOptions: {
            showScrollbar: 'always',
            direction: 'horizontal',
            useNative: false,
            onInitialized: function (e) { e.component.option('useKeyboard', false); }
        },
        _editorInputId: this._editorInputId,
        _displayName: this._displayName
    })
        .generateProperty('getPopupSettings', () => {
        if (!popupSettings) {
            popupSettings = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
                width: 'max-content',
                height: (0,external_DevExpress_Analytics_Internal_namespaceObject.calculateWithZoomFactor)(362),
                wrapperAttr: { class: 'dxrv-daterange-editor-popup-wrapper' },
                position: { my: 'right top', at: 'right bottom', of: this._$element[0], collision: 'fit fit', offset: '1 -1' },
                container: (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(this._$element[0]),
                showTitle: false,
                showCloseButton: false,
                hideOnOutsideClick: true,
                onHidden: (e) => this._popupVisible = false,
                animation: {},
                shading: false,
            })
                .generateProperty('visible', this._popupVisible)
                .getViewModel();
        }
        return popupSettings;
    })
        .generateProperty('dialogKeyboardHelper', this.dialogKeyboardHelper)
        .generateProperty('predefinedRanges', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
        attr: { 'aria-label': (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Predefined periods', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPredefinedPeriods') },
        accessibilityKeyboardHelper: this.dialogKeyboardHelper.predefinedDateRangesKeyboardHelper,
        scrollViewOptions: {
            showScrollbar: 'onHover',
            scrollByContent: false,
            bounceEnabled: false,
            useNative: false,
            scrollByThumb: true,
            onInitialized: function (e) { e.component.option('useKeyboard', false); }
        }
    })
        .generateProperty('items', createPredefinedItemsViewModel())
        .getViewModel())
        .generateProperty('startRange', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
        height: this.calendarHeight,
        inRange: (date) => inRange(date),
        onValueChanged: (e) => this.startDate = e.value
    })
        .generateProperty('value', this.startDate)
        .getViewModel())
        .generateProperty('endRange', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)({
        height: this.calendarHeight,
        inRange: (date) => inRange(date),
        onValueChanged: (e) => this.endDate = e.value
    })
        .generateProperty('value', this.endDate)
        .generateProperty('min', this.startDate)
        .getViewModel())
        .generateProperty('displayValue', this._displayText)
        .getViewModel();
    this.addDisposable(predefinedDateRangesModel.events.on('rangesChanged', (e) => {
        viewModel.predefinedRanges.items = createPredefinedItemsViewModel();
    }));
    viewModel.popupModel = this['_options'].isMobile ? this.popupModel.getViewModel() : viewModel;
    return viewModel;
}

;// ./node_modules/devexpress-reporting/viewer/widgets/dateRange/dateRangeEditor.js
var dateRangeEditor_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








function createDateRangeEditor(_options, element, model) {
    const editor = model instanceof external_DevExpress_Analytics_Widgets_namespaceObject.Editor ? model : model?.getModel();
    const rangeEditorOptions = {
        ..._options,
        displayName: external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(model?.displayName),
        value: external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(_options.value),
        onValueChanged: (e) => {
            if (external_DevExpress_Analytics_Internal_namespaceObject.koUtils.isSubscribable(_options.value))
                _options.value(e.value);
            else
                editor._set('value', e.value);
        }
    };
    const rangeEditor = new DateRangeEditor(rangeEditorOptions, model?.editorInputId, model?.visibilityChanged);
    if (external_DevExpress_Analytics_Internal_namespaceObject.koUtils.isSubscribable(_options.value))
        rangeEditor.addDisposable(_options.value.subscribe((newVal) => rangeEditor.applyDate(newVal)));
    else if (editor) {
        rangeEditor.addDisposable(editor.events.on('valueChanged', (args) => rangeEditor.applyDate(args.newValue)));
    }
    return rangeEditor;
}
class DateRangeEditor extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    createViewModel() {
        return createDateRangeEditorViewModel.call(this, super.createViewModel());
    }
    _getStringValue(range) {
        return range.map(x => (0,external_DevExpress_Analytics_Internal_namespaceObject.formatDate)(x)).join(' - ');
    }
    getElement() {
        if (this._$element)
            return this._$element[0];
        else
            undefined;
    }
    _isSelected(item) {
        return this._displayText === this._getStringValue(item.range());
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'startDate' || args.propertyName === 'endDate') {
            this._displayText = this._getStringValue([this.startDate, this.endDate]);
        }
        if (args.propertyName === 'startDate') {
            this.applyValue(this.startDate > this.endDate);
        }
        if (args.propertyName === 'endDate') {
            this.applyValue();
        }
    }
    deferredUpdateViewModel() {
        return false;
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === '_popupVisible') {
            viewModel.getPopupSettings().visible = this._popupVisible;
            this._visibilityChangedCallback && this._visibilityChangedCallback(this._popupVisible);
        }
        viewModel.predefinedRanges.items.forEach(x => {
            x.selected = this._isSelected(x);
        });
        viewModel.startRange.value = this.startDate;
        viewModel.endRange.value = this.endDate;
        viewModel.endRange.min = this.startDate;
        viewModel.displayValue = this._displayText;
    }
    constructor(_options, editorInputId, visibilityChangedCallback) {
        super();
        this._options = _options;
        this._locker = new Locker();
        this._showPopup = () => {
            this._popupVisible = true;
        };
        this._hidePopup = () => {
            this._popupVisible = false;
            this._$element.get(0).querySelector('input').focus();
        };
        this.popupTemplate = 'dxrv-daterange-editor-popup';
        this.items = [];
        this.calendarHeight = '100%';
        this._visibilityChangedCallback = visibilityChangedCallback;
        this._displayText = this._getStringValue([this.startDate, this.endDate]);
        this.applyDate(this._options.value);
        if (_options.isMobile) {
            this.popupTemplate = 'dxrd-menu-parameters-content';
            this.popupModel = new DateRangeParemeterPopupModel(this);
        }
        else {
            this.popupModel = this;
        }
        this.items = [...predefinedDateRanges];
        this.dialogKeyboardHelper = new DateRangeDialogElementsKeyboardHelper(this);
        this._disposables.push(this.dialogKeyboardHelper);
        this._editorInputId = editorInputId;
        this._displayName = _options.displayName;
    }
    _toParameterValue() {
        return [this.startDate, this.endDate];
    }
    applyDate(range, force = false) {
        this._locker.lock(() => {
            this.startDate = range[0];
            this.endDate = range[1];
        });
        if (force)
            this.applyValue();
    }
    inRange(date) {
        const _end = new Date(this.endDate.getTime());
        const _start = new Date(this.startDate.getTime());
        return date <= new Date(_end.setHours(0, 0, 0, 0)) &&
            date >= new Date(_start.setHours(0, 0, 0, 0));
    }
    applyValue(updateEndDate = false) {
        this._locker.lock(() => {
            updateEndDate && (this.endDate = this.startDate);
            this._options.onValueChanged({ value: this._toParameterValue() });
        });
    }
}
dateRangeEditor_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => new Date(new Date().setHours(0, 0, 0, 0)))
], DateRangeEditor.prototype, "startDate", void 0);
dateRangeEditor_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => new Date(new Date().setHours(0, 0, 0, 0)))
], DateRangeEditor.prototype, "endDate", void 0);
dateRangeEditor_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => false)
], DateRangeEditor.prototype, "_popupVisible", void 0);
dateRangeEditor_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(() => '')
], DateRangeEditor.prototype, "_displayText", void 0);

;// ./node_modules/devexpress-reporting/viewer/widgets/dateRange/dateRangeEditor.binding.js




external_ko_namespaceObject.bindingHandlers['dxrvDateRangeEditor'] = {
    init: (element, valueAccessor, bindings, model, bindingContext) => {
        const rangeEditor = createDateRangeEditor(valueAccessor(), element, model);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).empty();
        const templateHtml = (0,external_DevExpress_Analytics_Utils_namespaceObject.getTemplate)('dxrv-daterange-editor'), $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).append(templateHtml);
        const context = bindingContext.createChildContext(rangeEditor.getViewModel());
        external_ko_namespaceObject.applyBindingsToDescendants(context, $element[0].children[0]);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => rangeEditor.dispose());
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets.js













;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_imagePainter.js

class ImagePainter {
    _drawImage(imageSource, context, scale, contentSize) {
        return new Promise((resolve, reject) => {
            if (!imageSource) {
                resolve();
                return;
            }
            const background = new Image();
            let prefix = 'data:image/' + (this.format || 'png') + ';base64,';
            if (this.format === 'svg') {
                prefix = 'data:image/svg+xml;charset=UTF-8;base64,';
            }
            const imageBase64 = imageSource.indexOf('base64,') !== -1 ? imageSource : prefix + imageSource;
            background.src = imageBase64;
            background.onload = () => {
                if (imageSource !== this.image()) {
                    reject();
                    return;
                }
                const size = this._getImageSize(background, scale, contentSize);
                const location = this._getImageCoordinate(size, contentSize);
                context.drawImage(background, location.x, location.y, size.width, size.height);
                resolve();
            };
            background.onerror = (error) => {
                reject(error);
            };
        });
    }
    _getImageSize(image, scale, contentSize) {
        const sizeMode = this.sizeMode();
        let width = image.width * scale, height = image.height * scale;
        if (sizeMode === ImageSizeMode.StretchImage) {
            width = contentSize.width;
            height = contentSize.height;
        }
        else if (sizeMode === ImageSizeMode.Cover || sizeMode === ImageSizeMode.ZoomImage || (sizeMode === ImageSizeMode.Squeeze && (contentSize.width < width || contentSize.height < height))) {
            const ratio = (sizeMode === ImageSizeMode.Cover ? Math.max : Math.min)(contentSize.width / width, contentSize.height / height);
            width *= ratio;
            height *= ratio;
        }
        return { width: width, height: height };
    }
    _getImageCoordinate(imageSize, contentSize) {
        let alignment = this.alignment();
        let x = 0, y = 0;
        if (!(alignment in ImageAlignment) && (this.sizeMode() === ImageSizeMode.Cover || this.sizeMode() === ImageSizeMode.ZoomImage || this.sizeMode() === ImageSizeMode.Squeeze)) {
            alignment = ImageAlignment.MiddleCenter;
        }
        if (alignment === ImageAlignment.MiddleLeft || alignment === ImageAlignment.MiddleCenter || alignment === ImageAlignment.MiddleRight) {
            y = (contentSize.height - imageSize.height) / 2;
        }
        else if (alignment === ImageAlignment.BottomLeft || alignment === ImageAlignment.BottomCenter || alignment === ImageAlignment.BottomRight) {
            y = contentSize.height - imageSize.height;
        }
        if (alignment === ImageAlignment.TopCenter || alignment === ImageAlignment.MiddleCenter || alignment === ImageAlignment.BottomCenter) {
            x = (contentSize.width - imageSize.width) / 2;
        }
        else if (alignment === ImageAlignment.TopRight || alignment === ImageAlignment.MiddleRight || alignment === ImageAlignment.BottomRight) {
            x = contentSize.width - imageSize.width;
        }
        return { x: x, y: y };
    }
    constructor(options) {
        this.image = options.imageSource;
        this.sizeMode = options.sizeMode;
        this.alignment = options.alignment;
    }
    refresh(context, scale = 1, contentSize) {
        contentSize = contentSize || {
            width: context.canvas.width,
            height: context.canvas.height
        };
        return this._drawImage(this.image(), context, scale, contentSize)
            .catch((error) => { error?.message && console.warn(error.message); });
    }
}

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_signaturePainter.js
var _signaturePainter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

class SignaturePainter extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseModel {
    dispose() {
        super.dispose();
        this.reset();
    }
    _drawPath(context, x, y, lastX, lastY, color, lineWidth) {
        context.beginPath();
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.lineJoin = 'round';
        context.moveTo(lastX, lastY);
        context.lineTo(x, y);
        context.closePath();
        context.stroke();
    }
    _drawCircle(context, x, y, color, lineWidth) {
        context.beginPath();
        context.fillStyle = color;
        context.arc(x, y, lineWidth / 2, 0, 2 * Math.PI, false);
        context.fill();
    }
    _drawAllPoints(context) {
        this._points.forEach((point) => {
            if (point.isStart) {
                this._drawCircle(context, point.x, point.y, point.color, point.width);
            }
            else {
                this._drawPath(context, point.x, point.y, point.lastX, point.lastY, point.color, point.width);
            }
        });
    }
    onPropertyChanged(args) {
        if (args.propertyName === '_points')
            this.hasPoints = this._points.length > 0;
    }
    drawCircle(context, x, y, color, width) {
        this._lastX = x;
        this._lastY = y;
        this._drawCircle(context, x, y, color, width);
        this._points.push({ x: this._lastX, y: this._lastY, color: color, width: width, isStart: true });
    }
    drawPath(context, x, y, color, width) {
        this._drawPath(context, x, y, this._lastX, this._lastY, color, width);
        this._points.push({ x: x, y: y, lastX: this._lastX, lastY: this._lastY, color: color, width: width });
        this._lastX = x;
        this._lastY = y;
    }
    resetLastPosition() {
        this._lastX = undefined;
        this._lastY = undefined;
    }
    resetPoints() {
        this._points = [];
    }
    reset() {
        this.resetLastPosition();
        this.resetPoints();
    }
    refresh(context) {
        this._drawAllPoints(context);
    }
}
_signaturePainter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutableArray)(() => [])
], SignaturePainter.prototype, "_points", void 0);
_signaturePainter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], SignaturePainter.prototype, "hasPoints", void 0);

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_imagePicker.js
var _imagePicker_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class ImagePickerAction extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    constructor(images, filterEnabled, action, initialSize) {
        super();
        this.filterEnabled = filterEnabled && images.every((image) => image.text !== undefined);
        this.contentTemplate = this.filterEnabled ? 'dx-picture-editing-imagepickerwithfilter' : 'dx-picture-editing-imagespicker';
        this.contentWidth = initialSize.width * 2 + 35;
        this.width = Math.min(initialSize.width, 150);
        this.height = Math.min(initialSize.height, 150);
        this.images = images.map(image => (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)().createDefaultModel(this)
            .generateProperty('url', image.url)
            .generateProperty('text', image.text)
            .generateProperty('data', image.data)
            .generateProperty('visible', true)
            .generateProperty('width', this.width)
            .generateProperty('height', this.height)
            .generateProperty('filterEnabled', this.filterEnabled)
            .generateProperty('filter', this.filterString)
            .generateProperty('action', () => {
            if (image.url) {
                getImageBase64(image.url).done((result) => {
                    action(result);
                }).fail((e) => {
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(e.name + ' :' + e.message.split(':').pop(), 'error');
                });
            }
            else {
                action(image.data);
            }
        })
            .getViewModel());
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'filterString') {
            this.images.forEach(image => {
                image.visible = !!(0,external_DevExpress_Analytics_Internal_namespaceObject.findMatchesInString)(image.text, args.newValue);
                image.filter = args.newValue;
            });
        }
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('filterEnabled', this.filterEnabled)
            .generateProperty('filter', this.filterString)
            .generateProperty('searchPlaceholder', (0,external_DevExpress_Analytics_Internal_namespaceObject.searchPlaceholder)())
            .generateProperty('contentWidth', this.contentWidth)
            .generateProperty('width', this.width)
            .generateProperty('height', this.height)
            .generateProperty('onFilterChanged', (event) => this.filterString = event.value)
            .generateProperty('images', this.images)
            .getViewModel();
    }
}
_imagePicker_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('')
], ImagePickerAction.prototype, "filterString", void 0);

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorToolbarItem.js
var _pictureEditorToolbarItem_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class PictureEditorToolbarItem extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseModel {
    constructor(options) {
        super();
        this.id = options.id;
        this.icon = options.icon;
        this.action = options.action;
        this.title = options.title;
    }
    onPropertyChanged(args) { }
    dispose() {
        this.action = null;
    }
}
_pictureEditorToolbarItem_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PictureEditorToolbarItem.prototype, "active", void 0);
class PictureEditorToolbarItemWithPopup extends PictureEditorToolbarItem {
    constructor(options) {
        super(options);
        this.template = options.template;
        if (options.templateOptions) {
            this.templateOptions = options.templateOptions;
            this._popup = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.PopupComponentBase();
            this.templateOptions.onContentReady = this._popup.onContentReady;
            this.templateOptions.hideOnOutsideClick = this._popup.hideOnOutsideClick;
            this.templateOptions.onShown = (e) => {
                const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(e.element);
                const topElement = $element.position().top;
                const getPositionTarget = options.templateOptions.getPositionTarget;
                const popupsOffset = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(getPositionTarget()).offset().top - (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(e.component.content()).offset().top;
                const $arrow = $element.find('.dx-popover-arrow');
                $arrow.css('top', popupsOffset + topElement - 24 - 11 + 'px');
            };
            this.templateOptions.onHidden = () => {
                this.active = false;
            };
        }
    }
    onPropertyChanged(args) {
        super.onPropertyChanged(args);
        if (args.propertyName === 'active' && this.templateOptions)
            this.templateOptions.visible = this.active;
    }
    dispose() {
        super.dispose();
        this._popup.dispose();
        this.templateOptions = null;
    }
}

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorActionProvider.js







class PictureEditorActionProvider extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _initPopupOptions(options) {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(options)
            .generateProperty('boundary', this._popupOptions.boundary)
            .generateProperty('getPositionTarget', () => this._popupOptions.getPositionTarget())
            .generateProperty('target', this._popupOptions.target)
            .generateProperty('container', this._popupOptions.container)
            .generateProperty('visible', options.visible)
            .getViewModel();
    }
    createOpenFileAction(action) {
        const openFileActionOptions = {
            id: PictureEditorActionId.OpenFile,
            icon: 'dxrd-svg-pictureeditor-toolbar_open',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Load Image', 'PreviewStringId.ImageEditingFieldEditor_LoadImage'),
            action: (e) => action(e)
        };
        return new PictureEditorToolbarItem(openFileActionOptions);
    }
    createImagePickerAction(images, filterEnabled, action) {
        const imagePickerAction = new ImagePickerAction(images, filterEnabled, action, this._editorModel.painter.initialSize);
        const popupOptions = this._initPopupOptions({
            width: 'auto',
            height: (0,external_DevExpress_Analytics_Internal_namespaceObject.calculateWithZoomFactor)(300) + 'px',
            contentTemplate: imagePickerAction.contentTemplate,
            contentData: imagePickerAction.getViewModel()
        });
        return new PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.PickImage,
            icon: 'dxrd-svg-pictureeditor-image_gallery',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Choose Image', 'PreviewStringId.ImageEditingFieldEditor_ChooseImage'),
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createSizingAction() {
        const popupOptions = this._initPopupOptions({
            width: (0,external_DevExpress_Analytics_Internal_namespaceObject.calculateWithZoomFactor)(174) + 'px',
            height: (0,external_DevExpress_Analytics_Internal_namespaceObject.calculateWithZoomFactor)(300) + 'px',
            contentTemplate: 'dx-picture-editing-sizemode-alignment',
            contentData: this._editorModel.painter.getViewModel().sizingOptions
        });
        return new PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.Alignment,
            icon: 'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Size Mode and Alignment', 'PreviewStringId.ImageEditingFieldEditor_SizeModeAndAlignment'),
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createBrushAction() {
        const popupOptions = this._initPopupOptions({
            width: (0,external_DevExpress_Analytics_Internal_namespaceObject.calculateWithZoomFactor)(226) + 'px',
            height: (0,external_DevExpress_Analytics_Internal_namespaceObject.calculateWithZoomFactor)(295) + 'px',
            contentTemplate: 'dx-picture-editing-brush-options',
            contentData: this._editorModel.painter.getViewModel().brushOptions
        });
        return new PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.Brush,
            icon: 'dxrd-svg-pictureeditor-toolbar_brush_options',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Brush Options', 'PreviewStringId.ImageEditingFieldEditor_BrushOptions'),
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createResetItem(action) {
        const clearItemOptions = {
            id: PictureEditorActionId.Reset,
            icon: 'dxrd-svg-pictureeditor-toolbar_reset',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Reset', 'PreviewStringId.ImageEditingFieldEditor_Reset'),
            action: (e) => action()
        };
        return new PictureEditorToolbarItem(clearItemOptions);
    }
    createClearItem(action) {
        const clearItemOptions = {
            id: PictureEditorActionId.Clear,
            icon: 'dxrd-svg-pictureeditor-toolbar_clear',
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Clear', 'PreviewStringId.ImageEditingFieldEditor_Clear'),
            action: (e) => action()
        };
        return new PictureEditorToolbarItem(clearItemOptions);
    }
    constructor(_editorModel, _popupOptions) {
        super();
        this._editorModel = _editorModel;
        this._popupOptions = _popupOptions;
    }
}
PictureEditorActionProvider.colors = ['#FFFFFF', '#FFC0C0', '#FFE0C0', '#FFFFC0', '#C0FFC0', '#C0FFFF', '#C0C0FF', '#FFC0FF', '#E0E0E0', '#FF8080', '#FFC080', '#FFFF80', '#80FF80', '#80FFFF', '#8080FF', '#FF80FF', '#C0C0C0', '#FF0000', '#FF8000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#C00000', '#C04000', '#C0C000', '#00C000', '#00C0C0', '#0000C0', '#C000C0', '#404040', '#800000', '#804000', '#808000', '#008000', '#008080', '#000080', '#800080', '#000000', '#400000', '#804040', '#404000', '#004000', '#004040', '#000040', '#400040'];

(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { fill: $data.templateOptions.contentData.lineColor }', function ($context, $element) {
    return {
        'style': function () {
            return {
                'fill': $context.$data.templateOptions.contentData.lineColor
            };
        }
    };
});

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_painter.js
var _painter_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









class Painter extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    _getContextPoint(e) {
        const element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$unwrap)(e.target);
        if (element.nodeName !== 'CANVAS')
            return;
        let zoom = this.getZoom();
        let x, y;
        if (e.offsetX && e.offsetY) {
            zoom = this.hasSignature() ? 1 : zoom;
            x = e.offsetX / zoom;
            y = e.offsetY / zoom;
        }
        else {
            const rect = this._context.canvas.getBoundingClientRect();
            x = (e.clientX - rect.left) / zoom;
            y = (e.clientY - rect.top) / zoom;
        }
        return { x, y };
    }
    _addEvents() {
        const element = this.$element.get(0);
        external_DevExpress_events_namespaceObject.on(element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_namespaceObject.on(element, 'dxpointermove', this._pointerMoveHandler);
        external_DevExpress_events_namespaceObject.on(element, 'dxpointerleave', this._pointerLeaveHandler);
    }
    _removeEvents() {
        const element = this.$element.get(0);
        external_DevExpress_events_namespaceObject.off(element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_namespaceObject.off(element, 'dxpointermove', this._pointerMoveHandler);
        external_DevExpress_events_namespaceObject.off(element, 'dxpointerleave', this._pointerLeaveHandler);
    }
    _setCanvasSize(width, height) {
        this._context.canvas.setAttribute('width', width);
        this._context.canvas.setAttribute('height', height);
    }
    _cleanCanvas() {
        this._context.clearRect(0, 0, this._context.canvas.width, this._context.canvas.height);
    }
    _getColorValues() {
        const array = [];
        PictureEditorActionProvider.colors.forEach((item) => {
            array.push((0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
                .generateProperty('action', () => {
                this.lineColor = item;
                array.forEach(x => x.isSelected = this.lineColor === x.value);
            })
                .generateProperty('isSelected', this.lineColor === item)
                .generateProperty('value', item)
                .getViewModel());
        });
        return array;
    }
    _getEnumValues(enumType, prefix, propertyName, info) {
        const array = [];
        getEnumValues(enumType).forEach((item) => {
            let attrTitle = undefined;
            if (info && info.valuesArray.length > 0) {
                const displayValue = info.valuesArray.filter((value) => value.value === item)[0];
                attrTitle = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(displayValue.displayValue || displayValue.value, displayValue.localizationId);
            }
            array.push((0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
                .generateProperty('action', () => {
                this[propertyName] = enumType[item];
                array.forEach(x => x.isSelected = this[propertyName] === enumType[x.value]);
                this.refresh();
            })
                .generateProperty('attrTitle', attrTitle)
                .generateProperty('iconTemplate', 'dxrd-svg-pictureeditor-' + prefix + '_' + item.toLowerCase())
                .generateProperty('isSelected', this[propertyName] === enumType[item])
                .generateProperty('value', item)
                .getViewModel());
        });
        return array;
    }
    constructor(element, options, onResize) {
        super();
        this._pointerDownHandler = (e) => {
            const point = this._getContextPoint(e);
            point && this.signaturePainter.drawCircle(this._context, point.x, point.y, this.lineColor, this.lineWidth);
        };
        this._pointerMoveHandler = (e) => {
            if (e.pointerType === 'touch' || e.pointerType === 'pen' || (e.pointerType === 'mouse' && e.originalEvent['buttons'] == 1)) {
                const point = this._getContextPoint(e);
                point && this.signaturePainter.drawPath(this._context, point.x, point.y, this.lineColor, this.lineWidth);
            }
        };
        this._pointerLeaveHandler = (e) => {
            this.signaturePainter.resetLastPosition();
        };
        this.format = (newVal) => {
            if (newVal)
                this.imagePainter.format = newVal;
            return this.imagePainter.format;
        };
        this.image = options.imageSource;
        this.imageSizeMode = options.sizeMode;
        this.imageAlignment = options.alignment;
        this.imagePainter = new ImagePainter({
            alignment: () => this.imageAlignment,
            imageSource: () => this.image,
            sizeMode: () => this.imageSizeMode
        });
        this.getZoom = () => options.editingFieldModel.zoom;
        this.format(options.imageType);
        this._disposables.push(this.signaturePainter = new SignaturePainter());
        this.addDisposable(this.signaturePainter.events.on('hasPointsChanged', (args) => {
            if (args.newValue)
                this._setCanvasSize(this.initialSize.width, this.initialSize.height);
            else
                this._setCanvasSize(this.initialSize.width * this.getZoom(), this.initialSize.height * this.getZoom());
            this.refresh();
            this._updateScale();
        }));
        this._updateScale = () => {
            this.scale = this.hasSignature() ? this.getZoom() : 1;
            onResize && onResize();
        };
        this._updateScale();
        if (options.pictureEditorModel) {
            this.addDisposable(options.pictureEditorModel.events.on('canDrawChanged', (args) => {
                if (args.newValue) {
                    this._addEvents();
                }
                else {
                    this._removeEvents();
                }
            }));
        }
        this.addDisposable(options.editingFieldModel.events.on('zoomChanged', (args) => {
            const newVal = args.newValue;
            if (!this.signaturePainter.hasPoints) {
                this._setCanvasSize(this.initialSize.width * newVal, this.initialSize.height * newVal);
                this.refresh();
            }
            this._updateScale();
        }));
        this.initSize(element, options.editingFieldModel.zoom);
        this.initCanvas(options.editingFieldModel.zoom);
    }
    onPropertyChanged(args) { }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('scale', this.scale)
            .generateProperty('brushOptions', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('lineWidth', this.lineWidth)
            .generateProperty('lineColor', this.lineColor)
            .generateProperty('colors', this._getColorValues())
            .generateProperty('onLineWidthChanged', (event) => this.lineWidth = event.value)
            .generateProperty('brushWidthText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Brush size', 'PreviewStringId.ImageEditingFieldEditor_BrushSize'))
            .generateProperty('brushColorText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Brush color', 'PreviewStringId.ImageEditingFieldEditor_BrushColor'))
            .getViewModel())
            .generateProperty('sizingOptions', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
            .generateProperty('alignment', this.imageAlignment)
            .generateProperty('alignmentText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Alignment', 'PreviewStringId.ImageEditingFieldEditor_Alignment'))
            .generateProperty('alignmentValues', this._getEnumValues(ImageAlignment, 'alignment', 'imageAlignment', imageAlignment))
            .generateProperty('sizeMode', this.imageSizeMode)
            .generateProperty('sizeModeText', (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Size Mode', 'PreviewStringId.ImageEditingFieldEditor_SizeMode'))
            .generateProperty('sizeModeValues', this._getEnumValues(ImageSizeMode, 'size_mode', 'imageSizeMode', sizing))
            .getViewModel())
            .getViewModel();
    }
    updateViewModel(args) {
        const viewModel = this.getViewModel();
        if (args.propertyName === 'lineWidth')
            viewModel.brushOptions.lineWidth = this.lineWidth;
        if (args.propertyName === 'lineColor')
            viewModel.brushOptions.lineColor = this.lineColor;
        if (args.propertyName === 'scale')
            viewModel.scale = this.scale;
        if (args.propertyName === 'imageAlignment')
            viewModel.sizingOptions.alignment = this.imageAlignment;
        if (args.propertyName === 'imageSizeMode')
            viewModel.sizingOptions.sizeMode = this.imageSizeMode;
    }
    clear() {
        this.image = null;
        this.signaturePainter.reset();
        this._cleanCanvas();
    }
    refresh() {
        this._cleanCanvas();
        const zoom = this.signaturePainter.hasPoints ? 1 : this.getZoom();
        const size = this.signaturePainter.hasPoints ? this.initialSize : undefined;
        this.imagePainter.refresh(this._context, zoom, size)
            .then(() => this.signaturePainter.refresh(this._context));
    }
    initSize(element, zoom) {
        this.$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
        this.initialSize = {
            width: this.$element.outerWidth() / zoom,
            height: this.$element.outerHeight() / zoom
        };
    }
    initCanvas(zoom) {
        const canvas = this.$element.find('canvas')[0];
        this._context = canvas.getContext('2d');
        this._setCanvasSize(this.initialSize.width * zoom, this.initialSize.height * zoom);
        this.imagePainter.refresh(this._context, zoom, {
            width: this._context.canvas.offsetWidth,
            height: this._context.canvas.offsetHeight
        });
    }
    imageFormatByType(imageType) {
        return imageType === ImageEditingFieldViewModel.__DefaultImageType ? 'png' : imageType;
    }
    getImage() {
        return this._context.canvas.toDataURL('image/png');
    }
    hasSignature() {
        return this.signaturePainter.hasPoints;
    }
    dispose() {
        super.dispose();
        this._removeEvents();
        this.$element = null;
        this._context = null;
        this.getZoom = null;
    }
    reset(initialImage, initialAlignment, initialSizeMode, initialImageType) {
        this.image = initialImage;
        this.imageAlignment = initialAlignment;
        this.imageSizeMode = initialSizeMode;
        this.format(this.imageFormatByType(initialImageType));
        this.signaturePainter.reset();
        this.refresh();
    }
}
_painter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)()
], Painter.prototype, "image", void 0);
_painter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(ImageSizeMode.Normal)
], Painter.prototype, "imageSizeMode", void 0);
_painter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(ImageAlignment.TopLeft)
], Painter.prototype, "imageAlignment", void 0);
_painter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)()
], Painter.prototype, "scale", void 0);
_painter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(1)
], Painter.prototype, "lineWidth", void 0);
_painter_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)('#000000')
], Painter.prototype, "lineColor", void 0);

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorModel.js
var _pictureEditorModel_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








class PictureEditorModel extends external_DevExpress_Analytics_Serializer_Native_namespaceObject.BaseRenderingModel {
    _takeFocus() {
        if (!this.editingFieldModel.active) {
            this._callbacks && this._callbacks.onFocusIn && this._callbacks.onFocusIn(this);
            this.editingFieldModel.active = true;
        }
        else if (this.editMode !== PictureEditMode.Image) {
            this.canDraw = true;
            this._callbacks && this._callbacks.onDraw && this._callbacks.onDraw(this);
        }
    }
    _releaseFocus() {
        if (this.editingFieldModel.active) {
            this._callbacks && this._callbacks.onFocusOut && this._callbacks.onFocusOut(this);
            this.editingFieldModel.active = false;
            this.canDraw = false;
        }
    }
    _wrapButtonAction(item, model) {
        const oldAction = item.action;
        item.action = (sender, event) => {
            model.changeActiveButton(sender);
            if (oldAction)
                oldAction(event, model);
        };
    }
    _initActions(customizeActionsCallback) {
        if (this.editMode == PictureEditMode.Image || this.editMode == PictureEditMode.ImageAndSignature) {
            this.actions.push(this.actionsProvider.createOpenFileAction((e) => this._loadImage(e)));
            this.actions.push(this.actionsProvider.createSizingAction());
        }
        if (this.editMode == PictureEditMode.Signature || this.editMode == PictureEditMode.ImageAndSignature) {
            this.actions.push(this.actionsProvider.createBrushAction());
        }
        if (!!this._initialImage) {
            this.actions.push(this.actionsProvider.createResetItem(() => {
                this.painter.reset(this._initialImage, this._initialAlignment, this._initialSizeMode, this._initialImageType);
            }));
        }
        this.actions.push(this.actionsProvider.createClearItem(() => {
            this.painter.clear();
        }));
        customizeActionsCallback && customizeActionsCallback(this, this.actions);
        this.actions.forEach((item) => this._wrapButtonAction(item, this));
    }
    _loadImage(event) {
        event.stopPropagation();
        event.preventDefault();
        (0,external_DevExpress_Analytics_Internal_namespaceObject.uploadFile)({
            accept: 'image/*'
        }).done(result => {
            this.painter.format(result.format);
            this.painter.image = result.content;
            this.painter.refresh();
        });
    }
    _addEvents() {
        this._pointerDownHandler = (e) => {
            this._takeFocus();
        };
        this._pointerCancelHandler = (e) => {
            this._releaseFocus();
        };
        this._pointerUpHandler = (e) => {
            if (!this.editingFieldModel.active)
                return;
            const isUnderCursor = (componentContent) => {
                return componentContent && (componentContent.is(e.target) || componentContent.has(e.target));
            };
            const isEditorContainer = this.$element.is(e.target) || this.$element.has(e.target)
                || isUnderCursor(this._getPopupContent())
                || this.actions.some(action => {
                    if (!action.active)
                        return false;
                    const component = action.component;
                    const componentUnwrapped = typeof component === 'function' ? component() : component;
                    return isUnderCursor(componentUnwrapped && (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(componentUnwrapped.content()));
                })
                || (e.target && e.target.className && e.target.className.indexOf && e.target.className.indexOf(this.GESTURE_COVER_CLASS) !== -1);
            if (!isEditorContainer) {
                this._releaseFocus();
            }
        };
        const element = this.$element.element;
        external_DevExpress_events_namespaceObject.on(element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_namespaceObject.on(element, 'dxpointercancel', this._pointerCancelHandler);
        external_DevExpress_events_namespaceObject.on(document, 'dxpointerup', this._pointerUpHandler);
    }
    constructor(editingFieldModel, element, onResize) {
        super();
        this.editingFieldModel = editingFieldModel;
        this.GESTURE_COVER_CLASS = 'dx-gesture-cover';
        this.ACTIVE_POPUP_CLASS = '.dx-picture-editing-active';
        this._getPopupContent = () => {
            const popupInstance = external_DevExpress_ui_dxPopup_default().getInstance(this.$element.find(this.ACTIVE_POPUP_CLASS).element);
            return popupInstance && (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(popupInstance.content());
        };
        this.actions = [];
        this._initialImageType = editingFieldModel.getImageType() || 'png';
        this.editMode = editingFieldModel.editMode || PictureEditMode.Image;
        this._initialImage = editingFieldModel.getImage();
        this._initialAlignment = editingFieldModel.alignment;
        this._initialSizeMode = editingFieldModel.sizeMode;
        this._callbacks = editingFieldModel.callbacks;
        this.$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
        this.shadingEnabled = editingFieldModel.shadingEnabled;
        this.active = editingFieldModel.active;
        const painterOptions = {
            alignment: this._initialAlignment,
            imageSource: this._initialImage,
            imageType: this._initialImageType,
            sizeMode: this._initialSizeMode,
            pictureEditorModel: this,
            editingFieldModel: editingFieldModel
        };
        this.painter = new Painter(this.$element.element, painterOptions, onResize);
        this._disposables.push(this.painter);
        this.actionsProvider = new PictureEditorActionProvider(this, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {
            getPositionTarget: () => {
                return this._getPopupContent().find('.dx-picture-editing-toolbar').element;
            }
        }, (editingFieldModel.popupOptions || {})));
        this._disposables.push(this.actionsProvider);
        this._initActions(editingFieldModel.callbacks && editingFieldModel.callbacks.customizeActions);
        this._addEvents();
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('shadingEnabled', this.shadingEnabled)
            .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
            .generateProperty('onContentReady', (event) => {
            event.component && event.component.registerKeyHandler('tab', () => {
                this.editingFieldModel.active = false;
            });
        })
            .generateProperty('painter', this.painter.getViewModel())
            .generateProperty('actions', this.actions)
            .generateProperty('element', this.$element.element)
            .getViewModel();
    }
    onPropertyChanged(args) {
        if (args.propertyName === 'canDraw') {
            this._canDrawChanged && this._canDrawChanged(args.newValue);
        }
    }
    changeActiveButton(selectedItem) {
        this.actions.forEach(action => {
            action.active = action === selectedItem && !action.active;
        });
    }
    dispose() {
        super.dispose();
        const element = this.$element.element;
        external_DevExpress_events_namespaceObject.off(element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_namespaceObject.off(element, 'dxpointercancel', this._pointerCancelHandler);
        external_DevExpress_events_namespaceObject.off(document, 'dxpointerup', this._pointerUpHandler);
        this.actions.forEach(action => action.dispose && action.dispose());
        this.$element = null;
        this.editingFieldModel = null;
    }
    getImage() {
        return this.painter.getImage();
    }
    reset(image, alignment, sizeMode, imageType) {
        this._initialImage = image;
        this._initialAlignment = alignment;
        this._initialSizeMode = sizeMode;
        this._initialImageType = imageType;
        this.painter.reset(this._initialImage, this._initialAlignment, this._initialSizeMode, this._initialImageType);
    }
    getCurrentOptions() {
        const imageBase64 = (this.painter.hasSignature() ? this.painter.getImage() : this.painter.image) || '';
        const imageParts = imageBase64.split(',');
        return {
            sizeMode: this.painter.imageSizeMode,
            alignment: this.painter.imageAlignment,
            imageType: this.painter.hasSignature() ? ImageEditingFieldViewModel.__DefaultImageType : this.painter.format(),
            image: imageParts[imageParts.length - 1]
        };
    }
}
_pictureEditorModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PictureEditorModel.prototype, "active", void 0);
_pictureEditorModel_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], PictureEditorModel.prototype, "canDraw", void 0);

;// ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_ko_bindings.js





external_ko_namespaceObject.bindingHandlers['dxPainter'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const options = valueAccessor();
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).empty();
        const templateHtml = (0,external_DevExpress_Analytics_Utils_namespaceObject.getTemplate)('dx-painter');
        const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).append(templateHtml);
        const child = $element[0].children[0];
        const model = new Painter(child, options);
        options.setPainter(model);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, function () {
            model.dispose();
            options.setPainter(null);
        });
        external_ko_namespaceObject.applyBindings(model.getViewModel(), child);
        return { controlsDescendantBindings: true };
    }
};
external_ko_namespaceObject.bindingHandlers['dxPictureEditor'] = {
    init: function (element, valueAccessor) {
        const viewModel = valueAccessor();
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).empty();
        const templateHtml = (0,external_DevExpress_Analytics_Utils_namespaceObject.getTemplate)('dx-picture-editing');
        const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).append(templateHtml);
        const child = $element[0].children[0];
        const model = viewModel.getModel();
        const pictureEditorModel = new PictureEditorModel(model, child);
        model._setPictureEditor && model._setPictureEditor(pictureEditorModel);
        external_ko_namespaceObject.cleanNode(child);
        external_ko_namespaceObject.applyBindings(pictureEditorModel.getViewModel(), child);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, function () {
            pictureEditorModel.dispose();
            model._setPictureEditor && model._setPictureEditor(null);
        });
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets-internal.js























;// ./node_modules/devexpress-reporting/bundle/_add-viewer-to-bundle.js



















function _addViewerToBundle(bundle) {
    bundle.Reporting = reporting_namespaceObject;
    bundle.Reporting.Editing = reporting_editing_namespaceObject;
    bundle.Reporting.Export = reporting_export_namespaceObject;
    bundle.Reporting.Export.Metadata = reporting_export_metadata_namespaceObject;
    bundle.Reporting.Internal = reporting_internal_namespaceObject;
    bundle.Reporting.Metadata = reporting_metadata_namespaceObject;
    bundle.Reporting.Viewer = reporting_viewer_namespaceObject;
    bundle.Reporting.Viewer.Editing = reporting_viewer_editing_namespaceObject;
    bundle.Reporting.Viewer.Export = reporting_viewer_export_namespaceObject;
    bundle.Reporting.Viewer.Export.Metadata = reporting_viewer_export_metadata_namespaceObject;
    bundle.Reporting.Viewer.Internal = reporting_viewer_internal_namespaceObject;
    bundle.Reporting.Viewer.Mobile = reporting_viewer_mobile_namespaceObject;
    bundle.Reporting.Viewer.Mobile.Internal = reporting_viewer_mobile_internal_namespaceObject;
    bundle.Reporting.Viewer.Parameters = reporting_viewer_parameters_namespaceObject;
    bundle.Reporting.Viewer.Settings = reporting_viewer_settings_namespaceObject;
    bundle.Reporting.Viewer.Utils = reporting_viewer_utils_namespaceObject;
    bundle.Reporting.Viewer.Widgets = reporting_viewer_widgets_namespaceObject;
    bundle.Reporting.Viewer.Widgets.Internal = reporting_viewer_widgets_internal_namespaceObject;
    bundle.Reporting.VERSION = version;
    return bundle;
}

;// ./node_modules/devexpress-reporting/bundle/_validator.js
const _validator_version = '%VERSION%';
function checkVersions() {
    const DevExpress = window.DevExpress;
    const reportingVersion = DevExpress['Reporting']['VERSION'];
    const analyticsVersion = DevExpress['Analytics']['VERSION'];
    if (reportingVersion != analyticsVersion)
        console.warn(`Reporting (v${reportingVersion}) and Analytics-Core (v${analyticsVersion}) versions do not match.`);
}

;// ./node_modules/devexpress-reporting/bundle/viewer-bundle.js


const viewer_bundle_DevExpress = window.DevExpress || {};
_addViewerToBundle(viewer_bundle_DevExpress);
checkVersions();
/* harmony default export */ const viewer_bundle = (viewer_bundle_DevExpress['Reporting']);

/******/ })()
;