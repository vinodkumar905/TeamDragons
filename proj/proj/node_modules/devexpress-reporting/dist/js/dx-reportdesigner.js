/**
* DevExpress HTML/JS Reporting (dist\js\dx-reportdesigner.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/

// UNUSED EXPORTS: default

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal.js
var reporting_chart_internal_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_namespaceObject);
__webpack_require__.d(reporting_chart_internal_namespaceObject, {
  ChartControlSurface: () => (ChartControlSurface),
  ChartControlViewModel: () => (ChartControlViewModel),
  ChartDragDropHandler: () => (ChartDragDropHandler),
  ChartRequests: () => (ChartRequests),
  ChartStructureObjectProvider: () => (ChartStructureObjectProvider),
  ChartStructureTreeListController: () => (ChartStructureTreeListController),
  ChartTreeListDragDropHelper: () => (ChartTreeListDragDropHelper),
  DiagramViewModel: () => (DiagramViewModel),
  HandlerUri: () => (HandlerUri),
  _getUnconvertiblePoint: () => (_getUnconvertiblePoint),
  _isDateTypeSpecific: () => (_isDateTypeSpecific),
  _isNumericTypeSpecific: () => (_isNumericTypeSpecific),
  additionalLegendSerializationsInfo: () => (additionalLegendSerializationsInfo),
  additionalPaneSerializationsInfo: () => (additionalPaneSerializationsInfo),
  angle: () => (angle),
  antialiasing: () => (antialiasing),
  appearanceName: () => (appearanceName),
  argumentSerializable: () => (argumentSerializable),
  autoBindingSettingsEnabled: () => (autoBindingSettingsEnabled),
  autoLayoutSettingsEnabled: () => (autoLayoutSettingsEnabled),
  axisLabelText: () => (axisLabelText),
  axisValue: () => (axisValue),
  axisValueSerializable: () => (axisValueSerializable),
  axisX3D: () => (axisX3D),
  axisXName: () => (axisXName),
  axisXYSerializationsInfo: () => (axisXYSerializationsInfo),
  axisY3D: () => (axisY3D),
  axisYName: () => (axisYName),
  backColor: () => (backColor),
  backImage: () => (backImage),
  bar3DSeriesViewGroup: () => (bar3DSeriesViewGroup),
  barPositionValues: () => (barPositionValues),
  barSeriesViewGroup: () => (barSeriesViewGroup),
  barWidth: () => (barWidth),
  border: () => (border),
  borderColor: () => (borderColor),
  borderSerializationsInfo: () => (borderSerializationsInfo),
  bottom: () => (bottom),
  bubbleSeriesPointsSortingKeys: () => (bubbleSeriesPointsSortingKeys),
  chartControlSerializationsInfo: () => (chartControlSerializationsInfo),
  chartDataMember: () => (chartDataMember),
  chartDataSource: () => (chartDataSource),
  chartSeriesDataMember: () => (chartSeriesDataMember),
  color: () => (color),
  colorDataMember: () => (colorDataMember),
  colorEach: () => (colorEach),
  commonSeriesPointsSortingKeys: () => (commonSeriesPointsSortingKeys),
  commonValueSerializationsInfo: () => (commonValueSerializationsInfo),
  constantLineSerializationsInfo: () => (constantLineSerializationsInfo),
  controlsFactory: () => (_controlsFactory_controlsFactory),
  createInnerActionsWithPopover: () => (createInnerActionsWithPopover),
  createViewsArray: () => (createViewsArray),
  dataFiltersConjunctionMode: () => (dataFiltersConjunctionMode),
  dataMember: () => (dataMember),
  dateTimeSumaryOptions: () => (dateTimeSumaryOptions),
  defaultBooleanValues: () => (defaultBooleanValues),
  defaultPane: () => (defaultPane),
  deserializeModelArray: () => (deserializeModelArray),
  diagram: () => (diagram),
  diagramMapper: () => (diagramMapper),
  diagramSerializationsInfo: () => (diagramSerializationsInfo),
  editorTemplates: () => (editorTemplates),
  emptyChartText: () => (emptyChartText),
  emptyChartTextSerializationsInfo: () => (emptyChartTextSerializationsInfo),
  enableAntialiasing: () => (_chart_enableAntialiasing),
  enableAxisXScrolling: () => (enableAxisXScrolling),
  enableAxisXZooming: () => (enableAxisXZooming),
  enableAxisYScrolling: () => (enableAxisYScrolling),
  enableAxisYZooming: () => (enableAxisYZooming),
  fakeChartSerializationInfo: () => (fakeChartSerializationInfo),
  fillMode: () => (fillMode),
  fillMode3D: () => (fillMode3D),
  fillModeMapper: () => (fillModeMapper),
  fillStyle: () => (fillStyle),
  fillStyleOptionsSerialize: () => (fillStyleOptionsSerialize),
  filterString: () => (filterString),
  filterStringEditable: () => (filterStringEditable),
  font: () => (font),
  font12: () => (font12),
  font18: () => (font18),
  font8: () => (font8),
  funnelPositionValues: () => (funnelPositionValues),
  getSeriesClassName: () => (getSeriesClassName),
  gridLinesAxisX: () => (gridLinesAxisX),
  gridLinesAxisY: () => (gridLinesAxisY),
  indicatorMapper: () => (indicatorMapper),
  left: () => (left),
  legendName: () => (legendName),
  legendSerializationsInfo: () => (legendSerializationsInfo),
  legendText: () => (legendText),
  legends: () => (legends),
  lineMarker: () => (lineMarker),
  lineMarkerOptionsSerializationsInfo: () => (lineMarkerOptionsSerializationsInfo),
  margin: () => (margin),
  maxLineCount: () => (maxLineCount),
  maxWidth: () => (maxWidth),
  name: () => (_common_name),
  numericSummaryOptions: () => (numericSummaryOptions),
  padding: () => (padding),
  paletteName: () => (paletteName),
  paneName: () => (paneName),
  paneSerializationsInfo: () => (paneSerializationsInfo),
  panes: () => (panes),
  parseDate: () => (parseDate),
  piePositionValues: () => (piePositionValues),
  pivotGridDataSourceOptions: () => (pivotGridDataSourceOptions),
  points: () => (points),
  qualitativeScaleOptions: () => (qualitativeScaleOptions),
  qualitativeScaleOptionsSerializationInfo: () => (qualitativeScaleOptionsSerializationInfo),
  qualitativeSummaryOptions: () => (qualitativeSummaryOptions),
  radarAxisX: () => (radarAxisX),
  radarAxisY: () => (radarAxisY),
  rangeSeriesPointsSortingKeys: () => (rangeSeriesPointsSortingKeys),
  right: () => (right),
  rotated: () => (rotated),
  scaleBreakSerializationsInfo: () => (scaleBreakSerializationsInfo),
  scaleTypeValues: () => (scaleTypeValues),
  secondaryAxesX: () => (secondaryAxesX),
  secondaryAxesY: () => (secondaryAxesY),
  secondaryAxisXYSerializationsInfo: () => (secondaryAxisXYSerializationsInfo),
  serializeDate: () => (serializeDate),
  seriesDataMember: () => (seriesDataMember),
  seriesLabelSerializationsInfo: () => (seriesLabelSerializationsInfo),
  seriesSerializable: () => (seriesSerializable),
  showAxisLabel: () => (showAxisLabel),
  showBehind: () => (showBehind),
  showInLegend: () => (showInLegend),
  sideBySideBarDistance: () => (sideBySideBarDistance),
  sideBySideBarDistanceFixed: () => (sideBySideBarDistanceFixed),
  sideBySideEqualBarWidth: () => (sideBySideEqualBarWidth),
  smallChartText: () => (smallChartText),
  stackedBarPositionValues: () => (stackedBarPositionValues),
  stockSeriesPointsSortingKeys: () => (stockSeriesPointsSortingKeys),
  stockValueSerializationsInfo: () => (stockValueSerializationsInfo),
  stringAlignmentValues: () => (stringAlignmentValues),
  tag: () => (tag),
  text: () => (_common_text),
  textAlignment: () => (textAlignment),
  textColor: () => (textColor),
  textPattern: () => (textPattern),
  thickness: () => (thickness),
  title: () => (title),
  titleAlignment: () => (titleAlignment),
  titleSerializationsInfo: () => (titleSerializationsInfo),
  titles: () => (titles),
  top: () => (_common_top),
  topNOptions: () => (topNOptions),
  topNOptionsSerializationsInfo: () => (topNOptionsSerializationsInfo),
  typeNameNotShow: () => (typeNameNotShow),
  typeNameSerializable: () => (typeNameSerializable),
  value1Value2SerializationsInfo: () => (value1Value2SerializationsInfo),
  valueWeightSerializationsInfo: () => (valueWeightSerializationsInfo),
  viewBindableSerializationInfo: () => (viewBindableSerializationInfo),
  viewMapper: () => (viewMapper),
  viewSerializationsInfo: () => (viewSerializationsInfo),
  visibility: () => (visibility),
  visible: () => (visible),
  waterfallPositionValues: () => (waterfallPositionValues)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-axis.js
var reporting_chart_internal_axis_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_axis_namespaceObject);
__webpack_require__.d(reporting_chart_internal_axis_namespaceObject, {
  AxisXYViewModel: () => (AxisXYViewModel),
  SecondaryAxisViewModel: () => (SecondaryAxisViewModel),
  axisX: () => (axisX),
  axisY: () => (axisY),
  initCollectionItem: () => (initCollectionItem)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-dataMembers.js
var reporting_chart_internal_dataMembers_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_dataMembers_namespaceObject);
__webpack_require__.d(reporting_chart_internal_dataMembers_namespaceObject, {
  CommonValueDataMembers: () => (CommonValueDataMembers),
  DataMemberBase: () => (DataMemberBase),
  StockValueDataMembers: () => (StockValueDataMembers),
  Value1Value2DataMembers: () => (Value1Value2DataMembers),
  ValueWeightDataMembers: () => (ValueWeightDataMembers)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-series-metadata.js
var reporting_chart_internal_series_metadata_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_series_metadata_namespaceObject);
__webpack_require__.d(reporting_chart_internal_series_metadata_namespaceObject, {
  dateTimeSummaryOptionsSerializationInfoArray: () => (dateTimeSummaryOptionsSerializationInfoArray),
  numericSummaryOptionsSerializationInfoArray: () => (numericSummaryOptionsSerializationInfoArray),
  summaryFunctionSerializationInfo: () => (summaryFunctionSerializationInfo),
  summaryOptionsSerializationInfoArray: () => (summaryOptionsSerializationInfoArray)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-models.js
var reporting_chart_internal_models_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_models_namespaceObject);
__webpack_require__.d(reporting_chart_internal_models_namespaceObject, {
  AdditionalLegendViewModel: () => (AdditionalLegendViewModel),
  AdditionalPaneViewModel: () => (AdditionalPaneViewModel),
  ChartComponentModelWithText: () => (ChartComponentModelWithText),
  ChartElementCollectionItemBase: () => (ChartElementCollectionItemBase),
  ChartLocalizableElementCollectionItemBase: () => (ChartLocalizableElementCollectionItemBase),
  ChartViewModel: () => (ChartViewModel),
  ChartViewTitleModel: () => (ChartViewTitleModel),
  ConstantLineViewModel: () => (ConstantLineViewModel),
  DataContainerViewModel: () => (DataContainerViewModel),
  DataFilterModel: () => (DataFilterModel),
  DefaultDataFilterModel: () => (DefaultDataFilterModel),
  LegendViewModel: () => (LegendViewModel),
  ScaleBreakViewModel: () => (ScaleBreakViewModel),
  StripLimitViewModel: () => (StripLimitViewModel),
  StripViewModel: () => (StripViewModel),
  TitleViewModel: () => (TitleViewModel),
  WholeRangeModel: () => (WholeRangeModel),
  assignTitleActions: () => (assignTitleActions),
  chart: () => (chart),
  chartSerializationsInfo: () => (chartSerializationsInfo),
  chartViewTitleSerializationsInfo: () => (chartViewTitleSerializationsInfo),
  dataContainer: () => (dataContainer),
  dataContainerSerializationsInfo: () => (dataContainerSerializationsInfo),
  dataFilterSerializationsInfo: () => (dataFilterSerializationsInfo),
  defaultChartTitleText: () => (defaultChartTitleText),
  legend: () => (legend),
  stripLimitSerializationsInfo: () => (stripLimitSerializationsInfo),
  stripMaxLimitInfo: () => (stripMaxLimitInfo),
  stripMinLimitInfo: () => (stripMinLimitInfo),
  stripSerializationsInfo: () => (stripSerializationsInfo),
  titleSerializationsInfo: () => (_title_titleSerializationsInfo)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-series.js
var reporting_chart_internal_series_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_series_namespaceObject);
__webpack_require__.d(reporting_chart_internal_series_namespaceObject, {
  DateTimeSummaryOptionsModel: () => (DateTimeSummaryOptionsModel),
  FillStyle: () => (FillStyle),
  Indicator: () => (Indicator),
  NumericSummaryOptionsModel: () => (NumericSummaryOptionsModel),
  QualitativeSummaryOptionsModel: () => (QualitativeSummaryOptionsModel),
  ScaleType: () => (ScaleType),
  ScaleTypeMap: () => (ScaleTypeMap),
  SeriesLabelViewModel: () => (SeriesLabelViewModel),
  SeriesPointModel: () => (SeriesPointModel),
  SeriesTemplateViewModel: () => (SeriesTemplateViewModel),
  SeriesViewModel: () => (SeriesViewModel),
  SeriesViewViewModel: () => (SeriesViewViewModel),
  SummaryOptionsModelBase: () => (SummaryOptionsModelBase),
  _argumentScaleTypeValidatorOptions: () => (_argumentScaleTypeValidatorOptions),
  allowResample: () => (allowResample),
  argumentDataMember: () => (argumentDataMember),
  argumentScaleType: () => (argumentScaleType),
  assignIndicatorActions: () => (assignIndicatorActions),
  checkableInLegend: () => (checkableInLegend),
  checkedInLegend: () => (checkedInLegend),
  colorSerializable: () => (colorSerializable),
  dateTimeSummaryOptionsSerializationInfoArray: () => (dateTimeSummaryOptionsSerializationInfoArray),
  fillStyleInfo: () => (fillStyleInfo),
  labelsVisibility: () => (labelsVisibility),
  legendTextPattern: () => (legendTextPattern),
  mapTypes: () => (mapTypes),
  numericSummaryOptionsSerializationInfoArray: () => (numericSummaryOptionsSerializationInfoArray),
  onlyNumericArgumentSupportedSeriesViewTypes: () => (onlyNumericArgumentSupportedSeriesViewTypes),
  seriesLabel: () => (seriesLabel),
  seriesPointSerializationsInfo: () => (seriesPointSerializationsInfo),
  seriesPointsSorting: () => (seriesPointsSorting),
  seriesPointsSortingKey: () => (seriesPointsSortingKey),
  seriesSerializationsInfo: () => (seriesSerializationsInfo),
  seriesTemplate: () => (seriesTemplate),
  seriesTemplateSerializationsInfo: () => (seriesTemplateSerializationsInfo),
  stripFillStyle: () => (stripFillStyle),
  summaryFunctionSerializationInfo: () => (summaryFunctionSerializationInfo),
  summaryOptionsSerializationInfoArray: () => (summaryOptionsSerializationInfoArray),
  valueDataMembersSerializable: () => (valueDataMembersSerializable),
  valueScaleType: () => (valueScaleType),
  valuesSerializable: () => (valuesSerializable),
  view: () => (view),
  viewFillMode: () => (viewFillMode),
  viewTypesDataMembers: () => (viewTypesDataMembers)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-widgets.js
var reporting_chart_internal_widgets_namespaceObject = {};
__webpack_require__.r(reporting_chart_internal_widgets_namespaceObject);
__webpack_require__.d(reporting_chart_internal_widgets_namespaceObject, {
  ChartDataMemberEditor: () => (ChartDataMemberEditor),
  ChartDataSourceEditor: () => (ChartDataSourceEditor),
  ChartDependencyEditor: () => (ChartDependencyEditor),
  CollectionLookupEditorModel: () => (CollectionLookupEditorModel),
  PointsEditor: () => (PointsEditor),
  PositionSeriesLabelEditor: () => (PositionSeriesLabelEditor),
  SummaryFunctionEditor: () => (SummaryFunctionEditor),
  SummaryFunctionModel: () => (SummaryFunctionModel),
  UndoColorPickerEditor: () => (UndoColorPickerEditor),
  ViewEditor: () => (ViewEditor)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls.js
var reporting_designer_controls_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_namespaceObject);
__webpack_require__.d(reporting_designer_controls_namespaceObject, {
  ActionTypeBase: () => (ActionTypeBase),
  Anchoring: () => (Anchoring),
  BarCodeSymbology: () => (BarCodeSymbology),
  CheckEditOptions: () => (CheckEditOptions),
  ComponentsModel: () => (ComponentsModel),
  ContainerEditOptions: () => (ContainerEditOptions),
  ControlParameter: () => (ControlParameter),
  ControlsFactory: () => (ControlsFactory),
  CrossTabDataFieldModel: () => (CrossTabDataFieldModel),
  CrossTabFieldModel: () => (CrossTabFieldModel),
  CrossTabLayoutOptionsModel: () => (CrossTabLayoutOptionsModel),
  EditOptions: () => (EditOptions),
  ExtensionModel: () => (ExtensionModel),
  FormattingRule: () => (FormattingRule),
  FormattingRuleLink: () => (FormattingRuleLink),
  GlyphOptions: () => (GlyphOptions),
  HorizontalAnchoring: () => (HorizontalAnchoring),
  ImageBase64Model: () => (ImageBase64Model),
  ImageEditOptions: () => (ImageEditOptions),
  NavigateToReportAction: () => (NavigateToReportAction),
  ParameterBinding: () => (ParameterBinding),
  ReportSurface: () => (ReportSurface),
  ReportViewModel: () => (ReportViewModel),
  SortingOptions: () => (SortingOptions),
  StyleModel: () => (StyleModel),
  SubreportViewModel: () => (SubreportViewModel),
  TableOfContentsLevel: () => (TableOfContentsLevel),
  TableOfContentsLevelSurface: () => (TableOfContentsLevelSurface),
  TextEditOptions: () => (TextEditOptions),
  VerticalAcnhoring: () => (VerticalAcnhoring),
  WatermarkModel: () => (WatermarkModel),
  XRBarCodeViewModel: () => (XRBarCodeViewModel),
  XRCellsurface: () => (XRCellsurface),
  XRCharacterComb: () => (XRCharacterComb),
  XRCharacterCombSurface: () => (XRCharacterCombSurface),
  XRChartSurface: () => (XRChartSurface),
  XRChartViewModel: () => (XRChartViewModel),
  XRCheckBoxSurface: () => (XRCheckBoxSurface),
  XRCheckBoxViewModel: () => (XRCheckBoxViewModel),
  XRControlSurface: () => (XRControlSurface),
  XRControlSurfaceBase: () => (XRControlSurfaceBase),
  XRControlViewModel: () => (XRControlViewModel),
  XRCrossBandControlViewModel: () => (XRCrossBandControlViewModel),
  XRCrossBandSurface: () => (XRCrossBandSurface),
  XRCrossTabCellViewModel: () => (XRCrossTabCellViewModel),
  XRCrossTabSurface: () => (XRCrossTabSurface),
  XRCrossTabViewModel: () => (XRCrossTabViewModel),
  XRGaugeViewModel: () => (XRGaugeViewModel),
  XRLineSurface: () => (XRLineSurface),
  XRPageBreakSurface: () => (XRPageBreakSurface),
  XRPageInfoSurface: () => (XRPageInfoSurface),
  XRPageInfoViewModel: () => (XRPageInfoViewModel),
  XRPdfContentSurface: () => (XRPdfContentSurface),
  XRPdfContentViewModel: () => (XRPdfContentViewModel),
  XRPdfSignatureModel: () => (XRPdfSignatureModel),
  XRPdfSignatureSurface: () => (XRPdfSignatureSurface),
  XRPictureBoxSurface: () => (XRPictureBoxSurface),
  XRPictureBoxViewModel: () => (XRPictureBoxViewModel),
  XRPivotGridSurface: () => (XRPivotGridSurface),
  XRPivotGridViewModel: () => (XRPivotGridViewModel),
  XRReportElementViewModel: () => (XRReportElementViewModel),
  XRRichSurface: () => (XRRichSurface),
  XRRichTextStreamType: () => (XRRichTextStreamType),
  XRRichViewModel: () => (XRRichViewModel),
  XRShapeControlSurface: () => (XRShapeControlSurface),
  XRShapeViewModel: () => (XRShapeViewModel),
  XRSparkLineSurface: () => (XRSparkLineSurface),
  XRSparklineViewModel: () => (XRSparklineViewModel),
  XRSubreportSurface: () => (XRSubreportSurface),
  XRSubreportViewModel: () => (XRSubreportViewModel),
  XRTableCellSurface: () => (XRTableCellSurface),
  XRTableCellViewModel: () => (XRTableCellViewModel),
  XRTableControlViewModel: () => (XRTableControlViewModel),
  XRTableOfContentsSurface: () => (XRTableOfContentsSurface),
  XRTableOfContentsViewModel: () => (XRTableOfContentsViewModel),
  XRTableRowSurface: () => (XRTableRowSurface),
  XRTableRowViewModel: () => (XRTableRowViewModel),
  XRTableSurface: () => (XRTableSurface),
  XRTextControlSurfaceBase: () => (XRTextControlSurfaceBase),
  XRUnknownControlSurface: () => (XRUnknownControlSurface),
  XRZipCodeSurface: () => (XRZipCodeSurface),
  _getCustomGlyphsInfo: () => (_getCustomGlyphsInfo),
  barCodesTypes: () => (barCodesTypes),
  circularValues: () => (circularValues),
  getDefaultCheckSize: () => (getDefaultCheckSize),
  getNearestBand: () => (getNearestBand),
  getRichEditSurface: () => (getRichEditSurface),
  kindToString: () => (kindToString),
  levelDefaultHeight: () => (levelDefaultHeight),
  linearValues: () => (linearValues),
  pageInfoValuesMap: () => (pageInfoValuesMap),
  registerRichEditInline: () => (registerRichEditInline),
  spartlineTypes: () => (spartlineTypes)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-bands-metadata.js
var reporting_designer_bands_metadata_namespaceObject = {};
__webpack_require__.r(reporting_designer_bands_metadata_namespaceObject);
__webpack_require__.d(reporting_designer_bands_metadata_namespaceObject, {
  bandLayout: () => (bandLayout),
  bandSerializationInfo: () => (bandSerializationInfo),
  commonBandSerializationInfo: () => (commonBandSerializationInfo),
  commonVerticalBandProperties: () => (commonVerticalBandProperties),
  detailBandSerializationInfo: () => (detailBandSerializationInfo),
  detailReportBandSerializationInfo: () => (detailReportBandSerializationInfo),
  drillDownControl: () => (drillDownControl),
  drillDownDetailReportExpanded: () => (drillDownDetailReportExpanded),
  expanded: () => (xrBandMetaData_expanded),
  fillEmptySpace: () => (fillEmptySpace),
  generalBandPopularProperties: () => (generalBandPopularProperties),
  generalBandSerializationInfo: () => (generalBandSerializationInfo),
  groupFieldSerializationInfo: () => (groupFieldSerializationInfo),
  groupFields: () => (groupFields),
  groupFooterBandSerializationInfo: () => (groupFooterBandSerializationInfo),
  groupFooterUnion: () => (groupFooterUnion),
  groupHeaderBandSerializationInfo: () => (groupHeaderBandSerializationInfo),
  groupUnion: () => (groupUnion),
  height: () => (height),
  hierarchyPrintOptions: () => (hierarchyPrintOptions),
  keepTogetherWithDetailReports: () => (keepTogetherWithDetailReports),
  level: () => (bandsMetadata_level),
  multiColumn: () => (multiColumn),
  pageBandSerializationInfo: () => (pageBandSerializationInfo),
  pageBandSerializationInfoPageHeader: () => (pageBandSerializationInfoPageHeader),
  pageBreak: () => (pageBreak),
  pageBreakValues: () => (pageBreakValues),
  pageBreakWithoutAfterValues: () => (pageBreakWithoutAfterValues),
  popularPropertiesDetail: () => (popularPropertiesDetail),
  popularPropertiesDetailReport: () => (popularPropertiesDetailReport),
  popularPropertiesGroupFooter: () => (popularPropertiesGroupFooter),
  popularPropertiesGroupHeader: () => (popularPropertiesGroupHeader),
  popularPropertiesPageFooter: () => (popularPropertiesPageFooter),
  popularPropertiesPageHeader: () => (popularPropertiesPageHeader),
  popularPropertiesReportFooter: () => (popularPropertiesReportFooter),
  popularPropertiesReportHeader: () => (popularPropertiesReportHeader),
  popularPropertiesVerticalDetailBand: () => (popularPropertiesVerticalDetailBand),
  popularPropertiesVerticalHeaderBand: () => (popularPropertiesVerticalHeaderBand),
  popularPropertiesVerticalTotalBand: () => (popularPropertiesVerticalTotalBand),
  printAcrossBands: () => (printAcrossBands),
  printAtBottom: () => (printAtBottom),
  printOn: () => (printOn),
  repeatEveryPage: () => (repeatEveryPage),
  reportFooterBandSerializationInfo: () => (reportFooterBandSerializationInfo),
  reportHeaderBandSerializationInfo: () => (reportHeaderBandSerializationInfo),
  sortFields: () => (sortFields),
  sortingSummary: () => (sortingSummary),
  subBandSerializationInfo: () => (subBandSerializationInfo),
  verticalDetailBandSerializationInfo: () => (verticalDetailBandSerializationInfo),
  verticalHeaderBandSerializationInfo: () => (verticalHeaderBandSerializationInfo),
  verticalTotalBandSerializationInfo: () => (verticalTotalBandSerializationInfo)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-metadata.js
var reporting_designer_controls_metadata_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_metadata_namespaceObject);
__webpack_require__.d(reporting_designer_controls_metadata_namespaceObject, {
  ActionType: () => (ActionType),
  FrameOptionsTypesEPC: () => (FrameOptionsTypesEPC),
  Shape: () => (Shape),
  accessibleDescription: () => (accessibleDescription),
  accessibleRole: () => (accessibleRole),
  accessibleRoleValues: () => (accessibleRoleValues),
  action: () => (action),
  actionKind: () => (actionKind),
  actionSerializationInfo: () => (actionSerializationInfo),
  actualValue: () => (actualValue),
  afterPrint: () => (afterPrint),
  alignment: () => (alignment),
  allScripts: () => (allScripts),
  allowMarkupText: () => (allowMarkupText),
  anchorHorizontal: () => (anchorHorizontal),
  anchorVertical: () => (anchorVertical),
  angle: () => (metadata_angle),
  autoModule: () => (autoModule),
  autoWidth: () => (autoWidth),
  backColor: () => (metadata_backColor),
  barCodeOrientation: () => (barCodeOrientation),
  barCodesMap: () => (barCodesMap),
  barcodeFake: () => (barcodeFake),
  barcodeSerializationsInfo: () => (barcodeSerializationsInfo),
  baseControlProperties: () => (baseControlProperties),
  baseTocLevelSerializationsInfo: () => (baseTocLevelSerializationsInfo),
  beforePrint: () => (beforePrint),
  bookmark: () => (bookmark),
  bookmarkDuplicateSuppress: () => (bookmarkDuplicateSuppress),
  bookmarkGroup: () => (bookmarkGroup),
  bookmarkParent: () => (bookmarkParent),
  borderColor: () => (metadata_borderColor),
  borderDashStyle: () => (borderDashStyle),
  borderDashStyleCrossband: () => (borderDashStyleCrossband),
  borderDashStyleValues: () => (borderDashStyleValues),
  borderWidth: () => (borderWidth),
  borders: () => (borders),
  bordersProperties: () => (bordersProperties),
  calculatedFields: () => (calculatedFields),
  canGrow: () => (canGrow),
  canGrowShrinkGroup: () => (canGrowShrinkGroup),
  canPublish: () => (canPublish),
  canShrink: () => (canShrink),
  cellHeight: () => (cellHeight),
  cellHorizontalSpacing: () => (cellHorizontalSpacing),
  cellSizeMode: () => (cellSizeMode),
  cellVerticalSpacing: () => (cellVerticalSpacing),
  cellWidth: () => (cellWidth),
  cells: () => (cells),
  characterCombBorderDashStyle: () => (characterCombBorderDashStyle),
  characterCombBorders: () => (characterCombBorders),
  characterCombFont: () => (characterCombFont),
  characterCombSerializationsInfo: () => (characterCombSerializationsInfo),
  chart: () => (xrChart_chart),
  chartScripts: () => (chartScripts),
  checkEditOptions: () => (checkEditOptions),
  checkState: () => (checkState),
  checkboxSerializationsInfo: () => (checkboxSerializationsInfo),
  checked: () => (checked),
  commonBandProperties: () => (commonBandProperties),
  commonBandScripts: () => (commonBandScripts),
  commonControlProperties: () => (commonControlProperties),
  commonScripts: () => (commonScripts),
  conditionObj: () => (conditionObj),
  controlParameterInfos: () => (controlParameterInfos),
  controlParametersInfo: () => (controlParametersInfo),
  controlScripts: () => (controlScripts),
  createSummarySerializationInfo: () => (createSummarySerializationInfo),
  crossBandBoxControlSerializationsInfo: () => (crossBandBoxControlSerializationsInfo),
  crossBandLineControlSerializationsInfo: () => (crossBandLineControlSerializationsInfo),
  crossBandLineWidth: () => (crossBandLineWidth),
  crossTabSerializationInfo: () => (crossTabSerializationInfo),
  crossTabStyles: () => (crossTabStyles),
  crossTabStylesDefaults: () => (crossTabStylesDefaults),
  dataAdapter: () => (dataAdapter),
  dataMember: () => (metadata_dataMember),
  dataSource: () => (dataSource),
  datasourcePrintOptionsGroup: () => (datasourcePrintOptionsGroup),
  defaultAccessibleRole: () => (defaultAccessibleRole),
  defaultBooleanValuesArray: () => (defaultBooleanValuesArray),
  defaultBooleanVisible: () => (defaultBooleanVisible),
  defaultCodeSerializationInfo: () => (defaultCodeSerializationInfo),
  defaultFrameOptionsSerializationInfo: () => (defaultFrameOptionsSerializationInfo),
  defaultPrinterSettingsUsingInfo: () => (defaultPrinterSettingsUsingInfo),
  defaultTextPadding: () => (defaultTextPadding),
  detailReportBandScripts: () => (detailReportBandScripts),
  displayName: () => (displayName),
  dpi: () => (dpi),
  drawWatermark: () => (drawWatermark),
  drillThroughParameterBindings: () => (drillThroughParameterBindings),
  drillThroughReportSource: () => (drillThroughReportSource),
  drillThroughReportSourceUrl: () => (drillThroughReportSourceUrl),
  editOptions: () => (editOptions),
  editOptionsSerializationInfo: () => (editOptionsSerializationInfo),
  endBand: () => (endBand),
  endPoint: () => (endPoint),
  evaluateBinding: () => (evaluateBinding),
  evenStyleName: () => (evenStyleName),
  expressionBindingSerializationsInfo: () => (expressionBindingSerializationsInfo),
  expressionBindings: () => (expressionBindings),
  expressionableFont: () => (expressionableFont),
  expressionableFontInfo: () => (expressionableFontInfo),
  fillColor: () => (fillColor),
  filterString: () => (metadata_filterString),
  filterStringEditable: () => (metadata_filterStringEditable),
  font: () => (metadata_font),
  fontGroup: () => (fontGroup),
  fontWatermark: () => (fontWatermark),
  foreColor: () => (foreColor),
  foreColorWatermark: () => (foreColorWatermark),
  formatting: () => (formatting),
  formattingRuleLinkSerializationsInfo: () => (formattingRuleLinkSerializationsInfo),
  formattingRuleLinks: () => (formattingRuleLinks),
  formattingRuleSerializationsInfo: () => (formattingRuleSerializationsInfo),
  formattingRuleSheet: () => (formattingRuleSheet),
  formattingSerializationsInfo: () => (formattingSerializationsInfo),
  frameOptionsMap: () => (frameOptionsMap),
  frameOptionsTypes: () => (frameOptionsTypes),
  generateOwnPages: () => (generateOwnPages),
  getSummaryFunctionValues: () => (getSummaryFunctionValues),
  glyphAlignment: () => (glyphAlignment),
  glyphOptions: () => (glyphOptions),
  glyphOptionsSerializationInfo: () => (glyphOptionsSerializationInfo),
  groupBandScripts: () => (groupBandScripts),
  groupHeaderBandScripts: () => (groupHeaderBandScripts),
  horizontalContentSplitting: () => (horizontalContentSplitting),
  imageEditOptions: () => (imageEditOptions),
  imageSource: () => (imageSource),
  imageType: () => (imageType),
  imageUrl: () => (imageUrl),
  interactiveSorting: () => (interactiveSorting),
  keepTogether: () => (keepTogether),
  keepTogetherDefaultValueFalse: () => (keepTogetherDefaultValueFalse),
  labelGroup: () => (labelGroup),
  labelScripts: () => (labelScripts),
  labelSerializationsInfo: () => (labelSerializationsInfo),
  landscape: () => (landscape),
  language: () => (language),
  lineDirection: () => (lineDirection),
  lineSerializationsInfo: () => (lineSerializationsInfo),
  lineStyle: () => (metadata_lineStyle),
  lineWidth: () => (lineWidth),
  localizationItems: () => (localizationItems),
  location: () => (metadata_location),
  lockedInUserDesigner: () => (lockedInUserDesigner),
  margins: () => (margins),
  maxNestingLevel: () => (maxNestingLevel),
  maximum: () => (maximum),
  measureUnit: () => (measureUnit),
  minimum: () => (minimum),
  moduleInfo: () => (moduleInfo),
  multiline: () => (multiline),
  name: () => (metadata_name),
  navigateUrl: () => (navigateUrl),
  navigationGroup: () => (navigationGroup),
  newDocumentData: () => (newDocumentData),
  nullValueText: () => (nullValueText),
  oddStyleName: () => (oddStyleName),
  padding: () => (metadata_padding),
  paddingGroup: () => (paddingGroup),
  paddingString: () => (paddingString),
  pageBreakSerializationsInfo: () => (pageBreakSerializationsInfo),
  pageColor: () => (pageColor),
  pageCount: () => (pageCount),
  pageHeight: () => (pageHeight),
  pageInfo: () => (pageInfo),
  pageInfoSerializationsInfo: () => (pageInfoSerializationsInfo),
  pageWidth: () => (pageWidth),
  panelSerializationsInfo: () => (panelSerializationsInfo),
  paperKind: () => (paperKind),
  parameterBindingSerializationInfo: () => (parameterBindingSerializationInfo),
  parameterBindings: () => (parameterBindings),
  parametersInfo: () => (parametersInfo),
  pdfContentScripts: () => (pdfContentScripts),
  pdfContentSerializationInfo: () => (pdfContentSerializationInfo),
  pdfSignatureInfo: () => (pdfSignatureInfo),
  pdfSource: () => (pdfSource),
  pdfSourceUrl: () => (pdfSourceUrl),
  pictureBoxSerializationsInfo: () => (pictureBoxSerializationsInfo),
  pivotGridAppearances: () => (pivotGridAppearances),
  pivotGridOptions: () => (pivotGridOptions),
  pivotGridSerializationsInfo: () => (pivotGridSerializationsInfo),
  pivotGridStyles: () => (pivotGridStyles),
  pivotScripts: () => (pivotScripts),
  popularPropertiesBarCode: () => (popularPropertiesBarCode),
  popularPropertiesCheckBox: () => (popularPropertiesCheckBox),
  popularPropertiesCrossLine: () => (popularPropertiesCrossLine),
  popularPropertiesGauge: () => (popularPropertiesGauge),
  popularPropertiesLabel: () => (popularPropertiesLabel),
  popularPropertiesLine: () => (popularPropertiesLine),
  popularPropertiesPageInfo: () => (popularPropertiesPageInfo),
  popularPropertiesPdfContent: () => (popularPropertiesPdfContent),
  popularPropertiesPicture: () => (popularPropertiesPicture),
  popularPropertiesReport: () => (popularPropertiesReport),
  popularPropertiesRichText: () => (popularPropertiesRichText),
  popularPropertiesShape: () => (popularPropertiesShape),
  popularPropertiesSparkline: () => (popularPropertiesSparkline),
  popularPropertiesTable: () => (popularPropertiesTable),
  popularPropertiesTableCell: () => (popularPropertiesTableCell),
  popularPropertiesZipCode: () => (popularPropertiesZipCode),
  prefilter: () => (prefilter),
  processDuplicatesMode: () => (processDuplicatesMode),
  processDuplicatesTarget: () => (processDuplicatesTarget),
  processGroup: () => (processGroup),
  processHiddenCellMode: () => (processHiddenCellMode),
  processNullValues: () => (processNullValues),
  reportExportOptionsSerializationInfo: () => (reportExportOptionsSerializationInfo),
  reportPrintOptions: () => (reportPrintOptions),
  reportPrintOptionsSerializationInfo: () => (reportPrintOptionsSerializationInfo),
  reportScripts: () => (reportScripts),
  reportSerializationInfo: () => (reportSerializationInfo),
  reportSource: () => (reportSource),
  reportSourceUrl: () => (reportSourceUrl),
  requestParameters: () => (requestParameters),
  richTextSerializationsInfo: () => (richTextSerializationsInfo),
  rollPaper: () => (rollPaper),
  rowSpan: () => (rowSpan),
  rtf: () => (rtf),
  rtl: () => (rtl),
  rtlLayout: () => (rtlLayout),
  rtlReport: () => (rtlReport),
  rtlValues: () => (rtlValues),
  runningBand: () => (runningBand),
  scriptLanguage: () => (scriptLanguage),
  scriptReferencesString: () => (scriptReferencesString),
  segmentWidth: () => (segmentWidth),
  serializableRtfString: () => (serializableRtfString),
  shapeElementSerializationsInfo: () => (shapeElementSerializationsInfo),
  shapeFake: () => (shapeFake),
  shapeSerializationsInfo: () => (shapeSerializationsInfo),
  shapeType: () => (shapeType),
  shapesMap: () => (shapesMap),
  showPreviewMarginLines: () => (showPreviewMarginLines),
  showText: () => (showText),
  signatureOptions: () => (signatureOptions),
  size: () => (size),
  sizeChanged: () => (sizeChanged),
  sizeLocation: () => (sizeLocation),
  snapGridSize: () => (snapGridSize),
  sortOrder: () => (sortOrder),
  sortingOptionsSerializationsInfo: () => (sortingOptionsSerializationsInfo),
  sparklineFake: () => (sparklineFake),
  sparklineSerializationsInfo: () => (sparklineSerializationsInfo),
  sparklineViewMap: () => (sparklineViewMap),
  startBand: () => (startBand),
  startPageNumber: () => (startPageNumber),
  startPoint: () => (startPoint),
  stretch: () => (stretch),
  styleName: () => (styleName),
  stylePriority: () => (stylePriority),
  stylePrioritySerializationInfo: () => (stylePrioritySerializationInfo),
  styleSerializationInfo: () => (styleSerializationInfo),
  stylesInfo: () => (stylesInfo),
  stylesObj: () => (stylesObj),
  subreportScripts: () => (subreportScripts),
  subreportSerializationsInfo: () => (subreportSerializationsInfo),
  summary: () => (summary),
  summaryFunctionValues: () => (summaryFunctionValues),
  summarySerializationInfo: () => (summarySerializationInfo),
  symbology: () => (symbology),
  tableCellSerializationsInfo: () => (tableCellSerializationsInfo),
  tableRowSerializationsInfo: () => (tableRowSerializationsInfo),
  tableSerializationsInfo: () => (tableSerializationsInfo),
  tag: () => (metadata_tag),
  target: () => (target),
  targetDeviceDpi: () => (targetDeviceDpi),
  targetValue: () => (targetValue),
  text: () => (metadata_text),
  textAlignment: () => (metadata_textAlignment),
  textAlignmentValues: () => (textAlignmentValues),
  textArea: () => (metadata_textArea),
  textControlScripts: () => (textControlScripts),
  textEditOptions: () => (textEditOptions),
  textFitMode: () => (textFitMode),
  textFormatString: () => (textFormatString),
  textRtf: () => (textRtf),
  textTrimming: () => (textTrimming),
  textTrimmingValues: () => (textTrimmingValues),
  tickmarkCount: () => (tickmarkCount),
  tocLevelDefault: () => (tocLevelDefault),
  tocLevelSerializationsInfo: () => (tocLevelSerializationsInfo),
  tocLevels: () => (tocLevels),
  tocSerializationsInfo: () => (tocSerializationsInfo),
  tocTitle: () => (tocTitle),
  tocTitleSerializationsInfo: () => (tocTitleSerializationsInfo),
  truncatedControlEventsSerializationInfo: () => (truncatedControlEventsSerializationInfo),
  truncatedControlScripts: () => (truncatedControlScripts),
  unknownSerializationsInfo: () => (unknownSerializationsInfo),
  useImageMetadata: () => (useImageMetadata),
  useLandscape: () => (useLandscape),
  usePaperKind: () => (usePaperKind),
  valueMember: () => (valueMember),
  valueRange: () => (valueRange),
  verticalContentSplitting: () => (verticalContentSplitting),
  viewStyle: () => (viewStyle),
  viewTheme: () => (viewTheme),
  viewType: () => (viewType),
  visible: () => (metadata_visible),
  watermarkId: () => (watermarkId),
  watermarkSerializationsInfo: () => (watermarkSerializationsInfo),
  watermarks: () => (watermarks),
  weight: () => (xrTableCell_weight),
  width: () => (xrCrossband_width),
  wordWrap: () => (wordWrap),
  xlsxFormatString: () => (xlsxFormatString),
  xrChartSerializationInfo: () => (xrChartSerializationInfo),
  xrControlSerializationsInfo: () => (xrControlSerializationsInfo),
  xrGaugeSerializationInfo: () => (xrGaugeSerializationInfo),
  zipCodeSerializationInfo: () => (zipCodeSerializationInfo)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-data-metadata.js
var reporting_designer_data_metadata_namespaceObject = {};
__webpack_require__.r(reporting_designer_data_metadata_namespaceObject);
__webpack_require__.d(reporting_designer_data_metadata_namespaceObject, {
  calculatedFieldExpression: () => (calculatedFieldExpression),
  calculatedFieldScripts: () => (calculatedFieldScripts),
  calculatedFieldSerializationInfo: () => (calculatedFieldSerializationInfo),
  collectAvailableParameters: () => (collectAvailableParameters),
  dataBindingBaseSerializationInfo: () => (dataBindingBaseSerializationInfo),
  dataBindingSerializationInfo: () => (dataBindingSerializationInfo),
  dataBindings: () => (dataBindings),
  dynamicListLookUpSettingsInfoBase: () => (dynamicListLookUpSettingsInfoBase),
  editedStaticListLookUpSettingsInfo: () => (editedStaticListLookUpSettingsInfo),
  extendValueSourceSettingsTypes: () => (extendValueSourceSettingsTypes),
  groupLayoutItemInfo: () => (groupLayoutItemInfo),
  labelOrientation: () => (labelOrientation),
  lookUpValueSerializationInfo: () => (lookUpValueSerializationInfo),
  parameterExpressionBindingSerializationsInfo: () => (parameterExpressionBindingSerializationsInfo),
  parameterExpressionBindings: () => (parameterExpressionBindings),
  parameterExpressionSerializationInfo: () => (parameterExpressionSerializationInfo),
  parameterLayoutItemInfo: () => (parameterLayoutItemInfo),
  parameterLookUpSettingsSerializationInfo: () => (parameterLookUpSettingsSerializationInfo),
  parameterNameSerializationInfo: () => (parameterNameSerializationInfo),
  parameterSerializationInfo: () => (parameterSerializationInfo),
  parameterValueSerializationInfo: () => (parameterValueSerializationInfo),
  parameterValueToJsonObject: () => (parameterValueToJsonObject),
  rangeBoundaryParameterInfos: () => (rangeBoundaryParameterInfos),
  rangeEditor: () => (rangeEditor),
  rangeSettingsInfos: () => (rangeSettingsInfos),
  readonlyStaticListLookUpSettingsInfo: () => (readonlyStaticListLookUpSettingsInfo),
  separatorLayoutItemInfo: () => (separatorLayoutItemInfo),
  valueSourceSettingsSerializationInfo: () => (valueSourceSettingsSerializationInfo),
  valueSourceSettingsTypes: () => (valueSourceSettingsTypes)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-pivotGrid-metadata.js
var reporting_designer_controls_pivotGrid_metadata_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_pivotGrid_metadata_namespaceObject);
__webpack_require__.d(reporting_designer_controls_pivotGrid_metadata_namespaceObject, {
  KPIGraphic: () => (KPIGraphic),
  allowedAreas: () => (allowedAreas),
  appearanceInfo: () => (appearanceInfo),
  appearancesInfo: () => (appearancesInfo),
  area: () => (pivotgridfield_area),
  areaIndex: () => (areaIndex),
  areaIndexEditable: () => (areaIndexEditable),
  caption: () => (caption),
  cellFormat: () => (cellFormat),
  columnValueLineCount: () => (columnValueLineCount),
  conditions: () => (conditions),
  customTotalSummaryType: () => (customTotalSummaryType),
  displayFolder: () => (displayFolder),
  emptyCellText: () => (emptyCellText),
  emptyValueText: () => (emptyValueText),
  expandedInFieldsGroup: () => (expandedInFieldsGroup),
  field: () => (field),
  fieldComponentName: () => (fieldComponentName),
  fieldName: () => (fieldName),
  grandTotalCellFormat: () => (grandTotalCellFormat),
  grandTotalText: () => (grandTotalText),
  groupInterval: () => (groupInterval),
  groupIntervalNumericRange: () => (groupIntervalNumericRange),
  index: () => (index),
  minWidth: () => (minWidth),
  options: () => (options),
  pivotGridFieldSerializationsInfo: () => (pivotGridFieldSerializationsInfo),
  pivotGridFieldsSerializable: () => (pivotGridFieldsSerializable),
  popularPropertiesPivotGridField: () => (popularPropertiesPivotGridField),
  rowValueLineCount: () => (rowValueLineCount),
  runningTotal: () => (runningTotal),
  showNewValues: () => (showNewValues),
  sortBySummary: () => (sortBySummary),
  sortBySummaryConditionInfo: () => (sortBySummaryConditionInfo),
  sortBySummaryInfo: () => (sortBySummaryInfo),
  sortMode: () => (sortMode),
  sortOrder: () => (pivotgridfield_sortOrder),
  summaryDisplayType: () => (summaryDisplayType),
  summaryType: () => (summaryType),
  summaryTypeValues: () => (summaryTypeValues),
  topValueCount: () => (topValueCount),
  topValueShowOthers: () => (topValueShowOthers),
  topValueType: () => (topValueType),
  totalCellFormat: () => (totalCellFormat),
  totalValueFormat: () => (totalValueFormat),
  totalsVisibility: () => (totalsVisibility),
  unboundExpression: () => (unboundExpression),
  unboundExpressionMode: () => (unboundExpressionMode),
  unboundFieldName: () => (unboundFieldName),
  unboundType: () => (unboundType),
  useNativeFormat: () => (useNativeFormat),
  valueFormat: () => (valueFormat),
  width: () => (width)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-crossTab-metadata.js
var reporting_designer_controls_crossTab_metadata_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_crossTab_metadata_namespaceObject);
__webpack_require__.d(reporting_designer_controls_crossTab_metadata_namespaceObject, {
  autoSizeMode: () => (autoSizeMode),
  cellserializtionInfo: () => (cellserializtionInfo),
  cellserializtionInfoBase: () => (cellserializtionInfoBase),
  columnAutoWidthMode: () => (columnAutoWidthMode),
  columnDefinitions: () => (columnDefinitions),
  columnFields: () => (columnFields),
  columnIndex: () => (columnIndex),
  columnVisible: () => (columnVisible),
  crossTabCellHeight: () => (crossTabCellHeight),
  crossTabCellOptionsInfo: () => (crossTabCellOptionsInfo),
  crossTabCellWidth: () => (crossTabCellWidth),
  crossTabColumnDefinitionInfo: () => (crossTabColumnDefinitionInfo),
  crossTabDataFieldInfo: () => (crossTabDataFieldInfo),
  crossTabDataFieldInfoBase: () => (crossTabDataFieldInfoBase),
  crossTabFieldName: () => (crossTabFieldName),
  crossTabGroupFieldInfo: () => (crossTabGroupFieldInfo),
  crossTabGroupFieldInfoBase: () => (crossTabGroupFieldInfoBase),
  crossTabGroupInterval: () => (crossTabGroupInterval),
  crossTabGroupIntervalNumericRange: () => (crossTabGroupIntervalNumericRange),
  crossTabLayoutOptions: () => (crossTabLayoutOptions),
  crossTabLayoutOptionsInfo: () => (crossTabLayoutOptionsInfo),
  crossTabPrintOptions: () => (crossTabPrintOptions),
  crossTabPrintOptionsInfo: () => (crossTabPrintOptionsInfo),
  crossTabRowDefinitionInfo: () => (crossTabRowDefinitionInfo),
  crossTabSortBySummaryInfo: () => (crossTabSortBySummaryInfo),
  crossTabSummaryType: () => (crossTabSummaryType),
  dataFields: () => (dataFields),
  popularPropertiesCrossTabCell: () => (popularPropertiesCrossTabCell),
  rowAutoHeightMode: () => (rowAutoHeightMode),
  rowDefinitions: () => (rowDefinitions),
  rowFields: () => (rowFields),
  rowIndex: () => (rowIndex),
  rowVisible: () => (rowVisible),
  sortOrderdefaultValAscending: () => (sortOrderdefaultValAscending)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer.js
var reporting_designer_namespaceObject = {};
__webpack_require__.r(reporting_designer_namespaceObject);
__webpack_require__.d(reporting_designer_namespaceObject, {
  DxReportDesigner: () => (DxReportDesigner),
  JSReportDesigner: () => (JSReportDesigner),
  JSReportDesignerBinding: () => (JSReportDesignerBinding),
  ReportDesignerContext: () => (ReportDesignerContext),
  ReportParameterHelper: () => (ReportParameterHelper),
  ReportStorageWeb: () => (ReportStorageWeb)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-actions.js
var reporting_designer_actions_namespaceObject = {};
__webpack_require__.r(reporting_designer_actions_namespaceObject);
__webpack_require__.d(reporting_designer_actions_namespaceObject, {
  ActionId: () => (actionId_ActionId),
  ChartActions: () => (ChartActions),
  CrossTabActions: () => (CrossTabActions),
  ElementActions: () => (ElementActions),
  ElementsGroupActions: () => (ElementsGroupActions),
  FitBoundsToTextAction: () => (FitBoundsToTextAction),
  FitTextToBoundsAction: () => (FitTextToBoundsAction),
  FitToContainerAction: () => (FitToContainerAction),
  PdfContentActions: () => (PdfContentActions),
  PivotGridActions: () => (PivotGridActions),
  ReportActions: () => (ReportActions),
  ReportElementActions: () => (ReportElementActions),
  TableCellActions: () => (TableCellActions),
  TableCellGroupActions: () => (TableCellGroupActions),
  TableRowActions: () => (TableRowActions),
  TextElementAction: () => (TextElementAction)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-bands-internal.js
var reporting_designer_bands_internal_namespaceObject = {};
__webpack_require__.r(reporting_designer_bands_internal_namespaceObject);
__webpack_require__.d(reporting_designer_bands_internal_namespaceObject, {
  BandsHolder: () => (BandsHolder),
  PrintAcrossBandsPlaceHolder: () => (PrintAcrossBandsPlaceHolder),
  VerticalBandsContainerSurface: () => (VerticalBandsContainerSurface),
  _getUnitAbsoluteRect: () => (_getUnitAbsoluteRect),
  addBandToContainer: () => (addBandToContainer),
  generateArray: () => (generateArray),
  getLevelCount: () => (getLevelCount),
  initLevels: () => (initLevels),
  insertBand: () => (insertBand),
  markerHeight: () => (markerHeight),
  setMarkerWidth: () => (setMarkerWidth),
  sortBands: () => (sortBands)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-bands.js
var reporting_designer_bands_namespaceObject = {};
__webpack_require__.r(reporting_designer_bands_namespaceObject);
__webpack_require__.d(reporting_designer_bands_namespaceObject, {
  BandSurface: () => (BandSurface),
  BandViewModel: () => (BandViewModel),
  BottomMarginBand: () => (BottomMarginBand),
  BottomMarginSurface: () => (BottomMarginSurface),
  DetailBand: () => (DetailBand),
  DetailBandSurface: () => (DetailBandSurface),
  DetailReportBand: () => (DetailReportBand),
  DetailReportBandSurface: () => (DetailReportBandSurface),
  GroupFieldModel: () => (GroupFieldModel),
  GroupHeaderBand: () => (GroupHeaderBand),
  MultiColumn: () => (MultiColumn),
  MultiColumnSurface: () => (MultiColumnSurface),
  PageFooterSurface: () => (PageFooterSurface),
  SubBandSurface: () => (SubBandSurface),
  SubBandViewModel: () => (SubBandViewModel),
  TopMarginBand: () => (TopMarginBand),
  VerticalBandSurface: () => (VerticalBandSurface),
  VerticalBandViewModel: () => (VerticalBandViewModel),
  VerticalDetailBandViewModel: () => (VerticalDetailBandViewModel),
  bandSurfaceCollapsedHeight: () => (bandSurfaceCollapsedHeight),
  multiColumnSerializationsInfo: () => (multiColumnSerializationsInfo)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-pivotGrid.js
var reporting_designer_controls_pivotGrid_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_pivotGrid_namespaceObject);
__webpack_require__.d(reporting_designer_controls_pivotGrid_namespaceObject, {
  PivotGridFieldSurface: () => (PivotGridFieldSurface),
  PivotGridFieldViewModel: () => (PivotGridFieldViewModel),
  SortBySummaryInfo: () => (SortBySummaryInfo),
  SortBySummaryInfoCondition: () => (SortBySummaryInfoCondition)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-crossTab.js
var reporting_designer_controls_crossTab_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_crossTab_namespaceObject);
__webpack_require__.d(reporting_designer_controls_crossTab_namespaceObject, {
  CellCreator: () => (CellCreator),
  CellKind: () => (CellKind),
  CellMatrixHelper: () => (CellMatrixHelper),
  CornerHeaderDisplayMode: () => (CornerHeaderDisplayMode),
  CrossTabCellInfo: () => (CrossTabCellInfo),
  CrossTabColumnDefinitionsModel: () => (CrossTabColumnDefinitionsModel),
  CrossTabDefinitionsModel: () => (CrossTabDefinitionsModel),
  CrossTabRowDefinitionsModel: () => (CrossTabRowDefinitionsModel),
  DataFieldLayout: () => (DataFieldLayout),
  DefenitionUpdater: () => (DefenitionUpdater),
  HorizontalCreator: () => (HorizontalCreator),
  TotalHeaderPosition: () => (TotalHeaderPosition),
  TotalsPosition: () => (TotalsPosition),
  VerticalCreator: () => (VerticalCreator),
  findcells: () => (findcells)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-data.js
var reporting_designer_data_namespaceObject = {};
__webpack_require__.r(reporting_designer_data_namespaceObject);
__webpack_require__.d(reporting_designer_data_namespaceObject, {
  CalculatedField: () => (CalculatedField),
  DataBinding: () => (DataBinding),
  DataBindingBase: () => (DataBindingBase),
  DataFederationDataSource: () => (DataFederationDataSource),
  DynamicListLookUpSettings: () => (DynamicListLookUpSettings),
  GroupLayoutItem: () => (GroupLayoutItem),
  LookUpSettings: () => (LookUpSettings),
  LookUpValue: () => (LookUpValue),
  ObjectItem: () => (ObjectItem),
  ObjectStorageItem: () => (ObjectStorageItem),
  ObjectStorageParameter: () => (ObjectStorageParameter),
  ObjectsStorage: () => (ObjectsStorage),
  Parameter: () => (Parameter),
  ParameterExpressionAddOn: () => (ParameterExpressionAddOn),
  ParameterExpressionBinding: () => (ParameterExpressionBinding),
  ParameterLayoutItem: () => (ParameterLayoutItem),
  ParameterPanelLayoutItem: () => (ParameterPanelLayoutItem),
  ParameterPanelMapper: () => (ParameterPanelMapper),
  ParameterTypesHelper: () => (ParameterTypesHelper),
  PropertyExpressionMapper: () => (PropertyExpressionMapper),
  RangeBoundaryParameter: () => (RangeBoundaryParameter),
  RangeEndParameter: () => (RangeEndParameter),
  RangeParametersSettings: () => (RangeParametersSettings),
  RangeStartParameter: () => (RangeStartParameter),
  SeparatorLayoutItem: () => (SeparatorLayoutItem),
  SerializableDataFederationDataSource: () => (SerializableDataFederationDataSource),
  StaticListLookUpSettings: () => (StaticListLookUpSettings),
  TableInfoCollectionItem: () => (TableInfoCollectionItem),
  UniversalDataSource: () => (UniversalDataSource),
  ValueSourceSettingsHelper: () => (ValueSourceSettingsHelper),
  createExpressionProperty: () => (createExpressionProperty),
  createNewObjectItem: () => (createNewObjectItem),
  parameterSeparator: () => (parameterSeparator),
  parameterTypeValues: () => (parameterTypeValues)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-internal.js
var reporting_designer_internal_namespaceObject = {};
__webpack_require__.r(reporting_designer_internal_namespaceObject);
__webpack_require__.d(reporting_designer_internal_namespaceObject, {
  AlignmentHandler: () => (AlignmentHandler),
  AvailableFieldsTreeListController: () => (AvailableFieldsTreeListController),
  BandLevelEditor: () => (BandLevelEditor),
  BaseConverter: () => (BaseConverter),
  CONVERSION_COEEFICIENT: () => (CONVERSION_COEEFICIENT),
  CalculatedFieldsSource: () => (CalculatedFieldsSource),
  CharacterCombHelper: () => (CharacterCombHelper),
  ChartFieldListExtender: () => (ChartFieldListExtender),
  ChartLocalizationProvider: () => (ChartLocalizationProvider),
  CommonRequestModel: () => (CommonRequestModel),
  ControlConverterService: () => (ControlConverterService),
  ControlScrollingTool: () => (ControlScrollingTool),
  CoordinateGridViewModel: () => (CoordinateGridViewModel),
  CreateQueryIterator: () => (CreateQueryIterator),
  CrossTabColumnFieldInfo: () => (CrossTabColumnFieldInfo),
  CrossTabConverter: () => (CrossTabConverter),
  CrossTabDataFieldInfo: () => (CrossTabDataFieldInfo),
  CrossTabFieldInfoBase: () => (CrossTabFieldInfoBase),
  CrossTabGroupFieldInfo: () => (CrossTabGroupFieldInfo),
  CrossTabRowFieldInfo: () => (CrossTabRowFieldInfo),
  CrossTabWizardDragDropHandler: () => (CrossTabWizardDragDropHandler),
  CrossTabWizardFieldListController: () => (CrossTabWizardFieldListController),
  CustomControlSerializableModel: () => (CustomControlSerializableModel),
  CustomMergingEngine: () => (CustomMergingEngine),
  DataBindingMode: () => (_dataBindingMode_DataBindingMode),
  DataFilterModelReport: () => (DataFilterModelReport),
  DataMemberCustomCheckedTreeNode: () => (DataMemberCustomCheckedTreeNode),
  DataSourceActions: () => (DataSourceActions),
  DataSourceEditorBase: () => (DataSourceEditorBase),
  DataSourceHelper: () => (DataSourceHelper),
  DataSourceItemsExtender: () => (DataSourceItemsExtender),
  DataSourceWizardHelper: () => (DataSourceWizardHelper),
  DefaultCrossTabControlEnum: () => (DefaultCrossTabControlEnum),
  DefaultLocalizationProvider: () => (DefaultLocalizationProvider),
  DesignControlsHelper: () => (DesignControlsHelper),
  DesignerEditorAddOn: () => (DesignerEditorAddOn),
  DesignerErrorProvider: () => (DesignerErrorProvider),
  DisplayNameProvider: () => (DisplayNameProvider),
  ErrorPanelViewModel: () => (ErrorPanelViewModel),
  ErrorSource: () => (ErrorSource),
  ErrorType: () => (ErrorType),
  ExpressionEditorAddOn: () => (ExpressionEditorAddOn),
  ExpressionWrapper: () => (ExpressionWrapper),
  ExpressionableFontModel: () => (ExpressionableFontModel),
  FederationDataSourceEditor: () => (FederationDataSourceEditor),
  FieldInfo: () => (FieldInfo),
  FieldListController: () => (FieldListController),
  FieldListDataSourcesHelper: () => (FieldListDataSourcesHelper),
  FieldListDragDropHandler: () => (FieldListDragDropHandler),
  FieldListDragDropHelper: () => (FieldListDragDropHelper),
  FieldListItemFactory: () => (FieldListItemFactory),
  FormatStringService: () => (FormatStringService),
  JsonDataSourceEditor: () => (JsonDataSourceEditor),
  JsonEditSchemaIterator: () => (JsonEditSchemaIterator),
  LanguageHelper: () => (LanguageHelper),
  LegacyReportRequestModel: () => (LegacyReportRequestModel),
  ListViewModel: () => (ListViewModel),
  LocalizationDictionary: () => (LocalizationDictionary),
  LocalizationEditor: () => (LocalizationEditor),
  LocalizationInfo: () => (LocalizationInfo),
  LocalizationItem: () => (LocalizationItem),
  LocalizedProperty: () => (LocalizedProperty),
  LocaliziblePropertiesAccessibilityProvider: () => (LocaliziblePropertiesAccessibilityProvider),
  MasterDetailFieldInfo: () => (MasterDetailFieldInfo),
  MasterDetailInfoBase: () => (MasterDetailInfoBase),
  MasterDetailQueryInfo: () => (MasterDetailQueryInfo),
  MasterDetailRequestModel: () => (MasterDetailRequestModel),
  MasterDetailTreeListController: () => (MasterDetailTreeListController),
  ObjectDataSourceEditParametersIterator: () => (ObjectDataSourceEditParametersIterator),
  ObjectDataSourceEditor: () => (ObjectDataSourceEditor),
  ObjectExplorerDragDropHandler: () => (ObjectExplorerDragDropHandler),
  ObjectExplorerDragDropHelper: () => (ObjectExplorerDragDropHelper),
  PageSetupHelper: () => (PageSetupHelper),
  ParameterLayoutDragDropHandler: () => (ParameterLayoutDragDropHandler),
  ParametersLayoutItemsProvider: () => (ParametersLayoutItemsProvider),
  ParametersLayoutTreeListController: () => (ParametersLayoutTreeListController),
  ParametersViewModel: () => (ParametersViewModel),
  PivotGridConverter: () => (PivotGridConverter),
  PromptBoolean: () => (PromptBoolean),
  QBRequestWrapper: () => (QBRequestWrapper),
  RenameDataSourceStrategy: () => (RenameDataSourceStrategy),
  ReportCompleter: () => (ReportCompleter),
  ReportControlsDragDropHelper: () => (ReportControlsDragDropHelper),
  ReportConverter: () => (ReportConverter),
  ReportDataSourceService: () => (ReportDataSourceService),
  ReportDesignerControlsHelper: () => (ReportDesignerControlsHelper),
  ReportDesignerInitializer: () => (ReportDesignerInitializer),
  ReportDesignerTreelistItem: () => (ReportDesignerTreelistItem),
  ReportDialogSettings: () => (ReportDialogSettings),
  ReportDummyCreator: () => (ReportDummyCreator),
  ReportExplorerDragDropHandler: () => (ReportExplorerDragDropHandler),
  ReportExplorerModel: () => (ReportExplorerModel),
  ReportItemsProvider: () => (ReportItemsProvider),
  ReportLocalizationEngine: () => (ReportLocalizationEngine),
  ReportLocalizationProvider: () => (ReportLocalizationProvider),
  ReportMenuSettings: () => (ReportMenuSettings),
  ReportModelSerializer: () => (ReportModelSerializer),
  ReportPreviewService: () => (ReportPreviewService),
  ReportRenderingService: () => (ReportRenderingService),
  ReportScriptService: () => (ReportScriptService),
  ReportSnapLinesCollector: () => (ReportSnapLinesCollector),
  ReportToolboxDragDropHandler: () => (ReportToolboxDragDropHandler),
  ReportWizardService: () => (ReportWizardService),
  ReportWizardStateHelper: () => (ReportWizardStateHelper),
  RulerViewModel: () => (RulerViewModel),
  RuntimeErrorProvider: () => (RuntimeErrorProvider),
  ScriptsEditor: () => (ScriptsEditor),
  SelectionDragDropHandler: () => (SelectionDragDropHandler),
  SpaceCommandHandler: () => (SpaceCommandHandler),
  SqlDataSourceEditor: () => (SqlDataSourceEditor),
  StringId: () => (StringId),
  StylesHelper: () => (StylesHelper),
  SummaryInfo: () => (SummaryInfo),
  SummaryInfoFieldlist: () => (SummaryInfoFieldlist),
  SummaryOptionsWrapper: () => (SummaryOptionsWrapper),
  TableActionDirection: () => (TableActionDirection),
  TableCalculationProvider: () => (TableCalculationProvider),
  TableComponentSurface: () => (TableComponentSurface),
  TableOfContentLocalizationProvider: () => (TableOfContentLocalizationProvider),
  TextElementSizeHelper: () => (TextElementSizeHelper),
  TodoControlSurface: () => (TodoControlSurface),
  TranslateHelper: () => (TranslateHelper),
  UnknownViewModel: () => (UnknownViewModel),
  ValueEditorAddOn: () => (ValueEditorAddOn),
  WizardRunner: () => (WizardRunner),
  WizardsInitializerSettings: () => (WizardsInitializerSettings),
  WrappedExpressionOptions: () => (WrappedExpressionOptions),
  __createLocalizationProperties: () => (__createLocalizationProperties),
  _checkBandsType: () => (_checkBandsType),
  _createReportWizard: () => (_reportWizardCreating_createReportWizard),
  _masterDetailScrollViewHeight: () => (_masterDetailScrollViewHeight),
  _masterDetailWizardHeight: () => (_masterDetailWizardHeight),
  _masterDetailWizardWidth: () => (_masterDetailWizardWidth),
  addDataSourceToReport: () => (addDataSourceToReport),
  addVariablesToExpressionEditor: () => (addVariablesToExpressionEditor),
  assignBinding: () => (assignBinding),
  convertFontToDXFont: () => (convertFontToDXFont),
  correctModel: () => (correctModel),
  createChartDesignerOptions: () => (createChartDesignerOptions),
  createExpressionEditorAction: () => (createExpressionEditorAction),
  createIDataMemberInfoByName: () => (createIDataMemberInfoByName),
  createObjectFromInfo: () => (createObjectFromInfo),
  createPaddingProperty: () => (createPaddingProperty),
  createPictureBox: () => (createPictureBox),
  createPopularBindingInfo: () => (createPopularBindingInfo),
  createPopularBindingInfos: () => (createPopularBindingInfos),
  createReportDesigner: () => (createReportDesigner),
  createReportDesignerFromModel: () => (createReportDesignerFromModel),
  createReportViewModel: () => (createReportViewModel),
  createSimpleControl: () => (createSimpleControl),
  createSinglePopularBindingInfos: () => (createSinglePopularBindingInfos),
  dragDropComponentAdded: () => (dragDropComponentAdded),
  dxEventDropDownEditor: () => (dxEventDropDownEditor),
  eventArgsTypes: () => (eventArgsTypes),
  expressionEditorActionId: () => (expressionEditorActionId),
  findFirstParentWithPropertyName: () => (findFirstParentWithPropertyName),
  getClosestDataMember: () => (getClosestDataMember),
  getExistTableOfContents: () => (getExistTableOfContents),
  getExpressionPath: () => (getExpressionPath),
  getFirstSurfaceParentByType: () => (getFirstSurfaceParentByType),
  getFormattedValueInUnits: () => (getFormattedValueInUnits),
  getUnitProperties: () => (getUnitProperties),
  getUsefulReportWidth: () => (getUsefulReportWidth),
  includeNonListItem: () => (includeNonListItem),
  initializeLabelReportWizardPromise: () => (initializeLabelReportWizardPromise),
  isBand: () => (isBand),
  isControl: () => (isControl),
  isHeaderOrFooterBandType: () => (isHeaderOrFooterBandType),
  isList: () => (isList),
  isNotParameter: () => (isNotParameter),
  isVerticalBand: () => (isVerticalBand),
  labelReportWizardPromise: () => (labelReportWizardPromise),
  limitation: () => (limitation),
  listMemberControlsMap: () => (listMemberControlsMap),
  maxNestingLevelUpdate: () => (maxNestingLevelUpdate),
  memberControlsMap: () => (memberControlsMap),
  overrideFullscreenDataSourceWizardPageMetadata: () => (overrideFullscreenDataSourceWizardPageMetadata),
  overrideJsonDataSourceWizardPage: () => (overrideJsonDataSourceWizardPage),
  overrideSqlDataSourceWizardPage: () => (overrideSqlDataSourceWizardPage),
  patchFont: () => (patchFont),
  patchFontInLocalizationItem: () => (patchFontInLocalizationItem),
  patchMargins: () => (patchMargins),
  patchRequest: () => (patchRequest),
  patchSubreport: () => (patchSubreport),
  recalculateUnit: () => (recalculateUnit),
  registerControls: () => (_registerControls_registerControls),
  registerCustomControls: () => (registerCustomControls),
  registerCustomGlobalExpressions: () => (registerCustomGlobalExpressions),
  registerCustomReportExpressions: () => (registerCustomReportExpressions),
  removeDataSourceFromReport: () => (removeDataSourceFromReport),
  reportCopyPasteStrategy: () => (reportCopyPasteStrategy),
  reportStorageWebIsRegister: () => (reportStorageWebIsRegister),
  searchInLocalizationArray: () => (searchInLocalizationArray),
  selectTreeListItem: () => (selectTreeListItem),
  stylesProperties: () => (stylesProperties),
  subreportControlCollector: () => (subreportControlCollector),
  updateDataSourceRefs: () => (updateDataSourceRefs),
  updateSurfaceContentSizeLocalizationMode: () => (updateSurfaceContentSizeLocalizationMode),
  valuesArrayAsEnumWithLocalizationId: () => (valuesArrayAsEnumWithLocalizationId)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-internal-htmlMarkUp.js
var reporting_designer_internal_htmlMarkUp_namespaceObject = {};
__webpack_require__.r(reporting_designer_internal_htmlMarkUp_namespaceObject);
__webpack_require__.d(reporting_designer_internal_htmlMarkUp_namespaceObject, {
  ValueConverter: () => (ValueConverter)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-localization.js
var reporting_designer_localization_namespaceObject = {};
__webpack_require__.r(reporting_designer_localization_namespaceObject);
__webpack_require__.d(reporting_designer_localization_namespaceObject, {
  _translationFactory: () => (_translationFactory),
  registerTranslationService: () => (registerTranslationService),
  unregisterTranslationService: () => (unregisterTranslationService)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-tools.js
var reporting_designer_tools_namespaceObject = {};
__webpack_require__.r(reporting_designer_tools_namespaceObject);
__webpack_require__.d(reporting_designer_tools_namespaceObject, {
  AddParameterDialog: () => (AddParameterDialog),
  EditParametersDialog: () => (EditParametersDialog),
  ExpressionSmartTag: () => (ExpressionSmartTag),
  NavigateByReports: () => (NavigateByReports),
  NavigateTab: () => (NavigateTab),
  OpenReportDialog: () => (OpenReportDialog),
  OpenReportDialogModelBase: () => (OpenReportDialogModelBase),
  ParametersDialogBase: () => (ParametersDialogBase),
  ReportDialogBase: () => (ReportDialogBase),
  SaveAsReportDialog: () => (SaveAsReportDialog),
  SaveAsReportDialogModelBase: () => (SaveAsReportDialogModelBase),
  SaveReportDialog: () => (SaveReportDialog),
  SaveReportDialogModelBase: () => (SaveReportDialogModelBase),
  SmartTagModel: () => (SmartTagModel),
  TasksSmartTag: () => (TasksSmartTag)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-utils.js
var reporting_designer_utils_namespaceObject = {};
__webpack_require__.r(reporting_designer_utils_namespaceObject);
__webpack_require__.d(reporting_designer_utils_namespaceObject, {
  Base64ImageParser: () => (Base64ImageParser),
  DataBindingMode: () => (DataBindingMode),
  DefaultCrossTabControl: () => (DefaultCrossTabControl),
  HandlerUri: () => (settings_HandlerUri),
  PaperKind: () => (PaperKind),
  ReportDesignerAddOns: () => (ReportDesignerAddOns),
  ReportDesignerElements: () => (ReportDesignerElements),
  ReportWizardSettings: () => (ReportWizardSettings),
  SearchBoxVisibilityMode: () => (SearchBoxVisibilityMode),
  _isMarginBand: () => (_isMarginBand),
  _isPageBand: () => (_isPageBand),
  _isReorderBand: () => (_isReorderBand),
  availableFonts: () => (availableFonts),
  base64UTF16LEtobase64UTF8: () => (base64UTF16LEtobase64UTF8),
  controlsFactory: () => (controlsFactory),
  defaultParameterEditingSettings: () => (defaultParameterEditingSettings),
  formatStringEditorCustomSet: () => (formatStringEditorCustomSet),
  smartTagFactory: () => (settings_smartTagFactory)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-settings.js
var reporting_designer_settings_namespaceObject = {};
__webpack_require__.r(reporting_designer_settings_namespaceObject);
__webpack_require__.d(reporting_designer_settings_namespaceObject, {
  ContextMenusEnabled: () => (ContextMenusEnabled),
  PropertyGrid: () => (PropertyGrid),
  SmartTagsEnabled: () => (SmartTagsEnabled)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-widgets.js
var reporting_designer_widgets_namespaceObject = {};
__webpack_require__.r(reporting_designer_widgets_namespaceObject);
__webpack_require__.d(reporting_designer_widgets_namespaceObject, {
  BandEditorBase: () => (BandEditorBase),
  BandsEditor: () => (BandsEditor),
  ChartValueBindingEditor: () => (ChartValueBindingEditor),
  ComboboxUndoEditor: () => (ComboboxUndoEditor),
  ContentByTypeEditor: () => (ContentByTypeEditor),
  DataBindingEditor: () => (DataBindingEditor),
  DataBindingsEditor: () => (DataBindingsEditor),
  DataSourceEditor: () => (DataSourceEditor),
  DataSourceSelectBox: () => (DataSourceSelectBox),
  DrillDownEditor: () => (DrillDownEditor),
  EditOptionsEditorNameEditorModel: () => (EditOptionsEditorNameEditorModel),
  ExplorerEditor: () => (ExplorerEditor),
  ExpressionableFontEditor: () => (ExpressionableFontEditor),
  FieldsComboboxEditor: () => (FieldsComboboxEditor),
  FontEditorUndo: () => (FontEditorUndo),
  FormatStringEditor: () => (FormatStringEditor),
  FormattingRuleEditor: () => (FormattingRuleEditor),
  GaugeStyleEditor: () => (GaugeStyleEditor),
  LinesEditor: () => (LinesEditor),
  NameEditor: () => (NameEditor),
  PageBreakBandEditor: () => (PageBreakBandEditor),
  PivotGridCriteriaEditor: () => (PivotGridCriteriaEditor),
  ReportComplexExpressionEditor: () => (ReportComplexExpressionEditor),
  ReportExpressionEditor: () => (ReportExpressionEditor),
  ReportExpressionEditorAdapter: () => (ReportExpressionEditorAdapter),
  ReportExpressionEditorWrapper: () => (ReportExpressionEditorWrapper),
  ReportFieldListEditor: () => (ReportFieldListEditor),
  ReportUrlEditor: () => (ReportUrlEditor),
  RunningBandEditor: () => (RunningBandEditor),
  SortingBandEditor: () => (SortingBandEditor),
  StylesEditorHeaderModel: () => (StylesEditorHeaderModel),
  SummaryEditor: () => (SummaryEditor),
  WatermarkIdEditor: () => (WatermarkIdEditor),
  dataBindingsSerializationInfo: () => (dataBindingsSerializationInfo),
  designerEditorTemplates: () => (designerEditorTemplates),
  dxImageSourceEditor: () => (dxImageSourceEditor),
  dxRichTextFileEditor: () => (dxRichTextFileEditor),
  groups: () => (groups),
  reportFunctionDisplay: () => (reportFunctionDisplay)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-widgets-internal.js
var reporting_designer_widgets_internal_namespaceObject = {};
__webpack_require__.r(reporting_designer_widgets_internal_namespaceObject);
__webpack_require__.d(reporting_designer_widgets_internal_namespaceObject, {
  SummaryEditorModel: () => (SummaryEditorModel),
  SummaryEditorPopup: () => (SummaryEditorPopup)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-wizard.js
var reporting_designer_wizard_namespaceObject = {};
__webpack_require__.r(reporting_designer_wizard_namespaceObject);
__webpack_require__.d(reporting_designer_wizard_namespaceObject, {
  AddGroupFieldsPage: () => (AddGroupFieldsPage),
  AddGroupingLevelPage: () => (AddGroupingLevelPage),
  AddSummaryFieldsPage: () => (AddSummaryFieldsPage),
  ChooseAvailableDataSourcePage: () => (ChooseAvailableDataSourcePage),
  ChooseDataSourceTypePage: () => (ChooseDataSourceTypePage),
  ChooseJsonSchemaPage: () => (ChooseJsonSchemaPage),
  ChooseReportColorSchemePage: () => (ChooseReportColorSchemePage),
  ChooseSummaryOptionsPage: () => (ChooseSummaryOptionsPage),
  ColorScheme: () => (ColorScheme),
  ConfigureCrossTabPage: () => (ConfigureCrossTabPage),
  ConfigureMasterDetailRelationshipsPage: () => (ConfigureMasterDetailRelationshipsPage),
  ConfigurePageSettingsPage: () => (ConfigurePageSettingsPage),
  ConfigureReportPageSettingsPage: () => (ConfigureReportPageSettingsPage),
  CustomColorScheme: () => (CustomColorScheme),
  CustomizeLabelPage: () => (CustomizeLabelPage),
  DefineCrossTabPage: () => (DefineCrossTabPage),
  DefineReportLayoutPage: () => (DefineReportLayoutPage),
  FullscreenReportWizard: () => (FullscreenReportWizard),
  FullscreenReportWizardPageId: () => (FullscreenReportWizardPageId),
  FullscreenReportWizardPageIterator: () => (FullscreenReportWizardPageIterator),
  FullscreenReportWizardSectionId: () => (FullscreenReportWizardSectionId),
  GraphicsUnit: () => (GraphicsUnit),
  LayoutTypeItem: () => (LayoutTypeItem),
  LegacyAddGroupingLevelPage: () => (LegacyAddGroupingLevelPage),
  LegacyChooseDataMemberPage: () => (LegacyChooseDataMemberPage),
  LegacyChooseReportLayoutPage: () => (LegacyChooseReportLayoutPage),
  LegacyChooseReportStylePage: () => (LegacyChooseReportStylePage),
  LegacyChooseSummaryOptionsPage: () => (LegacyChooseSummaryOptionsPage),
  LegacyReportWizard: () => (LegacyReportWizard),
  LegacyReportWizardPageId: () => (LegacyReportWizardPageId),
  LegacyReportWizardPageIterator: () => (LegacyReportWizardPageIterator),
  LegacySelectColumnsPage: () => (LegacySelectColumnsPage),
  MultiQueryConfigurePage: () => (MultiQueryConfigurePage),
  MultiQueryConfigureParametersPage: () => (MultiQueryConfigureParametersPage),
  PageOrientation: () => (PageOrientation),
  PageOrientationItem: () => (PageOrientationItem),
  PivotSummaryType: () => (PivotSummaryType),
  PreviewPageHelper: () => (PreviewPageHelper),
  ReportLayout: () => (ReportLayout),
  ReportStyle: () => (ReportStyle),
  ReportStyleItem: () => (ReportStyleItem),
  ReportType: () => (ReportType),
  ReportWizard: () => (ReportWizard),
  ReportWizardPageId: () => (ReportWizardPageId),
  ReportWizardPageIterator: () => (ReportWizardPageIterator),
  SelectCrossTabDataMember: () => (SelectCrossTabDataMember),
  SelectDataMembersPage: () => (SelectDataMembersPage),
  SelectDataSourcePage: () => (SelectDataSourcePage),
  SelectLabelTypePage: () => (SelectLabelTypePage),
  SelectReportTypePage: () => (SelectReportTypePage),
  SetReportTitlePage: () => (SetReportTitlePage),
  SpecifyFederationDataSourceSettingsPage: () => (SpecifyFederationDataSourceSettingsPage),
  SpecifyJsonDataSourceSettingsPage: () => (SpecifyJsonDataSourceSettingsPage),
  SpecifyLabelSettingsPage: () => (SpecifyLabelSettingsPage),
  SpecifyObjectDataSourceSettingsPage: () => (SpecifyObjectDataSourceSettingsPage),
  SpecifyPageSettingsPage: () => (SpecifyPageSettingsPage),
  SpecifyReportTitlePage: () => (SpecifyReportTitlePage),
  SpecifySqlDataSourceSettingsPage: () => (SpecifySqlDataSourceSettingsPage),
  _GroupField: () => (_GroupField),
  _GroupsFieldStore: () => (_GroupsFieldStore),
  _ReportWizardOptions: () => (_ReportWizardOptions),
  _applyColorSchemeState: () => (_applyColorSchemeState),
  _applyPageSetting: () => (_applyPageSetting),
  _convertToStateDataSource: () => (_convertToStateDataSource),
  _createFullscreenReportWizard: () => (_createFullscreenReportWizard),
  _createLegacyReportWizard: () => (_createLegacyReportWizard),
  _createReportWizard: () => (_createReportWizard),
  _fillTreeQueries: () => (_fillTreeQueries),
  _registerAddGroupFieldsPage: () => (_registerAddGroupFieldsPage),
  _registerAddGroupingLevelPage: () => (_registerAddGroupingLevelPage),
  _registerAddSummaryFieldsPage: () => (_registerAddSummaryFieldsPage),
  _registerChooseAvailableDataSourcePage: () => (_registerChooseAvailableDataSourcePage),
  _registerChooseDataSourceTypePage: () => (_registerChooseDataSourceTypePage),
  _registerChooseJsonSchemaPage: () => (_registerChooseJsonSchemaPage),
  _registerChooseReportColorSchemePage: () => (_registerChooseReportColorSchemePage),
  _registerChooseSummaryOptionsPage: () => (_registerChooseSummaryOptionsPage),
  _registerCommonReportWizardPages: () => (_registerCommonReportWizardPages),
  _registerConfigureCrossTabPage: () => (_registerConfigureCrossTabPage),
  _registerConfigureMasterDetailRelationshipsPage: () => (_registerConfigureMasterDetailRelationshipsPage),
  _registerConfigureReportPageSettingsPage: () => (_registerConfigureReportPageSettingsPage),
  _registerConfigureReportPageSettingsSection: () => (_registerConfigureReportPageSettingsSection),
  _registerCustomizeLabelPage: () => (_registerCustomizeLabelPage),
  _registerDefineCrossTabPage: () => (_registerDefineCrossTabPage),
  _registerDefineReportLayoutPage: () => (_registerDefineReportLayoutPage),
  _registerFullscreenReportWizardPages: () => (_registerFullscreenReportWizardPages),
  _registerLegacyAddGroupingLevelPage: () => (_registerLegacyAddGroupingLevelPage),
  _registerLegacyChooseDataMemberPage: () => (_registerLegacyChooseDataMemberPage),
  _registerLegacyChooseReportLayoutPage: () => (_registerLegacyChooseReportLayoutPage),
  _registerLegacyChooseReportStylePage: () => (_registerLegacyChooseReportStylePage),
  _registerLegacyChooseSummaryOptionsPage: () => (_registerLegacyChooseSummaryOptionsPage),
  _registerLegacySelectColumnsPage: () => (_registerLegacySelectColumnsPage),
  _registerMultiQueryConfigurePage: () => (_registerMultiQueryConfigurePage),
  _registerMultiQueryConfigureParametersPage: () => (_registerMultiQueryConfigureParametersPage),
  _registerReportWizardPages: () => (_registerReportWizardPages),
  _registerSelectDataMembersPage: () => (_registerSelectDataMembersPage),
  _registerSelectDataSourcePage: () => (_registerSelectDataSourcePage),
  _registerSelectLabelTypePage: () => (_registerSelectLabelTypePage),
  _registerSelectReportTypePage: () => (_registerSelectReportTypePage),
  _registerSelectSingleDataMemberPage: () => (_registerSelectSingleDataMemberPage),
  _registerSetReportTitlePage: () => (_registerSetReportTitlePage),
  _registerSpecifyFederationDataSourceSettingsPage: () => (_registerSpecifyFederationDataSourceSettingsPage),
  _registerSpecifyJsonDataSourceSettingsPage: () => (_registerSpecifyJsonDataSourceSettingsPage),
  _registerSpecifyLabelSettingsPage: () => (_registerSpecifyLabelSettingsPage),
  _registerSpecifyObjectDataSourceSettingsPage: () => (_registerSpecifyObjectDataSourceSettingsPage),
  _registerSpecifyPageSettingsPage: () => (_registerSpecifyPageSettingsPage),
  _registerSpecifyReportTitlePage: () => (_registerSpecifyReportTitlePage),
  _registerSpecifySqlDataSourceSettingsPage: () => (_registerSpecifySqlDataSourceSettingsPage),
  _restoreDataSourceFromState: () => (_restoreDataSourceFromState),
  createReportWizardState: () => (createReportWizardState),
  defaultPageSetupState: () => (defaultPageSetupState),
  defaultReportWizardState: () => (defaultReportWizardState)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-richEdit.js
var reporting_designer_controls_richEdit_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_richEdit_namespaceObject);
__webpack_require__.d(reporting_designer_controls_richEdit_namespaceObject, {
  ToolbarActionId: () => (ToolbarActionId),
  ToolbarGroupId: () => (ToolbarGroupId),
  XRRichModernSurface: () => (XRRichModernSurface),
  createRichEdit: () => (createRichEdit),
  createRichEditOptions: () => (createRichEditOptions),
  events: () => (events),
  getRichEditInstance: () => (getRichEditInstance),
  setRichEditInstance: () => (setRichEditInstance)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-richEdit-internal.js
var reporting_designer_controls_richEdit_internal_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_richEdit_internal_namespaceObject);
__webpack_require__.d(reporting_designer_controls_richEdit_internal_namespaceObject, {
  InlineRichEditControl: () => (InlineRichEditControl),
  RichAction: () => (RichAction),
  RichEditFontModel: () => (RichEditFontModel),
  RichEditLoadDispatcher: () => (RichEditLoadDispatcher),
  RichEditPaddingModelWrapper: () => (RichEditPaddingModelWrapper),
  RichEditVirtualScroll: () => (RichEditVirtualScroll),
  RichLoader: () => (RichLoader),
  XRRichController: () => (XRRichController),
  XRRichEditControlModel: () => (XRRichEditControlModel)
});

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-richEdit-internal-toolbar.js
var reporting_designer_controls_richEdit_internal_toolbar_namespaceObject = {};
__webpack_require__.r(reporting_designer_controls_richEdit_internal_toolbar_namespaceObject);
__webpack_require__.d(reporting_designer_controls_richEdit_internal_toolbar_namespaceObject, {
  Component: () => (Component),
  ComponentButton: () => (ComponentButton),
  ComponentButtonGroup: () => (ComponentButtonGroup),
  ComponentCollection: () => (ComponentCollection),
  ComponentColorPicker: () => (ComponentColorPicker),
  ComponentComboBox: () => (ComponentComboBox),
  ComponentFontSizeComboBox: () => (ComponentFontSizeComboBox),
  CustomComponent: () => (CustomComponent),
  ToolbarSurface: () => (ToolbarSurface)
});

;// external "DevExpress.Analytics.Internal"
const external_DevExpress_Analytics_Internal_namespaceObject = DevExpress.Analytics.Internal;
;// ./node_modules/devexpress-reporting/chart/_handlerUri.js

const HandlerUri = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)('DXXCD.axd');

;// ./node_modules/devexpress-reporting/chart/internal/_requests.js


class ChartRequests {
    static getChartImage(uri, chartLayout, width, height) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(uri, 'chart', JSON.stringify({
            width: width,
            height: height,
            Chart: JSON.stringify({
                'ChartXmlSerializer': {
                    '@version': '16.2.0.0',
                    Chart: chartLayout
                }
            })
        }));
    }
    static fieldListCallback(request) {
        const requestJson = JSON.stringify(request);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(HandlerUri(), 'fieldList', requestJson);
    }
}

;// external "ko"
const external_ko_namespaceObject = ko;
;// external "DevExpress.Analytics.Utils"
const external_DevExpress_Analytics_Utils_namespaceObject = DevExpress.Analytics.Utils;
;// ./node_modules/devexpress-reporting/chart/_dateUtils.js


function parseDate(val) {
    if (!val)
        return null;
    if (val instanceof Date)
        return val;
    const chartDateParts = val.split('.');
    const date = (0,external_DevExpress_Analytics_Internal_namespaceObject.parseDate)(chartDateParts[0]);
    if ((chartDateParts.length > 1) && date && (chartDateParts[1].length === 3)) {
        const milliseconds = parseInt(chartDateParts[1]);
        milliseconds && date.setMilliseconds(milliseconds);
    }
    return date;
}
function serializeDate(date) {
    const milliseconds = date.getMilliseconds().toString();
    let zeros;
    switch (3 - milliseconds.length) {
        case 2:
            zeros = '00';
            break;
        case 1:
            zeros = '0';
            break;
        default:
            zeros = '';
    }
    return (0,external_DevExpress_Analytics_Utils_namespaceObject.serializeDate)(date) + '.' + zeros + milliseconds;
}

;// ./node_modules/devexpress-reporting/chart/internal/_utils.js



function createInnerActionsWithPopover(text, id, actions, template) {
    const object = {
        text: text,
        imageClassName: 'dxrd-image-add',
        imageTemplateName: 'dxrd-svg-operations-add',
        disabled: external_ko_namespaceObject.observable(false),
        id: id,
        _visible: external_ko_namespaceObject.observable(false),
        popoverVisible: null,
        togglePopoverVisible: null,
        closePopover: null,
        templateName: 'dxrd-collectionactions-template',
        contentTemplate: template,
        getContainer: function (element, selector) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.$unwrap)(element)?.parentElement?.querySelector(selector);
        },
        actions: actions
    };
    object.popoverVisible = external_ko_namespaceObject.pureComputed(() => {
        return object._visible();
    });
    object.togglePopoverVisible = () => {
        object._visible(!object._visible());
    };
    object.closePopover = () => {
        object._visible(false);
    };
    return [object];
}
function _isNumericTypeSpecific(specific) {
    return ['Integer', 'Float', 'CalcInteger', 'CalcFloat', 'SumInteger', 'SumFloat'].indexOf(specific) > -1;
}
function _isDateTypeSpecific(specific) {
    return ['Date', 'CalcDate', 'SumDate'].indexOf(specific) > -1;
}
function _getUnconvertiblePoint(propertyName, oldValue, newValue, points) {
    let filter = _ => false;
    if ((oldValue === 'Numerical' && newValue === 'DateTime') || (oldValue === 'DateTime' && newValue === 'Numerical')) {
        filter = point => point[propertyName]() !== null && point[propertyName]() !== void 0 && point[propertyName]() !== '';
    }
    if (oldValue === 'Auto' || oldValue === 'Qualitative')
        if (newValue === 'Numerical') {
            filter = point => {
                const number = parseInt(point[propertyName]());
                return isNaN(number) || (typeof number === 'number' && JSON.stringify(number) !== point[propertyName]().toString());
            };
        }
        else if (newValue === 'DateTime') {
            filter = point => {
                let date = (0,external_DevExpress_Analytics_Internal_namespaceObject.parseDate)(point[propertyName](), false, 'MM/dd/yyyy');
                if (!date)
                    date = parseDate(point[propertyName]());
                return !date;
            };
        }
    return points.filter(filter)[0] || null;
}

;// external "jQuery"
const external_jQuery_namespaceObject = jQuery;
;// external "DevExpress.Analytics.Widgets.Internal"
const external_DevExpress_Analytics_Widgets_Internal_namespaceObject = DevExpress.Analytics.Widgets.Internal;
;// ./node_modules/devexpress-reporting/chart/internal/chartStructure/_chartTreeListDragDropHelper.js

class ChartTreeListDragDropHelper extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ReorderTreeListDragDropHelper {
    getSiblings() {
        return this._draggableModel.parent;
    }
    stop() {
        super.stop();
        if (this.canDrop())
            this.reorderSiblings();
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/chartStructure/_controller.js




class ChartStructureTreeListController extends external_DevExpress_Analytics_Internal_namespaceObject.ObjectStructureTreeListController {
    constructor(propertyNames, listPropertyNames, selectCallback, surface, undoEngine, dragHelperContent) {
        super(propertyNames, listPropertyNames);
        this.surface = surface;
        this.undoEngine = undoEngine;
        this.dragHelperContent = dragHelperContent;
        const filter = this.itemsFilter;
        this.itemsFilter = (item, path) => {
            if (path === 'Chart.seriesTemplate.label')
                return false;
            return filter(item, path);
        };
        this.hasItems = (item) => {
            return !!listPropertyNames && listPropertyNames.indexOf(item.specifics) !== -1;
        };
        this.select = (value) => {
            this.selectedItem && (this.selectedItem.isSelected = false);
            this.selectedItem = value;
            value.isSelected = true;
            selectCallback && selectCallback(value);
        };
        this.showIconsForChildItems = (parent = null) => parent === null || parent.level < 1;
        this.dragDropHandler = new ChartDragDropHandler(this.selectedItem, surface, undoEngine, dragHelperContent);
    }
}
class ChartDragDropHandler extends external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler {
    dispose() {
        super.dispose();
        this.dragDropHelper.dispose();
    }
    constructor(surface, selection, undoEngine, dragHelperContent) {
        super(surface, selection, undoEngine, null, dragHelperContent);
        this.undoEngine = undoEngine;
        this.cursor = 'arrow';
        this.alwaysAlt = true;
        this.containment = '.dx-chart-left-panel';
        this.parent = () => external_jQuery_namespaceObject.fn.constructor('.dxcd-designer');
        this['cursorAt'] = {
            top: 0,
            left: 0
        };
        this.dragDropHelper = new ChartTreeListDragDropHelper(dragHelperContent);
        this.helper = this.dragDropHelper.helper;
    }
    startDrag(draggable) {
        this.dragDropHelper.start(draggable);
        super.startDrag(draggable);
    }
    drag(event, ui) {
        if (this.dragDropHelper) {
            const target = this.getTarget(event);
            if (target && external_ko_namespaceObject.dataFor(target)?.getModel) {
                this.dragDropHelper.drag(external_ko_namespaceObject.dataFor(target), target);
                this.dragDropHelper.addDroppableClass();
            }
        }
    }
    doStopDrag(ui, draggable, event) {
        this.dragDropHelper.stop();
    }
}

;// external "DevExpress.Analytics.Widgets"
const external_DevExpress_Analytics_Widgets_namespaceObject = DevExpress.Analytics.Widgets;
;// external "DevExpress.Analytics.Elements"
const external_DevExpress_Analytics_Elements_namespaceObject = DevExpress.Analytics.Elements;
;// ./node_modules/devexpress-reporting/chart/components/models/_wholeRange.js

class WholeRangeModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, serializer, info) {
        super(model, serializer, info);
    }
    getExpressionProperties() {
        return ['MinValue', 'MaxValue'];
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/_editorTemplates.js

const editorTemplates = new external_DevExpress_Analytics_Widgets_namespaceObject.EditorTemplates();
const chartDataSource = { propertyName: 'dataSource', displayName: 'Data Source', modelName: '@DataSource', link: true, editor: editorTemplates.getEditor('chartDataSource'), localizationId: 'DevExpress.XtraReports.UI.XRSparkline.DataSource' };

;// ./node_modules/devexpress-reporting/chart/components/axis/_axis.js


function initCollectionItem(item, parent) {
    return () => {
        item.parent = parent;
        item.innerActions = [
            {
                text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove', 'ReportStringId.UD_Capt_SpacingRemove'),
                imageClassName: 'dxrd-image-recycle-bin',
                imageTemplateName: 'dxrd-svg-operations-recycle_bin',
                disabled: external_ko_namespaceObject.observable(false),
                visible: true,
                clickAction: () => { parent.remove(item); },
            }
        ];
    };
}

;// ./node_modules/devexpress-reporting/chart/internal/_elementCollection.js


class ChartElementCollectionItemBase extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, null, refs);
    }
    constructor(model, parent, serializer, info) {
        super(model, serializer, info);
        initCollectionItem(this, parent)();
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/_localizableElementCollection.js


class ChartComponentModelWithText extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, serializer, info) {
        super(model, serializer, info);
    }
    getExpressionProperties() {
        return ['Text'];
    }
}
class ChartLocalizableElementCollectionItemBase extends ChartElementCollectionItemBase {
    getChildComponents() {
        return [
            { component: this.title, path: 'Title' },
        ];
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/meta/_common.js




const defaultBooleanValues = [
    { value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' },
    { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' },
    { value: 'Default', displayValue: 'Default', localizationId: 'StringId.DefaultBooleanDefault' }
];
const scaleTypeValues = [
    { value: 'Qualitative', displayValue: 'Qualitative', localizationId: 'DevExpress.XtraCharts.ScaleType.Qualitative' },
    { value: 'Numerical', displayValue: 'Numerical', localizationId: 'DevExpress.XtraCharts.ScaleType.Numerical' },
    { value: 'DateTime', displayValue: 'DateTime', localizationId: 'DevExpress.XtraCharts.ScaleType.DateTime' },
    { value: 'Auto', displayValue: 'Auto', localizationId: 'DevExpress.XtraCharts.ScaleType.Auto' }
];
const stringAlignmentValues = [
    { value: 'Near', displayValue: 'Near', localizationId: 'ChartStringId.WizStringAlignmentNear' },
    { value: 'Center', displayValue: 'Center', localizationId: 'ChartStringId.WizStringAlignmentCenter' },
    { value: 'Far', displayValue: 'Far', localizationId: 'ChartStringId.WizStringAlignmentFar' }
];
const angle = { propertyName: 'angle', modelName: '@Angle', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, displayName: 'Angle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraReports.UI.XRLabel.Angle' };
const borderColor = { propertyName: 'borderColor', modelName: '@BorderColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Border Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor' };
const backColor = { propertyName: 'backColor', modelName: '@BackColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Background Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor' };
const dataMember = { propertyName: 'dataMember', modelName: '@DataMember' };
const _common_text = { propertyName: 'text', modelName: '@Text', defaultVal: '', displayName: 'Text', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizable: true, localizationId: 'ASPxReportsStringId.ExportName_txt' };
const visible = { propertyName: 'visible', modelName: '@Visible', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Visible', localizationId: 'DevExpress.XtraReports.UI.XRControl.Visible' };
const _common_name = { propertyName: 'name', modelName: '@Name', displayName: 'Name', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraReports.UI.XRControl.Name' };
const tag = { propertyName: 'tag', modelName: '@Tag', displayName: 'Tag', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag' };
const legendText = { propertyName: 'legendText', modelName: '@LegendText', displayName: 'Legend Text', localizable: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraCharts.Strip.LegendText' };
const showInLegend = { propertyName: 'showInLegend', modelName: '@ShowInLegend', displayName: 'Show In Legend', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.Indicator.ShowInLegend' };
const thickness = { propertyName: 'thickness', modelName: '@Thickness', displayName: 'Thickness', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.TickmarksBase.Thickness' };
const visibility = { propertyName: 'visibility', modelName: '@Visibility', displayName: 'Visibility', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility' };
const color = { propertyName: 'color', modelName: '@Color', displayName: 'Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraCharts.SeriesViewBase.Color' };
const titleAlignment = { propertyName: 'titleAlignment', modelName: '@Alignment', displayName: 'Alignment', defaultVal: 'Center', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: stringAlignmentValues, localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment' };
const textPattern = { propertyName: 'textPattern', modelName: '@TextPattern', displayName: 'Text Pattern', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraCharts.TotalLabel.TextPattern' };
const textAlignment = { propertyName: 'textAlignment', modelName: '@TextAlignment', displayName: 'Text Alignment', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: stringAlignmentValues, localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment' };
const maxLineCount = { propertyName: 'maxLineCount', modelName: '@MaxLineCount', displayName: 'Max Line Count', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.MaxLineCount' };
const maxWidth = { propertyName: 'maxWidth', modelName: '@MaxWidth', displayName: 'Max Width', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsSelection.MaxWidth' };
const textColor = { propertyName: 'textColor', modelName: '@TextColor', displayName: 'Text Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraCharts.TotalLabel.TextColor' };
const antialiasing = { propertyName: 'antialiasing', modelName: '@Antialiasing', displayName: 'Antialiasing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.SwiftPlotSeriesView.Antialiasing' };
const font = { propertyName: 'font', modelName: '@Font', displayName: 'Font', defaultVal: 'Tahoma, 8pt', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('font'), localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
const titleSerializationsInfo = [_common_text, titleAlignment, textColor];
const title = { propertyName: 'title', modelName: 'Title', displayName: 'Title', defaultVal: {}, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title', type: ChartComponentModelWithText };
const enableAxisXZooming = { propertyName: 'enableAxisXZooming', modelName: '@EnableAxisXZooming', displayName: 'Enable Axis X Zooming' };
const enableAxisXScrolling = { propertyName: 'enableAxisXScrolling', modelName: '@EnableAxisXScrolling', displayName: 'Enable Axis X Scrolling' };
const enableAxisYZooming = { propertyName: 'enableAxisYZooming', modelName: '@EnableAxisYZooming', displayName: 'Enable Axis Y Zooming' };
const enableAxisYScrolling = { propertyName: 'enableAxisYScrolling', modelName: '@EnableAxisYScrolling', displayName: 'Enable Axis Y Scrolling' };
const rotated = { propertyName: 'rotated', modelName: '@Rotated', displayName: 'Rotated', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.XYDiagram.Rotated' };
const typeNameNotShow = { propertyName: 'typeNameSerializable', modelName: '@TypeNameSerializable' };
const left = { propertyName: 'left', modelName: '@Left', displayName: 'Left', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Left', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const right = { propertyName: 'right', modelName: '@Top', displayName: 'Top', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Top', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const _common_top = { propertyName: 'top', modelName: '@Right', displayName: 'Right', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Right', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const bottom = { propertyName: 'bottom', modelName: '@Bottom', displayName: 'Bottom', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Bottom', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const margin = { propertyName: 'chartMargins', modelName: 'Margins', displayName: 'Margins', info: [left, right, _common_top, bottom], editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XtraReport.Margins' };
const font18 = { propertyName: 'font18', modelName: '@Font', displayName: 'Font', defaultVal: 'Tahoma, 18pt', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('font'), localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
const font12 = { propertyName: 'font12', modelName: '@Font', displayName: 'Font', defaultVal: 'Tahoma, 12pt', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('font'), localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
const font8 = { propertyName: 'font8', modelName: '@Font', displayName: 'Font', defaultVal: 'Tahoma, 8pt', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('font'), localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font' };
const paneTitleSerializationsInfo = [antialiasing, font12, visibility].concat(titleSerializationsInfo), paneTitle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, title, { info: paneTitleSerializationsInfo });
const paneSerializationsInfo = [enableAxisXScrolling, enableAxisYScrolling, enableAxisYZooming, enableAxisXZooming, backColor, borderColor, paneTitle];
const defaultPane = { propertyName: 'defaultPane', modelName: 'DefaultPane', displayName: 'Default Pane', localizationId: 'ChartStringId.DefaultPaneName', info: paneSerializationsInfo, defaultVal: {}, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const additionalPaneSerializationsInfo = [_common_name].concat(paneSerializationsInfo);
const filterString = { propertyName: '_filterString', modelName: '@FilterString' };
const filterStringEditable = { propertyName: 'filterString', displayName: 'Filter String', localizationId: 'DevExpress.XtraReports.UI.XtraReportBase.FilterString', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('filterEditor') };
const argumentSerializable = { propertyName: 'argumentSerializable', modelName: '@ArgumentSerializable', displayName: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesPoint.Argument', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };

;// ./node_modules/devexpress-reporting/chart/internal/meta/_axis.js






const minValue = { propertyName: 'minValue', modelName: '@MinValueSerializable', displayName: 'Min Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.AxisRange.MinValue' }, maxValue = { propertyName: 'maxValue', modelName: '@MaxValueSerializable', displayName: 'Max Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.Range.MaxValue' }, auto = { propertyName: 'auto', modelName: '@Auto', displayName: 'Auto', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraReports.UI.DocumentExportMode.Auto' }, autoSideMargins = { propertyName: 'autoSideMargins', modelName: '@AutoSideMargins', displayName: 'Auto Side Margins', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.Range.AutoSideMargins' }, sideMarginsValue = { propertyName: 'sideMarginsValue', modelName: '@SideMarginsValue', displayName: 'Side Margins Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.Range.SideMarginsValue' };
const visualRangeSerializationsInfo = [auto, autoSideMargins, minValue, maxValue, sideMarginsValue], visualRange = { propertyName: 'visualRange', modelName: 'VisualRange', displayName: 'Visual Range', info: visualRangeSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.AxisBase.VisualRange' };
const alwaysShowZeroLevel = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'Always Show Zero Level', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.WholeRange.AlwaysShowZeroLevel' };
const wholeRangeSerializationsInfo = visualRangeSerializationsInfo.concat(alwaysShowZeroLevel), wholeRange = { propertyName: 'wholeRange', modelName: 'WholeRange', displayName: 'Whole Range', type: WholeRangeModel, info: wholeRangeSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.AxisBase.WholeRange' };
const radarWholeRange = { propertyName: 'radarWholeRange', modelName: 'WholeRange', displayName: 'Whole Range', info: visualRangeSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.AxisBase.WholeRange' };
const dashStyle = {
    propertyName: 'dashStyle', modelName: '@DashStyle', displayName: 'Dash Style', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Dash', displayValue: 'Dash', localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: 'Dot', displayValue: 'Dot', localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: 'DashDot', displayValue: 'DashDot' }, { value: 'DashDotDot', displayValue: 'DashDotDot' }],
    localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle'
};
const lineStyleSerializationsInfo = [thickness, dashStyle], lineStyle = { propertyName: 'lineStyle', modelName: 'LineStyle', displayName: 'Line Style', info: lineStyleSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRShape.LineStyle' }, minorLineStyle = { propertyName: 'minorLineStyle', modelName: 'MinorLineStyle', displayName: 'Minor Line Style', info: lineStyleSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.GridLines.MinorLineStyle' };
const scaleMode = {
    propertyName: 'scaleName', modelName: '@ScaleMode', displayName: 'Scale Mode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [{ value: 'Automatic', displayValue: 'Automatic', localizationId: 'DevExpress.XtraCharts.ScaleMode.Automatic' }, { value: 'Manual', displayValue: 'Manual', localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientSnapMode.Manual' }, { value: 'Continuous', displayValue: 'Continuous', localizationId: 'DevExpress.XtraCharts.ScaleMode.Continuous' }],
    localizationId: 'DevExpress.XtraCharts.ScaleOptionsBase.ScaleMode'
}, aggregateFunction = {
    propertyName: 'aggregateFunction', modelName: '@AggregateFunction', displayName: 'Aggregate Function',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'Average', displayValue: 'Average', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: 'Sum', displayValue: 'Sum', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: 'Minimum', displayValue: 'Minimum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: 'Maximum', displayValue: 'Maximum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: 'Count', displayValue: 'Count', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: 'Financial', displayValue: 'Financial', localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }],
    localizationId: 'DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.AggregateFunction'
}, gridSpacing = { propertyName: 'gridSpacing', modelName: '@GridSpacing', displayName: 'Grid Spacing', localizationId: 'DevExpress.XtraCharts.ScaleGridOptionsBase.GridSpacing', defaultVal: 1.0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, autoGrid = { propertyName: 'autoGrid', modelName: '@AutoGrid', displayName: 'Auto Grid', localizationId: 'DevExpress.XtraCharts.ScaleGridOptionsBase.AutoGrid', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, gridOffset = { propertyName: 'gridOffset', modelName: '@GridOffset', displayName: 'Grid Offset', localizationId: 'DevExpress.XtraCharts.ScaleGridOptionsBase.GridOffset', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const scaleOptionsBaseSerializationsInfo = [autoGrid, aggregateFunction, gridOffset, gridSpacing, scaleMode];
const numericMeasureUnit = {
    propertyName: 'measureUnit', modelName: '@MeasureUnit', displayName: 'Measure Unit',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Ones', displayValue: 'Ones', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Ones' }, { value: 'Tens', displayValue: 'Tens', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Tens' }, { value: 'Hundreds', displayValue: 'Hundreds', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Hundreds' }, { value: 'Thousands', displayValue: 'Thousands', localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Thousands' }, { value: 'Millions', displayValue: 'Millions', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Millions' }, { value: 'Billions', displayValue: 'Billions', localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Billions' }, { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Custom' }],
    localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.MeasureUnit'
}, numericGridAlignment = {
    propertyName: 'gridAlignment', modelName: '@GridAlignment', displayName: 'Grid Alignment',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Ones', displayValue: 'Ones', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Ones' }, { value: 'Tens', displayValue: 'Tens', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Tens' }, { value: 'Hundreds', displayValue: 'Hundreds', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Hundreds' }, { value: 'Thousands', displayValue: 'Thousands', localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Thousands' }, { value: 'Millions', displayValue: 'Millions', localizationId: 'DevExpress.XtraCharts.NumericMeasureUnit.Millions' }, { value: 'Billions', displayValue: 'Billions', localizationId: 'DevExpress.XtraCharts.NumericGridAlignment.Billions' }, { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Custom' }],
    localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientDateTimeGridOptions.GridAlignment'
}, customGridAlignment = { propertyName: 'customGridAlignment', modelName: '@CustomGridAlignment', defaultVal: null, displayName: 'Custom Grid Alignment', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.NumericScaleOptions.CustomGridAlignment' }, customMeasureUnit = { propertyName: 'customMeasureUnit', modelName: '@CustomMeasureUnit', defaultVal: null, displayName: 'Custom Measure Unit', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.NumericScaleOptions.CustomMeasureUnit' };
const numericScaleOptionsSerializationsInfo = [numericMeasureUnit, numericGridAlignment, customGridAlignment, customMeasureUnit].concat(scaleOptionsBaseSerializationsInfo), numericScaleOptions = { propertyName: 'numericScaleOptions', modelName: 'NumericScaleOptions', displayName: 'Numeric Scale Options', info: numericScaleOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
const radarAxisYNumericScaleOptionsSerializationsInfo = [autoGrid, numericGridAlignment, gridOffset, gridSpacing], radarAxisYNumericScaleOptions = { propertyName: 'radarAxisYNumericScaleOptions', modelName: 'NumericScaleOptions', displayName: 'Numeric Scale Options', info: radarAxisYNumericScaleOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
const radarAxisXNumericScaleOptionsSerializationsInfo = radarAxisYNumericScaleOptionsSerializationsInfo.concat(scaleMode), radarAxisXNumericScaleOptions = { propertyName: 'radarAxisXNumericScaleOptions', modelName: 'NumericScaleOptions', displayName: 'Numeric Scale Options', info: radarAxisXNumericScaleOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.NumericScaleOptions' };
const dateMeasureUnit = {
    propertyName: 'measureUnit', modelName: '@MeasureUnit', displayName: 'Measure Unit',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Millisecond', displayValue: 'Millisecond', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' }, { value: 'Second ', displayValue: 'Second', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' }, { value: 'Minute', displayValue: 'Minute', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' }, { value: 'Hour', displayValue: 'Hour', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' }, { value: 'Day', displayValue: 'Day', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' }, { value: 'Week', displayValue: 'Week', localizationId: 'DevExpress.XtraCharts.DateTimeGridAlignment.Week' }, { value: 'Month', displayValue: 'Month', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' }, { value: 'Quarter', displayValue: 'Quarter', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' }, { value: 'Year', displayValue: 'Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' }],
    localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.MeasureUnit'
}, dateGridAlignment = {
    propertyName: 'gridAlignment', modelName: '@GridAlignment', displayName: 'Grid Alignment',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Millisecond', displayValue: 'Millisecond', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' }, { value: 'Second ', displayValue: 'Second', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' }, { value: 'Minute', displayValue: 'Minute', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' }, { value: 'Hour', displayValue: 'Hour', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' }, { value: 'Day', displayValue: 'Day', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' }, { value: 'Week', displayValue: 'Week', localizationId: 'DevExpress.XtraCharts.DateTimeGridAlignment.Week' }, { value: 'Month', displayValue: 'Month', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' }, { value: 'Quarter', displayValue: 'Quarter', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' }, { value: 'Year', displayValue: 'Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' }],
    localizationId: 'DevExpress.XtraCharts.ChartRangeControlClientDateTimeGridOptions.GridAlignment'
}, workdaysOnly = { propertyName: 'workdaysOnly', modelName: '@WorkdaysOnly', displayName: 'Workdays Only', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions.WorkdaysOnly' };
const dateTimeScaleOptionsSerializationsInfo = [dateGridAlignment, dateMeasureUnit, workdaysOnly].concat(scaleOptionsBaseSerializationsInfo), dateTimeScaleOptions = { propertyName: 'dateTimeScaleOptions', modelName: 'DateTimeScaleOptions', displayName: 'Date-Time Scale Options', info: dateTimeScaleOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.DateTimeScaleOptions' };
const qualitativeScaleOptionsSerializationInfo = [autoGrid, gridOffset, gridSpacing], qualitativeScaleOptions = { propertyName: 'qualitativeScaleOptions', modelName: 'QualitativeScaleOptions', displayName: 'Qualitative Scale Options', localizationId: 'DevExpress.XtraCharts.AxisX3D.QualitativeScaleOptions', info: qualitativeScaleOptionsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const visibleInPanesSerializable = { propertyName: 'visibleInPanesSerializable', modelName: '@VisibleInPanesSerializable', displayName: 'Visible In Panes Serializable', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }, minorVisible = { propertyName: 'minorVisible', modelName: '@MinorVisible', displayName: 'Minor Visible', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorVisible' }, minorColor = { propertyName: 'minorColor', modelName: '@MinorColor', displayName: 'Minor Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraCharts.GridLines.MinorColor' };
const gridLinesAxisBaseSerializationsInfo = [visible, minorVisible, color, minorColor, lineStyle, minorLineStyle];
const gridLinesAxisX = { propertyName: 'gridLinesAxisX', modelName: 'GridLines', displayName: 'Grid Lines', info: gridLinesAxisBaseSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.AxisBase.GridLines' }, gridLinesAxisY = { propertyName: 'gridLinesAxisY', modelName: 'GridLines', displayName: 'Grid Lines', info: gridLinesAxisBaseSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.AxisBase.GridLines' };
const straggered = { propertyName: 'straggered', modelName: '@Staggered', displayName: 'Staggered', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabel.Staggered' }, allowStagger = { propertyName: 'allowStagger', modelName: '@AllowStagger', displayName: 'Allow Stagger', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowStagger' }, allowRotate = { propertyName: 'allowRotate', modelName: '@AllowRotate', displayName: 'Allow Rotate', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowRotate' }, allowHide = { propertyName: 'allowHide', modelName: '@AllowHide', displayName: 'Allow Hide', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.AllowHide' }, minIndent = { propertyName: 'minIndent', modelName: '@MinIndent', displayName: 'Min Indent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingOptions.MinIndent' }, axisLabelResolveOverlappingOptionsSerializationsInfo = [allowStagger, allowRotate, allowHide, minIndent], axisLabelResolveOverlappingOptions = { propertyName: 'resolveOverlappingOptions', modelName: 'ResolveOverlappingOptions', displayName: 'Resolve Overlapping Options', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: axisLabelResolveOverlappingOptionsSerializationsInfo, localizationId: 'DevExpress.XtraCharts.AxisLabel.ResolveOverlappingOptions' }, enableAntialiasing = { propertyName: 'enableAntialiasing', modelName: '@EnableAntialiasing', displayName: 'Enable Antialiasing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.TitleBase.EnableAntialiasing' };
const axisLabelBaseSerializationsInfo = [enableAntialiasing, font, maxLineCount, maxWidth, axisLabelResolveOverlappingOptions, textAlignment, textColor, textPattern];
const axisLabelSerializationsInfo = [angle, straggered, visibility].concat(axisLabelBaseSerializationsInfo), axisLabel = { propertyName: 'axisLabel', modelName: 'Label', displayName: 'Label', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: axisLabelSerializationsInfo, localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
const minorCount = { propertyName: 'minorCount', modelName: '@MinorCount', displayName: 'Minor Count', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.AxisBase.MinorCount' }, interlaced = { propertyName: 'interlaced', modelName: '@Interlaced', displayName: 'Interlaced', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), localizationId: 'DevExpress.XtraCharts.AxisBase.Interlaced' }, interlacedColor = { propertyName: 'interlacedColor', modelName: '@InterlacedColor', displayName: 'Interlaced Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, localizationId: 'DevExpress.XtraCharts.AxisBase.InterlacedColor' };
const axisBaseSerializationsInfo = [visualRange, wholeRange, numericScaleOptions, dateTimeScaleOptions, minorCount, interlacedColor];
const axisFillMode = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Gradient', displayValue: 'Gradient', localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: 'Hatch', displayValue: 'Hatch', localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }],
    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
}, fillStyle2D = [axisFillMode];
const rectangleFillStyleSerializationsInfo = [].concat(fillStyle2D), interlacedFillStyle = { propertyName: 'InterlacedFillStyle', modelName: 'InterlacedFillStyle', displayName: 'Interlaced Fill Style', info: rectangleFillStyleSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.RadarAxis.InterlacedFillStyle' };
const crossAxis = { propertyName: 'crossAxis', modelName: '@CrossAxis', displayName: 'Cross Axis', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.CrossAxis' }, minorThickness = { propertyName: 'minorThickness', modelName: '@MinorThickness', displayName: 'Minor Thickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorThickness' }, minorLength = { propertyName: 'minorLength', modelName: '@MinorLength', displayName: 'Minor Length', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorLength' }, lengthinfo = { propertyName: 'length', modelName: '@Length', displayName: 'Length', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 5, localizationId: 'DevExpress.XtraCharts.TickmarksBase.Length' }, tickmarksMinorVisible = { propertyName: 'minorVisible', modelName: '@MinorVisible', displayName: 'Minor Visible', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.TickmarksBase.MinorVisible' }, tickmarksBaseSerializationsInfo = [visible, tickmarksMinorVisible, crossAxis, thickness, minorThickness, lengthinfo, minorLength], tickmarksSerializationsInfo = [].concat(tickmarksBaseSerializationsInfo);
const tickmarks = { propertyName: 'tickmarks', modelName: 'Tickmarks', displayName: 'Tickmarks', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: tickmarksSerializationsInfo, localizationId: 'DevExpress.XtraCharts.RadarAxisY.Tickmarks' };
const axisAlignment = {
    propertyName: 'axisAlignment', modelName: '@Alignment',
    displayName: 'Alignment', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [{ value: 'Near', displayValue: 'Near', localizationId: 'DevExpress.XtraCharts.ConstantLineTitleAlignment.Near' }, { value: 'Zero', displayValue: 'Zero', localizationId: 'DevExpress.XtraCharts.AxisAlignment.Zero' }, { value: 'Far', displayValue: 'Far', localizationId: 'DevExpress.XtraCharts.ConstantLineTitleAlignment.Far' }],
    localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment'
};
const pattern = { propertyName: 'pattern', modelName: '@Pattern', displayName: 'Pattern', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraCharts.CrosshairAxisLabelOptions.Pattern' }, crosshairAxisLabelOptionsSerializationsInfo = [visibility, pattern, backColor, textColor, font];
const crosshairAxisLabelOptions = { propertyName: 'crosshairAxisLabelOptions', modelName: 'CrosshairAxisLabelOptions', displayName: 'Crosshair Axis Label Options', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: crosshairAxisLabelOptionsSerializationsInfo, localizationId: 'DevExpress.XtraCharts.Axis2D.CrosshairAxisLabelOptions' };
const axisTitleVisibility = { propertyName: 'axisTitleVisibility', modelName: '@Visibility', displayName: 'Visibility', defaultVal: 'False', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility' };
const axisTitleSerializationsInfo = [antialiasing, axisTitleVisibility, font12].concat(titleSerializationsInfo), axisTitle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, title, { propertyName: 'axisTitle', info: axisTitleSerializationsInfo });
const crosshairLabelVisibility = { propertyName: 'crosshairLabelVisibility', modelName: '@CrosshairLabelVisibility', displayName: 'Crosshair Label Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.CrosshairLabelVisibility' };
const axis2DSerializationsInfo = [interlaced, interlacedFillStyle, tickmarks, axisTitle, visibility, axisAlignment, axisLabel, thickness,
    color, crosshairLabelVisibility, visibleInPanesSerializable, crosshairAxisLabelOptions].concat(axisBaseSerializationsInfo);
const axisY3DInterlaced = { propertyName: 'axisY3DInterlaced', modelName: '@Interlaced', displayName: 'Interlaced', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), localizationId: 'DevExpress.XtraCharts.AxisBase.Interlaced' };
const axisFillMode3D = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Gradient', displayValue: 'Gradient', localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }],
    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
}, fillStyle3D = [axisFillMode];
const rectangleFillStyle3DSerializationsInfo = [].concat(fillStyle3D), rectangleFillStyle3D = { propertyName: 'interlacedFillStyle', modelName: 'InterlacedFillStyle', displayName: 'Interlaced Fill Style', info: rectangleFillStyle3DSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.RadarAxis.InterlacedFillStyle' }, axisLabel3DPosition = {
    propertyName: 'axisLabel3DPosition', modelName: '@AxisLabel3DPosition', displayName: 'Axis Label 3D Position',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Bottom', displayValue: 'Bottom', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: 'Left', displayValue: 'Left', localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: 'Right', displayValue: 'Right', localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }, { value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: 'Auto', displayValue: 'Auto', localizationId: 'DevExpress.XtraReports.UI.DocumentExportMode.Auto' }]
};
const axisLabel3DSerializationsInfo = [axisLabel3DPosition].concat(axisLabelSerializationsInfo), axisLabel3D = { propertyName: 'axisLabel3D', modelName: 'Label', displayName: 'Label', info: axisLabel3DSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
const axis3DSerializationsInfo = [rectangleFillStyle3D, axisLabel3D].concat(axisBaseSerializationsInfo);
const sizeInPixels = { propertyName: 'sizeInPixels', modelName: '@SizeInPixels', displayName: 'Size In Pixels', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.XYDiagramPaneBase.SizeInPixels' }, scaleBreakStyle = {
    propertyName: 'style', modelName: '@Style', displayName: 'Style', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [{ value: 'Straight', displayValue: 'Straight', localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Straight' }, { value: 'Ragged', displayValue: 'Ragged', localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Ragged' }, { value: 'Waved', displayValue: 'Waved', localizationId: 'DevExpress.XtraCharts.ScaleBreakStyle.Waved' }],
    localizationId: 'DevExpress.XtraReports.UI.ConditionFormatting.Style'
}, scaleBreaksOptionsSerializationsInfo = [sizeInPixels, color, scaleBreakStyle];
const scaleBreaksOptions = { propertyName: 'scaleBreakOptions', modelName: 'ScaleBreakOptions', displayName: 'Scale Break Options', info: scaleBreaksOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.Axis.ScaleBreakOptions' };
const enabled = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' }, maxCount = { propertyName: 'maxCount', modelName: '@MaxCount', displayName: 'Max Count', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.AutoScaleBreaks.MaxCount' }, autoScaleBreaksSerializationsInfo = [enabled, maxCount];
const edge1 = { propertyName: 'edge1', modelName: '@Edge1Serializable', displayName: 'Edge1', localizationId: 'DevExpress.XtraCharts.ScaleBreak.Edge1', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, edge2 = { propertyName: 'edge2', modelName: '@Edge2Serializable', displayName: 'Edge2', localizationId: 'DevExpress.XtraCharts.ScaleBreak.Edge2', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const scaleBreaks = { propertyName: 'scaleBreaks', modelName: 'ScaleBreaks', displayName: 'Scale Breaks', localizationId: 'DevExpress.XtraCharts.Axis.ScaleBreaks', array: true, editor: editorTemplates.getEditor('collection') };
const scaleBreakSerializationsInfo = [edge1, edge2, visible, _common_name, tag];
const autoScaleBreaks = { propertyName: 'autoScaleBreaks', modelName: 'AutoScaleBreaks', displayName: 'Auto Scale Breaks', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: autoScaleBreaksSerializationsInfo, localizationId: 'DevExpress.XtraCharts.Axis.AutoScaleBreaks' }, reverse = { propertyName: 'axisReverse', modelName: '@Reverse', displayName: 'Reverse', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.Axis.Reverse' };
const axisValueSerializable = { propertyName: '_axisValue', modelName: '@AxisValueSerializable' }, axisValue = { propertyName: 'axisValue', displayName: 'Axis Value', localizationId: 'DevExpress.XtraCharts.AxisCoordinate.AxisValue', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }, showBehind = { propertyName: 'showBehind', modelName: '@ShowBehind', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Show Behind', localizationId: 'DevExpress.XtraCharts.ConstantLine.ShowBehind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const legendName = { propertyName: 'legendName', modelName: '@LegendName', displayName: 'Legend', localizationId: 'DevExpress.XtraCharts.ConstantLine.Legend', defaultVal: 'Default Legend', editor: editorTemplates.getEditor('legends') };
const showAxisLabel = { propertyName: 'showAxisLabel', modelName: '@ShowAxisLabel', displayName: 'Show Axis Label', localizationId: 'DevExpress.XtraCharts.Strip.ShowAxisLabel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, axisLabelText = { propertyName: 'axisLabelText', modelName: '@AxisLabelText', displayName: 'Axis Label Text', localizationId: 'DevExpress.XtraCharts.Strip.AxisLabelText', localizable: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const strips = { propertyName: 'strips', modelName: 'Strips', displayName: 'Strips', localizationId: 'DevExpress.XtraCharts.Axis2D.Strips', array: true, editor: editorTemplates.getEditor('collection') };
const constantLineTitleSerializationsInfo = [antialiasing, visibility, font8, tag].concat(titleSerializationsInfo), constantLineTitle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, title, { info: constantLineTitleSerializationsInfo });
const constantLineSerializationsInfo = [axisValueSerializable, axisValue, _common_name, visible, color, showInLegend, legendName, legendText, showBehind, tag, constantLineTitle];
const constantLines = { propertyName: 'constantLines', modelName: 'ConstantLines', displayName: 'Constant Lines', localizationId: 'DevExpress.XtraCharts.Axis2D.ConstantLines', array: true, editor: editorTemplates.getEditor('collection') };
const axisSerializationsInfo = [reverse, scaleBreaksOptions, autoScaleBreaks].concat(axis2DSerializationsInfo);
const axisXYSerializationsInfo = [constantLines, scaleBreaks, strips].concat(axisSerializationsInfo);
const axisID = { propertyName: 'axisID', modelName: '@AxisID' };
const secondaryAxisXYSerializationsInfo = [_common_name, axisID].concat(axisXYSerializationsInfo);
const topLevel = { propertyName: 'topLevel', modelName: '@TopLevel', displayName: 'Top Level', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.RadarAxisY.TopLevel' }, radarAxisXLabelTextDirection = {
    propertyName: 'textDirection', modelName: 'TextDirection', displayName: 'Text Direction', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [{ value: 'LeftToRight', displayValue: 'LeftToRight', localizationId: 'ChartStringId.WizGradientLeftToRight' }, { value: 'TopToBottom', displayValue: 'TopToBottom', localizationId: 'ChartStringId.WizSeriesLabelTextOrientationTopToBottom' }, { value: 'BottomToTop', displayValue: 'BottomToTop', localizationId: 'ChartStringId.WizSeriesLabelTextOrientationBottomToTop' }, { value: 'Radial', displayValue: 'Radial', localizationId: 'DevExpress.XtraCharts.PieSeriesLabelPosition.Radial' }, { value: 'Tangent', displayValue: 'Tangent', localizationId: 'DevExpress.XtraCharts.PieSeriesLabelPosition.Tangent' }],
    localizationId: 'DevExpress.XtraCharts.RadarAxisXLabel.TextDirection'
};
const radarAxisXLabelSerializationsInfo = axisLabelBaseSerializationsInfo.concat(radarAxisXLabelTextDirection), radarAxisXLabel = { propertyName: 'radarAxisXLabel', modelName: 'Label', displayName: 'Label', info: radarAxisXLabelSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRLabel' }, radarAxisYLabel = { propertyName: 'radarAxisYLabel', modelName: 'Label', displayName: 'Label', info: axisLabelBaseSerializationsInfo.concat([angle, visible]), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRLabel' };
const radarAxisSerializationsInfo = [interlaced, interlacedColor, interlacedFillStyle, visualRange, minorCount], radarAxisXSerializationsInfo = [radarAxisXNumericScaleOptions, radarWholeRange, gridLinesAxisX, radarAxisXLabel, qualitativeScaleOptions].concat(radarAxisSerializationsInfo), radarAxisYSerializationsInfo = [color, thickness, visible, radarAxisYNumericScaleOptions, topLevel, wholeRange, gridLinesAxisY, radarAxisYLabel, tickmarks].concat(radarAxisSerializationsInfo);
const radarAxisX = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'Axis X', info: radarAxisXSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.GanttAxisX' };
const radarAxisY = { propertyName: 'axisY', modelName: 'AxisY', displayName: 'Axis Y', info: radarAxisYSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY' };
const axisX3D = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'Axis X', info: [gridLinesAxisX, interlaced, qualitativeScaleOptions].concat(axis3DSerializationsInfo), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.GanttAxisX' };
const axisY3D = { propertyName: 'axisY', modelName: 'AxisY', displayName: 'Axis Y', info: [gridLinesAxisY, axisY3DInterlaced].concat(axis3DSerializationsInfo), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY' };

;// ./node_modules/devexpress-reporting/chart/_utils.js



function getSeriesClassName(typeName) {
    return typeName.toLowerCase().split('seriesview')[0];
}
function deserializeModelArray(model, creator, prefix) {
    const array = external_ko_namespaceObject.observableArray();
    array((0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model || {}, (item) => { return creator(item, array); })());
    array()['innerActions'] = [{
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-add',
            imageTemplateName: 'dxrd-svg-operations-add',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => {
                array.push(creator({ '@Name': (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(array().map(x => { return x['name'] && x['name'](); }), prefix) }, array));
            }
        }];
    return array;
}

;// ./node_modules/devexpress-reporting/chart/components/models/_constantLine.js


class ConstantLineViewModel extends ChartLocalizableElementCollectionItemBase {
    static from(model, serializer) {
        return new ConstantLineViewModel(model || {}, null, serializer);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer, constantLineSerializationsInfo);
        this.axisValue = this._axisValue;
    }
    getExpressionProperties() {
        return ['LegendText', 'AxisValue'];
    }
}
ConstantLineViewModel.prefix = 'Constant Line ';


;// ./node_modules/devexpress-reporting/chart/components/models/_scaleBreak.js


class ScaleBreakViewModel extends ChartElementCollectionItemBase {
    static from(model, serializer) {
        return new ScaleBreakViewModel(model || {}, null, serializer);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer, scaleBreakSerializationsInfo);
    }
}
ScaleBreakViewModel.prefix = 'Scale Break ';


;// ./node_modules/devexpress-reporting/chart/internal/meta/_series.js





const typeNameSerializable = {
    propertyName: 'typeName', modelName: '@TypeNameSerializable', from: (value) => { return value; }
};
const barSeriesViewGroup = ['SideBySideBarSeriesView', 'StackedBarSeriesView', 'FullStackedBarSeriesView', 'SideBySideStackedBarSeriesView', 'SideBySideFullStackedBarSeriesView', 'OverlappedRangeBarSeriesView', 'SideBySideRangeBarSeriesView', 'OverlappedGanttSeriesView', 'SideBySideGanttSeriesView'];
const bar3DSeriesViewGroup = ['SideBySideBar3DSeriesView', 'StackedBar3DSeriesView', 'FullStackedBar3DSeriesView', 'SideBySideStackedBar3DSeriesView', 'SideBySideFullStackedBar3DSeriesView', 'ManhattanBarSeriesView'];
const barWidth = { propertyName: 'barWidth', modelName: '@BarWidth', displayName: 'Bar Width', defaultVal: 0.6, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.BarSeriesView.BarWidth' };
const colorEach = { propertyName: 'colorEach', modelName: '@ColorEach', displayName: 'Color Each', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.SeriesView3DColorEachSupportBase.ColorEach' };
const borderSerializationsInfo = [color, thickness, visibility];
const border = { propertyName: 'border', modelName: 'Border', displayName: 'Border', info: borderSerializationsInfo, defaultVal: {}, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.TotalLabel.Border' };
const color2 = { propertyName: 'color2', modelName: '@Color2', displayName: 'Color2', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraCharts.PaletteEntry.Color2' }, typeNameSerializableOptions = { propertyName: 'typeNameSerializable', modelName: '@TypeNameSerializable' };
const fillMode = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode', defaultVal: 'Empty', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Gradient', displayValue: 'Gradient', localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: 'Hatch', displayValue: 'Hatch', localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }],
    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
};
const gradientModeBase = {
    propertyName: 'gradientMode', modelName: '@GradientMode', displayName: 'Gradient Mode', defaultVal: 'TopToBottom', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'TopToBottom', displayValue: 'Top To Bottom', localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: 'BottomToTop', displayValue: 'Bottom To Top', localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }, { value: 'LeftToRight', displayValue: 'Left To Right' }, { value: 'RightToLeft', displayValue: 'Right To Left' }, { value: 'TopLeftToBottomRight', displayValue: 'Top Left To Bottom Right' }, { value: 'BottomRightToTopLeft', displayValue: 'Bottom Right To Top Left' }, { value: 'TopRightToBottomLeft', displayValue: 'Top Right To Bottom Left' }, { value: 'BottomLeftToTopRight', displayValue: 'Bottom Left To Top Right' }, { value: 'FromCenterHorizontal', displayValue: 'From Center Horizontal', localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.FromCenterHorizontal' }, { value: 'ToCenterHorizontal', displayValue: 'To Center Horizontal', localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.ToCenterHorizontal' }, { value: 'FromCenterVertical', displayValue: 'From Center Vertical', localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.FromCenterVertical' }, { value: 'ToCenterVertical', displayValue: 'To Center Vertical', localizationId: 'DevExpress.XtraCharts.RectangleGradientMode.ToCenterVertical' }],
    localizationId: 'DevExpress.XtraCharts.PolygonGradientFillOptions.GradientMode'
}, GradientFillOptionsInfoBase = [gradientModeBase, color2, tag, { propertyName: 'typeNameSerializable', modelName: '@TypeNameSerializable' }];
const hatchStyle = {
    propertyName: 'hatchStyle', modelName: '@HatchStyle', displayName: 'Hatch Style', defaultVal: 'BackwardDiagonal', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Horizontal', displayValue: 'Horizontal', localizationId: 'DevExpress.XtraCharts.TextOrientation.Horizontal' }, { value: 'Vertical', displayValue: 'Vertical', localizationId: 'DevExpress.XtraCharts.LayoutDirection.Vertical' }, { value: 'ForwardDiagonal', displayValue: 'ForwardDiagonal', localizationId: 'ChartStringId.WizHatchForwardDiagonal' }, { value: 'BackwardDiagonal', displayValue: 'BackwardDiagonal', localizationId: 'ChartStringId.WizHatchBackwardDiagonal' }, { value: 'LargeGrid', displayValue: 'LargeGrid', localizationId: 'ChartStringId.WizHatchLargeGrid' }, { value: 'DiagonalCross', displayValue: 'DiagonalCross', localizationId: 'ChartStringId.WizHatchDiagonalCross' }, { value: 'Percent05', displayValue: 'Percent05', localizationId: 'ChartStringId.WizHatchPercent05' }, { value: 'Percent10', displayValue: 'Percent10', localizationId: 'ChartStringId.WizHatchPercent10' }, { value: 'Percent20', displayValue: 'Percent20', localizationId: 'ChartStringId.WizHatchPercent20' }, { value: 'Percent25', displayValue: 'Percent25', localizationId: 'ChartStringId.WizHatchPercent25' }, { value: 'Percent30', displayValue: 'Percent30', localizationId: 'ChartStringId.WizHatchPercent30' }, { value: 'Percent40', displayValue: 'Percent40', localizationId: 'ChartStringId.WizHatchPercent40' }, { value: 'Percent50', displayValue: 'Percent50', localizationId: 'ChartStringId.WizHatchPercent50' }, { value: 'Percent60', displayValue: 'Percent60', localizationId: 'ChartStringId.WizHatchPercent60' }, { value: 'Percent70', displayValue: 'Percent70', localizationId: 'ChartStringId.WizHatchPercent70' }, { value: 'Percent75', displayValue: 'Percent75', localizationId: 'ChartStringId.WizHatchPercent75' }, { value: 'Percent80', displayValue: 'Percent80', localizationId: 'ChartStringId.WizHatchPercent80' }, { value: 'Percent90', displayValue: 'Percent90', localizationId: 'ChartStringId.WizHatchPercent90' }, { value: 'LightDownwardDiagonal', displayValue: 'LightDownwardDiagonal', localizationId: 'ChartStringId.WizHatchLightDownwardDiagonal' }, { value: 'LightUpwardDiagonal', displayValue: 'LightUpwardDiagonal', localizationId: 'ChartStringId.WizHatchLightUpwardDiagonal' }, { value: 'DarkDownwardDiagonal', displayValue: 'DarkDownwardDiagonal', localizationId: 'ChartStringId.WizHatchDarkDownwardDiagonal' }, { value: 'DarkUpwardDiagonal', displayValue: 'DarkUpwardDiagonal', localizationId: 'ChartStringId.WizHatchDarkUpwardDiagonal' }, { value: 'WideDownwardDiagonal', displayValue: 'WideDownwardDiagonal', localizationId: 'ChartStringId.WizHatchWideDownwardDiagonal' }, { value: 'WideUpwardDiagonal', displayValue: 'WideUpwardDiagonal', localizationId: 'ChartStringId.WizHatchWideUpwardDiagonal' }, { value: 'LightVertical', displayValue: 'LightVertical', localizationId: 'ChartStringId.WizHatchLightVertical' }, { value: 'LightHorizontal', displayValue: 'LightHorizontal', localizationId: 'ChartStringId.WizHatchLightHorizontal' }, { value: 'NarrowVertical', displayValue: 'NarrowVertical', localizationId: 'ChartStringId.WizHatchNarrowVertical' }, { value: 'NarrowHorizontal', displayValue: 'NarrowHorizontal', localizationId: 'ChartStringId.WizHatchNarrowHorizontal' }, { value: 'DarkVertical', displayValue: 'DarkVertical', localizationId: 'ChartStringId.WizHatchDarkVertical' }, { value: 'DarkHorizontal', displayValue: 'DarkHorizontal', localizationId: 'ChartStringId.WizHatchDarkHorizontal' }, { value: 'DashedDownwardDiagonal', displayValue: 'DashedDownwardDiagonal', localizationId: 'ChartStringId.WizHatchDashedDownwardDiagonal' }, { value: 'DashedUpwardDiagonal', displayValue: 'DashedUpwardDiagonal', localizationId: 'ChartStringId.WizHatchDashedUpwardDiagonal' }, { value: 'DashedHorizontal', displayValue: 'DashedHorizontal', localizationId: 'ChartStringId.WizHatchDashedHorizontal' }, { value: 'DashedVertical', displayValue: 'DashedVertical', localizationId: 'ChartStringId.WizHatchDashedVertical' }, { value: 'SmallConfetti', displayValue: 'SmallConfetti', localizationId: 'ChartStringId.WizHatchSmallConfetti' }, { value: 'LargeConfetti', displayValue: 'LargeConfetti', localizationId: 'ChartStringId.WizHatchLargeConfetti' }, { value: 'ZigZag', displayValue: 'ZigZag', localizationId: 'ChartStringId.WizHatchZigZag' }, { value: 'Wave', displayValue: 'Wave', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Wave' }, { value: 'DiagonalBrick', displayValue: 'DiagonalBrick', localizationId: 'ChartStringId.WizHatchDiagonalBrick' }, { value: 'HorizontalBrick', displayValue: 'HorizontalBrick', localizationId: 'ChartStringId.WizHatchHorizontalBrick' }, { value: 'Weave', displayValue: 'Weave', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Weave' }, { value: 'Plaid', displayValue: 'Plaid', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Plaid' }, { value: 'Divot', displayValue: 'Divot', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Divot' }, { value: 'DottedGrid', displayValue: 'DottedGrid', localizationId: 'ChartStringId.WizHatchDottedGrid' }, { value: 'DottedDiamond', displayValue: 'DottedDiamond', localizationId: 'ChartStringId.WizHatchDottedDiamond' }, { value: 'Shingle', displayValue: 'Shingle', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Shingle' }, { value: 'Trellis', displayValue: 'Trellis', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Trellis' }, { value: 'Sphere', displayValue: 'Sphere', localizationId: 'System.Drawing.Drawing2D.HatchStyle.Sphere' }, { value: 'SmallGrid', displayValue: 'SmallGrid', localizationId: 'ChartStringId.WizHatchSmallGrid' }, { value: 'SmallCheckerBoard', displayValue: 'SmallCheckerBoard', localizationId: 'ChartStringId.WizHatchSmallCheckerBoard' }, { value: 'LargeCheckerBoard', displayValue: 'LargeCheckerBoard', localizationId: 'ChartStringId.WizHatchLargeCheckerBoard' }, { value: 'OutlinedDiamond', displayValue: 'OutlinedDiamond', localizationId: 'ChartStringId.WizHatchOutlinedDiamond' }, { value: 'SolidDiamond', displayValue: 'SolidDiamond', localizationId: 'ChartStringId.WizHatchSolidDiamond' }],
    localizationId: 'DevExpress.XtraCharts.HatchFillOptions.HatchStyle'
}, hatchFillOptionsInfo = [hatchStyle, color2, tag, typeNameSerializableOptions];
const fillStyleOptionsSerialize = { propertyName: 'options', modelName: 'Options', displayName: 'Options', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Options' };
const fillMode3D = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode', defaultVal: 'Empty', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Gradient', displayValue: 'Gradient', localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }],
    localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode'
};
const fillStyle = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRChart.FillStyle' };
const seriesAggregateFunction = {
    propertyName: 'aggregateFunction', modelName: '@AggregateFunction', displayName: 'Aggregate Function', localizationId: 'DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.AggregateFunction', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Default', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Default', 'ChartStringId.WizAggregateFunctionDefault') }, { value: 'None', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('None', 'ChartStringId.WizAggregateFunctionNone') }, { value: 'Average', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Average', 'ChartStringId.WizAggregateFunctionAverage') }, { value: 'Sum', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Sum', 'ChartStringId.WizAggregateFunctionSum') }, { value: 'Minimum', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Minimum', 'ChartStringId.WizAggregateFunctionMinimum') }, { value: 'Maximum', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Maximum', 'ChartStringId.WizAggregateFunctionMaximum') }, { value: 'Count', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Count', 'ChartStringId.WizAggregateFunctionCount') }, { value: 'Financial', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Financial', 'ChartStringId.WizAggregateFunctionFinancial') }]
};
const viewSerializationsInfo = [typeNameSerializable, color, colorEach, border, seriesAggregateFunction, tag];
const fillModeMapper = {
    'Empty': [],
    'Solid': [tag],
    'Gradient': GradientFillOptionsInfoBase,
    'Hatch': hatchFillOptionsInfo
};
const textOrientation = {
    propertyName: 'textOrientation', modelName: '@TextOrientation', displayName: 'Text Orientation', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Horizontal ', displayValue: 'Horizontal', localizationId: 'DevExpress.XtraCharts.TextOrientation.Horizontal' }, { value: 'TopToBottom', displayValue: 'Top To Bottom', localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: 'BottomToTop', displayValue: 'Bottom To Top', localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }],
    localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.TextOrientation'
}, resolveOverlappingMode = {
    propertyName: 'resolveOverlappingMode', modelName: '@ResolveOverlappingMode', displayName: 'Resolve Overlapping Mode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }, { value: 'HideOverlapped', displayValue: 'Hide Overlapped', localizationId: 'DevExpress.XtraCharts.AxisLabelResolveOverlappingMode.HideOverlapped' }, { value: 'JustifyAroundPoint', displayValue: 'Justify Around Point', localizationId: 'DevExpress.XtraCharts.ResolveOverlappingMode.JustifyAroundPoint' }, { value: 'JustifyAllAroundPoint', displayValue: 'Justify All Around Point', localizationId: 'DevExpress.XtraCharts.ResolveOverlappingMode.JustifyAllAroundPoint' }],
    localizationId: 'DevExpress.XtraCharts.StackedBarTotalLabel.ResolveOverlappingMode'
}, lineColor = { propertyName: 'lineColor', modelName: '@LineColor', displayName: 'Line Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineColor' }, lineVisibility = { propertyName: 'lineVisibility', modelName: '@LineVisibility', displayName: 'Line Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineVisibility' }, lineLength = { propertyName: 'lineLength', modelName: '@LineLength', displayName: 'Line Length', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.SeriesLabelBase.LineLength' }, showForZeroValues = { propertyName: 'showForZeroValues', modelName: '@ShowForZeroValues', displayName: 'Show for Zero Values', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.BarSeriesLabel.ShowForZeroValues' };
const _series_dashStyle = {
    propertyName: 'dashStyle', modelName: '@DashStyle', displayName: 'Dash Style', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Dash', displayValue: 'Dash', localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: 'Dot', displayValue: 'Dot', localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: 'DashDot', displayValue: 'Dash-Dot', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDot' }, { value: 'DashDotDot', displayValue: 'Dash-Dot-Dot', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDotDot' }],
    localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle'
};
const _series_lineStyleSerializationsInfo = [thickness, _series_dashStyle], _series_lineStyle = { propertyName: 'lineStyle', modelName: 'LineStyle', displayName: 'Line Style', info: _series_lineStyleSerializationsInfo, defaultVal: {}, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRShape.LineStyle' };
const position = {
    propertyName: 'seriesLabelPosition', modelName: '@Position', displayName: 'Position', editor: editorTemplates.getEditor('comboboxPositionSeriesLabel'), valuesArray: [],
    localizationId: 'DevExpress.XtraCharts.PointSeriesLabel.Position'
};
const seriesLabelTextPattern = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, textPattern, { localizable: true });
const seriesLabelSerializationsInfo = [typeNameNotShow, seriesLabelTextPattern, textAlignment, maxLineCount, maxWidth, textOrientation, resolveOverlappingMode,
    lineColor, lineVisibility, lineLength, antialiasing, backColor, textColor, position, showForZeroValues, font8, _series_lineStyle, border];

;// ./node_modules/devexpress-reporting/chart/components/series/_fillStyle.js





class FillStyle extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(info, gradientTypeName) {
        return (model, serializer) => {
            return new FillStyle(model || {}, info, gradientTypeName, serializer);
        };
    }
    static toJson(model, serializer, refs) {
        return serializer.serialize(model, undefined, refs);
    }
    _optionsTypeMap(unitType) {
        switch (unitType) {
            case 'Gradient': return this.gradientTypeName;
            case 'Hatch': return 'HatchFillOptions';
            default: return undefined;
        }
    }
    constructor(model, info, gradientTypeName, serializer) {
        super(model, serializer, info);
        this.gradientTypeName = gradientTypeName;
        this.updateOptions(this.fillMode(), serializer, model['Options']);
        this._disposables.push(this.fillMode.subscribe((newValue) => {
            this.updateOptions(newValue, serializer, {});
        }));
    }
    isPropertyVisible(propertyName) {
        return propertyName !== 'options' || (propertyName === 'options' && this[propertyName]());
    }
    updateOptions(fillMode, serializer, optionsObject) {
        const newObject = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@TypeNameSerializable': this._optionsTypeMap(fillMode) }, optionsObject);
        const optionsInfo = fillModeMapper[fillMode];
        this.options(new external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel(newObject, serializer, optionsInfo));
    }
}
const viewFillMode = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode', localizationId: 'DevExpress.XtraCharts.FillStyle2D.FillMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Gradient', displayValue: 'Gradient', localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }, { value: 'Hatch', displayValue: 'Hatch', localizationId: 'DevExpress.XtraCharts.FillMode.Hatch' }], defaultVal: 'Empty'
};
const fillStyleInfo = [viewFillMode, fillStyleOptionsSerialize, tag];
const stripFillStyle = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.Strip.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'RectangleGradientFillOptions'), toJsonObject: FillStyle.toJson };

;// ./node_modules/devexpress-reporting/chart/components/models/_stripLimit.js







class StripLimitViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return new StripLimitViewModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        value._axisValue(value.enabled() ? value.axisValue() : null);
        return serializer.serialize(value, undefined, refs);
    }
    constructor(model, serializer, info) {
        super(model, serializer, info || stripLimitSerializationsInfo);
        this.axisValue = external_ko_namespaceObject.observable(this._axisValue());
        this.getInfo = () => {
            if (!this.enabled()) {
                const newInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], stripLimitSerializationsInfo);
                const axisValueProperty = newInfo.filter((info) => { return info.propertyName === 'axisValue'; })[0];
                axisValueProperty.visible = false;
                return newInfo;
            }
            return stripLimitSerializationsInfo;
        };
    }
    getExpressionProperties() {
        return ['AxisValue'];
    }
}
const stripLimitEnable = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.StripLimit.Enabled' };
const stripLimitSerializationsInfo = [axisValueSerializable, axisValue, stripLimitEnable, tag];
const stripMinLimitInfo = { propertyName: 'minLimit', modelName: 'MinLimit', displayName: 'Min Limit', from: StripLimitViewModel.from, toJsonObject: StripLimitViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.Strip.MinLimit' }, stripMaxLimitInfo = { propertyName: 'maxLimit', modelName: 'MaxLimit', displayName: 'Max Limit', from: StripLimitViewModel.from, toJsonObject: StripLimitViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.Strip.MaxLimit' };

;// ./node_modules/devexpress-reporting/chart/components/models/_strip.js







class StripViewModel extends ChartElementCollectionItemBase {
    static from(model, serializer) {
        return new StripViewModel(model || {}, null, serializer);
    }
    constructor(model, parent, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, StripViewModel.initialModel, model), parent, serializer, stripSerializationsInfo);
    }
    getExpressionProperties() {
        return ['LegendText', 'AxisLabelText'];
    }
    getChildComponents() {
        return [
            { component: external_ko_namespaceObject.unwrap(this.minLimit), path: 'MinLimit' },
            { component: external_ko_namespaceObject.unwrap(this.maxLimit), path: 'MaxLimit' },
        ];
    }
}
StripViewModel.initialModel = {
    'MinLimit': {
        '@AxisValueSerializable': '0'
    },
    'MaxLimit': {
        '@AxisValueSerializable': '1'
    }
};
StripViewModel.prefix = 'Strip ';

const stripSerializationsInfo = [visible, color, showInLegend, legendName, legendText, showAxisLabel, axisLabelText, _common_name, tag, stripFillStyle, stripMinLimitInfo, stripMaxLimitInfo];

;// ./node_modules/devexpress-reporting/chart/components/axis/_axisXYViewModel.js








class AxisXYViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(info) {
        return (model, serializer) => {
            return new AxisXYViewModel(model || {}, serializer, info);
        };
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, undefined, refs);
    }
    getChildComponents() {
        return [
            { component: this.axisTitle, path: 'Title' },
            { component: external_ko_namespaceObject.unwrap(this.strips), path: 'Strips' },
            { component: external_ko_namespaceObject.unwrap(this.constantLines), path: 'ConstantLines' },
            { component: external_ko_namespaceObject.unwrap(this.wholeRange), path: 'WholeRange' }
        ];
    }
    constructor(model, serializer, info) {
        super(model, serializer, info || axisXYSerializationsInfo);
        this.constantLines = deserializeModelArray(model && model['ConstantLines'], (item, parent) => { return new ConstantLineViewModel(item, parent, serializer); }, ConstantLineViewModel.prefix);
        this.scaleBreaks = deserializeModelArray(model && model['ScaleBreaks'], (item, parent) => { return new ScaleBreakViewModel(item, parent, serializer); }, ScaleBreakViewModel.prefix);
        this.strips = deserializeModelArray(model && model['Strips'], (item, parent) => { return new StripViewModel(item, parent, serializer); }, StripViewModel.prefix);
    }
}
const axisX = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'Primary Axis X', localizationId: 'DevExpress.XtraCharts.AxisX', defaultVal: {}, from: AxisXYViewModel.from([gridLinesAxisX, qualitativeScaleOptions].concat(axisXYSerializationsInfo)), toJsonObject: AxisXYViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const axisY = { propertyName: 'axisY', modelName: 'AxisY', displayName: 'Primary Axis Y', localizationId: 'DevExpress.XtraCharts.AxisY', defaultVal: {}, from: AxisXYViewModel.from([gridLinesAxisY].concat(axisXYSerializationsInfo)), toJsonObject: AxisXYViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };

;// ./node_modules/devexpress-reporting/chart/components/axis/_secondaryAxisViewModel.js



class SecondaryAxisViewModel extends AxisXYViewModel {
    constructor(model, parent, serializer) {
        super(model, serializer, secondaryAxisXYSerializationsInfo);
        initCollectionItem(this, parent)();
    }
    get axisID() {
        return this.parent().indexOf(this);
    }
}
SecondaryAxisViewModel.xPrefix = 'Secondary Axis X';
SecondaryAxisViewModel.yPrefix = 'Secondary Axis Y';


;// external "DevExpress.ui.dxSelectBox"
const external_DevExpress_ui_dxSelectBox_namespaceObject = DevExpress.ui.dxSelectBox;
var external_DevExpress_ui_dxSelectBox_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxSelectBox_namespaceObject);
;// ./node_modules/devexpress-reporting/designer/internal/_settings.js



const reportStorageWebIsRegister = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(false);
const limitation = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(false);
const orig_optionValuesEqual = (external_DevExpress_ui_dxSelectBox_default()).prototype['_optionValuesEqual'];
external_DevExpress_ui_dxSelectBox_default().redefine({
    _optionValuesEqual: function (optionName, oldValue, newValue) {
        if (optionName === 'value' && (oldValue instanceof external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel) && (newValue instanceof external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel)) {
            return oldValue === newValue;
        }
        return orig_optionValuesEqual.apply(this, arguments);
    }
});

;// external "DevExpress.Analytics.Serializer.Native"
const external_DevExpress_Analytics_Serializer_Native_namespaceObject = DevExpress.Analytics.Serializer.Native;
;// ./node_modules/devexpress-reporting/chart/widgets/_summaryFunctionEditor.js





class SummaryFunctionModel {
    static from(val) {
        let functionName = null, args = [];
        if (val) {
            functionName = val.split('(')[0];
            args = val.split('(')[1].split(')')[0].split(',');
            if (args[0] === '') {
                args = [];
            }
            else {
                args = args.map(x => x.split('[')[1].split(']')[0]);
            }
        }
        return new SummaryFunctionModel(functionName, args);
    }
    static toJson(value) {
        if (!value.functionName()) {
            return {};
        }
        return value.functionName() + '(' + value.args().map(x => '[' + x.value() + ']').join(',') + ')';
    }
    _updateArgs(functionName) {
        if (SummaryFunctionModel.availableItems.indexOf(functionName) !== -1) {
            if (functionName === 'COUNT' || !functionName) {
                this.args([]);
            }
            else if (this.args().length === 0) {
                this.args.push({ value: external_ko_namespaceObject.observable('') });
            }
            else if (this.args().length > 1) {
                this.args.splice(1, this.args().length - 1);
            }
        }
    }
    constructor(functionName, args) {
        this.functionName = external_ko_namespaceObject.observable();
        this.args = external_ko_namespaceObject.observableArray();
        this.functionName(functionName);
        this.args(args.map(x => { return { value: external_ko_namespaceObject.observable(x) }; }));
        this.functionName.subscribe((newVal) => {
            this._updateArgs(newVal);
        });
    }
}
SummaryFunctionModel.availableItems = ['SUM', 'MIN', 'MAX', 'AVERAGE', 'COUNT'];

class SummaryFunctionEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor {
    createViewModel() {
        const viewmodel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('actionsAreAvailable', external_ko_namespaceObject.unwrap(this.actionsAreAvailable))
            .generateProperty('add', () => this.add())
            .generateProperty('availableItems', this.getAvailableItems())
            .generateProperty('memberPadding', this.memberPadding)
            .generateProperty('argumentTemplateName', this.argumentTemplateName)
            .generateProperty('getLocalization', this.getLocalization)
            .generateProperty('remove', (index) => this.remove(index))
            .getViewModel();
        this.subscribeOnChanges(viewmodel, ['actionsAreAvailable']);
        return viewmodel;
    }
    constructor(modelPropertyInfo, level, parentDisabled) {
        super(modelPropertyInfo, level, parentDisabled);
        this.argumentTemplateName = external_ko_namespaceObject.bindingHandlers['displayNameExtender'] ? 'dxrd-field' : 'dxcd-field';
        this.actionsAreAvailable = external_ko_namespaceObject.observable(false);
        let subscription = null;
        this.memberPadding = { paddingLeft: (level + 1) * (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.propertiesGridEditorsPaddingLeft)() };
        this.subscribeProperty('_model', (newVal) => {
            subscription && subscription.dispose();
            subscription = external_ko_namespaceObject.computed(() => {
                this.actionsAreAvailable(this.value().functionName() && SummaryFunctionModel.availableItems.indexOf(this.value() && this.value().functionName()) === -1);
            });
        });
    }
    getLocalization(displayName, localizationId) {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(displayName, localizationId);
    }
    add() {
        this.value().args.push({ value: external_ko_namespaceObject.observable('') });
    }
    remove(index) {
        this.value().args.splice(index, 1);
    }
    getAvailableItems() {
        return SummaryFunctionModel.availableItems;
    }
}

;// ./node_modules/devexpress-reporting/chart/components/series/_summaryOptionsMetaData.js





const summaryFunctionSerializationInfo = {
    propertyName: 'summaryFunction', displayName: 'Summary Function', modelName: '@SummaryFunction', from: SummaryFunctionModel.from, toJsonObject: SummaryFunctionModel.toJson,
    editor: editorTemplates.getEditor('summaryFunction'), localizationId: 'DevExpress.XtraCharts.SummaryOptionsBase.SummaryFunction'
};
const summaryOptionsSerializationInfoArray = [
    summaryFunctionSerializationInfo, tag
];
const numericSummaryOptionsSerializationInfoArray = summaryOptionsSerializationInfoArray.concat([
    { propertyName: 'measureUnit', modelName: '@MeasureUnit', displayName: 'Measure Unit', localizationId: 'DevExpress.XtraCharts.NumericSummaryOptions.MeasureUnit', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    { propertyName: 'useAxisMeasureUnit', modelName: '@UseAxisMeasureUnit', displayName: 'Use Axis Measure Unit', localizationId: 'DevExpress.XtraCharts.NumericSummaryOptions.UseAxisMeasureUnit', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
]);
const dateTimeSummaryOptionsSerializationInfoArray = summaryOptionsSerializationInfoArray.concat([
    {
        propertyName: 'measureUnit', modelName: '@MeasureUnit', displayName: 'Measure Unit', localizationId: 'DevExpress.XtraCharts.DateTimeSummaryOptions.MeasureUnit', defaultVal: 'Day', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'Millisecond', displayValue: 'Millisecond', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Millisecond' },
            { value: 'Second', displayValue: 'Second', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Second' },
            { value: 'Minute', displayValue: 'Minute', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Minute' },
            { value: 'Hour', displayValue: 'Hour', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Hour' },
            { value: 'Day', displayValue: 'Day', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Day' },
            { value: 'Week', displayValue: 'Week', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Week' },
            { value: 'Month', displayValue: 'Month', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Month' },
            { value: 'Quarter', displayValue: 'Quarter', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Quarter' },
            { value: 'Year', displayValue: 'Year', localizationId: 'DevExpress.XtraCharts.DateTimeMeasureUnit.Year' },
        ]
    },
    { propertyName: 'measureUnitMultiplier', modelName: '@MeasureUnitMultiplier', displayName: 'Measure Unit Multiplier', localizationId: 'DevExpress.XtraCharts.DateTimeSummaryOptions.MeasureUnitMultiplier', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    { propertyName: 'useAxisMeasureUnit', modelName: '@UseAxisMeasureUnit', displayName: 'Use Axis Measure Unit', localizationId: 'DevExpress.XtraCharts.DateTimeSummaryOptions.UseAxisMeasureUnit', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }
]);

;// ./node_modules/devexpress-reporting/chart/components/series/_summaryOptions.js


class SummaryOptionsModelBase {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model || {});
    }
    getInfo() {
        return summaryOptionsSerializationInfoArray;
    }
    resetAllProperties() {
        this.getInfo().forEach(info => {
            if ('defaultVal' in info) {
                this[info.propertyName](info.defaultVal);
            }
            else if (info.propertyName === 'summaryFunction') {
                this.summaryFunction.functionName(null);
                this.summaryFunction.args([]);
            }
            else {
                this[info.propertyName](null);
            }
        });
    }
}
class QualitativeSummaryOptionsModel extends SummaryOptionsModelBase {
    static from(model, serializer) {
        return new QualitativeSummaryOptionsModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, summaryOptionsSerializationInfoArray, refs);
    }
    constructor(model, serializer) {
        super(model || {}, serializer);
    }
}
class NumericSummaryOptionsModel extends SummaryOptionsModelBase {
    static from(model, serializer) {
        return new NumericSummaryOptionsModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, numericSummaryOptionsSerializationInfoArray, refs);
    }
    constructor(model, serializer) {
        super(model || {}, serializer);
    }
    getInfo() {
        return numericSummaryOptionsSerializationInfoArray;
    }
}
class DateTimeSummaryOptionsModel extends SummaryOptionsModelBase {
    static from(model, serializer) {
        return new DateTimeSummaryOptionsModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, dateTimeSummaryOptionsSerializationInfoArray, refs);
    }
    constructor(model, serializer) {
        super(model || {}, serializer);
    }
    getInfo() {
        return dateTimeSummaryOptionsSerializationInfoArray;
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/meta/_chart.js











const sideBySideEqualBarWidth = { propertyName: 'equalBarWidth', modelName: '@SideBySideEqualBarWidth', displayName: 'Side By Side Equal Bar Width', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, sideBySideBarDistanceFixed = { propertyName: 'barDistanceFixed', modelName: '@SideBySideBarDistanceFixed', defaultVal: 1 }, sideBySideBarDistance = { propertyName: 'barDistance', modelName: '@SideBySideBarDistance', defaultVal: 0.0 };
const commonSeriesPointsSortingKeys = [{ value: 'Argument', displayValue: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesSelectionMode.Argument' }, { value: 'Value_1', displayValue: 'Value', localizationId: 'ChartStringId.WizValueLevelValue' }], bubbleSeriesPointsSortingKeys = [{ value: 'Argument', displayValue: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesSelectionMode.Argument' }, { value: 'Value_1', displayValue: 'Value', localizationId: 'ChartStringId.WizValueLevelValue' }, { value: 'Value_2', displayValue: 'Weight', localizationId: 'ChartStringId.WizValueLevelWeight' }], rangeSeriesPointsSortingKeys = [{ value: 'Argument', displayValue: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesSelectionMode.Argument' }, { value: 'Value_1', displayValue: 'Value_1', localizationId: 'ChartStringId.WizValueLevelValue_1' }, { value: 'Value_2', displayValue: 'Value_2', localizationId: 'ChartStringId.WizValueLevelValue_2' }], stockSeriesPointsSortingKeys = [{ value: 'Argument', displayValue: 'Argument', localizationId: 'DevExpress.XtraCharts.SeriesSelectionMode.Argument' }, { value: 'Value_1', displayValue: 'Low', localizationId: 'ChartStringId.WizValueLevelLow' }, { value: 'Value_2', displayValue: 'High', localizationId: 'ChartStringId.WizValueLevelHigh' }, { value: 'Value_3', displayValue: 'Open', localizationId: 'ChartStringId.WizValueLevelOpen' }, { value: 'Value_4', displayValue: 'Close', localizationId: 'ChartStringId.WizValueLevelClose' }];
const _chart_enabled = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' }, mode = {
    propertyName: 'mode', modelName: '@Mode', displayName: 'Mode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Count', valuesArray: [{ value: 'Count', displayValue: 'Count', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: 'ThresholdValue', displayValue: 'Threshold Value', localizationId: 'DevExpress.XtraCharts.TopNMode.ThresholdValue' }, { value: 'ThresholdPercent', displayValue: 'Threshold Percent', localizationId: 'DevExpress.XtraCharts.TopNOptions.ThresholdPercent' }],
    localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Mode'
}, count = { propertyName: 'count', modelName: '@Count', displayName: 'Count', defaultVal: 5, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, showOthers = { propertyName: 'showOthers', modelName: '@ShowOthers', displayName: 'Show Others', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.TopNOptions.ShowOthers' }, othersArgument = { propertyName: 'othersArgument', modelName: '@OthersArgument', displayName: 'Others Argument', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraCharts.TopNOptions.OthersArgument' }, thresholdValue = { propertyName: 'thresholdValue', modelName: '@ThresholdValue', displayName: 'Threshold Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.TopNMode.ThresholdValue' }, thresholdPercent = { propertyName: 'thresholdPercent', modelName: '@ThresholdPercent', displayName: 'Threshold Percent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.TopNOptions.ThresholdPercent' };
const stackedBarPositionValues = [
    { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' },
    { value: 'TopInside', displayValue: 'Top Inside', localizationId: 'DevExpress.XtraCharts.BarSeriesLabelPosition.TopInside' },
    { value: 'BottomInside', displayValue: 'Bottom Inside', localizationId: 'DevExpress.XtraCharts.BarSeriesLabelPosition.BottomInside' }
];
const barPositionValues = [
    { value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' },
    ...stackedBarPositionValues
];
const piePositionValues = [
    { value: 'Inside', displayValue: 'Inside', localizationId: 'ChartStringId.WizPieSeriesLabelPositionInside' },
    { value: 'Outside', displayValue: 'Outside', localizationId: 'ChartStringId.WizPieSeriesLabelPositionOutside' },
    { value: 'Radial', displayValue: 'Radial', localizationId: 'ChartStringId.WizPieSeriesLabelPositionRadial' },
    { value: 'Tangent', displayValue: 'Tangent', localizationId: 'ChartStringId.WizPieSeriesLabelPositionTangent' },
    { value: 'TwoColumns', displayValue: 'Two Columns', localizationId: 'ChartStringId.WizPieSeriesLabelPositionTwoColumns' }
];
const funnelPositionValues = [
    { value: 'LeftColumn', displayValue: 'Left Column', localizationId: 'ChartStringId.WizFunnelSeriesLabelPositionLeftColumn' },
    { value: 'Left', displayValue: 'Left', localizationId: 'ChartStringId.WizFunnelSeriesLabelPositionLeft' },
    { value: 'Center', displayValue: 'Center', localizationId: 'ChartStringId.WizFunnelSeriesLabelPositionCenter' },
    { value: 'Right', displayValue: 'Right', localizationId: 'ChartStringId.WizFunnelSeriesLabelPositionRight' },
    { value: 'RightColumn', displayValue: 'Right Column', localizationId: 'ChartStringId.WizFunnelSeriesLabelPositionRightColumn' }
];
const waterfallPositionValues = [
    { value: 'Auto', displayValue: 'Auto', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesLabelPosition.Auto' },
    { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesLabelPosition.Center' },
    { value: 'InsideEnd', displayValue: 'Insid End', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesLabelPosition.InsideEnd' },
    { value: 'InsideStart', displayValue: 'Inside Start', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesLabelPosition.InsideStart' },
];
const markerVisibility = { propertyName: 'markerVisibility', modelName: '@MarkerVisibility', displayName: 'Marker Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.MarkerVisibility' }, markerKind = {
    propertyName: 'kind', modelName: '@Kind', displayName: 'Kind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Square', displayValue: 'Square', localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' }, { value: 'Diamond', displayValue: 'Diamond', localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' }, { value: 'Triangle', displayValue: 'Triangle', localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' }, { value: 'InvertedTriangle', displayValue: 'Inverted Triangle', localizationId: 'DevExpress.XtraCharts.MarkerKind.InvertedTriangle' }, { value: 'Circle', displayValue: 'Circle', localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' }, { value: 'Plus', displayValue: 'Plus', localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' }, { value: 'Cross', displayValue: 'Cross', localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' }, { value: 'Star', displayValue: 'Star', localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' }, { value: 'Pentagon', displayValue: 'Pentagon', localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' }, { value: 'Hexagon', displayValue: 'Hexagon', localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' }],
    localizationId: 'DevExpress.XtraCharts.MarkerBase.Kind'
}, borderVisible = { propertyName: 'borderVisible', modelName: '@BorderVisible', displayName: 'Border Visible', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, localizationId: 'DevExpress.XtraCharts.MarkerBase.BorderVisible' };
const direction = {
    propertyName: 'direction', modelName: '@Direction', displayName: 'Direction', defaultVal: 'TopToBottom', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'TopToBottom', displayValue: 'Top To Bottom', localizationId: 'DevExpress.XtraCharts.TextOrientation.TopToBottom' }, { value: 'BottomToTop', displayValue: 'Bottom To Top', localizationId: 'DevExpress.XtraCharts.TextOrientation.BottomToTop' }, { value: 'LeftToRight', displayValue: 'Left To Right' }, { value: 'RightToLeft', displayValue: 'Right To Left' }],
    localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Direction'
}, alignmentVertical = {
    propertyName: 'alignmentVertical', modelName: '@AlignmentVertical', displayName: 'Vertical Alignment', defaultVal: 'Top', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: 'TopOutside', displayValue: 'Top Outside', localizationId: 'DevExpress.XtraCharts.LegendAlignmentVertical.TopOutside' }, { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: 'Bottom', displayValue: 'Bottom', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: 'BottomOutside', displayValue: 'Bottom Outside', localizationId: 'DevExpress.XtraCharts.LegendAlignmentVertical.BottomOutside' }],
    localizationId: 'DevExpress.XtraCharts.Legend.AlignmentVertical'
}, alignmentHorizontal = {
    propertyName: 'alignmentHorizontal', modelName: '@AlignmentHorizontal', displayName: 'Horizontal Alignment', defaultVal: 'RightOutside', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Left', displayValue: 'Left', localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: 'LeftOutside', displayValue: 'Left Outside', localizationId: 'DevExpress.XtraCharts.LegendAlignmentHorizontal.LeftOutside' }, { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.XtraCharts.FunnelSeriesLabelPosition.Center' }, { value: 'Right', displayValue: 'Right', localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }, { value: 'RightOutside', displayValue: 'Right Outside', localizationId: 'DevExpress.XtraCharts.LegendAlignmentHorizontal.RightOutside' }],
    localizationId: 'DevExpress.XtraCharts.Legend.AlignmentHorizontal'
};
const padding = { propertyName: 'chartPadding', modelName: 'Padding', displayName: 'Padding', info: [left, right, _common_top, bottom], editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRBarCode.PaddingInfo' };
const lineMarkerOptionsSerializationsInfo = [color, colorEach, markerVisibility], lineMarker = { propertyName: 'lineMarker', modelName: 'LineMarker', displayName: 'Line Marker', info: lineMarkerOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const topNOptionsSerializationsInfo = [_chart_enabled, mode, count, thresholdPercent, thresholdValue, showOthers, othersArgument], topNOptions = { propertyName: 'topNOptions', modelName: 'TopNOptions', displayName: 'Top N Options', info: topNOptionsSerializationsInfo, defaultVal: {}, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.SeriesBase.TopNOptions' };
const autoBindingSettingsEnabled = { propertyName: 'autoBindingSettingsEnabled', modelName: '@AutoBindingSettingsEnabled', displayName: 'Auto Binding Settings Enabled', localizationId: 'DevExpress.XtraCharts.PivotGridDataSourceOptions.AutoBindingSettingsEnabled', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }, autoLayoutSettingsEnabled = { propertyName: 'autoLayoutSettingsEnabled', modelName: '@AutoLayoutSettingsEnabled', displayName: 'Auto Layout Settings Enabled', localizationId: 'DevExpress.XtraCharts.PivotGridDataSourceOptions.AutoLayoutSettingsEnabled', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const pivotGridDataSourceOptions = { propertyName: 'pivotGridDataSourceOptions', modelName: 'PivotGridDataSourceOptions', displayName: 'Pivot Grid Data Source Options', localizationId: 'DevExpress.XtraReports.UI.XRChart.PivotGridDataSourceOptions', info: [autoBindingSettingsEnabled, autoLayoutSettingsEnabled], editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const dataFiltersConjunctionMode = {
    modelName: '@DataFiltersConjunctionMode', defaultVal: 'And', displayName: 'Conjunction Mode', propertyName: 'dataFiltersConjunctionMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [{ value: 'And', displayValue: 'And', localizationId: 'DevExpress.XtraCharts.ConjunctionTypes.And' }, { value: 'Or', displayValue: 'Or', localizationId: 'DevExpress.XtraCharts.ConjunctionTypes.Or' }],
    localizationId: 'DevExpress.XtraCharts.DataFilterCollection.ConjunctionMode'
};
const colorDataMember = { propertyName: 'colorDataMember', displayName: 'Color Data Member', defaultVal: '', modelName: '@ColorDataMember', editor: external_ko_namespaceObject.bindingHandlers['displayNameExtender'] ? external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') : editorTemplates.getEditor('fieldChart'), localizationId: 'DevExpress.XtraCharts.SeriesBase.ColorDataMember' };
const points = {
    propertyName: 'points', modelName: 'Points', displayName: 'Points', localizationId: 'DevExpress.XtraCharts.Series.Points',
    editor: editorTemplates.getEditor('points'), array: true
};
const createViewsArray = function (limitation) {
    const array = [];
    array.push({ value: 'SideBySideBarSeriesView', displayValue: 'Bar', localizationId: 'DevExpress.Sparkline.SparklineViewType.Bar' });
    array.push({ value: 'StackedBarSeriesView', displayValue: 'Bar Stacked', localizationId: 'ChartStringId.SvnStackedBar' });
    array.push({ value: 'FullStackedBarSeriesView', displayValue: 'Bar Stacked 100%', localizationId: 'ChartStringId.SvnFullStackedBar' });
    array.push({ value: 'SideBySideStackedBarSeriesView', displayValue: 'Side By Side Bar Stacked', localizationId: 'ChartStringId.SvnSideBySideStackedBar' });
    array.push({ value: 'SideBySideFullStackedBarSeriesView', displayValue: 'Side By Side Bar Stacked 100%', localizationId: 'ChartStringId.SvnSideBySideFullStackedBar' });
    array.push({ value: 'WaterfallSeriesView', displayValue: 'Waterfall', localizationId: 'ChartStringId.SvnWaterfall' });
    if (!limitation) {
        array.push({ value: 'SideBySideBar3DSeriesView', displayValue: 'Bar 3D', localizationId: 'ChartStringId.SvnSideBySideBar3D' });
        array.push({ value: 'StackedBar3DSeriesView', displayValue: 'Bar 3D Stacked', localizationId: 'ChartStringId.SvnStackedBar3D' });
        array.push({ value: 'FullStackedBar3DSeriesView', displayValue: 'Bar 3D Stacked 100%', localizationId: 'ChartStringId.SvnFullStackedBar3D' });
        array.push({ value: 'SideBySideStackedBar3DSeriesView', displayValue: 'Side By Side Bar 3D Stacked ' });
        array.push({ value: 'SideBySideFullStackedBar3DSeriesView', displayValue: 'Side By Side Bar 3D Stacked 100%', localizationId: 'ChartStringId.SvnSideBySideFullStackedBar3D' });
        array.push({ value: 'ManhattanBarSeriesView', displayValue: 'Manhattan Bar', localizationId: 'ChartStringId.SvnManhattanBar' });
    }
    array.push({ value: 'PointSeriesView', displayValue: 'Point', localizationId: 'ASPxReportsStringId.ReportDesigner_FontOptions_Unit_Point' });
    array.push({ value: 'BubbleSeriesView', displayValue: 'Bubble', localizationId: 'ChartStringId.SvnBubble' });
    array.push({ value: 'LineSeriesView', displayValue: 'Line', localizationId: 'DevExpress.XtraReports.UI.XRLine' });
    array.push({ value: 'StackedLineSeriesView', displayValue: 'Line Stacked', localizationId: 'ChartStringId.SvnStackedLine' });
    array.push({ value: 'FullStackedLineSeriesView', displayValue: 'Line Stacked 100%', localizationId: 'ChartStringId.SvnFullStackedLine' });
    array.push({ value: 'StepLineSeriesView', displayValue: 'Step Line', localizationId: 'ChartStringId.SvnStepLine' });
    array.push({ value: 'SplineSeriesView', displayValue: 'Spline', localizationId: 'ChartStringId.SvnSpline' });
    array.push({ value: 'ScatterLineSeriesView', displayValue: 'Scatter Line', localizationId: 'ChartStringId.CmdCreateScatterLineChartMenuCaption' });
    array.push({ value: 'SwiftPlotSeriesView', displayValue: 'Swift Plot', localizationId: 'ChartStringId.SvnSwiftPlot' });
    if (!limitation) {
        array.push({ value: 'Line3DSeriesView', displayValue: 'Line 3D', localizationId: 'ChartStringId.SvnLine3D' });
        array.push({ value: 'StackedLine3DSeriesView', displayValue: 'Line 3D Stacked', localizationId: 'ChartStringId.SvnStackedLine3D' });
        array.push({ value: 'FullStackedLine3DSeriesView', displayValue: 'Line 3D Stacked 100%', localizationId: 'ChartStringId.SvnFullStackedLine3D' });
        array.push({ value: 'StepLine3DSeriesView', displayValue: 'Step Line 3D', localizationId: 'ChartStringId.SvnStepLine3D' });
        array.push({ value: 'Spline3DSeriesView', displayValue: 'Spline 3D', localizationId: 'ChartStringId.SvnSpline3D' });
    }
    array.push({ value: 'PieSeriesView', displayValue: 'Pie', localizationId: 'ChartStringId.CmdCreatePieChartMenuCaption' });
    array.push({ value: 'DoughnutSeriesView', displayValue: 'Doughnut', localizationId: 'ChartStringId.CmdCreateDoughnutChartMenuCaption' });
    array.push({ value: 'NestedDoughnutSeriesView', displayValue: 'Nested Doughnut', localizationId: 'ChartStringId.CmdCreateNestedDoughnutChartMenuCaption' });
    if (!limitation) {
        array.push({ value: 'Pie3DSeriesView', displayValue: 'Pie 3D', localizationId: 'ChartStringId.SvnPie3D' });
        array.push({ value: 'Doughnut3DSeriesView', displayValue: 'Doughnut 3D', localizationId: 'ChartStringId.SvnDoughnut3D' });
    }
    array.push({ value: 'FunnelSeriesView', displayValue: 'Funnel', localizationId: 'ChartStringId.SvnFunnel' });
    if (!limitation) {
        array.push({ value: 'Funnel3DSeriesView', displayValue: 'Funnel 3D', localizationId: 'ChartStringId.SvnFunnel3D' });
    }
    array.push({ value: 'AreaSeriesView', displayValue: 'Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.Area' });
    array.push({ value: 'StackedAreaSeriesView', displayValue: 'Area Stacked', localizationId: 'ChartStringId.SvnStackedArea' });
    array.push({ value: 'FullStackedAreaSeriesView', displayValue: 'Area Stacked 100%', localizationId: 'ChartStringId.SvnFullStackedArea' });
    array.push({ value: 'StepAreaSeriesView', displayValue: 'Step Area', localizationId: 'ChartStringId.SvnStepArea' });
    array.push({ value: 'SplineAreaSeriesView', displayValue: 'Spline Area', localizationId: 'ChartStringId.SvnSplineArea' });
    array.push({ value: 'StackedSplineAreaSeriesView', displayValue: 'Spline Area Stacked', localizationId: 'ChartStringId.SvnSplineStackedArea' });
    array.push({ value: 'FullStackedSplineAreaSeriesView', displayValue: 'Spline Area Stacked 100%', localizationId: 'ChartStringId.SvnSplineFullStackedArea' });
    if (!limitation) {
        array.push({ value: 'Area3DSeriesView', displayValue: 'Area 3D', localizationId: 'ChartStringId.SvnArea3D' });
        array.push({ value: 'StackedArea3DSeriesView', displayValue: 'Area 3D Stacked', localizationId: 'ChartStringId.SvnStackedArea3D' });
        array.push({ value: 'FullStackedArea3DSeriesView', displayValue: 'Area 3D Stacked 100%', localizationId: 'ChartStringId.SvnFullStackedArea3D' });
        array.push({ value: 'StepArea3DSeriesView', displayValue: 'Step 3D Area' });
        array.push({ value: 'SplineArea3DSeriesView', displayValue: 'Spline 3D Area' });
        array.push({ value: 'StackedSplineArea3DSeriesView', displayValue: 'Spline Area 3D Stacked', localizationId: 'ChartStringId.SvnSplineAreaStacked3D' });
        array.push({ value: 'FullStackedSplineArea3DSeriesView', displayValue: 'Spline Area 3D Stacked 100%', localizationId: 'ChartStringId.SvnSplineAreaFullStacked3D' });
    }
    array.push({ value: 'OverlappedRangeBarSeriesView', displayValue: 'Range Bar', localizationId: 'ChartStringId.SvnOverlappedRangeBar' });
    array.push({ value: 'SideBySideRangeBarSeriesView', displayValue: 'Side By Side Range Bar', localizationId: 'ChartStringId.SvnSideBySideRangeBar' });
    array.push({ value: 'RangeAreaSeriesView', displayValue: 'Range Area', localizationId: 'ChartStringId.SvnRangeArea' });
    if (!limitation) {
        array.push({ value: 'RangeArea3DSeriesView', displayValue: 'Range Area 3D', localizationId: 'ChartStringId.SvnRangeArea3D' });
    }
    array.push({ value: 'RadarPointSeriesView', displayValue: 'Radar Point', localizationId: 'ChartStringId.SvnRadarPoint' });
    array.push({ value: 'RadarLineSeriesView', displayValue: 'Radar Line', localizationId: 'ChartStringId.SvnRadarLine' });
    array.push({ value: 'RadarAreaSeriesView', displayValue: 'Radar Area', localizationId: 'ChartStringId.CmdCreateRadarAreaChartMenuCaption' });
    array.push({ value: 'PolarPointSeriesView', displayValue: 'Polar Point', localizationId: 'ChartStringId.SvnPolarPoint' });
    array.push({ value: 'PolarLineSeriesView', displayValue: 'Polar Line', localizationId: 'ChartStringId.CmdCreatePolarLineChartMenuCaption' });
    array.push({ value: 'PolarAreaSeriesView', displayValue: 'Polar Area', localizationId: 'ChartStringId.SvnPolarArea' });
    array.push({ value: 'StockSeriesView', displayValue: 'Stock Series' });
    array.push({ value: 'CandleStickSeriesView', displayValue: 'Candle Stick', localizationId: 'ChartStringId.CmdCreateCandleStickChartMenuCaption' });
    array.push({ value: 'OverlappedGanttSeriesView', displayValue: 'Gantt', localizationId: 'ChartStringId.CmdGanttGroupPlaceHolderMenuCaption' });
    array.push({ value: 'SideBySideGanttSeriesView', displayValue: 'Side By Side Gantt', localizationId: 'ChartStringId.SvnSideBySideGantt' });
    array.push({ value: 'BoxPlotSeriesView', displayValue: 'Box Plot', localizationId: 'ChartStringId.SvnBoxPlot' });
    return array;
};
const viewBindableSerializationInfo = {
    propertyName: 'viewBindable', displayName: 'View', editor: editorTemplates.getEditor('views'), valuesArray: createViewsArray(limitation()),
    localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View'
};
const qualitativeSummaryOptions = { propertyName: 'qualitativeSummaryOptions', modelName: 'QualitativeSummaryOptions', displayName: 'Qualitative Summary Options', localizationId: 'DevExpress.XtraCharts.SeriesBase.QualitativeSummaryOptions', info: summaryOptionsSerializationInfoArray, from: QualitativeSummaryOptionsModel.from, toJsonObject: QualitativeSummaryOptionsModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const numericSummaryOptions = { propertyName: 'numericSummaryOptions', modelName: 'NumericSummaryOptions', displayName: 'Numeric Summary Options', localizationId: 'DevExpress.XtraCharts.SeriesBase.NumericSummaryOptions', info: numericSummaryOptionsSerializationInfoArray, from: NumericSummaryOptionsModel.from, toJsonObject: NumericSummaryOptionsModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const dateTimeSumaryOptions = { propertyName: 'dateTimeSummaryOptions', modelName: 'DateTimeSummaryOptions', displayName: 'Date-Time Summary Options', localizationId: 'DevExpress.XtraCharts.SeriesBase.DateTimeSummaryOptions', info: dateTimeSummaryOptionsSerializationInfoArray, from: DateTimeSummaryOptionsModel.from, toJsonObject: DateTimeSummaryOptionsModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const seriesSerializable = { propertyName: 'series', modelName: 'SeriesSerializable', displayName: 'Series', array: true, editor: editorTemplates.getEditor('collection'), localizationId: 'DevExpress.XtraReports.UI.XRChart.Series' };
const seriesDataMember = { propertyName: 'seriesDataMember', modelName: '@SeriesDataMember', displayName: 'Series Data Member', editor: external_ko_namespaceObject.bindingHandlers['displayNameExtender'] ? external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') : editorTemplates.getEditor('fieldChart'), localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesDataMember' };
const textArea = { propertyName: 'text', modelName: '@Text', displayName: 'Text', localizationId: 'DevExpress.XtraReports.UI.XRControl.Text', localizable: true, defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('stringArray') };
const _chart_enableAntialiasing = { propertyName: 'enableAntialiasing', modelName: '@EnableAntialiasing', displayName: 'Enable Antialiasing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.TitleBase.EnableAntialiasing', defaultVal: 'Default' };
const emptyChartTextSerializationsInfo = [textArea, font12, textColor, _chart_enableAntialiasing, tag];
const emptyChartText = { propertyName: 'emptyChartText', modelName: 'EmptyChartText', displayName: 'Empty Chart Text', info: emptyChartTextSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), type: ChartComponentModelWithText };
const smallChartText = { propertyName: 'smallChartText', modelName: 'SmallChartText', displayName: 'Small Chart Text', info: emptyChartTextSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), type: ChartComponentModelWithText };
const titles = { propertyName: 'titles', modelName: 'Titles', displayName: 'Titles', localizationId: 'DevExpress.XtraReports.UI.XRChart.Titles', array: true, editor: editorTemplates.getEditor('collection') };
const markerMode = {
    propertyName: 'markerMode', modelName: '@MarkerMode', displayName: 'Marker Mode', localizationId: 'DevExpress.XtraCharts.Legend.MarkerMode', defaultVal: 'Marker', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Marker', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Marker', 'DevExpress.XtraCharts.LegendMarkerMode.Marker') }, { value: 'CheckBox', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Check Box', 'DevExpress.XtraCharts.LegendMarkerMode.CheckBox') }, { value: 'CheckBoxAndMarker', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Check Box and Marker', 'DevExpress.XtraCharts.LegendMarkerMode.CheckBoxAndMarker') }, { value: 'MarkerAndCheckBox', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Marker and Check Box', 'DevExpress.XtraCharts.LegendMarkerMode.MarkerAndCheckBox') }, { value: 'None', displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('None', 'DevExpress.XtraCharts.LegendMarkerMode.None') }]
}, markerOffset = { propertyName: 'markerOffset', modelName: '@MarkerOffset', displayName: 'Marker Offset', localizationId: 'DevExpress.XtraCharts.Legend.MarkerOffset', defaultVal: 2, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const legendTitleSerializationsInfo = [font18, margin, tag, visibility].concat(titleSerializationsInfo);
const legendTitle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, title, { info: legendTitleSerializationsInfo });
const legendSerializationsInfo = [textColor, backColor, direction, alignmentVertical, alignmentHorizontal, visibility, markerMode, markerOffset, legendTitle, border, margin, padding, font8];
const additionalLegendSerializationsInfo = [_common_name].concat(legendSerializationsInfo);
const legends = { propertyName: 'legends', modelName: 'Legends', displayName: 'Legends', localizationId: 'DevExpress.XtraReports.UI.XRChart.Legends', array: true, editor: editorTemplates.getEditor('collection') };
const appearanceName = {
    propertyName: 'appearanceName', modelName: '@AppearanceNameSerializable', displayName: 'Appearance Name', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Nature Colors', displayValue: 'Nature Colors', localizationId: 'ChartStringId.AppNatureColors' }, { value: 'Pastel Kit', displayValue: 'Pastel Kit', localizationId: 'ChartStringId.AppPastelKit' }, { value: 'In A Fog', displayValue: 'In A Fog', localizationId: 'ChartStringId.AppInAFog' }, { value: 'Terracotta Pie', displayValue: 'Terracotta Pie', localizationId: 'ChartStringId.PltTerracottaPie' }, { value: 'Northern Lights', displayValue: 'Northern Lights', localizationId: 'ChartStringId.PltNorthernLights' }, { value: 'Chameleon', displayValue: 'Chameleon', localizationId: 'ChartStringId.AppChameleon' }, { value: 'The Trees', displayValue: 'The Trees', localizationId: 'ChartStringId.PltTheTrees' }, { value: 'Light', displayValue: 'Light', localizationId: 'ChartStringId.AppLight' }, { value: 'Gray', displayValue: 'Gray', localizationId: 'ChartStringId.AppGray' }, { value: 'Dark', displayValue: 'Dark', localizationId: 'ChartStringId.AppDark' }, { value: 'Dark Flat', displayValue: 'Dark Flat', localizationId: 'ChartStringId.AppDarkFlat' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }],
    localizationId: 'DevExpress.XtraReports.UI.XRChart.AppearanceName'
};
const paletteName = {
    propertyName: 'paletteName', modelName: '@PaletteName', displayName: 'Palette Name', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }, { value: 'Nature Colors', displayValue: 'Nature Colors', localizationId: 'ChartStringId.AppNatureColors' }, { value: 'Pastel Kit', displayValue: 'Pastel Kit', localizationId: 'ChartStringId.AppPastelKit' }, { value: 'In A Fog', displayValue: 'In A Fog', localizationId: 'ChartStringId.AppInAFog' }, { value: 'Terracotta Pie', displayValue: 'Terracotta Pie', localizationId: 'ChartStringId.PltTerracottaPie' }, { value: 'Northern Lights', displayValue: 'Northern Lights', localizationId: 'ChartStringId.PltNorthernLights' }, { value: 'Chameleon', displayValue: 'Chameleon', localizationId: 'ChartStringId.AppChameleon' }, { value: 'The Trees', displayValue: 'The Trees', localizationId: 'ChartStringId.PltTheTrees' }, { value: 'Mixed', displayValue: 'Mixed', localizationId: 'ChartStringId.PltMixed' }, { value: 'Office', displayValue: 'Office', localizationId: 'ChartStringId.PltOffice' }, { value: 'Black and White', displayValue: 'Black and White', localizationId: 'ChartStringId.PltBlackAndWhite' }, { value: 'Grayscale', displayValue: 'Grayscale', localizationId: 'ChartStringId.PltGrayscale' }, { value: 'Apex', displayValue: 'Apex', localizationId: 'ChartStringId.PltApex' }, { value: 'Aspect', displayValue: 'Aspect', localizationId: 'ChartStringId.PltAspect' }, { value: 'Civic', displayValue: 'Civic', localizationId: 'ChartStringId.PltCivic' }, { value: 'Concourse', displayValue: 'Concourse', localizationId: 'ChartStringId.PltConcourse' }, { value: 'Equity', displayValue: 'Equity', localizationId: 'ChartStringId.PltEquity' }, { value: 'Flow', displayValue: 'Flow', localizationId: 'ChartStringId.PltFlow' }, { value: 'Foundry', displayValue: 'Foundry', localizationId: 'ChartStringId.PltFoundry' }, { value: 'Median', displayValue: 'Median', localizationId: 'DevExpress.XtraReports.UI.SortingSummaryFunction.Median' }, { value: 'Metro', displayValue: 'Metro', localizationId: 'ChartStringId.PltMetro' }, { value: 'Module', displayValue: 'Module', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Module' }, { value: 'Opulent', displayValue: 'Opulent', localizationId: 'ChartStringId.PltOpulent' }, { value: 'Oriel', displayValue: 'Oriel', localizationId: 'ChartStringId.PltOriel' }, { value: 'Origin', displayValue: 'Origin', localizationId: 'ChartStringId.PltOrigin' }, { value: 'Paper', displayValue: 'Paper', localizationId: 'ChartStringId.PltPaper' }, { value: 'Solstice', displayValue: 'Solstice', localizationId: 'ChartStringId.PltSolstice' }, { value: 'Technic', displayValue: 'Technic', localizationId: 'ChartStringId.PltTechnic' }, { value: 'Trek', displayValue: 'Trek', localizationId: 'ChartStringId.PltTrek' }, { value: 'Urban', displayValue: 'Urban', localizationId: 'ChartStringId.PltUrban' }, { value: 'Verve', displayValue: 'Verve', localizationId: 'ChartStringId.PltVerve' }, { value: 'Office 2013', displayValue: 'Office 2013', localizationId: 'ChartStringId.PltOffice2013' }, { value: 'Blue Warm', displayValue: 'Blue Warm', localizationId: 'ChartStringId.PltBlueWarm' }, { value: 'Blue', displayValue: 'Blue', localizationId: 'ChartStringId.PltBlue' }, { value: 'Blue II', displayValue: 'Blue II', localizationId: 'ChartStringId.PltBlueII' }, { value: 'Blue Green', displayValue: 'Blue Green', localizationId: 'ChartStringId.PltBlueGreen' }, { value: 'Green', displayValue: 'Green', localizationId: 'ChartStringId.PltGreen' }, { value: 'Green Yellow', displayValue: 'Green Yellow', localizationId: 'ChartStringId.PltGreenYellow' }, { value: 'Yellow', displayValue: 'Yellow', localizationId: 'ChartStringId.PltYellow' }, { value: 'Yellow Orange', displayValue: 'Yellow Orange', localizationId: 'ChartStringId.PltYellowOrange' }, { value: 'Orange', displayValue: 'Orange', localizationId: 'ChartStringId.PltOrange' }, { value: 'Orange Red', displayValue: 'Orange Red', localizationId: 'ChartStringId.PltOrangeRed' }, { value: 'Red Orange', displayValue: 'Red Orange', localizationId: 'ChartStringId.PltRedOrange' }, { value: 'Red', displayValue: 'Red', localizationId: 'ChartStringId.PltRed' }, { value: 'Red Violet', displayValue: 'Red Violet', localizationId: 'ChartStringId.PltRedViolet' }, { value: 'Violet', displayValue: 'Violet', localizationId: 'ChartStringId.PltViolet' }, { value: 'Violet II', displayValue: 'Violet II', localizationId: 'ChartStringId.PltVioletII' }, { value: 'Marquee', displayValue: 'Marquee', localizationId: 'ChartStringId.PltMarquee' }, { value: 'Slipstream', displayValue: 'Slipstream', localizationId: 'ChartStringId.PltSlipstream' }],
    localizationId: 'DevExpress.XtraReports.UI.XRChart.PaletteName'
};
const backImage = {
    propertyName: 'backImage', modelName: 'BackImage', displayName: 'Background Image', localizationId: 'DevExpress.XtraCharts.BackgroundImage', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: [
        { propertyName: 'tag', modelName: '@Tag', displayName: 'Tag', localizationId: 'DevExpress.XtraCharts.ChartElement.Tag', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
        { propertyName: 'stretch', modelName: '@Stretch', displayName: 'Stretch', localizationId: 'DevExpress.XtraCharts.BackgroundImage.Stretch', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: 'false', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
        { propertyName: 'image', modelName: '@Image', displayName: 'Image', localizationId: 'DevExpress.XtraCharts.ChartImage.Image', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('image') }
    ]
};

;// ./node_modules/devexpress-reporting/chart/components/series/_point.js







class SeriesPointModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static getSerializationValue(array, dateConverter) {
        return array.map((item) => {
            const value = external_ko_namespaceObject.unwrap(item);
            return (value instanceof Date) ? dateConverter(value) : value;
        });
    }
    static createNew(series) {
        return new SeriesPointModel(SeriesPointModel.getPointModelBySeries(series), series, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer());
    }
    static getPointModelBySeries(series) {
        let value = SeriesPointModel.getDefaultValueByScaleType(series.valueScaleType());
        value = (value instanceof Date) ? (0,external_DevExpress_Analytics_Internal_namespaceObject.formatDate)(value) : value.toString();
        for (let ind = 1; ind < series.valueDataMembers().arrayValueDataMemberNames.length; ind++) {
            value += (SeriesPointModel.separator + value);
        }
        const newModel = {
            '@ValuesSerializable': value
        };
        const argument = SeriesPointModel.getDefaultValueByScaleType(series.argumentScaleType());
        if (argument !== null && argument !== void 0) {
            newModel['@ArgumentSerializable'] = argument;
        }
        return newModel;
    }
    static getDefaultValueByScaleType(scaleType) {
        if (scaleType === 'Numerical') {
            return 0;
        }
        else if (scaleType === 'DateTime') {
            return new Date(new Date().setHours(0, 0, 0, 0));
        }
        return null;
    }
    static valueToJsonObject(value) {
        const result = SeriesPointModel.getSerializationValue(value, serializeDate);
        return (result instanceof Array) ? result.join(SeriesPointModel.separator) : result;
    }
    _valueDataMembersToString(valueDataMember, isDateType) {
        const result = [];
        valueDataMember.arrayValueDataMemberNames.forEach(name => {
            if (isDateType)
                result.push(serializeDate(valueDataMember[name]() || ''));
            result.push(valueDataMember[name]() || '');
        });
        return result.join(SeriesPointModel.separator);
    }
    _assignValueDataMembers(valueDataMember, value, defaultValue) {
        const values = (value || '').split(SeriesPointModel.separator);
        valueDataMember.arrayValueDataMemberNames.forEach((name, index) => {
            let newValue;
            if (this.isDateType && values[index]) {
                newValue = (0,external_DevExpress_Analytics_Internal_namespaceObject.parseDate)(values[index] || defaultValue, false, 'MM/dd/yyyy');
                if (!newValue)
                    newValue = parseDate(values[index] || defaultValue);
            }
            else {
                newValue = (values[index] || defaultValue);
            }
            if (valueDataMember[name])
                valueDataMember[name](newValue);
            else
                valueDataMember[name] = external_ko_namespaceObject.observable(newValue);
        });
    }
    constructor(model, series, serializer) {
        super(model, serializer, seriesPointSerializationsInfo);
        this.series = series;
        this.arrayValueDataMemberNames = series.valueDataMembers().arrayValueDataMemberNames;
        this._assignValueDataMembers(this, this.valuesSerializable(), null);
        this._disposables.push(this.series.valueDataMembers.subscribe((newValue) => { this.arrayValueDataMemberNames = newValue.arrayValueDataMemberNames; }));
        this._disposables.push(this.series.valueScaleType.subscribe((newValue) => {
            this._assignValueDataMembers(this, null, null);
        }));
        this.valuesSerializable = external_ko_namespaceObject.computed(() => {
            return this.arrayValueDataMemberNames.map(name => this[name]);
        });
        this.argumentSerializableInfo = external_ko_namespaceObject.computed(() => {
            const argumentScaleType = series.argumentScaleType();
            let editor = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text');
            if (argumentScaleType === 'Numerical') {
                editor = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric');
            }
            else if (argumentScaleType === 'DateTime') {
                editor = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('date');
            }
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, argumentSerializable, { editor: editor });
        });
        this.getInfo = () => {
            const dataMember = this.series && this.series.valueDataMembers();
            if (!dataMember)
                return seriesPointSerializationsInfo;
            const valueDataMemberInfo = dataMember.getInfo().map(info => (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, info, { editor: this.isDateType ? external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('date') : external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }));
            const info = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], seriesPointSerializationsInfo);
            info.splice(info.indexOf(info.filter((prop) => { return prop.propertyName === 'argumentSerializable'; })[0]), 1, this.argumentSerializableInfo());
            return info.concat(valueDataMemberInfo);
        };
    }
    get isDateType() {
        return this.series.valueScaleType() === 'DateTime';
    }
}
SeriesPointModel.separator = ';';

const valuesSerializable = { propertyName: 'valuesSerializable', modelName: '@ValuesSerializable', from: (val) => { return external_ko_namespaceObject.observable(val); }, toJsonObject: SeriesPointModel.valueToJsonObject }, colorSerializable = { propertyName: 'colorSerializable', modelName: '@ColorSerializable', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.SeriesPoint.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const seriesPointSerializationsInfo = [argumentSerializable, valuesSerializable, colorSerializable];

;// ./node_modules/devexpress-reporting/chart/internal/meta/_value.js

const commonValueSerializationsInfo = [
    { propertyName: 'value', displayName: 'Value', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' },
];
const valueWeightSerializationsInfo = [
    { propertyName: 'value', displayName: 'Value', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' },
    { propertyName: 'weight', displayName: 'Weight', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraPivotGrid.PivotKPIType.Weight' },
];
const value1Value2SerializationsInfo = [
    { propertyName: 'value1', displayName: 'Value 1', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.ValueLevel.Value_1' },
    { propertyName: 'value2', displayName: 'Value 2', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.ValueLevel.Value_2' },
];
const stockValueSerializationsInfo = [
    { propertyName: 'low', displayName: 'Low', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.StockLevel.Low' },
    { propertyName: 'high', displayName: 'High', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.StockLevel.High' },
    { propertyName: 'open', displayName: 'Open', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.StockLevel.Open' },
    { propertyName: 'close', displayName: 'Close', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.StockLevel.Close' },
];

;// ./node_modules/devexpress-reporting/chart/internal/data/_dataMemberBase.js


class DataMemberBase extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _assignValueDataMembers(valueDataMember, value) {
        const values = (value || '').split(this._separator);
        valueDataMember.arrayValueDataMemberNames.forEach((name, index) => {
            if (valueDataMember[name])
                valueDataMember[name](values[index] || '');
            else
                valueDataMember[name] = external_ko_namespaceObject.observable(values[index] || '');
        });
    }
    _valueDataMembersToString(valueDataMember) {
        const result = [];
        valueDataMember.arrayValueDataMemberNames.forEach(name => {
            result.push(valueDataMember[name]() || '');
        });
        return result.join(this._separator);
    }
    toString() {
        let shouldSerialize = false;
        this.arrayValueDataMemberNames.forEach(name => {
            shouldSerialize = shouldSerialize || this[name]();
        });
        return shouldSerialize ? this._valueDataMembersToString(this) : null;
    }
    constructor(value, valueScaleType) {
        super();
        this._separator = ';';
        this._assignValueDataMembers(this, value);
        if (valueScaleType) {
            this.valueScaleType = valueScaleType;
            this._disposables.push(this.valueScaleType.subscribe((newVal) => {
                this._assignValueDataMembers(this, '');
            }));
        }
    }
    get arrayValueDataMemberNames() { return []; }
}

;// ./node_modules/devexpress-reporting/chart/internal/data/_commonValue.js


class CommonValueDataMembers extends DataMemberBase {
    static from(value) {
        return new CommonValueDataMembers(value, null);
    }
    static toJson(value) {
        return value.toString() || {};
    }
    getInfo() {
        return commonValueSerializationsInfo;
    }
    get arrayValueDataMemberNames() { return ['value']; }
}

;// ./node_modules/devexpress-reporting/chart/components/series/_label.js



class SeriesLabelViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return new SeriesLabelViewModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, seriesLabelSerializationsInfo, refs);
    }
    constructor(model, serializer) {
        super(model, serializer, seriesLabelSerializationsInfo);
        if (this.typeNameSerializable) {
            this._disposables.push(this.typeNameSerializable.subscribe(val => {
                this.seriesLabelPosition(null);
            }));
        }
    }
}
const seriesLabel = { propertyName: 'label', modelName: 'Label', displayName: 'Label', info: seriesLabelSerializationsInfo, defaultVal: {}, from: SeriesLabelViewModel.from, toJsonObject: SeriesLabelViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRLabel' };

;// ./node_modules/devexpress-reporting/chart/internal/data/_stockValue.js


class StockValueDataMembers extends DataMemberBase {
    getInfo() {
        return stockValueSerializationsInfo;
    }
    get arrayValueDataMemberNames() { return ['low', 'high', 'open', 'close']; }
}

;// ./node_modules/devexpress-reporting/chart/internal/data/_value1Value2.js


class Value1Value2DataMembers extends DataMemberBase {
    getInfo() {
        return value1Value2SerializationsInfo;
    }
    get arrayValueDataMemberNames() { return ['value1', 'value2']; }
}

;// ./node_modules/devexpress-reporting/chart/internal/data/_valueWeight.js


class ValueWeightDataMembers extends DataMemberBase {
    getInfo() {
        return valueWeightSerializationsInfo;
    }
    get arrayValueDataMemberNames() { return ['value', 'weight']; }
}

;// ./node_modules/devexpress-reporting/chart/components/series/_templateOptions.js



const viewTypesDataMembers = {
    'BubbleSeriesView': ValueWeightDataMembers,
    'OverlappedRangeBarSeriesView': Value1Value2DataMembers,
    'SideBySideRangeBarSeriesView': Value1Value2DataMembers,
    'RangeAreaSeriesView': Value1Value2DataMembers,
    'RangeArea3DSeriesView': Value1Value2DataMembers,
    'OverlappedGanttSeriesView': Value1Value2DataMembers,
    'SideBySideGanttSeriesView': Value1Value2DataMembers,
    'StockSeriesView': StockValueDataMembers,
    'CandleStickSeriesView': StockValueDataMembers
};
const mapTypes = {
    'SideBySideBarSeriesView': 'SideBySideBarSeriesLabel',
    'StackedBarSeriesView': 'StackedBarSeriesLabel',
    'FullStackedBarSeriesView': 'FullStackedBarSeriesLabel',
    'SideBySideStackedBarSeriesView': 'StackedBarSeriesLabel',
    'SideBySideFullStackedBarSeriesView': 'FullStackedBarSeriesLabel',
    'WaterfallSeriesView': 'WaterfallSeriesLabel',
    'SideBySideBar3DSeriesView': 'Bar3DSeriesLabel',
    'StackedBar3DSeriesView': 'StackedBar3DSeriesLabel',
    'FullStackedBar3DSeriesView': 'FullStackedBar3DSeriesLabel',
    'SideBySideStackedBar3DSeriesView': 'StackedBar3DSeriesLabel',
    'SideBySideFullStackedBar3DSeriesView': 'FullStackedBar3DSeriesLabel',
    'ManhattanBarSeriesView': 'Bar3DSeriesLabel',
    'PointSeriesView': 'PointSeriesLabel',
    'BubbleSeriesView': 'BubbleSeriesLabel',
    'LineSeriesView': 'PointSeriesLabel',
    'StackedLineSeriesView': 'StackedLineSeriesLabel',
    'FullStackedLineSeriesView': 'StackedLineSeriesLabel',
    'StepLineSeriesView': 'PointSeriesLabel',
    'SplineSeriesView': 'PointSeriesLabel',
    'ScatterLineSeriesView': 'PointSeriesLabel',
    'SwiftPlotSeriesView': null,
    'BoxPlotSeriesView': null,
    'Line3DSeriesView': 'Line3DSeriesLabel',
    'StackedLine3DSeriesView': 'StackedLine3DSeriesLabel',
    'FullStackedLine3DSeriesView': 'StackedLine3DSeriesLabel',
    'StepLine3DSeriesView': 'Line3DSeriesLabel',
    'Spline3DSeriesView': 'Line3DSeriesLabel',
    'PieSeriesView': 'PieSeriesLabel',
    'DoughnutSeriesView': 'DoughnutSeriesLabel',
    'NestedDoughnutSeriesView': 'NestedDoughnutSeriesLabel',
    'Pie3DSeriesView': 'Pie3DSeriesLabel',
    'Doughnut3DSeriesView': 'Doughnut3DSeriesLabel',
    'FunnelSeriesView': 'FunnelSeriesLabel',
    'Funnel3DSeriesView': 'Funnel3DSeriesLabel',
    'AreaSeriesView': 'PointSeriesLabel',
    'StackedAreaSeriesView': 'PointSeriesLabel',
    'FullStackedAreaSeriesView': 'FullStackedAreaSeriesLabel',
    'StepAreaSeriesView': 'PointSeriesLabel',
    'SplineAreaSeriesView': 'PointSeriesLabel',
    'StackedSplineAreaSeriesView': 'PointSeriesLabel',
    'FullStackedSplineAreaSeriesView': 'FullStackedSplineAreaSeriesLabel',
    'Area3DSeriesView': 'Area3DSeriesLabel',
    'StackedArea3DSeriesView': 'StackedArea3DSeriesLabel',
    'FullStackedArea3DSeriesView': 'FullStackedArea3DSeriesLabel',
    'StepArea3DSeriesView': 'Area3DSeriesLabel',
    'SplineArea3DSeriesView': 'Area3DSeriesLabel',
    'StackedSplineArea3DSeriesView': 'StackedArea3DSeriesLabel',
    'FullStackedSplineArea3DSeriesView': 'FullStackedArea3DSeriesLabel',
    'OverlappedRangeBarSeriesView': 'RangeBarSeriesLabel',
    'SideBySideRangeBarSeriesView': 'RangeBarSeriesLabel',
    'RangeAreaSeriesView': 'RangeAreaSeriesLabel',
    'RangeArea3DSeriesView': 'RangeArea3DSeriesLabel',
    'RadarPointSeriesView': 'RadarPointSeriesLabel',
    'RadarLineSeriesView': 'RadarPointSeriesLabel',
    'RadarAreaSeriesView': 'RadarPointSeriesLabel',
    'PolarPointSeriesView': 'RadarPointSeriesLabel',
    'PolarLineSeriesView': 'RadarPointSeriesLabel',
    'PolarAreaSeriesView': 'RadarPointSeriesLabel',
    'StockSeriesView': 'StockSeriesLabel',
    'CandleStickSeriesView': 'StockSeriesLabel',
    'OverlappedGanttSeriesView': 'RangeBarSeriesLabel',
    'SideBySideGanttSeriesView': 'RangeBarSeriesLabel'
};
const onlyNumericArgumentSupportedSeriesViewTypes = [
    'PolarPointSeriesView',
    'PolarLineSeriesView',
    'PolarAreaSeriesView'
];

;// external "DevExpress.Analytics.Widgets.Metadata"
const external_DevExpress_Analytics_Widgets_Metadata_namespaceObject = DevExpress.Analytics.Widgets.Metadata;
;// external "DevExpress.Reporting.Metadata"
const external_DevExpress_Reporting_Metadata_namespaceObject = DevExpress.Reporting.Metadata;
;// ./node_modules/devexpress-reporting/designer/utils/settings.js

const controlsFactory = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(null);
const settings_smartTagFactory = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)({});
const DataBindingMode = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)('Expressions');
const settings_HandlerUri = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)('DXXRD.axd');
const formatStringEditorCustomSet = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)({});
const DefaultCrossTabControl = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)('XRCrossTab');

;// ./node_modules/devexpress-reporting/designer/widgets/editorTemplates.js

const designerEditorTemplates = new external_DevExpress_Analytics_Widgets_namespaceObject.EditorTemplates();

;// ./node_modules/devexpress-reporting/designer/widgets/linesEditor.js


class LinesEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor() {
        super(...arguments);
        this.collapsed = external_ko_namespaceObject.observable(false);
    }
    _shouldSkipHighlighting(propertyName) {
        return false;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/metadata.js









const textAlignmentValues = [
    { value: 'TopLeft', displayValue: 'Top Left', localizationId: 'DevExpress.XtraPrinting.TextAlignment.TopLeft' },
    { value: 'MiddleLeft', displayValue: 'Middle Left', localizationId: 'DevExpress.XtraPrinting.TextAlignment.MiddleLeft' },
    { value: 'BottomLeft', displayValue: 'Bottom Left', localizationId: 'DevExpress.XtraPrinting.TextAlignment.BottomLeft' },
    { value: 'TopCenter', displayValue: 'Top Center', localizationId: 'DevExpress.XtraPrinting.TextAlignment.TopCenter' },
    { value: 'MiddleCenter', displayValue: 'Middle Center', localizationId: 'DevExpress.XtraPrinting.TextAlignment.MiddleCenter' },
    { value: 'BottomCenter', displayValue: 'Bottom Center', localizationId: 'DevExpress.XtraPrinting.TextAlignment.BottomCenter' },
    { value: 'TopJustify', displayValue: 'Top Justify', localizationId: 'DevExpress.XtraPrinting.TextAlignment.TopJustify' },
    { value: 'MiddleJustify', displayValue: 'Middle Justify', localizationId: 'DevExpress.XtraPrinting.TextAlignment.MiddleJustify' },
    { value: 'BottomJustify', displayValue: 'Bottom Justify', localizationId: 'DevExpress.XtraPrinting.TextAlignment.BottomJustify' },
    { value: 'TopRight', displayValue: 'Top Right', localizationId: 'DevExpress.XtraPrinting.TextAlignment.TopRight' },
    { value: 'MiddleRight', displayValue: 'Middle Right', localizationId: 'DevExpress.XtraPrinting.TextAlignment.MiddleRight' },
    { value: 'BottomRight', displayValue: 'Bottom Right', localizationId: 'DevExpress.XtraPrinting.TextAlignment.BottomRight' },
];
const borderDashStyleValues = [
    { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.Solid' },
    { value: 'Dash', displayValue: 'Dash', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.Dash' },
    { value: 'Dot', displayValue: 'Dot', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.Dot' },
    { value: 'DashDot', displayValue: 'Dash-Dot', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDot' },
    { value: 'DashDotDot', displayValue: 'Dash-Dot-Dot', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.DashDotDot' }
];
const stylePrioritySerializationInfo = [
    { propertyName: 'useBackColor', modelName: '@UseBackColor', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useBorderColor', modelName: '@UseBorderColor', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useBorderDashStyle', modelName: '@UseBorderDashStyle', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useBorders', modelName: '@UseBorders', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useBorderWidth', modelName: '@UseBorderWidth', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useFont', modelName: '@UseFont', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useForeColor', modelName: '@UseForeColor', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'usePadding', modelName: '@UsePadding', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'useTextAlignment', modelName: '@UseTextAlignment', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }
];
const xlsxFormatString = { propertyName: 'xlsxFormatString', modelName: '@XlsxFormatString', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), displayName: 'Xlsx Format String', localizationId: 'DevExpress.XtraReports.UI.XRControl.XlsxFormatString' };
const metadata_name = { propertyName: 'name', modelName: '@Name', displayName: 'Name', localizationId: 'DevExpress.XtraReports.UI.XRControl.Name', editor: designerEditorTemplates.getEditor('name'), validationRules: external_DevExpress_Analytics_Internal_namespaceObject.nameValidationRules };
const displayName = { propertyName: 'displayNameObject', localizable: true, modelName: '@DisplayName', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '', displayName: 'Display Name', localizationId: 'DevExpress.XtraReports.UI.XtraReport.DisplayName' };
const metadata_text = { propertyName: 'text', modelName: '@Text', defaultVal: '', displayName: 'Text', localizationId: 'DevExpress.XtraReports.UI.XRControl.Text', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizable: true };
const metadata_textArea = { propertyName: 'textArea', displayName: 'Text', localizationId: 'DevExpress.XtraReports.UI.XRControl.Text', defaultVal: '', localizable: true, editor: (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('stringArray'), { editorType: LinesEditor }) };
const textTrimmingValues = [
    { value: 'None', displayValue: 'None', localizationId: 'DevExpress.Drawing.DXStringTrimming.None' },
    { value: 'Character', displayValue: 'Character', localizationId: 'DevExpress.Drawing.DXStringTrimming.Character' },
    { value: 'Word', displayValue: 'Word', localizationId: 'DevExpress.Drawing.DXStringTrimming.Word' },
    { value: 'EllipsisCharacter', displayValue: 'Ellipsis Character', localizationId: 'DevExpress.Drawing.DXStringTrimming.EllipsisCharacter' },
    { value: 'EllipsisWord', displayValue: 'Ellipsis Word', localizationId: 'DevExpress.Drawing.DXStringTrimming.EllipsisWord' },
    { value: 'EllipsisPath', displayValue: 'Ellipsis Path', localizationId: 'DevExpress.Drawing.DXStringTrimming.EllipsisPath' }
];
const textTrimming = {
    propertyName: 'textTrimming', modelName: '@TextTrimming', displayName: 'Text Trimming', localizationId: 'DevExpress.XtraReports.UI.XRControl.TextTrimming', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRLabel.TextTrimming.Description', defaultVal: 'Character', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: textTrimmingValues
};
const size = { propertyName: 'size', modelName: '@SizeF', from: external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString, displayName: 'Size', localizationId: 'DevExpress.XtraReports.UI.XRControl.Size', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRControl.SizeF.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizable: true };
const metadata_location = { propertyName: 'location', modelName: '@LocationFloat', from: external_DevExpress_Analytics_Elements_namespaceObject.Point.fromString, displayName: 'Location', localizationId: 'DevExpress.XtraReports.UI.XRControl.Location', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRControl.LocationF.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizable: true };
const defaultBooleanValuesArray = [
    { value: 'True', displayValue: 'True', localizationId: 'DevExpress.Utils.DefaultBoolean.True' },
    { value: 'False', displayValue: 'False', localizationId: 'DevExpress.Utils.DefaultBoolean.False' },
    { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.Utils.DefaultBoolean.Default' }
];
const metadata_tag = { propertyName: 'tag', modelName: '@Tag', displayName: 'Tag', localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '' };
const lockedInUserDesigner = { propertyName: '_lockedInUserDesigner', modelName: '@LockedInUserDesigner', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const metadata_visible = { propertyName: 'visible', modelName: '@Visible', localizable: true, defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Visible', localizationId: 'DevExpress.XtraReports.UI.XRControl.Visible' };
const metadata_backColor = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ displayName: 'Background Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor' }, external_DevExpress_Reporting_Metadata_namespaceObject.previewBackColor);
const foreColor = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ displayName: 'Foreground Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.ForeColor' }, external_DevExpress_Reporting_Metadata_namespaceObject.previewForeColor);
const metadata_font = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ displayName: 'Font', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('font'), localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRControl.Font.Description', localizable: true }, external_DevExpress_Reporting_Metadata_namespaceObject.previewFont);
const expressionableFont = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_font, { editor: designerEditorTemplates.getEditor('expressionableFont') });
const expressionableFontInfo = [
    external_DevExpress_Analytics_Widgets_Metadata_namespaceObject.fontName,
    external_DevExpress_Analytics_Widgets_Metadata_namespaceObject.fontSize,
    external_DevExpress_Analytics_Widgets_Metadata_namespaceObject.fontSizeUnit,
    {
        propertyName: 'modificators', editor: designerEditorTemplates.getEditor('fontModificatorsHighlightable')
    },
];
const metadata_borderColor = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ displayName: 'Border Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor' }, external_DevExpress_Reporting_Metadata_namespaceObject.previewBorderColor);
const borders = { propertyName: 'borders', modelName: '@Borders', displayName: 'Borders', localizationId: 'DevExpress.XtraReports.UI.XRControl.Borders', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('borders') };
const borderWidth = { propertyName: 'borderWidth', modelName: '@BorderWidth', displayName: 'Border Width', localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const borderDashStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Border Dash Style', localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderDashStyle',
    valuesArray: [].concat(borderDashStyleValues, [{ value: 'Double', displayValue: 'Double', localizationId: 'DevExpress.XtraPrinting.BorderDashStyle.Double' }])
}, external_DevExpress_Reporting_Metadata_namespaceObject.previewBorderDashStyle);
const paddingString = { propertyName: 'padding', modelName: '@Padding' };
const metadata_padding = { displayName: 'Padding', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), propertyName: 'paddingObj', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.PaddingInfo', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRControl.Padding.Description' };
const defaultTextPadding = '2,2,0,0,96';
const metadata_textAlignment = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
    displayName: 'Text Alignment',
    modelName: '@TextAlignment',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('textAlignment'),
    localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment'
}, external_DevExpress_Reporting_Metadata_namespaceObject.previewTextAlignment);
const textFitMode = {
    propertyName: 'textFitMode',
    modelName: '@TextFitMode', displayName: 'Text Fit Mode', localizationId: 'DevExpress.XtraReports.UI.XRLabel.TextFitMode', defaultVal: 'None',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.TextFitMode.None' },
        { value: 'GrowOnly', displayValue: 'Grow Only', localizationId: 'DevExpress.XtraReports.UI.TextFitMode.GrowOnly' },
        { value: 'ShrinkOnly', displayValue: 'Shrink Only', localizationId: 'DevExpress.XtraReports.UI.TextFitMode.ShrinkOnly' },
        { value: 'ShrinkAndGrow', displayValue: 'Shrink And Grow', localizationId: 'DevExpress.XtraReports.UI.TextFitMode.ShrinkAndGrow' }
    ]
};
const metadata_angle = { propertyName: 'angle', modelName: '@Angle', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, displayName: 'Angle', localizationId: 'DevExpress.XtraReports.UI.XRLabel.Angle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const canGrow = { propertyName: 'canGrow', modelName: '@CanGrow', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Can Grow', localizationId: 'DevExpress.XtraReports.UI.XRControl.CanGrow', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRLabel.CanGrow.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const canShrink = { propertyName: 'canShrink', modelName: '@CanShrink', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Can Shrink', localizationId: 'DevExpress.XtraReports.UI.XRControl.CanShrink', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRLabel.CanShrink.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const multiline = { propertyName: 'multiline', modelName: '@Multiline', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Multiline', localizationId: 'DevExpress.XtraReports.UI.XRLabel.Multiline', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const wordWrap = { propertyName: 'wordWrap', modelName: '@WordWrap', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Word Wrap', localizationId: 'DevExpress.XtraReports.UI.XRControl.WordWrap', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const allowMarkupText = { propertyName: 'allowMarkupText', modelName: '@AllowMarkupText', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Allow Markup Text', localizationId: 'DevExpress.XtraReports.UI.XRLabel.AllowMarkupText', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const autoWidth = { propertyName: 'autoWidth', modelName: '@AutoWidth', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Auto Width', localizationId: 'DevExpress.XtraReports.UI.XRLabel.AutoWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const keepTogether = { propertyName: 'keepTogether', modelName: '@KeepTogether', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Keep Together', localizationId: 'DevExpress.XtraReports.UI.XRControl.KeepTogether', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const keepTogetherDefaultValueFalse = { propertyName: 'keepTogether', modelName: '@KeepTogether', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Keep Together', localizationId: 'DevExpress.XtraReports.UI.XRControl.KeepTogether', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const processDuplicatesTarget = {
    propertyName: 'processDuplicatesTarget', modelName: '@ProcessDuplicatesTarget', displayName: 'Process Duplicates Target', localizationId: 'DevExpress.XtraReports.UI.XRLabel.ProcessDuplicatesTarget',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'Value', displayValue: 'Value', localizationId: 'DevExpress.XtraReports.UI.ProcessDuplicatesTarget.Value' },
        { value: 'Tag', displayValue: 'Tag', localizationId: 'DevExpress.XtraReports.UI.ProcessDuplicatesTarget.Tag' }
    ]
};
const processDuplicatesMode = {
    propertyName: 'processDuplicatesMode', modelName: '@ProcessDuplicatesMode', displayName: 'Process Duplicates Mode', localizationId: 'DevExpress.XtraReports.UI.XRLabel.ProcessDuplicatesMode',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Leave', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'Leave', displayValue: 'Leave', localizationId: 'DevExpress.XtraReports.UI.ProcessDuplicatesMode.Leave' },
        { value: 'Merge', displayValue: 'Merge', localizationId: 'DevExpress.XtraReports.UI.ProcessDuplicatesMode.Merge' },
        { value: 'Suppress', displayValue: 'Suppress', localizationId: 'DevExpress.XtraReports.UI.ProcessDuplicatesMode.Suppress' },
        { value: 'SuppressAndShrink', displayValue: 'Suppress and Shrink', localizationId: 'DevExpress.XtraReports.UI.ProcessDuplicatesMode.SuppressAndShrink' }
    ]
};
const processNullValues = {
    propertyName: 'processNullValues',
    modelName: '@ProcessNullValues', displayName: 'Process Null Values', localizationId: 'DevExpress.XtraReports.UI.XRLabel.ProcessNullValues',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Leave', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'Leave', displayValue: 'Leave', localizationId: 'DevExpress.XtraReports.UI.ValueSuppressType.Leave' },
        { value: 'Suppress', displayValue: 'Suppress', localizationId: 'DevExpress.XtraReports.UI.ValueSuppressType.Suppress' },
        { value: 'SuppressAndShrink', displayValue: 'Suppress and Shrink', localizationId: 'DevExpress.XtraReports.UI.ValueSuppressType.SuppressAndShrink' },
    ]
};
const reportPrintOptionsSerializationInfo = [
    { propertyName: 'printOnEmptyDataSource', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, modelName: '@PrintOnEmptyDataSource', displayName: 'Print when Data Source is Empty', localizationId: 'DevExpress.XtraReports.UI.ReportPrintOptions.PrintOnEmptyDataSource', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
    { propertyName: 'detailCountAtDesignTime', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, modelName: '@DetailCountAtDesignTime', displayName: 'Detail Count at Design Time', localizationId: 'DevExpress.XtraReports.UI.ReportPrintOptions.DetailCountAtDesignTime', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    { propertyName: 'detailCountOnEmptyDataSource', defaultVal: 1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, modelName: '@DetailCountOnEmptyDataSource', displayName: 'Detail Count when Data Source is Empty', localizationId: 'DevExpress.XtraReports.UI.ReportPrintOptions.DetailCountOnEmptyDataSource', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    { propertyName: 'blankDetailCount', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, modelName: '@BlankDetailCount', displayName: 'Blank Detail Count', localizationId: 'DevExpress.XtraReports.UI.ReportPrintOptions.BlankDetailCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    { propertyName: 'detailCount', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, modelName: '@DetailCount', displayName: 'Detail Count', localizationId: 'DevExpress.XtraReports.UI.ReportPrintOptions.DetailCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }
];
const dataAdapter = { propertyName: 'dataAdapter', modelName: '@DataAdapter', link: true, editor: null };
const dataSource = { propertyName: 'dataSource', modelName: '@DataSource', displayName: 'Data Source', localizationId: 'DevExpress.XtraReports.UI.XtraReportBase.DataSource', link: true, editor: designerEditorTemplates.getEditor('dataSource') };
const metadata_dataMember = { propertyName: 'dataMember', modelName: '@DataMember', displayName: 'Data Member', localizationId: 'DevExpress.XtraReports.UI.XtraReportBase.DataMember', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('dataMember') };
const metadata_filterString = { propertyName: '_filterString', modelName: '@FilterString' };
const metadata_filterStringEditable = { propertyName: 'filterString', displayName: 'Filter String', localizationId: 'DevExpress.XtraReports.UI.XtraReportBase.FilterString', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('filterEditor') };
const bookmark = { propertyName: 'bookmark', localizable: true, modelName: '@Bookmark', displayName: 'Bookmark', localizationId: 'DevExpress.XtraReports.UI.XRControl.Bookmark', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const bookmarkParent = { propertyName: 'bookmarkParent', modelName: '@BookmarkParent', link: true, displayName: 'Parent Bookmark', localizationId: 'DevExpress.XtraReports.UI.XRControl.BookmarkParent', defaultVal: null, editor: designerEditorTemplates.getEditor('reportExplorer') };
const navigateUrl = { propertyName: 'navigateUrl', modelName: '@NavigateUrl', displayName: 'Navigation URL', localizationId: 'DevExpress.XtraReports.UI.XRControl.NavigateUrl', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const target = { propertyName: 'target', modelName: '@Target', displayName: 'Navigation Target', localizationId: 'DevExpress.XtraReports.UI.XRControl.Target', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '' };
const nullValueText = { propertyName: 'nullValueText', modelName: '@NullValueText', localizable: true, displayName: 'Null Value Text', localizationId: 'DevExpress.XtraReports.UI.XRControl.NullValueText', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRLabel.NullValueText.Description', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
function getSummaryFunctionValues() {
    if (DataBindingMode() === 'Bindings') {
        const values = summaryFunctionValues.concat([]);
        values.push({ value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Custom' });
        return values;
    }
    return summaryFunctionValues;
}
const summaryFunctionValues = [
    { value: 'Avg', displayValue: 'Average', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Avg' },
    { value: 'Count', displayValue: 'Count', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Count' },
    { value: 'Sum', displayValue: 'Sum', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Sum' },
    { value: 'RunningSum', displayValue: 'Running Summary', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.RunningSum' },
    { value: 'CarryoverSum', displayValue: 'Carryover Summary', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.CarryoverSum' },
    { value: 'Percentage', displayValue: 'Percentage', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Percentage' },
    { value: 'Max', displayValue: 'Max', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Max' },
    { value: 'Min', displayValue: 'Min', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Min' },
    { value: 'Median', displayValue: 'Median', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Median' },
    { value: 'Var', displayValue: 'Variance', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.Var' },
    { value: 'VarP', displayValue: 'Population Variance', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.VarP' },
    { value: 'StdDev', displayValue: 'Standard Deviation', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.StdDev' },
    { value: 'StdDevP', displayValue: 'Standard Population Deviation', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.StdDevP' },
    { value: 'DAvg', displayValue: 'Average (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DAvg' },
    { value: 'DCount', displayValue: 'Count (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DCount' },
    { value: 'DSum', displayValue: 'Summary (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DSum' },
    { value: 'DVar', displayValue: 'Variance (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DVar' },
    { value: 'DVarP', displayValue: 'Population Variance (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DVarP' },
    { value: 'DStdDev', displayValue: 'Standard Deviation (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DStdDev' },
    { value: 'DStdDevP', displayValue: 'Standard Population Deviation (Distinct)', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.DStdDevP' },
    { value: 'RecordNumber', displayValue: 'Record Number', localizationId: 'DevExpress.XtraReports.UI.SummaryFunc.RecordNumber' }
];
const textFormatString = { propertyName: 'textFormatString', localizable: true, modelName: '@TextFormatString', defaultVal: '', editor: designerEditorTemplates.getEditor('formatEditor'), displayName: 'Text Format String', localizationId: 'DevExpress.XtraReports.UI.XRControl.TextFormatString', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRLabel.TextFormatString.Description' };
function createSummarySerializationInfo(summaryFunctions) {
    return [
        {
            propertyName: 'Running', modelName: '@Running', defaultVal: 'None',
            editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Running', localizationId: 'DevExpress.XtraReports.UI.XRSummary.Running',
            valuesArray: [
                { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.SummaryRunning.None' },
                { value: 'Group', displayValue: 'Group', localizationId: 'DevExpress.XtraReports.UI.SummaryRunning.Group' },
                { value: 'Report', displayValue: 'Report', localizationId: 'DevExpress.XtraReports.UI.SummaryRunning.Report' },
                { value: 'Page', displayValue: 'Page', localizationId: 'DevExpress.XtraReports.UI.SummaryRunning.Page' }
            ]
        },
        {
            propertyName: 'Func', modelName: '@Func', defaultVal: 'Sum',
            editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Function', localizationId: 'DevExpress.XtraReports.UI.XRSummary.Func',
            get valuesArray() {
                return summaryFunctions || getSummaryFunctionValues();
            }
        },
        { propertyName: 'formatString', visible: false, modelName: '@FormatString', defaultVal: '', editor: designerEditorTemplates.getEditor('formatEditor'), displayName: 'Format String', localizationId: 'DevExpress.XtraReports.UI.XRSummary.FormatString' },
        { propertyName: 'ignoreNullValues', modelName: '@IgnoreNullValues', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Ignore Null Values', localizationId: 'DevExpress.XtraReports.UI.XRSummary.IgnoreNullValues', },
        { propertyName: 'treatStringsAsNumerics', modelName: '@TreatStringsAsNumerics', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Treat Strings As Numerics', localizationId: 'DevExpress.XtraReports.UI.XRSummary.TreatStringsAsNumerics' }
    ];
}
const summarySerializationInfo = createSummarySerializationInfo();
const summary = { propertyName: 'Summary', modelName: 'Summary', info: summarySerializationInfo, editor: designerEditorTemplates.getEditor('summaryEditor'), displayName: 'Summary', localizationId: 'DevExpress.XtraReports.UI.XRLabel.Summary' };
const reportPrintOptions = { propertyName: 'reportPrintOptions', modelName: 'ReportPrintOptions', info: reportPrintOptionsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), displayName: 'Report Print Options', localizationId: 'DevExpress.XtraReports.UI.XtraReport.ReportPrintOptions', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XtraReportBase.ReportPrintOptions.Description' };
const lineWidth = { propertyName: 'lineWidth', modelName: '@LineWidth', defaultVal: 1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Line Width', localizationId: 'DevExpress.XtraReports.UI.XRLine.LineWidth' };
const metadata_lineStyle = {
    propertyName: 'lineStyle',
    modelName: '@LineStyle', defaultVal: 'Solid', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Line Style', localizationId: 'DevExpress.XtraReports.UI.XRLine.LineStyle',
    valuesArray: [
        { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.DashStyle.Solid' },
        { value: 'Dash', displayValue: 'Dash', localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' },
        { value: 'Dot', displayValue: 'Dot', localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' },
        { value: 'DashDot', displayValue: 'Dash-Dot', localizationId: 'DevExpress.XtraCharts.DashStyle.DashDot' },
        { value: 'DashDotDot', displayValue: 'Dash-Dot-Dot', localizationId: 'DevExpress.XtraCharts.DashStyle.DashDotDot' }
    ]
};
const dpi = { propertyName: 'dpi', modelName: '@Dpi', defaultVal: 100, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel };
const canPublish = { propertyName: 'canPublish', modelName: '@CanPublish', displayName: 'Can Publish', localizationId: 'DevExpress.XtraReports.UI.XRControl.CanPublish', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const rtlValues = [
    { value: 'No', displayValue: 'No', localizationId: 'DevExpress.XtraReports.UI.RightToLeft.No' },
    { value: 'Yes', displayValue: 'Yes', localizationId: 'DevExpress.XtraReports.UI.RightToLeft.Yes' },
];
const rtlValuesWithInherit = rtlValues.concat([
    { value: 'Inherit', displayValue: 'Inherit', localizationId: 'DevExpress.XtraReports.UI.RightToLeft.Inherit' }
]);
const rtl = {
    propertyName: 'rightToLeft', modelName: '@RightToLeft', displayName: 'Right To Left', localizationId: 'DevExpress.XtraReports.UI.XRControl.RightToLeft', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XtraReport.RightToLeft.Description', defaultVal: 'Inherit', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: rtlValuesWithInherit
};
const imageType = {
    propertyName: 'imageType', displayName: 'Image Type', localizationId: 'DevExpress.XtraReports.UI.XRChart.ImageType', modelName: '@ImageType', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Metafile', valuesArray: [
        { value: 'Metafile', displayValue: 'Metafile', localizationId: 'DevExpress.XtraReports.UI.ChartImageType.Metafile' },
        { value: 'Bitmap', displayValue: 'Bitmap', localizationId: 'DevExpress.XtraReports.UI.ChartImageType.Bitmap' }
    ]
};
const paddingGroup = [paddingString, metadata_padding];
const defaultAccessibleRole = { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Default' };
const accessibleRoleValues = [
    defaultAccessibleRole,
    { value: 'Heading1', displayValue: 'Heading 1', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Heading1' },
    { value: 'Heading2', displayValue: 'Heading 2', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Heading2' },
    { value: 'Heading3', displayValue: 'Heading 3', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Heading3' },
    { value: 'Heading4', displayValue: 'Heading 4', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Heading4' },
    { value: 'Heading5', displayValue: 'Heading 5', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Heading5' },
    { value: 'Heading6', displayValue: 'Heading 6', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Heading6' },
];
const accessibleRole = {
    propertyName: 'accessibleRole', modelName: '@AccessibleRole', displayName: 'Accessible Role', localizationId: 'DevExpress.XtraReports.UI.XRControl.AccessibleRole', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRLabel.AccessibleRole.Description', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: accessibleRoleValues
};
const accessibleDescription = {
    propertyName: 'accessibleDescription', displayName: 'Accessible Description', localizationId: 'DevExpress.XtraReports.UI.XRControl.AccessibleDescription', localizable: true, modelName: '@AccessibleDescription', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text')
};
const cells = { propertyName: 'cells', modelName: 'Cells', array: true };
const sortOrder = {
    propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'Sort Order', localizationId: 'DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.SortOrder', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        {
            value: 'None', displayValue: 'None', localizationId: 'DevExpress.Data.ColumnSortOrder.None'
        }, {
            value: 'Ascending', displayValue: 'Ascending', localizationId: 'DevExpress.Data.ColumnSortOrder.Ascending'
        }, {
            value: 'Descending', displayValue: 'Descending', localizationId: 'DevExpress.Data.ColumnSortOrder.Descending'
        }
    ]
};

;// ./node_modules/devexpress-reporting/chart/components/models/_title.js









class TitleViewModel extends ChartElementCollectionItemBase {
    static from(model, serializer) {
        return new TitleViewModel(model || {}, null, serializer);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.displayName = external_ko_namespaceObject.observable(TitleViewModel.prefix);
        this._disposables.push(this.name = external_ko_namespaceObject.pureComputed({
            read: () => { return this.text ? this.text() : TitleViewModel.prefix; },
            write: (val) => { this.text(val); }
        }));
    }
    getExpressionProperties() {
        return ['Text'];
    }
    getInfo() {
        return _title_titleSerializationsInfo;
    }
}
TitleViewModel.prefix = 'Title';

class ChartViewTitleModel extends TitleViewModel {
    getInfo() {
        return chartViewTitleSerializationsInfo;
    }
}
function assignTitleActions(titles) {
    const addTitle = (model) => {
        model['@TitleID'] = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(titles().map(x => { return x.titleID(); }), '');
        titles()['innerActions'][0].closePopover();
        titles.push(new TitleViewModel(model, titles));
    };
    const actions = [
        {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-top_left',
            imageTemplateName: 'dxrd-svg-titles-top_left',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Alignment': 'Near' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-top_center',
            imageTemplateName: 'dxrd-svg-titles-top_center',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Alignment': 'Center' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-top_right',
            imageTemplateName: 'dxrd-svg-titles-top_right',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Alignment': 'Far' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-right_top_vertical',
            imageTemplateName: 'dxrd-svg-titles-right_top_vertical',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Right', '@Alignment': 'Near' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-right_center_vertical',
            imageTemplateName: 'dxrd-svg-titles-right_center_vertical',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Right', '@Alignment': 'Center' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-right_bottom_vertical',
            imageTemplateName: 'dxrd-svg-titles-right_bottom_vertical',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Right', '@Alignment': 'Far' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-bottom_left',
            imageTemplateName: 'dxrd-svg-titles-bottom_left',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Bottom', '@Alignment': 'Near' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-bottom_center',
            imageTemplateName: 'dxrd-svg-titles-bottom_center',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Bottom', '@Alignment': 'Center' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-bottom_right',
            imageTemplateName: 'dxrd-svg-titles-bottom_right',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Bottom', '@Alignment': 'Far' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-left_bottom_vertical',
            imageTemplateName: 'dxrd-svg-titles-left_bottom_vertical',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Left', '@Alignment': 'Near' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-left_center_vertical',
            imageTemplateName: 'dxrd-svg-titles-left_center_vertical',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Left', '@Alignment': 'Center' }); }
        }, {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'),
            imageClassName: 'dxrd-image-chart-title-left_top_vertical',
            imageTemplateName: 'dxrd-svg-titles-left_top_vertical',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            clickAction: () => { addTitle({ '@Dock': 'Left', '@Alignment': 'Far' }); }
        }
    ];
    titles()['innerActions'] = createInnerActionsWithPopover((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'), 'addtitles-action_' + (0,external_DevExpress_Analytics_Internal_namespaceObject.guid)(), actions);
}
const dock = {
    propertyName: 'dock', modelName: '@Dock', displayName: 'Dock', defaultVal: 'Top', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Top' }, { value: 'Bottom', displayValue: 'Bottom', localizationId: 'DevExpress.XtraReports.UI.XRDockStyle.Bottom' }, { value: 'Left', displayValue: 'Left', localizationId: 'DevExpress.XtraReports.UI.XRControl.Left' }, { value: 'Right', displayValue: 'Right', localizationId: 'DevExpress.XtraCharts.RectangleIndents.Right' }],
    localizationId: 'DevExpress.XtraCharts.DockableTitle.Dock'
};
const defaultChartTitleText = 'Chart Title';
const indent = { propertyName: 'indent', modelName: '@Indent', displayName: 'Indent', defaultVal: 5, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'TO DO', editorOptions: { min: 0, max: 1000 } };
const titleWordWrap = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, wordWrap, { defaultVal: false });
const titleID = { propertyName: 'titleID', modelName: '@TitleID' };
const chartTitleTextInfo = { propertyName: 'text', modelName: '@Text', localizable: true, displayName: 'Text', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'ASPxReportsStringId.ExportName_txt', defaultVal: defaultChartTitleText };
const chartViewTitleTextInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, chartTitleTextInfo, { defaultVal: '{S}' });
const titleSerializationsInfoBase = [titleID, textColor, dock, _chart_enableAntialiasing, indent, titleAlignment, visibility, titleWordWrap, font18];
const chartViewTitleSerializationsInfo = [chartViewTitleTextInfo].concat(titleSerializationsInfoBase);
const _title_titleSerializationsInfo = [chartTitleTextInfo].concat(titleSerializationsInfoBase);

;// ./node_modules/devexpress-reporting/chart/internal/meta/_indicators.js



const pointscount = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.AverageTrueRange.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 14 };
const _indicators_name = { propertyName: 'name', modelName: '@Name', displayName: 'Name', localizationId: 'DevExpress.XtraCharts.Indicator.Name', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const legendtext = { propertyName: 'legendText', modelName: '@LegendText', displayName: 'LegendText', localizable: true, localizationId: 'DevExpress.XtraCharts.Indicator.LegendText', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const _indicators_color = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.Indicator.Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const _indicators_visible = { propertyName: 'visible', modelName: '@Visible', displayName: 'Visible', localizationId: 'DevExpress.XtraCharts.Indicator.Visible', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const checkedinlegend = { propertyName: 'checkedInLegend', modelName: '@CheckedInLegend', displayName: 'CheckedInLegend', localizationId: 'DevExpress.XtraCharts.Indicator.CheckedInLegend', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const checkableinlegend = { propertyName: 'checkableInLegend', modelName: '@CheckableInLegend', displayName: 'CheckableInLegend', localizationId: 'DevExpress.XtraCharts.Indicator.CheckableInLegend', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const showinlegend = { propertyName: 'showInLegend', modelName: '@ShowInLegend', displayName: 'ShowInLegend', localizationId: 'DevExpress.XtraCharts.Indicator.ShowInLegend', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const crosshairenabled = {
    propertyName: 'crosshairEnabled', modelName: '@CrosshairEnabled', displayName: 'CrosshairEnabled', localizationId: 'DevExpress.XtraCharts.Indicator.CrosshairEnabled', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Default', valuesArray: [
        { displayValue: 'True', value: 'True' },
        { displayValue: 'False', value: 'False' },
        { displayValue: 'Default', value: 'Default' },
    ]
};
const crosshairlabelvisibility = {
    propertyName: 'crosshairLabelVisibility', modelName: '@CrosshairLabelVisibility', displayName: 'CrosshairLabelVisibility', localizationId: 'DevExpress.XtraCharts.Indicator.CrosshairLabelVisibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Default', valuesArray: [
        { displayValue: 'True', value: 'True' },
        { displayValue: 'False', value: 'False' },
        { displayValue: 'Default', value: 'Default' },
    ]
};
const crosshairlabelpattern = { propertyName: 'crosshairLabelPattern', modelName: '@CrosshairLabelPattern', displayName: 'CrosshairLabelPattern', localizationId: 'DevExpress.XtraCharts.Indicator.CrosshairLabelPattern', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const crosshaircontentshowmode = {
    propertyName: 'crosshairContentShowMode', modelName: '@CrosshairContentShowMode', displayName: 'CrosshairContentShowMode', localizationId: 'DevExpress.XtraCharts.Indicator.CrosshairContentShowMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Default', valuesArray: [
        { displayValue: 'Default', value: 'Default' },
        { displayValue: 'Label', value: 'Label' },
        { displayValue: 'Legend', value: 'Legend' },
    ]
};
const crosshairemptyvaluelegendtext = { propertyName: 'crosshairEmptyValueLegendText', modelName: '@CrosshairEmptyValueLegendText', displayName: 'CrosshairEmptyValueLegendText', localizationId: 'DevExpress.XtraCharts.Indicator.CrosshairEmptyValueLegendText', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const _indicators_tag = { propertyName: 'tag', modelName: '@Tag', displayName: 'Tag', localizationId: 'DevExpress.XtraCharts.ChartElement.Tag', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), visible: false };
const averageTrueRange = [pointscount, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount1 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.BollingerBands.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 20 };
const valuelevel = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.BollingerBands.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const bandscolor = { propertyName: 'bandsColor', modelName: '@BandsColor', displayName: 'BandsColor', localizationId: 'DevExpress.XtraCharts.BollingerBands.BandsColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const standarddeviationmultiplier = { propertyName: 'standardDeviationMultiplier', modelName: '@StandardDeviationMultiplier', displayName: 'StandardDeviationMultiplier', localizationId: 'DevExpress.XtraCharts.BollingerBands.StandardDeviationMultiplier', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2 };
const bollingerBands = [pointscount1, valuelevel, bandscolor, standarddeviationmultiplier, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount2 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.ChaikinsVolatility.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 10 };
const chaikinsVolatility = [pointscount2, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount3 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.CommodityChannelIndex.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 14 };
const commodityChannelIndex = [pointscount3, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const negativeerrordatamember = { propertyName: 'negativeErrorDataMember', modelName: '@NegativeErrorDataMember', displayName: 'NegativeErrorDataMember', localizationId: 'DevExpress.XtraCharts.DataSourceBasedErrorBars.NegativeErrorDataMember', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const positiveerrordatamember = { propertyName: 'positiveErrorDataMember', modelName: '@PositiveErrorDataMember', displayName: 'PositiveErrorDataMember', localizationId: 'DevExpress.XtraCharts.DataSourceBasedErrorBars.PositiveErrorDataMember', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const endstyle = {
    propertyName: 'endStyle', modelName: '@EndStyle', displayName: 'EndStyle', localizationId: 'DevExpress.XtraCharts.ErrorBars.EndStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Cap', valuesArray: [
        { displayValue: 'Cap', value: 'Cap' },
        { displayValue: 'NoCap', value: 'NoCap' },
    ]
};
const _indicators_direction = {
    propertyName: 'direction', modelName: '@Direction', displayName: 'Direction', localizationId: 'DevExpress.XtraCharts.ErrorBars.Direction', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Both', valuesArray: [
        { displayValue: 'Both', value: 'Both' },
        { displayValue: 'Minus', value: 'Minus' },
        { displayValue: 'Plus', value: 'Plus' },
    ]
};
const dataSourceBasedErrorBars = [negativeerrordatamember, positiveerrordatamember, endstyle, _indicators_direction, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount4 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.DetrendedPriceOscillator.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 20 };
const valuelevel1 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.DetrendedPriceOscillator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const detrendedPriceOscillator = [pointscount4, valuelevel1, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const kind = {
    propertyName: 'kind', modelName: '@Kind', displayName: 'Kind', localizationId: 'DevExpress.XtraCharts.MovingAverage.Kind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'MovingAverage', valuesArray: [
        { displayValue: 'MovingAverage', value: 'MovingAverage' },
        { displayValue: 'Envelope', value: 'Envelope' },
        { displayValue: 'MovingAverageAndEnvelope', value: 'MovingAverageAndEnvelope' },
    ]
};
const envelopepercent = { propertyName: 'envelopePercent', modelName: '@EnvelopePercent', displayName: 'EnvelopePercent', localizationId: 'DevExpress.XtraCharts.MovingAverage.EnvelopePercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 3 };
const envelopecolor = { propertyName: 'envelopeColor', modelName: '@EnvelopeColor', displayName: 'EnvelopeColor', localizationId: 'DevExpress.XtraCharts.MovingAverage.EnvelopeColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const pointscount5 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.SubsetBasedIndicator.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const valuelevel2 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.SingleLevelIndicator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const exponentialMovingAverage = [kind, envelopepercent, envelopecolor, pointscount5, valuelevel2, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const baselevelcolor = { propertyName: 'baseLevelColor', modelName: '@BaseLevelColor', displayName: 'BaseLevelColor', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.BaseLevelColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const showlevel0 = { propertyName: 'showLevel0', modelName: '@ShowLevel0', displayName: 'ShowLevel0', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.ShowLevel0', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const showlevel100 = { propertyName: 'showLevel100', modelName: '@ShowLevel100', displayName: 'ShowLevel100', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.ShowLevel100', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const showlevel23_6 = { propertyName: 'showLevel23_6', modelName: '@ShowLevel23_6', displayName: 'ShowLevel23_6', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.ShowLevel23_6', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const showlevel76_4 = { propertyName: 'showLevel76_4', modelName: '@ShowLevel76_4', displayName: 'ShowLevel76_4', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.ShowLevel76_4', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const showadditionallevels = { propertyName: 'showAdditionalLevels', modelName: '@ShowAdditionalLevels', displayName: 'ShowAdditionalLevels', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.ShowAdditionalLevels', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const kind1 = {
    propertyName: 'kind', modelName: '@Kind', displayName: 'Kind', localizationId: 'DevExpress.XtraCharts.FibonacciIndicator.Kind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'FibonacciArcs', valuesArray: [
        { displayValue: 'FibonacciArcs', value: 'FibonacciArcs' },
        { displayValue: 'FibonacciFans', value: 'FibonacciFans' },
        { displayValue: 'FibonacciRetracement', value: 'FibonacciRetracement' },
    ]
};
const fibonacciIndicator = [baselevelcolor, showlevel0, showlevel100, showlevel23_6, showlevel76_4, showadditionallevels, kind1, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const negativeerror = { propertyName: 'negativeError', modelName: '@NegativeError', displayName: 'NegativeError', localizationId: 'DevExpress.XtraCharts.FixedValueErrorBars.NegativeError', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1 };
const positiveerror = { propertyName: 'positiveError', modelName: '@PositiveError', displayName: 'PositiveError', localizationId: 'DevExpress.XtraCharts.FixedValueErrorBars.PositiveError', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1 };
const fixedValueErrorBars = [negativeerror, positiveerror, endstyle, _indicators_direction, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const movingaveragepointscount = { propertyName: 'movingAveragePointsCount', modelName: '@MovingAveragePointsCount', displayName: 'MovingAveragePointsCount', localizationId: 'DevExpress.XtraCharts.MassIndex.MovingAveragePointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const sumpointscount = { propertyName: 'sumPointsCount', modelName: '@SumPointsCount', displayName: 'SumPointsCount', localizationId: 'DevExpress.XtraCharts.MassIndex.SumPointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 25 };
const massIndex = [movingaveragepointscount, sumpointscount, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const medianPrice = [_indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const longperiod = { propertyName: 'longPeriod', modelName: '@LongPeriod', displayName: 'LongPeriod', localizationId: 'DevExpress.XtraCharts.MovingAverageConvergenceDivergence.LongPeriod', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 26 };
const shortperiod = { propertyName: 'shortPeriod', modelName: '@ShortPeriod', displayName: 'ShortPeriod', localizationId: 'DevExpress.XtraCharts.MovingAverageConvergenceDivergence.ShortPeriod', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 12 };
const signalsmoothingperiod = { propertyName: 'signalSmoothingPeriod', modelName: '@SignalSmoothingPeriod', displayName: 'SignalSmoothingPeriod', localizationId: 'DevExpress.XtraCharts.MovingAverageConvergenceDivergence.SignalSmoothingPeriod', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 9 };
const signallinecolor = { propertyName: 'signalLineColor', modelName: '@SignalLineColor', displayName: 'SignalLineColor', localizationId: 'DevExpress.XtraCharts.MovingAverageConvergenceDivergence.SignalLineColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const valuelevel3 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.MovingAverageConvergenceDivergence.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const movingAverageConvergenceDivergence = [longperiod, shortperiod, signalsmoothingperiod, signallinecolor, valuelevel3, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const percent = { propertyName: 'percent', modelName: '@Percent', displayName: 'Percent', localizationId: 'DevExpress.XtraCharts.PercentageErrorBars.Percent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 5 };
const percentageErrorBars = [percent, endstyle, _indicators_direction, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount6 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.RateOfChange.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 14 };
const valuelevel4 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.RateOfChange.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const rateOfChange = [pointscount6, valuelevel4, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const valuelevel5 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.SingleLevelIndicator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const regressionLine = [valuelevel5, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount7 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.RelativeStrengthIndex.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 14 };
const valuelevel6 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.RelativeStrengthIndex.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const relativeStrengthIndex = [pointscount7, valuelevel6, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount8 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.SubsetBasedIndicator.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const valuelevel7 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.SingleLevelIndicator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const simpleMovingAverage = [kind, envelopepercent, envelopecolor, pointscount8, valuelevel7, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount9 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.StandardDeviation.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 14 };
const valuelevel8 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.StandardDeviation.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const standardDeviation = [pointscount9, valuelevel8, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const multiplier = { propertyName: 'multiplier', modelName: '@Multiplier', displayName: 'Multiplier', localizationId: 'DevExpress.XtraCharts.StandardDeviationErrorBars.Multiplier', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1 };
const standardDeviationErrorBars = [multiplier, endstyle, _indicators_direction, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const standardErrorBars = [endstyle, _indicators_direction, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const extrapolatetoinfinity = { propertyName: 'extrapolateToInfinity', modelName: '@ExtrapolateToInfinity', displayName: 'ExtrapolateToInfinity', localizationId: 'DevExpress.XtraCharts.TrendLine.ExtrapolateToInfinity', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const pointInfo = [valuelevel2, argumentSerializable];
const point1 = { propertyName: 'point1', modelName: 'Point1', displayName: 'Point 1', localizationId: 'DevExpress.XtraCharts.FinancialIndicator.Point1', info: pointInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), defaultVal: {} };
const point2 = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, point1, { propertyName: 'point2', modelName: 'Point2', displayName: 'Point 2', localizationId: 'DevExpress.XtraCharts.FinancialIndicator.Point2' });
const trendLine = [extrapolatetoinfinity, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag, point1, point2];
const pointscount10 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.SubsetBasedIndicator.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const valuelevel9 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.SingleLevelIndicator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const triangularMovingAverage = [kind, envelopepercent, envelopecolor, pointscount10, valuelevel9, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount11 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.SubsetBasedIndicator.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const valuelevel10 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.SingleLevelIndicator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const tripleExponentialMovingAverageTema = [kind, envelopepercent, envelopecolor, pointscount11, valuelevel10, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount12 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.TripleExponentialMovingAverageTrix.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 15 };
const valuelevel11 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.TripleExponentialMovingAverageTrix.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Close', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const tripleExponentialMovingAverageTrix = [pointscount12, valuelevel11, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const typicalPrice = [_indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const weightedClose = [_indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount13 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.SubsetBasedIndicator.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const valuelevel12 = {
    propertyName: 'valueLevel', modelName: '@ValueLevel', displayName: 'ValueLevel', localizationId: 'DevExpress.XtraCharts.SingleLevelIndicator.ValueLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Value', valuesArray: [
        { displayValue: 'Value', value: 'Value' },
        { displayValue: 'Value_1', value: 'Value_1' },
        { displayValue: 'Value_2', value: 'Value_2' },
        { displayValue: 'Low', value: 'Low' },
        { displayValue: 'High', value: 'High' },
        { displayValue: 'Open', value: 'Open' },
        { displayValue: 'Close', value: 'Close' },
        { displayValue: 'Weight', value: 'Weight' },
        { displayValue: 'BoxPlotMin', value: 'BoxPlotMin' },
        { displayValue: 'BoxPlotQuartile_1', value: 'BoxPlotQuartile_1' },
        { displayValue: 'BoxPlotMedian', value: 'BoxPlotMedian' },
        { displayValue: 'BoxPlotQuartile_3', value: 'BoxPlotQuartile_3' },
        { displayValue: 'BoxPlotMax', value: 'BoxPlotMax' },
        { displayValue: 'BoxPlotMean', value: 'BoxPlotMean' },
    ]
};
const weightedMovingAverage = [kind, envelopepercent, envelopecolor, pointscount13, valuelevel12, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const pointscount14 = { propertyName: 'pointsCount', modelName: '@PointsCount', displayName: 'PointsCount', localizationId: 'DevExpress.XtraCharts.WilliamsR.PointsCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 14 };
const williamsR = [pointscount14, _indicators_name, legendtext, _indicators_color, _indicators_visible, checkedinlegend, checkableinlegend, showinlegend, crosshairenabled, crosshairlabelvisibility, crosshairlabelpattern, crosshaircontentshowmode, crosshairemptyvaluelegendtext, _indicators_tag];
const indicatorMapper = {
    'AverageTrueRange': averageTrueRange,
    'BollingerBands': bollingerBands,
    'ChaikinsVolatility': chaikinsVolatility,
    'CommodityChannelIndex': commodityChannelIndex,
    'DataSourceBasedErrorBars': dataSourceBasedErrorBars,
    'DetrendedPriceOscillator': detrendedPriceOscillator,
    'ExponentialMovingAverage': exponentialMovingAverage,
    'FibonacciIndicator': fibonacciIndicator,
    'FixedValueErrorBars': fixedValueErrorBars,
    'MassIndex': massIndex,
    'MedianPrice': medianPrice,
    'MovingAverageConvergenceDivergence': movingAverageConvergenceDivergence,
    'PercentageErrorBars': percentageErrorBars,
    'RateOfChange': rateOfChange,
    'RegressionLine': regressionLine,
    'RelativeStrengthIndex': relativeStrengthIndex,
    'SimpleMovingAverage': simpleMovingAverage,
    'StandardDeviation': standardDeviation,
    'StandardDeviationErrorBars': standardDeviationErrorBars,
    'StandardErrorBars': standardErrorBars,
    'TrendLine': trendLine,
    'TriangularMovingAverage': triangularMovingAverage,
    'TripleExponentialMovingAverageTema': tripleExponentialMovingAverageTema,
    'TripleExponentialMovingAverageTrix': tripleExponentialMovingAverageTrix,
    'TypicalPrice': typicalPrice,
    'WeightedClose': weightedClose,
    'WeightedMovingAverage': weightedMovingAverage,
    'WilliamsR': williamsR,
};

;// ./node_modules/devexpress-reporting/chart/components/series/_indicator.js




class Indicator extends ChartElementCollectionItemBase {
    constructor(model, parent, serializer) {
        super(model, parent, serializer, indicatorMapper[model['@TypeNameSerializable']]);
    }
    getExpressionProperties() {
        return ['LegendText'];
    }
}
Indicator.prefix = 'indicator';

function assignIndicatorActions(indicators) {
    const addIndicator = (model, display) => {
        model['@Name'] = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(indicators().map(x => { return x['name'](); }), display);
        indicators()['innerActions'][0].closePopover();
        indicators.push(new Indicator(model, indicators));
    };
    const actions = Object.keys(indicatorMapper).map(x => {
        const display = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(x, 'ChartStringId.Ind' + x);
        return {
            text: x,
            display: display,
            clickAction: () => addIndicator({ '@TypeNameSerializable': x }, display)
        };
    });
    const id = 'addindicators-action_' + (0,external_DevExpress_Analytics_Internal_namespaceObject.guid)();
    indicators()['innerActions'] = createInnerActionsWithPopover((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'), id, actions, 'dxcd-indicators-list');
}

;// ./node_modules/devexpress-reporting/chart/internal/meta/_view.js









const paneName = { propertyName: 'paneName', modelName: '@PaneName', displayName: 'Pane', localizationId: 'DevExpress.XtraCharts.XYDiagramPane', defaultVal: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Default Pane', 'ChartStringId.DefaultPaneName'), editor: editorTemplates.getEditor('panes') };
const axisXName = { propertyName: 'axisXName', modelName: '@AxisXName', displayName: 'AxisX', localizationId: 'DevExpress.XtraCharts.GanttAxisX', defaultVal: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Primary AxisX', 'ChartStringId.PrimaryAxisXName'), editor: editorTemplates.getEditor('axisX') };
const axisYName = { propertyName: 'axisYName', modelName: '@AxisYName', displayName: 'AxisY', localizationId: 'DevExpress.XtraCharts.SeparatePaneIndicator.AxisY', defaultVal: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Primary AxisY', 'ChartStringId.PrimaryAxisYName'), editor: editorTemplates.getEditor('axisY') };
const arrowWidthValidationRules = [{
        type: 'custom',
        validationCallback: (options) => {
            return options.value % 2 !== 0;
        },
        get message() {
            return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The arrow width should be always odd and greater than 0', 'ChartStringId.MsgIncorrectArrowWidth');
        }
    }];
const invertedStep = { propertyName: 'invertedStep', modelName: '@InvertedStep', displayName: 'Inverted Step', localizationId: 'DevExpress.XtraCharts.FullStackedStepAreaSeriesView.InvertedStep', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const viewFillStyle = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.AreaSeriesViewBase.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'PolygonGradientFillOptions'), toJsonObject: FillStyle.toJson };
const transparency = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.AreaSeriesViewBase.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const viewEnableAntialiasing = {
    propertyName: 'enableAntialiasing', modelName: '@EnableAntialiasing', displayName: 'Enable Antialiasing', localizationId: 'DevExpress.XtraCharts.LineSeriesView.EnableAntialiasing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const _view_size = { propertyName: 'size', modelName: '@Size', displayName: 'Size', localizationId: 'DevExpress.XtraCharts.Shadow.Size', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, editorOptions: { min: 1 } };
const viewColor = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.Shadow.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: '79,0,0,0' };
const viewVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'Visible', localizationId: 'DevExpress.XtraCharts.Shadow.Visible', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const shadowInfo = [_view_size, viewColor, viewVisible, tag];
const shadow = { propertyName: 'shadow', modelName: 'Shadow', displayName: 'Shadow', localizationId: 'DevExpress.XtraCharts.XYDiagramSeriesViewBase.Shadow', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: shadowInfo, };
const viewAggregateFunction = {
    propertyName: 'aggregateFunction', modelName: '@AggregateFunction', displayName: 'Aggregate Function', localizationId: 'DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.AggregateFunction', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'Average', displayValue: 'Average', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: 'Minimum', displayValue: 'Minimum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: 'Maximum', displayValue: 'Maximum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: 'Sum', displayValue: 'Sum', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: 'Count', displayValue: 'Count', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: 'Financial', displayValue: 'Financial', localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const indicators = {
    propertyName: 'indicators',
    modelName: 'Indicators',
    displayName: 'Indicators',
    localizationId: 'DevExpress.XtraCharts.XYDiagram2DSeriesViewBase.Indicators',
    array: true,
    from(model, serializer) {
        return deserializeModelArray(model, (indicator, parent) => { return new Indicator(indicator, parent, serializer); }, Indicator.prefix);
    }
};
const color1 = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.SeriesViewBase.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const fullStackedStepAreaSeriesViewinfo = [invertedStep, viewFillStyle, transparency, viewEnableAntialiasing, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const viewColor2 = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.Marker.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const size1 = { propertyName: 'size', modelName: '@Size', displayName: 'Size', localizationId: 'DevExpress.XtraCharts.SimpleMarker.Size', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 10, editorOptions: { min: 1 } };
const _view_kind = {
    propertyName: 'kind', modelName: '@Kind', displayName: 'Kind', localizationId: 'DevExpress.XtraCharts.MarkerBase.Kind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Square', displayValue: 'Square', localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' }, { value: 'Diamond', displayValue: 'Diamond', localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' }, { value: 'Triangle', displayValue: 'Triangle', localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' }, { value: 'InvertedTriangle', displayValue: 'InvertedTriangle' }, { value: 'Circle', displayValue: 'Circle', localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' }, { value: 'Plus', displayValue: 'Plus', localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' }, { value: 'Cross', displayValue: 'Cross', localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' }, { value: 'Star', displayValue: 'Star', localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' }, { value: 'Pentagon', displayValue: 'Pentagon', localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' }, { value: 'Hexagon', displayValue: 'Hexagon', localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' }], defaultVal: 'Circle'
};
const starPointCount = { propertyName: 'starPointCount', modelName: '@StarPointCount', displayName: 'Star Point Count', localizationId: 'DevExpress.XtraCharts.MarkerBase.StarPointCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 5, editorOptions: { min: 3, max: 100 } };
const fillStyle1 = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.MarkerBase.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'PolygonGradientFillOptions'), toJsonObject: FillStyle.toJson };
const viewBorderVisible = { propertyName: 'borderVisible', modelName: '@BorderVisible', displayName: 'Border Visible', localizationId: 'DevExpress.XtraCharts.MarkerBase.BorderVisible', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const viewBorderColor = { propertyName: 'borderColor', modelName: '@BorderColor', displayName: 'Border Color', localizationId: 'DevExpress.XtraCharts.MarkerBase.BorderColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const marker1Info = [viewColor2, size1, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const marker1 = { propertyName: 'marker1', modelName: 'Marker1', displayName: 'Marker 1', localizationId: 'DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker1', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: marker1Info, };
const marker2Info = [viewColor2, size1, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const marker2 = { propertyName: 'marker2', modelName: 'Marker2', displayName: 'Marker 2', localizationId: 'DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker2', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: marker2Info, };
const color3 = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.BorderBase.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const viewThickness = { propertyName: 'thickness', modelName: '@Thickness', displayName: 'Thickness', localizationId: 'DevExpress.XtraCharts.BorderBase.Thickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { min: 1 } };
const viewVisibility = {
    propertyName: 'visibility', modelName: '@Visibility', displayName: 'Visibility', localizationId: 'DevExpress.XtraCharts.BorderBase.Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const border1Info = [color3, viewThickness, viewVisibility, tag];
const border1 = { propertyName: 'border1', modelName: 'Border1', displayName: 'Border 1', localizationId: 'DevExpress.XtraCharts.RadarRangeAreaSeriesView.Border1', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: border1Info, };
const border2Info = [color3, viewThickness, viewVisibility, tag];
const border2 = { propertyName: 'border2', modelName: 'Border2', displayName: 'Border 2', localizationId: 'DevExpress.XtraCharts.RadarRangeAreaSeriesView.Border2', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: border2Info, };
const marker1Visibility = {
    propertyName: 'marker1Visibility', modelName: '@Marker1Visibility', displayName: 'Marker 1 Visibility', localizationId: 'DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker1Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const marker2Visibility = {
    propertyName: 'marker2Visibility', modelName: '@Marker2Visibility', displayName: 'Marker 2 Visibility', localizationId: 'DevExpress.XtraCharts.RadarRangeAreaSeriesView.Marker2Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const fillStyle2 = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.RadarAreaSeriesView.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'PolygonGradientFillOptions'), toJsonObject: FillStyle.toJson };
const transparency1 = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.RadarAreaSeriesView.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 135 };
const aggregateFunction1 = {
    propertyName: 'aggregateFunction', modelName: '@AggregateFunction', displayName: 'Aggregate Function', localizationId: 'DevExpress.XtraCharts.RadarSeriesViewBase.AggregateFunction', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'Average', displayValue: 'Average', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: 'Minimum', displayValue: 'Minimum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: 'Maximum', displayValue: 'Maximum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: 'Sum', displayValue: 'Sum', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: 'Count', displayValue: 'Count', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: 'Financial', displayValue: 'Financial', localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const shadow1 = { propertyName: 'shadow', modelName: 'Shadow', displayName: 'Shadow', localizationId: 'DevExpress.XtraCharts.RadarSeriesViewBase.Shadow', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: shadowInfo, };
const viewColorEach = { propertyName: 'colorEach', modelName: '@ColorEach', displayName: 'Color Each', localizationId: 'DevExpress.XtraCharts.RadarSeriesViewBase.ColorEach', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const polarRangeAreaSeriesViewinfo = [marker1, marker2, border1, border2, marker1Visibility, marker2Visibility, fillStyle2, transparency1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const radarRangeAreaSeriesViewinfo = [marker1, marker2, border1, border2, marker1Visibility, marker2Visibility, fillStyle2, transparency1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const areaWidth = { propertyName: 'areaWidth', modelName: '@AreaWidth', displayName: 'Area Width', localizationId: 'DevExpress.XtraCharts.Area3DSeriesView.AreaWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.6, editorOptions: { min: 1 } };
const aggregateFunction2 = {
    propertyName: 'aggregateFunction', modelName: '@AggregateFunction', displayName: 'Aggregate Function', localizationId: 'DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.AggregateFunction', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'Average', displayValue: 'Average', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average' }, { value: 'Minimum', displayValue: 'Minimum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' }, { value: 'Maximum', displayValue: 'Maximum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' }, { value: 'Sum', displayValue: 'Sum', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum' }, { value: 'Count', displayValue: 'Count', localizationId: 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count' }, { value: 'Financial', displayValue: 'Financial', localizationId: 'DevExpress.XtraCharts.SeriesAggregateFunction.Financial' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const transparency2 = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const rangeArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency2, color1, tag];
const marker11 = { propertyName: 'marker1', modelName: 'Marker1', displayName: 'Marker 1', localizationId: 'DevExpress.XtraCharts.RangeAreaSeriesView.Marker1', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: marker1Info, };
const marker21 = { propertyName: 'marker2', modelName: 'Marker2', displayName: 'Marker 2', localizationId: 'DevExpress.XtraCharts.RangeAreaSeriesView.Marker2', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: marker2Info, };
const border11 = { propertyName: 'border1', modelName: 'Border1', displayName: 'Border 1', localizationId: 'DevExpress.XtraCharts.RangeAreaSeriesView.Border1', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: border1Info, };
const border21 = { propertyName: 'border2', modelName: 'Border2', displayName: 'Border 2', localizationId: 'DevExpress.XtraCharts.RangeAreaSeriesView.Border2', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: border2Info, };
const marker1Visibility1 = {
    propertyName: 'marker1Visibility', modelName: '@Marker1Visibility', displayName: 'Marker 1 Visibility', localizationId: 'DevExpress.XtraCharts.RangeAreaSeriesView.Marker1Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const marker2Visibility1 = {
    propertyName: 'marker2Visibility', modelName: '@Marker2Visibility', displayName: 'Marker 2 Visibility', localizationId: 'DevExpress.XtraCharts.RangeAreaSeriesView.Marker2Visibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const transparency3 = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.AreaSeriesViewBase.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 135 };
const colorEach1 = { propertyName: 'colorEach', modelName: '@ColorEach', displayName: 'Color Each', localizationId: 'DevExpress.XtraCharts.SeriesViewColorEachSupportBase.ColorEach', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const rangeAreaSeriesViewinfo = [marker11, marker21, border11, border21, marker1Visibility1, marker2Visibility1, viewFillStyle, transparency3, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const invertedStep1 = { propertyName: 'invertedStep', modelName: '@InvertedStep', displayName: 'Inverted Step', localizationId: 'DevExpress.XtraCharts.StackedStepAreaSeriesView.InvertedStep', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const borderInfo = [color3, viewThickness, viewVisibility, tag];
const viewBorder1 = { propertyName: 'border', modelName: 'Border', displayName: 'Border', localizationId: 'DevExpress.XtraCharts.AreaSeriesViewBase.Border', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: borderInfo, };
const stackedStepAreaSeriesViewinfo = [invertedStep1, viewBorder1, viewFillStyle, transparency, viewEnableAntialiasing, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const invertedStep2 = { propertyName: 'invertedStep', modelName: '@InvertedStep', displayName: 'Inverted Step', localizationId: 'DevExpress.XtraCharts.StepArea3DSeriesView.InvertedStep', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const transparency4 = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.XYDiagram3DSeriesViewBase.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 135 };
const stepArea3DSeriesViewinfo = [invertedStep2, areaWidth, aggregateFunction2, transparency4, color1, tag];
const invertedStep3 = { propertyName: 'invertedStep', modelName: '@InvertedStep', displayName: 'Inverted Step', localizationId: 'DevExpress.XtraCharts.StepAreaSeriesView.InvertedStep', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const markerOptionsInfo = [viewColor2, size1, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const markerOptions = { propertyName: 'markerOptions', modelName: 'MarkerOptions', displayName: 'Marker Options', localizationId: 'DevExpress.XtraCharts.AreaSeriesViewBase.MarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: markerOptionsInfo, };
const viewMarkerVisibility = {
    propertyName: 'markerVisibility', modelName: '@MarkerVisibility', displayName: 'Marker Visibility', localizationId: 'DevExpress.XtraCharts.LineSeriesView.MarkerVisibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const stepAreaSeriesViewinfo = [invertedStep3, viewBorder1, viewFillStyle, markerOptions, transparency3, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const stackedGroup = { propertyName: 'stackedGroup', modelName: '@StackedGroupSerializable', displayName: 'Stacked Group', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.StackedGroup', editor: editorTemplates.getEditor('group'), defaultVal: null };
const barDistance = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBar3DSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const viewBarWidth = { propertyName: 'barWidth', modelName: '@BarWidth', displayName: 'Bar Width', localizationId: 'DevExpress.XtraCharts.Bar3DSeriesView.BarWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.6, editorOptions: { min: 0, step: 0.1 } };
const barDepth = { propertyName: 'barDepth', modelName: '@BarDepth', displayName: 'Bar Depth', localizationId: 'DevExpress.XtraCharts.Bar3DSeriesView.BarDepth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.6, editorOptions: { min: 0, step: 0.1 } };
const barDepthAuto = { propertyName: 'barDepthAuto', modelName: '@BarDepthAuto', displayName: 'Bar Depth Auto', localizationId: 'DevExpress.XtraCharts.Bar3DSeriesView.BarDepthAuto', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const fillMode1 = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode', localizationId: 'DevExpress.XtraCharts.FillStyle3D.FillMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Empty', displayValue: 'Empty', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearances.Empty' }, { value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Gradient', displayValue: 'Gradient', localizationId: 'DevExpress.XtraCharts.FillMode3D.Gradient' }], defaultVal: 'Empty'
};
const fillStyleInfo1 = [fillMode1, fillStyleOptionsSerialize, tag];
const fillStyle3 = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.Bar3DSeriesView.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo1, 'RectangleGradientFillOptions'), toJsonObject: FillStyle.toJson };
const model = {
    propertyName: 'model', modelName: '@Model', displayName: 'Model', localizationId: 'DevExpress.XtraCharts.Bar3DSeriesView.Model', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Box', displayValue: 'Box', localizationId: 'DevExpress.XtraCharts.Bar3DModel.Box' }, { value: 'Cylinder', displayValue: 'Cylinder', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Cylinder' }, { value: 'Cone', displayValue: 'Cone', localizationId: 'DevExpress.XtraCharts.Bar3DModel.Cone' }, { value: 'Pyramid', displayValue: 'Pyramid', localizationId: 'DevExpress.XtraCharts.Bar3DModel.Pyramid' }], defaultVal: 'Box'
};
const showFacet = { propertyName: 'showFacet', modelName: '@ShowFacet', displayName: 'Show Facet', localizationId: 'DevExpress.XtraCharts.Bar3DSeriesView.ShowFacet', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const colorEach2 = { propertyName: 'colorEach', modelName: '@ColorEach', displayName: 'Color Each', localizationId: 'DevExpress.XtraCharts.SeriesView3DColorEachSupportBase.ColorEach', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const sideBySideFullStackedBar3DSeriesViewinfo = [stackedGroup, barDistance, barDistanceFixed, equalBarWidth, viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, tag];
const stackedGroup1 = { propertyName: 'stackedGroup', modelName: '@StackedGroupSerializable', displayName: 'Stacked Group', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.StackedGroup', editor: editorTemplates.getEditor('group'), defaultVal: null };
const barDistance1 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed1 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth1 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideFullStackedBarSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const barWidth1 = { propertyName: 'barWidth', modelName: '@BarWidth', displayName: 'Bar Width', localizationId: 'DevExpress.XtraCharts.BarSeriesView.BarWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.6, editorOptions: { min: 0, step: 0.1 } };
const border3 = { propertyName: 'border', modelName: 'Border', displayName: 'Border', localizationId: 'DevExpress.XtraCharts.BarSeriesView.Border', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: borderInfo };
const fillStyle4 = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.BarSeriesView.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'RectangleGradientFillOptions'), toJsonObject: FillStyle.toJson };
const transparency5 = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.BarSeriesView.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const sideBySideFullStackedBarSeriesViewinfo = [stackedGroup1, barDistance1, barDistanceFixed1, equalBarWidth1, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const stackedGroup2 = { propertyName: 'stackedGroup', modelName: '@StackedGroupSerializable', displayName: 'Stacked Group', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.StackedGroup', editor: editorTemplates.getEditor('group'), defaultVal: null };
const barDistance2 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed2 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth2 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBar3DSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const sideBySideStackedBar3DSeriesViewinfo = [stackedGroup2, barDistance2, barDistanceFixed2, equalBarWidth2, viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, tag];
const stackedGroup3 = { propertyName: 'stackedGroup', modelName: '@StackedGroupSerializable', displayName: 'Stacked Group', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBarSeriesView.StackedGroup', editor: editorTemplates.getEditor('group'), defaultVal: null };
const barDistance3 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBarSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed3 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBarSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth3 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideStackedBarSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const sideBySideStackedBarSeriesViewinfo = [stackedGroup3, barDistance3, barDistanceFixed3, equalBarWidth3, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const lineThickness = { propertyName: 'lineThickness', modelName: '@LineThickness', displayName: 'Line Thickness', localizationId: 'DevExpress.XtraCharts.Line3DSeriesView.LineThickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 5, editorOptions: { min: 1 } };
const _view_lineWidth = { propertyName: 'lineWidth', modelName: '@LineWidth', displayName: 'Line Width', localizationId: 'DevExpress.XtraCharts.Line3DSeriesView.LineWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.6, editorOptions: { min: 1 } };
const fullStackedLine3DSeriesViewinfo = [lineThickness, _view_lineWidth, aggregateFunction2, transparency2, color1, tag];
const thickness1 = { propertyName: 'thickness', modelName: '@Thickness', displayName: 'Thickness', localizationId: 'DevExpress.XtraCharts.LineStyle.Thickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, editorOptions: { min: 1 } };
const viewDashStyle = {
    propertyName: 'dashStyle', modelName: '@DashStyle', displayName: 'Dash Style', localizationId: 'DevExpress.XtraCharts.LineStyle.DashStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Solid', displayValue: 'Solid', localizationId: 'DevExpress.XtraCharts.FillMode3D.Solid' }, { value: 'Dash', displayValue: 'Dash', localizationId: 'DevExpress.XtraCharts.DashStyle.Dash' }, { value: 'Dot', displayValue: 'Dot', localizationId: 'DevExpress.XtraCharts.DashStyle.Dot' }, { value: 'DashDot', displayValue: 'DashDot' }, { value: 'DashDotDot', displayValue: 'DashDotDot' }], defaultVal: 'Solid'
};
const lineJoin = {
    propertyName: 'lineJoin', modelName: '@LineJoin', displayName: 'Line Join', localizationId: 'DevExpress.XtraCharts.LineStyle.LineJoin', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Miter', displayValue: 'Miter', localizationId: 'System.Drawing.Drawing2D.LineJoin.Miter' }, { value: 'Bevel', displayValue: 'Bevel', localizationId: 'System.Drawing.Drawing2D.LineJoin.Bevel' }, { value: 'Round', displayValue: 'Round', localizationId: 'System.Drawing.Drawing2D.LineJoin.Round' }, { value: 'MiterClipped', displayValue: 'MiterClipped', localizationId: 'System.Drawing.Drawing2D.LineJoin.MiterClipped' }], defaultVal: 'Miter'
};
const lineStyleInfo = [thickness1, viewDashStyle, lineJoin, tag];
const viewLineStyle = { propertyName: 'lineStyle', modelName: 'LineStyle', displayName: 'Line Style', localizationId: 'DevExpress.XtraCharts.LineSeriesView.LineStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: lineStyleInfo, };
const lineMarkerOptionsInfo = [viewColor2, size1, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const lineMarkerOptions = { propertyName: 'lineMarkerOptions', modelName: 'LineMarkerOptions', displayName: 'Line Marker Options', localizationId: 'DevExpress.XtraCharts.LineSeriesView.LineMarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: lineMarkerOptionsInfo, };
const fullStackedLineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const lineStyle1 = { propertyName: 'lineStyle', modelName: 'LineStyle', displayName: 'Line Style', localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.LineStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: lineStyleInfo, };
const _view_closed = { propertyName: 'closed', modelName: '@Closed', displayName: 'Closed', localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.Closed', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const lineMarkerOptions1 = { propertyName: 'lineMarkerOptions', modelName: 'LineMarkerOptions', displayName: 'Line Marker Options', localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.LineMarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: lineMarkerOptionsInfo, };
const markerVisibility1 = {
    propertyName: 'markerVisibility', modelName: '@MarkerVisibility', displayName: 'Marker Visibility', localizationId: 'DevExpress.XtraCharts.RadarLineSeriesView.MarkerVisibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const scatterPolarLineSeriesViewinfo = [lineStyle1, _view_closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const scatterRadarLineSeriesViewinfo = [lineStyle1, _view_closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const stackedLine3DSeriesViewinfo = [lineThickness, _view_lineWidth, aggregateFunction2, transparency2, color1, tag];
const stackedLineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const weight = { propertyName: 'weight', modelName: '@Weight', displayName: 'Weight', localizationId: 'DevExpress.XtraCharts.NestedDoughnutSeriesView.Weight', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { min: 1 } };
const innerIndent = { propertyName: 'innerIndent', modelName: '@InnerIndent', displayName: 'Inner Indent', localizationId: 'DevExpress.XtraCharts.NestedDoughnutSeriesView.InnerIndent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 5, editorOptions: { min: 0 } };
const group = { propertyName: 'group', modelName: '@GroupSerializable', displayName: 'Group', localizationId: 'DevExpress.XtraCharts.NestedDoughnutSeriesView.Group', editor: editorTemplates.getEditor('group'), defaultVal: null };
const holeRadiusPercent = { propertyName: 'holeRadiusPercent', modelName: '@HoleRadiusPercent', displayName: 'Hole Radius Percent', localizationId: 'DevExpress.XtraCharts.DoughnutSeriesView.HoleRadiusPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 40, editorOptions: { min: 0, max: 100 } };
const minAllowedSizePercentage = { propertyName: 'minAllowedSizePercentage', modelName: '@MinAllowedSizePercentage', displayName: 'Min Allowed Size Percentage', localizationId: 'DevExpress.XtraCharts.PieSeriesView.MinAllowedSizePercentage', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 50, editorOptions: { min: 0, max: 100 } };
const rotation = { propertyName: 'rotation', modelName: '@Rotation', displayName: 'Rotation', localizationId: 'DevExpress.XtraCharts.PieSeriesView.Rotation', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const heightToWidthRatio = { propertyName: 'heightToWidthRatio', modelName: '@HeightToWidthRatio', displayName: 'Height to Width Ratio', localizationId: 'DevExpress.XtraCharts.PieSeriesView.HeightToWidthRatio', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { min: 0 } };
const border4 = { propertyName: 'border', modelName: 'Border', displayName: 'Border', localizationId: 'DevExpress.XtraCharts.PieSeriesView.Border', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: borderInfo, };
const fillStyle5 = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.PieSeriesView.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'PolygonGradientFillOptions'), toJsonObject: FillStyle.toJson };
const runtimeExploding = { propertyName: 'runtimeExploding', modelName: '@RuntimeExploding', displayName: 'Runtime Exploding', localizationId: 'DevExpress.XtraCharts.PieSeriesView.RuntimeExploding', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const explodedDistancePercentage = { propertyName: 'explodedDistancePercentage', modelName: '@ExplodedDistancePercentage', displayName: 'Exploded Distance Percentage', localizationId: 'DevExpress.XtraCharts.PieSeriesViewBase.ExplodedDistancePercentage', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 10, editorOptions: { min: 1 } };
const explodeMode = {
    propertyName: 'explodeMode', modelName: '@ExplodeMode', displayName: 'Explode Mode', localizationId: 'DevExpress.XtraCharts.PieSeriesViewBase.ExplodeMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'All', displayValue: 'All', localizationId: 'DevExpress.XtraCharts.PieExplodeMode.All' }, { value: 'MinValue', displayValue: 'MinValue' }, { value: 'MaxValue', displayValue: 'MaxValue' }, { value: 'UsePoints', displayValue: 'UsePoints' }, { value: 'UseFilters', displayValue: 'UseFilters' }, { value: 'Others', displayValue: 'Others', localizationId: 'DevExpress.XtraCharts.PieExplodeMode.Others' }], defaultVal: 'None'
};
const sweepDirection = {
    propertyName: 'sweepDirection', modelName: '@SweepDirection', displayName: 'Sweep Direction', localizationId: 'DevExpress.XtraCharts.PieSeriesViewBase.SweepDirection', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Counterclockwise', displayValue: 'Counterclockwise', localizationId: 'DevExpress.XtraCharts.PieSweepDirection.Counterclockwise' }, { value: 'Clockwise', displayValue: 'Clockwise', localizationId: 'DevExpress.XtraCharts.PieSweepDirection.Clockwise' }], defaultVal: 'Counterclockwise'
};
const totalLabelInfo = [textColor, backColor, viewEnableAntialiasing, maxWidth, maxLineCount, textAlignment, textPattern, viewVisible, tag, font12, viewBorder1, viewFillStyle, shadow];
const totalLabel = { propertyName: 'totalLabel', modelName: 'TotalLabel', displayName: 'Total Label', localizationId: 'DevExpress.XtraCharts.PieSeriesView.TotalLabel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: totalLabelInfo, };
const viewTitles = {
    propertyName: 'titles',
    modelName: 'Titles',
    array: true,
    from(model, serializer) {
        return deserializeModelArray(model, (title, parent) => { return new ChartViewTitleModel(title, parent, serializer); }, TitleViewModel.prefix);
    },
    displayName: 'Titles',
    localizationId: 'DevExpress.XtraCharts.SimpleDiagramSeriesViewBase.Titles'
};
const nestedDoughnutSeriesViewinfo = [weight, innerIndent, group, holeRadiusPercent, minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, viewTitles, tag, totalLabel];
const thickness2 = { propertyName: 'thickness', modelName: '@Thickness', displayName: 'Thickness', localizationId: 'DevExpress.XtraCharts.LineStyle.Thickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { min: 1 } };
const lineStyleInfo1 = [thickness2, viewDashStyle, lineJoin, tag];
const lineStyle2 = { propertyName: 'lineStyle', modelName: 'LineStyle', displayName: 'Line Style', localizationId: 'DevExpress.XtraCharts.SwiftPlotSeriesView.LineStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: lineStyleInfo1, };
const viewAntialiasing = { propertyName: 'antialiasing', modelName: '@Antialiasing', displayName: 'Antialiasing', localizationId: 'DevExpress.XtraCharts.SwiftPlotSeriesView.Antialiasing', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const swiftPlotSeriesViewinfo = [lineStyle2, viewAntialiasing, axisXName, axisYName, paneName, viewAggregateFunction, indicators, color1, tag];
const holeRadiusPercent1 = { propertyName: 'holeRadiusPercent', modelName: '@HoleRadiusPercent', displayName: 'Hole Radius Percent', localizationId: 'DevExpress.XtraCharts.Funnel3DSeriesView.HoleRadiusPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 90, editorOptions: { min: 0, max: 100 } };
const heightToWidthRatio1 = { propertyName: 'heightToWidthRatio', modelName: '@HeightToWidthRatio', displayName: 'Height to Width Ratio', localizationId: 'DevExpress.XtraCharts.FunnelSeriesViewBase.HeightToWidthRatio', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1 };
const pointDistance = { propertyName: 'pointDistance', modelName: '@PointDistance', displayName: 'Point Distance', localizationId: 'DevExpress.XtraCharts.FunnelSeriesViewBase.PointDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0, editorOptions: { min: 0 } };
const funnel3DSeriesViewinfo = [holeRadiusPercent1, heightToWidthRatio1, pointDistance, viewTitles, tag];
const border5 = { propertyName: 'border', modelName: 'Border', displayName: 'Border', localizationId: 'DevExpress.XtraCharts.FunnelSeriesView.Border', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: borderInfo, };
const fillStyle6 = { propertyName: 'fillStyle', modelName: 'FillStyle', displayName: 'Fill Style', localizationId: 'DevExpress.XtraCharts.FunnelSeriesView.FillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: FillStyle.from(fillStyleInfo, 'PolygonGradientFillOptions'), toJsonObject: FillStyle.toJson };
const alignToCenter = { propertyName: 'alignToCenter', modelName: '@AlignToCenter', displayName: 'Align to Center', localizationId: 'DevExpress.XtraCharts.FunnelSeriesView.AlignToCenter', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const heightToWidthRatioAuto = { propertyName: 'heightToWidthRatioAuto', modelName: '@HeightToWidthRatioAuto', displayName: 'Height to Width Ratio Auto', localizationId: 'DevExpress.XtraCharts.FunnelSeriesView.HeightToWidthRatioAuto', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const funnelSeriesViewinfo = [border5, fillStyle6, alignToCenter, heightToWidthRatioAuto, heightToWidthRatio1, pointDistance, viewTitles, tag];
const scatterLineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const bubbleMarkerOptionsInfo = [_view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const bubbleMarkerOptions = { propertyName: 'bubbleMarkerOptions', modelName: 'BubbleMarkerOptions', displayName: 'Bubble Marker Options', localizationId: 'DevExpress.XtraCharts.BubbleSeriesView.BubbleMarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: bubbleMarkerOptionsInfo, };
const autoSize = { propertyName: 'autoSize', modelName: '@AutoSize', displayName: 'Automatic Size', localizationId: 'DevExpress.XtraCharts.BubbleSeriesView.AutoSize', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const maxSize = { propertyName: 'maxSize', modelName: '@MaxSize', displayName: 'Max Size', localizationId: 'DevExpress.XtraCharts.BubbleSeriesView.MaxSize', editor: editorTemplates.getEditor('maxSize'), defaultVal: 0.9 };
const minSize = { propertyName: 'minSize', modelName: '@MinSize', displayName: 'Min Size', localizationId: 'DevExpress.XtraCharts.BubbleSeriesView.MinSize', editor: editorTemplates.getEditor('minSize'), defaultVal: 0.3, editorOptions: { min: 0 } };
const transparency6 = { propertyName: 'transparency', modelName: '@Transparency', displayName: 'Transparency', localizationId: 'DevExpress.XtraCharts.BubbleSeriesView.Transparency', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const bubbleSeriesViewinfo = [bubbleMarkerOptions, autoSize, maxSize, minSize, transparency6, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const lineTensionPercent = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.Spline3DSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const spline3DSeriesViewinfo = [lineTensionPercent, lineThickness, _view_lineWidth, aggregateFunction2, transparency2, color1, tag];
const lineTensionPercent1 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.SplineArea3DSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const splineArea3DSeriesViewinfo = [lineTensionPercent1, areaWidth, aggregateFunction2, transparency4, color1, tag];
const lineTensionPercent2 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.FullStackedSplineArea3DSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const fullStackedSplineArea3DSeriesViewinfo = [lineTensionPercent2, areaWidth, aggregateFunction2, transparency4, color1, tag];
const lineTensionPercent3 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.SplineAreaSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const splineAreaSeriesViewinfo = [lineTensionPercent3, viewBorder1, viewFillStyle, markerOptions, transparency3, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const lineTensionPercent4 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.FullStackedSplineAreaSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const fullStackedSplineAreaSeriesViewinfo = [lineTensionPercent4, viewFillStyle, transparency, viewEnableAntialiasing, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const lineTensionPercent5 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.StackedSplineArea3DSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const stackedSplineArea3DSeriesViewinfo = [lineTensionPercent5, areaWidth, aggregateFunction2, transparency4, color1, tag];
const lineTensionPercent6 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.SplineSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const splineSeriesViewinfo = [lineTensionPercent6, viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const lineTensionPercent7 = { propertyName: 'lineTensionPercent', modelName: '@LineTensionPercent', displayName: 'Line Tension Percent', localizationId: 'DevExpress.XtraCharts.StackedSplineAreaSeriesView.LineTensionPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 80, editorOptions: { min: 0, max: 100 } };
const stackedSplineAreaSeriesViewinfo = [lineTensionPercent7, viewBorder1, viewFillStyle, transparency, viewEnableAntialiasing, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const area3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, tag];
const fullStackedArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, tag];
const border6 = { propertyName: 'border', modelName: 'Border', displayName: 'Border', localizationId: 'DevExpress.XtraCharts.RadarAreaSeriesView.Border', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: borderInfo, };
const markerOptions1 = { propertyName: 'markerOptions', modelName: 'MarkerOptions', displayName: 'Marker Options', localizationId: 'DevExpress.XtraCharts.RadarAreaSeriesView.MarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: markerOptionsInfo, };
const polarAreaSeriesViewinfo = [border6, fillStyle2, markerOptions1, transparency1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const radarAreaSeriesViewinfo = [border6, fillStyle2, markerOptions1, transparency1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const stackedArea3DSeriesViewinfo = [areaWidth, aggregateFunction2, transparency4, color1, tag];
const fullStackedBar3DSeriesViewinfo = [viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, tag];
const barDistance4 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideBar3DSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed4 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideBar3DSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth4 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideBar3DSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const sideBySideBar3DSeriesViewinfo = [barDistance4, barDistanceFixed4, equalBarWidth4, viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, tag];
const stackedBar3DSeriesViewinfo = [viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, tag];
const polarLineSeriesViewinfo = [lineStyle1, _view_closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const radarLineSeriesViewinfo = [lineStyle1, _view_closed, lineMarkerOptions1, markerVisibility1, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const holeRadiusPercent2 = { propertyName: 'holeRadiusPercent', modelName: '@HoleRadiusPercent', displayName: 'Hole Radius Percent', localizationId: 'DevExpress.XtraCharts.Doughnut3DSeriesView.HoleRadiusPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 60, editorOptions: { min: 0, max: 100 } };
const depth = { propertyName: 'depth', modelName: '@Depth', displayName: 'Depth', localizationId: 'DevExpress.XtraCharts.Pie3DSeriesView.Depth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 15, editorOptions: { min: 1, max: 100 } };
const sizeAsPercentage = { propertyName: 'sizeAsPercentage', modelName: '@SizeAsPercentage', displayName: 'Size As Percentage', localizationId: 'DevExpress.XtraCharts.Pie3DSeriesView.SizeAsPercentage', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 100, editorOptions: { min: 0, max: 100 } };
const pieFillStyleInfo = [fillMode1, fillStyleOptionsSerialize, tag];
const pieFillStyle = { propertyName: 'pieFillStyle', modelName: 'PieFillStyle', displayName: 'Pie Fill Style', localizationId: 'DevExpress.XtraCharts.Pie3DSeriesView.PieFillStyle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: pieFillStyleInfo, };
const doughnut3DSeriesViewinfo = [holeRadiusPercent2, depth, sizeAsPercentage, pieFillStyle, explodedDistancePercentage, explodeMode, sweepDirection, viewTitles, tag];
const holeRadiusPercent3 = { propertyName: 'holeRadiusPercent', modelName: '@HoleRadiusPercent', displayName: 'Hole Radius Percent', localizationId: 'DevExpress.XtraCharts.DoughnutSeriesView.HoleRadiusPercent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 60, editorOptions: { min: 0, max: 100 } };
const doughnutSeriesViewinfo = [holeRadiusPercent3, minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, viewTitles, tag, totalLabel];
const size2 = { propertyName: 'size', modelName: '@Size', displayName: 'Size', localizationId: 'DevExpress.XtraCharts.SimpleMarker.Size', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 8, editorOptions: { min: 1 } };
const pointMarkerOptionsInfo = [size2, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const pointMarkerOptions = { propertyName: 'pointMarkerOptions', modelName: 'PointMarkerOptions', displayName: 'Point Marker Options', localizationId: 'DevExpress.XtraCharts.RadarPointSeriesView.PointMarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: pointMarkerOptionsInfo, };
const polarPointSeriesViewinfo = [pointMarkerOptions, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const arrowWidth = { propertyName: 'arrowWidth', modelName: '@ArrowWidth', displayName: 'Arrow Width', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.ArrowWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 7, editorOptions: { min: 1 }, validationRules: arrowWidthValidationRules };
const arrowHeight = { propertyName: 'arrowHeight', modelName: '@ArrowHeight', displayName: 'Arrow Height', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.ArrowHeight', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 5, editorOptions: { min: 1 } };
const viewMinIndent = { propertyName: 'minIndent', modelName: '@MinIndent', displayName: 'Min Indent', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.MinIndent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, editorOptions: { min: 0 } };
const thickness3 = { propertyName: 'thickness', modelName: '@Thickness', displayName: 'Thickness', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.Thickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 3, editorOptions: { min: 1 } };
const visible1 = { propertyName: 'visible', modelName: '@Visible', displayName: 'Visible', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.Visible', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const colorSource = {
    propertyName: 'colorSource', modelName: '@ColorSource', displayName: 'Color Source', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.ColorSource', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'ParentColor', displayValue: 'ParentColor' }, { value: 'ParentBorderColor', displayValue: 'ParentBorderColor' }, { value: 'ChildColor', displayValue: 'ChildColor' }, { value: 'ChildBorderColor', displayValue: 'ChildBorderColor' }, { value: 'OwnColor', displayValue: 'OwnColor' }], defaultVal: 'ParentColor'
};
const color4 = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: editorTemplates.getEditor('undoCustomColorEditor'), defaultVal: 'transparent' };
const inFront = { propertyName: 'inFront', modelName: '@InFront', displayName: 'In Front', localizationId: 'DevExpress.XtraCharts.TaskLinkOptions.InFront', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const linkOptionsInfo = [arrowWidth, arrowHeight, viewMinIndent, thickness3, visible1, colorSource, color4, inFront, tag];
const linkOptions = { propertyName: 'linkOptions', modelName: 'LinkOptions', displayName: 'Link Options', localizationId: 'DevExpress.XtraCharts.GanttSeriesView.LinkOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: linkOptionsInfo, };
const minValueMarkerInfo = [viewColor2, size1, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const minValueMarker = { propertyName: 'minValueMarker', modelName: 'MinValueMarker', displayName: 'Min Value Marker', localizationId: 'DevExpress.XtraCharts.RangeBarSeriesView.MinValueMarker', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: minValueMarkerInfo, };
const maxValueMarkerInfo = [viewColor2, size1, _view_kind, starPointCount, fillStyle1, viewBorderVisible, viewBorderColor, tag];
const maxValueMarker = { propertyName: 'maxValueMarker', modelName: 'MaxValueMarker', displayName: 'Max Value Marker', localizationId: 'DevExpress.XtraCharts.RangeBarSeriesView.MaxValueMarker', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: maxValueMarkerInfo, };
const minValueMarkerVisibility = {
    propertyName: 'minValueMarkerVisibility', modelName: '@MinValueMarkerVisibility', displayName: 'Min Value Marker Visibility', localizationId: 'DevExpress.XtraCharts.RangeBarSeriesView.MinValueMarkerVisibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const maxValueMarkerVisibility = {
    propertyName: 'maxValueMarkerVisibility', modelName: '@MaxValueMarkerVisibility', displayName: 'Max Value Marker Visibility', localizationId: 'DevExpress.XtraCharts.RangeBarSeriesView.MaxValueMarkerVisibility', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'True', displayValue: 'True', localizationId: 'StringId.DefaultBooleanTrue' }, { value: 'False', displayValue: 'False', localizationId: 'StringId.DefaultBooleanFalse' }, { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraReports.UI.WinControlPrintMode.Default' }], defaultVal: 'Default'
};
const overlappedGanttSeriesViewinfo = [linkOptions, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const radarPointSeriesViewinfo = [pointMarkerOptions, aggregateFunction1, shadow1, viewColorEach, color1, tag];
const barDistance5 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideGanttSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed5 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideGanttSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth5 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideGanttSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const sideBySideGanttSeriesViewinfo = [barDistance5, barDistanceFixed5, equalBarWidth5, linkOptions, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const areaSeriesViewinfo = [viewBorder1, viewFillStyle, markerOptions, transparency3, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const fillMode2 = {
    propertyName: 'fillMode', modelName: '@FillMode', displayName: 'Fill Mode', localizationId: 'DevExpress.XtraCharts.CandleStickReductionOptions.FillMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'FilledOnReduction', displayValue: 'FilledOnReduction' }, { value: 'FilledOnIncrease', displayValue: 'FilledOnIncrease' }, { value: 'AlwaysEmpty', displayValue: 'AlwaysEmpty' }, { value: 'AlwaysFilled', displayValue: 'AlwaysFilled' }], defaultVal: 'FilledOnReduction'
};
const color5 = { propertyName: 'color', modelName: '@Color', displayName: 'Color', localizationId: 'DevExpress.XtraCharts.ReductionStockOptions.Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: '255,255,0,0' };
const level = {
    propertyName: 'level', modelName: '@Level', displayName: 'Level', localizationId: 'DevExpress.XtraCharts.ReductionStockOptions.Level', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Low', displayValue: 'Low', localizationId: 'DevExpress.XtraCharts.StockLevel.Low' }, { value: 'High', displayValue: 'High', localizationId: 'DevExpress.XtraCharts.StockLevel.High' }, { value: 'Open', displayValue: 'Open', localizationId: 'DevExpress.XtraCharts.StockLevel.Open' }, { value: 'Close', displayValue: 'Close', localizationId: 'DevExpress.XtraCharts.StockLevel.Close' }], defaultVal: 'Close'
};
const visible2 = { propertyName: 'visible', modelName: '@Visible', displayName: 'Visible', localizationId: 'DevExpress.XtraCharts.ReductionStockOptions.Visible', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const colorMode = {
    propertyName: 'colorMode', modelName: '@ColorMode', displayName: 'Color Mode', localizationId: 'DevExpress.XtraCharts.ReductionStockOptions.ColorMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'PreviousToCurrentPoint', displayValue: 'PreviousToCurrentPoint' }, { value: 'OpenToCloseValue', displayValue: 'OpenToCloseValue' }], defaultVal: 'PreviousToCurrentPoint'
};
const reductionOptionsInfo = [fillMode2, color5, level, visible2, colorMode, tag];
const reductionOptions = { propertyName: 'reductionOptions', modelName: 'ReductionOptions', displayName: 'Reduction Options', localizationId: 'DevExpress.XtraCharts.CandleStickSeriesView.ReductionOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: reductionOptionsInfo, };
const levelLineLength = { propertyName: 'levelLineLength', modelName: '@LevelLineLength', displayName: 'Level Line Length', localizationId: 'DevExpress.XtraCharts.FinancialSeriesViewBase.LevelLineLength', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.25, editorOptions: { min: 1 } };
const lineThickness1 = { propertyName: 'lineThickness', modelName: '@LineThickness', displayName: 'Line Thickness', localizationId: 'DevExpress.XtraCharts.FinancialSeriesViewBase.LineThickness', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, editorOptions: { min: 1 } };
const reductionOptionsInfo1 = [color5, level, visible2, colorMode, tag];
const reductionOptions1 = { propertyName: 'reductionOptions', modelName: 'ReductionOptions', displayName: 'Reduction Options', localizationId: 'DevExpress.XtraCharts.FinancialSeriesViewBase.ReductionOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: reductionOptionsInfo1, };
const candleStickSeriesViewinfo = [reductionOptions, levelLineLength, lineThickness1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const fullStackedAreaSeriesViewinfo = [viewFillStyle, transparency, viewEnableAntialiasing, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const fullStackedBarSeriesViewinfo = [barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const line3DSeriesViewinfo = [lineThickness, _view_lineWidth, aggregateFunction2, transparency2, color1, tag];
const lineSeriesViewinfo = [viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const manhattanBarSeriesViewinfo = [viewBarWidth, barDepth, barDepthAuto, fillStyle3, model, showFacet, colorEach2, aggregateFunction2, transparency2, color1, tag];
const overlappedRangeBarSeriesViewinfo = [minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const pie3DSeriesViewinfo = [depth, sizeAsPercentage, pieFillStyle, explodedDistancePercentage, explodeMode, sweepDirection, viewTitles, tag];
const pieSeriesViewinfo = [minAllowedSizePercentage, rotation, heightToWidthRatio, border4, fillStyle5, runtimeExploding, explodedDistancePercentage, explodeMode, sweepDirection, viewTitles, tag, totalLabel];
const pointMarkerOptions1 = { propertyName: 'pointMarkerOptions', modelName: 'PointMarkerOptions', displayName: 'Point Marker Options', localizationId: 'DevExpress.XtraCharts.PointSeriesView.PointMarkerOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: pointMarkerOptionsInfo, };
const pointSeriesViewinfo = [pointMarkerOptions1, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const barDistance6 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideBarSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed6 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideBarSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth6 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideBarSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const sideBySideBarSeriesViewinfo = [barDistance6, barDistanceFixed6, equalBarWidth6, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const barDistance7 = { propertyName: 'barDistance', displayName: 'Bar Distance', localizationId: 'DevExpress.XtraCharts.SideBySideRangeBarSeriesView.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const barDistanceFixed7 = { propertyName: 'barDistanceFixed', displayName: 'Bar Distance Fixed', localizationId: 'DevExpress.XtraCharts.SideBySideRangeBarSeriesView.BarDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1, editorOptions: { format: '#0' } };
const equalBarWidth7 = { propertyName: 'equalBarWidth', modelName: '@EqualBarWidth', displayName: 'Equal Bar Width', localizationId: 'DevExpress.XtraCharts.SideBySideRangeBarSeriesView.EqualBarWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const sideBySideRangeBarSeriesViewinfo = [barDistance7, barDistanceFixed7, equalBarWidth7, minValueMarker, maxValueMarker, minValueMarkerVisibility, maxValueMarkerVisibility, barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const stackedAreaSeriesViewinfo = [viewBorder1, viewFillStyle, transparency, viewEnableAntialiasing, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const stackedBarSeriesViewinfo = [barWidth1, border3, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const invertedStep4 = { propertyName: 'invertedStep', modelName: '@InvertedStep', displayName: 'Inverted Step', localizationId: 'DevExpress.XtraCharts.StepLineSeriesView.InvertedStep', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const stepLineSeriesViewinfo = [invertedStep4, viewLineStyle, lineMarkerOptions, viewMarkerVisibility, viewEnableAntialiasing, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const showOpenClose = {
    propertyName: 'showOpenClose', modelName: '@ShowOpenClose', displayName: 'Show Open Close', localizationId: 'DevExpress.XtraCharts.StockSeriesView.ShowOpenClose', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Both', displayValue: 'Both', localizationId: 'DevExpress.XtraCharts.ErrorBarDirection.Both' }, { value: 'Open', displayValue: 'Open', localizationId: 'DevExpress.XtraCharts.StockLevel.Open' }, { value: 'Close', displayValue: 'Close', localizationId: 'DevExpress.XtraCharts.StockLevel.Close' }], defaultVal: 'Both'
};
const stockSeriesViewinfo = [showOpenClose, levelLineLength, lineThickness1, reductionOptions1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const invertedStep5 = { propertyName: 'invertedStep', modelName: '@InvertedStep', displayName: 'Inverted Step', localizationId: 'DevExpress.XtraCharts.StepLine3DSeriesView.InvertedStep', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const stepLine3DSeriesViewinfo = [invertedStep5, lineThickness, _view_lineWidth, aggregateFunction2, transparency2, color1, tag];
const risingbarcolor = { propertyName: 'risingBarColor', modelName: '@RisingBarColor', displayName: 'Rising Bar Color', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesView.RisingBarColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const fallingbarcolor = { propertyName: 'fallingBarColor', modelName: '@FallingBarColor', displayName: 'Falling Bar Color', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesView.FallingBarColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const startbarcolor = { propertyName: 'startBarColor', modelName: '@StartBarColor', displayName: 'Start Bar Color', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesView.StartBarColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'Gray' };
const subtotalbarcolor = { propertyName: 'subtotalBarColor', modelName: '@SubtotalBarColor', displayName: 'Subtotal Bar Color', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesView.SubtotalBarColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'Gray' };
const totalbarcolor = { propertyName: 'totalBarColor', modelName: '@TotalBarColor', displayName: 'Total Bar Color', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesView.TotalBarColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'Gray' };
const connectorcolor = { propertyName: 'connectorColor', modelName: '@ConnectorColor', displayName: 'Connector Color', localizationId: 'DevExpress.XtraCharts.WaterfallSeriesView.ConnectorColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'Gray' };
const waterfallSeriesView = stackedBarSeriesViewinfo.concat([risingbarcolor, fallingbarcolor, startbarcolor, subtotalbarcolor, totalbarcolor, connectorcolor]);
const markerKinds = [
    { value: 'Square', displayValue: 'Square', localizationId: 'DevExpress.XtraCharts.MarkerKind.Square' },
    { value: 'Diamond', displayValue: 'Diamond', localizationId: 'DevExpress.XtraCharts.MarkerKind.Diamond' },
    { value: 'Triangle', displayValue: 'Triangle', localizationId: 'DevExpress.XtraCharts.MarkerKind.Triangle' },
    { value: 'InvertedTriangle', displayValue: 'Inverted Triangle', localizationId: 'DevExpress.XtraCharts.MarkerKind.InvertedTriangle' },
    { value: 'Circle', displayValue: 'Circle', localizationId: 'DevExpress.XtraCharts.CircleEasingFunction' },
    { value: 'Plus', displayValue: 'Plus', localizationId: 'DevExpress.XtraCharts.MarkerKind.Plus' },
    { value: 'Cross', displayValue: 'Cross', localizationId: 'DevExpress.XtraCharts.MarkerKind.Cross' },
    { value: 'Star', displayValue: 'Star', localizationId: 'DevExpress.XtraCharts.MarkerKind.Star' },
    { value: 'Pentagon', displayValue: 'Pentagon', localizationId: 'DevExpress.XtraCharts.MarkerKind.Pentagon' },
    { value: 'Hexagon', displayValue: 'Hexagon', localizationId: 'DevExpress.XtraCharts.MarkerKind.Hexagon' },
    { value: 'ThinCross', displayValue: 'Thin Cross', localizationId: 'DevExpress.XtraCharts.MarkerKind.ThinCross' }
];
const boxWidth = { propertyName: 'boxWidth', modelName: '@BoxWidth', displayName: 'Box Width', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.BoxWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0.6, editorOptions: { min: 0, step: 0.1 } };
const boxDistance = { propertyName: 'boxDistance', modelName: '@BoxDistance', displayName: 'Box Distance', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.BoxDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0 };
const boxDistanceFixed = { propertyName: 'boxDistanceFixed', modelName: '@BoxDistanceFixed', displayName: 'Box Distance Fixed', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.BoxDistanceFixed', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 1 };
const capWidthPercentage = { propertyName: 'capWidthPercentage', modelName: '@CapWidthPercentage', displayName: 'Cap Width Percentage', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.CapWidthPercentage', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 50 };
const processPoints = {
    propertyName: 'processPoints', modelName: '@ProcessPoints', displayName: 'Process Points', localizationId: 'DevExpress.XtraCharts.EmptyPointOptions.ProcessPoints', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Interpolate', displayValue: 'Interpolate', localizationId: 'DevExpress.XtraCharts.ProcessEmptyPointsMode.Interpolate' }, { value: 'InsertZero', displayValue: 'Insert Zero', localizationId: 'DevExpress.XtraCharts.ProcessEmptyPointsMode.InsertZero' }, { value: 'Ignore', displayValue: 'Ignore', localizationId: 'DevExpress.XtraCharts.ProcessEmptyPointsMode.Ignore' }], defaultVal: 'InsertZero'
};
const emptyPointInfo = [color1, processPoints, tag];
const emptyPointOptions = { propertyName: 'emptyPointOptions', modelName: 'EmptyPointOptions', displayName: 'Empty Point Options', localizationId: 'DevExpress.XtraCharts.XYDiagramSeriesViewBase.EmptyPointOptions', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: emptyPointInfo };
const equalBoxWidth = { propertyName: 'equalBoxWidth', modelName: '@EqualBoxWidth', displayName: 'Equal Box Width', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.EqualBoxWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true };
const meanAndMedianColor = { propertyName: 'meanAndMedianColor', modelName: '@MeanAndMedianColor', displayName: 'Mean and Median Color', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.MeanAndMedianColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'transparent' };
const meanLineVisible = { propertyName: 'meanLineVisible', modelName: '@MeanLineVisible', displayName: 'Mean Line Visible', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.MeanLineVisible', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const meanMarkerKind = {
    propertyName: 'meanMarkerKind', modelName: '@MeanMarkerKind', displayName: 'Mean Marker Kind', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.MeanMarkerKind',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: markerKinds,
    defaultVal: 'ThinCross'
};
const meanMarkerSize = { propertyName: 'meanMarkerSize', modelName: '@MeanMarkerSize', displayName: 'Mean Marker Size', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.MeanMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 15 };
const outlierMarkerKind = {
    propertyName: 'outlierMarkerKind', modelName: '@OutlierMarkerKind', displayName: 'Outlier Marker Kind', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.OutlierMarkerKind',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: markerKinds,
    defaultVal: 'Circle'
};
const outlierMarkerSize = { propertyName: 'outlierMarkerSize', modelName: '@OutlierMarkerSize', displayName: 'Outlier Marker Size', localizationId: 'DevExpress.XtraCharts.BoxPlotSeriesView.OutlierMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 10 };
const boxPlotSeriesViewInfo = [boxWidth, boxDistance, boxDistanceFixed, capWidthPercentage, emptyPointOptions, equalBoxWidth, lineThickness, meanAndMedianColor, meanLineVisible, meanMarkerKind, meanMarkerSize, outlierMarkerKind, outlierMarkerSize, fillStyle4, transparency5, colorEach1, shadow, paneName, axisXName, axisYName, viewAggregateFunction, indicators, color1, tag];
const viewMapper = {
    FullStackedStepAreaSeriesView: fullStackedStepAreaSeriesViewinfo,
    PolarRangeAreaSeriesView: polarRangeAreaSeriesViewinfo,
    RadarRangeAreaSeriesView: radarRangeAreaSeriesViewinfo,
    RangeArea3DSeriesView: rangeArea3DSeriesViewinfo,
    RangeAreaSeriesView: rangeAreaSeriesViewinfo,
    StackedStepAreaSeriesView: stackedStepAreaSeriesViewinfo,
    StepArea3DSeriesView: stepArea3DSeriesViewinfo,
    StepAreaSeriesView: stepAreaSeriesViewinfo,
    SideBySideFullStackedBar3DSeriesView: sideBySideFullStackedBar3DSeriesViewinfo,
    SideBySideFullStackedBarSeriesView: sideBySideFullStackedBarSeriesViewinfo,
    SideBySideStackedBar3DSeriesView: sideBySideStackedBar3DSeriesViewinfo,
    SideBySideStackedBarSeriesView: sideBySideStackedBarSeriesViewinfo,
    FullStackedLine3DSeriesView: fullStackedLine3DSeriesViewinfo,
    FullStackedLineSeriesView: fullStackedLineSeriesViewinfo,
    WaterfallSeriesView: waterfallSeriesView,
    ScatterPolarLineSeriesView: scatterPolarLineSeriesViewinfo,
    ScatterRadarLineSeriesView: scatterRadarLineSeriesViewinfo,
    StackedLine3DSeriesView: stackedLine3DSeriesViewinfo,
    StackedLineSeriesView: stackedLineSeriesViewinfo,
    NestedDoughnutSeriesView: nestedDoughnutSeriesViewinfo,
    SwiftPlotSeriesView: swiftPlotSeriesViewinfo,
    Funnel3DSeriesView: funnel3DSeriesViewinfo,
    FunnelSeriesView: funnelSeriesViewinfo,
    ScatterLineSeriesView: scatterLineSeriesViewinfo,
    BubbleSeriesView: bubbleSeriesViewinfo,
    Spline3DSeriesView: spline3DSeriesViewinfo,
    SplineArea3DSeriesView: splineArea3DSeriesViewinfo,
    FullStackedSplineArea3DSeriesView: fullStackedSplineArea3DSeriesViewinfo,
    SplineAreaSeriesView: splineAreaSeriesViewinfo,
    FullStackedSplineAreaSeriesView: fullStackedSplineAreaSeriesViewinfo,
    StackedSplineArea3DSeriesView: stackedSplineArea3DSeriesViewinfo,
    SplineSeriesView: splineSeriesViewinfo,
    StackedSplineAreaSeriesView: stackedSplineAreaSeriesViewinfo,
    Area3DSeriesView: area3DSeriesViewinfo,
    FullStackedArea3DSeriesView: fullStackedArea3DSeriesViewinfo,
    PolarAreaSeriesView: polarAreaSeriesViewinfo,
    RadarAreaSeriesView: radarAreaSeriesViewinfo,
    StackedArea3DSeriesView: stackedArea3DSeriesViewinfo,
    FullStackedBar3DSeriesView: fullStackedBar3DSeriesViewinfo,
    SideBySideBar3DSeriesView: sideBySideBar3DSeriesViewinfo,
    StackedBar3DSeriesView: stackedBar3DSeriesViewinfo,
    PolarLineSeriesView: polarLineSeriesViewinfo,
    RadarLineSeriesView: radarLineSeriesViewinfo,
    Doughnut3DSeriesView: doughnut3DSeriesViewinfo,
    DoughnutSeriesView: doughnutSeriesViewinfo,
    PolarPointSeriesView: polarPointSeriesViewinfo,
    OverlappedGanttSeriesView: overlappedGanttSeriesViewinfo,
    RadarPointSeriesView: radarPointSeriesViewinfo,
    SideBySideGanttSeriesView: sideBySideGanttSeriesViewinfo,
    AreaSeriesView: areaSeriesViewinfo,
    CandleStickSeriesView: candleStickSeriesViewinfo,
    FullStackedAreaSeriesView: fullStackedAreaSeriesViewinfo,
    FullStackedBarSeriesView: fullStackedBarSeriesViewinfo,
    Line3DSeriesView: line3DSeriesViewinfo,
    LineSeriesView: lineSeriesViewinfo,
    ManhattanBarSeriesView: manhattanBarSeriesViewinfo,
    OverlappedRangeBarSeriesView: overlappedRangeBarSeriesViewinfo,
    Pie3DSeriesView: pie3DSeriesViewinfo,
    PieSeriesView: pieSeriesViewinfo,
    PointSeriesView: pointSeriesViewinfo,
    SideBySideBarSeriesView: sideBySideBarSeriesViewinfo,
    SideBySideRangeBarSeriesView: sideBySideRangeBarSeriesViewinfo,
    StackedAreaSeriesView: stackedAreaSeriesViewinfo,
    StackedBarSeriesView: stackedBarSeriesViewinfo,
    StepLineSeriesView: stepLineSeriesViewinfo,
    StockSeriesView: stockSeriesViewinfo,
    StepLine3DSeriesView: stepLine3DSeriesViewinfo,
    BoxPlotSeriesView: boxPlotSeriesViewInfo,
};

;// ./node_modules/devexpress-reporting/chart/components/series/_view.js






class SeriesViewViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return external_ko_namespaceObject.observable(new SeriesViewViewModel(model || {}, serializer));
    }
    dispose() {
        this._disposables.forEach(x => x.dispose());
    }
    static toJson(value, serializer, refs) {
        const unwrappedValue = external_ko_namespaceObject.unwrap(value);
        return serializer.serialize(unwrappedValue, unwrappedValue.getInfo(), refs);
    }
    _getInfo(typeName) {
        return [typeNameSerializable].concat(viewMapper[typeName]);
    }
    _createPropertyDisabledDependence(propertyName, depLeftPropertyName, depRightProperty, depValues, reverse = false) {
        if (propertyName !== depLeftPropertyName || !depRightProperty)
            return false;
        let isDisabled = false;
        for (let i = 0; i < depValues.length; i++) {
            if (depRightProperty() === depValues[i]) {
                isDisabled = true;
                break;
            }
        }
        return reverse ? !isDisabled : isDisabled;
    }
    _createMarkerDependences() {
        ['minValueMarker', 'maxValueMarker', 'marker1', 'marker2', 'markerOptions', 'lineMarkerOptions', 'bubbleMarkerOptions', 'pointMarkerOptions'].forEach((propertyName) => {
            if (this[propertyName]) {
                this[propertyName].isPropertyDisabled = (innerName) => {
                    return this._createPropertyDisabledDependence(innerName, 'starPointCount', this[propertyName].kind, ['Star'], true);
                };
            }
        });
    }
    _createLinkOptionsDependences() {
        if (!!this['linkOptions']) {
            this._disposables.push(this['linkOptions'].color.subscribe((newVal) => {
                this['linkOptions'].colorSource('OwnColor');
            }));
        }
    }
    preInitProperties(model) {
        this.getInfo = () => { return this._getInfo(model['@TypeNameSerializable']); };
    }
    getChildComponents() {
        return [
            { component: external_ko_namespaceObject.unwrap(this.indicators), path: 'Indicators' },
            { component: external_ko_namespaceObject.unwrap(this.titles), path: 'Titles' }
        ];
    }
    constructor(model, serializer) {
        model['@TypeNameSerializable'] = model['@TypeNameSerializable'] || 'SideBySideBarSeriesView';
        super(model, serializer);
        if (this['titles'])
            assignTitleActions(this['titles']);
        if (this['indicators'])
            assignIndicatorActions(this['indicators']);
        this._createMarkerDependences();
        this._createLinkOptionsDependences();
        this['isPropertyDisabled'] = (propertyName) => {
            return this._createPropertyDisabledDependence(propertyName, 'heightToWidthRatio', this['heightToWidthRatioAuto'], [true]) ||
                this._createPropertyDisabledDependence(propertyName, 'minSize', this['autoSize'], [true]) ||
                this._createPropertyDisabledDependence(propertyName, 'maxSize', this['autoSize'], [true]) ||
                this._createPropertyDisabledDependence(propertyName, 'barDepth', this['barDepthAuto'], [true]) ||
                this._createPropertyDisabledDependence(propertyName, 'showFacet', this['model'], ['Cone', 'Pyramid']);
        };
    }
}
const view = {
    propertyName: 'view', modelName: 'View', displayName: 'View', defaultVal: {},
    from: SeriesViewViewModel.from, toJsonObject: SeriesViewViewModel.toJson,
    localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View'
};

;// ./node_modules/devexpress-reporting/chart/components/series/_template.js














const _isBubble = (viewType) => viewType === 'BubbleSeriesView';
const _isRange = (viewType) => viewType === 'PolarRangeAreaSeriesView' ||
    viewType === 'RadarRangeAreaSeriesView' ||
    viewType === 'RangeArea3DSeriesView' ||
    viewType === 'RangeAreaSeriesView' ||
    viewType === 'OverlappedGanttSeriesView' ||
    viewType === 'SideBySideGanttSeriesView' ||
    viewType === 'OverlappedRangeBarSeriesView' ||
    viewType === 'SideBySideRangeBarSeriesView';
const _isStock = (viewType) => viewType === 'StockSeriesView' ||
    viewType === 'CandleStickSeriesView';
var ScaleType;
(function (ScaleType) {
    ScaleType[ScaleType["Qualitative"] = 0] = "Qualitative";
    ScaleType[ScaleType["Numerical"] = 1] = "Numerical";
    ScaleType[ScaleType["DateTime"] = 2] = "DateTime";
    ScaleType[ScaleType["Auto"] = 3] = "Auto";
})(ScaleType || (ScaleType = {}));
const ScaleTypeMap = {
    'Qualitative': ScaleType.Qualitative,
    'Numerical': ScaleType.Numerical,
    'DateTime': ScaleType.DateTime,
    'Auto': ScaleType.Auto
};
function _fixSeriesTemplateModel(model) {
    delete model['@SeriesDataMember'];
    return model;
}
class SeriesTemplateViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return new SeriesTemplateViewModel(model || {}, serializer, seriesTemplateSerializationsInfo);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, seriesTemplateSerializationsInfo, refs);
    }
    updateByView(view) {
        if (this.label && this.label.typeNameSerializable) {
            this.label.typeNameSerializable(mapTypes[view.typeName]);
        }
        this.valueDataMembers.peek().dispose();
        this.valueDataMembers(new (viewTypesDataMembers[view.typeName] || CommonValueDataMembers)(this.valueDataMembers.peek().toString(), this.valueScaleType));
    }
    preInitProperties(model) {
        delete model['DataFilters'];
    }
    getChildComponents() {
        return [
            { component: external_ko_namespaceObject.unwrap(this.view), path: 'View' },
        ];
    }
    getExpressionProperties() {
        return ['LegendTextPattern'];
    }
    _isOnlyNumericArgumentScaleTypeSupported() {
        return onlyNumericArgumentSupportedSeriesViewTypes.indexOf(this.viewType()) > -1;
    }
    _getCurrentSeriesPointsSortingKeys(viewType) {
        if (_isBubble(viewType))
            return bubbleSeriesPointsSortingKeys;
        if (_isRange(viewType))
            return rangeSeriesPointsSortingKeys;
        if (_isStock(viewType))
            return stockSeriesPointsSortingKeys;
        return commonSeriesPointsSortingKeys;
    }
    _adjustArgumentScaleType() {
        if (this._isOnlyNumericArgumentScaleTypeSupported())
            this.argumentScaleType('Numerical');
    }
    _updateSeriesPointsSortingKey(seriesPointsSortingKeyMeta) {
        const value = this[seriesPointsSortingKeyMeta.propertyName];
        if (!!value() && !seriesPointsSortingKeyMeta.valuesArray.some(x => x.value === value())) {
            value(seriesPointsSortingKeyMeta.valuesArray[0].value);
        }
    }
    _isDataMemberPropertyDisabled(name) {
        if (SeriesTemplateViewModel.dataMemberProperies.concat(['valueScaleType', 'argumentScaleType']).some(x => x === name)) {
            return !external_ko_namespaceObject.unwrap(this.dataSource);
        }
        return false;
    }
    _isPropertyDisabled(name) {
        if (name === 'argumentScaleType') {
            return this._isOnlyNumericArgumentScaleTypeSupported();
        }
        return false;
    }
    getPath(propertyName) {
        const dataSourceInfo = external_ko_namespaceObject.unwrap(this.dataSource);
        if (dataSourceInfo) {
            const helper = dataSourceInfo.dsHelperProvider && dataSourceInfo.dsHelperProvider();
            return helper && helper.getDataSourcePath(dataSourceInfo);
        }
    }
    constructor(model, serializer, info) {
        super(_fixSeriesTemplateModel(model), serializer, info);
        this._actualArgumentScaleType = external_ko_namespaceObject.observable(ScaleType.Numerical);
        if (this.valueDataMembers) {
            external_ko_namespaceObject.unwrap(this.valueDataMembers).dispose();
        }
        this.viewType = external_ko_namespaceObject.observable(this.view().typeName);
        this._adjustArgumentScaleType();
        const newInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], info);
        const seriesPointsSortingKeyMeta = newInfo.filter(x => x.propertyName === seriesPointsSortingKey.propertyName)[0];
        Object.defineProperty(seriesPointsSortingKeyMeta, 'valuesArray', {
            get: () => this._getCurrentSeriesPointsSortingKeys(this.viewType()),
            configurable: true
        });
        this.viewType.subscribe((newType) => {
            const newSerializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
            this.view(SeriesViewViewModel.from({ '@TypeNameSerializable': newType }, newSerializer)());
            this._adjustArgumentScaleType();
            this._updateSeriesPointsSortingKey(seriesPointsSortingKeyMeta);
        });
        this.getInfo = () => newInfo;
        this._disposables.push(this.view.subscribe((newView) => {
            if (this.viewType() !== newView.typeName) {
                this.viewType(newView.typeName);
            }
            this.updateByView(newView);
        }));
        this.valueDataMembers = external_ko_namespaceObject.observable(new (viewTypesDataMembers[this.view().typeName] || CommonValueDataMembers)(model['@ValueDataMembersSerializable'] || '', this.valueScaleType));
        this._disposables.push(this['indicators'] = external_ko_namespaceObject.computed(() => {
            return this.view() && this.view()['indicators'] && this.view()['indicators']();
        }));
        this._disposables.push(this['titles'] = external_ko_namespaceObject.computed(() => {
            return this.view() && this.view()['titles'] && this.view()['titles']();
        }));
        this._disposables.push(this._actualArgumentScaleType.subscribe((newVal) => {
            switch (newVal) {
                case ScaleType.DateTime:
                    this.qualitativeSummaryOptions.resetAllProperties();
                    this.numericSummaryOptions.resetAllProperties();
                    break;
                case ScaleType.Numerical:
                    this.qualitativeSummaryOptions.resetAllProperties();
                    this.dateTimeSummaryOptions.resetAllProperties();
                    break;
                case ScaleType.Qualitative:
                    this.numericSummaryOptions.resetAllProperties();
                    this.dateTimeSummaryOptions.resetAllProperties();
                    break;
            }
        }));
        this.updateByView(this.view());
        [this.qualitativeSummaryOptions, this.numericSummaryOptions, this.dateTimeSummaryOptions].forEach(options => {
            options['getPath'] = (propertyName) => {
                return this['getPath'] && this['getPath']('summaryFunction') || '';
            };
        });
        this.viewBindable = {
            model: this.view,
            type: this.viewType
        };
        this.filterString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this._filterString, external_ko_namespaceObject.pureComputed(() => { return this['getPath'] && this['getPath']('argumentDataMember') || ''; }));
    }
    isPropertyVisible(propertyName) {
        switch (propertyName) {
            case 'qualitativeSummaryOptions':
                return this._actualArgumentScaleType() === ScaleType.Qualitative;
            case 'numericSummaryOptions':
                return this._actualArgumentScaleType() === ScaleType.Numerical;
            case 'dateTimeSummaryOptions':
                return this._actualArgumentScaleType() === ScaleType.DateTime;
            default:
                return true;
        }
    }
}
SeriesTemplateViewModel.dataMemberProperies = ['argumentDataMember', 'valueDataMembers'];

const seriesPointsSorting = {
    propertyName: 'seriesPointsSorting', modelName: '@SeriesPointsSorting', displayName: 'Series Points Sorting', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' }, { value: 'Ascending', displayValue: 'Ascending', localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending' }, { value: 'Descending', displayValue: 'Descending', localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Descending' }],
    localizationId: 'DevExpress.XtraCharts.SeriesBase.SeriesPointsSorting', defaultVal: 'None'
}, seriesPointsSortingKey = {
    propertyName: 'seriesPointsSortingKey', modelName: '@SeriesPointsSortingKey', displayName: 'Series Points Sorting Key', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: commonSeriesPointsSortingKeys, localizationId: 'DevExpress.XtraCharts.SeriesBase.SeriesPointsSortingKey', defaultVal: 'Argument'
}, legendTextPattern = { propertyName: 'legendTextPattern', modelName: '@LegendTextPattern', displayName: 'Legend Text Pattern', localizable: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraCharts.SeriesBase.LegendTextPattern' }, _argumentScaleTypeValidatorOptions = {
    _seriesViewModel: null,
    onInitialized: ({ model }) => { _argumentScaleTypeValidatorOptions._seriesViewModel = model._model; },
    validationRules: [{
            type: 'custom',
            reevaluate: true,
            validationCallback: (params) => {
                let model = _argumentScaleTypeValidatorOptions._seriesViewModel.peek();
                if ('points' in model && model instanceof SeriesTemplateViewModel) {
                    model = model;
                    const unconvertiblePoint = _getUnconvertiblePoint('argumentSerializable', model.argumentScaleType.peek(), params.value, model.points.peek());
                    const stringFormat = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("The type of the '{0}' point isn't compatible with the {1} scale.", 'ChartStringId.MsgIncompatiblePointType');
                    let argumentValue = unconvertiblePoint && unconvertiblePoint.argumentSerializable();
                    if (argumentValue && (argumentValue instanceof Date))
                        argumentValue = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatDate)(argumentValue);
                    params.rule.message = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(stringFormat, (argumentValue !== null || argumentValue !== void 0) ? argumentValue : '', params.value);
                    return !unconvertiblePoint;
                }
                return true;
            }
        }]
}, checkedInLegend = { propertyName: 'checkedInLegend', modelName: '@CheckedInLegend', displayName: 'Checked in Legend', localizationId: 'DevExpress.XtraCharts.SeriesBase.CheckedInLegend', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true }, checkableInLegend = { propertyName: 'checkableInLegend', modelName: '@CheckableInLegend', displayName: 'Checkable in Legend', localizationId: 'DevExpress.XtraCharts.SeriesBase.CheckableInLegend', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true }, allowResample = { propertyName: 'allowResample', modelName: '@AllowResample', displayName: 'Allow Resample', localizationId: 'DevExpress.XtraCharts.Series.AllowResample', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false }, argumentScaleType = {
    propertyName: 'argumentScaleType', modelName: '@ArgumentScaleType', displayName: 'Argument Scale Type', defaultVal: 'Auto', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: scaleTypeValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.ArgumentScaleType', validatorOptions: _argumentScaleTypeValidatorOptions
}, valueScaleType = {
    propertyName: 'valueScaleType', modelName: '@ValueScaleType', displayName: 'Value Scale Type', defaultVal: 'Numerical', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Numerical', displayValue: 'Numerical', localizationId: 'DevExpress.XtraCharts.ScaleType.Numerical' },
        { value: 'DateTime', displayValue: 'DateTime', localizationId: 'DevExpress.XtraTreeList.Data.UnboundColumnType.DateTime' }
    ],
    localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueScaleType'
}, labelsVisibility = { propertyName: 'labelsVisibility', modelName: '@LabelsVisibility', displayName: 'Labels Visibility', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValues, localizationId: 'DevExpress.XtraCharts.SeriesBase.LabelsVisibility' }, argumentDataMember = { propertyName: 'argumentDataMember', modelName: '@ArgumentDataMember', displayName: 'Argument Data Member', defaultVal: '', editor: editorTemplates.getEditor('valueDataMember'), localizationId: 'DevExpress.XtraCharts.SeriesBase.ArgumentDataMember' }, valueDataMembersSerializable = { propertyName: 'valueDataMembers', modelName: '@ValueDataMembersSerializable', displayName: 'Value Data Members', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), from: CommonValueDataMembers.from, toJsonObject: CommonValueDataMembers.toJson, localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueDataMembers' };
const seriesTemplateSerializationsInfo = [
    viewBindableSerializationInfo,
    { propertyName: 'titles', displayName: 'Titles', localizationId: 'DevExpress.XtraReports.UI.XRChart.Titles' },
    { propertyName: 'indicators', displayName: 'Indicators', localizationId: 'DevExpress.XtraReports.UI.XRChart.Indicators' },
    view, allowResample, argumentDataMember, valueDataMembersSerializable, colorDataMember, argumentScaleType, valueScaleType, filterString,
    filterStringEditable, seriesPointsSorting, seriesPointsSortingKey, showInLegend, legendName, checkableInLegend, checkedInLegend, legendTextPattern, labelsVisibility,
    qualitativeSummaryOptions, numericSummaryOptions, dateTimeSumaryOptions,
    seriesLabel, topNOptions, visible, chartDataSource
];
const seriesTemplate = { propertyName: 'seriesTemplate', modelName: 'SeriesTemplate', displayName: 'Series Template', localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesTemplate', info: seriesTemplateSerializationsInfo, from: SeriesTemplateViewModel.from, toJsonObject: SeriesTemplateViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };

;// ./node_modules/devexpress-reporting/chart/components/series/_series.js







class SeriesViewModel extends SeriesTemplateViewModel {
    updateByView(view) {
        super.updateByView(view);
        this.points && this.points([]);
    }
    _isDataMemberPropertyDisabled(name) {
        if (SeriesTemplateViewModel.dataMemberProperies.concat(['colorDataMember']).some(x => x === name)) {
            return !external_ko_namespaceObject.unwrap(this.dataSource);
        }
        return false;
    }
    constructor(model, parent, serializer) {
        super(model, serializer, seriesSerializationsInfo);
        this.isIncompatible = external_ko_namespaceObject.observable(false);
        initCollectionItem(this, parent)();
        this._disposables.push(this['displayName'] = external_ko_namespaceObject.pureComputed(() => {
            return this.isIncompatible() ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('(incompatible)', 'ChartStringId.IncompatibleSeriesView') + ' ' + this['name']() : this['name']();
        }));
        this.points = external_ko_namespaceObject.observableArray([]);
        this._disposables.push(this.points.subscribe((newValue) => { newValue['owner'] = this; }));
        this.points((0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.Points || [], (item) => { return new SeriesPointModel(item, this, serializer); })());
    }
}
SeriesViewModel.prefix = 'Series';

const seriesSerializationsInfo = [_common_name, points].concat(seriesTemplateSerializationsInfo);

;// ./node_modules/devexpress-reporting/chart/internal/chartStructure/_provider.js




class ChartStructureObjectProvider extends external_DevExpress_Analytics_Internal_namespaceObject.ObjectStructureProvider {
    getClassName(instance) {
        if (instance instanceof SeriesViewModel) {
            return 'SeriesViewModel';
        }
        else if (instance instanceof SecondaryAxisViewModel) {
            return 'SecondaryAxisViewModel';
        }
        else {
            return super.getClassName(instance);
        }
    }
    createArrayItem(currentTarget, result, propertyName) {
        super.createArrayItem(currentTarget, result, propertyName);
        for (let i = 0; i < result.length; i++) {
            const item = result[i];
            if (item.specifics === 'SeriesViewModel') {
                const unwrapArrayValue = external_ko_namespaceObject.unwrap(currentTarget[i]);
                result[i].dragData = { noDragable: false };
                result[i]['data'] = unwrapArrayValue;
            }
        }
    }
    constructor(target, displayName, localizationId) {
        super(target, displayName, localizationId);
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/meta/_diagram.js






const dimension = { propertyName: 'dimension', modelName: '@Dimension', displayName: 'Dimension', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), localizationId: 'DevExpress.XtraCharts.SimpleDiagram3D.Dimension' }, equalPieSize = { propertyName: 'equalPieSize', modelName: '@EqualPieSize', displayName: 'EqualPieSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, typeNameNotShowDiagram = { propertyName: 'typeNameSerializable', modelName: '@TypeNameSerializable' };
const secondaryAxesX = { propertyName: 'secondaryAxesX', modelName: 'SecondaryAxesX', displayName: 'Secondary Axes X', array: true, editor: editorTemplates.getEditor('collection'), localizationId: 'DevExpress.XtraCharts.XYDiagram.SecondaryAxesX' };
const secondaryAxesY = { propertyName: 'secondaryAxesY', modelName: 'SecondaryAxesY', displayName: 'Secondary Axes Y', array: true, editor: editorTemplates.getEditor('collection'), localizationId: 'DevExpress.XtraCharts.XYDiagram.SecondaryAxesY' };
const panes = { propertyName: 'panes', modelName: 'Panes', displayName: 'Additional Panes', array: true, editor: editorTemplates.getEditor('collection'), localizationId: 'ChartDesignerStringIDs.TreeAdditionalPanelCollection' };
const drawingStyle = {
    propertyName: 'drawingStyle', modelName: '@DrawingStyle', displayName: 'Drawing Style', localizationId: 'DevExpress.XtraCharts.RadarDiagram.DrawingStyle', defaultVal: 'Circle',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Circle', displayValue: 'Circle', localizationId: 'DevExpress.XtraCharts.RadarDiagramDrawingStyle.Circle' },
        { value: 'Polygon', displayValue: 'Polygon', localizationId: 'DevExpress.XtraCharts.RadarDiagramDrawingStyle.Polygon' }
    ]
}, startAngleInDegrees = {
    propertyName: 'startAngleInDegrees', modelName: '@StartAngleInDegrees', displayName: 'Start Angle in Degrees', localizationId: 'DevExpress.XtraCharts.RadarDiagram.StartAngleInDegrees', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 0
}, rotationDirection = {
    propertyName: 'rotationDirection', modelName: '@RotationDirection', displayName: 'Rotation Direction', localizationId: 'DevExpress.XtraCharts.RadarDiagram.RotationDirection', defaultVal: 'Counterclockwise',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Counterclockwise', displayValue: 'Counterclockwise', localizationId: 'DevExpress.XtraCharts.RadarDiagramRotationDirection.Counterclockwise' },
        { value: 'Clockwise', displayValue: 'Clockwise', localizationId: 'DevExpress.XtraCharts.RadarDiagramRotationDirection.Clockwise' }
    ]
};
const diagramSerializationsInfo = [typeNameNotShowDiagram];
const radarSerializationsInfo = [drawingStyle, startAngleInDegrees, rotationDirection, radarAxisX, radarAxisY, margin, backColor].concat(diagramSerializationsInfo), polarSerializationsInfo = [radarAxisX, radarAxisY, margin, backColor].concat(diagramSerializationsInfo), simple3DSerializationsInfo = [dimension, margin, equalPieSize].concat(diagramSerializationsInfo), funnel3DSerializationsInfo = [].concat(simple3DSerializationsInfo), simpleSerializationsInfo = [dimension, margin, equalPieSize].concat(diagramSerializationsInfo), XY2DSerializationsInfo = [defaultPane, panes, axisX, axisY, secondaryAxesX, secondaryAxesY, margin, enableAxisXScrolling, enableAxisXZooming, enableAxisYScrolling, enableAxisYZooming, typeNameNotShowDiagram], XYSerializationsInfo = [rotated].concat(XY2DSerializationsInfo), XY3DSerializationsInfo = [axisX3D, axisY3D, backColor, typeNameNotShowDiagram], GanttDiagramSerializationsInfo = [].concat(XY2DSerializationsInfo);
const XYObject = { info: XYSerializationsInfo, type: 'XYDiagram' }, XY2DObject = { info: XY2DSerializationsInfo, type: 'SwiftPlotDiagram' }, XY3DObject = { info: XY3DSerializationsInfo, type: 'XYDiagram3D' }, radarObject = { info: radarSerializationsInfo, type: 'RadarDiagram' }, polarObject = { info: polarSerializationsInfo, type: 'PolarDiagram' }, simpleObject = { info: simpleSerializationsInfo, type: 'SimpleDiagram' }, simple3DObject = { info: simple3DSerializationsInfo, type: 'SimpleDiagram3D' }, funnel3DObject = { info: funnel3DSerializationsInfo, type: 'FunnelDiagram' }, gantObject = { info: GanttDiagramSerializationsInfo, type: 'GanttDiagram' };
const diagramMapper = {
    'SideBySideBarSeriesView': XYObject,
    'StackedBarSeriesView': XYObject,
    'FullStackedBarSeriesView': XYObject,
    'SideBySideStackedBarSeriesView': XYObject,
    'SideBySideFullStackedBarSeriesView': XYObject,
    'WaterfallSeriesView': XYObject,
    'SideBySideBar3DSeriesView': XY3DObject,
    'StackedBar3DSeriesView': XY3DObject,
    'FullStackedBar3DSeriesView': XY3DObject,
    'SideBySideStackedBar3DSeriesView': XY3DObject,
    'SideBySideFullStackedBar3DSeriesView': XY3DObject,
    'ManhattanBarSeriesView': XY3DObject,
    'PointSeriesView': XYObject,
    'BubbleSeriesView': XYObject,
    'LineSeriesView': XYObject,
    'StackedLineSeriesView': XYObject,
    'FullStackedLineSeriesView': XYObject,
    'StepLineSeriesView': XYObject,
    'SplineSeriesView': XYObject,
    'ScatterLineSeriesView': XYObject,
    'SwiftPlotSeriesView': XY2DObject,
    'BoxPlotSeriesView': XYObject,
    'Line3DSeriesView': XY3DObject,
    'StackedLine3DSeriesView': XY3DObject,
    'FullStackedLine3DSeriesView': XY3DObject,
    'StepLine3DSeriesView': XY3DObject,
    'Spline3DSeriesView': XY3DObject,
    'PieSeriesView': simpleObject,
    'DoughnutSeriesView': simpleObject,
    'NestedDoughnutSeriesView': simpleObject,
    'Pie3DSeriesView': simple3DObject,
    'Doughnut3DSeriesView': simple3DObject,
    'FunnelSeriesView': simpleObject,
    'Funnel3DSeriesView': funnel3DObject,
    'AreaSeriesView': XYObject,
    'StackedAreaSeriesView': XYObject,
    'FullStackedAreaSeriesView': XYObject,
    'StepAreaSeriesView': XYObject,
    'SplineAreaSeriesView': XYObject,
    'StackedSplineAreaSeriesView': XYObject,
    'FullStackedSplineAreaSeriesView': XYObject,
    'Area3DSeriesView': XY3DObject,
    'StackedArea3DSeriesView': XY3DObject,
    'FullStackedArea3DSeriesView': XY3DObject,
    'StepArea3DSeriesView': XY3DObject,
    'SplineArea3DSeriesView': XY3DObject,
    'StackedSplineArea3DSeriesView': XY3DObject,
    'FullStackedSplineArea3DSeriesView': XY3DObject,
    'OverlappedRangeBarSeriesView': XYObject,
    'SideBySideRangeBarSeriesView': XYObject,
    'RangeAreaSeriesView': XYObject,
    'RangeArea3DSeriesView': XY3DObject,
    'RadarPointSeriesView': radarObject,
    'RadarLineSeriesView': radarObject,
    'RadarAreaSeriesView': radarObject,
    'PolarPointSeriesView': polarObject,
    'PolarLineSeriesView': polarObject,
    'PolarAreaSeriesView': polarObject,
    'StockSeriesView': XYObject,
    'CandleStickSeriesView': XYObject,
    'OverlappedGanttSeriesView': gantObject,
    'SideBySideGanttSeriesView': gantObject
};

;// ./node_modules/devexpress-reporting/chart/components/models/_additionalPane.js


class AdditionalPaneViewModel extends ChartLocalizableElementCollectionItemBase {
    static from(model, serializer) {
        return new AdditionalPaneViewModel(model || {}, null, serializer);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer, additionalPaneSerializationsInfo);
    }
}
AdditionalPaneViewModel.prefix = 'Pane ';


;// ./node_modules/devexpress-reporting/chart/components/_diagram.js








class DiagramViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    getChildComponents() {
        return [
            { component: this.axisX, path: 'AxisX' },
            { component: this.axisY, path: 'AxisY' },
            { component: external_ko_namespaceObject.unwrap(this.secondaryAxesX), path: 'SecondaryAxesX' },
            { component: external_ko_namespaceObject.unwrap(this.secondaryAxesY), path: 'SecondaryAxesY' },
            { component: external_ko_namespaceObject.unwrap(this.panes), path: 'Panes' },
            { component: this.defaultPane?.title, path: 'DefaultPane.Title' }
        ];
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, null, refs);
    }
    constructor(model, type, serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()) {
        const info = diagramMapper[type].info;
        model = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(model, { '@TypeNameSerializable': diagramMapper[type].type });
        super(model, serializer, diagramMapper[type].info);
        if (info.filter(x => { return x.propertyName === secondaryAxesX.propertyName; }).length > 0) {
            const createAxes = (item, parent) => { return new SecondaryAxisViewModel(item, parent, serializer); };
            this.secondaryAxesX = deserializeModelArray(model && model['SecondaryAxesX'], createAxes, SecondaryAxisViewModel.xPrefix);
            this.secondaryAxesY = deserializeModelArray(model && model['SecondaryAxesY'], createAxes, SecondaryAxisViewModel.yPrefix);
        }
        if (info.filter(x => { return x.propertyName === panes.propertyName; }).length > 0) {
            this.panes = deserializeModelArray(model && model['Panes'], (item, parent) => { return new AdditionalPaneViewModel(item, parent, serializer); }, AdditionalPaneViewModel.prefix);
        }
    }
}
const diagram = { propertyName: 'diagram', modelName: 'Diagram', displayName: 'Diagram', from: (val) => { return external_ko_namespaceObject.observable(val); }, toJsonObject: DiagramViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart.Diagram' };

;// ./node_modules/devexpress-reporting/chart/components/models/_additionalLegend.js


class AdditionalLegendViewModel extends ChartLocalizableElementCollectionItemBase {
    static from(model, serializer) {
        return new AdditionalLegendViewModel(model || {}, null, serializer);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer, additionalLegendSerializationsInfo);
    }
}
AdditionalLegendViewModel.prefix = 'Legend';


;// ./node_modules/devexpress-reporting/chart/components/models/_dataContainer.js











class DataContainerViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return new DataContainerViewModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, dataContainerSerializationsInfo, refs);
    }
    getChildComponents() {
        return [
            { component: external_ko_namespaceObject.unwrap(this.series), path: 'Series' },
        ];
    }
    constructor(model, serializer) {
        super(model, serializer, dataContainerSerializationsInfo);
        this.series = deserializeModelArray(model && model['SeriesSerializable'], (item, parent) => { return new SeriesViewModel(item, parent, serializer); }, SeriesViewModel.prefix);
        const array = viewBindableSerializationInfo.valuesArray;
        const actions = [];
        for (let i = 0; i < array.length; i++) {
            const value = array[i];
            const getImageClassName = (isTemplate = false) => (isTemplate ? 'dxrd-svg-fieldlist-' : 'dx-image-fieldlist-') + getSeriesClassName(value.value);
            actions.push({
                text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(value.displayValue, value.localizationId),
                imageClassName: getImageClassName(),
                imageTemplateName: external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.getExistingTemplate(getImageClassName(true)),
                disabled: external_ko_namespaceObject.observable(false),
                visible: true,
                clickAction: ((typeName) => (item) => {
                    this.series()['innerActions'][0].closePopover();
                    this.series.push(new SeriesViewModel({
                        '@Name': (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(this.series().map(x => { return x['name'](); }), SeriesViewModel.prefix),
                        'View': {
                            '@TypeNameSerializable': typeName,
                        }
                    }, this.series));
                })(value.value)
            });
        }
        this.series()['innerActions'] = createInnerActionsWithPopover((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Add', 'ChartStringId.MenuItemAdd'), 'addseries-action', actions);
    }
}
const dataContainerSerializationsInfo = [seriesDataMember, seriesSerializable, seriesTemplate, dataMember, pivotGridDataSourceOptions];
const dataContainer = { propertyName: 'dataContainer', modelName: 'DataContainer', displayName: 'Data Container', info: dataContainerSerializationsInfo, from: DataContainerViewModel.from, toJsonObject: DataContainerViewModel.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditorCustom') };

;// ./node_modules/devexpress-reporting/chart/components/models/_legend.js



class LegendViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return new LegendViewModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, legendSerializationsInfo, refs);
    }
    constructor(model, serializer) {
        super(model, serializer, legendSerializationsInfo);
    }
}
const legend = { propertyName: 'legend', modelName: 'Legend', displayName: 'Legend', localizationId: 'DevExpress.XtraCharts.Legend', info: legendSerializationsInfo, from: LegendViewModel.from, toJsonObject: LegendViewModel.toJson, defaultVal: {}, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };

;// ./node_modules/devexpress-reporting/chart/components/models/_chart.js











class ChartViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer) {
        return new ChartViewModel(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, chartSerializationsInfo, refs);
    }
    _patchView(view) {
        const info = view.getInfo();
        ['barDistance', 'barDistanceFixed', 'equalBarWidth'].forEach(propertyName => {
            if (info.filter(x => x.propertyName === propertyName).length > 0) {
                view[propertyName] = this[propertyName];
            }
        });
    }
    _patchSeries(series) {
        series._disposables.push(series.view.subscribe((newVal) => {
            this._patchView(newVal);
        }));
        this._patchView(series.view());
    }
    _createDiagram(model, oldType, serializer) {
        if (model) {
            let typeName = '';
            if (this.dataContainer.seriesDataMember() || this.dataContainer.series().length === 0) {
                typeName = this.dataContainer.seriesTemplate.viewType();
            }
            else {
                typeName = this.dataContainer.series()[0].viewType();
            }
            if (oldType.peek() !== diagramMapper[typeName].type) {
                oldType(diagramMapper[typeName].type);
                this.diagram(new DiagramViewModel(model, typeName, serializer));
            }
        }
    }
    getChildComponents() {
        return [
            { component: this.emptyChartText, path: 'EmptyChartText' },
            { component: this.smallChartText, path: 'SmallChartText' },
            { component: external_ko_namespaceObject.unwrap(this.titles), path: 'Titles' },
            { component: external_ko_namespaceObject.unwrap(this.legends), path: 'Legends' },
            { component: this.legend.title, path: 'Legend.Title' },
            { component: this.dataContainer, path: '' },
            { component: external_ko_namespaceObject.unwrap(this.diagram), path: 'Diagram' }
        ];
    }
    constructor(model, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.cutRefs)(model), serializer, chartSerializationsInfo);
        const oldType = external_ko_namespaceObject.observable('');
        this._createDiagram(model['Diagram'], oldType, serializer);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this._createDiagram({}, oldType, serializer);
        }));
        this.titles = deserializeModelArray(model && model['Titles'], (title, parent) => { return new TitleViewModel(title, parent, serializer); }, TitleViewModel.prefix);
        this.legends = deserializeModelArray(model && model['Legends'], (legends, parent) => { return new AdditionalLegendViewModel(legends, parent, serializer); }, AdditionalLegendViewModel.prefix);
        this._patchSeries(this.dataContainer.seriesTemplate);
        this._disposables.push(this.dataContainer.series.subscribe((changes) => {
            changes.filter(x => x.status === 'added').forEach((change) => {
                this._patchSeries(change.value);
            });
        }, undefined, 'arrayChange'));
        this.dataContainer.series().forEach((series) => this._patchSeries(series));
        assignTitleActions(this.titles);
    }
}
const chartSerializationsInfo = [appearanceName, backImage, paletteName, sideBySideBarDistanceFixed, sideBySideEqualBarWidth, sideBySideBarDistance, dataContainer, diagram, titles, legend, legends, emptyChartText, smallChartText];
const chart = { propertyName: 'chart', modelName: 'Chart', displayName: 'Chart', from: ChartViewModel.from, toJsonObject: ChartViewModel.toJson, localizationId: 'DevExpress.XtraReports.UI.XRChart' };

;// ./node_modules/devexpress-reporting/chart/_controlsFactory.js

const _controlsFactory_controlsFactory = new external_DevExpress_Analytics_Utils_namespaceObject.ControlsFactory();

;// ./node_modules/devexpress-reporting/chart/_control.js











class ChartControlViewModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    getInfo() {
        return chartControlSerializationsInfo;
    }
    getControlFactory() {
        return _controlsFactory_controlsFactory;
    }
    isSeriesPropertyDisabled(name) {
        if (!this.dataSource()) {
            return name === 'argumentDataMember' || name === 'valueDataMembers' || name === 'colorDataMember' || name === 'filterString';
        }
    }
    isSeriesTemplatePropertyDisabled(name) {
        if (!this.dataSource()) {
            return name === 'argumentDataMember' || name === 'valueDataMembers' || name === 'valueScaleType' || name === 'filterString';
        }
    }
    _getSeriesActualArgumentScaleType(argumentDataMember) {
        const deffered = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        if (this.fieldListProvider() && argumentDataMember) {
            let seriesDataMember = this.getPath('seriesDataMember');
            let argumentFieldName = argumentDataMember;
            const argumentDataMemberPathComponents = argumentDataMember.split('.');
            if (argumentDataMemberPathComponents.length > 1) {
                argumentFieldName = argumentDataMemberPathComponents.pop();
                argumentDataMemberPathComponents.splice(0, 0, seriesDataMember);
                seriesDataMember = argumentDataMemberPathComponents.join('.');
            }
            this.fieldListProvider().getItems(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(seriesDataMember))
                .done((items) => {
                const result = items.filter(item => item.name === argumentFieldName)[0];
                let _scaleType = ScaleType.Numerical;
                if (result && result.specifics) {
                    if (_isNumericTypeSpecific(result.specifics))
                        _scaleType = ScaleType.Numerical;
                    else if (_isDateTypeSpecific(result.specifics))
                        _scaleType = ScaleType.DateTime;
                    else
                        _scaleType = ScaleType.Qualitative;
                }
                deffered.resolve(_scaleType);
            })
                .fail(() => {
                deffered.resolve(ScaleType.Numerical);
            });
        }
        else {
            deffered.resolve(ScaleType.Numerical);
        }
        return deffered.promise();
    }
    _initSeries(series) {
        const seriesGetPath = series['getPath'].bind(series);
        series['getPath'] = (propertyName) => {
            if (propertyName === 'argumentDataMember' || propertyName === 'colorDataMember' || propertyName === 'summaryFunction') {
                return seriesGetPath('seriesDataMember') || this.getPath('seriesDataMember');
            }
        };
        series['isPropertyDisabled'] = (name) => {
            if (series._isPropertyDisabled(name))
                return true;
            if (series._isDataMemberPropertyDisabled(name)) {
                return this.isSeriesPropertyDisabled(name);
            }
        };
        series._disposables.push(series.filterString.helper.parameters = external_ko_namespaceObject.computed(() => {
            return this.parameters && this.parameters();
        }));
        series.valueDataMembers()['getPath'] = (propertyName) => {
            return seriesGetPath('seriesDataMember') || this.getPath('seriesDataMember');
        };
        series._disposables.push(series.valueDataMembers.subscribe((newVal) => {
            newVal['getPath'] = (propertyName) => {
                return seriesGetPath('seriesDataMember') || this.getPath('seriesDataMember');
            };
        }));
        const updateSeriesActualArgumentScaleType = () => {
            if (this.chart.dataContainer.seriesTemplate.argumentScaleType() !== 'Auto')
                return;
            this._getSeriesActualArgumentScaleType(series.argumentDataMember()).done((scaleType) => {
                series._actualArgumentScaleType(scaleType);
            });
        };
        updateSeriesActualArgumentScaleType();
        series._disposables.push(series.argumentDataMember.subscribe(updateSeriesActualArgumentScaleType), this.fieldListProvider.subscribe(updateSeriesActualArgumentScaleType));
        series._disposables.push(series.argumentScaleType.subscribe((newVal) => {
            if (newVal !== 'Auto' && newVal !== 'Qualitative')
                this._getSeriesActualArgumentScaleType(series.argumentDataMember()).done((scaleType) => {
                    if (scaleType !== ScaleTypeMap[newVal])
                        series.argumentDataMember('');
                });
            series._actualArgumentScaleType(newVal == 'Auto' ? ScaleType.Numerical : ScaleTypeMap[newVal]);
        }));
    }
    _initChartElementFunctions() {
        const seriesTemplate = this.chart.dataContainer.seriesTemplate;
        const seriesTemplateGetPath = seriesTemplate['getPath'].bind(seriesTemplate);
        this._initSeries(seriesTemplate);
        this.chart.dataContainer.series().forEach(series => this._initSeries(series));
        this._disposables.push(this.chart.dataContainer.series.subscribe((args) => {
            if (args[0].status === 'added') {
                this._initSeries(args[0].value);
            }
        }, null, 'arrayChange'));
        seriesTemplate['getPath'] = (propertyName) => {
            return seriesTemplateGetPath('seriesDataMember') || this.getPath('seriesDataMember');
        };
        seriesTemplate['isPropertyDisabled'] = (name) => {
            if (seriesTemplate._isPropertyDisabled(name))
                return true;
            if (seriesTemplate._isDataMemberPropertyDisabled(name)) {
                return this.isSeriesTemplatePropertyDisabled(name);
            }
        };
        this._disposables.push(seriesTemplate.filterString.helper.parameters = external_ko_namespaceObject.computed(() => {
            return this.parameters && this.parameters();
        }));
        seriesTemplate.valueDataMembers()['getPath'] = (propertyName) => {
            return seriesTemplateGetPath('seriesDataMember') || this.getPath('seriesDataMember');
        };
        this._disposables.push(seriesTemplate.valueDataMembers.subscribe((newValue) => {
            newValue['getPath'] = (propertyName) => {
                return seriesTemplateGetPath('seriesDataMember') || this.getPath('seriesDataMember');
            };
        }));
        this._disposables.push(seriesTemplate.argumentDataMember.subscribe((newValue) => {
            if (seriesTemplate.argumentScaleType() !== 'Auto')
                return;
            this._getSeriesActualArgumentScaleType(newValue).done((scaleType) => {
                seriesTemplate._actualArgumentScaleType(scaleType);
            });
        }));
    }
    constructor(options) {
        super();
        this.fieldListProvider = external_ko_namespaceObject.observable(null);
        this.chart = options.chart ? options.chart : new ChartViewModel(options.chartSource, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer());
        this.dataSource = options.dataSource;
        this.parameters = options.parameters;
        this._initChartElementFunctions();
        ['seriesDataMember', 'dataMember'].forEach((val) => {
            this[val] = external_ko_namespaceObject.computed({
                read: () => {
                    return this.chart.dataContainer[val]();
                }, write: (newVal) => {
                    this.chart.dataContainer[val](newVal);
                }
            });
        });
    }
    getPath(propertyName) {
        const dataSourceInfo = this.dataSource();
        const dataSourceName = (dataSourceInfo && dataSourceInfo.data && (dataSourceInfo.id || dataSourceInfo.ref)) || '';
        if (propertyName === 'seriesDataMember' || propertyName === 'valueDataMembers' || propertyName === 'colorDataMember') {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(dataSourceName, this.chart.dataContainer.dataMember());
        }
        else if (propertyName === 'dataMember') {
            return dataSourceName;
        }
    }
    serialize() {
        return (new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()).serialize(this);
    }
    save() {
        const data = this.serialize();
        if (this.onSave) {
            this.onSave(data);
        }
        return data;
    }
    isPropertyDisabled(name) {
        return !this.dataSource() && (name === 'seriesDataMember' || name === 'dataMember');
    }
}
const chartDataMember = { propertyName: 'dataMember', displayName: 'Data Member', defaultVal: '', editor: editorTemplates.getEditor('dataMemberChart'), localizationId: 'DevExpress.XtraReports.UI.XRSparkline.DataMember' };
const chartSeriesDataMember = { propertyName: 'seriesDataMember', displayName: 'Series Data Member', defaultVal: '', editor: editorTemplates.getEditor('fieldChart'), localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesDataMember' };
const fakeChartSerializationInfo = [
    chartDataSource, chartDataMember, chartSeriesDataMember, paletteName, seriesTemplate, seriesSerializable, diagram, titles, legend, legends, emptyChartText, smallChartText, backImage
];
const chartControlSerializationsInfo = [chart];

;// ./node_modules/devexpress-reporting/chart/_surface.js







class ChartControlSurface extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(control, zoom = external_ko_namespaceObject.observable(1), size = external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString('500, 500')) {
        super();
        this.imageSrc = external_ko_namespaceObject.observable('');
        this.templateName = 'dx-chart-surface';
        this.width = external_ko_namespaceObject.computed(() => { return size.width() * zoom(); });
        this.height = external_ko_namespaceObject.computed(() => { return size.height() * zoom(); });
        this.zoom = zoom;
        this._disposables.push(this.width);
        this._disposables.push(this.height);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const series = control.chart.dataContainer.series();
            series.forEach((val) => {
                val.viewType();
            });
            const _self = this;
            if (HandlerUri()) {
                ChartRequests.getChartImage(HandlerUri(), ChartViewModel.toJson(external_ko_namespaceObject.unwrap(control.chart), new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer(), null), this.width(), this.height()).done(function (result) {
                    const allSeries = control.chart.dataContainer.series();
                    allSeries.forEach((val) => {
                        val.isIncompatible(false);
                    });
                    _self.imageSrc('data:image/svg+xml;base64,' + result.Image);
                    result.Indexes.forEach((val) => {
                        const series = allSeries[val];
                        series.isIncompatible(true);
                    });
                })
                    .fail(function (result) {
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('Impossible to get chart image.');
                });
            }
        }).extend({ deferred: true }));
    }
}

;// ./node_modules/devexpress-reporting/chart/_initializer.js















const ActionId = {
    Save: 'dxxcd-save'
};
const ChartDesignerElements = {
    Main: 'dx-chart-middlePart',
    Toolbar: 'dxcd-toolbar',
    RightPanel: 'dx-right-panel-lightweight',
    LeftPanel: 'dx-chart-leftPanel'
};
function registerControls() {
    _controlsFactory_controlsFactory.registerControl('ChartControl', {
        info: chartControlSerializationsInfo,
        surfaceType: ChartControlSurface,
        type: ChartControlViewModel,
        elementActionsTypes: [],
        isContainer: true,
        nonToolboxItem: true
    });
}
let _chartLimitation = false;
function _setChartLimitation(chartLimitation) {
    _chartLimitation = chartLimitation;
    viewBindableSerializationInfo.valuesArray = createViewsArray(chartLimitation);
}
function customizeDesignerActions(designerModel, nextCustomizer) {
    const chart = designerModel.model;
    return ((actions) => {
        const save = {
            id: ActionId.Save,
            text: 'Save',
            imageClassName: 'dxrd-image-save',
            imageTemplateName: 'dxrd-svg-menu-save',
            disabled: external_ko_namespaceObject.observable(false),
            visible: true,
            hasSeparator: true,
            hotKey: { ctrlKey: true, keyCode: 'S'.charCodeAt(0) },
            clickAction: () => {
                chart().save();
            }
        };
        actions.splice(0, 0, save);
        nextCustomizer && nextCustomizer(actions);
    });
}
function updateChartSurfaceContentSize(element, surfaceSize, rtl = false) {
    const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
    return () => {
        const rightAreaWidth = $element.find('.dxrd-right-panel')[0]['offsetWidth'];
        const leftAreaWidth = $element.find('.dx-chart-left-panel')[0]['offsetWidth'];
        const otherWidth = rightAreaWidth + leftAreaWidth, surfaceWidth = $element.find('.dxcd-designer')[0]['offsetWidth'] - (otherWidth + 5);
        $element.find('.dxrd-surface-wrapper').css({
            'right': `${!rtl ? rightAreaWidth : leftAreaWidth}px`,
            'left': `${rtl ? rightAreaWidth : leftAreaWidth}px`,
            'width': `${surfaceWidth}px`
        });
        surfaceSize(surfaceWidth);
    };
}
function subscribeTreelistArray(chartStructureProvider, array, getPath, subscribeNewItem) {
    return array.subscribe((args) => {
        args.forEach((changeSet) => {
            if (changeSet.status) {
                let selectedPath = '';
                const path = getPath();
                if (changeSet.status === 'deleted') {
                    selectedPath = array().length === 0 ? path.join('.') : [].concat(path, '0').join('.');
                }
                else if (changeSet.status === 'added') {
                    selectedPath = [].concat(path, changeSet.index).join('.');
                    subscribeNewItem && subscribeNewItem(changeSet.value, array, path);
                }
                chartStructureProvider.selectedPath(selectedPath);
            }
        });
    }, null, 'arrayChange');
}
function getPropertyInfo(serializationsInfo, index, pathComponets) {
    let info = serializationsInfo.filter((info) => { return info.propertyName === pathComponets[index]; })[0];
    if (info && info.info && index++ < pathComponets.length)
        info = getPropertyInfo(info.info, index, pathComponets);
    return info;
}
function wrapSelectedElement(selectedElement, selectedElementInfo, displayName, propertyName = 'element') {
    const object = {};
    object[propertyName] = selectedElement;
    object['owner'] = external_ko_namespaceObject.unwrap(selectedElement)['owner'];
    object['getInfo'] = () => {
        return [(0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, selectedElementInfo, { displayName: displayName, propertyName: propertyName })];
    };
    return object;
}
function createChartStructure(chart, selectedItem, subscriptions, surface, undoEngine, dragdrophandler) {
    const fakeChart = {
        dataSource: chart.dataSource,
        dataMember: chart.chart.dataContainer.dataMember,
        seriesDataMember: chart.chart.dataContainer.seriesDataMember,
        seriesTemplate: chart.chart.dataContainer.seriesTemplate,
        series: chart.chart.dataContainer.series,
        diagram: external_ko_namespaceObject.computed(() => {
            if (chart.chart.dataContainer.series().length > 0 || !!chart.chart.dataContainer.seriesDataMember()) {
                return chart.chart.diagram();
            }
            return null;
        }),
        titles: chart.chart.titles,
        backImage: chart.chart['backImage'],
        legend: chart.chart['legend'],
        legends: chart.chart.legends,
        emptyChartText: chart.chart['emptyChartText'],
        smallChartText: chart.chart['smallChartText'],
        paletteName: chart.chart['paletteName'],
        getInfo: () => {
            return fakeChartSerializationInfo;
        },
        getPath: (propertyName) => { return chart.getPath(propertyName); },
        isPropertyDisabled: (propertyName) => { return chart.isPropertyDisabled(propertyName); },
        className: () => { return 'chart'; }
    };
    const chartStructureProvider = new ChartStructureObjectProvider(fakeChart, 'Chart', 'DevExpress.XtraReports.UI.XRChart');
    const chartStructureTreeListController = new ChartStructureTreeListController(['chart', 'Chart', 'titles', 'legend', 'legends', 'series', 'diagram', 'indicators',
        'defaultPane', 'panes', 'axisX', 'axisY', 'secondaryAxesX', 'secondaryAxesY', 'constantLines', 'scaleBreaks', 'strips', 'seriesTemplate', 'label', 'points'], ['chart', 'diagram', 'axisX', 'axisY', 'titles', 'indicators', 'legends', 'series', 'panes', 'secondaryAxesX', 'secondaryAxesY', 'seriesTemplate', 'constantLines', 'scaleBreaks', 'strips', 'SeriesViewModel', 'SecondaryAxisViewModel'], (newItem) => {
        let selectedElement = chartStructureProvider.selectedMember();
        if (newItem.data.specifics === 'points') {
            selectedElement = wrapSelectedElement(external_ko_namespaceObject.observableArray(selectedElement), points, newItem.data.displayName, 'points');
        }
        else if (Array.isArray(selectedElement)) {
            selectedElement = wrapSelectedElement(selectedElement, { editor: editorTemplates.getEditor('collection') }, newItem.data.displayName);
        }
        selectedItem(selectedElement);
    }, surface, undoEngine, dragdrophandler);
    const chartStructure = {
        itemsProvider: chartStructureProvider,
        treeListController: chartStructureTreeListController,
        expandRootItems: true,
        selectedPath: chartStructureProvider.selectedPath
    };
    chartStructureProvider.selectedPath('Chart');
    selectedItem(null);
    subscriptions.push(fakeChart.diagram);
    subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.dataContainer.series, () => ['Chart', 'series']));
    subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.titles, () => ['Chart', 'titles']));
    subscriptions.push(subscribeTreelistArray(chartStructureProvider, chart.chart.legends, () => ['Chart', 'legends']));
    const diagramSubscriptions = [];
    const subscribeDiagram = (diagram) => {
        diagramSubscriptions.forEach((val) => val.dispose());
        const axisCollectionNames = ['constantLines', 'scaleBreaks', 'strips'];
        const subscribeAxis = (axis, array, path) => {
            axisCollectionNames.forEach((propertyName) => {
                diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, axis[propertyName], () => [].concat(path, array.indexOf(axis), propertyName)));
            });
        };
        ['axisX', 'axisY'].forEach(propertyName => {
            if (diagram[propertyName]) {
                axisCollectionNames.forEach(innerPropertyName => {
                    if (diagram[propertyName][innerPropertyName]) {
                        diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram[propertyName][innerPropertyName], () => ['Chart', 'diagram', propertyName, innerPropertyName]));
                    }
                });
            }
        });
        ['secondaryAxesX', 'secondaryAxesY'].forEach(propertyName => {
            if (diagram[propertyName]) {
                diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram[propertyName], () => ['Chart', 'diagram', propertyName], subscribeAxis));
                const axis = external_ko_namespaceObject.unwrap(diagram[propertyName]);
                for (let i = 0; i < axis.length; i++) {
                    subscribeAxis(axis[i], axis, ['Chart', 'diagram', propertyName]);
                }
            }
        });
        if (diagram.panes) {
            diagramSubscriptions.push(subscribeTreelistArray(chartStructureProvider, diagram.panes, () => ['Chart', 'diagram', 'panes']));
        }
        [].push.apply(subscriptions, diagramSubscriptions);
    };
    subscribeDiagram(chart.chart.diagram());
    chart.chart.diagram.subscribe((newVal) => {
        subscribeDiagram(newVal);
    });
    return chartStructure;
}
function createArrayOfNames(collectionProperty, defaultVal) {
    return external_ko_namespaceObject.computed(() => {
        return (defaultVal && [defaultVal] || []).concat(collectionProperty().map(x => { return x.name(); }));
    });
}
function createArrayOfDisplayNames(collectionProperty, defaultVal) {
    return external_ko_namespaceObject.computed(() => {
        return (defaultVal && [defaultVal] || []).concat(collectionProperty().map(x => {
            return {
                value: x.name(),
                displayValue: x.name()
            };
        }));
    });
}
function createChartDesigner(element, options, applyBindings = true) {
    if (options.localization) {
        (0,external_DevExpress_Analytics_Utils_namespaceObject.addCultureInfo)(options.localization);
    }
    options.callbacks.fieldLists = options.callbacks.fieldLists || ChartRequests.fieldListCallback;
    registerControls();
    const chartControlModel = external_ko_namespaceObject.observable(), surface = external_ko_namespaceObject.observable(), dataBindingsProvider = external_ko_namespaceObject.observable(), size = new external_DevExpress_Analytics_Elements_namespaceObject.Size(options.data.width, options.data.height);
    const chartStructure = external_ko_namespaceObject.observable(null);
    const chartSelectedItem = external_ko_namespaceObject.observable(null);
    let subscriptions = [];
    const groups = external_ko_namespaceObject.observableArray();
    let chartSourceSubscription = null;
    const undoModel = external_ko_namespaceObject.observable({});
    const initChartControlModel = (newModel) => {
        surface() && surface()._disposables.forEach((item) => { item.dispose(); });
        subscriptions.forEach((item) => item.dispose());
        subscriptions = [];
        if (newModel) {
            groups(newModel.chart.dataContainer.series().map(x => x.view()['group'] || x['stackedGroup']).filter(x => !!x).map(x => x()));
            chartControlModel(newModel);
            undoModel(newModel);
            surface() && surface()._disposables.forEach((item) => { item.dispose(); });
            surface(new ChartControlSurface(newModel, external_ko_namespaceObject.observable(1), size));
            const fieldListProvider = external_ko_namespaceObject.unwrap(options.fieldListProvider);
            if (!!fieldListProvider) {
                dataBindingsProvider(fieldListProvider);
            }
            else {
                let _chartSources = options.data.dataSource && options.data.dataSource() ? [options.data.dataSource()] : [];
                if (options.data.availableChartDataSources) {
                    _chartSources = options.data.availableChartDataSources().map((x) => {
                        return x.value;
                    });
                }
                const realChartSources = external_ko_namespaceObject.observableArray(_chartSources);
                dataBindingsProvider(new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(options.callbacks.fieldLists, realChartSources));
            }
            newModel.fieldListProvider(dataBindingsProvider());
            designerModel.dragHelperContent = new external_DevExpress_Analytics_Internal_namespaceObject.DragHelperContent(null);
            chartStructure(createChartStructure(newModel, chartSelectedItem, subscriptions, surface, designerModel.undoEngine, designerModel.dragHelperContent));
        }
        designerModel.undoEngine().clearHistory();
    };
    const init = (chartSourceValue) => {
        const newModel = new ChartControlViewModel({
            chartSource: chartSourceValue,
            dataSource: options.data.dataSource,
            callbacks: options.callbacks,
            size: {
                height: external_ko_namespaceObject.observable(options.data.height),
                width: external_ko_namespaceObject.observable(options.data.width),
                isPropertyDisabled: (name) => { return true; }
            }
        });
        initChartControlModel(newModel);
    };
    const undoEngine = new external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine(undoModel, ['viewType'], 'getInfo');
    undoEngine['_disposeUndoEngineSubscriptionsName'] += 'chartdesigner';
    const model = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(chartSelectedItem);
    model.registerAccessibilityProvider(options.accessibilityProvider);
    const designerModel = {
        model: chartControlModel,
        chartStructure: chartStructure,
        rightPanelHeader: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Chart Structure', 'ChartDesignerStringIDs.ChartStructureDockPanelTitle'),
        surface: surface,
        undoEngine: external_ko_namespaceObject.observable(undoEngine),
        tabPanel: new external_DevExpress_Analytics_Utils_namespaceObject.TabPanel({
            tabs: [
                new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
                    text: 'Properties',
                    template: 'dxrd-propertygridtab',
                    model: model,
                    localizationId: 'AnalyticsCoreStringId.Cmd_Properties'
                })
            ],
            rtl: options.rtl,
            width: 396
        }),
        surfaceSize: external_ko_namespaceObject.observable(0),
        isLoading: external_ko_namespaceObject.observable(true),
        canAddItems: options.canAddItems,
        rtl: options.rtl,
        groups: groups,
        applyGroup: (groupName) => {
            if (groups().indexOf(groupName) === -1 && !!groupName) {
                groups.push(groupName);
            }
        }
    };
    (0,external_DevExpress_Analytics_Internal_namespaceObject.appendStaticContextToRootViewModel)(designerModel, external_DevExpress_Analytics_Internal_namespaceObject.staticContext);
    if (options.data.chartSource) {
        chartSourceSubscription = options.data.chartSource.subscribe((newValue) => {
            init(newValue);
        });
        init(options.data.chartSource());
    }
    else {
        options.data.chart.subscribe((newVal) => {
            initChartControlModel(newVal);
        });
        initChartControlModel(options.data.chart());
    }
    designerModel.panes = createArrayOfNames(() => {
        const panes = chartControlModel().chart.diagram().panes;
        return panes && panes() || [];
    }, paneName.defaultVal);
    designerModel.legends = createArrayOfDisplayNames(() => {
        const legends = chartControlModel().chart.legends;
        return legends && legends() || [];
    }, { value: legendName.defaultVal, displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(legendName.defaultVal, 'ChartStringId.DefaultLegend') });
    designerModel.axisX = createArrayOfNames(() => {
        const axisX = chartControlModel().chart.diagram().secondaryAxesX;
        return axisX && axisX() || [];
    }, axisXName.defaultVal);
    designerModel.axisY = createArrayOfNames(() => {
        const axisY = chartControlModel().chart.diagram().secondaryAxesY;
        return axisY && axisY() || [];
    }, axisYName.defaultVal);
    if (options.data.availableChartDataSources) {
        designerModel.chartDataSources = options.data.availableChartDataSources;
    }
    else {
        const displayedChartSources = options.data.dataSource && options.data.dataSource() ? [{ displayName: options.data.dataSource().name, value: options.data.dataSource() }] : [];
        designerModel.chartDataSources = external_ko_namespaceObject.observableArray(displayedChartSources);
    }
    designerModel.rootStyle = 'dxcd-designer dxd-back-primary';
    designerModel.parts = [
        { id: ChartDesignerElements.Main, templateName: ChartDesignerElements.Main, model: designerModel },
        { id: ChartDesignerElements.Toolbar, templateName: ChartDesignerElements.Toolbar, model: designerModel },
        { id: ChartDesignerElements.RightPanel, templateName: ChartDesignerElements.RightPanel, model: designerModel },
        { id: ChartDesignerElements.LeftPanel, templateName: ChartDesignerElements.LeftPanel, model: designerModel }
    ];
    designerModel.dataBindingsProvider = dataBindingsProvider;
    designerModel.actionLists = new external_DevExpress_Analytics_Internal_namespaceObject.ActionLists(surface, null, designerModel.undoEngine, customizeDesignerActions(designerModel, options.callbacks.customizeActions));
    designerModel.isLoading(false);
    if (applyBindings) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).children().remove();
        external_ko_namespaceObject.applyBindings(designerModel, element);
    }
    const updateSurfaceContentSize_ = updateChartSurfaceContentSize(element, designerModel.surfaceSize, designerModel.rtl);
    designerModel.tabPanel.events.on('widthChanged', args => {
        updateSurfaceContentSize_();
    });
    designerModel.subscriptions = subscriptions;
    designerModel.chartSourceSubscription = chartSourceSubscription;
    designerModel.updateSurfaceSize = () => {
        updateSurfaceContentSize_();
    };
    if (applyBindings) {
        designerModel.updateSurfaceSize();
    }
    options.callbacks && options.callbacks.init && options.callbacks.init(designerModel);
    return designerModel;
}
external_ko_namespaceObject.bindingHandlers['dxChartDesigner'] = {
    init: function (element, valueAccessor) {
        const options = external_ko_namespaceObject.unwrap(valueAccessor()) || {};
        const templateHtml = (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)('dxrd-designer');
        const $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).empty().append(templateHtml);
        let designerModel = createChartDesigner($element[0], options, false);
        external_ko_namespaceObject.applyBindings(designerModel, $element.children()[0]);
        const visibleSubscription = options.visible.subscribe((val) => {
            if (val)
                designerModel.updateSurfaceSize();
        });
        designerModel.updateSurfaceSize();
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, function () {
            designerModel.model() && designerModel.model()._disposables.forEach((item) => item.dispose());
            designerModel.subscriptions.forEach((item) => item.dispose());
            designerModel.chartSourceSubscription && designerModel.chartSourceSubscription.dispose();
            designerModel.subscriptions = [];
            visibleSubscription.dispose();
            designerModel = null;
        });
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/chart/widgets/_chartDataMemberEditor.js

class ChartDataMemberEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor {
    _isNumber(specifics) {
        return specifics.indexOf('integer') !== -1 || specifics.indexOf('float') !== -1;
    }
    _isDate(specifics) { return specifics.indexOf('date') !== -1; }
    _getArgumentDataMemberFilter(item) {
        const model = this._get('_model');
        const scaleType = model && model['argumentScaleType']();
        const itemSpecifics = item.specifics.toLowerCase();
        if (scaleType === 'Numerical') {
            return this._isNumber(itemSpecifics);
        }
        else if (scaleType === 'DateTime') {
            return this._isDate(itemSpecifics);
        }
        else {
            return true;
        }
    }
    _getValueDataMemberFilter(item) {
        const itemSpecifics = item.specifics.toLowerCase();
        if (this.name === 'weight') {
            return this._isNumber(itemSpecifics);
        }
        else {
            const model = this._get('_model');
            const scaleType = model && model['valueScaleType']();
            if (scaleType === 'Numerical') {
                return this._isNumber(itemSpecifics);
            }
            else {
                return this._isDate(itemSpecifics);
            }
        }
    }
    constructor(info, level, parentDisabled) {
        super(info, level, parentDisabled);
        this.treeListController.itemsFilter = (item) => {
            if (item.isList)
                return true;
            if (this.name === 'argumentDataMember') {
                return this._getArgumentDataMemberFilter(item);
            }
            else {
                return this._getValueDataMemberFilter(item);
            }
        };
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_chartDataSourceEditor.js



class ChartDataSourceEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor() {
        super(...arguments);
        this.options = null;
    }
    generateOptions(dataSources, popupContainer) {
        if (!this.options) {
            const disabled = external_ko_namespaceObject.computed(() => {
                return this._get('disabled') || !dataSources() || dataSources().length === 0;
            });
            const value = external_ko_namespaceObject.computed({
                read: () => {
                    const unwrappedDataSources = dataSources();
                    const dataSource = unwrappedDataSources.filter(x => !!x && (x.value === this.value()))[0];
                    return external_ko_namespaceObject.unwrap(dataSource && dataSource.displayName);
                },
                write: (newVal) => {
                    const unwrappedDataSources = dataSources();
                    const dataSource = unwrappedDataSources.filter(x => !!x && (external_ko_namespaceObject.unwrap(x.displayName) === newVal))[0];
                    this.value(dataSource && dataSource.value);
                }
            });
            this._disposables.push(value);
            this._disposables.push(disabled);
            this.options = {
                displayExpr: (dataSource) => {
                    return dataSource?.value ? dataSource.displayName : (0,external_DevExpress_Analytics_Internal_namespaceObject.localizeNoneString)('none');
                },
                dataSource: dataSources,
                disabled: disabled,
                value: value,
                valueExpr: 'displayName',
                displayCustomValue: true,
                dropDownOptions: { container: popupContainer }
            };
        }
        return this.options;
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_chartDependencyEditor.js




class ChartDependencyEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    getViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('getDependencyOptions', (templateOptions, propertyName, depPropertyName) => this.getDependencyOptions(templateOptions, propertyName, depPropertyName))
            .getViewModel();
    }
    getDependencyOptions(templateOptions, propertyName, depPropertyName) {
        if (!this.bindableOptions) {
            const debObj = {};
            this.depProperty = external_ko_namespaceObject.computed(() => {
                const model = this._get('_model');
                return model && model[depPropertyName]();
            });
            this._disposables.push(this.depProperty);
            debObj[propertyName] = this.depProperty;
            this.bindableOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.getOptions(templateOptions), debObj);
        }
        return this.bindableOptions;
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_collectionLookupEditor.js


class CollectionLookupEditorModel extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.array = external_ko_namespaceObject.computed(() => { return this.value() || []; });
        this.selectedItem = external_ko_namespaceObject.observable();
        this._disposables.push(this.array);
    }
    get editors() {
        const selectedItem = this.selectedItem();
        return selectedItem && selectedItem['getInfo'] && selectedItem['getInfo']();
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_pointsEditor.js


class PointsEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    addPoint(model) {
        return SeriesPointModel.createNew(model);
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_positionSeriesLabelEditor.js



class PositionSeriesLabelEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    _positionChooser(type) {
        if (type) {
            if (['PieSeriesLabel', 'Pie3DSeriesLabel', 'DoughnutSeriesLabel', 'NestedDoughnutSeriesLabel', 'Doughnut3DSeriesLabel'].indexOf(type) !== -1)
                return piePositionValues;
            if ((['FunnelSeriesLabel', 'Funnel3DSeriesLabel'].indexOf(type) !== -1))
                return funnelPositionValues;
            if (type === 'WaterfallSeriesLabel')
                return waterfallPositionValues;
            if ((['StackedBarSeriesLabel', 'FullStackedBarSeriesLabel'].indexOf(type) !== -1)) {
                return stackedBarPositionValues;
            }
        }
        return barPositionValues;
    }
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this._disposables.push(this.values = external_ko_namespaceObject.pureComputed(() => {
            const model = this._get('_model');
            if (model && model['typeNameSerializable']) {
                return this._positionChooser(model['typeNameSerializable']());
            }
        }));
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_undoColorPickerEditor.js


class UndoColorPickerEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.ColorPickerEditor {
    constructor(info, level, parentDisabled) {
        super(info, level, parentDisabled);
    }
    generateValue(undoEngine) {
        if (!this.generatedValue) {
            this._disposables.push(this.generatedValue = external_ko_namespaceObject.computed({
                read: () => { return this._get('displayValue'); },
                write: (newVal) => {
                    undoEngine().start();
                    this._set('displayValue', newVal);
                    undoEngine().end();
                }
            }));
        }
        return this.generatedValue;
    }
}

;// ./node_modules/devexpress-reporting/chart/widgets/_viewEditor.js





class ViewEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.viewItems = [];
        this.contentValue = external_ko_namespaceObject.computed(() => {
            return this.value() && this.value().model() || {};
        });
        this._disposables.push(this.contentValue);
    }
    generateHeaderValue(undoEngine) {
        if (!this.headerValue) {
            this._disposables.push(this.headerValue = external_ko_namespaceObject.computed({
                read: () => { return this.value() && this.value().type(); },
                write: (newVal) => {
                    undoEngine().start();
                    this.value().type(newVal);
                    undoEngine().end();
                }
            }));
        }
        return this.headerValue;
    }
    generateViewItems() {
        if (!this.viewItems.length) {
            this.viewItems = this._get('values').map((x) => {
                return {
                    ...x,
                    displayValue: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(x.displayValue, x.localizationId),
                    className: this.generateViewClassName(x.value),
                    templateName: this.generateViewClassName(x.value, true)
                };
            });
        }
        return this.viewItems;
    }
    generateViewClassName(value, isTemplate = false) {
        const _name = (isTemplate ? 'dxrd-svg-fieldlist-' : 'dx-image-fieldlist-') + getSeriesClassName(value);
        if (isTemplate)
            return external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.getExistingTemplate(_name);
        return _name;
    }
}

;// ./node_modules/devexpress-reporting/chart/internal/_registerEditors.js











function registerEditorTemplates() {
    editorTemplates.registerEditors({
        chartDataSource: { header: 'dxcd-datasource', editorType: ChartDataSourceEditor },
        collection: { header: 'dxcd-collection-lookup-header', content: 'dxcd-collection-item', editorType: CollectionLookupEditorModel },
        views: { header: 'dxcd-viewHeader', content: 'dxcd-viewContent', editorType: ViewEditor },
        fieldChart: { header: 'dxcd-field', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor },
        dataMemberChart: { header: 'dxcd-field', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.DataMemberEditor },
        valueDataMember: { header: 'dxcd-field', editorType: ChartDataMemberEditor },
        comboboxPositionSeriesLabel: { header: 'dx-combobox', editorType: PositionSeriesLabelEditor },
        panes: { header: 'dxcd-panes-editor' },
        axisX: { header: 'dxcd-axisX-editor' },
        axisY: { header: 'dxcd-axisY-editor' },
        legends: { header: 'dxcd-legends-editor' },
        summaryFunction: { header: 'dx-emptyHeader', content: 'dxcd-summaryFunction-content', editorType: SummaryFunctionEditor },
        points: { custom: 'dxcd-pointscollection', editorType: PointsEditor },
        maxSize: { header: 'dxcd-maxSize', editorType: ChartDependencyEditor },
        minSize: { header: 'dxcd-minSize', editorType: ChartDependencyEditor },
        group: { header: 'dxcd-group' },
        undoCustomColorEditor: { header: 'dxcd-color-undo', editorType: UndoColorPickerEditor }
    });
}

;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal.js
























registerEditorTemplates();
























;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-axis.js







;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-dataMembers.js











;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-series-metadata.js



;// ./node_modules/devexpress-reporting/chart/components/models/_dataFilter.js





const dataFilterSerializationsInfo = [
    { propertyName: 'columnName', displayName: 'Column Name', editor: external_ko_namespaceObject.bindingHandlers['displayNameExtender'] ? external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') : editorTemplates.getEditor('fieldChart'), modelName: '@ColumnNameSerializable', localizationId: 'DevExpress.XtraCharts.DataFilter.ColumnName' },
    {
        propertyName: 'dataType', displayName: 'Data Type', defaultVal: 'System.String', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), modelName: '@DataTypeSerializable',
        valuesArray: [{ value: 'System.Boolean', displayValue: 'System.Boolean' }, { value: 'System.Byte', displayValue: 'System.Byte' }, { value: 'System.Char', displayValue: 'System.Char' }, { value: 'System.DateTime', displayValue: 'System.DateTime' }, { value: 'System.Decimal', displayValue: 'System.Decimal' }, { value: 'System.Double', displayValue: 'System.Double' }, { value: 'System.Guid', displayValue: 'System.Guid' }, { value: 'System.Int16', displayValue: 'System.Int16' }, { value: 'System.Int32', displayValue: 'System.Int32' }, { value: 'System.Int64', displayValue: 'System.Int64' }, { value: 'System.SByte', displayValue: 'System.SByte' }, { value: 'System.Single', displayValue: 'System.Single' }, { value: 'System.String', displayValue: 'System.String' }, { value: 'System.TimeSpan', displayValue: 'System.TimeSpan' }, { value: 'System.UInt16', displayValue: 'System.UInt16' }, { value: 'System.UInt32', displayValue: 'System.UInt32' }, { value: 'System.UInt64', displayValue: 'System.UInt64' }],
        localizationId: 'DevExpress.XtraCharts.DataFilter.DataType'
    },
    {
        propertyName: 'condition', displayName: 'Condition', defaultVal: 'Equal', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), modelName: '@Condition',
        valuesArray: [{ value: 'Equal', displayValue: 'Equal', localizationId: 'DevExpress.XtraCharts.DataFilterCondition.Equal' }, { value: 'GreaterThan', displayValue: 'GreaterThan' }, { value: 'GreaterThanOrEqual', displayValue: 'GreaterThanOrEqual' }, { value: 'LessThan', displayValue: 'LessThan' }, { value: 'LessThanOrEqual', displayValue: 'LessThanOrEqual' }, { value: 'NotEqual', displayValue: 'NotEqual' }],
        localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Condition'
    },
    { propertyName: 'value', displayName: 'Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), modelName: '@InvariantValueSerializable', localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' }
];
class DataFilterModel {
    static createNew() {
        return new (DefaultDataFilterModel())({}, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer());
    }
    getInfo() {
        return dataFilterSerializationsInfo;
    }
    constructor(model, serializer) {
        this.columnName = external_ko_namespaceObject.observable('');
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this.name = external_ko_namespaceObject.pureComputed(() => {
            return !!this.columnName() ? this.columnName() : (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('DataFilter', 'ChartStringId.DefaultDataFilterName');
        });
    }
}
const DefaultDataFilterModel = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(DataFilterModel);
const dataFilters = {
    modelName: 'DataFilters', displayName: 'Data Filters', propertyName: 'dataFilters',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'), array: true, addHandler: DataFilterModel.createNew, template: '#dxrd-collectionItemWithAccordion',
    localizationId: 'DevExpress.XtraCharts.SeriesBase.DataFilters'
};

;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-models.js





























;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-series.js





















;// external "DevExpress.Reporting.Viewer.Editing"
const external_DevExpress_Reporting_Viewer_Editing_namespaceObject = DevExpress.Reporting.Viewer.Editing;
;// ./node_modules/devexpress-reporting/chart/widgets/_extendedicons.js

external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.extendTemplates({
    'dxrd-svg-fieldlist-area': 'dxrd-svg-series-area',
    'dxrd-svg-fieldlist-area3d': 'dxrd-svg-series-area3d',
    'dxrd-svg-fieldlist-sidebysidebar': 'dxrd-svg-series-side_by_side_bar',
    'dxrd-svg-fieldlist-sidebysidebar3d': 'dxrd-svg-series-side_by_side_bar3d',
    'dxrd-svg-fieldlist-bubble': 'dxrd-svg-series-bubbles',
    'dxrd-svg-fieldlist-candlestick': 'dxrd-svg-series-candle_stick',
    'dxrd-svg-fieldlist-doughnut3d': 'dxrd-svg-series-doughnut3d',
    'dxrd-svg-fieldlist-doughnut': 'dxrd-svg-series-doughnut',
    'dxrd-svg-fieldlist-fullstackedarea': 'dxrd-svg-series-full_stacked_area',
    'dxrd-svg-fieldlist-fullstackedarea3d': 'dxrd-svg-series-full_stacked_area3d',
    'dxrd-svg-fieldlist-fullstackedbar': 'dxrd-svg-series-full_stacked_bar',
    'dxrd-svg-fieldlist-fullstackedbar3d': 'dxrd-svg-series-full_stacked_bar3d',
    'dxrd-svg-fieldlist-fullstackedline': 'dxrd-svg-series-full_stacked_line',
    'dxrd-svg-fieldlist-fullstackedline3d': 'dxrd-svg-series-full_stacked_line3d',
    'dxrd-svg-fieldlist-fullstackedsplinearea': 'dxrd-svg-series-full_stacked_spline_area',
    'dxrd-svg-fieldlist-fullstackedsplinearea3d': 'dxrd-svg-series-full_stacked_spline_area3d',
    'dxrd-svg-fieldlist-waterfall': 'dxrd-svg-series-waterfall',
    'dxrd-svg-fieldlist-funnel': 'dxrd-svg-series-funnel',
    'dxrd-svg-fieldlist-funnel3d': 'dxrd-svg-series-funnel3d',
    'dxrd-svg-fieldlist-overlappedgantt': 'dxrd-svg-series-gantt',
    'dxrd-svg-fieldlist-line': 'dxrd-svg-series-line',
    'dxrd-svg-fieldlist-line3d': 'dxrd-svg-series-line3d',
    'dxrd-svg-fieldlist-manhattanbar': 'dxrd-svg-series-manhattan_bar3d',
    'dxrd-svg-fieldlist-nesteddoughnut': 'dxrd-svg-series-nested_doughnut',
    'dxrd-svg-fieldlist-pie': 'dxrd-svg-series-pie',
    'dxrd-svg-fieldlist-pie3d': 'dxrd-svg-series-pie3d',
    'dxrd-svg-fieldlist-point': 'dxrd-svg-series-point',
    'dxrd-svg-fieldlist-polararea': 'dxrd-svg-series-polar_area',
    'dxrd-svg-fieldlist-polarline': 'dxrd-svg-series-polar_line',
    'dxrd-svg-fieldlist-polarpoint': 'dxrd-svg-series-polar_point',
    'dxrd-svg-fieldlist-radararea': 'dxrd-svg-series-radar_area',
    'dxrd-svg-fieldlist-radarline': 'dxrd-svg-series-radar_line',
    'dxrd-svg-fieldlist-radarpoint': 'dxrd-svg-series-radar_point',
    'dxrd-svg-fieldlist-rangearea': 'dxrd-svg-series-range_area',
    'dxrd-svg-fieldlist-rangearea3d': 'dxrd-svg-series-range_area3d',
    'dxrd-svg-fieldlist-overlappedrangebar': 'dxrd-svg-series-range_bar',
    'dxrd-svg-fieldlist-scatterline': 'dxrd-svg-series-scatter_line',
    'dxrd-svg-fieldlist-sidebysidefullstackedbar': 'dxrd-svg-series-side_by_side_full_stacked_bar',
    'dxrd-svg-fieldlist-sidebysidefullstackedbar3d': 'dxrd-svg-series-side_by_side_full_stacked_bar3d',
    'dxrd-svg-fieldlist-sidebysidegantt': 'dxrd-svg-series-side_by_side_gantt',
    'dxrd-svg-fieldlist-sidebysiderangebar': 'dxrd-svg-series-side_by_side_range_bar',
    'dxrd-svg-fieldlist-sidebysidestackedbar': 'dxrd-svg-series-side_by_side_stacked_bar',
    'dxrd-svg-fieldlist-sidebysidestackedbar3d': 'dxrd-svg-series-side_by_side_stacked_bar3d',
    'dxrd-svg-fieldlist-spline': 'dxrd-svg-series-spline',
    'dxrd-svg-fieldlist-splinearea': 'dxrd-svg-series-spline_area',
    'dxrd-svg-fieldlist-splinearea3d': 'dxrd-svg-series-spline_area3d',
    'dxrd-svg-fieldlist-spline3d': 'dxrd-svg-series-spline3d',
    'dxrd-svg-fieldlist-stackedarea': 'dxrd-svg-series-stacked_area',
    'dxrd-svg-fieldlist-stackedarea3d': 'dxrd-svg-series-stacked_area3d',
    'dxrd-svg-fieldlist-stackedbar': 'dxrd-svg-series-stacked_bar',
    'dxrd-svg-fieldlist-stackedbar3d': 'dxrd-svg-series-stacked_bar3d',
    'dxrd-svg-fieldlist-stackedline': 'dxrd-svg-series-stacked_line',
    'dxrd-svg-fieldlist-stackedline3d': 'dxrd-svg-series-stacked_line',
    'dxrd-svg-fieldlist-stackedsplinearea': 'dxrd-svg-series-stacked_spline_area',
    'dxrd-svg-fieldlist-stackedsplinearea3d': 'dxrd-svg-series-stacked_spline_area3d',
    'dxrd-svg-fieldlist-steparea': 'dxrd-svg-series-step_area',
    'dxrd-svg-fieldlist-steparea3d': 'dxrd-svg-series-step_area3d',
    'dxrd-svg-fieldlist-stepline': 'dxrd-svg-series-step_line',
    'dxrd-svg-fieldlist-stepline3d': 'dxrd-svg-series-step_line3d',
    'dxrd-svg-fieldlist-stock': 'dxrd-svg-series-stock',
    'dxrd-svg-fieldlist-swiftplot': 'dxrd-svg-series-swift_plot',
    'dxrd-svg-fieldlist-chart': 'dxrd-svg-chartstructure-chart',
    'dxrd-svg-fieldlist-diagram': 'dxrd-svg-chartstructure-diagram',
    'dxrd-svg-fieldlist-legend': 'dxrd-svg-chartstructure-legend',
    'dxrd-svg-fieldlist-legends': 'dxrd-svg-chartstructure-legend',
    'dxrd-svg-fieldlist-series': 'dxrd-svg-chartstructure-seriescollection',
    'dxrd-svg-fieldlist-seriestemplate': 'dxrd-svg-chartstructure-seriescollection',
    'dxrd-svg-fieldlist-titles': 'dxrd-svg-chartstructure-titles',
    'dxrd-svg-fieldlist-boxplot': 'dxrd-svg-series-boxplot'
});

;// ./node_modules/devexpress-reporting/scopes/reporting-chart-internal-widgets.js























;// ./node_modules/devexpress-reporting/designer/controls/barCodesTypes.js
const barCodesTypes = [
    { value: 'Codabar', displayValue: 'Codabar', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Codabar' },
    { value: 'Code11', displayValue: 'Code 11', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Code11' },
    { value: 'Code128', displayValue: 'Code 128', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Code128' },
    { value: 'Code39', displayValue: 'Code 39', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Code39' },
    { value: 'Code39Extended', displayValue: 'Code 39 Extended', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Code39Extended' },
    { value: 'Code93', displayValue: 'Code 93', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Code93' },
    { value: 'Code93Extended', displayValue: 'Code 93 Extended', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Code93Extended' },
    { value: 'CodeMSI', displayValue: 'Code MSI', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.CodeMSI' },
    { value: 'DataBar', displayValue: 'DataBar', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.DataBar' },
    { value: 'DataMatrix', displayValue: 'Data Matrix', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.DataMatrix' },
    { value: 'DataMatrixGS1', displayValue: 'Data Matrix GS1', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.DataMatrixGS1' },
    { value: 'EAN128', displayValue: 'EAN 128', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.EAN128' },
    { value: 'EAN13', displayValue: 'EAN 13', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.EAN13' },
    { value: 'EAN8', displayValue: 'EAN 8', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.EAN8' },
    { value: 'Industrial2of5', displayValue: 'Industrial 2 of 5', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Industrial2of5' },
    { value: 'IntelligentMail', displayValue: 'Intelligent Mail', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.IntelligentMail' },
    { value: 'IntelligentMailPackage', displayValue: 'Intelligent Mail Package', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.IntelligentMailPackage' },
    { value: 'Interleaved2of5', displayValue: 'Interleaved 2 of 5', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Interleaved2of5' },
    { value: 'ITF14', displayValue: 'ITF 14', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.ITF14' },
    { value: 'Matrix2of5', displayValue: 'Matrix 2 of 5', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Matrix2of5' },
    { value: 'PDF417', displayValue: 'PDF 417', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.PDF417' },
    { value: 'PostNet', displayValue: 'PostNet', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.PostNet' },
    { value: 'QRCode', displayValue: 'QR Code', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.QRCode' },
    { value: 'UPCA', displayValue: 'UPC A', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.UPCA' },
    { value: 'UPCE0', displayValue: 'UPC E0', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.UPCE0' },
    { value: 'UPCE1', displayValue: 'UPC E1', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.UPCE1' },
    { value: 'UPCSupplemental2', displayValue: 'UPCSupplemental2', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.UPCSupplemental2' },
    { value: 'UPCSupplemental5', displayValue: 'UPCSupplemental5', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.UPCSupplemental5' },
    { value: 'Pharmacode', displayValue: 'Pharmacode', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.Pharmacode' },
    { value: 'DeutschePostIdentcode', displayValue: 'DeutschePostIdentcode', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.DeutschePostIdentcode' },
    { value: 'DeutschePostLeitcode', displayValue: 'DeutschePostLeitcode', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.DeutschePostLeitcode' },
    { value: 'SSCC', displayValue: 'SSCC', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.SSCC' },
    { value: 'QRCodeGS1', displayValue: 'QRCodeGS1', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.QRCodeGS1' },
    { value: 'QRCodeEPC', displayValue: 'EPC QR Code', localizationId: 'DevExpress.XtraPrinting.BarCode.Native.BarCodeSymbology.QRCodeEPC' }
];

;// ./node_modules/devexpress-reporting/designer/controls/properties/anchoring.js



class Anchoring extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.subscribtion.dispose();
    }
    constructor(subscrible, model, anchoringProperty) {
        super();
        this.state = Anchoring.states.complete;
        this.anchoring = anchoringProperty;
        this.start(subscrible, model);
    }
    start(subscrible, model) {
        this.subscribtion && this.subscribtion.dispose();
        const oldVal = external_ko_namespaceObject.observable(subscrible());
        this.subscribtion = subscrible.subscribe((newVal) => {
            if (this.state !== Anchoring.states.fromControls) {
                this.state = Anchoring.states.inProgress;
                this.anchorSubscribtion(newVal, oldVal, model);
            }
            oldVal(newVal);
            this.state = Anchoring.states.complete;
        });
    }
}
Anchoring.states = {
    inProgress: 'inProgress',
    complete: 'complete',
    fromControls: 'fromControls'
};

class VerticalAcnhoring extends Anchoring {
    constructor(subscrible, model, anchoringProperty) {
        super(subscrible, model, anchoringProperty);
        this.anchorSubscribtion = (parentSizeValue, oldValue, model) => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(model.root) && isFinite(oldValue()) && oldValue()) {
                if (this.anchoring() === 'Both') {
                    const newSize = model.size.height() + parentSizeValue - oldValue();
                    model.size.height(newSize > 0 ? newSize : 1);
                }
                if (this.anchoring() === 'Bottom') {
                    const newLocation = model.location.y() + parentSizeValue - oldValue();
                    model.location.y(newLocation > 0 ? newLocation : 0);
                }
            }
        };
        this._disposables.push(model.size.height.subscribe((newVal) => {
            if (this.state === Anchoring.states.complete) {
                this.state = Anchoring.states.fromControls;
            }
        }));
        this._disposables.push(model.location.y.subscribe((newVal) => {
            if (this.state === Anchoring.states.complete) {
                this.state = Anchoring.states.fromControls;
            }
        }));
    }
}
class HorizontalAnchoring extends Anchoring {
    constructor(subscrible, model, anchoringProperty) {
        super(subscrible, model, anchoringProperty);
        this.anchorSubscribtion = (parentSizeValue, oldValue, model) => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(model.root) && isFinite(oldValue()) && oldValue()) {
                if (this.anchoring() === 'Both') {
                    const newSize = model.size.width() + parentSizeValue - oldValue();
                    model.size.width(newSize > 0 ? newSize : 1);
                }
                if (this.anchoring() === 'Right') {
                    const newLocation = model.location.x() + parentSizeValue - oldValue();
                    model.location.x(newLocation > 0 ? newLocation : 0);
                }
            }
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/dataBindingInfo.js
const dataBindingBaseSerializationInfo = [
    { propertyName: 'parameter', modelName: '@Parameter', link: true },
    { propertyName: 'dataSource', modelName: '@DataSource', link: true },
    { propertyName: 'dataMember', modelName: '@DataMember' }
];
const dataBindingSerializationInfo = dataBindingBaseSerializationInfo.concat([
    { propertyName: 'propertyName', modelName: '@PropertyName' },
    { propertyName: 'formatString', modelName: '@FormatString' }
]);

;// external "DevExpress.Reporting.Viewer.Parameters"
const external_DevExpress_Reporting_Viewer_Parameters_namespaceObject = DevExpress.Reporting.Viewer.Parameters;
;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/parameters/layoutItems.js



const orientationValues = [
    { displayValue: 'Horizontal', value: 'Horizontal' },
    { displayValue: 'Vertical', value: 'Vertical' }
];
const parameter = { propertyName: 'parameter', modelName: '@Parameter', link: true };
const layoutitemtype = { propertyName: 'layoutItemType', modelName: '@LayoutItemType', displayName: 'LayoutItemType' };
const titlevisible = { propertyName: 'titleVisible', modelName: '@TitleVisible', displayName: 'Show title', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupTitleVisible', editor: designerEditorTemplates.getEditor('parametersCheckbox'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const layoutItems_title = { propertyName: 'title', localizable: true, modelName: '@Title', displayName: 'Title', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupTitle', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '' };
const bordervisible = { propertyName: 'borderVisible', modelName: '@BorderVisible', displayName: 'Show borders', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupBorderVisible', editor: designerEditorTemplates.getEditor('parametersCheckbox'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const expanded = { propertyName: 'expanded', modelName: '@Expanded', displayName: 'Expanded', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupExpanded', editor: designerEditorTemplates.getEditor('parametersCheckbox'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const showexpandbutton = { propertyName: 'showExpandButton', modelName: '@ShowExpandButton', displayName: 'Show expand/collapse button', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupShowExpandButton', editor: designerEditorTemplates.getEditor('parametersCheckbox'), defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const orientation = { propertyName: 'orientation', modelName: '@Orientation', displayName: 'Orientation', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupOrientation', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Vertical', valuesArray: orientationValues };
const subItems = { propertyName: 'parameterPanelLayoutItems', modelName: 'Items', array: true };
const labelOrientation = { propertyName: 'labelOrientation', modelName: '@LabelOrientation', displayName: 'Orientation', localizationId: 'ASPxReportsStringId.ReportDesigner_ParametersDialog_GroupOrientation', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Horizontal', valuesArray: orientationValues };
const groupLayoutItemInfo = [layoutItems_title, orientation, showexpandbutton, expanded, layoutitemtype, titlevisible, bordervisible, subItems];
const parameterLayoutItemInfo = [layoutitemtype, labelOrientation, parameter];
const separatorLayoutItemInfo = [layoutitemtype];

;// ./node_modules/devexpress-reporting/designer/controls/utils/_localizationUtils.js



function __createLocalizationProperties(target, format = '{0}') {
    return target.getInfo().filter(x => x.localizable && x.modelName).map(x => {
        return new LocalizedProperty((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(format, x.modelName.substr(1)), target['_' + x.propertyName] || target[x.propertyName], x, target);
    });
}
class DefaultLocalizationProvider extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        this._localizationInfo = null;
    }
    constructor(_model) {
        super();
        this._model = _model;
    }
    getLocalizationProperty(propertyName) {
        return this.getLocalizationProperties().filter(x => x.propertyName === propertyName)[0];
    }
    getLocalizationProperties() {
        if (!this._localizationInfo) {
            this._localizationInfo = __createLocalizationProperties(this._model);
        }
        return this._localizationInfo;
    }
    applyLocalization(propertyName, propertyValue) {
        this.getLocalizationProperties().filter(x => x.propertyName === propertyName).forEach((x) => x.applyLocalization(propertyValue));
    }
}
class TableOfContentLocalizationProvider extends DefaultLocalizationProvider {
    getLocalizationProperties() {
        if (!this._localizationInfo) {
            this._localizationInfo = [].concat.apply(super.getLocalizationProperties(), [
                __createLocalizationProperties(this._model.levelTitle, 'LevelTitle.{0}')
            ]);
        }
        return [].concat.apply(this._localizationInfo, this._model.levels().map((level, i) => {
            return __createLocalizationProperties(level, (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Levels.{0}.', i) + '{0}');
        }));
    }
}
class ReportLocalizationProvider extends DefaultLocalizationProvider {
    getLocalizationProperties() {
        if (!this._localizationInfo) {
            this._localizationInfo = super.getLocalizationProperties();
        }
        const itemsLocalization = this._model.watermarks().map((watermark) => __createLocalizationProperties(watermark, (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Watermarks.{0}.', external_ko_namespaceObject.unwrap(watermark.watermarkId)) + '{0}'));
        this._model.parameters().forEach(p => {
            const isStaticLookUp = external_ko_namespaceObject.unwrap(p.valueSourceSettingsType) === 'StaticListLookUpSettings';
            const settings = external_ko_namespaceObject.unwrap(p.valueSourceSettings);
            if (isStaticLookUp && settings) {
                settings['lookUpValues']().forEach((v, i) => {
                    itemsLocalization.push(__createLocalizationProperties(v, (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('{0}.LookUpValues[{1}].Description', external_ko_namespaceObject.unwrap(p.name), external_ko_namespaceObject.unwrap(i))));
                });
            }
        });
        return [].concat.apply(this._localizationInfo, itemsLocalization);
    }
}
class ChartLocalizationProvider extends DefaultLocalizationProvider {
    getLocalizationProperties() {
        const chartComponents = this._model.allChartComponents();
        return [].concat.apply(super.getLocalizationProperties(), chartComponents.map(componentInfo => {
            return __createLocalizationProperties(componentInfo.component, componentInfo.path + '.{0}');
        }));
    }
}
class LocalizedProperty {
    constructor(propertyName, value, info, target) {
        this.propertyName = propertyName;
        this.value = value;
        this.info = info;
        this.target = target;
    }
    applyLocalization(value) {
        const newValue = this.info.from ? external_ko_namespaceObject.unwrap(this.info.from(value)) : value;
        const componentValueAsValue = external_ko_namespaceObject.unwrap(this.value);
        if (this.value.getInfo) {
            const info = componentValueAsValue.getInfo();
            info.forEach(info => {
                componentValueAsValue[info.propertyName] && componentValueAsValue[info.propertyName](newValue[info.propertyName]());
            });
        }
        else {
            this.value(newValue);
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/layoutItems.js






var ParameterPanelLayoutItemTypes;
(function (ParameterPanelLayoutItemTypes) {
    ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes["Parameter"] = 0] = "Parameter";
    ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes["Group"] = 1] = "Group";
    ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes["Separator"] = 2] = "Separator";
})(ParameterPanelLayoutItemTypes || (ParameterPanelLayoutItemTypes = {}));
class ParameterPanelLayoutItem extends external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel {
    static createLayoutItem(model, parent, serializer) {
        return new ParameterPanelMapper[model['@LayoutItemType']](model, parent, serializer);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this._canRemove = true;
        this.name = external_ko_namespaceObject.observable(null);
        const parameterHelper = this.root.parameterHelper;
        if (parameterHelper) {
            this._parameterHelper = parameterHelper;
            this._parameterHelper.addParameterPanelLayoutItem(this);
        }
    }
    delete() {
        this.parentModel().parameterPanelLayoutItems.remove(this);
    }
    getControlFactory() {
        return controlsFactory();
    }
    className() {
        return '';
    }
    get canRemove() {
        return this._canRemove;
    }
}
class GroupLayoutItem extends ParameterPanelLayoutItem {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.layoutItemType(ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes.Group]);
        this.name = this.title;
        this.parameterPanelLayoutItems = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.Items, (item) => { return ParameterPanelLayoutItem.createLayoutItem(item, this, serializer); });
    }
    getInfo() {
        const info = groupLayoutItemInfo.map(i => ({ ...i }));
        this._parameterHelper && this._parameterHelper.customizeParameterProperties(this, info, { layoutItemType: 'Group', name: external_ko_namespaceObject.unwrap(this.name) });
        return info;
    }
    className() {
        return 'parametergroup';
    }
    isPropertyDisabled(name) {
        return name === 'expanded' && !this.showExpandButton();
    }
    get _localizationProvider() {
        if (!this.__localizationProvider) {
            this.__localizationProvider = new DefaultLocalizationProvider(this);
        }
        return this.__localizationProvider;
    }
    getLocalizationProperty(propertyName) {
        return this._localizationProvider.getLocalizationProperty(propertyName);
    }
    getLocalizationProperties() {
        return this._localizationProvider.getLocalizationProperties();
    }
    applyLocalization(propertyName, propertyValue) {
        this._localizationProvider.applyLocalization(propertyName, propertyValue);
    }
}
class SeparatorLayoutItem extends ParameterPanelLayoutItem {
    constructor() {
        super(...arguments);
        this.layoutItemType = external_ko_namespaceObject.observable(ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes.Separator]);
        this.name = external_ko_namespaceObject.observable(this.layoutItemType());
    }
    getInfo() {
        const info = separatorLayoutItemInfo.map(i => ({ ...i }));
        this._parameterHelper && this._parameterHelper.customizeParameterProperties(this, info, { layoutItemType: 'Separator', name: external_ko_namespaceObject.unwrap(this.name) });
        return info;
    }
    className() {
        return 'parameterseparator';
    }
}
class ParameterLayoutItem extends ParameterPanelLayoutItem {
    constructor(model, parent, serializer, parameter) {
        super(model, parent, serializer);
        this.layoutItemType(ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes.Parameter]);
        parameter = parameter || this.parameter();
        if (model['@Name']) {
            parameter = this.root.parameters().filter(x => x.name === model['@Name'])[0];
        }
        if (parameter) {
            this.parameter(parameter);
            this.name = parameter.parameterName;
            parameter.labelOrientation() === 'Vertical' && this.labelOrientation('Vertical');
            parameter.labelOrientation = this.labelOrientation;
        }
    }
    className() {
        return this.parameter() && this.parameter().specifics;
    }
    getInfo() {
        return parameterLayoutItemInfo;
    }
    get canRemove() {
        return external_ko_namespaceObject.unwrap(this.parameter) ? external_ko_namespaceObject.unwrap(this.parameter).canRemove : true;
    }
}
const ParameterPanelMapper = {
    Group: GroupLayoutItem,
    Separator: SeparatorLayoutItem,
    Parameter: ParameterLayoutItem
};

;// external "DevExpress.Analytics.Wizard"
const external_DevExpress_Analytics_Wizard_namespaceObject = DevExpress.Analytics.Wizard;
;// ./node_modules/devexpress-reporting/designer/utils/inititalizer.js


var SearchBoxVisibilityMode;
(function (SearchBoxVisibilityMode) {
    SearchBoxVisibilityMode[SearchBoxVisibilityMode["Auto"] = 0] = "Auto";
    SearchBoxVisibilityMode[SearchBoxVisibilityMode["Always"] = 1] = "Always";
    SearchBoxVisibilityMode[SearchBoxVisibilityMode["Never"] = 2] = "Never";
})(SearchBoxVisibilityMode || (SearchBoxVisibilityMode = {}));
class ReportWizardSettings extends external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardSettings {
    createDefault(wizardSettings) {
        const newSettings = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, super.createDefault(wizardSettings), { useFullscreenWizard: true, useMasterDetailWizard: true });
        if (!wizardSettings)
            return newSettings;
        if (wizardSettings.useFullscreenWizard !== undefined)
            newSettings.useFullscreenWizard = wizardSettings.useFullscreenWizard;
        if (wizardSettings.useMasterDetailWizard !== undefined)
            newSettings.useMasterDetailWizard = wizardSettings.useMasterDetailWizard;
        newSettings.reportWizardTemplatesSearchBoxVisibility = wizardSettings.reportWizardTemplatesSearchBoxVisibility;
        return newSettings;
    }
}
const defaultParameterEditingSettings = {
    allowReorderParameters: true,
    allowEditParameterCollection: true,
    allowEditProperties: true,
    allowEditParameterGroups: true,
    allowEditParameterSeparators: true
};

;// ./node_modules/devexpress-reporting/designer/helpers/reportParameterHelper.js





class ReportParameterHelper extends external_DevExpress_Reporting_Viewer_Parameters_namespaceObject.ParameterHelper {
    get parameters() {
        return this.container.parameters;
    }
    get parameterPanelLayoutItems() {
        return this.container.parameterPanelLayoutItems;
    }
    initialize(knownEnums, callbacks, _parameterEditingSettings = defaultParameterEditingSettings) {
        super.initialize(knownEnums, callbacks);
        this._parameterEditingSettings = _parameterEditingSettings;
        if (callbacks && callbacks.customizeParameterProperties) {
            this._customizeParameterProperties = callbacks.customizeParameterProperties;
        }
    }
    getAllLayoutItems(items) {
        const allChildLayoutItems = [];
        items.forEach((item) => {
            allChildLayoutItems.push(item);
            if (item instanceof GroupLayoutItem) {
                const subLayoutItems = this.getAllLayoutItems(item.parameterPanelLayoutItems());
                if (subLayoutItems && subLayoutItems.length)
                    allChildLayoutItems.push(...subLayoutItems);
            }
        });
        return allChildLayoutItems;
    }
    constructor(container) {
        super();
        this.container = container;
        this._disposables.push(this.allLayoutItems = external_ko_namespaceObject.pureComputed(() => {
            let allItems = [];
            if (this.parameterPanelLayoutItems && this.parameterPanelLayoutItems()?.length)
                allItems = this.getAllLayoutItems(this.parameterPanelLayoutItems());
            return allItems;
        }));
    }
    addParameterPanelLayoutItem(item) {
        if (item instanceof GroupLayoutItem && !item.title()) {
            const newName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this.allLayoutItems().filter(x => x instanceof GroupLayoutItem), 'Group');
            item.title(newName);
        }
    }
    startEditing() {
        this.parameters().forEach(parameter => {
            parameter._isEditing(true);
            parameter._showLayoutProperties(true);
        });
    }
    endEditing() {
        this.parameters().forEach(parameter => {
            parameter._isEditing(false);
            parameter._showLayoutProperties(false);
        });
    }
    updateParameterLayoutItems() {
        this.parameters().forEach(parameter => {
            const parameterLayoutItem = this.getParameterLayoutItem(parameter);
            if (!parameterLayoutItem) {
                const newItem = new ParameterLayoutItem({}, this.container, undefined, parameter);
                this.parameterPanelLayoutItems.push(newItem);
            }
        });
    }
    clearLayoutItems() {
        const toRemove = [];
        this.parameterPanelLayoutItems().forEach(item => {
            if (item instanceof ParameterLayoutItem) {
                const isModify = item.getInfo().some(x => !!x.editor && item.isPropertyModified(x.propertyName));
                if (!isModify) {
                    toRemove.push(item);
                }
            }
        });
        toRemove.forEach(x => this.parameterPanelLayoutItems.remove(x));
    }
    getParameterLayoutItem(parameter) {
        return this.allLayoutItems().filter(x => x['parameter'] && x['parameter']() === parameter)[0];
    }
    removeParameterModel(parameter) {
        for (const parameterLayoutItem of this.allLayoutItems()) {
            if (parameterLayoutItem['parameter'] && parameterLayoutItem['parameter']() === parameter) {
                parameterLayoutItem.delete();
            }
        }
    }
    _disableParameterProperties(editors) {
        if (this._parameterEditingSettings.allowEditProperties) {
            return;
        }
        editors.forEach(info => info.disabled = true);
    }
    customizeParameterProperties(model, editors, parameterPanelLayoutItem) {
        const editOptions = { allowDelete: model.canRemove };
        const parameterDescriptor = parameterPanelLayoutItem.layoutItemType === 'Parameter' ? model.getParameterDescriptor() : null;
        this._customizeParameterProperties && this._customizeParameterProperties(parameterDescriptor, parameterPanelLayoutItem, editors, (path) => {
            return editors.find(info => info.propertyName === path || info.modelName === '@' + path || info.modelName === path);
        }, editOptions);
        model['_canRemove'] = editOptions.allowDelete;
        this._disableParameterProperties(editors);
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/parameterTypesHelper.js


class ParameterTypesHelper {
    _getTypeInfo(typeName) {
        const values = ParameterTypesHelper.typeValues.filter((type) => { return type.value === typeName; });
        if (values.length > 0)
            return values[0];
        if (this.enumValueTypes?.length) {
            const enumValues = this.enumValueTypes.filter((enumInfo) => enumInfo.value === typeName);
            if (enumValues.length > 0)
                return enumValues[0];
        }
        return null;
    }
    _tryConvertValue(value, typeName) {
        const condition = val => { return val !== void 0 && val !== null && !isNaN(typeof val === 'string' ? '' : val); };
        if (!condition(value)) {
            return { isValid: false, newValue: null };
        }
        const typeValue = this._getTypeInfo(typeName), newValue = (typeValue && typeValue.valueConverter) ? typeValue.valueConverter(value, this.getDefaultValue(typeName)) : value;
        return { isValid: condition(newValue), newValue: newValue };
    }
    convertSingleValue(value, typeName) {
        const result = this._tryConvertValue(value, typeName);
        return result.isValid ? result.newValue : this.getDefaultValue(typeName);
    }
    getSpecifics(typeName) {
        const typeValue = this._getTypeInfo(typeName);
        return typeValue ? typeValue.specifics : 'default';
    }
    getIcon(typeName) {
        const typeValue = this._getTypeInfo(typeName);
        return typeValue && typeValue.icon;
    }
    getDefaultValue(typeName) {
        const typeValue = this._getTypeInfo(typeName);
        let _value = typeValue ? typeValue.defaultValue : '';
        if (_value === '' && !!this.knownEnums?.length) {
            const enumType = this.knownEnums.filter((enumInfo) => enumInfo.enumType === typeName)[0];
            if (!!enumType) {
                _value = enumType.values[0]?.value ?? 0;
            }
        }
        else if (_value instanceof Date) {
            _value = new Date(_value);
        }
        return _value;
    }
    getEnumTypeValues() {
        if (!!this.knownEnums?.length) {
            const enumtypeValues = [];
            this.knownEnums.forEach(knownEnum => {
                enumtypeValues.push({
                    value: knownEnum.enumType,
                    displayValue: knownEnum.enumType,
                    defaultValue: knownEnum.values[0].value,
                    specifics: 'Enum',
                    valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.enumValueConverter)(val, defaultValue, knownEnum.values); }
                });
            });
            return enumtypeValues;
        }
    }
    constructor(knownEnums) {
        this.knownEnums = knownEnums;
        this.enumValueTypes = this.getEnumTypeValues();
    }
}
ParameterTypesHelper.defaultGuidValue = '00000000-0000-0000-0000-000000000000';
ParameterTypesHelper.typeValues = [
    { value: 'System.String', displayValue: 'String', defaultValue: '', specifics: 'String', valueConverter: function (val) { return val.toString(); }, localizationId: 'UtilsUIStringId.Parameter_Type_String' },
    { value: 'System.DateTime', displayValue: 'Date', defaultValue: new Date(new Date().setHours(0, 0, 0, 0)), specifics: 'Date', valueConverter: function (val) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.parseDate)(val); }, localizationId: 'UtilsUIStringId.Parameter_Type_DateTime' },
    { value: 'System.Int16', displayValue: 'Number (16 bit integer)', defaultValue: '0', specifics: 'Integer', valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.integerValueConverter)(val, defaultValue, 'System.Int16'); }, localizationId: 'UtilsUIStringId.Parameter_Type_Int16' },
    { value: 'System.Int32', displayValue: 'Number (32 bit integer)', defaultValue: '0', specifics: 'Integer', valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.integerValueConverter)(val, defaultValue, 'System.Int32'); }, localizationId: 'UtilsUIStringId.Parameter_Type_Int32' },
    { value: 'System.Int64', displayValue: 'Number (64 bit integer)', defaultValue: '0', specifics: 'Integer', valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.integerValueConverter)(val, defaultValue, 'System.Int64'); }, localizationId: 'UtilsUIStringId.Parameter_Type_Int64' },
    { value: 'System.Single', displayValue: 'Number (floating-point)', defaultValue: '0', specifics: 'Float', valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.floatValueConverter)(val, defaultValue, 'System.Single'); }, localizationId: 'UtilsUIStringId.Parameter_Type_Float' },
    { value: 'System.Double', displayValue: 'Number (double-precision floating-point)', defaultValue: '0', specifics: 'Float', valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.floatValueConverter)(val, defaultValue, 'System.Double'); }, localizationId: 'UtilsUIStringId.Parameter_Type_Double' },
    { value: 'System.Decimal', displayValue: 'Number (decimal)', defaultValue: '0', specifics: 'Float', valueConverter: function (val, defaultValue) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.floatValueConverter)(val, defaultValue, 'System.Decimal'); }, localizationId: 'UtilsUIStringId.Parameter_Type_Decimal' },
    { value: 'System.Boolean', displayValue: 'Boolean', defaultValue: false, specifics: 'Bool', valueConverter: function (val) { return String(val).toLowerCase() === 'true' ? true : (String(val).toLowerCase() === 'false' ? false : null); }, localizationId: 'UtilsUIStringId.Parameter_Type_Boolean' },
    { value: 'System.Guid', displayValue: 'Guid', defaultValue: ParameterTypesHelper.defaultGuidValue, valueConverter: function (val) { return (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.validateGuid)(val) ? val : ParameterTypesHelper.defaultGuidValue; }, specifics: 'guid', localizationId: 'UtilsUIStringId.Parameter_Type_Guid' }
];


;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/parameterSettings.js

const parameterSeparator = '|';
const parameterTypeValues = ParameterTypesHelper.typeValues;

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/_parameterUtils.js



function parameterValueToJsonObject(value) {
    const result = ReportParameterHelper.getSerializationValue(value, external_DevExpress_Analytics_Utils_namespaceObject.serializeDate);
    return (result instanceof Array) ? result.join(parameterSeparator) : result;
}
function collectAvailableParameters(parameters) {
    return parameters.reduce((result, parameter) => {
        if (parameter.isList)
            result.push.apply(result, parameter.getRangeParameters());
        else
            result.push(parameter);
        return result;
    }, []);
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/dataBinding.js




class DataBindingBase extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    getInfo() {
        return dataBindingBaseSerializationInfo;
    }
    constructor(model, serializer) {
        super();
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this._disposables.push(this.displayExpr = external_ko_namespaceObject.pureComputed(() => {
            const parameter = this.parameter();
            return parameter ? parameter.name : this.dataMember();
        }));
    }
    _findDataSourceFromPath(path, dataSources) {
        const dataSourceId = path.split('.')[0];
        const dataSourceInfo = (dataSources || []).filter((dataSource) => { return dataSource.ref === dataSourceId || dataSource.id === dataSourceId; })[0];
        if (dataSourceInfo) {
            return dataSourceInfo.data;
        }
        return null;
    }
    updateParameter(pathRequest, dataSources) {
        const parameterName = pathRequest.fullPath.split('.').pop();
        this.parameter(collectAvailableParameters(this._findDataSourceFromPath(pathRequest.fullPath, dataSources)() || [])
            .filter((item) => { return item.name === parameterName; })[0]);
        this.dataSource(null);
    }
    updateBinding(path, dataSources) {
        if (!!path) {
            const pathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(path);
            if (path.indexOf('Parameters.') === 0) {
                this.updateParameter(pathRequest, dataSources);
            }
            else {
                this.dataMember(pathRequest.path);
                this.dataSource(this._findDataSourceFromPath(path, dataSources));
                this.parameter(null);
            }
        }
        else {
            this.resetValue();
        }
    }
    getValuePath(dataSourceHelper) {
        if (this.parameter()) {
            return 'Parameters.' + this.parameter().name;
        }
        let dataSourceName = '';
        if (this.dataSource()) {
            const ds = dataSourceHelper.findDataSourceInfo(this.dataSource());
            dataSourceName = ds && (ds.id || ds.ref);
        }
        return dataSourceName && this.dataMember() ? (dataSourceName + '.' + this.dataMember()) : '';
    }
    generateValue(undoEngine, dataSourceHelper, dataSources) {
        if (!this.generatedValue) {
            this._disposables.push(this.generatedValue = external_ko_namespaceObject.computed({
                read: () => {
                    return this.getValuePath(dataSourceHelper);
                },
                write: (val) => {
                    undoEngine.start();
                    this.updateBinding(val, dataSources);
                    undoEngine.end();
                }
            }));
        }
        return this.generatedValue;
    }
    resetValue() {
        this.parameter(null);
        this.dataSource(null);
        this.dataMember(null);
    }
    isEmpty() {
        return !(this.dataMember() || this.dataSource() || this.parameter());
    }
}
class DataBinding extends DataBindingBase {
    static initialize(model, serializer) {
        const currentDataBindings = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model, (item) => { return new DataBinding(item, serializer); });
        (this['allDataBindings'] || []).forEach((value) => {
            if (currentDataBindings().filter((databinding) => { return databinding.propertyName() === value; }).length === 0)
                currentDataBindings.push(new DataBinding({ '@PropertyName': value }, serializer));
        });
        currentDataBindings()['findBinding'] = (bindingName) => {
            return currentDataBindings().filter((binding) => { return binding.propertyName() === bindingName; })[0];
        };
        return currentDataBindings;
    }
    getInfo() {
        return dataBindingSerializationInfo;
    }
    updateParameter(pathRequest, dataSources) {
        super.updateParameter(pathRequest, dataSources);
        this.dataMember(pathRequest.path);
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.visible = external_ko_namespaceObject.observable(true);
        this.disabled = external_ko_namespaceObject.pureComputed(() => {
            const dataMember = this.dataMember();
            return !(this.parameter() || dataMember);
        });
        this._disposables.push(this.disabled.subscribe((newVal) => {
            newVal && this.formatString('');
        }));
        this._disposables.push(this.disabled);
    }
    resetValue() {
        super.resetValue();
        this.formatString('');
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrSubreportParameterBinding.js


const parameterBindingSerializationInfo = dataBindingBaseSerializationInfo.concat([
    { propertyName: 'parameterName', modelName: '@ParameterName', displayName: 'Parameter Name', localizationId: 'DevExpress.XtraReports.UI.ParameterBinding.ParameterName', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox') },
    { propertyName: 'fakeBinding', displayName: 'Binding', localizationId: 'DevExpress.XtraReports.Design.DataBinding.Binding', link: true, editor: { header: 'dxrd-dataBinding', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor } }
]);

;// ./node_modules/devexpress-reporting/designer/controls/xrSubreportParameterBinding.js




class ParameterBinding extends DataBindingBase {
    static createNew() {
        return new ParameterBinding({}, null);
    }
    dispose() {
        super.dispose();
    }
    getInfo() {
        if (this.subreportParameters && this.subreportParameters().length > 0) {
            const serializationInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], parameterBindingSerializationInfo);
            const parameterNameInfo = serializationInfo.filter((info) => { return info.propertyName === 'parameterName'; })[0];
            parameterNameInfo.valuesArray = this.subreportParameters().map((parameter) => { return { value: parameter, displayValue: parameter }; });
            const dataSourceInfo = serializationInfo.filter((info) => { return info.propertyName === 'dataSource'; })[0];
            dataSourceInfo.defaultVal = this._reportDataSource();
            return serializationInfo;
        }
        return parameterBindingSerializationInfo;
    }
    updateParameter(pathRequest, dataSources) {
        super.updateParameter(pathRequest, dataSources);
        this.dataMember(null);
    }
    refresh() {
        if (!this.subreportParameters().some((parameter) => { return parameter === this.parameterName(); })) {
            this.parameterName('');
        }
    }
    initReportDataSource(dataSourceCallback) {
        this._dataSourceCallback(dataSourceCallback);
    }
    initSubreportParameters(parametersCallback) {
        this._parametersCallback(parametersCallback);
    }
    constructor(model, parent, serializer) {
        super(model, serializer);
        this._dataSourceCallback = external_ko_namespaceObject.observable(() => null);
        this._parametersCallback = external_ko_namespaceObject.observable(() => []);
        this._reportDataSource = external_ko_namespaceObject.computed(() => this._dataSourceCallback()());
        this.visible = external_ko_namespaceObject.observable(true);
        this.subreportParameters = external_ko_namespaceObject.computed(() => this._parametersCallback()());
        this._disposables.push(this._reportDataSource);
        this._disposables.push(this.subreportParameters);
        this.fakeBinding = this;
        const _dataSource = external_ko_namespaceObject.observable(this.dataSource());
        this._disposables.push(this.dataSource = external_ko_namespaceObject.pureComputed({
            read: () => {
                return _dataSource() || this._reportDataSource();
            },
            write: (newValue) => {
                _dataSource(newValue);
            }
        }));
        this._disposables.push(this.dataSource.subscribe((newValue) => {
            if (!newValue) {
                this.dataMember(null);
            }
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/action.js



const drillThroughReportSourceUrl = { propertyName: 'reportSourceUrl', modelName: '@ReportSourceUrl', defaultVal: '', editor: designerEditorTemplates.getEditor('reportSourceUrl'), displayName: 'Report Source Url', localizationId: 'DevExpress.XtraReports.Actions.NavigateToReport.ReportSourceUrl' };
const drillThroughReportSource = { propertyName: 'reportSource', modelName: 'ReportSource', displayName: 'Report Source', localizationId: 'DevExpress.XtraReports.Actions.NavigateToReport.ReportSource' };
const drillThroughParameterBindings = { propertyName: 'parameterBindings', modelName: 'ParameterBindings', displayName: 'Parameter Bindings', localizationId: 'DevExpress.XtraReports.Actions.NavigateToReport.ParameterBindings', array: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'), addHandler: ParameterBinding.createNew, template: '#dxrd-commonCollectionItem' };
const ActionType = {
    None: 'None',
    NavigateToReport: 'NavigateToReport',
};
const actionKind = {
    propertyName: 'name', modelName: '@Name',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Action', localizationId: 'DevExpress.XtraReports.UI.XRControl.Action',
    valuesArray: [
        { value: ActionType.None, displayValue: 'None', localizationId: 'DevExpress.XtraReports.Actions.None' },
        { value: 'NavigateToReport', displayValue: 'Navigate to Report', localizationId: 'DevExpress.XtraReports.Actions.NavigateToReport' }
    ],
    defaultVal: ActionType.None,
};
const actionSerializationInfo = [actionKind, drillThroughReportSource, drillThroughReportSourceUrl, drillThroughParameterBindings];
const action = { propertyName: 'action', modelName: 'Action', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), displayName: 'Action', localizationId: 'DevExpress.XtraReports.UI.XRControl.Action' };

;// ./node_modules/devexpress-reporting/designer/controls/properties/action.js








class ActionTypeBase extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(control, key, addSubcsription) {
        super();
        this.key = external_ko_namespaceObject.observable('');
        this.getInfo = () => [actionKind];
        this.key(key);
        this.name = external_ko_namespaceObject.observable(ActionType.None);
        this._control = control;
        addSubcsription && this.subscribeToObjectType();
    }
    updateActionType(objectType) {
        if (objectType === ActionType.None) {
            this._control.action(new ActionTypeBase(this._control, this.key(), true));
        }
        else if (objectType === ActionType.NavigateToReport) {
            this._control.action(new NavigateToReportAction(this.key(), {}, this._control, undefined, (report, serializer) => this._control.root.createReportViewModel(report, serializer)));
        }
    }
    subscribeToObjectType() {
        this._disposables.push(this.name.subscribe(newValue => this.updateActionType(newValue)));
    }
    isPropertyVisible(name) {
        return true;
    }
}
class NavigateToReportAction extends ActionTypeBase {
    constructor(key, model, control, serializer, drillThroughReportViewModel) {
        super(control, key, false);
        this.subreportParameters = external_ko_namespaceObject.observableArray();
        this.getInfo = () => {
            const reportSourceInfo = actionSerializationInfo.find(info => info.propertyName === 'reportSource');
            if (reportSourceInfo) {
                reportSourceInfo.from = (value, serializer) => {
                    return value ? this.drillThroughReportViewModel && this.drillThroughReportViewModel(value, serializer) : null;
                };
                reportSourceInfo.toJsonObject = (value, serializer, refs) => {
                    value.parameterHelper?.clearLayoutItems();
                    return serializer.serialize(value, serializer, refs);
                };
            }
            return actionSerializationInfo;
        };
        this.drillThroughReportViewModel = drillThroughReportViewModel;
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        if (!this.name)
            this.name = external_ko_namespaceObject.observable(ActionType.NavigateToReport);
        else
            this.name(ActionType.NavigateToReport);
        this.subscribeToObjectType();
        if (!this.parameterBindings)
            this.parameterBindings = external_ko_namespaceObject.observableArray([]);
        if (!this.reportSourceUrl)
            this.reportSourceUrl = external_ko_namespaceObject.observable();
        if (model && model.ParameterBindings)
            this.parameterBindings = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.ParameterBindings, (item) => {
                const binding = new ParameterBinding(item, this, serializer);
                return binding;
            });
        this._disposables.push(this.reportSourceUrl.subscribe((newVal) => {
            this.reportSource && this.reportSource.dispose && this.reportSource.dispose();
            this.updateParameters();
        }));
        this.parameterBindings = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.ParameterBindings, (item) => {
            const binding = new ParameterBinding(item, this, serializer);
            this._initParameter(binding);
            return binding;
        });
        this.updateParameters();
        this._disposables.push(this.parameterBindings.subscribe((changes) => {
            for (let index = 0; index < changes.length; index++) {
                if (changes[index].status === 'added') {
                    this._initParameter(changes[index].value);
                }
            }
        }, null, 'arrayChange'));
    }
    getParameters(reportSourceUrl) {
        if (reportStorageWebIsRegister()) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getData', JSON.stringify({
                reportUrl: reportSourceUrl
            }));
        }
        else {
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().reject().promise();
        }
    }
    _assignParameters(parameters) {
        this.subreportParameters(collectAvailableParameters(parameters).map(x => x.name));
        this.refreshParameterBindings();
    }
    _initParameter(parameter) {
        parameter.initSubreportParameters(() => this.subreportParameters());
    }
    refreshParameterBindings() {
        this.parameterBindings().forEach((x) => x.refresh());
    }
    updateParameters() {
        if (this.reportSourceUrl()) {
            this.getParameters(this.reportSourceUrl()).done(result => {
                const reportJSONModel = JSON.parse(result.reportLayout);
                const parametersModel = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(reportJSONModel?.XtraReportsLayoutSerializer?.Parameters, (item) => item['@Name']);
                this.subreportParameters(parametersModel());
                this.refreshParameterBindings();
            });
        }
        else if (this.reportSource && this.reportSource.parameters) {
            this._assignParameters(this.reportSource.parameters());
        }
    }
    isPropertyVisible(name) {
        if (this.name() !== ActionType.NavigateToReport && name !== 'name')
            return false;
        return true;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/properties/components.js



class ComponentsModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    getInfo() {
        return [metadata_name];
    }
    constructor(model, renameComponentStrategy) {
        super();
        this.renameComponentStrategy = renameComponentStrategy;
        this.className = () => {
            return 'component';
        };
        this.controlType = 'XRComponent';
        const _name = external_ko_namespaceObject.observable(model.name);
        this.data = model.data;
        this._disposables.push(this.name = external_ko_namespaceObject.pureComputed({
            read: () => { return _name(); },
            write: (value) => {
                if (value !== _name() && renameComponentStrategy.validateName(value) && renameComponentStrategy.validateUnique(value, _name())) {
                    if (renameComponentStrategy.tryRename(value, this.data)) {
                        _name(value);
                    }
                }
            }
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/reportFieldListEditor.js



class ReportFieldListEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this.treeListController = new ReportTreeListController();
        this._disposables.push(this.treeListController.selectedItemData.subscribe(newValue => {
            const model = this._get('_model');
            if (model['setDataMemberInfo'])
                model['setDataMemberInfo'](newValue);
        }));
    }
}
class ReportTreeListController extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.TreeListController {
    constructor() {
        super(...arguments);
        this.selectedItemData = external_ko_namespaceObject.observable();
    }
    select(value) {
        super.select(value);
        this.selectedItemData(this.selectedItem && this.selectedItem.data);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/controlParameter.js




const controlParameterInfos = dataBindingBaseSerializationInfo.concat([
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_name, { propertyName: 'parameterName' }),
    { propertyName: 'fakeBinding', displayName: 'Binding', localizationId: 'DevExpress.XtraReports.Design.DataBinding.Binding', link: true, editor: { header: 'dxrd-dataBinding', editorType: ReportFieldListEditor } }
]);

;// ./node_modules/devexpress-reporting/designer/controls/properties/controlParameter.js




class ControlParameter extends DataBindingBase {
    static createNew() {
        return new ControlParameter({}, null);
    }
    getInfo() {
        return controlParameterInfos;
    }
    isEmpty() {
        return false;
    }
    constructor(model, serializer, _dataSourceHelper, _dataBindingsProvider) {
        super(model, serializer);
        this._dataSourceHelper = _dataSourceHelper;
        this._dataBindingsProvider = _dataBindingsProvider;
        this.visible = external_ko_namespaceObject.observable(true);
        this.dataMemberInfo = external_ko_namespaceObject.observable();
        this.fakeBinding = this;
    }
    setDataMemberInfo(dataMemberInfo) {
        this.dataMemberInfo(dataMemberInfo);
    }
    get dataType() {
        return this.dataMemberInfo()?.dataType;
    }
    get specifics() {
        if (this.parameter())
            return this.parameter().specifics;
        return this.dataMemberInfo()?.specifics;
    }
    get name() {
        return this.parameterName();
    }
    generateValue(undoEngine, dataSourceHelper, dataSources, dataBindingsProvider) {
        const value = super.generateValue(undoEngine, dataSourceHelper, dataSources);
        this.initDataMemberInfo(dataSourceHelper, dataBindingsProvider);
        return value;
    }
    initDataMemberInfo(dataSourceHelper, dataBindingsProvider) {
        dataSourceHelper = dataSourceHelper || this._dataSourceHelper();
        dataBindingsProvider = dataBindingsProvider || this._dataBindingsProvider();
        if (dataSourceHelper && dataBindingsProvider && this.dataSource() && !this.dataMemberInfo()) {
            const dataSourcePath = dataSourceHelper.getDataSourcePath(this.dataSource());
            const dataMemberParts = (this.dataMember() || '').split('.');
            const valueMember = dataMemberParts.pop();
            const dataMember = dataMemberParts.join('.');
            const request = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(dataSourcePath + (dataMember ? '.' + dataMember : ''));
            dataBindingsProvider.getItems(request).done(result => {
                this.dataMemberInfo(result.filter(x => x.name === valueMember)[0]);
            });
        }
    }
}

;// external "DevExpress.Reporting.Editing"
const external_DevExpress_Reporting_Editing_namespaceObject = DevExpress.Reporting.Editing;
;// ./node_modules/devexpress-reporting/designer/widgets/editOptionsEditor.js




class EditOptionsEditorNameEditorModel extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this.displayValue = external_ko_namespaceObject.observable('');
        const extesions = external_DevExpress_Reporting_Editing_namespaceObject.EditingFieldExtensions.instance();
        const editorOptions = modelPropertyInfo.editorOptions;
        let categoriesToFilter = [];
        if (editorOptions) {
            categoriesToFilter = editorOptions.categories || extesions.categories(editorOptions.excludeCategories);
        }
        this.itemsProvider = {
            getItems: (path) => {
                const editorSet = extesions.editors();
                const filteredEditorSet = !categoriesToFilter
                    ? editorSet
                    : editorSet.filter(e => categoriesToFilter.indexOf(e.category) !== -1);
                const editorMembers = filteredEditorSet.map(item => {
                    const mask = item.options && item.options['mask'];
                    return {
                        name: item.name,
                        displayName: item.displayName,
                        specifics: '_none_',
                        templateName: 'dxrd-editingField-editor-treelist-item',
                        title: item.displayName + (mask ? ' [' + mask + ']' : '')
                    };
                });
                return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(editorMembers).promise();
            }
        };
        const editor = extesions.editor(this.value());
        if (editor) {
            this.value(editor.name);
            this.displayValue(editor.displayName);
        }
        this.value.subscribe(newValue => {
            const editor = extesions.editor(newValue);
            if (editor) {
                this.value(editor.name);
                this.displayValue(editor.displayName);
                return;
            }
            this.displayValue('');
            this.value('');
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/editOptionsSerializationInfo.js


const editOptionsSerializationInfo = [
    { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('boolSelect') },
    { propertyName: 'id', modelName: '@ID', displayName: 'ID', localizationId: 'DevExpress.XtraReports.UI.EditOptions.ID', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'readOnly', modelName: '@ReadOnly', displayName: 'Read Only', localizationId: 'DevExpress.XtraReports.UI.EditOptions.ReadOnly', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('boolSelect') }
];

;// ./node_modules/devexpress-reporting/designer/controls/properties/editOptions.js





class EditOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model || {});
    }
    getInfo() {
        return editOptionsSerializationInfo;
    }
    isEmpty() {
        return !this.enabled();
    }
    isPropertyDisabled(name) {
        return name !== 'enabled' && !this.enabled();
    }
}
class ContainerEditOptions extends EditOptions {
    constructor(model, parent, serializer) {
        super(model || {}, serializer);
        this.parent = parent;
    }
    isPropertyDisabled(name) {
        if (name == 'enabled') {
            return this.parent.controls().length > 0;
        }
        else
            return super.isPropertyDisabled(name);
    }
}
class CheckEditOptions extends EditOptions {
    constructor(model, serializer) {
        super(model || {}, serializer);
    }
    getInfo() {
        return super.getInfo().concat([
            { propertyName: 'groupId', modelName: '@GroupID', displayName: 'Group ID', localizationId: 'DevExpress.XtraReports.UI.CheckEditOptions.GroupID', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }
        ]);
    }
}
class ImageEditOptions extends EditOptions {
    constructor(model, serializer) {
        super(model || {}, serializer);
    }
    getInfo() {
        return super.getInfo().concat([
            {
                propertyName: 'editorName', modelName: '@EditorName', displayName: 'Editor Name', localizationId: 'DevExpress.XtraReports.UI.ImageEditOptions.EditorName', defaultVal: '',
                editor: { header: 'dxrd-editOptionsEditorName', editorType: EditOptionsEditorNameEditorModel },
                editorOptions: { acceptCustomValue: true, categories: [external_DevExpress_Reporting_Editing_namespaceObject.Categories.Image()] }
            }
        ]);
    }
}
class TextEditOptions extends EditOptions {
    constructor(model, serializer) {
        super(model || {}, serializer);
    }
    getInfo() {
        const categories = external_DevExpress_Reporting_Editing_namespaceObject.Categories;
        return super.getInfo().concat([
            {
                propertyName: 'editorName', modelName: '@EditorName', displayName: 'Editor Name', localizationId: 'DevExpress.XtraReports.UI.TextEditOptions.EditorName', defaultVal: '',
                editor: { header: 'dxrd-editOptionsEditorName', editorType: EditOptionsEditorNameEditorModel },
                editorOptions: { acceptCustomValue: true, excludeCategories: [categories.Image()] }
            }
        ]);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/properties/extension.js

class ExtensionModel {
    getInfo() {
        return extensionSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
    }
}
const extensionSerializationInfo = [
    { propertyName: 'key', modelName: '@Key' },
    { propertyName: 'value', modelName: '@Value' }
];

;// ./node_modules/devexpress-reporting/designer/internal/_addVariablesToExpressionEditor.js

function addVariablesToExpressionEditor(categories, customizeItems = (items) => items) {
    const items = customizeItems([
        { text: 'DataSource.CurrentRowIndex', class: 'dx-expression-variables-datasource', val: '[DataSource.CurrentRowIndex]', descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_CurrentRowIndex_Description' },
        { text: 'DataSource.RowCount', class: 'dx-expression-variables-datasource', val: '[DataSource.RowCount]', descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_RowCount_Description' },
        { text: 'DataSource.CurrentRowHierarchyLevel', class: 'dx-expression-variables-datasource', val: '[DataSource.CurrentRowHierarchyLevel]', descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_CurrentRowHierarchyLevel_Description' },
        { text: 'DataSource.IsFirstRow', class: 'dx-expression-variables-datasource', val: '[DataSource.IsFirstRow]', descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_IsFirstRow_Description' },
        { text: 'DataSource.IsLastRow', class: 'dx-expression-variables-datasource', val: '[DataSource.IsLastRow]', descriptionStringId: 'ReportStringId.ExpressionEditor_ItemInfo_Variables_IsLastRow_Description' },
        { text: 'Arguments.GroupRowIndex', class: 'dx-expression-variables-arguments', val: '[Arguments.GroupRowIndex]', descriptionStringId: '' },
        { text: 'Arguments.GroupColumnIndex', class: 'dx-expression-variables-arguments', val: '[Arguments.GroupColumnIndex]', descriptionStringId: '' }
    ]);
    categories.push((0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.createExpressionEditorCollectionToolOptions)(items, 'Variables', 'ReportStringId.ExpressionEditor_ItemInfo_Variables', true));
}

;// ./node_modules/devexpress-reporting/designer/widgets/customFunctions.js

const reportFunctionDisplay = ((addins) => (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.combineFunctionDisplay)(addins))([{
        display: 'String',
        items: {
            'NewLine': [{ paramCount: 0, text: 'NewLine()', descriptionStringId: 'ExpressionEditorStringId.Function_NewLine' }],
            'FormatString': [{ paramCount: 1, text: "FormatString('')", descriptionStringId: 'ExpressionEditorStringId.Function_FormatString' }]
        },
    }, {
        display: 'Reporting',
        localizationId: 'ReportStringId.ExpressionEditor_ItemInfo_FunctionReporting',
        items: {
            'Rgb': [{ paramCount: 3, text: 'Rgb(, , )', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_Rgb' }],
            'Argb': [{ paramCount: 4, text: 'Argb(, , , )', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_Argb' }],
            'GetDisplayText': [{ paramCount: 1, text: 'GetDisplayText(?parameter)', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_GetDisplayText' }],
            'ConvertDataToEPC': [{ paramCount: 8, text: 'ConvertDataToEPC()', displayName: 'ConvertDataToEPC()', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_EPC' }],
            'CurrentRowIndexInGroup': [{ paramCount: 0, text: 'CurrentRowIndexInGroup()', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_CurrentRowIndexInGroup' }],
            'GroupIndex': [{ paramCount: 1, text: 'GroupIndex()', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_GroupIndex' }],
            'NextRowColumnValue': [{ paramCount: 1, text: 'NextRowColumnValue()', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_NextRowColumnValue' }],
            'PrevRowColumnValue': [{ paramCount: 1, text: 'PrevRowColumnValue()', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_PrevRowColumnValue' }]
        }
    }, {
        display: 'Aggregate',
        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Aggregate',
        items: {
            Join: [{ paramCount: 1, text: '[].Join()', displayName: 'Join()', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_Join' }],
        },
    }
]);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/formattingrules.js





const formattingRuleLinkSerializationsInfo = [
    { propertyName: 'value', modelName: '@Value', link: true }
];
const defaultBooleanVisible = {
    propertyName: 'visible', modelName: '@Visible', displayName: 'Visible', localizationId: 'DevExpress.XtraReports.UI.Formatting.Visible', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray
};
const borderWidthSerializable = { propertyName: 'borderWidthSerializable', modelName: '@BorderWidthSerializable', displayName: 'Border Width', localizationId: 'DevExpress.XtraReports.UI.Formatting.BorderWidthSerializable', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, sides = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ displayName: 'Borders', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('borders'), localizationId: 'DevExpress.XtraReports.UI.XRControl.Borders' }, external_DevExpress_Reporting_Metadata_namespaceObject.previewSides);
const formattingSerializationsInfo = [metadata_backColor, sides, metadata_borderColor, borderDashStyle, borderWidthSerializable,
    foreColor, metadata_font, metadata_textAlignment, defaultBooleanVisible
].concat(paddingGroup);
const conditionObj = { propertyName: 'conditionObj', displayName: 'Condition', localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Condition', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('expressionEditor') };
const formatting = { propertyName: 'formatting', modelName: 'Formatting', displayName: 'Formatting', localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Formatting', info: formattingSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const formattingRuleSerializationsInfo = [
    { propertyName: 'name', modelName: '@Name', displayName: 'Name', localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Name', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), validationRules: external_DevExpress_Analytics_Internal_namespaceObject.nameValidationRules },
    { propertyName: 'condition', modelName: '@Condition', displayName: 'Condition', localizationId: 'DevExpress.XtraReports.UI.FormattingRule.Condition', defaultVal: '' },
    conditionObj,
    dataSource, metadata_dataMember,
    formatting
];

;// ./node_modules/devexpress-reporting/designer/controls/properties/formattingrules.js






class FormattingRule extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    static createNew(report) {
        return new FormattingRule({}, report);
    }
    getInfo() {
        return formattingRuleSerializationsInfo;
    }
    constructor(model, parent, serializer) {
        super();
        this.className = () => {
            return 'formattingrule';
        };
        this.controlType = 'XRFormattingRule';
        this.selected = external_ko_namespaceObject.observable(false);
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this.parent = parent || null;
        const path = external_ko_namespaceObject.pureComputed(() => {
            const dsPath = this.getPath('');
            if (!!dsPath) {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(dsPath, this.dataMember() || parent.dataMember());
            }
            else {
                return dsPath;
            }
        });
        this._disposables.push(path);
        this['conditionObj'] = {
            value: this.condition,
            path,
            functions: reportFunctionDisplay,
            customizeCategories: (_, categories, __) => { addVariablesToExpressionEditor(categories); }
        };
    }
    getPath(propertyName) {
        return this.parent && this.parent.dsHelperProvider() && this.parent.dsHelperProvider().getDataSourcePath(this['dataSource']() || this.parent.dataSource());
    }
    displayType() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Formatting Rule', 'DevExpress.XtraReports.UI.FormattingRule');
    }
}
class FormattingRuleLink {
    static createNew(rule) {
        const link = new FormattingRuleLink({});
        link.value = external_ko_namespaceObject.observable(rule);
        return link;
    }
    getInfo() {
        return formattingRuleLinkSerializationsInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
    }
}

;// external "DevExpress.Reporting.Viewer.Internal"
const external_DevExpress_Reporting_Viewer_Internal_namespaceObject = DevExpress.Reporting.Viewer.Internal;
;// external "DevExpress.Reporting"
const external_DevExpress_Reporting_namespaceObject = DevExpress.Reporting;
;// ./node_modules/devexpress-reporting/designer/controls/properties/glyphsInfo.js





function getDefaultCheckSize(checkState = external_DevExpress_Reporting_Viewer_Editing_namespaceObject.GlyphStyle.StandardBox1) {
    if (checkState === external_DevExpress_Reporting_Viewer_Editing_namespaceObject.GlyphStyle.StandardBox1)
        return new external_DevExpress_Analytics_Elements_namespaceObject.Size(13, 13);
    else
        return new external_DevExpress_Analytics_Elements_namespaceObject.Size(16, 16);
}
function _getCustomGlyphsInfo(type) {
    return {
        propertyName: type,
        modelName: '@' + type,
        editor: { header: 'dxrd-image-loadfile', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.Editor },
        displayName: type,
        localizationId: 'DevExpress.XtraReports.UI.CheckBoxGlyphs.' + type,
        from: val => external_ko_namespaceObject.observable(external_DevExpress_Reporting_namespaceObject.ImageSource.parse(val)),
        toJsonObject: external_DevExpress_Reporting_namespaceObject.ImageSource.toString,
        defaultVal: null
    };
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/glyphOptions.js







const glyphAlignment = {
    propertyName: 'alignment',
    modelName: '@Alignment', displayName: 'Alignment', localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.GlyphAlignment',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    defaultVal: 'Near', valuesArray: [
        { value: 'Near', displayValue: 'Near', localizationId: 'DevExpress.Utils.HorzAlignment.Near' },
        { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.Utils.HorzAlignment.Center' },
        { value: 'Far', displayValue: 'Far', localizationId: 'DevExpress.Utils.HorzAlignment.Far' }
    ]
};
const _checkStates = (0,external_DevExpress_Reporting_Viewer_Internal_namespaceObject.getEnumValues)(external_DevExpress_Reporting_Viewer_Editing_namespaceObject.CheckState);
const customGlyphChecked = _getCustomGlyphsInfo(_checkStates[external_DevExpress_Reporting_Viewer_Editing_namespaceObject.CheckState.Checked]);
const customGlyphUnChecked = _getCustomGlyphsInfo(_checkStates[external_DevExpress_Reporting_Viewer_Editing_namespaceObject.CheckState.Unchecked]);
const customGlyphIndeterminate = _getCustomGlyphsInfo(_checkStates[external_DevExpress_Reporting_Viewer_Editing_namespaceObject.CheckState.Indeterminate]);
const customGlyphsSerializationInfo = [customGlyphChecked, customGlyphUnChecked, customGlyphIndeterminate];
const customGlyphs = { propertyName: 'customGlyphs', modelName: 'CustomGlyphs', info: customGlyphsSerializationInfo, displayName: 'Custom Glyphs', localizationId: 'DevExpress.XtraReports.UI.CheckBoxGlyphOptions.CustomGlyphs', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const style = {
    propertyName: 'style',
    modelName: '@Style', displayName: 'Glyph Style', localizationId: 'DevExpress.XtraReports.UI.CheckBoxGlyphOptions.Style',
    editor: (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), { header: 'dxrd-checkbox-style-combobox' }),
    defaultVal: 'StandardBox1', valuesArray: (0,external_DevExpress_Reporting_Viewer_Internal_namespaceObject.getEnumValues)(external_DevExpress_Reporting_Viewer_Editing_namespaceObject.GlyphStyle).map(item => ({
        value: item,
        displayValue: item,
        localizationId: 'DevExpress.XtraPrinting.GlyphStyle.' + item,
        templateBinding: (templateName) => ({ name: templateName, if: external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.getExistingTemplate(templateName) })
    }))
};
const glyphOptions_size = { propertyName: 'size', modelName: '@Size', from: external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString, defaultVal: getDefaultCheckSize().toString(), displayName: 'Size', localizationId: 'DevExpress.XtraReports.UI.CheckBoxGlyphOptions.Size', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const glyphOptionsSerializationInfo = [customGlyphs, glyphAlignment, glyphOptions_size, style];

;// ./node_modules/devexpress-reporting/designer/controls/properties/glyphOptions.js





class GlyphOptions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(model, serializer) {
        super();
        this.getInfo = external_ko_namespaceObject.observable(glyphOptionsSerializationInfo);
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model || {});
        let _currentCheckState = external_DevExpress_Reporting_Viewer_Editing_namespaceObject.GlyphStyle[this.style()];
        this._disposables.push(this.style.subscribe((newStyle) => {
            if (newStyle) {
                const oldDefSize = getDefaultCheckSize(_currentCheckState);
                const newDefSize = getDefaultCheckSize(external_DevExpress_Reporting_Viewer_Editing_namespaceObject.GlyphStyle[newStyle]);
                _currentCheckState = external_DevExpress_Reporting_Viewer_Editing_namespaceObject.GlyphStyle[newStyle];
                if (oldDefSize.height() === this.size.height()) {
                    this.size.height(newDefSize.height());
                }
                if (oldDefSize.width() === this.size.width()) {
                    this.size.width(newDefSize.width());
                }
            }
        }));
    }
}
GlyphOptions.unitProperties = ['size'];


;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/sortingOptions.js


const sortingFieldName = { propertyName: 'fieldName', modelName: '@FieldName', displayName: 'Field Name', localizationId: 'DevExpress.XtraReports.UI.SortingOptions.FieldName', defaultVal: '', editor: designerEditorTemplates.getEditor('fieldsCombobox') }, targetBand = { propertyName: 'targetBand', modelName: '@TargetBand', link: true, displayName: 'Target Band', localizationId: 'DevExpress.XtraReports.UI.SortingOptions.TargetBand', editor: designerEditorTemplates.getEditor('sortingBand') };
const sortingOptionsSerializationsInfo = [targetBand, sortingFieldName];
const interactiveSorting = { propertyName: 'interactiveSorting', modelName: 'InteractiveSorting', displayName: 'Interactive Sorting', localizationId: 'DevExpress.XtraReports.UI.XRLabel.InteractiveSorting', info: sortingOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };

;// ./node_modules/devexpress-reporting/designer/controls/properties/sortingOptions.js




class SortingOptions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _getFieldNames(targetBand) {
        const fieldArray = targetBand && (targetBand['sortFields'] || targetBand['groupFields']);
        return fieldArray ? fieldArray().map(item => item.fieldName()).filter(name => !!name) : [];
    }
    getInfo() {
        return this._info;
    }
    isPropertyDisabled(name) {
        return name == 'fieldName' && !this.targetBand();
    }
    resetValue() {
        this.targetBand(null);
        this.fieldName('');
    }
    constructor(model, report, serializer) {
        super();
        this._info = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], sortingOptionsSerializationsInfo);
        this._fieldNameInfo = this._info.filter((info) => { return info.propertyName == 'fieldName'; })[0];
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model || {});
        Object.defineProperty(this._fieldNameInfo, 'valuesArray', {
            get: () => {
                let items = [];
                const currentBand = this.targetBand && this.targetBand();
                if (currentBand) {
                    items = this._getFieldNames(currentBand).map(fieldName => { return { value: fieldName, displayValue: fieldName }; });
                }
                return items;
            }
        });
        const _fieldName = this.fieldName;
        this._disposables.push(this.fieldName = external_ko_namespaceObject.computed({
            read: () => {
                const value = _fieldName();
                return this._getFieldNames(this.targetBand()).indexOf(value) === -1 ? '' : value;
            },
            write: (newValue) => {
                _fieldName(newValue);
            }
        }));
    }
    getPath(propertyName) {
        return this.targetBand() && this.targetBand().getPath('groupFields') || '';
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/style.js





const _backColor = { propertyName: '_backColor', modelName: '@BackColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
const _foreColor = { propertyName: '_foreColor', modelName: '@ForeColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
const _borderColor = { propertyName: '_borderColor', modelName: '@BorderColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
const styleSerializationInfo = [{ ...metadata_name }].concat((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], [
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, metadata_font, { localizable: false }), metadata_textAlignment,
    _foreColor,
    _backColor,
    _borderColor,
    { propertyName: 'backColor', displayName: 'Background Color', localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.BackColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') },
    { propertyName: 'foreColor', displayName: 'Foreground Color', localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.ForeColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') },
    { propertyName: 'borderColor', displayName: 'Border Color', localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.BorderColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') },
    { propertyName: 'borders', modelName: '@Sides', displayName: 'Borders', localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.Borders', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('borders') },
    { propertyName: 'borderWidth', modelName: '@BorderWidthSerializable', displayName: 'Border Width', localizationId: 'DevExpress.XtraReports.UI.XRControlStyle.BorderWidth', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }
])).concat([borderDashStyle], paddingGroup);
styleSerializationInfo.forEach((item) => { delete item.defaultVal; });
const styleName = { propertyName: 'styleName', modelName: '@StyleName', editor: designerEditorTemplates.getEditor('style'), displayName: 'Style', localizationId: 'DevExpress.XtraReports.UI.ConditionFormatting.Style', defaultVal: null };
const evenStyleName = { propertyName: 'evenStyleName', modelName: '@EvenStyleName', editor: designerEditorTemplates.getEditor('style'), displayName: 'Even Style', localizationId: 'DevExpress.XtraReports.UI.XRControl.XRControlStyles.EvenStyle', defaultVal: null };
const oddStyleName = { propertyName: 'oddStyleName', modelName: '@OddStyleName', editor: designerEditorTemplates.getEditor('style'), displayName: 'Odd Style', localizationId: 'DevExpress.XtraReports.UI.XRControl.XRControlStyles.OddStyle', defaultVal: null };
const stylePriority = { propertyName: 'stylePriority', modelName: 'StylePriority', info: stylePrioritySerializationInfo };
const cellStyleName = { propertyName: 'cellStyleName', modelName: '@CellStyleName', displayName: 'Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Cell', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, customTotalCellStyleName = { propertyName: 'customTotalCellStyleName', modelName: '@CustomTotalCellStyleName', displayName: 'Custom Total Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.CustomTotalCell', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, fieldHeaderStyleName = { propertyName: 'fieldHeaderStyleName', modelName: '@FieldHeaderStyleName', displayName: 'Field Header', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldHeader', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, fieldValueGrandTotalStyleName = { propertyName: 'fieldValueGrandTotalStyleName', modelName: '@FieldValueGrandTotalStyleName', displayName: 'Field Value Grand Total', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearancesBase.FieldValueGrandTotal', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, fieldValueStyleName = { propertyName: 'fieldValueStyleName', modelName: '@FieldValueStyleName', displayName: 'Field Value', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValue', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, fieldValueTotalStyleName = { propertyName: 'fieldValueTotalStyleName', modelName: '@FieldValueTotalStyleName', displayName: 'Field Value Total', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValueTotal', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, filterSeparatorStyleName = { propertyName: 'filterSeparatorStyleName', modelName: '@FilterSeparatorStyleName', displayName: 'Filter Separator', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FilterSeparator', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, grandTotalCellStyleName = { propertyName: 'grandTotalCellStyleName', modelName: '@GrandTotalCellStyleName', displayName: 'Grand Total Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.GrandTotalCell', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, headerGroupLineStyleName = { propertyName: 'headerGroupLineStyleName', modelName: '@HeaderGroupLineStyleName', displayName: 'Header Group Line', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.HeaderGroupLine', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, linesStyleName = { propertyName: 'linesStyleName', modelName: '@LinesStyleName', displayName: 'Lines', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Lines', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, totalCellStyleName = { propertyName: 'totalCellStyleName', modelName: '@TotalCellStyleName', displayName: 'Total Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.TotalCell', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, generalStyleName = { propertyName: 'generalStyleName', modelName: '@GeneralStyleName', displayName: 'General Style', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.GeneralStyleName', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, dataAreaStyleName = { propertyName: 'dataAreaStyleName', modelName: '@DataAreaStyleName', displayName: 'Data Area Style', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.DataAreaStyleName', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, headerAreaStyleName = { propertyName: 'headerAreaStyleName', modelName: '@HeaderAreaStyleName', displayName: 'Header Area Style', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.HeaderAreaStyleName', editor: designerEditorTemplates.getEditor('style'), defaultVal: null }, totalAreaStyleName = { propertyName: 'totalAreaStyleName', modelName: '@TotalAreaStyleName', displayName: 'Total Area Style', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.TotalAreaStyleName', editor: designerEditorTemplates.getEditor('style'), defaultVal: null };
const pivotGridStyles = [cellStyleName, customTotalCellStyleName, fieldHeaderStyleName, fieldValueGrandTotalStyleName, fieldValueStyleName, fieldValueTotalStyleName, filterSeparatorStyleName,
    grandTotalCellStyleName, headerGroupLineStyleName, linesStyleName, totalCellStyleName];
const crossTabStyles = [generalStyleName, headerAreaStyleName, dataAreaStyleName, totalAreaStyleName];
const crossTabStylesDefaults = {
    generalStyleName: { '@Name': 'crossTabGeneralStyle', '@BorderStyle': 'Inset', '@Padding': defaultTextPadding, '@Font': 'Arial, 9.75pt', '@ForeColor': 'Black', '@BackColor': 'White', '@BorderColor': '255,160,160,160', '@Sides': 'All', '@StringFormat': 'Near;Near;0;None;Character;Default' },
    dataAreaStyleName: { '@Name': 'crossTabDataStyle', '@BorderStyle': 'Inset', '@StringFormat': 'Far;Center;0;None;Character;Default', '@TextAlignment': 'MiddleRight' },
    headerAreaStyleName: { '@Name': 'crossTabHeaderStyle', '@BorderStyle': 'Inset', '@BackColor': '255,240,240,240', '@StringFormat': 'Near;Center;0;None;Character;Default', '@TextAlignment': 'MiddleLeft' },
    totalAreaStyleName: { '@Name': 'crossTabTotalStyle', '@BorderStyle': 'Inset', '@StringFormat': 'Far;Center;0;None;Character;Default', '@TextAlignment': 'MiddleRight' }
};
const stylesInfo = [evenStyleName, oddStyleName, styleName].concat(pivotGridStyles, crossTabStyles);
const stylesObj = { propertyName: 'styleObj', displayName: 'Styles', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Styles' };

;// external "DevExpress.Reporting.Internal"
const external_DevExpress_Reporting_Internal_namespaceObject = DevExpress.Reporting.Internal;
;// ./node_modules/devexpress-reporting/designer/controls/utils/_paddingUtils.js



function createPaddingProperty(model, parent) {
    model.addDisposable(model.paddingObj = new external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel());
    model.paddingObj.applyFromString(model['padding']());
    const lock = new external_DevExpress_Reporting_Internal_namespaceObject.Locker().lock;
    model._disposables.push(model.padding.subscribe((newVal) => {
        lock(() => model.paddingObj.applyFromString(newVal));
    }));
    ['left', 'right', 'top', 'bottom'].forEach(name => {
        model.addDisposable(model.paddingObj.subscribeProperty(name, (newVal) => {
            const root = parent?.root;
            if (root?.isModelReady && root.isModelReady() || !(root?.isModelReady))
                lock(() => model.padding(model.paddingObj.toString()));
        }));
    });
    if (parent) {
        model.dpi = parent.dpi;
        model.addDisposable(model.paddingObj.createComputedProperty('dpi', () => model.dpi && model.dpi(), [(0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.subscribableProperty)(model, ['dpi'])]));
        model.addDisposable(model.paddingObj.subscribeProperty('dpi', newVal => lock(() => {
            const padding = model._padding || model.padding;
            if (padding())
                padding(model.paddingObj.toString());
        })));
    }
    model.paddingObj.resetValue = () => {
        lock(() => {
            ['left', 'right', 'top', 'bottom'].forEach(name => model.paddingObj[name](null));
            model.padding(model.paddingObj.toString());
            model.paddingObj.applyFromString(model.padding());
        });
    };
}

;// ./node_modules/devexpress-reporting/designer/controls/properties/style.js




class StyleModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    getInfo() {
        return styleSerializationInfo;
    }
    constructor(model, parent, serializer) {
        super();
        this.parent = parent;
        this.className = () => {
            return 'stylemodel';
        };
        this.controlType = 'XRStyleModel';
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        ['backColor', 'foreColor', 'borderColor'].forEach((propertyName) => {
            this._disposables.push(this[propertyName] = external_ko_namespaceObject.pureComputed({
                read: () => { return this['_' + propertyName] && this['_' + propertyName](); },
                write: (val) => { this['_' + propertyName](val); }
            }));
        });
        createPaddingProperty(this, parent);
    }
    isPropertyModified(name) {
        const needName = this['_' + name] ? '_' + name : name;
        const property = external_ko_namespaceObject.unwrap(this[needName]);
        if (property instanceof Object) {
            return !property.isEmpty();
        }
        else {
            return !!property;
        }
    }
    displayType() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Control Style', 'DevExpress.XtraReports.UI.XRControlStyle');
    }
}
StyleModel.unitProperties = ['paddingObj'];


;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/frameOptions.js


const defaultFrameOptionsSerializationInfo = { propertyName: 'name', modelName: '@Name' };
const frameOptionsCorner = [
    defaultFrameOptionsSerializationInfo,
    { propertyName: 'frameColor', modelName: '@FrameColor', displayName: 'Frame Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'black', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.FrameColor' },
    { propertyName: 'frameWidth', modelName: '@FrameWidth', displayName: 'Frame Width', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.FrameWidth' },
    { propertyName: 'padding', modelName: '@Padding', defaultVal: '5,5,5,5,96' },
    { propertyName: 'paddingObj', displayName: 'Padding', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.Padding' },
    { propertyName: 'text', modelName: '@Text', defaultVal: '', displayName: 'Text', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.Text' },
    { propertyName: 'textAlignment', modelName: '@TextAlignment', displayName: 'Text Alignment', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.TextAlignment', valuesArray: [
            { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameTextAlignment.Center' },
            { value: 'Baseline', displayValue: 'Baseline', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameTextAlignment.Baseline' },
        ], defaultVal: 'Center' },
    { propertyName: 'textColor', modelName: '@TextColor', displayName: 'Text Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), defaultVal: 'black', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.TextColor' },
    { propertyName: 'textPosition', modelName: '@TextPosition', displayName: 'Text Position', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.TextPosition', valuesArray: [
            { value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameTextPosition.Top' },
            { value: 'Bottom', displayValue: 'Bottom', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameTextPosition.Bottom' },
            { value: 'Left', displayValue: 'Left', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameTextPosition.Left' },
            { value: 'Right', displayValue: 'Right', localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameTextPosition.Right' },
        ], defaultVal: 'Bottom' },
];
const frameOptionsRectangle = [
    { propertyName: 'cornerRadius', modelName: '@CornerRadius', displayName: 'Corner Radius', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 2, localizationId: 'DevExpress.XtraPrinting.BarCode.QRFrameOptions.CornerRadius' }
].concat(frameOptionsCorner);
const frameOptionsTypes = [
    { value: 'Corner', displayValue: 'Corner', localizationId: 'DevExpress.XtraPrinting.BarCode.CornerQRFrameOptions' },
    { value: 'Rectangle', displayValue: 'Rectangle', localizationId: 'DevExpress.XtraPrinting.BarCode.RectangleQRFrameOptions' },
];
const FrameOptionsTypesEPC = frameOptionsTypes.concat([
    { value: 'PaymentServicesAustria', displayValue: 'Payment Services Austria Frame', localizationId: 'DevExpress.XtraPrinting.BarCode.PaymentServicesAustriaQRFrameOptions' },
]);
const frameOptionsMap = {
    'Rectangle': frameOptionsRectangle,
    'Corner': frameOptionsCorner,
    'PaymentServicesAustria': [defaultFrameOptionsSerializationInfo]
};

;// ./node_modules/devexpress-reporting/designer/controls/properties/symbology.js




class FrameOptionsModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, serializer, info, barCode) {
        super(model, serializer, info);
        if (this.padding) {
            createPaddingProperty(this, barCode);
        }
    }
}
class BarCodeSymbology extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    createFrameOptions(model, barCode, serializer = null) {
        const frameOptionsInfo = frameOptionsMap[model['@Name']] || [defaultFrameOptionsSerializationInfo];
        return new FrameOptionsModel(model, serializer, frameOptionsInfo, barCode);
    }
    constructor(model, serializer, info, barCode) {
        super(model, serializer, info);
        if (this.frameOptions) {
            this.frameOptions(this.createFrameOptions(this.frameOptions() || {}, barCode, serializer));
            this.frameOptionsFake = {
                type: external_ko_namespaceObject.pureComputed({
                    read: () => {
                        return this.frameOptions()['name']();
                    },
                    write: (val) => {
                        this.frameOptions && this.frameOptions()?.dispose();
                        this.frameOptions(this.createFrameOptions({ '@Name': val }, barCode, serializer));
                    }
                }),
                content: this.frameOptions,
                showClearButton: true
            };
            this._disposables.push(this.frameOptionsFake.type);
        }
    }
    isPropertyDisabled(propertyName) {
        if (this.name() === 'DataBar')
            return propertyName == 'fNC1Substitute' && this['type']().indexOf('Expanded') === -1;
        return false;
    }
    dispose() {
        super.dispose();
        this.frameOptions && this.frameOptions()?.dispose();
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/dataBinding.js



const dataBindings = (dataBindingsArray) => {
    return {
        propertyName: 'dataBindings',
        modelName: 'DataBindings',
        array: true,
        info: dataBindingSerializationInfo,
        displayName: 'Data Bindings', localizationId: 'DevExpress.XtraReports.UI.XRControl.DataBindings',
        editor: designerEditorTemplates.getEditor('dataBindings'),
        allDataBindings: dataBindingsArray,
        from: DataBinding.initialize
    };
};

;// ./node_modules/devexpress-reporting/designer/controls/utils/_metaUtils.js


const createSinglePopularBindingInfos = (propertyName) => {
    return [createPopularBindingInfo({ bindingName: propertyName, propertyName: '' }, false), createPopularBindingInfo({ bindingName: propertyName, propertyName: '' })];
};
const createPopularBindingInfos = (options) => {
    const dataBindingOptions = {
        propertyName: 'popularDataBinding' + options.propertyName,
        displayName: options.propertyName,
        localizationId: options.localizationId,
        bindingName: options.propertyName,
    };
    const expressionOptions = {
        propertyName: 'popularExpression' + options.propertyName,
        displayName: options.propertyName,
        localizationId: options.localizationId,
        bindingName: options.propertyName,
    };
    return [createPopularBindingInfo(dataBindingOptions, false), createPopularBindingInfo(expressionOptions)];
};
const createPopularBindingInfo = (options, isExpression = true) => {
    const newInfo = {
        propertyName: options.propertyName || (isExpression ? 'popularExpression' : 'popularDataBinding'),
        displayName: options.displayName || (isExpression ? 'Expression' : 'Data Binding'),
        localizationId: options.localizationId || (isExpression ? 'DevExpress.XtraReports.UI.CalculatedField.Expression' : 'ReportStringId.STag_Name_DataBinding'),
        editor: isExpression ? designerEditorTemplates.getEditor('reportexpressionComplex') : designerEditorTemplates.getEditor('dataBinding'),
    };
    if (isExpression)
        newInfo['expressionName'] = options.bindingName;
    else
        newInfo['bindingName'] = options.bindingName;
    return newInfo;
};
function valuesArrayAsEnumWithLocalizationId(info, prefix) {
    return info.valuesArray.map(item => {
        const subName = item.localizationId && item.localizationId.split('.').pop() || item.value;
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, item, { localizationId: prefix + subName });
    });
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/anchoring.js

const anchorVertical = {
    propertyName: 'anchorVertical',
    modelName: '@AnchorVertical', displayName: 'Anchor Vertically', localizationId: 'DevExpress.XtraReports.UI.XRControl.AnchorVertical', defaultVal: 'None',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.VerticalAnchorStyles.None' },
        { value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.XtraReports.UI.VerticalAnchorStyles.Top' },
        { value: 'Bottom', displayValue: 'Bottom', localizationId: 'DevExpress.XtraReports.UI.VerticalAnchorStyles.Bottom' },
        { value: 'Both', displayValue: 'Both', localizationId: 'DevExpress.XtraReports.UI.VerticalAnchorStyles.Both' }
    ]
};
const anchorHorizontal = {
    propertyName: 'anchorHorizontal',
    modelName: '@AnchorHorizontal', displayName: 'Anchor Horizontally', localizationId: 'DevExpress.XtraReports.UI.XRControl.AnchorHorizontal', defaultVal: 'None',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.HorizontalAnchorStyles.None' },
        { value: 'Left', displayValue: 'Left', localizationId: 'DevExpress.XtraReports.UI.HorizontalAnchorStyles.Left' },
        { value: 'Right', displayValue: 'Right', localizationId: 'DevExpress.XtraReports.UI.HorizontalAnchorStyles.Right' },
        { value: 'Both', displayValue: 'Both', localizationId: 'DevExpress.XtraReports.UI.HorizontalAnchorStyles.Both' }
    ]
};

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/editOptions.js



const editOptions = {
    propertyName: 'editOptions',
    modelName: 'EditOptions',
    displayName: 'Edit Options', localizationId: 'DevExpress.XtraReports.UI.XRLabel.EditOptions',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'),
    from: (model, serializer) => new EditOptions(model, serializer),
    toJsonObject: (value, serializer) => serializer.serialize(value)
};
const textEditOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, editOptions, {
    propertyName: 'textEditOptions',
    from: (model, serializer) => new TextEditOptions(model, serializer)
});

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/expressionBinding.js
const expressionBindingSerializationsInfo = [
    { propertyName: 'eventName', modelName: '@EventName' },
    { propertyName: 'propertyName', modelName: '@PropertyName' },
    { propertyName: 'expression', modelName: '@Expression' },
];
const expressionBindings = { propertyName: 'expressionBindings', modelName: 'ExpressionBindings', array: true, info: expressionBindingSerializationsInfo };

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/formattingRulesLink.js


const formattingRuleLinks = {
    propertyName: 'formattingRuleLinks', modelName: 'FormattingRuleLinks', displayName: 'Formatting Rules', localizationId: 'DevExpress.XtraReports.UI.XRControl.FormattingRules', array: true,
    editor: designerEditorTemplates.getEditor('formattingRule'), addHandler: FormattingRule.createNew,
    displayPropertyName: 'name'
};

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/metadataGroups.js





const sizeLocation = [size, metadata_location];
const bordersProperties = [borders, borderWidth, borderDashStyle, metadata_borderColor];
const baseControlProperties = [metadata_name, metadata_visible, dpi, lockedInUserDesigner, metadata_tag, expressionBindings];
const commonBandProperties = [metadata_backColor, formattingRuleLinks].concat(baseControlProperties, bordersProperties, paddingGroup);
const commonControlProperties = [styleName, evenStyleName, accessibleDescription, oddStyleName, stylesObj, stylePriority, canPublish].concat(commonBandProperties);
const fontGroup = [expressionableFont, foreColor];
const bookmarkGroup = [bookmark, bookmarkParent];
const navigationGroup = [navigateUrl, target].concat(bookmarkGroup);
const datasourcePrintOptionsGroup = [dataSource, metadata_dataMember, dataAdapter, metadata_filterString, metadata_filterStringEditable, reportPrintOptions];
const processGroup = [processDuplicatesMode, processDuplicatesTarget, processNullValues];
const canGrowShrinkGroup = [canGrow, canShrink];
const labelGroup = [metadata_textAlignment, metadata_text, metadata_textArea, textFormatString, textFitMode, nullValueText,
    keepTogetherDefaultValueFalse, summary, multiline, metadata_angle, wordWrap, xlsxFormatString, rtl, interactiveSorting
].concat(commonControlProperties, fontGroup, navigationGroup, canGrowShrinkGroup, processGroup);
const unknownSerializationsInfo = [].concat(baseControlProperties, sizeLocation);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/scriptMetadata.js


const afterPrint = { propertyName: 'onAfterPrint', modelName: '@OnAfterPrint', displayName: 'After Print', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnAfterPrint', editor: designerEditorTemplates.getEditor('scriptsBox') };
const beforePrint = { propertyName: 'onBeforePrint', modelName: '@OnBeforePrint', displayName: 'Before Print', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint', editor: designerEditorTemplates.getEditor('scriptsBox') };
const sizeChanged = { propertyName: 'onSizeChanged', modelName: '@OnSizeChanged', displayName: 'Size Changed', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnSizeChanged', editor: designerEditorTemplates.getEditor('scriptsBox') };
const evaluateBinding = { propertyName: 'onEvaluateBinding', modelName: '@OnEvaluateBinding', displayName: 'Evaluate Binding', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnEvaluateBinding', editor: designerEditorTemplates.getEditor('scriptsBox') };
const truncatedControlEventsSerializationInfo = [
    afterPrint, beforePrint,
    { propertyName: 'onLocationChanged', modelName: '@OnLocationChanged', displayName: 'Location Changed', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnLocationChanged', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onParentChanged', modelName: '@OnParentChanged', displayName: 'Parent Changed', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnParentChanged', editor: designerEditorTemplates.getEditor('scriptsBox') },
];
const truncatedControlScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRPageBreak.Scripts', info: truncatedControlEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const commonEventsSerializationInfo = truncatedControlEventsSerializationInfo.concat([sizeChanged,
    { propertyName: 'onDraw', modelName: '@OnDraw', displayName: 'Draw', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnDraw', editor: designerEditorTemplates.getEditor('scriptsBox') },
    evaluateBinding,
    { propertyName: 'onPrintOnPage', modelName: '@OnPrintOnPage', displayName: 'Print on Page', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage', editor: designerEditorTemplates.getEditor('scriptsBox') }
]);
const commonScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRControl.Scripts', info: commonEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const controlEventsSerializationInfo = commonEventsSerializationInfo.concat([
    { propertyName: 'onHtmlItemCreated', modelName: '@OnHtmlItemCreated', displayName: 'Html Item Created', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnHtmlItemCreated', editor: designerEditorTemplates.getEditor('scriptsBox') }
]);
const controlScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRLine.Scripts', info: controlEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const textControlEventsSerializationInfo = controlEventsSerializationInfo.concat([
    { propertyName: 'onTextChanged', modelName: '@OnTextChanged', displayName: 'Text Changed', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnTextChanged', editor: designerEditorTemplates.getEditor('scriptsBox') }
]);
const textControlScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRLabel.Scripts', info: textControlEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const labelEventsSerializationInfo = textControlEventsSerializationInfo.concat([
    { propertyName: 'onSummaryCalculated', modelName: '@OnSummaryCalculated', displayName: 'Summary Calculated', localizationId: 'DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryCalculated', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onSummaryGetResult', modelName: '@OnSummaryGetResult', displayName: 'Summary Get Result', localizationId: 'DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryGetResult', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onSummaryReset', modelName: '@OnSummaryReset', displayName: 'Summary Reset', localizationId: 'DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryReset', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onSummaryRowChanged', modelName: '@OnSummaryRowChanged', displayName: 'Summary Row Changed', localizationId: 'DevExpress.XtraReports.UI.XRLabelScripts.OnSummaryRowChanged', editor: designerEditorTemplates.getEditor('scriptsBox') }
]);
const labelScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRLabel.Scripts', info: labelEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const specificChartEventsSerializationInfo = [
    { propertyName: 'onCustomDrawSeries', modelName: '@OnCustomDrawSeries', displayName: 'Custom Draw a Series', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawSeries', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomDrawSeriesPoint', modelName: '@OnCustomDrawSeriesPoint', displayName: 'Custom Draw a Series Point', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawSeriesPoint', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomDrawAxisLabel', modelName: '@OnCustomDrawAxisLabel', displayName: 'Custom Draw an Axis Label', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnCustomDrawAxisLabel', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomPaint', modelName: '@OnCustomPaint', displayName: 'Custom Paint', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnCustomPaint', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onBoundDataChanged', modelName: '@OnBoundDataChanged', displayName: 'Bound Data Changed', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnBoundDataChanged', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onPieSeriesPointExploded', modelName: '@OnPieSeriesPointExploded', displayName: 'Pie Series Point Exploded', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnPieSeriesPointExploded', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onAxisScaleChanged', modelName: '@OnAxisScaleChanged', displayName: 'Axis Scale Changed', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnAxisScaleChanged', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onSmallChartTextShowing', modelName: '@OnSmallChartTextShowing', displayName: 'Small Chart Text Showing', localizationId: 'DevExpress.XtraReports.UI.XRChartScripts.OnSmallChartTextShowing', editor: designerEditorTemplates.getEditor('scriptsBox') }
], chartEventsSerializationInfo = controlEventsSerializationInfo.concat(specificChartEventsSerializationInfo);
const chartScripts = { propertyName: 'scripts', modelName: 'Scripts', info: chartEventsSerializationInfo, displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRChart.Scripts', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const specificPivotEventsSerializationInfo = [
    { propertyName: 'onCustomCellDisplayText', modelName: '@OnCustomCellDisplayText', displayName: 'Custom Cell Display Text', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomCellDisplayText', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomCellValue', modelName: '@OnCustomCellValue', displayName: 'Custom Cell Value', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomCellValue', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomColumnWidth', modelName: '@OnCustomColumnWidth', displayName: 'Custom Column Width', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomColumnWidth', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomFieldSort', modelName: '@OnCustomFieldSort', displayName: 'Custom Field Sort', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomFieldSort', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomFieldValueCells', modelName: '@OnCustomFieldValueCells', displayName: 'Custom Field Value Cells', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomFieldValueCells', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomGroupInterval', modelName: '@OnCustomGroupInterval', displayName: 'Custom Group Interval', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomGroupInterval', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomRowHeight', modelName: '@OnCustomRowHeight', displayName: 'Custom Row Height', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomRowHeight', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomSummary', modelName: '@OnCustomSummary', displayName: 'Custom Summary', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomSummary', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onCustomUnboundFieldData', modelName: '@OnCustomUnboundFieldData', displayName: 'Custom Unbound Field Data', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnCustomUnboundFieldData', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onFieldValueDisplayText', modelName: '@OnFieldValueDisplayText', displayName: 'Field Value Display Text', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnFieldValueDisplayText', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onPrefilterCriteriaChanged', modelName: '@OnPrefilterCriteriaChanged', displayName: 'Prefilter Criteria Changed', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrefilterCriteriaChanged', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onPrintCell', modelName: '@OnPrintCell', displayName: 'Print Cell', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintCell', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onPrintFieldValue', modelName: '@OnPrintFieldValue', displayName: 'Print Field Value', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintFieldValue', editor: designerEditorTemplates.getEditor('scriptsBox') },
    { propertyName: 'onPrintHeader', modelName: '@OnPrintHeader', displayName: 'Print Header', localizationId: 'DevExpress.XtraReports.UI.XRPivotGridScripts.OnPrintHeader', editor: designerEditorTemplates.getEditor('scriptsBox') }
], pivotEventsSerializationInfo = truncatedControlEventsSerializationInfo.concat([sizeChanged], specificPivotEventsSerializationInfo);
const pivotScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Scripts', info: pivotEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const subreportScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.SubreportBase.Scripts', info: truncatedControlEventsSerializationInfo.concat(sizeChanged), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const pdfContentScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRPdfContent.Scripts', info: truncatedControlEventsSerializationInfo.concat(evaluateBinding), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const commonBandEventsSerializationInfo = [afterPrint, beforePrint];
const commonBandScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.Band.Scripts', info: commonBandEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const onBandLevelChanged = { propertyName: 'onBandLevelChanged', modelName: '@OnBandLevelChanged', displayName: 'Band Level Changed', localizationId: 'DevExpress.XtraReports.UI.GroupBandScripts.OnBandLevelChanged', editor: designerEditorTemplates.getEditor('scriptsBox') }, groupBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandLevelChanged]);
const groupBandScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBand.Scripts', info: groupBandEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const onSortingSummaryGetResult = { propertyName: 'onSortingSummaryGetResult', modelName: '@OnSortingSummaryGetResult', displayName: 'Sorting Summary Get Result', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryGetResult', editor: designerEditorTemplates.getEditor('scriptsBox') }, onSortingSummaryReset = { propertyName: 'onSortingSummaryReset', modelName: '@OnSortingSummaryReset', displayName: 'Sorting Summary Reset', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryReset', editor: designerEditorTemplates.getEditor('scriptsBox') }, onSortingSummaryRowChanged = { propertyName: 'onSortingSummaryRowChanged', modelName: '@OnSortingSummaryRowChanged', displayName: 'Sorting Summary RowChanged', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBandScripts.OnSortingSummaryRowChanged', editor: designerEditorTemplates.getEditor('scriptsBox') }, groupHeaderBandEventsSerializationInfo = groupBandEventsSerializationInfo.concat([onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged]);
const groupHeaderBandScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBand.Scripts', info: groupHeaderBandEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const onBandHeightChanged = { propertyName: 'onBandHeightChanged', modelName: '@OnBandHeightChanged', displayName: "Band's Height Changed", localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnBandHeightChanged', editor: designerEditorTemplates.getEditor('scriptsBox') }, onDataSourceRowChanged = { propertyName: 'onDataSourceRowChanged', modelName: '@OnDataSourceRowChanged', displayName: "Data Source's Row Changed", localizationId: 'DevExpress.XtraReports.UI.XtraReportBase.DataSource', editor: designerEditorTemplates.getEditor('scriptsBox') }, onDataSourceDemanded = { propertyName: 'onDataSourceDemanded', modelName: '@OnDataSourceDemanded', displayName: 'Data Source Demanded', localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnDataSourceDemanded', editor: designerEditorTemplates.getEditor('scriptsBox') }, detailReportBandEventsSerializationInfo = commonBandEventsSerializationInfo.concat([onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded]);
const detailReportBandScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.DetailReportBand.Scripts', info: detailReportBandEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const onFillEmptySpace = { propertyName: 'onFillEmptySpace', modelName: '@OnFillEmptySpace', displayName: 'Fill Empty Space', localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnFillEmptySpace', editor: designerEditorTemplates.getEditor('scriptsBox') }, onPrintProgress = { propertyName: 'onPrintProgress', modelName: '@OnPrintProgress', displayName: 'Print Progress', localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnPrintProgress', editor: designerEditorTemplates.getEditor('scriptsBox') }, onParametersRequestBeforeShow = { propertyName: 'onParametersRequestBeforeShow', modelName: '@OnParametersRequestBeforeShow', displayName: 'Parameters Request Before Show', localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestBeforeShow', editor: designerEditorTemplates.getEditor('scriptsBox') }, onParametersRequestValueChanged = { propertyName: 'onParametersRequestValueChanged', modelName: '@OnParametersRequestValueChanged', displayName: 'Parameters Changed', localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestValueChanged', editor: designerEditorTemplates.getEditor('scriptsBox') }, onParametersRequestSubmit = { propertyName: 'onParametersRequestSubmit', modelName: '@OnParametersRequestSubmit', displayName: 'Parameters Submitted', localizationId: 'DevExpress.XtraReports.UI.XtraReportScripts.OnParametersRequestSubmit', editor: designerEditorTemplates.getEditor('scriptsBox') }, reportEventsSerializationInfo = detailReportBandEventsSerializationInfo.concat([
    onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
]);
const reportScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XtraReport.Scripts', info: reportEventsSerializationInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const allScripts = {
    propertyName: 'scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.XRControl.Scripts', info: labelEventsSerializationInfo.concat(specificChartEventsSerializationInfo, specificPivotEventsSerializationInfo, [
        onBandLevelChanged, onSortingSummaryGetResult, onSortingSummaryReset, onSortingSummaryRowChanged, onBandHeightChanged, onDataSourceRowChanged, onDataSourceDemanded,
        onFillEmptySpace, onPrintProgress, onParametersRequestBeforeShow, onParametersRequestValueChanged, onParametersRequestSubmit
    ]), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor')
};

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrPicturebox.js














const imageUrl = { propertyName: 'imageUrl', modelName: '@ImageUrl', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '', displayName: 'Image Url', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageUrl' };
const imageSource = {
    propertyName: 'imageSource',
    modelName: '@ImageSource',
    editor: { header: 'dxrd-image-loadfile', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.Editor },
    displayName: 'Image Source',
    localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageSource',
    from: val => external_ko_namespaceObject.observable(external_DevExpress_Reporting_namespaceObject.ImageSource.parse(val)),
    toJsonObject: external_DevExpress_Reporting_namespaceObject.ImageSource.toString,
    defaultVal: null
};
const imageEditOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, editOptions, {
    propertyName: 'imageEditOptions',
    from: (model, serializer) => new ImageEditOptions(model, serializer)
});
const useImageMetadata = { propertyName: 'useImageMetadata', modelName: '@UseImageMetadata', displayName: 'Use Image Metadata', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.UseImageMetadata', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false };
const pictureBoxSerializationsInfo = [
    imageUrl, imageSource, external_DevExpress_Reporting_Viewer_Editing_namespaceObject.sizing, external_DevExpress_Reporting_Viewer_Editing_namespaceObject.imageAlignment, keepTogether, anchorVertical, anchorHorizontal, controlScripts, useImageMetadata,
    action, dataBindings(['Bookmark', 'Image', 'ImageSource', 'ImageUrl', 'NavigateUrl', 'Tag']),
    imageEditOptions
].concat(createPopularBindingInfos({ propertyName: 'ImageUrl', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageUrl' }), createPopularBindingInfos({ propertyName: 'ImageSource', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageSource' }), sizeLocation, commonControlProperties, navigationGroup, processGroup);
const popularPropertiesPicture = ['imageSource', 'popularDataBindingImageSource', 'imageUrl', 'popularDataBindingImageUrl', 'sizing', 'imageAlignment', 'bookmark', 'bookmarkParent'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/watermark.js






const foreColorWatermark = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, foreColor, { defaultVal: 'Red' });
const fontWatermark = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_font, { defaultVal: 'Verdana, 36pt', editorOptions: { hideUnderline: true, hideStrikeout: true } });
const watermarkTextValues = [
    { value: 'ASAP', displayValue: 'ASAP', localizationId: 'PreviewStringId.WMForm_Watermark_Asap' },
    { value: 'CONFIDENTIAL', displayValue: 'CONFIDENTIAL', localizationId: 'PreviewStringId.WMForm_Watermark_Confidential' },
    { value: 'COPY', displayValue: 'COPY', localizationId: 'PreviewStringId.WMForm_Watermark_Copy' },
    { value: 'DO NOT COPY', displayValue: 'DO NOT COPY', localizationId: 'PreviewStringId.WMForm_Watermark_DoNotCopy' },
    { value: 'DRAFT', displayValue: 'DRAFT', localizationId: 'PreviewStringId.WMForm_Watermark_Draft' },
    { value: 'EVALUATION', displayValue: 'EVALUATION', localizationId: 'PreviewStringId.WMForm_Watermark_Evaluation' },
    { value: 'ORIGINAL', displayValue: 'ORIGINAL', localizationId: 'PreviewStringId.WMForm_Watermark_Original' },
    { value: 'PERSONAL', displayValue: 'PERSONAL', localizationId: 'PreviewStringId.WMForm_Watermark_Personal' },
    { value: 'SAMPLE', displayValue: 'SAMPLE', localizationId: 'PreviewStringId.WMForm_Watermark_Sample' },
    { value: 'TOP SECRET', displayValue: 'TOP SECRET', localizationId: 'PreviewStringId.WMForm_Watermark_TopSecret' },
    { value: 'URGENT', displayValue: 'URGENT', localizationId: 'PreviewStringId.WMForm_Watermark_Urgent' }
];
const watermarkContentPosition = [
    { value: 'Behind', displayValue: 'Behind', localizationId: 'DevExpress.XtraPrinting.Drawing.WatermarkPosition.Behind' },
    { value: 'InFront', displayValue: 'InFront', localizationId: 'DevExpress.XtraPrinting.Drawing.WatermarkPosition.InFront' }
];
const watermarkSerializationsInfo = [
    { propertyName: 'watermarkId', modelName: '@Id', displayName: 'Watermark Id', localizationId: 'DevExpress.XtraReports.UI.XtraReport.WatermarkId', editor: designerEditorTemplates.getEditor('watermarkId') },
    fontWatermark,
    foreColorWatermark,
    { propertyName: 'textTransparency', modelName: '@TextTransparency', displayName: 'Text Transparency', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.TextTransparency', defaultVal: 50, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    {
        propertyName: 'text', modelName: '@Text', displayName: 'Text', localizable: true, localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.Text', defaultVal: '',
        editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('comboboxEditable'),
        valuesArray: watermarkTextValues
    },
    {
        propertyName: 'textDirection', modelName: '@TextDirection', displayName: 'Text Direction', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.TextDirection', defaultVal: 'ForwardDiagonal', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'Horizontal', displayValue: 'Horizontal', localizationId: 'DevExpress.XtraPrinting.Drawing.DirectionMode.Horizontal' },
            { value: 'ForwardDiagonal', displayValue: 'ForwardDiagonal', localizationId: 'DevExpress.XtraPrinting.Drawing.DirectionMode.ForwardDiagonal' },
            { value: 'BackwardDiagonal', displayValue: 'BackwardDiagonal', localizationId: 'DevExpress.XtraPrinting.Drawing.DirectionMode.BackwardDiagonal' },
            { value: 'Vertical', displayValue: 'Vertical', localizationId: 'DevExpress.XtraPrinting.Drawing.DirectionMode.Vertical' }
        ]
    },
    {
        propertyName: 'textPosition', modelName: '@TextPosition', displayName: 'Text Position', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.TextPosition', defaultVal: 'Behind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: watermarkContentPosition
    },
    imageSource,
    {
        propertyName: 'imagePosition', modelName: '@ImagePosition', displayName: 'Image Position', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.ImagePosition', defaultVal: 'Behind', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: watermarkContentPosition
    },
    { propertyName: 'imageTransparency', modelName: '@ImageTransparency', displayName: 'Image Transparency', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.ImageTransparency', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') },
    { propertyName: 'imageTiling', modelName: '@ImageTiling', displayName: 'Image Tiling', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.ImageTiling', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    {
        propertyName: 'imageAlign', modelName: '@ImageAlign', displayName: 'Image Alignment', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.ImageAlign', defaultVal: 'MiddleCenter', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'TopLeft', displayValue: 'TopLeft', localizationId: 'System.Drawing.ContentAlignment.TopLeft' },
            { value: 'TopCenter', displayValue: 'TopCenter', localizationId: 'System.Drawing.ContentAlignment.TopCenter' },
            { value: 'TopRight', displayValue: 'TopRight', localizationId: 'System.Drawing.ContentAlignment.TopRight' },
            { value: 'MiddleLeft', displayValue: 'MiddleLeft', localizationId: 'System.Drawing.ContentAlignment.MiddleLeft' },
            { value: 'MiddleCenter', displayValue: 'MiddleCenter', localizationId: 'System.Drawing.ContentAlignment.MiddleCenter' },
            { value: 'MiddleRight', displayValue: 'MiddleRight', localizationId: 'System.Drawing.ContentAlignment.MiddleRight' },
            { value: 'BottomLeft', displayValue: 'BottomLeft', localizationId: 'System.Drawing.ContentAlignment.BottomLeft' },
            { value: 'BottomCenter', displayValue: 'BottomCenter', localizationId: 'System.Drawing.ContentAlignment.BottomCenter' },
            { value: 'BottomRight', displayValue: 'BottomRight', localizationId: 'System.Drawing.ContentAlignment.BottomRight' }
        ]
    },
    {
        propertyName: 'imageViewMode', modelName: '@ImageViewMode', displayName: 'Image View Mode', localizationId: 'DevExpress.XtraPrinting.Drawing.PageWatermark.ImageViewMode', defaultVal: 'Clip', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
            { value: 'Clip', displayValue: 'Clip', localizationId: 'DevExpress.XtraPrinting.Drawing.ImageViewMode.Clip' },
            { value: 'Stretch', displayValue: 'Stretch', localizationId: 'DevExpress.XtraPrinting.Drawing.ImageViewMode.Stretch' },
            { value: 'Zoom', displayValue: 'Zoom', localizationId: 'DevExpress.XtraPrinting.Drawing.ImageViewMode.Zoom' }
        ]
    },
    { propertyName: 'pageRange', modelName: '@PageRange', displayName: 'Page Range', localizationId: 'DevExpress.XtraPrinting.Drawing.Watermark.PageRange', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') }
];

;// ./node_modules/devexpress-reporting/designer/controls/properties/watermark.js




class WatermarkModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, serializer) {
        super(model || {}, serializer, watermarkSerializationsInfo);
        this.rtl = () => void (0);
        if (!this.imageSource() && model && model['@Image']) {
            this.imageSource(new external_DevExpress_Reporting_namespaceObject.ImageSource('img', model['@Image']));
            delete this['_model']['@Image'];
        }
    }
    get displayName() {
        return this['displayNameObject']() || this.watermarkId();
    }
    get name() {
        return this.watermarkId();
    }
    displayType() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Watermark', 'DevExpress.XtraReports.UI.XtraReport.Watermark');
    }
    shouldDrawWatermarkImage() {
        return this.imageSource() && this.imageSource().sourceType !== 'svg';
    }
}

;// ./node_modules/devexpress-reporting/designer/services/_reportRenderingService.js







class ReportRenderingService {
    static getChartImage(surface) {
        return ChartRequests.getChartImage(settings_HandlerUri(), new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(surface._control['chart'], chartSerializationsInfo), surface.contentWidthWithoutZoom(), surface.contentHeightWithoutZoom());
    }
    static getUnknownControlImage(model, scale) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'renderUnknownControl', JSON.stringify({
            layout: JSON.stringify(model),
            scale: scale,
        }));
    }
    static getShapeImage(surface) {
        const _usefulRect = surface.getUsefulRect();
        const params = {
            shapeType: surface._control['Shape']()['shapeType'] && surface._control['Shape']()['shapeType']() || 'Ellipse',
            width: _usefulRect.width,
            lineWidth: surface._control['lineWidth'](),
            fillColor: (0,external_DevExpress_Analytics_Utils_namespaceObject.colorToString)(surface._control['fillColor']()),
            lineStyle: surface._control['lineStyle'] && surface._control['lineStyle']() || 'Solid',
            height: _usefulRect.height,
            fillet: surface._control['Shape']()['fillet'] && surface._control['Shape']()['fillet']() || 0,
            numberOfSides: surface._control['Shape']()['numberOfSides'] && surface._control['Shape']()['numberOfSides']() || 3,
            angle: surface._control['angle'] && surface._control['angle']() || 0,
            arrowHeight: surface._control['Shape']()['arrowHeight'] && surface._control['Shape']()['arrowHeight']() || 20,
            arrowWidth: surface._control['Shape']()['arrowWidth'] && surface._control['Shape']()['arrowWidth']() || 20,
            concavity: surface._control['Shape']()['concavity'] && surface._control['Shape']()['concavity']() || 5,
            starPointCount: surface._control['Shape']()['starPointCount'] && surface._control['Shape']()['starPointCount']() || 3,
            horizontalLineWidth: surface._control['Shape']()['horizontalLineWidth'] && surface._control['Shape']()['horizontalLineWidth']() || 10,
            verticalLineWidth: surface._control['Shape']()['verticalLineWidth'] && surface._control['Shape']()['verticalLineWidth']() || 10,
            tipLength: surface._control['Shape']()['tipLength'] && surface._control['Shape']()['tipLength']() || 30,
            tailLength: surface._control['Shape']()['tailLength'] && surface._control['Shape']()['tailLength']() || 30,
            foreColor: (0,external_DevExpress_Analytics_Utils_namespaceObject.colorToString)(surface._control['foreColor'] && surface._control['foreColor']() || 'black'),
            stretch: surface._control['stretch'] && surface._control['stretch']() || false,
            padding: surface._control['padding'] && surface._control['padding']() || external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.defaultVal,
            dpi: surface._control['dpi'] && surface._control['dpi']() || 100
        };
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'shapeGlyph', JSON.stringify(params));
    }
    static getRichImage(surface, propertyName) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'renderRich', JSON.stringify({
            layout: JSON.stringify((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(surface._control), {
                '@Font': surface._control['font']()
            })),
            scale: surface._context.zoom(),
            text: (0,external_DevExpress_Reporting_Internal_namespaceObject.transformNewLineCharacters)(surface._control['textRtf']() || ''),
            rtf: (0,external_DevExpress_Reporting_Internal_namespaceObject.transformNewLineCharacters)(surface._control['_rtf']() || ''),
            format: surface._control['format'](),
            base64rtf: surface._control['serializableRtfString'](),
            propertyName: propertyName
        }));
    }
    static getPdfContentData(control) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'renderPdfContent', JSON.stringify({
            sourceBase64: control.source() || '',
            sourceUrl: control.sourceUrl() || '',
            pageRange: control.pageRange() || ''
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_controlTypes.js
function isVerticalBand(type) {
    return type === 'VerticalDetailBand' || type === 'VerticalHeaderBand' || type === 'VerticalTotalBand';
}
function isBand(type) {
    return isVerticalBand(type)
        || type === 'BottomMarginBand'
        || type === 'SubBand'
        || type === 'DetailBand'
        || type === 'DetailReportBand'
        || type === 'GroupFooterBand'
        || type === 'GroupHeaderBand'
        || type === 'PageFooterBand'
        || type === 'PageHeaderBand'
        || type === 'ReportFooterBand'
        || type === 'ReportHeaderBand'
        || type === 'TopMarginBand';
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_headOrFooterBandType.js
function isHeaderOrFooterBandType(band) {
    return ((band.controlType === 'ReportHeaderBand' || band.controlType === 'ReportFooterBand')
        && (band.parentModel().controlType === 'DevExpress.XtraReports.UI.XtraReport')) || (band.controlType === 'SubBand' && isHeaderOrFooterBandType(band.parentModel()));
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_tocUtils.js

function getExistTableOfContents(band) {
    const toc = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(band.controls(), (item) => item.controlType === 'XRTableOfContents');
    return toc;
}

;// ./node_modules/devexpress-reporting/designer/helpers/_styleHelper.js


const stylesProperties = ['foreColor', 'borderColor', 'borderWidth', 'backColor', 'borders', 'borderDashStyle', 'padding', 'textAlignment', 'font'];
class StylesHelper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    static styleEqualityComparer(x, y) {
        return stylesProperties.every(property => x[property]() === y[property]() || x[property]() === undefined && y[property]() === undefined);
    }
    static generateStyle(element, parent) {
        const newStyle = new StyleModel({}, parent);
        stylesProperties.forEach(property => {
            if (element[property] && element[property]())
                newStyle[property](element[property]());
        });
        return newStyle;
    }
    constructor(_report, _controlsHelper) {
        super();
        this._report = _report;
        this._controlsHelper = _controlsHelper;
    }
    removeUnusedStyle(styleName) {
        const targetStyle = this._report.findStyle(styleName);
        if (targetStyle && !this._controlsHelper.allControls().some(control => control['styleName'] && control['styleName']() === styleName)) {
            this._report.styles.remove(targetStyle);
            return targetStyle;
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_createObjectFromInfo.js
function createObjectFromInfo(control, serializationsInfo) {
    let newObj = undefined;
    const newObjInfo = [];
    serializationsInfo.forEach(info => {
        if (control[info.propertyName]) {
            if (newObj === undefined)
                newObj = {};
            newObj[info.propertyName] = control[info.propertyName];
            newObjInfo.push(info);
        }
    });
    if (!!newObj) {
        newObj['getInfo'] = () => { return newObjInfo; };
    }
    return newObj;
}
function findFirstParentWithPropertyName(control, propertyName) {
    const parent = control.parentModel && control.parentModel();
    if (parent)
        return parent[propertyName] ? parent : findFirstParentWithPropertyName(parent, propertyName);
    else
        return control.root;
}

;// ./node_modules/devexpress-reporting/designer/internal/_dataBindingMode.js
var _dataBindingMode_DataBindingMode;
(function (DataBindingMode) {
    DataBindingMode["Bindings"] = "Bindings";
    DataBindingMode["Expressions"] = "Expressions";
    DataBindingMode["ExpressionsAdvanced"] = "ExpressionsAdvanced";
})(_dataBindingMode_DataBindingMode || (_dataBindingMode_DataBindingMode = {}));

;// ./node_modules/devexpress-reporting/designer/internal/_expressionEditorAction.js
const expressionEditorActionId = 'dxrd-expression';
function createExpressionEditorAction({ expressionEditor, hasInnerItems, title, hint }) {
    return {
        id: expressionEditorActionId,
        action: hasInnerItems ?
            (propertyName) => { } :
            (propertyName) => {
                expressionEditor.popupVisible(true);
            },
        title: title,
        itemTemplate: 'dxrd-expression-action',
        hint: hint,
        weight: 50,
        innerTemplate: hasInnerItems ? null : {
            name: 'dxrd-expressioneditor-popup',
            data: expressionEditor
        },
        visible: (name) => true
    };
}

;// ./node_modules/devexpress-reporting/designer/widgets/expressioneditor/reportExpressionEditorAdapter.js





class ReportExpressionEditorAdapter extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _onHidingPopup(e) {
        if (this._relatedControlClassName)
            e.component.content().classList.remove(this._relatedControlClassName);
    }
    _onShowingPopup(editableObject) {
        return (e) => {
            if (editableObject && editableObject.expressionObj) {
                const type = editableObject.controlType || 'unknown';
                this._relatedControlClassName = 'dx-expression-popup-related-' + type.toLowerCase().split('.').join('_');
                (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(e.component.content()).addClass(this._relatedControlClassName);
            }
        };
    }
    constructor(values, value) {
        super();
        this.values = values;
        this.value = value;
        this.popupVisible = external_ko_namespaceObject.observable(false);
    }
    patchOptions(reportExplorerProvider, editableObject) {
        if (!this.value()) {
            return false;
        }
        else {
            if (!this.value()['customizeCategories']) {
                this.value()['customizeCategories'] = (sender, groups, onClick) => {
                    groups.splice(0, 0, this._createReportItems(reportExplorerProvider, onClick));
                    if (this.values() && this.values().length > 0) {
                        groups.splice(2, 0, this._createValuesTab());
                    }
                    const fillExpressionItems = (items) => {
                        const shouldAddArguments = this.value().eventName === 'PrintOnPage' || this.value().eventName === 'BeforePrint' && this.value()['serializationInfo']?.modelName === 'WatermarkId';
                        if (shouldAddArguments) {
                            items.push({ text: 'Arguments.PageIndex', val: '[Arguments.PageIndex]', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Arguments_PageIndex' });
                            items.push({ text: 'Arguments.PageCount', val: '[Arguments.PageCount]', descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Arguments_PageCount' });
                        }
                        return items;
                    };
                    addVariablesToExpressionEditor(groups, fillExpressionItems);
                    editableObject.customizeExpressionCategories && editableObject.customizeExpressionCategories(sender, groups);
                };
                this.value().onHiding = this._onHidingPopup;
                this.value().onShowing = this._onShowingPopup(editableObject);
            }
            return true;
        }
    }
    _createReportItems(reportExplorerProvider, onClick) {
        const item = {
            displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Items', 'ReportStringId.ExpressionEditor_ItemInfo_ReportItems'),
            content: {
                showDescription: false,
                isSelected: external_ko_namespaceObject.observable(false),
                data: {
                    fields: {
                        itemsProvider: reportExplorerProvider,
                        expandRootItems: true,
                        selectedPath: external_ko_namespaceObject.observable(''),
                        templateName: 'dx-ee-treelist-item',
                        treeListController: new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ExpressionEditorTreeListController('', (item, element) => { onClick('[' + ['ReportItems', item.text].join('.') + ']'); })
                    }
                },
                name: 'dx-expressioneditor-report-items'
            },
            dispose: () => { }
        };
        return item;
    }
    _createValuesTab() {
        const items = this.values().map(item => {
            const display = item.value || item;
            return {
                text: "'" + display + "'",
                displayName: display
            };
        });
        return (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.createExpressionEditorCollectionToolOptions)(items, 'Values', 'ReportStringId.ExpressionEditor_ItemInfo_Values', false);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/expressioneditor/reportExpressionEditorWrapper.js





class ReportExpressionEditorWrapper extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.PopupEditorBase {
    constructor(control, value) {
        super();
        this.control = control;
        this.value = value;
        this._allProperties = [];
        this.title = () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Expression Editor', 'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption');
        this.getPopupContainer = external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer;
        this.adapter = external_ko_namespaceObject.observable();
        this.editor = external_ko_namespaceObject.observable();
        this.properties = external_ko_namespaceObject.observable([]);
        const self = this;
        this.resizeHelper = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ResizeHelper({
            onResize: () => this.resizeAceEditor()
        });
        this.buttonItems.push({ toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Apply', 'PreviewStringId.Button_Apply'), type: 'normal', stylingMode: 'contained', onClick: function (sender) { self.apply(sender); } } });
    }
    save(sender) {
        this.apply(sender) && super.save();
    }
    apply(sender) {
        const value = this.editor().getValue();
        if (this.editor().validate(value, sender)) {
            this.editor().save(null);
            this._allProperties.forEach(x => x.value && x.content.value && x.value() !== undefined && x.content.value(x.value()));
            return true;
        }
    }
    onShowing(e) {
        const expressionObj = this.control().expressionObj;
        this._allProperties = [];
        this.properties([]);
        this.createExpressionEditorProperties(expressionObj, this.properties(), this.value);
        this.properties.valueHasMutated();
        this.value() && this.updateExpression(this.value());
        this._undoEngine = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this.control());
        this._undoEngine && this._undoEngine.start();
        this.editor().onShowing(e);
        this.editor().initDisplayValue();
    }
    resizeAceEditor() {
        this.editor().resizeAceEditor();
    }
    onHiding(e) {
        this._allProperties.forEach(x => x.content && x.value(x.content.value()));
        this.editor() && this.editor().onHiding(e);
        this._undoEngine && this._undoEngine.end();
        this.adapter() && this.adapter().dispose();
    }
    createExpressionEditorProperties(expressionObj, properties, selected) {
        expressionObj.getInfo().forEach(info => {
            const items = [];
            let expand = false;
            if (info.info)
                expand = this.createExpressionEditorProperties(expressionObj[info.propertyName], items, selected);
            if (info.propertyName === 'Appearance' || info.propertyName === 'Layout') {
                properties.push(...items);
            }
            else {
                const content = !items.length && expressionObj[info.propertyName];
                const property = {
                    displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(info.displayName, info.localizationId),
                    propertyName: info.propertyName,
                    items: items,
                    templateName: !!items.length ? 'dxrd-expressioneditor-property-accordion' : '',
                    collapsed: external_ko_namespaceObject.observable(!expand),
                    content: content,
                    value: external_ko_namespaceObject.observable(content && content.value()),
                    isSelected: external_ko_namespaceObject.observable(content == selected()),
                    click: () => this.switchExpression(property),
                    isBinded: () => !!property.value() || property.items.some(x => x.isBinded())
                };
                if (!selected()) {
                    property.isSelected(true);
                    selected(property.content);
                }
                if (property.isSelected())
                    this.currentProperty = property;
                properties.push(property);
                this._allProperties.push(property);
            }
        });
        properties.sort((a, b) => a.displayName < b.displayName ? -1 : 1);
        return properties.some(x => x.isSelected() || !x.collapsed());
    }
    switchExpression(property) {
        if (property === this.currentProperty)
            return;
        const value = this.editor().getValue();
        if (this.editor().validate(value)) {
            this.editor().save(null);
            this.currentProperty.isSelected(false);
            this.currentProperty = property;
            this.updateExpression(property.content);
            property.isSelected(true);
            this.editor().initDisplayValue();
        }
    }
    updateExpression(expression) {
        this.adapter() && this.adapter().dispose();
        this.adapter(new ReportExpressionEditorAdapter(external_ko_namespaceObject.observable(expression['serializationInfo'] && expression['serializationInfo']['valuesArray'] || []), external_ko_namespaceObject.observable({
            ...expression,
            ...{
                value: this.currentProperty.value
            }
        })));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/getNearestBand.js

function getNearestBand(target) {
    let bandModel = null;
    let model = target;
    do {
        if (isBand(model.controlType))
            bandModel = model;
        model = model.parentModel();
    } while (!bandModel && model);
    return bandModel;
}

;// ./node_modules/devexpress-reporting/designer/controls/xrReportelement.js
















class XRReportElementViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel {
    get _localizationProvider() {
        if (!this.__localizationProvider) {
            this.__localizationProvider = this.createLocalizationProvider();
        }
        return this.__localizationProvider;
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.dataBindings);
        this.resetObservableArray(this.formattingRuleLinks);
        this.resetObservableArray(this.dataBindings);
        this.__localizationProvider = null;
    }
    createLocalizationProvider() {
        return new DefaultLocalizationProvider(this);
    }
    getLocalizationProperty(propertyName) {
        return this._localizationProvider.getLocalizationProperty(propertyName);
    }
    getLocalizationProperties() {
        return this._localizationProvider.getLocalizationProperties();
    }
    applyLocalization(propertyName, propertyValue) {
        this._localizationProvider.applyLocalization(propertyName, propertyValue);
    }
    _resetProperty(propertyName) {
        super._resetProperty(propertyName);
        this._resetExpressions(propertyName);
    }
    _getControlPropertyName(propertyName) {
        propertyName = propertyName === 'paddingObj' ? 'padding' : propertyName;
        propertyName = propertyName === 'textArea' ? 'text' : propertyName;
        return propertyName;
    }
    _getStylePriorityPropertyName(propertyName) {
        propertyName = this._getControlPropertyName(propertyName);
        return 'use' + propertyName.charAt(0).toUpperCase() + propertyName.substr(1);
    }
    _getStyle(root) {
        const styleName = this.styleName && this.styleName(), style = styleName && root && root.findStyle && root.findStyle(styleName);
        return style;
    }
    _checkStylePropertyModify(target, propertyName) {
        const property = external_ko_namespaceObject.unwrap(target && (target['_' + propertyName] || target[propertyName]));
        return property != null && target.isPropertyModified(propertyName);
    }
    _getStyleProperty(propertyName, stylePriorityName, root) {
        if (this.stylePriority && this.stylePriority[stylePriorityName] && this.stylePriority[stylePriorityName]() || !this._checkStylePropertyModify(this, propertyName)) {
            const style = this._getStyle(root);
            if (style && this._checkStylePropertyModify(style, propertyName)) {
                return style[propertyName]();
            }
        }
        if (this._checkStylePropertyModify(this, propertyName)) {
            return this['_' + propertyName]();
        }
        const defaultValue = this.getPropertyDefaultValue(propertyName);
        if (defaultValue && !(defaultValue instanceof Object)) {
            return defaultValue;
        }
        const parent = this.parentModel();
        if (parent) {
            return parent.getStyleProperty(propertyName, stylePriorityName);
        }
    }
    _zOrderChange(bringToFront) {
        const parent = this.parentModel(), controlContainer = parent && parent[this.getControlContainerName()];
        if (controlContainer) {
            const itemIndex = controlContainer().indexOf(this);
            const items = controlContainer();
            items.splice(itemIndex, 1);
            items.splice((bringToFront ? 0 : controlContainer().length), 0, this);
            controlContainer.valueHasMutated();
        }
    }
    _createPaddingDependencies() {
        createPaddingProperty(this, this.root);
        this.paddingObj['isPropertyHighlighted'] = (propertyName) => {
            return this.isPropertyHighlighted(propertyName, 'padding');
        };
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this._expressionActions = {};
        this.initialize();
        this.formattingRuleLinks = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.FormattingRuleLinks, (item) => { return new FormattingRuleLink(item, serializer); });
        const _generateProperty = (propertyName, stylePriorityName) => {
            this['_' + propertyName] = external_ko_namespaceObject.observable(this[propertyName]());
            this._disposables.push(this[propertyName] = external_ko_namespaceObject.computed({
                read: () => this._getStyleProperty(propertyName, stylePriorityName, this.root),
                write: (val) => {
                    if (this._getStyleProperty(propertyName, stylePriorityName, this.root) !== val) {
                        if (this.stylePriority && this.stylePriority[stylePriorityName]) {
                            this.stylePriority[stylePriorityName](false);
                        }
                        this['_' + propertyName](val);
                    }
                }
            }));
        };
        this.dsHelperProvider = () => this.root['dataSourceHelper'] && this.root['dataSourceHelper']();
        this.initBindings();
        this.getStyleProperty = (propertyName, stylePriorityName) => this._getStyleProperty(propertyName, stylePriorityName, this.root);
        for (let i = 0; i < stylesProperties.length; i++) {
            if (this[stylesProperties[i]]) {
                const stylePriorityName = this._getStylePriorityPropertyName(stylesProperties[i]);
                _generateProperty(stylesProperties[i], stylePriorityName);
            }
        }
        if (this.padding) {
            this._createPaddingDependencies();
        }
        this.toggleUseStyle = (propertyName) => {
            const styleName = this._getStylePriorityPropertyName(propertyName);
            this.stylePriority[styleName](!this.stylePriority[styleName]());
        };
        this.actions.push({ action: this.toggleUseStyle, title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Style Priority', 'DevExpress.XtraReports.UI.XRControl.StylePriority'), visible: name => this.isStyleProperty(name) });
        this.actionProviders.push({ getActions: (name) => this._getExpressionActions(name) });
        this._disposables.push(this.lockedInUserDesigner = external_ko_namespaceObject.computed({
            read: () => {
                const parent = this.parentModel(), parentLocked = (parent && parent['lockedInUserDesigner']) ? parent['lockedInUserDesigner']() : false;
                return this._lockedInUserDesigner() || parentLocked;
            },
            write: newValue => this._lockedInUserDesigner(newValue)
        }));
    }
    _getExpressionActions(name) {
        if (!this._expressionActions[name]) {
            this._expressionActions[name] = this._addExpressionActions(name);
        }
        return this._expressionActions[name];
    }
    _getExpressionEvents() {
        const events = [
            { name: 'BeforePrint', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint', displayName: 'BeforePrint' }
        ];
        if (this.dataBindingMode === _dataBindingMode_DataBindingMode.ExpressionsAdvanced) {
            events.push({ name: 'PrintOnPage', localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage', displayName: 'PrintOnPage' });
        }
        return events;
    }
    _addExpressionActions(propertyName) {
        if (this.dataBindingMode === _dataBindingMode_DataBindingMode.Bindings) {
            return [];
        }
        const expressionName = this._getExpressionNameByPropertyName(propertyName);
        if (!expressionName)
            return [];
        const events = this._getExpressionEvents();
        const allExpressionsTreeItems = this.expressionObj.getExpressionsTreeItems(expressionName);
        if (!allExpressionsTreeItems || !allExpressionsTreeItems.length)
            return [];
        const expressionForLocalizedString = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} Expression', 'ReportStringId.UD_PropertyGrid_Menu_ItemExpression');
        const convertToMenuAction = (item) => {
            const hasInnerItems = item.innerItems && !!item.innerItems.length;
            const expressionEditor = hasInnerItems ? null : new ReportExpressionEditorWrapper(external_ko_namespaceObject.observable(this), external_ko_namespaceObject.observable(item.expressionObj));
            const currentEventInfo = events.filter(x => x.name === item.eventName)[0];
            const eventLocalizedName = currentEventInfo ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(currentEventInfo.displayName, currentEventInfo.localizationId) : item.eventName;
            const expressionLocalizedName = !item.displayName && !item.localizationId ? item.expressionName : (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(item.displayName, item.localizationId);
            const menuAction = createExpressionEditorAction({
                expressionEditor,
                hasInnerItems,
                title: item.eventName ? eventLocalizedName : (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(expressionForLocalizedString, expressionLocalizedName),
                hint: external_ko_namespaceObject.computed(() => {
                    return item.expressionObj && item.expressionObj.value();
                }),
            });
            menuAction.items = (item.innerItems || []).map(convertToMenuAction);
            this._disposables.push(menuAction.hint);
            return menuAction;
        };
        return allExpressionsTreeItems.map(convertToMenuAction);
    }
    getControlFactory() {
        return controlsFactory();
    }
    addChild(control) {
        if (control.controlType === 'XRTableOfContents' && !isHeaderOrFooterBandType(this)) {
            const band = getNearestBand(this);
            if (band) {
                if (isHeaderOrFooterBandType(band)) {
                    band.addChild(control);
                }
                return;
            }
            else {
                throw new Error('TOC can be added only to ReportHeaderBand or ReportFooterBand!!!');
            }
        }
        super.addChild(control);
    }
    initDataBindingProperties() {
        const bindingInfos = this.getInfo().filter(info => 'bindingName' in info);
        bindingInfos.forEach(info => {
            this[info.propertyName] = this.dataBindings()['findBinding'](info['bindingName']);
        });
    }
    initExpressionProperties() {
        if (!this.expressionBindings)
            return;
        const path = external_ko_namespaceObject.pureComputed(() => {
            return this.getPath('expression');
        });
        this._disposables.push(path);
        this.expressionObj = this.getControlFactory()._createExpressionObject(this.controlType, this.expressionBindings, path, (name) => this['Summary'] && this['Summary']['Running'] && this.getControlInfo().defaultBindingName === name && external_ko_namespaceObject.computed(() => {
            return this['Summary']['Running']() != 'None';
        }));
        if (!this.expressionObj)
            return;
        this._disposables.push(this.expressionObj);
        const expressionInfos = this.getInfo().filter(info => 'expressionName' in info);
        expressionInfos.forEach(info => {
            const expression = this.expressionObj.getExpression(info['expressionName'], 'BeforePrint');
            if (expression)
                this[info.propertyName] = expression;
        });
    }
    _resetExpressions(propertyName) {
        const modelName = this._getExpressionNameByPropertyName(propertyName);
        if (!modelName)
            return;
        this._getExpressionEvents().forEach((event) => {
            const expressionPropertyInfo = this.expressionObj.getExpression(modelName, event.name);
            if (!expressionPropertyInfo)
                return;
            if (expressionPropertyInfo['getInfo']) {
                (expressionPropertyInfo['getInfo']() || []).forEach(info => {
                    const value = expressionPropertyInfo[info.propertyName].value;
                    value && value('');
                });
            }
            else {
                expressionPropertyInfo.value && expressionPropertyInfo.value('');
            }
        });
    }
    _hasAnyExpressions(propertyName, predicateFunc = (value) => !!external_ko_namespaceObject.unwrap(value)) {
        const modelName = this._getExpressionNameByPropertyName(propertyName);
        if (!modelName)
            return false;
        let returnValue = false;
        const events = this._getExpressionEvents();
        events.forEach((event) => {
            const expressionPropertyInfo = this.expressionObj.getExpression(modelName, event.name);
            if (!expressionPropertyInfo)
                return;
            const getInfoAction = expressionPropertyInfo['getInfo'];
            let expressionExists = false;
            if (getInfoAction) {
                const info = getInfoAction() || [];
                expressionExists = info.filter(info => {
                    return predicateFunc(expressionPropertyInfo[info.propertyName].value, info.propertyName);
                }).length > 0;
            }
            else {
                expressionExists = predicateFunc(expressionPropertyInfo.value);
            }
            returnValue = returnValue || expressionExists;
        });
        return returnValue;
    }
    _getExpressionNameByPropertyName(propertyName, info = this.getInfo()) {
        if (this.dataBindingMode === _dataBindingMode_DataBindingMode.Bindings) {
            return '';
        }
        propertyName = this._getControlPropertyName(propertyName);
        const propInfo = this.getInfo().filter(info => info.propertyName === propertyName)[0];
        if (!propInfo || !propInfo.modelName) {
            return '';
        }
        return propInfo.modelName.substring(propInfo.modelName.lastIndexOf('@') + 1);
    }
    initBindings() {
        this.initDataBindingProperties();
        this.initExpressionProperties();
    }
    isStyleProperty(propertyName) {
        return this.stylePriority && stylePrioritySerializationInfo.some((info) => { return info.propertyName == this._getStylePriorityPropertyName(propertyName); });
    }
    isResettableProperty(propertyName) {
        return super.isResettableProperty(propertyName) && propertyName !== 'dataBindings';
    }
    getActionClassName(propertyName) {
        const result = {};
        result['dxrd-editormenu-usestyle'] = this.isStyleProperty(propertyName) && this.stylePriority[this._getStylePriorityPropertyName(propertyName)]();
        result['dxrd-editormenu-modified'] = this.isPropertyModified(propertyName);
        const hasExpression = this._hasAnyExpressions(propertyName);
        result['dxrd-editormenu-expressions'] = hasExpression;
        result['dxd-icon-accented'] = hasExpression;
        return result;
    }
    getMenuBoxTemplate(propertyName) {
        if (this._hasAnyExpressions(propertyName))
            return 'dxrd-svg-tabs-expressions';
        return '';
    }
    className() {
        return this.controlType.toLowerCase();
    }
    initialize() {
        if (!this.size) {
            this.size = new external_DevExpress_Analytics_Elements_namespaceObject.Size(0, 0);
        }
    }
    getPath(propertyName) {
        if (propertyName === 'expression' && this.dsHelperProvider()) {
            const firstParentWithDS = findFirstParentWithPropertyName(this, 'dataSource');
            const rootDataSourceName = this.dsHelperProvider().getDataSourcePath(external_ko_namespaceObject.unwrap(firstParentWithDS['dataSource']));
            const rootDataMember = external_ko_namespaceObject.unwrap(firstParentWithDS['dataMember']) || '';
            if (!!rootDataSourceName) {
                return !!rootDataMember ? [rootDataSourceName, rootDataMember].join('.') : rootDataSourceName;
            }
            else {
                return '';
            }
        }
        return '';
    }
    isPropertyDisabled(name) {
        return this.lockedInUserDesigner();
    }
    isPropertyVisible(name) {
        if (this.dataBindingMode !== _dataBindingMode_DataBindingMode.Bindings) {
            return name !== 'dataBindings'
                && name !== 'formattingRuleLinks'
                && name !== 'formattingRuleSheet'
                && name.indexOf('popularDataBinding') !== 0;
        }
        else {
            return name.indexOf('popularExpression') !== 0;
        }
    }
    isPropertyHighlighted(propertyName, parentPropertyName) {
        if (!parentPropertyName) {
            return this._hasAnyExpressions(propertyName);
        }
        const parentExpressionName = this._getExpressionNameByPropertyName(parentPropertyName);
        const subPropertyName = propertyName[0].toUpperCase() + propertyName.substr(1);
        return parentExpressionName && this._hasAnyExpressions(parentPropertyName, (value, subExpressionName) => {
            const unwrappedValue = !!external_ko_namespaceObject.unwrap(value);
            return subExpressionName === (parentExpressionName + '.' + subPropertyName) && unwrappedValue;
        });
    }
    sendToBack() {
        this._zOrderChange(false);
    }
    bringToFront() {
        this._zOrderChange(true);
    }
    get root() {
        return this._getRoot();
    }
    getControlContainerName() { return 'controls'; }
    customizeExpressionCategories(sender, categories) { }
    get dataBindingMode() {
        return this.root !== this ? this.root.dataBindingMode : _dataBindingMode_DataBindingMode.Expressions;
    }
    set dpi(value) {
        this._innerDpi = value;
    }
    get dpi() {
        return this.root !== this ? this.root.dpi : this._innerDpi;
    }
    rtl() {
        const rtl = external_ko_namespaceObject.unwrap(this['rightToLeft']);
        if (rtl === 'Yes')
            return true;
        if (this.parentModel() && (!rtl || rtl === 'Inherit'))
            return this.parentModel().rtl();
        return false;
    }
}
XRReportElementViewModel.unitProperties = ['size', 'location', 'paddingObj'];


;// ./node_modules/devexpress-reporting/designer/bands/bandSurfaceCollapsedHeight.js
const bandSurfaceCollapsedHeight = 27;

;// ./node_modules/devexpress-reporting/designer/bands/metadata/bandsMetadata.js



const drillDownDetailReportExpanded = { propertyName: 'drillDownDetailReportExpanded', modelName: '@DrillDownExpanded', displayName: 'Drill-Down Expanded', localizationId: 'DevExpress.XtraReports.UI.Band.DrillDownExpanded', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: true };
const printAtBottom = { propertyName: 'printAtBottom', modelName: '@PrintAtBottom', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Print at Bottom', localizationId: 'DevExpress.XtraReports.UI.ReportFooterBand.PrintAtBottom', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const printAcrossBands = { propertyName: 'printAcrossBands', modelName: '@PrintAcrossBands', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Print Across Bands', localizationId: 'DevExpress.XtraReports.UI.Band.PrintAcrossBands', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const repeatEveryPage = { propertyName: 'repeatEveryPage', modelName: '@RepeatEveryPage', displayName: 'Repeat Every Page', localizationId: 'DevExpress.XtraReports.UI.GroupBand.RepeatEveryPage', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const pageBreakWithoutAfterValues = [
    { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.PageBreak.None' },
    { value: 'BeforeBand', displayValue: 'Before the Band', localizationId: 'DevExpress.XtraReports.UI.PageBreak.BeforeBand' },
    { value: 'BeforeBandExceptFirstEntry', displayValue: 'Before the Band, Except for the First Entry', localizationId: 'DevExpress.XtraReports.UI.PageBreak.BeforeBandExceptFirstEntry' },
];
const pageBreakValues = [].concat(pageBreakWithoutAfterValues, [
    { value: 'AfterBand', displayValue: 'After the Band', localizationId: 'DevExpress.XtraReports.UI.PageBreak.AfterBand' },
    { value: 'AfterBandExceptLastEntry', displayValue: 'After the Band, Except for the Last Entry', localizationId: 'DevExpress.XtraReports.UI.PageBreak.AfterBandExceptLastEntry' }
]);
const pageBreak = {
    propertyName: 'pageBreak',
    modelName: '@PageBreak', displayName: 'Page Break', localizationId: 'DevExpress.XtraReports.UI.Band.PageBreak', defaultVal: 'None', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    editor: designerEditorTemplates.getEditor('comboboxPageBreak'),
    valuesArray: pageBreakValues
};
const keepTogetherWithDetailReports = { propertyName: 'keepTogetherWithDetailReports', modelName: '@KeepTogetherWithDetailReports', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Keep Together with Detail Reports', localizationId: 'DevExpress.XtraReports.UI.DetailBand.KeepTogetherWithDetailReports', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const height = { propertyName: 'height', modelName: '@HeightF', defaultVal: '100', displayName: 'Height', localizationId: 'DevExpress.XtraReports.UI.Band.Height', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, localizable: true };
const bandsMetadata_level = { propertyName: 'level', modelName: '@Level', displayName: 'Level', localizationId: 'DevExpress.XtraReports.UI.GroupBand.Level', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: designerEditorTemplates.getEditor('bandLevel') };
const drillDownControl = { propertyName: 'drillDownControl', modelName: '@DrillDownControl', displayName: 'Drill-Down Control', localizationId: 'DevExpress.XtraReports.UI.Band.DrillDownControl', link: true, defaultVal: null, editor: designerEditorTemplates.getEditor('drillDownControls') };

;// ./node_modules/devexpress-reporting/designer/bands/_verticalBandsUtils.js
const markerHeight = 29;

;// ./node_modules/devexpress-reporting/designer/bands/_vericalBandContainer.js





class VerticalBandsContainerSurface extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.verticalBands);
        this.resetObservableArray(this.verticalBands);
    }
    getBandPosition() {
        if (this.visible)
            return this._parent.getControlModel().bands().indexOf(this.verticalBands()[0]._control);
        return -1;
    }
    isLocked() {
        return this.verticalBands().some(x => x.locked);
    }
    createScrollViewOptions(target, selection) {
        return {
            direction: 'horizontal',
            showScrollbar: 'always',
            useNative: false,
            scrollByContent: false,
            scrollByThumb: true,
            onStart: function () {
                selection['disabled'](true);
            },
            onScroll: function (e) {
                target.scrollOffset(e.scrollOffset.left);
            },
            onEnd: function () {
                selection['disabled'](false);
            }
        };
    }
    constructor(_parent) {
        super();
        this._parent = _parent;
        this.markerWidth = external_ko_namespaceObject.observable(bandSurfaceCollapsedHeight);
        this.name = 'Vertical Bands';
        this.bandOffset = 29;
        this.templateName = 'dxrd-vertical-bands-container';
        this.selectionTemplate = 'dxrd-vertical-bands-container-selection';
        this.vrulerTemplate = 'dxrd-vertical-bands-container-vruler';
        this.leftMarginTemplate = 'dxrd-vertical-bands-leftMargin';
        this.leftMarginSelectionTemplate = 'dxrd-vertical-bands-leftMargin-selection';
        this.verticalBands = external_ko_namespaceObject.observableArray();
        this.scrollOffset = external_ko_namespaceObject.observable(0);
        this._disposables.push(this.bandPosition = external_ko_namespaceObject.computed(() => {
            return this.getBandPosition();
        }), this.topOffset = external_ko_namespaceObject.computed(() => {
            const offset = 0;
            if (this.bandPosition() > 0) {
                const prevBand = this._parent.bandsHolder.bands()[this.bandPosition() - 1];
                if (prevBand) {
                    return prevBand.absolutePosition.y() + prevBand.height();
                }
            }
            if (this._parent && this._parent._control.controlType === 'DetailReportBand') {
                return this._parent['absolutePosition'].y();
            }
            else
                return 0;
        }), this.collapsed = external_ko_namespaceObject.computed({
            read: () => this.verticalBands().some(x => x.collapsed()),
            write: (newVal) => this.verticalBands().forEach(x => x.collapsed(newVal))
        }), this.selected = external_ko_namespaceObject.computed(() => {
            return this.verticalBands().some(x => x.selected());
        }), this.canResize = external_ko_namespaceObject.computed(() => {
            return this.selected() && !this.isLocked() && !this.collapsed() && !external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started();
        }), this.width = external_ko_namespaceObject.computed(() => _parent._context.pageWidth() - _parent._context.margins.left() - (!this.collapsed() ? _parent._context.margins.right() : 0)), this.leftMargin = external_ko_namespaceObject.pureComputed(() => 0 - (_parent._context.margins && _parent._context.margins.left() || 0) + 10), this.height = external_ko_namespaceObject.computed({
            read: () => {
                return this.verticalBands()[0] && this.verticalBands()[0].height() || 0;
            },
            write: (newVal) => this.verticalBands().forEach((x => x._height(newVal - markerHeight)))
        }), this._height = external_ko_namespaceObject.computed(() => { return this.verticalBands()[0] && this.verticalBands()[0]._height() || 0; }), this.focused = external_ko_namespaceObject.computed(() => {
            return this.verticalBands().some(x => x.focused());
        }), this.leftOffset = external_ko_namespaceObject.computed(() => _parent.rtlLayout() ? _parent._context.margins.right() : 0), this.grayAreaWidth = external_ko_namespaceObject.computed(() => {
            return Math.max(0, this.width() - this.getBandsWidth(this.verticalBands()));
        }), this.grayAreaLeft = external_ko_namespaceObject.computed(() => {
            const bands = this.verticalBands();
            if (!bands.length)
                return 0;
            const band = bands[bands.length - 1];
            return band.absolutePosition.x() + band._width();
        }), this.minHeight = external_ko_namespaceObject.pureComputed(() => {
            return Math.max(...this.verticalBands().map(x => (x.heightFromControls && x.heightFromControls()) || 1)) + markerHeight;
        }), this.locked = external_ko_namespaceObject.computed(() => this.isLocked()));
        let oldDelta = 0;
        this['_resize'] = (delta, oldDelta) => {
            const firstBand = this.verticalBands()[0];
            firstBand._height(firstBand._height() + delta - oldDelta);
            return delta;
        };
        this['resize'] = (params) => {
            oldDelta = this['_resize'](params.delta.dh, oldDelta);
        };
        this['stopResize'] = () => {
            oldDelta = 0;
        };
    }
    markerClick(selection, changeCollapsed = true) {
        if (selection.expectClick) {
            selection.expectClick = false;
            return;
        }
        if (!this.focused() && !selection.disabled()) {
            selection.initialize(this.verticalBands()[0]);
        }
        else {
            if (changeCollapsed)
                this.collapsed(!this.collapsed());
        }
    }
    getBandsWidth(bands) {
        return bands.reduce((acc, band, index) => acc += band._width(), 0);
    }
    _getTopOffset() {
        let top = 0;
        if (this._parent && this._parent._control.controlType === 'DetailReportBand') {
            top = this._parent['backgroundRect']().top;
        }
        if (this.bandPosition() > 0) {
            for (let i = 0; i < this.bandPosition(); i++) {
                top += this._parent.bandsHolder.bands()[i]._totalHeight();
            }
        }
        return top;
    }
    get visible() {
        return this.verticalBands().length > 0;
    }
    get zoom() { return this._parent.zoom; }
}

;// ./node_modules/devexpress-reporting/designer/bands/_bandHolder.js




class BandsHolder extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.bands);
        this.resetObservableArray(this.bands);
    }
    _createBandsMapCollection(elementModels, callbacks) {
        let position = 0;
        elementModels.peek().forEach(item => callbacks.addItem(callbacks.createItem(item), position++));
        callbacks.callMutated();
        return elementModels.subscribe((args) => {
            args.forEach((changeSet) => {
                if (changeSet.status === 'deleted') {
                    callbacks.removeItem(changeSet.value.surface);
                    callbacks.callMutated();
                }
            });
            args.forEach((changeSet) => {
                if (changeSet.status === 'added') {
                    callbacks.addItem(callbacks.createItem(changeSet.value), changeSet.index);
                    callbacks.callMutated();
                }
            });
        }, null, 'arrayChange');
    }
    _addHorizontalBand(item, index) {
        const verticalBandsPosition = this.verticalBandsContainer && this.verticalBandsContainer.bandPosition();
        if (index === undefined)
            return this.bands().push(item);
        if (verticalBandsPosition > 0 && index > verticalBandsPosition) {
            index -= this.verticalBandsContainer.verticalBands().length;
        }
        this.bands().splice(index, 0, item);
    }
    _addVerticalBand(item, index) {
        this.verticalBandsContainer.verticalBands().splice(index > 0 ? index : 0, 0, item);
    }
    initialize(bands) {
        let isVerticalChanged = false;
        let isHorizontalChanged = false;
        this._disposables.push(this._createBandsMapCollection(bands, {
            addItem: (item, index) => {
                if (isVerticalBand(item._control.controlType)) {
                    this._addVerticalBand(item, index - this.verticalBandsContainer.bandPosition());
                    isVerticalChanged = true;
                }
                else {
                    isHorizontalChanged = true;
                    this._addHorizontalBand(item, index);
                }
            },
            callMutated: () => {
                isHorizontalChanged && this.bands.valueHasMutated();
                isVerticalChanged && this.verticalBandsContainer && this.verticalBandsContainer.verticalBands.valueHasMutated();
                isHorizontalChanged = false;
                isVerticalChanged = false;
            },
            createItem: (item) => this._container._createSurface(item),
            removeItem: (item) => {
                if (isVerticalBand(item._control.controlType)) {
                    this.verticalBandsContainer.verticalBands().splice(this.verticalBandsContainer.verticalBands().indexOf(item), 1);
                    isVerticalChanged = true;
                }
                else {
                    this.bands().splice(this.bands().indexOf(item), 1);
                    isHorizontalChanged = true;
                }
            }
        }));
    }
    constructor(_container) {
        super();
        this._container = _container;
        this.bands = external_ko_namespaceObject.observableArray();
        if (_container._control.controlType === 'DevExpress.XtraReports.UI.XtraReport' || _container._control.controlType === 'DetailReportBand')
            this._disposables.push(this.verticalBandsContainer = new VerticalBandsContainerSurface(_container));
        this._disposables.push(this.multiColumn = external_ko_namespaceObject.computed(() => {
            const containerMultiColumn = _container['multiColumn'] && _container['multiColumn']();
            if (containerMultiColumn && containerMultiColumn.haveColumns()) {
                return containerMultiColumn;
            }
            else {
                const detailBand = this.bands().filter(item => item._control.controlType === 'DetailBand')[0];
                if (detailBand && detailBand.multiColumn() && detailBand.multiColumn().haveColumns())
                    return detailBand.multiColumn();
                else
                    return null;
            }
        }));
    }
    getHeight() {
        let minHeight = (this.verticalBandsContainer && this.verticalBandsContainer.height()) || 0;
        this.bands().forEach((band) => { minHeight += band.height(); });
        return minHeight;
    }
    getTotalHeight() {
        const height = this.verticalBandsContainer && this.verticalBandsContainer._height() || 0;
        return height + (this.bands() || []).reduce((acc, x) => acc + x._totalHeight(), 0);
    }
    getBandAbsolutePositionY(band) {
        let newY = 0;
        let bandIndex;
        const parentBands = external_ko_namespaceObject.unwrap(this.bands);
        if (parentBands && parentBands.length !== 0) {
            bandIndex = parentBands.indexOf(band);
            if (bandIndex === -1)
                return newY;
            if (bandIndex > 0 && parentBands[bandIndex - 1]) {
                newY = parentBands[bandIndex - 1].absolutePosition.y() + parentBands[bandIndex - 1].height();
            }
            else if (bandIndex === 0 && this._container['absolutePosition']) {
                newY = this._container['absolutePosition'].y();
            }
            if (this.verticalBandsContainer) {
                if (bandIndex === this.verticalBandsContainer.getBandPosition()) {
                    newY = this.verticalBandsContainer.topOffset() + this.verticalBandsContainer.height();
                }
            }
        }
        return newY;
    }
    checkUnderCursor() {
        let isOver = false;
        [this.bands(), this.verticalBandsContainer.verticalBands()].forEach((collection) => {
            for (let i = 0; i < collection.length; i++) {
                isOver = collection[i].underCursor().isOver;
                if (isOver)
                    return isOver;
            }
        });
        return isOver;
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/_bandUtils.js

function sortBands(band1, band2) {
    return getBandWeight(band1) - getBandWeight(band2);
}
function setMarkerWidth(bandHolder, levelCount, currentLevel = 0) {
    if (bandHolder && bandHolder.bands().length !== 0) {
        bandHolder.bands().forEach((band) => {
            band.markerWidth(bandSurfaceCollapsedHeight * (levelCount - currentLevel));
            setMarkerWidth(band.bandsHolder, levelCount, currentLevel + 1);
        });
        bandHolder.verticalBandsContainer && bandHolder.verticalBandsContainer.markerWidth(bandSurfaceCollapsedHeight * (levelCount - currentLevel));
    }
}
function getLevelCount(bandHolder) {
    let result = 0, maxLevelCount = 0;
    if (!bandHolder)
        return result;
    if (bandHolder.bands().length !== 0) {
        bandHolder.bands().forEach((band) => {
            const levelCount = getLevelCount(band.bandsHolder);
            if (levelCount > maxLevelCount) {
                maxLevelCount = levelCount;
            }
        });
        result = maxLevelCount + 1;
    }
    else if (bandHolder.verticalBandsContainer && bandHolder.verticalBandsContainer.visible) {
        result = maxLevelCount + 1;
    }
    return result;
}
function insertBand(bands, newBand) {
    if (newBand.controlType === 'GroupHeaderBand' || newBand.controlType === 'GroupFooterBand' || newBand.controlType === 'DetailReportBand' || newBand.controlType === 'SubBand') {
        const array = generateArray(bands(), newBand.controlType);
        let level = array.length;
        for (let i = 0; i < array.length; i++) {
            if (!array[i]) {
                level = i;
                break;
            }
        }
        newBand._level(level);
    }
    insertBandSorted(bands, newBand);
}
function insertBandSorted(bands, newBand) {
    if (newBand) {
        const cloneBands = bands().slice(0);
        const previousBandIndex = bands().indexOf(newBand);
        if (previousBandIndex === -1) {
            cloneBands.push(newBand);
        }
        cloneBands.sort(sortBands);
        const index = cloneBands.indexOf(newBand);
        if (previousBandIndex !== -1) {
            bands.splice(previousBandIndex, 1);
        }
        bands.splice(index, 0, newBand);
    }
}
const bandsWeight = {
    'TopMarginBand': 100,
    'ReportHeaderBand': 200,
    'PageHeaderBand': 300,
    'GroupHeaderBand': 400,
    'DetailBand': 500,
    'VerticalHeaderBand': 500,
    'VerticalDetailBand': 600,
    'VerticalTotalBand': 700,
    'DetailReportBand': 800,
    'GroupFooterBand': 900,
    'ReportFooterBand': 1000,
    'PageFooterBand': 1100,
    'BottomMarginBand': 1200
};
function getBandWeight(band) {
    if (band.controlType === 'GroupHeaderBand') {
        return bandsWeight[band.controlType] - (band['level']() || 0);
    }
    if (band.controlType === 'GroupFooterBand') {
        return bandsWeight[band.controlType] + (band['level']() || 0);
    }
    if (band.controlType === 'DetailReportBand') {
        return bandsWeight[band.controlType] + (band['level']() || -1);
    }
    return bandsWeight[band.controlType];
}
function initGroupIndexes(largeGroupBandCollection, smallGroupBandCollection) {
    const replaces = {};
    const busyIndexes = [];
    const findClosestIndex = (currentIndex) => {
        let index = currentIndex;
        const findClosestAvailableIndex = (currentIndex, inc) => {
            const newIndex = currentIndex + inc;
            if (newIndex === largeGroupBandCollection.length || newIndex === -1) {
                return undefined;
            }
            if (busyIndexes.indexOf(currentIndex + inc) !== -1) {
                return newIndex;
            }
            else {
                return findClosestAvailableIndex(newIndex, inc);
            }
        };
        if (busyIndexes.indexOf(currentIndex) !== -1) {
            index = findClosestAvailableIndex(currentIndex, -1);
            if (index === undefined)
                index = findClosestAvailableIndex(currentIndex, 1);
        }
        return index;
    };
    for (let i = 0; i < largeGroupBandCollection.length; i++) {
        const currentLevel = largeGroupBandCollection[i]._level;
        if (!replaces[currentLevel()])
            replaces[currentLevel()] = [i];
        else {
            replaces[currentLevel()].push(i);
        }
        currentLevel(i);
    }
    for (let i = 0; i < smallGroupBandCollection.length; i++) {
        let index = i;
        const currentLevel = smallGroupBandCollection[i]._level;
        if (replaces[currentLevel()] && replaces[currentLevel()].length > 0) {
            index = replaces[currentLevel()].splice(0, 1)[0];
        }
        else if (currentLevel() < largeGroupBandCollection.length) {
            index = findClosestIndex(currentLevel());
        }
        else {
            index = findClosestIndex(i);
        }
        currentLevel(index);
        busyIndexes.push(index);
    }
}
function initLevels(bands) {
    ['DetailReportBand', 'SubBand'].map(type => bands.filter(b => b.controlType === type).sort(sortBands)).forEach(items => {
        for (let i = 0; i < items.length; i++) {
            items[i]._level(i);
        }
    });
    const groupHeaderBands = bands.filter(b => b.controlType === 'GroupHeaderBand').sort(sortBands).reverse();
    const groupFooterBands = bands.filter(b => b.controlType === 'GroupFooterBand').sort(sortBands);
    if (groupFooterBands.length > groupHeaderBands.length) {
        initGroupIndexes(groupFooterBands, groupHeaderBands);
    }
    else {
        initGroupIndexes(groupHeaderBands, groupFooterBands);
    }
}
function generateArray(allbands, controlType, newLevel) {
    let array = allbands.filter(x => x.controlType === controlType);
    newLevel = newLevel || array.length - 1;
    array = controlType === 'GroupHeaderBand' ? array.reverse() : array;
    const length = (array.length > 0 && array[array.length - 1].level() > newLevel ? array[array.length - 1].level() : newLevel) + 1;
    let j = 0;
    const fakeArray = [];
    for (let i = 0; i < length; i++) {
        if (j < array.length && array[j]._level() === i) {
            fakeArray.push(array[j]);
            j++;
        }
        else {
            fakeArray.push(undefined);
        }
    }
    return fakeArray;
}
function _getUnitAbsoluteRect(bandSurface, getPositionInParent) {
    const parentAbsoluteRect = bandSurface.parent && bandSurface.parent['_unitAbsoluteRect'];
    if (parentAbsoluteRect) {
        const _unitPosition = getPositionInParent();
        return {
            top: parentAbsoluteRect.top + _unitPosition.y(), left: parentAbsoluteRect.left + _unitPosition.x(),
            right: parentAbsoluteRect.left + _unitPosition.x() + bandSurface._control.size.width(), bottom: parentAbsoluteRect.top + _unitPosition.y() + bandSurface._control.size.height(),
            width: bandSurface._control.size.width() - bandSurface['_getGrayArea'](), height: bandSurface._control.size.height()
        };
    }
    else {
        return {
            top: 0, left: 0,
            right: bandSurface._control.size.width(), bottom: bandSurface._control.size.height(),
            width: bandSurface._control.size.width() - bandSurface['_getGrayArea'](), height: bandSurface._control.size.height()
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/_printAcrossBandsPlaceHolder.js



class PrintAcrossBandsPlaceHolder extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    findNextUntransparentSiblingBand(band) {
        const currentBandIndex = band.parent.bandsHolder.bands().indexOf(band);
        return band.parent.bandsHolder.bands().filter((band, index) => (!band.printAcrossBands || band.printAcrossBands && !band.printAcrossBands()) && index > currentBandIndex)[0];
    }
    findFirstNonAcrossBand() {
        const isSubband = this.bandModel.controlType === 'SubBand';
        const bandHolder = isSubband ? this.band.parent.parent['bandsHolder'] : this.band.parent.bandsHolder;
        let bandsWithoutAcross = [];
        if (this.bandModel.controlType === 'GroupHeaderBand' || (isSubband && this.bandModel.parentModel().controlType === 'GroupHeaderBand')) {
            const groupHeaderLevel = isSubband ? this.bandModel.parentModel()['level']() : this.bandModel.level();
            bandsWithoutAcross = bandHolder.bands().filter(_band => (_band.getControlModel().controlType === 'GroupFooterBand' && _band.getControlModel().level() > groupHeaderLevel)
                || _band.getControlModel().controlType === 'PageFooterBand'
                || _band.getControlModel().controlType === 'ReportFooterBand'
                || _band.getControlModel().controlType === 'BottomMarginBand');
        }
        else if (this.bandModel.controlType === 'PageHeaderBand' || (isSubband && this.bandModel.parentModel().controlType === 'PageHeaderBand')) {
            bandsWithoutAcross = bandHolder.bands().filter(_band => (_band.getControlModel().controlType === 'BottomMarginBand'));
        }
        if (bandsWithoutAcross.length > 0) {
            return bandsWithoutAcross[0];
        }
    }
    constructor(band) {
        super();
        this.band = band;
        this._disposables.push(this.isVisible = external_ko_namespaceObject.computed(() => {
            return band.printAcrossBands() && !this.bandModel.parentModel().bands().filter(x => isVerticalBand(x.controlType)).length;
        }), this.absolutePositionY = external_ko_namespaceObject.computed(() => {
            const subbandsWithoutPrintAcrossBands = band.bandsHolder.bands().filter(subband => !subband.printAcrossBands());
            if (subbandsWithoutPrintAcrossBands.length > 0) {
                return subbandsWithoutPrintAcrossBands[0].absolutePosition.y();
            }
            let nextUntransparentSiblingBand = this.findNextUntransparentSiblingBand(band);
            if (!nextUntransparentSiblingBand) {
                nextUntransparentSiblingBand = this.findNextUntransparentSiblingBand(band.parent);
            }
            return nextUntransparentSiblingBand && nextUntransparentSiblingBand.absolutePosition.y();
        }), this.height = external_ko_namespaceObject.computed(() => {
            const firstBandWithoutAcross = this.findFirstNonAcrossBand();
            return firstBandWithoutAcross ? (firstBandWithoutAcross.absolutePosition.y() - this.absolutePositionY()) : 0;
        }));
    }
    get bandModel() {
        return this.band.getControlModel();
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/xrBand.js
















class BandViewModel extends XRReportElementViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.bands);
        this.disposeObservableArray(this.controls);
        this.resetObservableArray(this.bands);
        this.resetObservableArray(this.controls);
    }
    createChildsArray(band, serializer) {
        const subBands = [];
        if (band.SubBands) {
            Object.keys(band.SubBands).forEach((key) => {
                subBands.push(this.getControlFactory().createControl({
                    '@ControlType': 'SubBand',
                    ...band.SubBands[key]
                }, this, serializer));
            });
        }
        if (subBands) {
            initLevels(subBands);
            subBands.sort(sortBands);
        }
        this.bands = external_ko_namespaceObject.observableArray(subBands);
        this.controls = (0,external_DevExpress_Analytics_Internal_namespaceObject.deserializeChildArray)(band.Controls, this, (control) => { return this.createControl(control, serializer); });
    }
    initHeight() {
        let _heightFromControls = 0;
        this._disposables.push(this.heightFromControls = external_ko_namespaceObject.pureComputed(() => {
            _heightFromControls = 0;
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                for (let i = 0; i < this.controls().length; i++) {
                    if (!this.controls()[i].update()) {
                        const controlY = this.controls()[i].anchorVertical && this.controls()[i].anchorVertical() === 'Bottom' && this.controls()[i].vertAnchoring.state !== Anchoring.states.fromControls ? 0 : this.controls()[i].location.y(), controlHeight = this.controls()[i].anchorVertical && this.controls()[i].anchorVertical() === 'Both' && this.controls()[i].vertAnchoring.state !== Anchoring.states.fromControls ? 1 : this.controls()[i].size.height(), controlBottom = controlY + controlHeight;
                        if (controlBottom > _heightFromControls) {
                            _heightFromControls = controlBottom;
                        }
                    }
                }
                _heightFromControls = (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(_heightFromControls);
                this.height(Math.max(_heightFromControls, this.height()));
                _heightFromControls = _heightFromControls > 0 ? _heightFromControls : 0;
            }
            return _heightFromControls;
        }));
    }
    preInit(band, parent, serializer) {
    }
    _getMaxLevel() {
        const getSiblingBandsCount = (controlType) => this.parentModel().bands().filter(x => {
            return x.controlType === controlType;
        }).length;
        if (this.controlType === 'GroupHeaderBand' || this.controlType === 'GroupFooterBand') {
            return Math.max(getSiblingBandsCount('GroupHeaderBand'), getSiblingBandsCount('GroupFooterBand')) - 1;
        }
        return getSiblingBandsCount(this.controlType) - 1;
    }
    constructor(band, parent, serializer) {
        super(band, parent, serializer);
        this.preInit(band, parent, serializer);
        this.createChildsArray(band, serializer);
        this.initHeight();
        this.size.height = this.height;
        if (this.level) {
            this._disposables.push(this.maxLevel = external_ko_namespaceObject.pureComputed(() => this._getMaxLevel()));
            this._level = external_ko_namespaceObject.observable(this.level.peek());
            this._disposables.push(this.level = external_ko_namespaceObject.pureComputed({
                read: () => { return this._level(); },
                write: (newVal) => {
                    newVal > this.maxLevel() && (newVal = this.maxLevel());
                    const parentModel = this.parentModel();
                    const parentBands = parentModel.bands;
                    const groupArray = generateArray(parentBands(), this.controlType, newVal);
                    groupArray.splice(newVal, 0, groupArray.splice(this._level(), 1)[0]);
                    this._level(newVal);
                    for (let i = newVal + 1, level = newVal + 1; i < groupArray.length; i++) {
                        groupArray[i] && groupArray[i]._level(level++);
                    }
                    for (let i = newVal - 1, level = newVal - 1; i >= 0; i--) {
                        groupArray[i] && groupArray[i]._level(level--);
                    }
                    parentBands.sort((left, right) => {
                        if (left.controlType === this.controlType && right.controlType === this.controlType) {
                            return this.controlType === 'GroupHeaderBand' ? right.level() - left.level() : left.level() - right.level();
                        }
                        return 0;
                    });
                }
            }));
        }
        const stylesObject = createObjectFromInfo(this, stylesInfo);
        if (stylesObject) {
            this[stylesObj.propertyName] = stylesObject;
        }
    }
    addChild(control) {
        if (control instanceof BandViewModel && control.isAllowedParent(this)) {
            insertBand(this.bands, control);
            return;
        }
        if (control.controlType === 'XRTableOfContents' && isHeaderOrFooterBandType(this)) {
            const tocAlreadyExists = !!getExistTableOfContents(this);
            if (tocAlreadyExists) {
                throw new Error('Only one TOC can be added!!!');
            }
        }
        super.addChild(control);
    }
    getPath(propertyName) {
        if (propertyName === 'dataMember') {
            return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this['dataSource']());
        }
        else if (propertyName === 'groupFields') {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.parentModel().getPath('dataMember'), this.parentModel()['dataMember']());
        }
        return super.getPath(propertyName);
    }
    initSize() {
        this.size.height = this.height;
        this._disposables.push(this.size.width = external_ko_namespaceObject.computed({
            read: () => {
                return this.root.size.width() - (this.root['margins'] ? ((this.root['margins'].left && this.root['margins'].left()) + (this.root['margins'].right && this.root['margins'].right())) : 0);
            }, write: (newVal) => void 0
        }));
        this.size.isPropertyDisabled = (name) => { return name === 'width' || name === 'height' && external_ko_namespaceObject.unwrap(controlsFactory().getPropertyInfo('DetailBand', 'height').disabled); };
        this.size.isPropertyVisible = (name) => { return name !== 'height' || external_ko_namespaceObject.unwrap(controlsFactory().getPropertyInfo('DetailBand', 'height').visible) !== false; };
    }
    initialize() {
        super.initialize();
        this.initSize();
    }
    removeChild(control) {
        if (control instanceof BandViewModel) {
            if (this.bands().indexOf(control) !== -1) {
                this.bands.splice(this.bands().indexOf(control), 1);
            }
        }
        else {
            super.removeChild(control);
        }
    }
    static isReorderingBand(control) {
        return ['GroupHeaderBand', 'GroupFooterBand', 'DetailReportBand', 'SubBand'].indexOf(control.controlType) > -1;
    }
    isAllowedParent(target) {
        return false;
    }
    _isHeaderBandTypeOrThemSubBands(band) {
        const _isHeader = (band) => band.controlType === 'PageHeaderBand' || band.controlType === 'GroupHeaderBand';
        return _isHeader(band) || (this.controlType === 'SubBand' && _isHeader(band.parentModel()));
    }
    isPropertyVisible(name) {
        if (name === printAcrossBands.propertyName) {
            return this._isHeaderBandTypeOrThemSubBands(this);
        }
        else if (name === pageBreak.propertyName) {
            return this.controlType === 'SubBand' || !this._isHeaderBandTypeOrThemSubBands(this) || this[printAcrossBands.propertyName];
        }
        else {
            return super.isPropertyVisible(name);
        }
    }
    isPropertyDisabled(name) {
        if (name === 'dataMember' && this['dataSource']) {
            return this['dataSource']() === null;
        }
        else if (name === repeatEveryPage.propertyName) {
            return this[printAcrossBands.propertyName] && this[printAcrossBands.propertyName]();
        }
        else if (name === printAcrossBands.propertyName) {
            return !!this[repeatEveryPage.propertyName] && this[repeatEveryPage.propertyName]() ||
                !!this.parentModel().bands().filter(x => isVerticalBand(x.controlType)).length ||
                (!!this[pageBreak.propertyName] && (this[pageBreak.propertyName]() === 'AfterBand' || this[pageBreak.propertyName]() === 'AfterBandExceptLastEntry'));
        }
        else {
            return super.isPropertyDisabled(name);
        }
    }
}
BandViewModel.unitProperties = ['height'];

class BandSurface extends external_DevExpress_Analytics_Elements_namespaceObject.SurfaceElementBase {
    _getMarginWidth(margins, rtl, isFarMargin = true) {
        const marginWidht = margins ? (isFarMargin && this._context.rtl() ? margins.left && margins.left() : margins.right && margins.right()) || 0 : 0;
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(marginWidht, this._context.measureUnit(), this._context.zoom());
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.controls);
        this.resetObservableArray(this.controls);
    }
    _isHeaderBandTypeOrThemSubBands() {
        const band = this.getControlModel();
        const _isHeader = (band) => band.controlType === 'PageHeaderBand' || band.controlType === 'GroupHeaderBand';
        return _isHeader(band) || (band.controlType === 'SubBand' && _isHeader(band.parentModel()));
    }
    _getUnitPositionInParent() {
        let isVerticalBandTakenIntoAccount = false;
        const neighbors = this._control.parentModel().bands();
        const absoluteY = neighbors
            .slice(0, neighbors.indexOf(this._control))
            .reduce((sum, currentBandModel) => {
            if (isVerticalBand(currentBandModel.controlType) && isVerticalBandTakenIntoAccount)
                return sum;
            else if (isVerticalBand(currentBandModel.controlType))
                isVerticalBandTakenIntoAccount = true;
            return sum + currentBandModel.size.height();
        }, 0);
        return new external_DevExpress_Analytics_Elements_namespaceObject.Point(0, absoluteY);
    }
    get _unitAbsoluteRect() {
        return _getUnitAbsoluteRect(this, () => this._getUnitPositionInParent());
    }
    _getGrayArea() {
        if (this.multiColumn && this.multiColumn()) {
            return this.multiColumn().grayAreaWidth() + (this.multiColumn().columnSpacing() || 0);
        }
        return 0;
    }
    createChildCollection(band) {
        this._disposables.push(this.bandsHolder = new BandsHolder(this));
        this.bandsHolder.initialize(band.bands);
    }
    createUnderCursor() {
        this.underCursor = external_ko_namespaceObject.observable(new external_DevExpress_Analytics_Internal_namespaceObject.HoverInfo());
    }
    getTotalHeight() {
        return this._height() + this.bandsHolder.getTotalHeight();
    }
    getHeight() {
        if (this.collapsed())
            return bandSurfaceCollapsedHeight;
        else
            return this._height() + this.subBandsHeight();
    }
    getHasOwnRuler() {
        return true;
    }
    getBackgroundRect() {
        let top = 0, bottom, height = this._height();
        const parent = this.parent;
        if (!parent) {
            return { top, bottom, height };
        }
        const parentBands = external_ko_namespaceObject.unwrap(parent.bandsHolder.bands);
        const parentBackgroundRect = external_ko_namespaceObject.unwrap(parent.backgroundRect);
        if (parentBackgroundRect) {
            top += parentBackgroundRect.top;
            bottom = parentBackgroundRect.bottom;
        }
        else {
            const pageHeight = parent.pageHeight();
            const bottomMargin = parent.margins.bottom();
            const footer = parentBands.filter(function (x) { return x._control.controlType === 'PageFooterBand'; })[0];
            bottom = pageHeight - bottomMargin;
            if (footer)
                bottom -= footer._totalHeight();
        }
        const bandIndex = parentBands.indexOf(this);
        if (parent.bandsHolder.verticalBandsContainer.visible && parent.bandsHolder.verticalBandsContainer.bandPosition() <= bandIndex) {
            top += parent.bandsHolder.verticalBandsContainer._height();
        }
        for (let i = 0; i < bandIndex; i++) {
            top += parentBands[i]._totalHeight();
        }
        if (top > bottom)
            height = 0;
        else if (top + height > bottom)
            height = bottom - top;
        return { top, bottom, height };
    }
    _initMultiColumn() {
        this._disposables.push(this.multiColumn = external_ko_namespaceObject.computed(() => {
            const currentMultiColumn = this.parent && this.parent.bandsHolder.multiColumn();
            const parentMultiColumn = this.parent && !(this.parent['_control'].controlType === 'DevExpress.XtraReports.UI.XtraReport') && this.parent.parent.bandsHolder.multiColumn();
            if (parentMultiColumn && parentMultiColumn.haveColumns())
                return parentMultiColumn;
            else if (currentMultiColumn && currentMultiColumn.haveColumns()
                && (this.getControlModel().controlType === 'GroupHeaderBand' ||
                    this.getControlModel().controlType === 'GroupFooterBand' ||
                    this.getControlModel().controlType === 'DetailReportBand')) {
                return currentMultiColumn;
            }
        }));
    }
    constructor(band, context, unitProperties = BandSurface._unitProperties) {
        super(band, context, unitProperties);
        this.isSomeParentCollapsed = external_ko_namespaceObject.observable(false);
        this._resize = (delta, oldDelta) => {
            this._height(this._height() + delta - oldDelta);
            return delta;
        };
        this.showMarker = true;
        this.templateName = 'dxrd-band';
        this.selectionTemplate = 'dxrd-band-selection';
        this.vrulerTemplate = 'dxrd-band-vruler';
        this.contentSelectionTemplate = 'dxrd-bandselection-content';
        this.leftMarginTemplate = 'dxrd-band-coordinate-grid';
        this.leftMarginSelectionTemplate = 'dxrd-band-coordinate-grid-selection';
        this.allowMultiselect = false;
        this.markerWidth = external_ko_namespaceObject.observable(bandSurfaceCollapsedHeight);
        this.collapsed = external_ko_namespaceObject.observable(false);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this._width(context.pageWidth() - context.margins.left());
        }));
        this._disposables.push(this.collapsed = external_ko_namespaceObject.pureComputed({
            read: () => {
                return !band.expanded();
            },
            write: (newVal) => {
                band.expanded(!newVal);
            }
        }));
        this._disposables.push(this._totalHeight = external_ko_namespaceObject.pureComputed(() => this.getTotalHeight()));
        this.name = band.name;
        const subBandsHeight = 0;
        this._disposables.push(this.subBandsHeight = external_ko_namespaceObject.pureComputed(() => this.bandsHolder.getHeight()));
        this._disposables.push(this.heightWithoutSubBands = external_ko_namespaceObject.pureComputed(() => {
            return this.height() - this.subBandsHeight();
        }));
        this._disposables.push(this.height = external_ko_namespaceObject.pureComputed(() => this.getHeight()));
        this._initMultiColumn();
        this.createChildCollection(band);
        this.createUnderCursor();
        this._disposables.push(this.hasOwnRuler = external_ko_namespaceObject.pureComputed(() => this.getHasOwnRuler()));
        this._disposables.push(this.rulerHeight = external_ko_namespaceObject.pureComputed(() => {
            return this.collapsed() ? bandSurfaceCollapsedHeight : (this.heightWithoutSubBands());
        }));
        const root = this.getControlModel().root;
        const nearMarginWidth = () => root.margins.right() + root.margins.left();
        this.coordinateGridOptions = {
            left: external_ko_namespaceObject.pureComputed(() => {
                return this.rtlLayout() ? this._context.margins.right() : 0;
            }),
            height: this.getControlModel().height,
            snapGridSize: root.snapGridSize,
            zoom: context.zoom,
            measureUnit: context.measureUnit,
            width: external_ko_namespaceObject.pureComputed(() => root.pageWidth() - nearMarginWidth()),
            flip: context.rtl
        };
        let oldDelta = 0;
        this['resize'] = (params) => {
            oldDelta = this._resize(params.delta.dh, oldDelta);
        };
        this['resizeTheBand'] = (params) => {
            oldDelta = this._resize(params.delta.dh, oldDelta);
        };
        this['stopResize'] = () => {
            oldDelta = 0;
        };
        this._disposables.push(this['markerClass'] = external_ko_namespaceObject.pureComputed(() => {
            let cssClass = 'dxrd-band-marker-body';
            if (band.controlType.toLowerCase().indexOf('header') !== -1 || band.controlType === 'TopMarginBand') {
                cssClass = 'dxrd-band-marker-header';
            }
            else if (band.controlType.toLowerCase().indexOf('footer') !== -1 || band.controlType === 'BottomMarginBand') {
                cssClass = 'dxrd-band-marker-footer';
            }
            if (this.focused()) {
                return cssClass += '-focused';
            }
            return cssClass;
        }));
        this._disposables.push(this['leftMargin'] = external_ko_namespaceObject.pureComputed(() => {
            return 0 - (context['margins'] && context.margins.left() || 0) + 10;
        }));
        this._disposables.push(this.canResize = external_ko_namespaceObject.computed(() => {
            return this.selected() && !this.locked && !this.collapsed() && !external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started();
        }));
        this._disposables.push(this.minHeight = external_ko_namespaceObject.computed(() => {
            const minHeight = (this.heightFromControls && this.heightFromControls() || 0) + this.subBandsHeight();
            return minHeight || 1;
        }));
        this.getUsefulRect = () => {
            let usefulWidth = this.rect().width;
            const margins = this.getControlModel().root['margins'];
            usefulWidth -= this._getMarginWidth(margins, this._context.rtl());
            usefulWidth -= this._getGrayArea();
            if (this.rtlLayout()) {
                const nearMarginWidth = this._getMarginWidth(margins, this._context.rtl(), false);
                const left = this.container().rect().width - usefulWidth - nearMarginWidth;
                return { top: 0, left: left, right: usefulWidth + nearMarginWidth, bottom: this.height(), width: usefulWidth, height: this.height() };
            }
            else {
                return { top: 0, left: 0, right: usefulWidth, bottom: this.height(), width: usefulWidth, height: this.height() };
            }
        };
        this._disposables.push(this.backgroundRect = external_ko_namespaceObject.pureComputed(() => this.getBackgroundRect()));
        if (this._isHeaderBandTypeOrThemSubBands()) {
            this.printAcrossBands = band['printAcrossBands'];
            this._disposables.push(this.printAcrossBandsPlaceHolder = new PrintAcrossBandsPlaceHolder(this));
        }
    }
    getAbsolutePositionY() {
        return this.parent.bandsHolder.getBandAbsolutePositionY(this);
    }
    updateAbsolutePosition() {
        if (!this.parent)
            return;
        const parent = this.parent;
        this.absolutePosition.x(0);
        if (external_ko_namespaceObject.unwrap(parent['collapsed'])) {
            this.absolutePosition.y(parent['absolutePosition'].y());
            return;
        }
        this.absolutePosition.y(this.getAbsolutePositionY());
    }
    markerClick(selection, changeCollapsed = true) {
        if (selection.expectClick) {
            selection.expectClick = false;
            return;
        }
        if (!this.focused() && !selection.disabled()) {
            selection.initialize(this);
        }
        else {
            if (changeCollapsed)
                this.collapsed(!this.collapsed());
        }
    }
    canDrop() { return super.canDrop() && !this.collapsed(); }
    get parent() {
        return this._getParent();
    }
    get zoom() { return this.getRoot().zoom; }
    checkParent(surfaceParent) {
        return false;
    }
}
BandSurface._unitProperties = {
    _height: (o) => { return o.height; },
    heightFromControls: (o) => { return o.heightFromControls; }
};


;// ./node_modules/devexpress-reporting/designer/bands/xrVerticalBand.js







class VerticalBandViewModel extends BandViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.controls);
        this.resetObservableArray(this.controls);
    }
    initSize() {
        this.size.height = this.height;
        this.size.width = this.width;
    }
    preInit(band, parent, serializer) {
    }
    constructor(band, parent, serializer) {
        super(band, parent, serializer);
        this.preInit(band, parent, serializer);
        let _widthFromControls = 0;
        this._disposables.push(this.widthFromControls = external_ko_namespaceObject.pureComputed(() => {
            _widthFromControls = 0;
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                _widthFromControls = this.controls().length > 0 ? Math.max(...this.controls().filter(x => !x.update()).map(x => x.location.x() + x.size.width())) : 1;
                _widthFromControls = (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(_widthFromControls);
                this.width(Math.max(_widthFromControls, this.width()));
                _widthFromControls = _widthFromControls > 0 ? _widthFromControls : 0;
            }
            return _widthFromControls;
        }));
        this._disposables.push(this.height.subscribe((newValue) => {
            if (this.update())
                return;
            const verticalBands = this.parentModel() && (this.parentModel()['bands']() || []).filter(x => x instanceof VerticalBandViewModel);
            const minValue = Math.max(...verticalBands.map(x => x.heightFromControls()));
            if (newValue < minValue)
                newValue = minValue;
            verticalBands.forEach(x => {
                x.update(true);
                x.height(newValue);
                x.update(false);
            });
        }));
    }
}
VerticalBandViewModel.unitProperties = [].concat(['width'], BandViewModel.unitProperties);

class VerticalBandSurface extends external_DevExpress_Analytics_Elements_namespaceObject.SurfaceElementBase {
    _getRtlAbsolutePositionX(bandIndex, bands) {
        const allBandsWidth = this.verticalBandsContainer.getBandsWidth(bands);
        if (bandIndex !== 0) {
            return bands[bandIndex - 1].absolutePosition.x() - bands[bandIndex]._width();
        }
        else if (allBandsWidth > this.verticalBandsContainer.width()) {
            return bands.reduce((acc, band, index) => acc += (index === 0 ? 0 : band._width()), 0);
        }
        else {
            return this.verticalBandsContainer.width() - bands[bandIndex]._width();
        }
    }
    _getGrayArea() {
        return 0;
    }
    _getUnitPositionInParent() {
        const neighbors = this._control.parentModel().bands();
        const position = neighbors
            .slice(0, neighbors.indexOf(this._control))
            .reduce((previousValue, currentBand) => {
            if (currentBand instanceof VerticalBandViewModel)
                previousValue.x += currentBand.size.width();
            else
                previousValue.y += currentBand.size.height();
            return previousValue;
        }, { x: 0, y: 0 });
        return new external_DevExpress_Analytics_Elements_namespaceObject.Point(position.x, position.y);
    }
    get _unitAbsoluteRect() {
        return _getUnitAbsoluteRect(this, () => this._getUnitPositionInParent());
    }
    constructor(band, context, unitProperties = VerticalBandSurface._unitProperties) {
        super(band, context, unitProperties);
        this.isSomeParentCollapsed = external_ko_namespaceObject.observable(false);
        this._resize = (delta, oldDelta) => {
            const width = Math.max(this._width() + delta - oldDelta, this.minimumWidth());
            this._width(width);
            return delta;
        };
        this.resizeHandles = external_ko_namespaceObject.computed(() => {
            return this.rtlLayout() ? 'w' : 'e';
        });
        this.templateName = 'dxrd-vertical-band';
        this.selectiontemplate = 'dxrd-vertical-band-selection';
        this.contentSelectionTemplate = 'dxrd-vertical-band-selection-content';
        this._disposables.push(this.collapsed = external_ko_namespaceObject.pureComputed({
            read: () => {
                return !band.expanded();
            },
            write: (newVal) => {
                band.expanded(!newVal);
            }
        }));
        this.coordinateGridOptions = {
            height: band.height,
            snapGridSize: band.root.snapGridSize,
            width: band.width,
            zoom: context.zoom,
            measureUnit: context.measureUnit,
            flip: context.rtl
        };
        this.name = band.name;
        this.height = external_ko_namespaceObject.pureComputed(() => {
            if (this.collapsed())
                return bandSurfaceCollapsedHeight;
            return this._height() + markerHeight;
        });
        this._disposables.push(this.backgroundRect = external_ko_namespaceObject.pureComputed(() => {
            const top = this.verticalBandsContainer._getTopOffset();
            return {
                top: top,
                left: this.absolutePosition.x(),
                height: this._height(),
                width: this._width()
            };
        }));
        let oldDelta = 0;
        this['resize'] = (params) => {
            if (this.rtlLayout() && params.delta.dx) {
                oldDelta = this._resize(-1 * params.delta.dx, oldDelta);
            }
            else if (params.delta.dh) {
                oldDelta = this.verticalBandsContainer['_resize'](params.delta.dh, oldDelta);
            }
            else {
                oldDelta = this._resize(params.delta.dw, oldDelta);
            }
        };
        this['stopResize'] = () => {
            oldDelta = 0;
        };
        this._disposables.push(this.canResize = external_ko_namespaceObject.computed(() => {
            return this.selected() && !this.locked && !external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started();
        }));
        this.getUsefulRect = () => {
            return {
                top: 0,
                left: 0,
                right: this._width(),
                bottom: this._height(),
                width: this._width(),
                height: this._height()
            };
        };
        let x = this.underCursor().x;
        const self = this;
        const createCursor = (newCursor) => {
            const cursor = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, newCursor);
            delete cursor.x;
            Object.defineProperty(cursor, 'x', {
                get() {
                    return x;
                },
                set(newVal) {
                    x = newVal + self.verticalBandsContainer.scrollOffset();
                },
                configurable: true
            });
            return cursor;
        };
        let underCursor = createCursor(this.underCursor());
        this.underCursor = ((newVal) => {
            if (!newVal)
                return underCursor;
            x = newVal.x;
            underCursor = createCursor(newVal);
        });
        this._disposables.push(this.resizeHandles);
    }
    getAbsolutePositionX() {
        let newX = 0;
        let bandIndex;
        const parentBands = external_ko_namespaceObject.unwrap(this.verticalBandsContainer.verticalBands);
        if (parentBands && parentBands.length !== 0) {
            bandIndex = parentBands.indexOf(this);
            if (bandIndex === -1)
                return 0;
            if (this.rtlLayout()) {
                newX = this._getRtlAbsolutePositionX(bandIndex, parentBands);
            }
            else if (bandIndex > 0 && parentBands[bandIndex - 1])
                newX = parentBands[bandIndex - 1].absolutePosition.x() + parentBands[bandIndex - 1]._width();
        }
        return newX;
    }
    updateAbsolutePosition() {
        if (!this.parent)
            return;
        this.absolutePosition.x(this.getAbsolutePositionX());
        this.absolutePosition.y(this.verticalBandsContainer.topOffset() + markerHeight);
    }
    minimumHeight() {
        return this.verticalBandsContainer.minHeight && this.verticalBandsContainer.minHeight();
    }
    minimumWidth() {
        return this.widthFromControls && this.widthFromControls();
    }
    get parent() {
        return this._getParent();
    }
    get verticalBandsContainer() {
        return this.parent.bandsHolder.verticalBandsContainer;
    }
}
VerticalBandSurface._unitProperties = {
    _width: (x) => x.width,
    _height: (x) => x.height,
    heightFromControls: (o) => { return o.heightFromControls; },
    widthFromControls: (o) => { return o.widthFromControls; }
};


;// ./node_modules/devexpress-reporting/designer/controls/xrControl.js















class XRControlViewModel extends XRReportElementViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.controls);
        this.resetObservableArray(this.controls);
    }
    anchoring(parent) {
        if (parent) {
            this.vertAnchoring = new VerticalAcnhoring(parent.size.height, this, this.anchorVertical);
            this.horAnchoring = new HorizontalAnchoring(parent.size.width, this, this.anchorHorizontal);
            this._disposables.push(this.vertAnchoring);
            this._disposables.push(this.horAnchoring);
        }
    }
    constructor(control, parent, serializer) {
        super(control, parent, serializer);
        if (this.text) {
            this.textArea = this.text;
        }
        this.controls = (0,external_DevExpress_Analytics_Internal_namespaceObject.deserializeChildArray)(control.Controls, this, (childControl) => { return this.createControl(childControl, serializer); });
        if (this.anchorVertical || this.anchorHorizontal) {
            this.anchoring(parent);
            this._disposables.push(this.parentModel.subscribe((newParent) => {
                if (this.vertAnchoring && this.horAnchoring && newParent) {
                    this.vertAnchoring.start(newParent.size.height, this);
                    this.horAnchoring.start(newParent.size.width, this);
                }
                else {
                    this.anchoring(newParent);
                }
            }));
        }
        if (this.interactiveSorting) {
            this.interactiveSorting = new SortingOptions(control['InteractiveSorting'], this.root, serializer);
            this._disposables.push(this.interactiveSorting);
        }
        this._disposables.push(this.hasBindings = external_ko_namespaceObject.pureComputed(() => {
            const bindings = this.dataBindings && this.dataBindings();
            return !!bindings && bindings.filter((dataBinding) => { return !dataBinding.isEmpty(); }).length > 0 || this.hasExpressionBindings();
        }));
        const stylesObject = createObjectFromInfo(this, stylesInfo);
        if (stylesObject) {
            this[stylesObj.propertyName] = stylesObject;
        }
        if (this['Summary'])
            this['Summary'].isPropertyVisible = (propertyName) => {
                return propertyName === 'Func' ? this.isPropertyVisible('dataBindings') : true;
            };
        if (this.textFormatString) {
            const binding = this['dataBindings'] && this['dataBindings']().filter(binding => binding.propertyName() === 'Text')[0];
            let summaryFormatString = null;
            let bindingFormatString = null;
            this['_textFormatString'] = external_ko_namespaceObject.observable(this.textFormatString.peek());
            [summaryFormatString, bindingFormatString] = [this['Summary'], binding].map(obj => {
                if (obj && obj['formatString']) {
                    obj['_formatString'] = external_ko_namespaceObject.observable(obj['formatString'].peek());
                    this._disposables.push(obj['formatString'] = external_ko_namespaceObject.computed({
                        read: () => this['_textFormatString']() ||
                            obj['_formatString'](),
                        write: x => { this.textFormatString(x); }
                    }));
                    return obj['_formatString'];
                }
            });
            this._disposables.push(this.textFormatString = external_ko_namespaceObject.computed({
                read: () => this['_textFormatString']() ||
                    summaryFormatString && summaryFormatString() ||
                    bindingFormatString && bindingFormatString(),
                write: x => {
                    this['_textFormatString'](x);
                    summaryFormatString && summaryFormatString(null);
                    bindingFormatString && bindingFormatString(null);
                }
            }));
        }
        if (control.Action) {
            if (control.Action['@Name'].indexOf('NavigateToReport') !== -1) {
                this.action = external_ko_namespaceObject.observable(new NavigateToReportAction(this.name(), control.Action, this, serializer, (report, serializer) => this.root.createReportViewModel(report, serializer)));
            }
        }
        else {
            this.action = external_ko_namespaceObject.observable(new ActionTypeBase(this, this.name(), true));
        }
        this.dataBindingsAreValid = external_ko_namespaceObject.observable(true);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const bindings = this.dataBindings && this.dataBindings();
            if (bindings) {
                if (bindings.length === 0)
                    this.dataBindingsAreValid(true);
                else {
                    const report = this.root;
                    if (!report || !(report.controlType === 'DevExpress.XtraReports.UI.XtraReport'))
                        return;
                    const dsHelper = report.dsHelperProvider();
                    const parameters = report.parameters();
                    const fieldListProvider = report.getControlFactory().fieldListProvider();
                    if (!dsHelper || !parameters || !fieldListProvider)
                        return;
                    const defaultDataSourceInfo = dsHelper.findDataSourceInfo(external_ko_namespaceObject.unwrap(findFirstParentWithPropertyName(this, 'dataSource').dataSource));
                    let reqFinished = 0;
                    const reqCount = bindings.length;
                    let reqResult = true;
                    const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                    for (let i = 0; i < bindings.length; i++) {
                        const binding = bindings[i], parameter = binding.parameter(), dataMember = binding.dataMember(), dataSource = binding.dataSource();
                        if (parameter) {
                            if (dataSource)
                                reqResult = false;
                            else
                                reqResult = reqResult && parameters.some(x => x.name === parameter.name);
                            reqFinished++;
                        }
                        else if (dataMember) {
                            let dsInfo = null;
                            if (dataSource) {
                                dsInfo = dataSource['dataSourceInfo'];
                                if (dsHelper.usedDataSources().indexOf(dsInfo) < 0) {
                                    reqResult = false;
                                    reqFinished++;
                                }
                            }
                            else {
                                dsInfo = defaultDataSourceInfo;
                            }
                            if (dsInfo) {
                                const lastPart = dataMember.slice(dataMember.lastIndexOf('.') + 1);
                                fieldListProvider.getItems(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest([dsInfo.id || dsInfo.ref].concat(...dataMember.split('.').slice(0, -1)).join('.')))
                                    .done(result => { if (result.every(x => x.isList || x.name !== lastPart))
                                    reqResult = false; })
                                    .fail(() => { reqResult = false; })
                                    .always(() => { if (++reqFinished === reqCount)
                                    deferred.resolve(reqResult); });
                            }
                            else {
                                reqResult = false;
                                reqFinished++;
                            }
                        }
                        else if (dataSource) {
                            reqResult = false;
                            reqFinished++;
                        }
                        else
                            reqFinished++;
                        if (!reqResult) {
                            reqFinished += reqCount - 1 - i;
                            break;
                        }
                    }
                    if (reqFinished === reqCount)
                        deferred.resolve(reqResult);
                    deferred.done(result => { this.dataBindingsAreValid(result); });
                }
            }
        }));
    }
    getNearestParent(target) {
        if (['XRPageBreak', 'XRPivotGrid', 'XRSubreport', 'XRTableOfContents', 'XRPdfContent'].indexOf(this.controlType) !== -1) {
            return getNearestBand(target);
        }
        else {
            return super.getNearestParent(target);
        }
    }
    isPropertyDisabled(name) {
        if (name === 'textFitMode') {
            return this['canGrow']() || this['canShrink']() || (this.controlType === 'XRLabel' && this['autoWidth']());
        }
        else if (name === 'processNullValues') {
            return this['Summary'] && external_ko_namespaceObject.unwrap(this['Summary']['Running']) !== 'None';
        }
        else if (name === 'allowMarkupText') {
            return this['textEditOptions'] && external_ko_namespaceObject.unwrap(this['textEditOptions']['enabled']);
        }
        else if (name === 'textEditOptions' || name === 'angle') {
            return this['allowMarkupText'] && external_ko_namespaceObject.unwrap(this['allowMarkupText']);
        }
        return super.isPropertyDisabled(name);
    }
    isPropertyVisible(name) {
        if (this.multiline && this.multiline()) {
            if (name === 'text')
                return false;
        }
        else {
            if (name === 'textArea')
                return false;
        }
        return super.isPropertyVisible(name);
    }
    hasExpressionBindings() {
        return !!(this.expressionBindings && this.expressionBindings().filter(binding => !!binding.expression())[0]);
    }
    hasDataBindingByName(property = 'Text') {
        const bindings = this.dataBindings && this.dataBindings() && this.dataBindings().filter((dataBinding) => { return !dataBinding.isEmpty(); });
        if (!!bindings && bindings.length > 0) {
            const binding = this.dataBindings()['findBinding'](property);
            return !!binding && !binding.isEmpty();
        }
        return !!(this.expressionBindings && this.expressionBindings().filter(binding => binding.propertyName() === property).length > 0);
    }
    get hasDefaultBindingProperty() {
        return !!this.getControlInfo().defaultBindingName;
    }
    getExpressionBinding(property = 'Text', event = 'BeforePrint') {
        if (!this.expressionBindings)
            return null;
        const binding = this.expressionBindings().filter(binding => binding.propertyName() === property && binding.eventName() === event)[0];
        return binding && binding.expression();
    }
    setExpressionBinding(value, property = 'Text', event = 'BeforePrint') {
        if (!this.expressionBindings)
            return;
        const binding = this.expressionBindings().filter(binding => binding.propertyName() === property && binding.eventName() === event)[0];
        binding && binding.expression(value);
    }
    getControlInfo() {
        return super.getControlInfo();
    }
    getDefaultBinding() {
        const bindingName = this.getControlInfo().defaultBindingName;
        if (this.dataBindingMode !== _dataBindingMode_DataBindingMode.Bindings) {
            return this.expressionObj.getExpression(bindingName, 'BeforePrint');
        }
        else {
            return this.dataBindings().filter(x => x.propertyName() === bindingName)[0];
        }
    }
}
class XRControlSurfaceBase extends external_DevExpress_Analytics_Elements_namespaceObject.SurfaceElementBase {
    _isThereIntersectionWithUsefulArea(useFullWidth) {
        const absoluteRect = this._unitAbsoluteRect;
        return Math.max(absoluteRect.left, absoluteRect.right) - useFullWidth > this.delta;
    }
    static _appendValue(accumulator, value, needToAppend = true) {
        if (needToAppend) {
            accumulator += accumulator ? (' ' + value) : value;
        }
        return accumulator;
    }
    get _unitAbsoluteRect() {
        const parentAbsoluteRect = this.parent && this.parent['_unitAbsoluteRect'];
        if (parentAbsoluteRect) {
            return {
                top: parentAbsoluteRect.top + this._unitRect.top,
                left: parentAbsoluteRect.left + this._unitRect.left,
                right: parentAbsoluteRect.left + this._unitRect.left + this._unitRect.width,
                bottom: parentAbsoluteRect.top + this._unitRect.top + this._unitRect.height,
                width: this._unitRect.width,
                height: this._unitRect.height
            };
        }
        else {
            return this._unitRect;
        }
    }
    get _unitRect() {
        const location = this._control['location'] || new external_DevExpress_Analytics_Elements_namespaceObject.Point(0, 0), size = this._control['size'] || new external_DevExpress_Analytics_Elements_namespaceObject.Size(0, 0);
        return {
            top: location.y(),
            left: location.x(),
            right: location.x() + size.width(),
            bottom: location.y() + size.height(),
            width: size.width(),
            height: size.height()
        };
    }
    constructor(control, context, unitProperties) {
        super(control, context, unitProperties);
        this.delta = 0.0001;
        this.template = 'dxrd-control';
        this.selectiontemplate = 'dxrd-control-selection';
        this.contenttemplate = 'dxrd-control-content';
        this.displayNameParameters = external_ko_namespaceObject.pureComputed(() => {
            const control = this.getControlModel();
            const parameters = {
                text: null,
                isExpression: true,
                dataSource: null,
                dataMember: null,
                dataMemberOffset: null,
                allowMarkupText: false,
                wordWrap: false,
                fontSize: 0,
                fontUnit: null
            };
            if (control['controls'] && control['controls']().length !== 0) {
                parameters.text = '';
                return parameters;
            }
            parameters.text = control['getExpressionBinding'] && control['getExpressionBinding']();
            parameters.isExpression = !!parameters.text;
            parameters.allowMarkupText = control['allowMarkupText'] && control['allowMarkupText']();
            parameters.wordWrap = control['wordWrap'] && control['wordWrap']();
            if (control['font']) {
                const _font = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel(control['font']);
                parameters.fontSize = _font.size();
                parameters.fontUnit = _font.unit();
                _font.dispose();
            }
            if (parameters.isExpression) {
                parameters.dataMember = control['getPath'] && control['getPath']('expression') || '';
                return parameters;
            }
            if (control['dataBindings'] && this.hasBindings) {
                const textBinding = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(control['dataBindings'](), 'propertyName', 'Text');
                if (textBinding && textBinding.dataMember()) {
                    const dataMember = textBinding.dataMember();
                    const dataSource = textBinding.dataSource();
                    const parentWithDS = findFirstParentWithPropertyName(control, 'dataSource');
                    const rootDataMember = parentWithDS['dataMember'] && parentWithDS['dataMember']() || '';
                    const rootDataSource = parentWithDS['dataSource'] && parentWithDS['dataSource']() || null;
                    if ((!dataSource || dataSource === rootDataSource) && dataMember.indexOf(rootDataMember) === 0 && dataMember.charAt(rootDataMember.length) === '.') {
                        parameters.dataMemberOffset = rootDataMember;
                        parameters.dataMember = dataMember.substr(rootDataMember.length + 1);
                    }
                    else {
                        parameters.dataMemberOffset = '';
                        parameters.dataMember = textBinding.dataMember();
                    }
                    parameters.dataSource = dataSource || rootDataSource;
                    return parameters;
                }
            }
            parameters.text = this.displayText();
            return parameters;
        });
        this.displayName = external_ko_namespaceObject.pureComputed(() => {
            const parameters = this.displayNameParameters();
            return parameters.dataMember ? ('[' + parameters.dataMember + ']') : (parameters.text || '');
        });
        this._disposables.push(this.contentSizes = external_ko_namespaceObject.pureComputed(() => this.cssCalculator.contentSizeCss(this.rect().width, this.rect().height, this._context.zoom())));
        this._disposables.push(this.contentHeightWithoutZoom = external_ko_namespaceObject.pureComputed(() => this.contentSizes().height / this._context.zoom()));
        this._disposables.push(this.contentWidthWithoutZoom = external_ko_namespaceObject.pureComputed(() => this.contentSizes().width / this._context.zoom()));
        this._disposables.push(this.borderCss = external_ko_namespaceObject.pureComputed(() => {
            return (!control['borders'] || control['borders']() === 'None') ? { 'border': 'solid 1px Silver' } : this.cssCalculator.borderCss(this._context.zoom());
        }));
        this._disposables.push(this.isIntersect = external_ko_namespaceObject.pureComputed(() => {
            return this.isThereIntersectionWithUsefulArea() ||
                this.isThereIntersectionWithCrossBandControls() ||
                this.isThereIntersectionWithControls();
        }).extend({ deferred: true }));
        this._disposables.push(this.adorntemplate = external_ko_namespaceObject.computed(() => { return this.getAdornTemplate(); }));
        this._disposables.push(this.displayNameParameters);
        this._disposables.push(this.displayName);
    }
    checkParent(surfaceParent) {
        const thisParent = this.parent instanceof BandSurface || this.parent && this.parent._control.controlType === 'DevExpress.XtraReports.UI.XtraReport' ? null : this.parent;
        const anotherParent = surfaceParent instanceof BandSurface || this.parent && this.parent._control.controlType === 'DevExpress.XtraReports.UI.XtraReport' ? null : surfaceParent;
        return thisParent === anotherParent;
    }
    isThereIntersection(rect1, rect2) {
        const rect1Right = rect1.right || rect1.left + rect1.width, rect2Right = rect2.right || rect2.left + rect2.width, rect1Bottom = rect1.bottom || rect1.top + rect1.height, rect2Bottom = rect2.bottom || rect2.top + rect2.height;
        return rect1Right > rect2.left && Math.abs(rect1Right - rect2.left) >= 0.0001 &&
            rect2Right > rect1.left && Math.abs(rect2Right - rect1.left) >= 0.0001 &&
            rect1Bottom > rect2.top && Math.abs(rect1Bottom - rect2.top) >= 0.0001 &&
            rect2Bottom > rect1.top && Math.abs(rect2Bottom - rect1.top) >= 0.0001;
    }
    isThereIntersectionWithParent(parentRect, childRect) {
        const rectWidhtElement = childRect.right || childRect.left + childRect.width, rectHeightElement = childRect.bottom || childRect.top + childRect.height;
        return rectWidhtElement > parentRect.width && Math.abs(rectWidhtElement - parentRect.width) > this.delta ||
            rectHeightElement > parentRect.height && Math.abs(rectHeightElement - parentRect.height) > this.delta;
    }
    isThereIntersectionWithUsefulArea() {
        const _container = this.container();
        if (_container instanceof BandSurface && _container['_unitAbsoluteRect']) {
            const absoluteRect = this.container()['_unitAbsoluteRect'];
            return this._isThereIntersectionWithUsefulArea(absoluteRect.width);
        }
        else if (_container instanceof VerticalBandSurface) {
            return false;
        }
        else {
            const root = this.getRoot(), usefulPageWidth = root['_unitAbsoluteRect'].width;
            return this._isThereIntersectionWithUsefulArea(usefulPageWidth);
        }
    }
    isThereIntersectionWithCrossBandControls(currentRect = this._unitAbsoluteRect) {
        if (!currentRect)
            return false;
        let isThereIntersection = false;
        const crossBandControls = this.getRoot()['crossBandControls']();
        if (this.isThereIntersectionWithNeighborsCollection(currentRect, crossBandControls.filter((control) => { return control.visible() && control.getControlModel().controlType === 'XRCrossBandLine'; }), '_unitAbsoluteRect')) {
            return true;
        }
        const crossBandBoxControls = crossBandControls.filter((control) => { return control.visible() && control.getControlModel().controlType === 'XRCrossBandBox'; });
        for (let crossbandIndex = 0; crossbandIndex < crossBandBoxControls.length; crossbandIndex++) {
            const rects = crossBandBoxControls[crossbandIndex]._getCrossBandBoxSides();
            for (let rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                if (this !== crossBandBoxControls[crossbandIndex] && this.isThereIntersection(currentRect, rects[rectIndex])) {
                    isThereIntersection = true;
                    break;
                }
            }
            if (isThereIntersection)
                break;
        }
        return isThereIntersection;
    }
    isThereIntersectionWithControls() {
        const collectionControls = this.parent && this.parent.getChildrenCollection() && this.parent.getChildrenCollection()().filter((control) => { return !control.isIntersectionDeny; }) || [];
        return this.isThereIntersectionWithParentCollection(this._unitRect)
            || this.isThereIntersectionWithChildCollection()
            || this.isThereIntersectionWithNeighborsCollection(this._unitRect, collectionControls);
    }
    isThereIntersectionWithParentCollection(currentRect, controlRectProperty = '_unitRect') {
        return this.parent && this.parent instanceof XRControlSurfaceBase &&
            this.parent[controlRectProperty] && this.isThereIntersectionWithParent(this.parent[controlRectProperty], currentRect);
    }
    isThereIntersectionWithChildCollection(controlRectProperty = '_unitRect') {
        return this['controls'] && this['controls']().length > 0 &&
            this.isThereIntersectionWithChildControls(this['controls'](), controlRectProperty);
    }
    isThereIntersectionWithNeighborsCollection(currentRect, collectionControls, controlRectProperty = '_unitRect') {
        for (let i = 0; i < collectionControls.length; i++) {
            if (this !== collectionControls[i] && this.isThereIntersection(currentRect, collectionControls[i][controlRectProperty])) {
                return true;
            }
        }
        return false;
    }
    isThereIntersectionWithChildControls(collectionControls, controlRectProperty = '_unitRect') {
        const currentRect = this[controlRectProperty];
        for (let i = 0; i < collectionControls.length; i++) {
            if (this !== collectionControls[i] && this.isThereIntersectionWithParent(currentRect, collectionControls[i][controlRectProperty])) {
                return true;
            }
        }
        return false;
    }
    getAdornTemplate() {
        let result = XRControlSurface._appendValue('', 'dxrd-intersect', this.isIntersect());
        result = XRControlSurface._appendValue(result, 'dxrd-control-rtl', this._control.rtl());
        result = XRControlSurface._appendValue(result, 'dxrd-uiselected', this.selected());
        if (this.hasBindings) {
            if (this._context['validationMode'] && this._context['validationMode']()) {
                if (!this.bindingsIsValid) {
                    result = XRControlSurface._appendValue(result, 'dxrd-image-surface-bounded-notvalid', true);
                }
                else if (this.bindingsHasWarning) {
                    result = XRControlSurface._appendValue(result, 'dxrd-image-surface-bounded-warning', true);
                }
                else
                    result = XRControlSurface._appendValue(result, 'dxrd-image-surface-bounded', true);
            }
            else
                result = XRControlSurface._appendValue(result, 'dxrd-image-surface-bounded', true);
        }
        if (this._control['visible']) {
            result = XRControlSurface._appendValue(result, 'dxrd-surface-hidden', !this._control['visible']());
        }
        return result;
    }
    hasDataBindingByName(propertyName) {
        return !!(this._control['hasDataBindingByName'] && this._control['hasDataBindingByName'](propertyName));
    }
    get hasBindings() { return !!(this._control['hasBindings'] && this._control['hasBindings']()); }
    get bindingsIsValid() {
        if (this._control['dataBindingMode'] !== 'Bindings') {
            if (!!this._control['expressionBindings']) {
                return this._control['expressionObj'].validateExpression();
            }
            return true;
        }
        else {
            return this._control['dataBindingsAreValid']();
        }
    }
    get bindingsHasWarning() {
        if (this._control['dataBindingMode'] !== 'Bindings') {
            if (!!this._control['expressionBindings']) {
                return this._control['expressionObj'].hasWarning();
            }
            return false;
        }
    }
    displayText() {
        if (this._control.controlType == 'XRPanel')
            return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Place controls here to keep them together', 'ReportStringId.PanelDesignMsg');
        let text = this._control['text'] && this._control['text']() ? this._control['text']() : '';
        if (this._control['multiline'] && !this._control['multiline']()) {
            text = text.replace(/\r/g, '').replace(/\n/g, '');
        }
        return text;
    }
}
class XRControlSurface extends XRControlSurfaceBase {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.controls);
        this.resetObservableArray(this.controls);
    }
    constructor(control, context) {
        super(control, context, XRControlSurface._unitProperties);
        this['multiline'] = control['multiline'] || false;
        this.getUsefulRect = () => {
            const borderWidth = external_ko_namespaceObject.unwrap(control['borderWidth']), borderFlags = control['borders']();
            const rect = { top: 0, left: 0, width: this.rect().width, height: this.rect().height };
            if (borderWidth) {
                if (borderFlags === 'All') {
                    rect.height -= 2 * borderWidth;
                    rect.width -= 2 * borderWidth;
                }
                else {
                    if (borderFlags.indexOf('Top') >= 0)
                        rect.height -= borderWidth;
                    if (borderFlags.indexOf('Right') >= 0)
                        rect.width -= borderWidth;
                    if (borderFlags.indexOf('Bottom') >= 0)
                        rect.height -= borderWidth;
                    if (borderFlags.indexOf('Left') >= 0)
                        rect.width -= borderWidth;
                }
            }
            return rect;
        };
    }
}
XRControlSurface._unitProperties = {
    _height: (o) => {
        return o.size.height;
    },
    _width: (o) => {
        return o.size.width;
    },
    _x: (o) => {
        return o.location.x;
    },
    _y: (o) => {
        return o.location.y;
    }
};


;// ./node_modules/devexpress-reporting/designer/controls/xrRichTextSurface.js




class XRRichSurface extends XRControlSurface {
    _sendCallback(propertyName = null) {
        if (!this._innerUpdate()) {
            this._lastRequest(propertyName);
            const self = this;
            const selfControl = this._control;
            this.isLoading(true);
            ReportRenderingService.getRichImage(this, propertyName).done(function (result) {
                self.isLoading(false);
                if (propertyName === self._lastRequest()) {
                    selfControl.root && selfControl.root['_update'] && selfControl.root['_update'](true);
                    if (propertyName !== 'height' && propertyName !== 'width') {
                        self._innerUpdate(true);
                        if (propertyName !== 'textRtf') {
                            selfControl.textRtf(result.Text);
                        }
                        selfControl._rtf(result.Rtf);
                        selfControl.serializableRtfString(result.SerializableRtfString);
                        self._innerUpdate(false);
                    }
                    self.imageSrc('data:image/x;base64,' + result.Img);
                    selfControl.root && selfControl.root['_update'] && selfControl.root['_update'](false);
                }
            }).fail(function (jqXHR) {
                self.isLoading(false);
                (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('It is impossible to get richText');
            });
        }
    }
    constructor(control, context) {
        super(control, context);
        this._lastRequest = external_ko_namespaceObject.observable(null);
        this._innerUpdate = external_ko_namespaceObject.observable(false);
        this.imageSrc = external_ko_namespaceObject.observable('');
        this.isLoading = external_ko_namespaceObject.observable(false);
        this.template = 'dxrd-shape';
        this.contenttemplate = 'dxrd-server-rendered-control-content';
        this._sendCallback();
        this._disposables.push(control._newDocumentData.subscribe((newVal) => {
            control.serializableRtfString(newVal && newVal.content);
        }));
        this._disposables.push(control.textRtf.subscribe((newVal) => { this._sendCallback('textRtf'); }));
        this._disposables.push(control._rtf.subscribe(() => { this._sendCallback('rtf'); }));
        this._disposables.push(control.font.subscribe(() => { this._sendCallback('font'); }));
        this._disposables.push(control.foreColor.subscribe(() => { this._sendCallback('foreColor'); }));
        this._disposables.push(this['position']['width'].subscribe((newValue) => { this._sendCallback('width'); }));
        this._disposables.push(this['position']['height'].subscribe((newValue) => { this._sendCallback('height'); }));
        this._disposables.push(control.serializableRtfString.subscribe((newVal) => { this._sendCallback(newVal ? 'base64rtf' : undefined); }));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/richEdit.js


const getRichEditSurface = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(() => XRRichSurface);
const registerRichEditInline = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)((selection) => void 0);

;// ./node_modules/devexpress-reporting/designer/controls/spartlineTypes.js
const spartlineTypes = [
    { value: 'Line', displayValue: 'Line', localizationId: 'DevExpress.Sparkline.SparklineViewType.Line' },
    { value: 'Bar', displayValue: 'Bar', localizationId: 'DevExpress.Sparkline.SparklineViewType.Bar' },
    { value: 'WinLoss', displayValue: 'WinLoss', localizationId: 'DevExpress.Sparkline.SparklineViewType.WinLoss' },
    { value: 'Area', displayValue: 'Area', localizationId: 'DevExpress.Sparkline.SparklineViewType.Area' }
];

;// external "DevExpress.Reporting.Export"
const external_DevExpress_Reporting_Export_namespaceObject = DevExpress.Reporting.Export;
;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrReport.js













const paperKind = {
    propertyName: 'paperKind', modelName: '@PaperKind', localizable: true, defaultVal: 'Letter', displayName: 'Paper Kind', localizationId: 'DevExpress.XtraReports.UI.XtraReport.PaperKind',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'A2', displayValue: 'A2', localizationId: 'System.Drawing.Printing.PaperKind.A2' },
        { value: 'A3', displayValue: 'A3', localizationId: 'System.Drawing.Printing.PaperKind.A3' },
        { value: 'A3Extra', displayValue: 'A3Extra', localizationId: 'System.Drawing.Printing.PaperKind.A3Extra' },
        { value: 'A3ExtraTransverse', displayValue: 'A3ExtraTransverse', localizationId: 'System.Drawing.Printing.PaperKind.A3ExtraTransverse' },
        { value: 'A3Rotated', displayValue: 'A3Rotated', localizationId: 'System.Drawing.Printing.PaperKind.A3Rotated' },
        { value: 'A3Transverse', displayValue: 'A3Transverse', localizationId: 'System.Drawing.Printing.PaperKind.A3Transverse' },
        { value: 'A4', displayValue: 'A4', localizationId: 'System.Drawing.Printing.PaperKind.A4' },
        { value: 'A4Extra', displayValue: 'A4Extra', localizationId: 'System.Drawing.Printing.PaperKind.A4Extra' },
        { value: 'A4Plus', displayValue: 'A4Plus', localizationId: 'System.Drawing.Printing.PaperKind.A4Plus' },
        { value: 'A4Rotated', displayValue: 'A4Rotated', localizationId: 'System.Drawing.Printing.PaperKind.A4Rotated' },
        { value: 'A4Small', displayValue: 'A4Small', localizationId: 'System.Drawing.Printing.PaperKind.A4Small' },
        { value: 'A4Transverse', displayValue: 'A4Transverse', localizationId: 'System.Drawing.Printing.PaperKind.A4Transverse' },
        { value: 'A5', displayValue: 'A5', localizationId: 'System.Drawing.Printing.PaperKind.A5' },
        { value: 'A5Extra', displayValue: 'A5Extra', localizationId: 'System.Drawing.Printing.PaperKind.A5Extra' },
        { value: 'A5Rotated', displayValue: 'A5Rotated', localizationId: 'System.Drawing.Printing.PaperKind.A5Rotated' },
        { value: 'A5Transverse', displayValue: 'A5Transverse', localizationId: 'System.Drawing.Printing.PaperKind.A5Transverse' },
        { value: 'A6', displayValue: 'A6', localizationId: 'System.Drawing.Printing.PaperKind.A6' },
        { value: 'A6Rotated', displayValue: 'A6Rotated', localizationId: 'System.Drawing.Printing.PaperKind.A6Rotated' },
        { value: 'APlus', displayValue: 'APlus', localizationId: 'System.Drawing.Printing.PaperKind.APlus' },
        { value: 'B4', displayValue: 'B4', localizationId: 'System.Drawing.Printing.PaperKind.B4' },
        { value: 'B4Envelope', displayValue: 'B4Envelope', localizationId: 'System.Drawing.Printing.PaperKind.B4Envelope' },
        { value: 'B4JisRotated', displayValue: 'B4JisRotated', localizationId: 'System.Drawing.Printing.PaperKind.B4JisRotated' },
        { value: 'B5', displayValue: 'B5', localizationId: 'System.Drawing.Printing.PaperKind.B5' },
        { value: 'B5Envelope', displayValue: 'B5Envelope', localizationId: 'System.Drawing.Printing.PaperKind.B5Envelope' },
        { value: 'B5Extra', displayValue: 'B5Extra', localizationId: 'System.Drawing.Printing.PaperKind.B5Extra' },
        { value: 'B5JisRotated', displayValue: 'B5JisRotated', localizationId: 'System.Drawing.Printing.PaperKind.B5JisRotated' },
        { value: 'B5Transverse', displayValue: 'B5Transverse', localizationId: 'System.Drawing.Printing.PaperKind.B5Transverse' },
        { value: 'B6Envelope', displayValue: 'B6Envelope', localizationId: 'System.Drawing.Printing.PaperKind.B6Envelope' },
        { value: 'B6Jis', displayValue: 'B6Jis', localizationId: 'System.Drawing.Printing.PaperKind.B6Jis' },
        { value: 'B6JisRotated', displayValue: 'B6JisRotated', localizationId: 'System.Drawing.Printing.PaperKind.B6JisRotated' },
        { value: 'BPlus', displayValue: 'BPlus', localizationId: 'System.Drawing.Printing.PaperKind.BPlus' },
        { value: 'C3Envelope', displayValue: 'C3Envelope', localizationId: 'System.Drawing.Printing.PaperKind.C3Envelope' },
        { value: 'C4Envelope', displayValue: 'C4Envelope', localizationId: 'System.Drawing.Printing.PaperKind.C4Envelope' },
        { value: 'C5Envelope', displayValue: 'C5Envelope', localizationId: 'System.Drawing.Printing.PaperKind.C5Envelope' },
        { value: 'C65Envelope', displayValue: 'C65Envelope', localizationId: 'System.Drawing.Printing.PaperKind.C65Envelope' },
        { value: 'C6Envelope', displayValue: 'C6Envelope', localizationId: 'System.Drawing.Printing.PaperKind.C6Envelope' },
        { value: 'CSheet', displayValue: 'CSheet', localizationId: 'System.Drawing.Printing.PaperKind.CSheet' },
        { value: 'Custom', displayValue: 'Custom', localizationId: 'System.Drawing.Printing.PaperKind.Custom' },
        { value: 'DLEnvelope', displayValue: 'DLEnvelope', localizationId: 'System.Drawing.Printing.PaperKind.DLEnvelope' },
        { value: 'DSheet', displayValue: 'DSheet', localizationId: 'System.Drawing.Printing.PaperKind.DSheet' },
        { value: 'ESheet', displayValue: 'ESheet', localizationId: 'System.Drawing.Printing.PaperKind.ESheet' },
        { value: 'Executive', displayValue: 'Executive', localizationId: 'System.Drawing.Printing.PaperKind.Executive' },
        { value: 'Folio', displayValue: 'Folio', localizationId: 'System.Drawing.Printing.PaperKind.Folio' },
        { value: 'GermanLegalFanfold', displayValue: 'GermanLegalFanfold', localizationId: 'System.Drawing.Printing.PaperKind.GermanLegalFanfold' },
        { value: 'GermanStandardFanfold', displayValue: 'GermanStandardFanfold', localizationId: 'System.Drawing.Printing.PaperKind.GermanStandardFanfold' },
        { value: 'InviteEnvelope', displayValue: 'InviteEnvelope', localizationId: 'System.Drawing.Printing.PaperKind.InviteEnvelope' },
        { value: 'IsoB4', displayValue: 'IsoB4', localizationId: 'System.Drawing.Printing.PaperKind.IsoB4' },
        { value: 'ItalyEnvelope', displayValue: 'ItalyEnvelope', localizationId: 'System.Drawing.Printing.PaperKind.ItalyEnvelope' },
        { value: 'JapaneseDoublePostcard', displayValue: 'JapaneseDoublePostcard', localizationId: 'System.Drawing.Printing.PaperKind.JapaneseDoublePostcard' },
        { value: 'JapaneseDoublePostcardRotated', displayValue: 'JapaneseDoublePostcardRotated', localizationId: 'System.Drawing.Printing.PaperKind.JapaneseDoublePostcardRotated' },
        { value: 'JapanesePostcard', displayValue: 'JapanesePostcard', localizationId: 'System.Drawing.Printing.PaperKind.JapanesePostcard' },
        { value: 'Ledger', displayValue: 'Ledger', localizationId: 'System.Drawing.Printing.PaperKind.Ledger' },
        { value: 'Legal', displayValue: 'Legal', localizationId: 'System.Drawing.Printing.PaperKind.Legal' },
        { value: 'LegalExtra', displayValue: 'LegalExtra', localizationId: 'System.Drawing.Printing.PaperKind.LegalExtra' },
        { value: 'Letter', displayValue: 'Letter', localizationId: 'System.Drawing.Printing.PaperKind.Letter' },
        { value: 'LetterExtra', displayValue: 'LetterExtra', localizationId: 'System.Drawing.Printing.PaperKind.LetterExtra' },
        { value: 'LetterExtraTransverse', displayValue: 'LetterExtraTransverse', localizationId: 'System.Drawing.Printing.PaperKind.LetterExtraTransverse' },
        { value: 'LetterPlus', displayValue: 'LetterPlus', localizationId: 'System.Drawing.Printing.PaperKind.LetterPlus' },
        { value: 'LetterRotated', displayValue: 'LetterRotated', localizationId: 'System.Drawing.Printing.PaperKind.LetterRotated' },
        { value: 'LetterSmall', displayValue: 'LetterSmall', localizationId: 'System.Drawing.Printing.PaperKind.LetterSmall' },
        { value: 'LetterTransverse', displayValue: 'LetterTransverse', localizationId: 'System.Drawing.Printing.PaperKind.LetterTransverse' },
        { value: 'MonarchEnvelope', displayValue: 'MonarchEnvelope', localizationId: 'System.Drawing.Printing.PaperKind.MonarchEnvelope' },
        { value: 'Note', displayValue: 'Note', localizationId: 'System.Drawing.Printing.PaperKind.Note' },
        { value: 'Number10Envelope', displayValue: 'Number10Envelope', localizationId: 'System.Drawing.Printing.PaperKind.Number10Envelope' },
        { value: 'Number11Envelope', displayValue: 'Number11Envelope', localizationId: 'System.Drawing.Printing.PaperKind.Number11Envelope' },
        { value: 'Number12Envelope', displayValue: 'Number12Envelope', localizationId: 'System.Drawing.Printing.PaperKind.Number12Envelope' },
        { value: 'Number14Envelope', displayValue: 'Number14Envelope', localizationId: 'System.Drawing.Printing.PaperKind.Number14Envelope' },
        { value: 'Number9Envelope', displayValue: 'Number9Envelope', localizationId: 'System.Drawing.Printing.PaperKind.Number9Envelope' },
        { value: 'PersonalEnvelope', displayValue: 'PersonalEnvelope', localizationId: 'System.Drawing.Printing.PaperKind.PersonalEnvelope' },
        { value: 'Prc16K', displayValue: 'Prc16K', localizationId: 'System.Drawing.Printing.PaperKind.Prc16K' },
        { value: 'Prc16KRotated', displayValue: 'Prc16KRotated', localizationId: 'System.Drawing.Printing.PaperKind.Prc16KRotated' },
        { value: 'Prc32K', displayValue: 'Prc32K', localizationId: 'System.Drawing.Printing.PaperKind.Prc32K' },
        { value: 'Prc32KBig', displayValue: 'Prc32KBig', localizationId: 'System.Drawing.Printing.PaperKind.Prc32KBig' },
        { value: 'Prc32KBigRotated', displayValue: 'Prc32KBigRotated', localizationId: 'System.Drawing.Printing.PaperKind.Prc32KBigRotated' },
        { value: 'Prc32KRotated', displayValue: 'Prc32KRotated', localizationId: 'System.Drawing.Printing.PaperKind.Prc32KRotated' },
        { value: 'PrcEnvelopeNumber1', displayValue: 'PrcEnvelopeNumber1', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber1' },
        { value: 'PrcEnvelopeNumber10', displayValue: 'PrcEnvelopeNumber10', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber10' },
        { value: 'PrcEnvelopeNumber10Rotated', displayValue: 'PrcEnvelopeNumber10Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber10Rotated' },
        { value: 'PrcEnvelopeNumber1Rotated', displayValue: 'PrcEnvelopeNumber1Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber1Rotated' },
        { value: 'PrcEnvelopeNumber2', displayValue: 'PrcEnvelopeNumber2', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber2' },
        { value: 'PrcEnvelopeNumber2Rotated', displayValue: 'PrcEnvelopeNumber2Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber2Rotated' },
        { value: 'PrcEnvelopeNumber3', displayValue: 'PrcEnvelopeNumber3', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber3' },
        { value: 'PrcEnvelopeNumber3Rotated', displayValue: 'PrcEnvelopeNumber3Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber3Rotated' },
        { value: 'PrcEnvelopeNumber4', displayValue: 'PrcEnvelopeNumber4', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber4' },
        { value: 'PrcEnvelopeNumber4Rotated', displayValue: 'PrcEnvelopeNumber4Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber4Rotated' },
        { value: 'PrcEnvelopeNumber5', displayValue: 'PrcEnvelopeNumber5', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber5' },
        { value: 'PrcEnvelopeNumber5Rotated', displayValue: 'PrcEnvelopeNumber5Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber5Rotated' },
        { value: 'PrcEnvelopeNumber6', displayValue: 'PrcEnvelopeNumber6', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber6' },
        { value: 'PrcEnvelopeNumber6Rotated', displayValue: 'PrcEnvelopeNumber6Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber6Rotated' },
        { value: 'PrcEnvelopeNumber7', displayValue: 'PrcEnvelopeNumber7', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber7' },
        { value: 'PrcEnvelopeNumber7Rotated', displayValue: 'PrcEnvelopeNumber7Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber7Rotated' },
        { value: 'PrcEnvelopeNumber8', displayValue: 'PrcEnvelopeNumber8', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber8' },
        { value: 'PrcEnvelopeNumber8Rotated', displayValue: 'PrcEnvelopeNumber8Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber8Rotated' },
        { value: 'PrcEnvelopeNumber9', displayValue: 'PrcEnvelopeNumber9', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber9' },
        { value: 'PrcEnvelopeNumber9Rotated', displayValue: 'PrcEnvelopeNumber9Rotated', localizationId: 'System.Drawing.Printing.PaperKind.PrcEnvelopeNumber9Rotated' },
        { value: 'Quarto', displayValue: 'Quarto', localizationId: 'System.Drawing.Printing.PaperKind.Quarto' },
        { value: 'Standard10x11', displayValue: 'Standard10x11', localizationId: 'System.Drawing.Printing.PaperKind.Standard10x11' },
        { value: 'Standard10x14', displayValue: 'Standard10x14', localizationId: 'System.Drawing.Printing.PaperKind.Standard10x14' },
        { value: 'Standard11x17', displayValue: 'Standard11x17', localizationId: 'System.Drawing.Printing.PaperKind.Standard11x17' },
        { value: 'Standard12x11', displayValue: 'Standard12x11', localizationId: 'System.Drawing.Printing.PaperKind.Standard12x11' },
        { value: 'Standard15x11', displayValue: 'Standard15x11', localizationId: 'System.Drawing.Printing.PaperKind.Standard15x11' },
        { value: 'Standard9x11', displayValue: 'Standard9x11', localizationId: 'System.Drawing.Printing.PaperKind.Standard9x11' },
        { value: 'Statement', displayValue: 'Statement', localizationId: 'System.Drawing.Printing.PaperKind.Statement' },
        { value: 'Tabloid', displayValue: 'Tabloid', localizationId: 'System.Drawing.Printing.PaperKind.Tabloid' },
        { value: 'TabloidExtra', displayValue: 'TabloidExtra', localizationId: 'System.Drawing.Printing.PaperKind.TabloidExtra' },
        { value: 'USStandardFanfold', displayValue: 'USStandardFanfold', localizationId: 'System.Drawing.Printing.PaperKind.USStandardFanfold' }
    ]
};
const landscape = { propertyName: 'landscape', modelName: '@Landscape', displayName: 'Landscape', localizationId: 'DevExpress.XtraReports.UI.XtraReport.Landscape', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const margins = { propertyName: 'margins', modelName: '@Margins', localizable: true, from: external_DevExpress_Analytics_Elements_namespaceObject.Margins.fromString, displayName: 'Margins', localizationId: 'DevExpress.XtraReports.UI.XtraReport.Margins', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const pageColor = { propertyName: 'pageColor', modelName: '@PageColor', defaultVal: 'White', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Page Color', localizationId: 'DevExpress.XtraReports.UI.XtraReport.PageColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const measureUnit = {
    propertyName: 'measureUnit',
    modelName: '@ReportUnit', defaultVal: 'HundredthsOfAnInch', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Measure Units', localizationId: 'DevExpress.XtraReports.UI.XtraReport.ReportUnit', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'HundredthsOfAnInch', displayValue: 'Hundredths of an Inch', localizationId: 'DevExpress.XtraReports.UI.ReportUnit.HundredthsOfAnInch' },
        { value: 'TenthsOfAMillimeter', displayValue: 'Tenths of a Millimeter', localizationId: 'DevExpress.XtraReports.UI.ReportUnit.TenthsOfAMillimeter' },
        { value: 'Pixels', displayValue: 'Pixels', localizationId: 'DevExpress.XtraReports.UI.ReportUnit.Pixels' }
    ]
};
const snapGridSize = { propertyName: 'snapGridSize', modelName: '@SnapGridSize', defaultVal: 12.5, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), editorOptions: { min: 0.1 }, displayName: 'Snap Grid Size', localizationId: 'DevExpress.XtraReports.UI.XtraReport.SnapGridSize' };
const drawWatermark = { propertyName: 'drawWatermark', modelName: '@DrawWatermark', displayName: 'Draw the Watermark', localizationId: 'DevExpress.XtraReports.UI.XtraReport.DrawWatermark', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const showPreviewMarginLines = { propertyName: 'showPreviewMarginLines', modelName: '@ShowPreviewMarginLines', displayName: 'Show Margin Lines in Preview', localizationId: 'DevExpress.XtraReports.UI.XtraReport.ShowPreviewMarginLines', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const verticalContentSplitting = {
    propertyName: 'verticalContentSplitting',
    modelName: '@VerticalContentSplitting', displayName: 'Vertical Content Splitting', localizationId: 'DevExpress.XtraReports.UI.XtraReport.VerticalContentSplitting', defaultVal: 'Exact', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'Exact', displayValue: 'Exact', localizationId: 'DevExpress.XtraPrinting.VerticalContentSplitting.Exact' },
        { value: 'Smart', displayValue: 'Smart', localizationId: 'DevExpress.XtraPrinting.VerticalContentSplitting.Smart' }
    ]
};
const reportExportOptionsSerializationInfo = { propertyName: 'exportOptions', modelName: 'ExportOptions', displayName: 'Export Options', localizationId: 'DevExpress.XtraReports.UI.XtraReport.ExportOptions', from: external_DevExpress_Reporting_Export_namespaceObject.ExportOptions.from, toJsonObject: external_DevExpress_Reporting_Export_namespaceObject.ExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const watermarks = {
    propertyName: 'watermarks', modelName: 'Watermarks', displayName: 'Watermarks', localizationId: 'DevExpress.XtraReports.UI.XtraReport.Watermarks', array: true,
    info: watermarkSerializationsInfo,
    template: '#dxrd-collectionItemWithAccordion',
    editor: designerEditorTemplates.getEditor('watermarks'),
};
const watermarkId = { propertyName: 'watermarkId', modelName: '@WatermarkId', displayName: 'WatermarkId', localizationId: 'DevExpress.XtraReports.UI.XtraReport.WatermarkId', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const rollPaper = { propertyName: 'rollPaper', modelName: '@RollPaper', displayName: 'Roll Paper', localizationId: 'DevExpress.XtraReports.UI.XtraReport.RollPaper', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const requestParameters = { propertyName: 'requestParameters', modelName: '@RequestParameters', displayName: 'Request Parameters', localizationId: 'DevExpress.XtraReports.UI.XtraReport.RequestParameters', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const formattingRuleSheet = { propertyName: 'formattingRuleSheet', modelName: 'FormattingRuleSheet', displayName: 'Formatting Rule Sheet', localizationId: 'DevExpress.XtraReports.UI.XtraReport.FormattingRuleSheet', array: true };
const pageWidth = { propertyName: 'pageWidth', modelName: '@PageWidth', displayName: 'Page Width', localizationId: 'DevExpress.XtraReports.UI.XtraReport.PageWidth', defaultVal: -1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.saveAsInt, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const pageHeight = { propertyName: 'pageHeight', modelName: '@PageHeight', displayName: 'Page Height', localizationId: 'DevExpress.XtraReports.UI.XtraReport.PageHeight', defaultVal: -1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.saveAsInt, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const localizationItems = { propertyName: '_localizationItems', modelName: 'LocalizationItems', array: true };
const language = {
    propertyName: 'language', displayName: 'Language', defaultVal: external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture, localizationId: 'DevExpress.XtraReports.UI.XtraReport.XRLanguage', localizable: true, editor: designerEditorTemplates.getEditor('localizationSelectBox'), values: (0,external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures)()
};
const disposableFunc = external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures.subscribe((newVal) => {
    language.values = newVal;
    disposableFunc();
});
const scriptLanguage = {
    propertyName: 'scriptLanguage', modelName: '@ScriptLanguage', displayName: 'Script Language', localizationId: 'DevExpress.XtraReports.UI.XtraReport.ScriptLanguage', defaultVal: 'CSharp', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'CSharp', displayValue: 'C#', localizationId: 'DevExpress.XtraReports.ScriptLanguage.CSharp' },
        { value: 'VisualBasic', displayValue: 'Visual Basic', localizationId: 'DevExpress.XtraReports.ScriptLanguage.VisualBasic' },
        { value: 'JScript', displayValue: 'JScript', localizationId: 'DevExpress.XtraReports.ScriptLanguage.JScript' }
    ]
};
const scriptReferencesString = { propertyName: 'scriptReferencesString', modelName: '@ScriptReferencesString', defaultVal: '', displayName: 'Script References', localizationId: 'DevExpress.XtraReports.UI.XtraReport.ScriptReferences', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('stringArray') };
const calculatedFields = {
    propertyName: 'calculatedFields', modelName: 'CalculatedFields', displayName: 'Calculated Fields', localizationId: 'DevExpress.XtraReports.UI.XtraReport.CalculatedFields', array: true,
    template: '#dxrd-collectionItemWithAccordion',
    editor: designerEditorTemplates.getEditor('calculatedFields')
};
const parametersInfo = {
    propertyName: 'parameters', modelName: 'Parameters', displayName: 'Parameters', localizationId: 'DevExpress.XtraReports.UI.XtraReport.Parameters', array: true,
    template: '#dxrd-collectionItemWithAccordion',
    editor: designerEditorTemplates.getEditor('parameters')
};
const bookmarkDuplicateSuppress = { propertyName: 'bookmarkDuplicateSuppress', modelName: '@BookmarkDuplicateSuppress', displayName: 'Bookmark Duplicate Suppress', localizationId: 'DevExpress.XtraReports.UI.XtraReport.BookmarkDuplicateSuppress', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const horizontalContentSplitting = {
    propertyName: 'horizontalContentSplitting', modelName: '@HorizontalContentSplitting', displayName: 'Horizontal Content Splitting', localizationId: 'DevExpress.XtraReports.UI.XtraReport.HorizontalContentSplitting', defaultVal: 'Exact', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'Exact', displayValue: 'Exact', localizationId: 'DevExpress.XtraPrinting.HorizontalContentSplitting.Exact' },
        { value: 'Smart', displayValue: 'Smart', localizationId: 'DevExpress.XtraPrinting.HorizontalContentSplitting.Smart' }
    ]
};
const rtlLayout = {
    propertyName: 'rtlLayout', modelName: '@RightToLeftLayout', displayName: 'Right To Left Layout', localizationId: 'DevExpress.XtraReports.UI.XtraReport.RightToLeftLayout', defaultVal: 'No', editor: designerEditorTemplates.getEditor('reportRtlProperty'),
    valuesArray: rtlValues
};
const rtlReport = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, rtl, {
    defaultVal: 'No',
    editor: designerEditorTemplates.getEditor('reportRtlProperty'),
    valuesArray: rtlValues
});
const useLandscape = { propertyName: 'useLandscape', modelName: '@UseLandscape', displayName: 'Use Landscape', localizationId: 'DevExpress.XtraPrinting.PrinterSettingsUsing.UseLandscape', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const usePaperKind = { propertyName: 'usePaperKind', modelName: '@UsePaperKind', displayName: 'Use Paper Kind', localizationId: 'DevExpress.XtraPrinting.PrinterSettingsUsing.UsePaperKind', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const defaultPrinterSettingsUsingInfo = {
    propertyName: 'defaultPrinterSettingsUsing', modelName: 'DefaultPrinterSettingsUsing', displayName: 'Using Settings of the Default Printer', localizationId: 'DevExpress.XtraReports.UI.XtraReport.DefaultPrinterSettingsUsing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'),
    info: [useLandscape, usePaperKind]
};
const reportSerializationInfo = [
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_backColor, { defaultVal: 'transparent' }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, foreColor, { defaultVal: 'Black' }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_borderColor, { defaultVal: 'Black' }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, expressionableFont, { defaultVal: (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.defaultFontSerialization)() }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_textAlignment, { defaultVal: 'TopLeft' }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, borderWidth, { defaultVal: 1 }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, borderDashStyle, { defaultVal: 'Solid' }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, borders, { defaultVal: 'None' }),
    { propertyName: 'size', visible: false },
    landscape,
    paperKind,
    defaultPrinterSettingsUsingInfo,
    pageColor,
    bookmark,
    margins, rollPaper, requestParameters,
    measureUnit,
    snapGridSize,
    drawWatermark,
    watermarkId,
    watermarks,
    displayName, verticalContentSplitting, showPreviewMarginLines,
    calculatedFields,
    { propertyName: 'scriptsSource', modelName: '@ScriptsSource' },
    pageWidth,
    pageHeight,
    language,
    localizationItems,
    {
        propertyName: 'bands',
        modelName: 'Bands',
        array: true
    },
    { propertyName: 'crossBandControls', modelName: 'CrossBandControls', array: true },
    { propertyName: 'styles', modelName: 'StyleSheet', array: true },
    { propertyName: '_objectStorage', modelName: 'ObjectStorage', array: true },
    { propertyName: '_componentStorage', modelName: 'ComponentStorage', array: true },
    { propertyName: 'objectStorage' },
    { propertyName: 'extensions', modelName: 'Extensions', array: true },
    { propertyName: 'parameterPanelLayoutItems', modelName: 'ParameterPanelLayoutItems', array: true },
    formattingRuleSheet,
    formattingRuleLinks,
    parametersInfo,
    { propertyName: 'version', modelName: '@Version' },
    reportExportOptionsSerializationInfo, reportScripts, scriptLanguage, scriptReferencesString,
    rtlReport, rtlLayout, bookmarkDuplicateSuppress, horizontalContentSplitting
].concat(baseControlProperties, datasourcePrintOptionsGroup, paddingGroup);
const popularPropertiesReport = ['dataSource', 'dataMember', 'filterString', 'measureUnit', language.propertyName];

;// ./node_modules/devexpress-reporting/designer/bands/metadata/groupfieldMetaData.js

const groupFieldSerializationInfo = [
    { propertyName: 'fieldName', modelName: '@FieldName', displayName: 'Field Name', localizationId: 'DevExpress.XtraReports.UI.GroupField.FieldName', editor: designerEditorTemplates.getEditor('dataBinding') },
    { propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'Sort Order', localizationId: 'DevExpress.XtraReports.UI.GroupField.SortOrder', defaultVal: 'Ascending' }
];

;// ./node_modules/devexpress-reporting/designer/bands/groupfield.js



class GroupFieldModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    getInfo() {
        return groupFieldSerializationInfo;
    }
    constructor(model, serializer) {
        super();
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this.changeSortOrder = () => {
            const sortOrderValue = this.sortOrder();
            if (sortOrderValue === 'Ascending') {
                this.sortOrder('Descending');
            }
            else if (sortOrderValue === 'None') {
                this.sortOrder('Ascending');
            }
            else {
                this.sortOrder('None');
            }
        };
        this._disposables.push(this.sortOrderClass = external_ko_namespaceObject.pureComputed(() => {
            let orderString = this.sortOrder().toLowerCase();
            orderString = orderString === 'none' ? 'unsorted' : orderString;
            return { class: 'dxrd-image-' + orderString, template: 'dxrd-svg-operations-' + orderString };
        }));
    }
}
GroupFieldModel.createNew = () => {
    return new GroupFieldModel({});
};


;// ./node_modules/devexpress-reporting/designer/bands/multiColumn.js





class MultiColumn extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, pageWidth, margins, serializer) {
        super(model || {}, serializer, multiColumnSerializationsInfo);
        this.grayAreaWidth = external_ko_namespaceObject.observable(0);
        this._disposables.push(this.realColumnWidth = external_ko_namespaceObject.pureComputed(() => {
            const bandWidth = pageWidth() - margins.left() - margins.right();
            let result = bandWidth;
            this.grayAreaWidth(0);
            if (this.mode() === 'UseColumnWidth') {
                if (this.columnWidth() > bandWidth) {
                    this.grayAreaWidth(0);
                    result = bandWidth - this.columnSpacing();
                }
                else if (this.columnWidth() > 0) {
                    this.grayAreaWidth(bandWidth - this.columnWidth() - this.columnSpacing());
                    result = this.columnWidth();
                }
            }
            else if (this.mode() === 'UseColumnCount' && this.columnCount() > 1) {
                result = (bandWidth - this.columnSpacing() * (this.columnCount() - 1)) / this.columnCount();
                this.grayAreaWidth(bandWidth - result - this.columnSpacing());
            }
            return result;
        }));
        this._disposables.push(this.columnWidth.subscribe((newVal) => { this.mode('UseColumnWidth'); }));
        this._disposables.push(this.columnCount.subscribe((newVal) => { this.mode('UseColumnCount'); }));
    }
}
MultiColumn.unitProperties = ['columnWidth', 'columnSpacing'];

const multiColumnSerializationsInfo = [
    { propertyName: 'columnCount', modelName: '@ColumnCount', displayName: 'Column Count', localizationId: 'DevExpress.XtraReports.UI.MultiColumn.ColumnCount', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel },
    { propertyName: 'columnWidth', modelName: '@ColumnWidth', displayName: 'Column Width', localizationId: 'DevExpress.XtraReports.UI.MultiColumn.ColumnWidth', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel },
    { propertyName: 'columnSpacing', modelName: '@ColumnSpacing', displayName: 'Column Spacing', localizationId: 'DevExpress.XtraReports.UI.MultiColumn.ColumnSpacing', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel },
    {
        propertyName: 'layout', modelName: '@Layout', displayName: 'Layout', localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Layout', defaultVal: 'DownThenAcross', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
            { value: 'DownThenAcross', displayValue: 'DownThenAcross', localizationId: 'DevExpress.XtraPrinting.ColumnLayout.DownThenAcross' },
            { value: 'AcrossThenDown', displayValue: 'AcrossThenDown', localizationId: 'DevExpress.XtraPrinting.ColumnLayout.AcrossThenDown' }
        ]
    }, {
        propertyName: 'mode', modelName: '@Mode', displayName: 'Mode', localizationId: 'DevExpress.XtraReports.UI.MultiColumn.Mode', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.None' },
            { value: 'UseColumnCount', displayValue: 'UseColumnCount', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.UseColumnCount' },
            { value: 'UseColumnWidth', displayValue: 'UseColumnWidth', localizationId: 'DevExpress.XtraReports.UI.MultiColumnMode.UseColumnWidth' }
        ]
    }
];
class MultiColumnSurface extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(multiColumn, context) {
        super();
        this._disposables.push(this.grayAreaWidth = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(multiColumn.grayAreaWidth(), context.measureUnit(), context.zoom());
        }), this.columnWidth = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(multiColumn.realColumnWidth(), context.measureUnit(), context.zoom());
        }), this.columnSpacing = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(multiColumn.columnSpacing(), context.measureUnit(), context.zoom());
        }), this.columnSpacingLeft = external_ko_namespaceObject.pureComputed(() => {
            const columnWidth = this.columnWidth();
            return !context.rtl() ? columnWidth : context.margins.right() + this.grayAreaWidth();
        }), this.grayAreaLeft = external_ko_namespaceObject.pureComputed(() => {
            const columnWidth = this.columnWidth();
            return !context.rtl() ? columnWidth + this.columnSpacing() : context.margins.right();
        }), this.haveColumns = external_ko_namespaceObject.pureComputed(() => {
            return multiColumn.columnCount() > 1 && multiColumn.mode() !== 'None';
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/metadata/multiColumnMetaData.js


const multiColumn = { propertyName: 'multiColumn', modelName: 'MultiColumn', displayName: 'Multi-Column Options', localizationId: 'DevExpress.XtraReports.UI.DetailBand.MultiColumn', info: multiColumnSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };

;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrBandMetaData.js






const xrBandMetaData_expanded = { propertyName: 'expanded', modelName: '@Expanded', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: true };
const commonBandSerializationInfo = [
    metadata_textAlignment, xrBandMetaData_expanded,
    { propertyName: 'controls', modelName: 'Controls', array: true },
    { propertyName: 'bands', modelName: 'SubBands', array: true },
].concat(commonBandProperties, fontGroup);
const bandSerializationInfo = [
    styleName, stylesObj, stylePriority, height, printAcrossBands
].concat(commonBandSerializationInfo);
const reportHeaderBandSerializationInfo = [keepTogetherDefaultValueFalse, pageBreak, commonBandScripts].concat(bandSerializationInfo);
const reportFooterBandSerializationInfo = [printAtBottom].concat(reportHeaderBandSerializationInfo);
const popularPropertiesReportHeader = [pageBreak.propertyName, 'keepTogether'];
const popularPropertiesReportFooter = [pageBreak.propertyName, 'keepTogether', 'printAtBottom'];

;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrDetailBandMetaData.js









const sortFields = {
    propertyName: 'sortFields',
    modelName: 'SortFields', displayName: 'Sort Fields', localizationId: 'DevExpress.XtraReports.UI.DetailBand.SortFields', array: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'),
    addHandler: GroupFieldModel.createNew, template: '#dxrd-collection-item-group',
    getChildCaption: (index) => {
        if (index === 0)
            return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Sort By', 'ASPxReportsStringId.ReportDesigner_SortFields_SortBy');
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Then By', 'ASPxReportsStringId.ReportDesigner_SortFields_ThenBy');
    }
};
const hierarchyPrintOptionsSerializationsInfo = [
    {
        propertyName: 'childListFieldName',
        modelName: '@ChildListFieldName',
        defaultVal: '',
        localizationId: 'DevExpress.XtraReports.UI.HierarchyPrintOptions.ChildListFieldName',
        displayName: 'Child List Field Name',
        editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field')
    }, {
        propertyName: 'keyFieldName',
        modelName: '@KeyFieldName',
        defaultVal: '',
        localizationId: 'DevExpress.XtraReports.UI.HierarchyPrintOptions.KeyFieldName',
        displayName: 'Key Field Name',
        editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field')
    }, {
        propertyName: 'parentFieldName',
        modelName: '@ParentFieldName',
        defaultVal: '',
        localizationId: 'DevExpress.XtraReports.UI.HierarchyPrintOptions.ParentFieldName',
        displayName: 'Parent Field Name',
        editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field')
    }, {
        propertyName: 'indent',
        localizationId: 'DevExpress.XtraReports.UI.HierarchyPrintOptions.Indent',
        modelName: '@Indent',
        defaultVal: 20,
        displayName: 'Indent',
        editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric')
    }, {
        propertyName: 'keepTogetherWithFirstChild',
        modelName: '@KeepTogetherWithFirstChild',
        defaultVal: true,
        displayName: 'Keep Together With First Child',
        localizationId: 'DevExpress.XtraReports.UI.HierarchyPrintOptions.KeepTogetherWithFirstChild',
        editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'),
        from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool
    }
];
const hierarchyPrintOptions = {
    modelName: 'HierarchyPrintOptions',
    propertyName: 'hierarchyPrintOptions',
    info: hierarchyPrintOptionsSerializationsInfo,
    localizationId: 'DevExpress.XtraReports.UI.DetailBand.HierarchyPrintOptions',
    displayName: 'Hierarchy Print Options',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor')
};
const fillEmptySpace = { propertyName: 'fillEmptySpace', modelName: '@FillEmptySpace', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Fill Empty Space', localizationId: 'DevExpress.XtraReports.UI.DetailBand.FillEmptySpace', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const generalBandSerializationInfo = [
    evenStyleName, oddStyleName,
    keepTogetherDefaultValueFalse,
    pageBreak, commonBandScripts
].concat(bandSerializationInfo);
const subBandSerializationInfo = [
    bandsMetadata_level
].concat(generalBandSerializationInfo);
const generalBandPopularProperties = ['pageBreak', 'keepTogether', printAcrossBands.propertyName];
const detailBandSerializationInfo = generalBandSerializationInfo.concat(drillDownDetailReportExpanded, hierarchyPrintOptions, drillDownControl, keepTogetherWithDetailReports, fillEmptySpace, sortFields, multiColumn);
const popularPropertiesDetail = generalBandPopularProperties.concat('sortFields', 'keepTogetherWithDetailReports', fillEmptySpace.propertyName, 'multiColumn');

;// ./node_modules/devexpress-reporting/designer/bands/xrDetailBand.js









class DetailBand extends BandViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.sortFields);
        this.resetObservableArray(this.sortFields);
    }
    preInit(band, parent, serializer) {
        this.multiColumn = new MultiColumn(band['MultiColumn'], this.root['pageWidth'] || external_ko_namespaceObject.observable(0), this.root['margins'] || external_DevExpress_Analytics_Elements_namespaceObject.Margins.fromString());
        this._disposables.push(this.multiColumn);
        this.sortFields = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(band.SortFields, (field) => { return new GroupFieldModel(field, serializer); });
    }
    hasHierarchyPrintOptions() {
        return !((0,external_DevExpress_Analytics_Internal_namespaceObject.isNullOrEmptyString)(this.hierarchyPrintOptions.childListFieldName()) &&
            ((0,external_DevExpress_Analytics_Internal_namespaceObject.isNullOrEmptyString)(this.hierarchyPrintOptions.keyFieldName()) ||
                (0,external_DevExpress_Analytics_Internal_namespaceObject.isNullOrEmptyString)(this.hierarchyPrintOptions.parentFieldName())));
    }
    constructor(band, parent, serializer) {
        super(band, parent, serializer);
        this.hierarchyPrintOptions.isPropertyDisabled = function (propertyName) {
            if (propertyName === 'keyFieldName' || propertyName === 'parentFieldName')
                return !!this.childListFieldName();
            else if (propertyName === 'childListFieldName') {
                return !!this.keyFieldName() || !!this.parentFieldName();
            }
        };
        this.hierarchyPrintOptions.getPath = () => {
            return this.getPath('groupFields');
        };
    }
    isPropertyDisabled(name) {
        if (name === fillEmptySpace.propertyName) {
            return !this.parentModel()['bands']()
                .filter(band => band.controlType === 'GroupFooterBand' || band.controlType === 'ReportFooterBand')
                .every(band => band[printAtBottom.propertyName] && band[printAtBottom.propertyName]() ||
                band[pageBreak.propertyName] && (band[pageBreak.propertyName]() === 'BeforeBand' || band[pageBreak.propertyName]() === 'BeforeBandExceptFirstEntry'));
        }
        else {
            return super.isPropertyDisabled(name);
        }
    }
}
DetailBand.unitProperties = [].concat([], BandViewModel.unitProperties, 'multiColumn');

class DetailBandSurface extends BandSurface {
    _initMultiColumn() {
        const multiColumn = new MultiColumnSurface(this._control.multiColumn, this._context);
        this._disposables.push(multiColumn);
        this._disposables.push(this.multiColumn = external_ko_namespaceObject.computed(() => {
            const parentMultiColumn = this.parent['multiColumn'] && this.parent['multiColumn']();
            if (parentMultiColumn)
                return parentMultiColumn;
            return multiColumn;
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/_bandContainerUtils.js



function addBandToContainer(container, control) {
    control.parentModel(container);
    if (control instanceof DetailBand) {
        container.bands().filter(x => x instanceof VerticalBandViewModel).forEach(x => container.removeChild(x));
    }
    else if (control instanceof VerticalBandViewModel) {
        if (container.bands().every(x => !(x instanceof VerticalBandViewModel))) {
            const detailBand = container.bands().filter(x => x instanceof DetailBand)[0];
            detailBand && container.removeChild(detailBand);
            if (control.controlType !== 'VerticalDetailBand')
                container.createChild({ '@ControlType': 'VerticalDetailBand', '@HeightF': container.root.dpi() });
        }
        else {
            const band = container.bands().filter(x => x instanceof VerticalBandViewModel)[0];
            if (band)
                control.height(band.height());
        }
    }
    insertBand(container.bands, control);
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/calculatedField.js





const calculatedFieldScriptsInfo = [
    { propertyName: 'onGetValue', modelName: '@OnGetValue', displayName: 'Get a Value', localizationId: 'DevExpress.XtraReports.UI.CalculatedFieldScripts.OnGetValue', editor: designerEditorTemplates.getEditor('scriptsBox') }
];
const calculatedFieldScripts = { propertyName: 'scripts', modelName: 'Scripts', displayName: 'Scripts', localizationId: 'DevExpress.XtraReports.UI.CalculatedField.Scripts', info: calculatedFieldScriptsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const calculatedFieldExpression = { propertyName: 'calcExpressionObj', displayName: 'Expression', localizationId: 'DevExpress.XtraReports.UI.CalculatedField.Expression', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('expressionEditor') };
const calculatedFieldSerializationInfo = [
    { propertyName: 'calculatedFieldName', modelName: '@Name' },
    { propertyName: 'nameEditable', displayName: 'Name', validationRules: external_DevExpress_Analytics_Internal_namespaceObject.nameValidationRules, editor: designerEditorTemplates.getEditor('name'), localizationId: 'DevExpress.XtraReports.UI.XRControl.Name' },
    displayName,
    {
        propertyName: 'fieldType', modelName: '@FieldType', displayName: 'Field Type', localizationId: 'DevExpress.XtraReports.UI.CalculatedField.FieldType', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'None', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
        valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.FieldType.None' },
            { value: 'String', displayValue: 'String', localizationId: 'DevExpress.XtraReports.UI.FieldType.String' },
            { value: 'DateTime', displayValue: 'DateTime', localizationId: 'DevExpress.XtraReports.UI.FieldType.DateTime' },
            { value: 'TimeSpan', displayValue: 'TimeSpan', localizationId: 'DevExpress.XtraReports.UI.FieldType.TimeSpan' },
            { value: 'Byte', displayValue: 'Byte', localizationId: 'DevExpress.XtraReports.UI.FieldType.Byte' },
            { value: 'Int16', displayValue: 'Int16', localizationId: 'DevExpress.XtraReports.UI.FieldType.Int16' },
            { value: 'Int32', displayValue: 'Int32', localizationId: 'DevExpress.XtraReports.UI.FieldType.Int32' },
            { value: 'Float', displayValue: 'Float', localizationId: 'DevExpress.XtraReports.UI.FieldType.Float' },
            { value: 'Double', displayValue: 'Double', localizationId: 'DevExpress.XtraReports.UI.FieldType.Double' },
            { value: 'Decimal', displayValue: 'Decimal', localizationId: 'DevExpress.XtraReports.UI.FieldType.Decimal' },
            { value: 'Boolean', displayValue: 'Boolean', localizationId: 'DevExpress.XtraReports.UI.FieldType.Boolean' }
        ]
    },
    dataSource,
    metadata_dataMember,
    { propertyName: 'expression', modelName: '@Expression', displayName: 'Expression', localizationId: 'DevExpress.XtraReports.UI.CalculatedField.Expression', defaultVal: '' },
    calculatedFieldExpression,
    calculatedFieldScripts
];

;// ./node_modules/devexpress-reporting/designer/dataObjects/calculatedField.js


class CalculatedField extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    getInfo() {
        return calculatedFieldSerializationInfo;
    }
    constructor(model, serializer) {
        super();
        this.templateName = 'dx-treelist-item';
        this.contenttemplate = 'dxrd-calculatedfield-content';
        this.isList = false;
        this.isCalculated = true;
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
    }
    get displayName() {
        return this['displayNameObject']() || this.calculatedFieldName();
    }
    get name() {
        return this.calculatedFieldName();
    }
    get specifics() {
        const type = this.fieldType();
        if (['Byte', 'Int16', 'Int32'].indexOf(type) > -1) {
            return 'calcinteger';
        }
        else if (['Float', 'Double', 'Decimal'].indexOf(type) > -1) {
            return 'calcfloat';
        }
        else if (['DateTime', 'TimeSpan'].indexOf(type) > -1) {
            return 'calcdate';
        }
        else if (type === 'Boolean') {
            return 'calcbool';
        }
        return 'calc' + (type === 'None' ? 'default' : type.toLowerCase());
    }
    get type() {
        return this.fieldType();
    }
    lockedInUserDesigner() {
        return false;
    }
    displayType() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Calculated Field', 'DevExpress.XtraReports.UI.CalculatedField');
    }
}

;// external "DevExpress.Analytics.Data"
const external_DevExpress_Analytics_Data_namespaceObject = DevExpress.Analytics.Data;
;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/parameters/parameterExpressionBinding.js
const parameterExpressionBindingSerializationsInfo = [
    { propertyName: 'propertyName', modelName: '@PropertyName', defaultVal: '' },
    { propertyName: 'expression', modelName: '@Expression', defaultVal: '' },
];
const parameterExpressionBindings = { propertyName: 'expressionBindings', modelName: 'ExpressionBindings', array: true, info: parameterExpressionBindingSerializationsInfo };

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/parameters/parameter.js








const valueSourceSettingsTypes = [
    { value: 'None', displayValue: '(none)', localizationId: 'PreviewStringId.ParameterLookUpSettingsNoLookUp' },
    { value: 'StaticListLookUpSettings', displayValue: 'Static List', localizationId: 'DevExpress.XtraReports.Parameters.StaticListLookUpSettings' },
    { value: 'DynamicListLookUpSettings', displayValue: 'Dynamic List', localizationId: 'DevExpress.XtraReports.Parameters.DynamicListLookUpSettings' }
];
const extendValueSourceSettingsTypes = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], [].concat(valueSourceSettingsTypes, [
    { value: 'RangeParametersSettings', displayValue: 'Range Parameters', localizationId: 'DevExpress.XtraReports.Parameters.RangeParametersSettings' }
]));
const parameterValueSerializationInfo = { propertyName: 'value', displayName: 'Value', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.Value', modelName: '@ValueInfo', from: (val) => { return external_ko_namespaceObject.observable(val); }, toJsonObject: parameterValueToJsonObject };
const parameterExpressionSerializationInfo = { propertyName: 'ValueExpressionObj', displayName: 'Expression', localizationId: 'DevExpress.XtraReports.UI.CalculatedField.Expression', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('expressionEditor') };
const parameterLookUpSettingsSerializationInfo = { propertyName: 'lookUpSettings', displayName: 'Look-Up Settings', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.LookUpSettings', modelName: '@LookUpSettings', link: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const valueSourceSettingsSerializationInfo = { propertyName: 'valueSourceSettings', displayName: 'Value Source Settings', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.ValueSourceSettings', modelName: '@ValueSourceSettings', link: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const parameterNameSerializationInfo = { propertyName: 'parameterName', modelName: '@Name', displayName: 'Name', localizationId: 'DevExpress.XtraReports.UI.XRControl.Name', defaultVal: '', validationRules: external_DevExpress_Analytics_Internal_namespaceObject.nameValidationRules, editor: designerEditorTemplates.getEditor('name') };
const parameterSerializationInfo = [
    parameterNameSerializationInfo,
    { propertyName: 'description', localizable: true, modelName: '@Description', displayName: 'Description', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.Description', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: 'type', displayName: 'Type', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.Type', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: (parameterTypeValues) },
    { propertyName: 'visible', modelName: '@Visible', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('boolSelect'), displayName: 'Visible', localizationId: 'DevExpress.XtraReports.UI.XRControl.Visible' },
    { propertyName: 'enabled', modelName: '@Enabled', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('boolSelect'), displayName: 'Enabled', localizationId: 'DevExpress.XtraReports.UI.EditOptions.Enabled' },
    { propertyName: 'allowNull', modelName: '@AllowNull', displayName: 'Allow Null', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.AllowNull', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
    { propertyName: 'isMultiValue', modelName: '@MultiValue', displayName: 'MultiValue', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.MultiValue', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
    { propertyName: 'selectAllValues', modelName: '@SelectAllValues', displayName: 'Select All Values', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.SelectAllValues', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
    { propertyName: 'tag', modelName: '@Tag', displayName: 'Tag', localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '' },
    parameterExpressionSerializationInfo,
    parameterValueSerializationInfo,
    parameterExpressionBindings,
    { propertyName: '_obsoleteValue', modelName: '@Value', link: true },
    { propertyName: '_type', modelName: '@Type', link: true },
    {
        propertyName: 'valueSourceSettingsType', displayName: 'Value Source Settings', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.ValueSourceSettings', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: valueSourceSettingsTypes
    },
    valueSourceSettingsSerializationInfo
];

;// ./node_modules/devexpress-reporting/designer/dataObjects/objectStorageItem.js




class ObjectItem extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.dsHelperProvider = null;
    }
    getInfo() {
        return [{ propertyName: 'objectType', modelName: '@ObjectType' }];
    }
    afterDeserialization(model, serializer) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.cutRefs)(model);
    }
    preInitProperties(model, dsHelperProvider, serializer) { }
    constructor(model, dsHelperProvider, serializer) {
        super();
        this.dsHelperProvider = dsHelperProvider;
        this.preInitProperties(model, dsHelperProvider, serializer);
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this.afterDeserialization(model, serializer);
    }
}
class ObjectStorageItem extends ObjectItem {
    _getInfo() {
        return super.getInfo().concat([{ propertyName: 'content', modelName: '@Content' }, { propertyName: 'type', modelName: '@Type' },
            { propertyName: 'name', modelName: '@Name', defaultVal: '' }]);
    }
    preInitProperties(model) {
        this.getInfo = (model && model['@Base64']) ? () => {
            return this._getInfo().concat({ propertyName: 'base64', modelName: '@Base64' });
        } : () => { return this._getInfo(); };
    }
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.XtraReports.Serialization.ObjectStorageInfo' }, model), dsHelperProvider, serializer);
    }
    isEmpty() {
        return this.type && this.type() === 'System.DateTime'
            && this.content && (this.content() === undefined || this.content() === null);
    }
}
class ObjectStorageParameter extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, serializer) {
        super(model, serializer, [{ propertyName: '_type', modelName: '@Type', link: true }, parameterLookUpSettingsSerializationInfo]);
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/dataFederation.js



class DataFederationDataSource extends ObjectStorageItem {
    static getDependentDataSources(item, resultArray) {
        const dataSource = item.dataSource();
        if (dataSource instanceof DataFederationDataSource) {
            dataSource.serializableSourceMap().forEach(x => this.getDependentDataSources(x, resultArray));
        }
        resultArray.push(item);
    }
    preInitProperties(model) {
        const info = this._getInfo();
        this.getInfo = () => {
            let result = [];
            if (model && model['@Base64'])
                result = result.concat({ propertyName: 'base64', modelName: '@Base64' });
            return result.concat([], info, [
                {
                    modelName: 'SerializableSourceMap',
                    propertyName: 'serializableSourceMap',
                    array: true,
                    info: [
                        { modelName: '@DataSource', propertyName: 'dataSource', link: true },
                        { modelName: '@Name', propertyName: 'name' }
                    ]
                }
            ]);
        };
    }
    constructor(model, _dsHelperProvider, _serializer) {
        super(model, _dsHelperProvider, _serializer);
        this._dsHelperProvider = _dsHelperProvider;
        this._serializer = _serializer;
    }
    getSerializableModel() {
        if (!this._serializableModel)
            this._serializableModel = new SerializableDataFederationDataSource(this, null, this._dsHelperProvider, this._serializer);
        return this._serializableModel;
    }
    get dependentDataSources() {
        const serializableModel = this.getSerializableModel();
        return serializableModel.getSerializableFederationDataSourceInfo().dataSources;
    }
}
class SerializableDataFederationDataSource extends external_DevExpress_Analytics_Data_namespaceObject.SerializableDataFederationDataSource {
    constructor(dataSource, model, dsHelperProvider, serializer) {
        super(dataSource, serializer);
        if (!dataSource && model) {
            this.dataSources = external_ko_namespaceObject.observableArray(Object.keys(model.dataSources || {}).map(item => new ObjectStorageItem(model.dataSources[item], dsHelperProvider, this.serializer)));
            this.dataSource = new DataFederationDataSource(model.dataSource, dsHelperProvider, this.serializer);
        }
    }
    dispose() {
        super.dispose();
        this.dataSources = null;
        this.dataSource = null;
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/parameters/lookUpSettings.js



const dynamicListLookUpSettingsInfoBase = [
    dataAdapter, dataSource, metadata_dataMember,
    { propertyName: 'valueMember', modelName: '@ValueMember', displayName: 'Value Member', localizationId: 'DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.ValueMember', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') },
    { propertyName: 'displayMember', modelName: '@DisplayMember', displayName: 'Display Member', localizationId: 'DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.DisplayMember', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') },
    { propertyName: 'sortMember', modelName: '@SortMember', displayName: 'Sort Member', localizationId: 'DevExpress.XtraReports.Parameters.DynamicListLookUpSettings.SortMember', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') },
    sortOrder
];
const staticListLookUpSettingsInfo = {
    propertyName: 'lookUpValues',
    displayName: 'Look-Up Values',
    localizationId: 'DevExpress.XtraReports.Parameters.StaticListLookUpSettings.LookUpValues',
    modelName: 'LookUpValues',
    array: true
};
const editedStaticListLookUpSettingsInfo = { ...staticListLookUpSettingsInfo, editor: { custom: 'dxrd-lookUpValues-editing' } };
const readonlyStaticListLookUpSettingsInfo = { ...staticListLookUpSettingsInfo, editor: designerEditorTemplates.getEditor('lookUpValues') };

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/parameters/lookUpValue.js

const lookUpValueSerializationInfo = [
    { propertyName: 'description', localizable: true, modelName: '@Description', displayName: 'Description', localizationId: 'DevExpress.XtraReports.Parameters.Parameter.Description', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') },
    { propertyName: '_value', modelName: '@Value', link: true },
];

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/lookUpValue.js



class LookUpValue {
    static createNew() {
        return new LookUpValue({});
    }
    static from(model, serializer) {
        return new LookUpValue(model, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, lookUpValueSerializationInfo, refs);
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this.value = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this._value() && this._value().content();
            },
            write: (newValue) => {
                this._value() && this._value().content(newValue);
            }
        });
    }
    getInfo() {
        if (this.valueInfo) {
            return lookUpValueSerializationInfo.concat(this.valueInfo());
        }
        return lookUpValueSerializationInfo;
    }
    get isEmpty() {
        return this._value() === null || this._value() === undefined;
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/lookupSettings.js










class LookUpSettings extends ObjectItem {
    _getFlatParametersOrderedList(layoutItems) {
        let parameters = [];
        layoutItems.forEach(layoutItem => {
            if (layoutItem instanceof ParameterLayoutItem)
                parameters.push(layoutItem.parameter());
            else if (layoutItem instanceof GroupLayoutItem) {
                const paramsInGroup = this._getFlatParametersOrderedList(layoutItem.parameterPanelLayoutItems());
                if (paramsInGroup.length > 0)
                    parameters = [...parameters, ...paramsInGroup];
            }
        });
        return parameters;
    }
    getInfo() {
        return super.getInfo().concat([metadata_filterString, metadata_filterStringEditable]);
    }
    updateFilter(parameter, report) {
        this.filterString.helper.parameters = external_ko_namespaceObject.pureComputed({
            read: () => {
                const orderedParameters = this._getFlatParametersOrderedList(report.parameterPanelLayoutItems());
                const currentIndex = orderedParameters.indexOf(parameter);
                const filteredParameters = currentIndex == -1 ? orderedParameters : (currentIndex > 0 ? orderedParameters.slice(0, currentIndex) : []);
                return collectAvailableParameters(filteredParameters);
            },
            deferEvaluation: true
        });
        this._disposables.push(this.filterString.helper.parameters);
    }
    constructor(model, dsHelperProvider, serializer) {
        super(model, dsHelperProvider, serializer);
    }
}
class StaticListLookUpSettings extends LookUpSettings {
    getInfo() {
        return super.getInfo().concat(this._isEditing() ? editedStaticListLookUpSettingsInfo : readonlyStaticListLookUpSettingsInfo);
    }
    preInitProperties(model, helper, serializer) {
        super.preInitProperties(model, helper, serializer);
        this._isEditing = external_ko_namespaceObject.observable(false);
    }
    afterDeserialization(model, serializer) {
        this.lookUpValues = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.LookUpValues || [], (item) => { return new LookUpValue(item, serializer); });
        super.afterDeserialization(model, serializer);
    }
    updateFilter(parameter, report) {
        this.filterString.itemsProvider({
            getItems(pathRequest) {
                const result = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                result.resolve([
                    {
                        displayName: 'Description',
                        isList: false,
                        name: 'Description',
                        specifics: 'String'
                    },
                    {
                        displayName: 'Value',
                        isList: false,
                        name: 'Value',
                        specifics: parameter.specifics
                    }
                ]);
                return result.promise();
            }
        });
        super.updateFilter(parameter, report);
    }
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.XtraReports.Parameters.StaticListLookUpSettings' }, model), dsHelperProvider, serializer);
        this.filterString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this._filterString);
        this.filterString.helper.canChoiceParameters = true;
        this.filterString.itemsProvider = external_ko_namespaceObject.observable(null);
    }
}
class DynamicListLookUpSettings extends LookUpSettings {
    getInfo() {
        return super.getInfo().concat(dynamicListLookUpSettingsInfoBase);
    }
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.XtraReports.Parameters.DynamicListLookUpSettings' }, model), dsHelperProvider, serializer);
        this.dsHelperProvider = dsHelperProvider;
        this.filterString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this._filterString, external_ko_namespaceObject.pureComputed(() => { return this.getPath('valueMember'); }), external_ko_namespaceObject.pureComputed(() => !this.dataSource()));
    }
    getPath(propertyName) {
        if (propertyName === 'dataMember') {
            return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
        }
        else if (propertyName === 'displayMember' || propertyName === 'valueMember' || propertyName === 'sortMember') {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.getPath('dataMember'), this.dataMember());
        }
        return '';
    }
    isPropertyDisabled(name) {
        if (name != 'dataSource')
            return this.dataSource() === null;
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/metadata/parameters/rangeSettings.js



const rangeEditor = {
    custom: 'dxrd-parameters-range-grid', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.PropertyGridEditorFlat
};
const rangeBoundaryParameterInfos = [
    parameterNameSerializationInfo, parameterValueSerializationInfo,
    parameterExpressionBindings, parameterExpressionSerializationInfo,
];
const startParameter = {
    propertyName: 'startParameter', modelName: '@StartParameter', displayName: 'Start Parameter', localizationId: 'DevExpress.XtraReports.Parameters.RangeSettings.StartParameter',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), link: true
};
const endParameter = {
    propertyName: 'endParameter', modelName: '@EndParameter', displayName: 'End Parameter', localizationId: 'DevExpress.XtraReports.Parameters.RangeSettings.EndParameter',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), link: true
};
const rangeSettingsInfos = [startParameter, endParameter];

;// external "DevExpress.Analytics.Criteria.Utils"
const external_DevExpress_Analytics_Criteria_Utils_namespaceObject = DevExpress.Analytics.Criteria.Utils;
;// ./node_modules/devexpress-reporting/designer/internal/_createIDataMemberInfoByName.js
function createIDataMemberInfoByName(name, specifics = 'list') {
    return {
        displayName: name,
        name: name,
        specifics: specifics,
        isList: specifics === 'list' ? true : false
    };
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/expressions/_wrappedExpressionOptions.js





class WrappedExpressionOptions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(options, handlers, fieldListProvider, eventName) {
        super();
        this.eventName = eventName;
        this.isValid = external_ko_namespaceObject.observable(true);
        this.warningMessage = external_ko_namespaceObject.observable('');
        this.expression = external_ko_namespaceObject.observable(null);
        this.rootItems = [
            { name: 'Parameters', needPrefix: true },
            { name: 'ReportItems', needPrefix: false, rootPath: 'Root' },
            { name: 'DataSource', needPrefix: false, rootPath: 'Root' },
            { name: 'Arguments', needPrefix: false, rootPath: 'Root' }
        ];
        if (handlers) {
            this._disposables.push(this.value = external_ko_namespaceObject.computed({
                read: () => {
                    return this.expression() && this.expression().expression() || '';
                },
                write: (newVal) => {
                    if (this.expression()) {
                        if (newVal && newVal.trim()) {
                            this.expression().expression(newVal);
                        }
                        else {
                            handlers.removeExpression(this.expression());
                        }
                    }
                    else {
                        if (newVal && newVal.trim())
                            handlers.addExpression(newVal);
                    }
                }
            }));
        }
        else {
            this.value = options.value;
        }
        this.path = options.path;
        this.functions = options.functions;
        this.customizeCategories = options.customizeCategories;
        const specificRootItems = {
            'DataSource': (path) => {
                if (path === 'DataSource') {
                    return ['CurrentRowIndex', 'RowCount', 'CurrentRowHierarchyLevel'].map(name => createIDataMemberInfoByName(name, 'integer'))
                        .concat(['IsFirstRow', 'IsLastRow'].map(name => createIDataMemberInfoByName(name, 'bool')));
                }
            },
            'Arguments': (path) => path === 'Arguments' && ['PageIndex', 'PageCount'].map(name => createIDataMemberInfoByName(name, 'integer'))
        };
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const unwrappedfieldListProvider = external_ko_namespaceObject.unwrap(fieldListProvider);
            try {
                this.isValid(true);
                this.warningMessage('');
                if (!this.value())
                    return;
                external_DevExpress_Analytics_Criteria_Utils_namespaceObject.CriteriaOperatorStateMachine.parse(this.value());
                if (unwrappedfieldListProvider) {
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.validateExpression)({
                        fieldListProvider: {
                            getItemByPath: (path) => {
                                return unwrappedfieldListProvider.getItemByPath(path, specificRootItems);
                            },
                            getItems: () => void 0
                        },
                        expression: this.value(),
                        path: this.path(),
                        rootItems: this.rootItems.map(x => x.name),
                    }).done((result) => this.warningMessage(result)).fail(() => this.isValid(false));
                }
            }
            catch {
                this.isValid(false);
            }
        }));
    }
    onHiding(e) { }
    onShowing(e) { }
    onContentReady(e) { }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/parameterExpressionBinding.js





function createExpressionProperty(object, propertyName, suffix = 'ExpressionObj') {
    if (!object.expressionBindings().filter(binding => binding.propertyName() === propertyName)[0]) {
        const newExpression = new ParameterExpressionBinding({});
        newExpression.propertyName(propertyName);
        object.expressionBindings.push(newExpression);
    }
    const propertyExpression = object.expressionBindings().filter(binding => binding.propertyName() === propertyName)[0];
    const expressionProperty = {
        value: propertyExpression.expression,
        customizeCategories: propertyName !== 'Value' ? () => { } : (tool, categories) => {
            const fields = categories.filter(item => item.content.name == 'dx-expressioneditor-fields')[0];
            if (fields)
                categories.splice(categories.indexOf(fields), 1);
        },
        functions: reportFunctionDisplay.filter(cat => cat.category != 'Summary' && cat.category != 'Aggregate')
    };
    const wrappedExpressionOptions = new WrappedExpressionOptions(expressionProperty, {
        addExpression: (value) => {
            if (object.expressionBindings().indexOf(propertyExpression) === -1)
                object.expressionBindings.push(propertyExpression);
            propertyExpression.expression(value);
        },
        removeExpression: (expression) => {
            object.expressionBindings.remove(propertyExpression);
            wrappedExpressionOptions.isValid(true);
        }
    });
    object._disposables.push(external_ko_namespaceObject.computed(() => {
        if (object.expressionBindings().indexOf(propertyExpression) !== -1) {
            wrappedExpressionOptions.expression(propertyExpression);
        }
        else
            wrappedExpressionOptions.expression(null);
    }), wrappedExpressionOptions);
    object[propertyName + suffix] = wrappedExpressionOptions;
    return wrappedExpressionOptions;
}
class ParameterExpressionBinding {
    getInfo() {
        return parameterExpressionBindingSerializationsInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
    }
    isEmpty() {
        return !this.expression();
    }
}
ParameterExpressionBinding.expressionSuff = 'ExpressionObj';


;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/rangeSettings.js






class RangeParametersSettings extends ObjectItem {
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.XtraReports.Parameters.RangeParametersSettings' }, model), dsHelperProvider, serializer);
    }
    _updateInfo(info) {
        if (this._isEditing())
            info.forEach(x => {
                if (x.editor && x.editor === external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'))
                    x.editor = rangeEditor;
            });
    }
    preInitProperties(model, helper, serializer) {
        super.preInitProperties(model, helper, serializer);
        this._isEditing = external_ko_namespaceObject.observable(false);
    }
    getInfo() {
        const info = super.getInfo().concat(rangeSettingsInfos);
        this._updateInfo(info);
        return info;
    }
    initalizeRangeParameter(rangeParameter, parameter, namePostfix = '_Start') {
        rangeParameter.parameterName(parameter.name + namePostfix);
        rangeParameter.value(parameter.defaultValue);
    }
    assingParameterInfo(parameter) {
        [this.startParameter(), this.endParameter()].forEach((rangeParameter) => {
            rangeParameter.valueInfo = parameter.valueInfo;
            rangeParameter.type = parameter.type;
            rangeParameter._specifics(parameter.parameterTypesHelper.getSpecifics(parameter.type()));
            createExpressionProperty(rangeParameter, 'Value');
        });
    }
    initializeParameters(parameter) {
        this.assingParameterInfo(parameter);
        this.initalizeRangeParameter(this.startParameter(), parameter);
        this.initalizeRangeParameter(this.endParameter(), parameter, '_End');
    }
}
class RangeBoundaryParameter extends ObjectItem {
    getInfo() {
        if (this.valueInfo) {
            const info = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], rangeBoundaryParameterInfos);
            const valueInfo = this.type() === 'System.DateTime' ? (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.valueInfo(), { editorOptions: { type: 'date' } }) : this.valueInfo();
            info.splice(info.indexOf(info.filter((prop) => { return prop.propertyName === 'value'; })[0]), 1, valueInfo);
            return info;
        }
        return rangeBoundaryParameterInfos;
    }
    constructor(model, dsHelperProvider, serializer) {
        super(model, dsHelperProvider, serializer);
        this._specifics = external_ko_namespaceObject.observable('date');
        this.templateName = 'dx-treelist-item';
    }
    get name() {
        return this.parameterName();
    }
    get displayName() {
        return this.parameterName();
    }
    get specifics() {
        return this._specifics();
    }
}
class RangeStartParameter extends RangeBoundaryParameter {
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.XtraReports.Parameters.RangeStartParameter' }, model), dsHelperProvider, serializer);
    }
}
class RangeEndParameter extends RangeBoundaryParameter {
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.XtraReports.Parameters.RangeEndParameter' }, model), dsHelperProvider, serializer);
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/universalDataSource.js







class TableInfoCollectionItem extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, dataSource, dsHelper, serializer) {
        super(model, serializer, tableInfoCollectionItemSerializationsInfo);
        this.filterString = external_ko_namespaceObject.observable(null);
        const options = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this['_filterString'], external_ko_namespaceObject.pureComputed(() => {
            return dsHelper() && (dsHelper().getDataSourcePath(dataSource) + '.' + this['tableName']());
        }), external_ko_namespaceObject.pureComputed(() => !dataSource));
        options.helper.canChoiceParameters = true;
        this.filterString(options);
    }
}
const tableInfoCollectionItemSerializationsInfo = [metadata_filterString, metadata_filterStringEditable, { propertyName: 'tableName', modelName: '@TableName' }];
class UniversalDataSource extends ObjectItem {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.parameters);
        this.disposeObservableArray(this.tableInfoCollection);
        this.disposeObservableArray(this.spParameterInfoCollection);
        this.resetObservableArray(this.parameters);
        this.resetObservableArray(this.tableInfoCollection);
        this.resetObservableArray(this.spParameterInfoCollection);
    }
    getInfo() {
        return super.getInfo().concat([
            { propertyName: 'parameters', modelName: 'Parameters', array: true },
            { propertyName: 'tableInfoCollection', modelName: 'TableInfoCollection', array: true },
            { propertyName: 'spParameterInfoCollection', modelName: 'StoredProcedureParameterInfoCollection', array: true },
            { propertyName: 'name', modelName: '@Name' }
        ]);
    }
    constructor(model, dsHelperProvider, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ObjectType': 'DevExpress.ReportServer.Infrastructure.Data.UniversalDataSource' }, model), dsHelperProvider, serializer);
        this.parameters = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.Parameters || [], (item) => { return new ObjectStorageParameter(item, serializer); });
        this.tableInfoCollection = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.TableInfoCollection || [], (item) => { return new TableInfoCollectionItem(item, this, dsHelperProvider, serializer); });
        this.spParameterInfoCollection = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.StoredProcedureParameterInfoCollection || [], (item) => { return new ObjectStorageParameter(item, serializer); });
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/objectItemCreation.js





function createNewObjectItem(model, dsHelperProvider, serializer) {
    const objectType = model['@ObjectType'] || '';
    if (objectType.indexOf('StaticListLookUpSettings') !== -1) {
        return new StaticListLookUpSettings(model, dsHelperProvider, serializer);
    }
    else if (objectType.indexOf('DynamicListLookUpSettings') !== -1) {
        return new DynamicListLookUpSettings(model, dsHelperProvider, serializer);
    }
    else if (objectType.indexOf('RangeParametersSettings') !== -1) {
        return new RangeParametersSettings(model, dsHelperProvider, serializer);
    }
    else if (objectType.indexOf('RangeStartParameter') !== -1) {
        return new RangeStartParameter(model, dsHelperProvider, serializer);
    }
    else if (objectType.indexOf('RangeEndParameter') !== -1) {
        return new RangeEndParameter(model, dsHelperProvider, serializer);
    }
    else if (objectType.indexOf('ReportServer') !== -1 && model['@ObjectType'].indexOf('DataSource') !== -1) {
        return new UniversalDataSource(model, dsHelperProvider, serializer);
    }
    else if (objectType.indexOf('DataFederation') !== -1) {
        return new DataFederationDataSource(model, dsHelperProvider, serializer);
    }
    return new ObjectStorageItem(model, dsHelperProvider, serializer);
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/objectStorage.js




class ObjectsStorage extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(objects, dsHelperProvider) {
        super();
        this.objects = objects;
        this.dsHelperProvider = dsHelperProvider;
    }
    findType(content) {
        const objectStorages = this.objects().filter((item) => { return item instanceof ObjectStorageItem; });
        const result = objectStorages.filter((item) => {
            return !!item.type && item.type() === 'System.Type' && item.content() === content;
        });
        return result.length === 0 ? null : result[0];
    }
    getType(type) {
        let typeObject = this.findType(type);
        if (!typeObject) {
            typeObject = new ObjectStorageItem({
                '@Content': type,
                '@Type': 'System.Type'
            }, this.dsHelperProvider);
            this.objects.push(typeObject);
        }
        return typeObject;
    }
    addValue() {
        const newValueRef = new ObjectStorageItem({ '@Content': '' }, this.dsHelperProvider);
        this.objects.push(newValueRef);
        return newValueRef;
    }
    createStaticLookUpSetting() {
        const lookUpObject = new StaticListLookUpSettings({}, this.dsHelperProvider);
        this.objects.push(lookUpObject);
        return lookUpObject;
    }
    createDynamicLookUpSetting() {
        const lookUpObject = new DynamicListLookUpSettings({}, this.dsHelperProvider);
        this.objects.push(lookUpObject);
        return lookUpObject;
    }
    createRangeSetting() {
        const rangeSettingsObject = new RangeParametersSettings({}, this.dsHelperProvider);
        this.objects.push(rangeSettingsObject);
        const startParameter = new RangeStartParameter({}, this.dsHelperProvider);
        rangeSettingsObject.startParameter(startParameter);
        this.objects.push(startParameter);
        const endParameter = new RangeEndParameter({}, this.dsHelperProvider);
        rangeSettingsObject.endParameter(endParameter);
        this.objects.push(endParameter);
        return rangeSettingsObject;
    }
}

;// external "DevExpress.Reporting.Viewer.Widgets"
const external_DevExpress_Reporting_Viewer_Widgets_namespaceObject = DevExpress.Reporting.Viewer.Widgets;
;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/propertyExpressionMapper.js


class PropertyExpressionMapper {
    constructor() {
        this._mapper = {};
    }
    getExpressionPropertyName(propertyName) {
        return propertyName.substr(0, 1).toLocaleUpperCase() + propertyName.substr(1) + 'ExpressionObj';
    }
    registerExpressionProperty(property) {
        const newPropertyName = this.getExpressionPropertyName(property.propertyName);
        const expressionInfo = {
            propertyName: newPropertyName,
            editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('expressionEditor'),
            displayName: property.displayName,
            localizationId: property.localizationId
        };
        this._mapper[newPropertyName] = {
            showExpression: external_ko_namespaceObject.observable(false)
        };
        return expressionInfo;
    }
    isPropertyVisible(propertyName, editingMode) {
        if (!editingMode)
            return !this._mapper[propertyName];
        const expressionProperty = this.getExpressionProperty(propertyName);
        return expressionProperty ? (!!this._mapper[propertyName] === expressionProperty.showExpression()) : true;
    }
    getExpressionProperty(propertyName) {
        return this._mapper[propertyName] || this._mapper[this.getExpressionPropertyName(propertyName)];
    }
}
PropertyExpressionMapper.propertiesWithExpressions = ['visible', 'enabled'];


;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/valueSourceSettingsHelper.js




class ValueSourceSettingsHelper {
    _updateValueSourceSettingsType(valueSourceSettings = this.parameter.valueSourceSettings()) {
        if (valueSourceSettings) {
            if (valueSourceSettings.objectType().indexOf('StaticListLookUpSettings') !== -1) {
                this.parameter.valueSourceSettingsType('StaticListLookUpSettings');
            }
            else if (valueSourceSettings.objectType().indexOf('DynamicListLookUpSettings') !== -1) {
                this.parameter.valueSourceSettingsType('DynamicListLookUpSettings');
            }
            else {
                this.parameter.valueSourceSettingsType('RangeParametersSettings');
            }
        }
    }
    _updateValueSourceSettings(valueSourceSettingsType) {
        const updateSettings = (settings) => {
            settings._isEditing(this.parameter._isEditing());
            return settings;
        };
        if (valueSourceSettingsType === 'StaticListLookUpSettings') {
            this.parameter.valueSourceSettings(updateSettings(this.parameter.objectsStorage.createStaticLookUpSetting()));
        }
        else if (valueSourceSettingsType === 'DynamicListLookUpSettings') {
            this.parameter.valueSourceSettings(this.parameter.objectsStorage.createDynamicLookUpSetting());
        }
        else if (valueSourceSettingsType === 'RangeParametersSettings') {
            this.parameter.isMultiValue(false);
            this.parameter.allowNull(false);
            this.parameter.selectAllValues(false);
            const rangeSetting = this.parameter.objectsStorage.createRangeSetting();
            rangeSetting.initializeParameters(this.parameter);
            this.parameter.valueSourceSettings(updateSettings(rangeSetting));
        }
        else {
            this.parameter.objectsStorage.objects.remove(this.parameter.valueSourceSettings());
            this.parameter.valueSourceSettings(null);
        }
    }
    constructor(parameter) {
        this.parameter = parameter;
    }
    initializeParameterSettingsType() {
        const locker = new external_DevExpress_Reporting_Internal_namespaceObject.Locker();
        const valueSourceSettings = this.parameter.valueSourceSettings(), lookUpValues = valueSourceSettings && (valueSourceSettings instanceof StaticListLookUpSettings) && valueSourceSettings.lookUpValues();
        if (lookUpValues) {
            lookUpValues.forEach((lookUpValue) => {
                lookUpValue.valueInfo = this.parameter.multiValueInfo;
                if (lookUpValue.isEmpty)
                    this.initializeLookUpValue(lookUpValue);
                const type = this.parameter.type();
                lookUpValue.value(this.parameter.parameterTypesHelper.convertSingleValue(lookUpValue.value(), type));
            });
        }
        this._updateValueSourceSettingsType();
        this.parameter._disposables.push(this.parameter.valueSourceSettings.subscribe((settings) => {
            locker.lock(() => this._updateValueSourceSettingsType(settings));
        }));
        this.parameter._disposables.push(this.parameter.valueSourceSettingsType.subscribe((newVal) => {
            locker.lock(() => this._updateValueSourceSettings(newVal));
        }));
        if (valueSourceSettings instanceof RangeParametersSettings) {
            valueSourceSettings.assingParameterInfo(this.parameter);
        }
    }
    initializeLookupValueSubscribe(report) {
        const self = this;
        this.parameter._disposables.push(external_ko_namespaceObject.computed(() => {
            const valueSourceSettings = this.parameter.valueSourceSettings();
            if (valueSourceSettings instanceof LookUpSettings) {
                valueSourceSettings.updateFilter(this.parameter, report);
                if (valueSourceSettings instanceof StaticListLookUpSettings) {
                    this.parameter._disposables.push(valueSourceSettings.lookUpValues.subscribe(function (changes) {
                        for (let index = 0; index < changes.length; index++) {
                            if (changes[index].status === 'added') {
                                self.initializeLookUpValue(changes[index].value);
                                changes[index].value.valueInfo = self.parameter.multiValueInfo;
                            }
                            else if (changes[index].status === 'deleted') {
                                self.parameter.objectsStorage.objects.remove(changes[index].value._value());
                            }
                        }
                    }, null, 'arrayChange'));
                }
            }
        }));
    }
    initializeLookUpValue(lookUpValue) {
        const newValue = this.parameter.objectsStorage.addValue();
        newValue.type(this.parameter.type());
        newValue.content(this.parameter.defaultValue);
        lookUpValue._value(newValue);
    }
    updateLookUpValues(newType, value = null) {
        const valueSourceSettings = this.parameter.valueSourceSettings(), lookUpValues = valueSourceSettings && (valueSourceSettings instanceof StaticListLookUpSettings) && valueSourceSettings.lookUpValues();
        if (!valueSourceSettings || !lookUpValues)
            return;
        lookUpValues.forEach((lookUpValue) => {
            const lookUpVal = lookUpValue._value();
            lookUpVal.content(value);
            !!newType && lookUpVal.type(newType);
        });
    }
    updateSettingValues(newType, value = null) {
        const valueSourceSettings = this.parameter.valueSourceSettings();
        if (valueSourceSettings && valueSourceSettings instanceof StaticListLookUpSettings) {
            this.updateLookUpValues(newType, value);
            valueSourceSettings._isEditing(this.parameter._isEditing());
        }
        else if (valueSourceSettings instanceof RangeParametersSettings) {
            valueSourceSettings.startParameter().value(value);
            valueSourceSettings.endParameter().value(value);
            valueSourceSettings._isEditing(this.parameter._isEditing());
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/parameter.js



















const EditableParameterMode = {
    _ignoreEditors: ['valueSourceSettings', 'valueSourceSettingsType'],
    _displayNamePatcher: {
        'isMultiValue': (info) => {
            info.displayName = 'Allow multiple values';
            info.localizationId = 'ASPxReportsStringId.ReportDesigner_ParametersDialog_AllowMultipleValues';
        },
        'allowNull': (info) => {
            info.displayName = 'Allow null value';
            info.localizationId = 'ASPxReportsStringId.ReportDesigner_ParametersDialog_AllowNull';
        },
        'selectAllValues': (info) => {
            info.displayName = 'Select all values';
            info.localizationId = 'ASPxReportsStringId.ReportDesigner_ParametersDialog_SelectAllValues';
        },
        'valueSourceSettingsType': (info) => info.displayName = 'Value Source'
    }
};
class Parameter extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    get _localizationProvider() {
        if (!this.__localizationProvider) {
            this.__localizationProvider = new DefaultLocalizationProvider(this);
        }
        return this.__localizationProvider;
    }
    getLocalizationProperty(propertyName) {
        return this._localizationProvider.getLocalizationProperty(propertyName);
    }
    getLocalizationProperties() {
        return this._localizationProvider.getLocalizationProperties();
    }
    applyLocalization(propertyName, propertyValue) {
        this._localizationProvider.applyLocalization(propertyName, propertyValue);
    }
    _initializeValue() {
        const value = this.value();
        if (this.isMultiValue()) {
            typeof value === 'string'
                ? this.value = external_ko_namespaceObject.observableArray(this._parameterHelper.createMultiValueArray(value.split(parameterSeparator), this, (part) => { return this.parameterTypesHelper.convertSingleValue(part, this.type()); }))
                : this.value = external_ko_namespaceObject.observableArray();
        }
        else if (this.allowNull() && !value) {
            this.value(null);
        }
        else {
            this.value(this.parameterTypesHelper.convertSingleValue(value, this.type()));
        }
    }
    _preDeserialize(model) {
        if (model['@LookUpSettings']) {
            model['@ValueSourceSettings'] = model['@LookUpSettings'];
            delete model['@LookUpSettings'];
        }
    }
    _processObsoleteProperties() {
        if (this._obsoleteValue()) {
            this.value(this._obsoleteValue().content());
            this._obsoleteValue(null);
        }
        delete this._obsoleteValue;
    }
    _getExpressionActions(name) {
        if (Parameter.propertiesWithExpressions.indexOf(name) === -1)
            return;
        const propertyInfo = this.info.filter(x => x.propertyName === name)[0];
        const expression = this[this.propertyExpressionMapper.getExpressionPropertyName(name)];
        const expressionLocalizedName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(propertyInfo.displayName, propertyInfo.localizationId);
        const expressionForLocalizedString = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('{0} Expression', 'ReportStringId.UD_PropertyGrid_Menu_ItemExpression');
        const expressionHint = external_ko_namespaceObject.pureComputed(() => { return expression.value(); });
        this._disposables.push(expressionHint);
        if (!this._expressionActions[name]) {
            const expressionEditor = new ReportExpressionEditorWrapper(external_ko_namespaceObject.observable(this), external_ko_namespaceObject.observable(expression));
            this._disposables.push(expressionEditor);
            this._expressionActions[name] = [createExpressionEditorAction({
                    expressionEditor,
                    hint: expressionHint,
                    title: (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(expressionForLocalizedString, expressionLocalizedName)
                })];
        }
        return this._expressionActions[name];
    }
    _updateTypeValues() {
        const types = this.info.filter(info => info.propertyName == 'type')[0];
        const knownEnumValues = this.parameterTypesHelper.getEnumTypeValues();
        if (!!knownEnumValues?.length)
            types.valuesArray = types.valuesArray.concat(knownEnumValues);
    }
    preprocessInfo(info) {
        if (this._isEditing()) {
            info.forEach(x => {
                if (EditableParameterMode._ignoreEditors.indexOf(x.propertyName) !== -1) {
                    x.editor = undefined;
                }
                else if (x.editor && x.editor.header === external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool').header) {
                    x.editor = designerEditorTemplates.getEditor('parametersCheckbox');
                }
                else if (x.editor && x.editor.custom === external_DevExpress_Reporting_Viewer_Widgets_namespaceObject.viewerEditorTemplates.multiValueEditable.custom) {
                    x.editor = { custom: 'dxrd-multivalue-editing' };
                }
                EditableParameterMode._displayNamePatcher[x.propertyName] && EditableParameterMode._displayNamePatcher[x.propertyName](x);
            });
        }
    }
    getInfo() {
        let info = this.info;
        if (this.type) {
            const newInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], this.info);
            newInfo.splice(newInfo.indexOf(newInfo.filter((prop) => { return prop.propertyName === 'value'; })[0]), 1, this.valueInfo());
            newInfo.splice(newInfo.indexOf(newInfo.filter((prop) => { return prop.propertyName === 'description'; })[0]) + 1, 0, labelOrientation);
            if (Parameter.availableRangeSettingTypes.indexOf(this.type()) !== -1) {
                const parameterSettingsTypeInfo = newInfo.filter((prop) => { return prop.propertyName === 'valueSourceSettingsType'; })[0];
                if (parameterSettingsTypeInfo)
                    parameterSettingsTypeInfo.valuesArray = extendValueSourceSettingsTypes;
            }
            if (this.valueSourceSettings() && this.valueSourceSettings() instanceof RangeParametersSettings) {
                const typeInfo = newInfo.filter((prop) => { return prop.propertyName === 'type'; })[0];
                if (typeInfo) {
                    typeInfo.valuesArray = ParameterTypesHelper.typeValues.filter(typeValue => Parameter.availableRangeSettingTypes.indexOf(typeValue.value) !== -1);
                }
            }
            info = newInfo;
        }
        this.preprocessInfo(info);
        this._parameterHelper && this._parameterHelper.customizeParameterProperties(this, info, { layoutItemType: 'Parameter', name: external_ko_namespaceObject.unwrap(this.name) });
        return info;
    }
    appendExpressionObjInfo(info) {
        for (let i = 0; i < info.length; i++) {
            if (info[i].propertyName == 'value')
                continue;
            const property = info[i];
            if (Parameter.propertiesWithExpressions.indexOf(property.propertyName) != -1) {
                const newProperty = this.propertyExpressionMapper.registerExpressionProperty(property);
                info.splice(i + 1, 0, newProperty);
                i++;
            }
        }
    }
    getActionClassName(propertyName) {
        const expressionPropertyName = this.propertyExpressionMapper.getExpressionPropertyName(propertyName);
        const hasExpressions = !!this[expressionPropertyName].value();
        return {
            'dxrd-editormenu-expressions': hasExpressions,
            'dxd-icon-accented': hasExpressions
        };
    }
    constructor(model, _report, serializer) {
        super();
        this._report = _report;
        this.templateName = 'dx-treelist-item';
        this.labelOrientation = external_ko_namespaceObject.observable('Horizontal');
        this.actionProviders = [];
        this._expressionActions = {};
        this.expressionObj = {};
        this.info = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], parameterSerializationInfo);
        this.propertyExpressionMapper = new PropertyExpressionMapper();
        this._isEditing = external_ko_namespaceObject.observable(false);
        this._showLayoutProperties = external_ko_namespaceObject.observable(false);
        this.collapsed = external_ko_namespaceObject.observable(false);
        this.valueSourceSettingsType = external_ko_namespaceObject.observable('None');
        this._canRemove = true;
        this.valueInfo = external_ko_namespaceObject.observable();
        this.multiValueInfo = external_ko_namespaceObject.observable();
        this.parameterTypesHelper = new ParameterTypesHelper();
        this.appendExpressionObjInfo(this.info);
        this.actionProviders.push({ getActions: (name) => this._getExpressionActions(name) });
        this._disposables.push(this._localizationProvider);
        const objectsStorage = _report.objectsStorageHelper;
        const parameterHelper = _report.parameterHelper;
        this._preDeserialize(model);
        this.parameterTypesHelper = new ParameterTypesHelper(_report.knownEnums);
        this._updateTypeValues();
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
        this.valueSourceSettingsHelper = new ValueSourceSettingsHelper(this);
        this.objectsStorage = objectsStorage;
        this._parameterHelper = parameterHelper;
        this['_name'] = external_ko_namespaceObject.observable(this.parameterName());
        this['change'] = (e, parameters) => {
            if (parameters.filter(x => x.parameterName() === e.value).length === 1) {
                this['_name'](e.value);
            }
            else {
                this.parameterName(this['_name']());
            }
        };
        if (!this._type()) {
            this._type(objectsStorage.getType('System.String'));
        }
        this._processObsoleteProperties();
        this.type = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this._type().content();
            },
            write: (val) => {
                const oldVal = this._type().content();
                if (val !== oldVal) {
                    const editorValue = this.value();
                    if (this.isMultiValue())
                        this.value([]);
                    else
                        this.value(null);
                    this.valueSourceSettingsHelper.updateSettingValues(undefined, null);
                    setTimeout(() => {
                        this._type(objectsStorage.getType(val));
                        if (this.isMultiValue())
                            return;
                        if (val === 'System.DateTime') {
                            this.value(this.defaultValue);
                        }
                        else {
                            this.value(this.parameterTypesHelper.convertSingleValue(editorValue, this.type()));
                        }
                        this.valueSourceSettingsHelper.updateSettingValues(this._type().content(), this.defaultValue);
                    }, 1);
                }
            }
        });
        this.expressionObj = {
            getInfo: () => {
                const info = this.getInfo().filter(x => x.propertyName.indexOf(ParameterExpressionBinding.expressionSuff) != -1);
                info.filter(x => x.propertyName == 'ValueExpressionObj')[0].displayName = 'Value';
                return info;
            }
        };
        this.info.forEach(property => {
            const index = property.propertyName.indexOf(ParameterExpressionBinding.expressionSuff);
            if (index !== -1) {
                this.expressionObj[property.propertyName] = createExpressionProperty(this, property.propertyName.substr(0, index));
            }
        });
        this._initializeValue();
        this._disposables.push(this.isMultiValue.subscribe((newMultiValue) => {
            if (newMultiValue) {
                this.value = external_ko_namespaceObject.observableArray([this._parameterHelper.createMultiValue(this, this.value())]);
            }
            else {
                this.value = external_ko_namespaceObject.observable(this.defaultValue);
                this.selectAllValues(false);
            }
        }));
        this._disposables.push(this.selectAllValues.subscribe((newValue) => {
            if (newValue) {
                this.value = external_ko_namespaceObject.observableArray([]);
            }
            else if (this.isMultiValue()) {
                this.value = external_ko_namespaceObject.observableArray([this._parameterHelper.createMultiValue(this, this.value())]);
            }
            else {
                this.value = external_ko_namespaceObject.observable(this.defaultValue);
            }
            this[parameterExpressionSerializationInfo.propertyName].value('');
        }));
        this._disposables.push(this.valueSourceSettingsType.subscribe((newVal) => {
            if (newVal === 'None') {
                this.selectAllValues(false);
            }
        }));
        this._disposables.push(this._isEditing.subscribe((newVal) => {
            const settings = this.valueSourceSettings();
            if (settings instanceof RangeParametersSettings || settings instanceof StaticListLookUpSettings) {
                settings._isEditing(newVal);
            }
        }));
        this.valueInfo = external_ko_namespaceObject.pureComputed(() => {
            const result = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, parameterValueSerializationInfo, parameterHelper.getParameterInfo(this));
            result.propertyName = 'value';
            if (this.type() === 'System.String' || this.isMultiValue()) {
                result.defaultVal = '';
            }
            return result;
        });
        this.valueSourceSettingsHelper.initializeParameterSettingsType();
        this.valueSourceSettingsHelper.initializeLookupValueSubscribe(_report);
        this.viewmodel = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(external_ko_namespaceObject.observable(this));
    }
    isPropertyVisible(name) {
        if (name === 'valueSourceSettings') {
            return !!this.valueSourceSettings();
        }
        else if (name === parameterValueSerializationInfo.propertyName) {
            return !(this.valueSourceSettings() instanceof RangeParametersSettings);
        }
        else if (name == parameterExpressionSerializationInfo.propertyName) {
            return this._isEditing() || this.isMultiValue();
        }
        else if (name == labelOrientation.propertyName) {
            return this._showLayoutProperties();
        }
        return this.propertyExpressionMapper.isPropertyVisible(name, this._isEditing());
    }
    getParameterDescriptor() {
        return {
            description: this.description.peek(),
            displayName: 'Value',
            localizationId: 'DevExpress.XtraReports.Parameters.Parameter.Value',
            name: this.parameterName.peek(),
            type: this.type.peek(),
            value: this.value.peek(),
            visible: this.visible.peek(),
            enabled: this.enabled.peek(),
            multiValue: this.isMultiValue.peek(),
            allowNull: this.allowNull.peek(),
            selectAllValues: this.selectAllValues.peek(),
            tag: this.tag.peek()
        };
    }
    assign(parameter) {
        this.getInfo().forEach((info) => {
            if (this[info.propertyName] && external_ko_namespaceObject.isWritableObservable(this[info.propertyName]))
                this[info.propertyName](parameter[info.propertyName]());
        });
    }
    getRangeParameters() {
        let result = [];
        if (this.isList) {
            const settings = (this.valueSourceSettings());
            result = [
                settings.startParameter(),
                settings.endParameter()
            ];
        }
        return result;
    }
    get name() {
        return this.parameterName();
    }
    get specifics() {
        return this.isList ? external_DevExpress_Analytics_Widgets_Internal_namespaceObject.RangeSpecific : this.parameterTypesHelper.getSpecifics(this.type());
    }
    get icon() {
        return this.parameterTypesHelper.getIcon(this.type());
    }
    get defaultValue() {
        return this.parameterTypesHelper.getDefaultValue(this.type());
    }
    get displayName() {
        return this.parameterName();
    }
    get isList() {
        return this.valueSourceSettings() instanceof RangeParametersSettings;
    }
    get dragData() {
        return { noDragable: this.isList };
    }
    get canRemove() {
        return this._canRemove;
    }
    isPropertyDisabled(propertyName) {
        if (propertyName === 'allowNull' || propertyName === 'isMultiValue') {
            return this.valueSourceSettings() instanceof RangeParametersSettings;
        }
        if (propertyName === 'selectAllValues') {
            return !(this.isMultiValue() && (this.valueSourceSettings() instanceof StaticListLookUpSettings ||
                this.valueSourceSettings() instanceof DynamicListLookUpSettings));
        }
        if (propertyName === parameterValueSerializationInfo.propertyName || propertyName === parameterExpressionSerializationInfo.propertyName)
            return this.selectAllValues() && !this.isPropertyDisabled('selectAllValues');
        return false;
    }
}
Parameter.propertiesWithExpressions = ['visible', 'enabled', 'value'];
Parameter.ParametersRefString = 'Parameters';
Parameter.defaultGuidValue = ParameterTypesHelper.defaultGuidValue;
Parameter.availableRangeSettingTypes = ['System.DateTime'];


;// ./node_modules/devexpress-reporting/designer/localization/localizationMetadata.js
const componentInfo = { propertyName: 'component', modelName: '@Component', link: true };
const cultureInfo = { propertyName: 'culture', modelName: '@Culture' };
const propertyNameInfo = { propertyName: 'propertyName', modelName: '@Path' };
const propertyValueInfo = { propertyName: 'propertyValue', modelName: '@Data' };

;// ./node_modules/devexpress-reporting/designer/internal/serialization/_serializer.js




class ReportModelSerializer extends external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer {
    constructor(reportModel, options) {
        super(options);
        this.reportModel = reportModel;
        this.isLocalized = false;
    }
    serialize(viewModel, serializationsInfo, refs) {
        const isInitialize = !viewModel;
        viewModel = viewModel || this.reportModel;
        refs = refs || { linkObjTable: [], objects: [] };
        const model = super.serialize(viewModel, serializationsInfo, refs);
        if (isInitialize) {
            model['@Ref'] = (refs.objects.push(viewModel) - 1).toString();
            this.setLinks(refs);
        }
        return model;
    }
    serializeProperty(modelPropertyInfo, viewModel, serializationsInfo, refs, result) {
        if (!modelPropertyInfo.localizable || !this.reportModel.isLocalized()) {
            return super.serializeProperty(modelPropertyInfo, viewModel, serializationsInfo, refs, result);
        }
    }
    deserialize(viewModel, model, serializationsInfo) {
        if (viewModel.controlType === 'DevExpress.XtraReports.UI.XtraReport') {
            if (!this.reportModel)
                this.reportModel = viewModel;
            const currentLocalizationItems = model[localizationItems.modelName];
            if (currentLocalizationItems) {
                this.isLocalized = true;
                this.localizationJsonObj = Object.keys(currentLocalizationItems).map(key => currentLocalizationItems[key]).filter(a => a[cultureInfo.modelName] === external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture);
            }
        }
        return super.deserialize(viewModel, model, serializationsInfo);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_initUtils.js


function getUnitProperties(object) {
    const properties = object && object['constructor'] && object['constructor'].unitProperties;
    if (properties) {
        return {
            reCalculateObject: (coef) => {
                for (let i = 0; i < properties.length; i++) {
                    const propertyName = properties[i];
                    const property = object['_' + propertyName] || object[propertyName];
                    const innerProperties = getUnitProperties(property);
                    if (innerProperties) {
                        innerProperties.reCalculateObject(coef);
                    }
                    else {
                        !!external_ko_namespaceObject.unwrap(property) && property((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(external_ko_namespaceObject.unwrap(property) * coef));
                    }
                }
            },
            calcProperty: (val, coef) => val && (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(val * coef),
            properties
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/localization/_localization.js





class LocalizationItem {
    constructor(model, serializer) {
        this.culture = external_ko_namespaceObject.observable();
        this.component = external_ko_namespaceObject.observable();
        this.propertyName = external_ko_namespaceObject.observable();
        this.propertyValue = external_ko_namespaceObject.observable();
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        model && serializer.deserialize(this, model);
    }
    getInfo() {
        return [componentInfo, cultureInfo, propertyNameInfo, propertyValueInfo];
    }
}
function getComponentInfo(localizationPropertyInfo) {
    return localizationPropertyInfo.component.getLocalizationProperty(localizationPropertyInfo.propertyName);
}
function searchInLocalizationArray(localizationArray, controlPropertyName, component) {
    return localizationArray.filter(localizationItem => {
        return localizationItem.component == component && localizationItem.propertyName === controlPropertyName;
    })[0];
}
class LocalizationDictionary {
    constructor() {
        this.cultures = {};
        this.count = () => {
            return Object.keys(this.cultures).length;
        };
        this.clear = (code) => {
            if (!code) {
                const defaultCultureInfo = this.cultures[external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture];
                this.cultures = {};
                this.cultures[external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture] = defaultCultureInfo;
            }
            else {
                this.cultures[code].properties = [];
                delete this.cultures[code];
            }
        };
    }
    add(code) {
        this.cultures[code] = new LocalizationInfo(code);
        this.cultures[code].createNodes(code, this);
        return this.cultures[code];
    }
    get(code) {
        return this.cultures[code];
    }
    keys() {
        return Object.keys(this.cultures);
    }
}
class LocalizationInfo {
    constructor(code) {
        this.code = code;
        this.properties = [];
        this.isLocalized = external_ko_namespaceObject.observable(false);
        this.setValue = (component, propertyName, value, target) => {
            const propertyValue = external_ko_namespaceObject.unwrap(value);
            const setInfo = {
                component: component,
                propertyName: propertyName,
                target: target,
                value: propertyValue && propertyValue.toString() || propertyValue
            };
            const selfProperty = searchInLocalizationArray(this.properties, setInfo.propertyName, setInfo.component);
            const closestProperty = this.parent ? this.parent.findClosestProperty(setInfo) : undefined;
            if (selfProperty) {
                if (closestProperty && closestProperty.value == setInfo.value)
                    this.properties.splice(this.properties.indexOf(selfProperty), 1);
                else {
                    selfProperty.value = setInfo.value;
                    selfProperty.target = setInfo.target;
                }
            }
            else if (!closestProperty || closestProperty.value !== setInfo.value) {
                this._updateLocalizationInfoItem(setInfo);
                this.properties.push(setInfo);
            }
            this.isLocalized(this.properties.length > 0);
        };
    }
    getInheritedProperties() {
        const collectedProperties = this.properties.map(a => a);
        return this.parent ? this.parent.mergePropertiesWithChild(collectedProperties) : collectedProperties;
    }
    createNodes(code, list) {
        const parent = this.getParentCulture(code);
        if (!parent)
            return;
        if (!list.get(parent))
            list.add(parent);
        this.parent = list.get(parent);
    }
    mergePropertiesWithChild(childArray) {
        this.properties.forEach(property => {
            const mergeElement = childArray.filter(info => info.component === property.component && info.propertyName === property.propertyName);
            if (!mergeElement.length)
                childArray.push(property);
        });
        return this.parent ? this.parent.mergePropertiesWithChild(childArray) : childArray;
    }
    _recalculateUnit(item, serializationInfo, process) {
        let model = external_ko_namespaceObject.unwrap(serializationInfo.from ? serializationInfo.from(item.value) : item.value);
        model = process(model);
        item.value = serializationInfo.toJsonObject ? serializationInfo.toJsonObject(model) : model.toString();
    }
    _updateLocalizationInfoItem(setInfo) {
        const localizedControl = getComponentInfo(setInfo);
        const serializationInfo = localizedControl && localizedControl.info;
        const unitProperties = getUnitProperties(setInfo.component);
        if (serializationInfo && unitProperties && unitProperties.properties.some(x => x === serializationInfo.propertyName)) {
            setInfo.recalculate = (coef) => {
                this._recalculateUnit(setInfo, serializationInfo, (value) => {
                    const valueUnits = getUnitProperties(value);
                    if (valueUnits) {
                        valueUnits.reCalculateObject(coef);
                        return value;
                    }
                    return unitProperties.calcProperty(value, coef);
                });
            };
        }
    }
    _createLocalizationItem(itemInfo) {
        const item = new LocalizationItem();
        item.culture(this.code);
        item.component(itemInfo.component);
        item.propertyName(itemInfo.propertyName);
        item.propertyValue(itemInfo.value.toString());
        return item;
    }
    serialize(canSerialize, existingTargets) {
        return this.properties.reduce((result, property) => {
            if (canSerialize(property.component)) {
                if (this.code === external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture) {
                    const localizedProperty = getComponentInfo(property);
                    if (!localizedProperty) {
                        return result;
                    }
                    let defaultVal = external_ko_namespaceObject.unwrap(localizedProperty.info.from ? localizedProperty.info.from(localizedProperty.info.defaultVal) : localizedProperty.info.defaultVal);
                    defaultVal = localizedProperty.info.toJsonObject ? localizedProperty.info.toJsonObject(defaultVal) : (defaultVal != null && defaultVal.toString() || defaultVal);
                    if (property.value != undefined && property.value.toString() !== defaultVal) {
                        existingTargets.push(property);
                        const localizationItem = this._createLocalizationItem(property);
                        result.push(localizationItem);
                    }
                }
                else {
                    if (existingTargets.length) {
                        const isSame = (info) => {
                            return Object.keys(info).every(key => {
                                return info[key] === property[key];
                            });
                        };
                        const sameItem = existingTargets.find(x => isSame(x));
                        if (sameItem) {
                            return result;
                        }
                        const shouldUpdateName = (defaultItem) => {
                            return defaultItem.target === property.target && property.propertyName.includes('.');
                        };
                        const item = existingTargets.find(defaultItem => shouldUpdateName(defaultItem));
                        if (item) {
                            property.propertyName = item.propertyName;
                        }
                        const localizedProperty = getComponentInfo(property);
                        if (localizedProperty && localizedProperty.target !== property.target || !localizedProperty) {
                            return result;
                        }
                    }
                    result.push(this._createLocalizationItem(property));
                }
            }
            return result;
        }, []);
    }
    findClosestProperty(mergeProperty) {
        for (let i = 0; i < this.properties.length; i++)
            if (this.properties[i].component === mergeProperty.component && this.properties[i].propertyName === mergeProperty.propertyName)
                return this.properties[i];
        return this.parent ? this.parent.findClosestProperty(mergeProperty) : undefined;
    }
    getParentCulture(cultureCode) {
        if (cultureCode == null || cultureCode == external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture)
            return undefined;
        const parts = cultureCode.split('-');
        return parts.length == 1 ? external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture : parts.splice(0, parts.length - 1).join('-');
    }
}

;// ./node_modules/devexpress-reporting/designer/localization/_localizationEngine.js





class ReportLocalizationEngine extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(report) {
        super();
        this.report = report;
        this.items = new LocalizationDictionary();
        this.add = (cultureCode, component, propertyName, value, target) => {
            const node = this.items.get(cultureCode);
            if (!node) {
                this.items.add(cultureCode).setValue(component, propertyName, value, target);
            }
            else
                node.setValue(component, propertyName, value, target);
        };
        this.save = (cultureCode = this.report.language()) => {
            this.report.enumerateComponents().forEach((control) => {
                if (control.getLocalizationProperties) {
                    control.getLocalizationProperties().forEach(item => this.add(cultureCode, control, item.propertyName, item.value, item.target));
                }
            });
        };
        this.apply = (cultureCode) => {
            const localizationItem = this.items.get(cultureCode);
            if (!localizationItem) {
                this.items.add(cultureCode);
                this.apply(cultureCode);
            }
            else {
                const needUpdate = !this.report['_update']();
                needUpdate && this.report['_update'](true);
                localizationItem.getInheritedProperties().forEach(localizationPropertyInfo => {
                    localizationPropertyInfo.component.applyLocalization(localizationPropertyInfo.propertyName, localizationPropertyInfo.value);
                });
                needUpdate && this.report['_update'](false);
            }
        };
        this.serialize = () => {
            const outArray = [];
            const _avalibleComponents = this.report.enumerateComponents();
            const _avalibleComponentsDictionary = {};
            const _getUniqueName = (component) => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.replaceInvalidSymbols)(component.controlType + external_ko_namespaceObject.unwrap(component.name));
            };
            _avalibleComponents.forEach(component => {
                _avalibleComponentsDictionary[_getUniqueName(component)] = component;
            });
            const canSerialize = (component) => {
                const item = _avalibleComponentsDictionary[_getUniqueName(component)];
                return item && component === item;
            };
            const existingTargets = [];
            this.items.keys().forEach(key => {
                outArray.push(...this.items.get(key).serialize(canSerialize, existingTargets));
            });
            return outArray;
        };
        report._localizationItems().forEach(item => {
            const component = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(item.component);
            if (component) {
                const propertyName = external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(item.propertyName);
                const target = component.getLocalizationProperty(propertyName)?.target;
                this.add(item.culture(), component, propertyName, item.propertyValue, target);
            }
        });
    }
    recalculateUnits(coef) {
        this.items.keys().forEach((key) => {
            key !== this.report.language() && this.items.get(key).properties.forEach(x => x.recalculate && x.recalculate(coef));
        });
    }
    hasCulture(cultureCode) {
        const item = this.items.get(cultureCode);
        return item && item.isLocalized();
    }
    isLocalized() {
        return this.items.keys().some((key) => {
            return key !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture && this.items.get(key).properties.length > 0;
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_modelPatch.js
function convertFontToDXFont(font) {
    font = font.replace('style=', '');
    const components = font.split(',');
    if (components.length > 1)
        components[1] = ' ' + parseFloat(components[1]);
    return components.join(',');
}
function convertMarginsToDXMargins(margins) {
    const marginsParts = margins.split(',');
    if (marginsParts.length > 4) {
        marginsParts.pop();
    }
    return marginsParts.join(',');
}
function patchFontInLocalizationItem(model) {
    if (!model)
        return;
    if (model['@Path'].indexOf('Font') !== -1) {
        model['@Data'] = convertFontToDXFont(model['@Data']);
    }
}
function patchFont(model) {
    if (model['@Font']) {
        model['@Font'] = convertFontToDXFont(model['@Font']);
    }
    return model;
}
function patchMargins(model) {
    if (model['@Margins']) {
        model['@Margins'] = convertMarginsToDXMargins(model['@Margins']);
    }
    return model;
}
function patchSubreport(model) {
    if (model['@ReportSourceUrl']) {
        delete model['ReportSource'];
    }
    return model;
}

;// ./node_modules/devexpress-reporting/designer/controls/xrCrossband.js





function findBandByPositionY(bandsHolder, position) {
    let result = null;
    bandsHolder.bands().forEach((band) => {
        if (band.absolutePosition.y.peek() <= position) {
            if (band) {
                result = findBandByPositionY(band.bandsHolder, position) || band;
                return false;
            }
        }
    });
    return result;
}
class XRCrossBandControlViewModel extends XRReportElementViewModel {
    constructor(control, parent, serializer) {
        super(control, parent, serializer);
        this.isCrossbandShow = external_ko_namespaceObject.computed(() => {
            return !!(this.startBand() && this.endBand());
        });
        const originalEndBand = this.endBand;
        this._disposables.push(this.endPoint.x = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this.startPoint.x();
            },
            write: (val) => {
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                    this.startPoint.x(val);
                }
            }
        }));
        this._disposables.push(this.locationF.x = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this.startPoint.x();
            },
            write: (val) => {
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                    this.startPoint.x(val);
                }
            }
        }));
        this._disposables.push(this.locationF.y = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this.startPoint.y();
            },
            write: (val) => {
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                    this.startPoint.y(val);
                }
            }
        }));
        if (this.parentModel()) {
            this._subscribeBands(this.parentModel());
        }
        else {
            this._disposables.push(this.parentModel.subscribe((report) => {
                if (report)
                    this._subscribeBands(report);
            }));
        }
        this._disposables.push(this.isCrossbandShow);
    }
    _subscribeBands(report) {
        this._disposables.push(report.bands.subscribe((changes) => {
            for (let i = 0; i < changes.length; i++) {
                const change = changes[i];
                if (change.status === 'deleted') {
                    if (change.value === this.startBand() && change.value === this.endBand()) {
                        report.crossBandControls.remove(this);
                    }
                    else if (change.value === this.endBand()) {
                        this.endBand(report.bands()[change.index - 1]);
                        this.endPoint.y(report.bands()[change.index - 1].height());
                    }
                    else if (change.value === this.startBand()) {
                        const saveEndBand = this.endBand(), saveEndPointY = this.endPoint.y();
                        this.startBand(report.bands()[change.index]);
                        this.startPoint.y(0);
                        this.endBand(saveEndBand);
                        this.endPoint.y(saveEndPointY);
                    }
                }
            }
        }, null, 'arrayChange'));
    }
    getNearestParent(target) {
        let result = target;
        while (result.parentModel()) {
            result = result.parentModel();
        }
        return result;
    }
    isResettableProperty(propertyName) {
        return super.isResettableProperty(propertyName) && ['startPoint', 'endPoint', 'startBand', 'endBand'].indexOf(propertyName) === -1;
    }
    isPropertyVisible(name) {
        if (name === 'size')
            return false;
        return super.isPropertyVisible(name);
    }
    getControlContainerName() { return 'crossBandControls'; }
}
XRCrossBandControlViewModel.unitProperties = ['width', 'locationF', 'startPoint', 'endPoint'];

class XRCrossBandSurface extends XRControlSurfaceBase {
    _isBandCollapsed(bandSurface) {
        return bandSurface && (bandSurface.collapsed() || bandSurface.isSomeParentCollapsed());
    }
    _updateEndPoint(height, currentAbsoluteEndY, currentAbsoluteStartY) {
        currentAbsoluteEndY = currentAbsoluteStartY + height;
        const endBandSurface = findBandByPositionY(this.parent.bandsHolder, currentAbsoluteEndY);
        if (!endBandSurface) {
            return;
        }
        if (endBandSurface.absolutePosition.y.peek() + endBandSurface.height.peek() < currentAbsoluteEndY) {
            endBandSurface['_height'](currentAbsoluteEndY - endBandSurface.absolutePosition.y.peek());
        }
        this._control.endBand(endBandSurface.getControlModel());
        this['_endY'](currentAbsoluteEndY - endBandSurface.absolutePosition.y());
    }
    _getAllBands(band) {
        const bands = band.bandsHolder.bands();
        let innerBands = [];
        bands.forEach((band) => {
            innerBands = innerBands.concat(this._getAllBands(band));
        });
        return [].concat(bands, innerBands);
    }
    _getIntersectionBands(currentRect, bands) {
        const bandSurfaces = bands.filter((band) => { return this.isThereIntersection(currentRect, band.absoluteRect()); });
        let intersectionBands = [].concat(bandSurfaces);
        bandSurfaces.forEach((band) => {
            intersectionBands = intersectionBands.concat(this._getAllBands(band));
        });
        intersectionBands = intersectionBands.filter((band) => {
            return band.controls && band.controls().length > 0;
        });
        return intersectionBands;
    }
    _getCrossBandBoxSides() {
        const currentRect = this._unitAbsoluteRect, borderWidth = this.getControlModel()['borderWidth']();
        return [{ top: currentRect.top, left: currentRect.left, height: borderWidth, width: currentRect.width },
            { top: currentRect.bottom - borderWidth, left: currentRect.left, height: borderWidth, width: currentRect.width },
            { top: currentRect.top, left: currentRect.left, height: currentRect.height, width: borderWidth },
            { top: currentRect.top, left: currentRect.right - borderWidth, height: currentRect.height, width: borderWidth }];
    }
    get _unitAbsoluteRect() {
        const startBandSurface = this._control.startBand() && this._control.startBand().surface, endBandSurface = this._control.endBand() && this._control.endBand().surface;
        const startBandTop = startBandSurface ? startBandSurface['_unitAbsoluteRect'].top : 0;
        const endBandTop = endBandSurface ? endBandSurface['_unitAbsoluteRect'].top : 0;
        const top = startBandTop + this._control.startPoint.y(), bottom = endBandTop + this._control.endPoint.y();
        return {
            top: top, left: this._control.startPoint.x(),
            right: this._control.startPoint.x() + this._control.width(), bottom: bottom,
            width: this._control.width(), height: bottom - top
        };
    }
    constructor(control, context) {
        super(control, context, XRCrossBandSurface._unitProperties);
        this.edgeUnderCursor = external_ko_namespaceObject.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
        this.underCursor = external_ko_namespaceObject.observable({ isOver: false, x: 0, y: 0, isNotDropTarget: true });
        this._disposables.push(this['_x'].subscribe((newVal) => {
            this['_endX'](newVal);
        }));
        this.visible = control.isCrossbandShow;
        let currentAbsoluteStartY = this['_startY']();
        let currentAbsoluteEndY = this['_endY']();
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (control.startBand()) {
                const startBandSurface = (0,external_DevExpress_Analytics_Internal_namespaceObject.findSurface)(control.startBand.peek());
                currentAbsoluteStartY = this._isBandCollapsed(startBandSurface) ? startBandSurface.absolutePosition.y() : this['_startY']() + startBandSurface.absolutePosition.y();
            }
            this['_y'](currentAbsoluteStartY);
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (control.endBand()) {
                const endBandSurface = (0,external_DevExpress_Analytics_Internal_namespaceObject.findSurface)(control.endBand.peek());
                currentAbsoluteEndY = this._isBandCollapsed(endBandSurface) ? endBandSurface.absolutePosition.y() : this['_endY']() + endBandSurface.absolutePosition.y();
            }
            this['_height'](currentAbsoluteEndY - currentAbsoluteStartY);
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const absoluteStartY = this['_y']();
            if (absoluteStartY < 0) {
                this['_y'](0);
                return;
            }
            if (absoluteStartY !== currentAbsoluteStartY) {
                const startBandSurface = findBandByPositionY(this.parent.bandsHolder, absoluteStartY);
                control.startBand(startBandSurface.getControlModel());
                currentAbsoluteStartY = absoluteStartY;
                this['_startY'](currentAbsoluteStartY - startBandSurface.absolutePosition.y());
                this._updateEndPoint(this['_height'](), currentAbsoluteEndY, currentAbsoluteStartY);
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const height = this['_height']();
            if (height !== currentAbsoluteEndY - currentAbsoluteStartY) {
                this._updateEndPoint(height, currentAbsoluteEndY, currentAbsoluteStartY);
            }
        }));
        this.template = control.controlType === 'XRCrossBandLine' ? 'dxrd-crossband-line' : 'dxrd-crossband';
        if (this.getControlModel().controlType === 'XRCrossBandLine') {
            this._disposables.push(this.lineCss = external_ko_namespaceObject.pureComputed(() => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.stroke(), this.cssCalculator.strokeWidthWithWidth(), this.cssCalculator.strokeDashArrayWithWidth());
            }));
            this._disposables.push(this.lineWidthCss = external_ko_namespaceObject.pureComputed(() => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.strokeWidthWithWidth());
            }));
        }
        else {
            this._disposables.push(this.leftCss = external_ko_namespaceObject.pureComputed(() => { return this.cssCalculator.crossBandBorder('Left'); }));
            this._disposables.push(this.rightCss = external_ko_namespaceObject.pureComputed(() => { return this.cssCalculator.crossBandBorder('Right'); }));
            this._disposables.push(this.topCss = external_ko_namespaceObject.pureComputed(() => { return this.cssCalculator.crossBandBorder('Top'); }));
            this._disposables.push(this.bottomCss = external_ko_namespaceObject.pureComputed(() => { return this.cssCalculator.crossBandBorder('Bottom'); }));
        }
        this._disposables.push(control.startBand.subscribe((newBand) => {
            if (newBand) {
                const bandSurface = (0,external_DevExpress_Analytics_Internal_namespaceObject.findSurface)(newBand);
                this['_y'](bandSurface.absolutePosition.y());
            }
        }));
        this._disposables.push(control.endBand.subscribe((newBand) => {
            if (newBand) {
                const bandSurface = (0,external_DevExpress_Analytics_Internal_namespaceObject.findSurface)(newBand);
                let newHeight = bandSurface.absolutePosition.y() - this['_y']();
                if (control.startBand() === newBand) {
                    newHeight += this['_endY']();
                }
                this['_height'](newHeight);
            }
        }));
        this._disposables.push(this.borderWidth = external_ko_namespaceObject.pureComputed(() => {
            return control['borderWidth'] && Math.floor(control['borderWidth']());
        }));
    }
    canSetRect(rect) {
        const report = this._control.root;
        if (report && report.language() !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture) {
            const endBand = findBandByPositionY(this.parent.bandsHolder, rect.top + rect.height);
            if (this._control.endBand() !== endBand._control)
                return false;
            const startBand = findBandByPositionY(this.parent.bandsHolder, rect.top);
            if (this._control.startBand() !== startBand._control)
                return false;
        }
        return true;
    }
    isThereIntersectionWithControls() {
        let isThereIntersection = false;
        const currentRect = this._unitAbsoluteRect, intersectionBands = this._getIntersectionBands(currentRect, this.parent && this.parent.getChildrenCollection()()), rectangles = this.getControlModel().controlType === 'XRCrossBandBox' ? this._getCrossBandBoxSides() : [currentRect];
        for (let bandIndex = 0; bandIndex < intersectionBands.length; bandIndex++) {
            for (let rectIndex = 0; rectIndex < rectangles.length; rectIndex++) {
                if (this.isThereIntersectionWithNeighborsCollection(rectangles[rectIndex], intersectionBands[bandIndex].controls().filter((control) => { return !control.isIntersectionDeny; }), '_unitAbsoluteRect')) {
                    isThereIntersection = true;
                    break;
                }
            }
            if (isThereIntersection)
                break;
        }
        return isThereIntersection;
    }
    updateAbsolutePosition() {
        this.absolutePosition.x(this['_endX']());
        this.absolutePosition.y(this['_y']());
        this.afterUpdateAbsolutePosition();
    }
    isThereIntersectionWithCrossBandControls() {
        if (this.getControlModel().controlType === 'XRCrossBandBox') {
            let isThereIntersection = false;
            const rects = this._getCrossBandBoxSides() || [];
            for (let rectIndex = 0; rectIndex < rects.length; rectIndex++) {
                if (super.isThereIntersectionWithCrossBandControls(rects[rectIndex])) {
                    isThereIntersection = true;
                    break;
                }
            }
            return isThereIntersection;
        }
        else {
            return super.isThereIntersectionWithCrossBandControls();
        }
    }
    get parent() {
        return this._getParent();
    }
    container() {
        if (this._control.isCrossbandShow()) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.findSurface)(this.getControlModel().startBand());
        }
        else {
            return null;
        }
    }
    _getChildrenHolderName() {
        return null;
    }
}
XRCrossBandSurface._unitProperties = {
    _x: (o) => {
        return o.startPoint.x;
    },
    _width: (o) => {
        return o.width;
    },
    _startY: (o) => {
        return o.startPoint.y;
    },
    _endX: (o) => {
        return o.endPoint.x;
    },
    _endY: (o) => {
        return o.endPoint.y;
    }
};


;// ./node_modules/devexpress-reporting/designer/controls/utils/_tableCalculationProvider.js

class TableCalculationProvider {
    _resetState() {
        this._calculationNodes = [];
        this._tableOffset.width = null;
        this._tableOffset.left = null;
        this._calculationStarted = false;
    }
    _startCalculation(calculationNodes = this._calculationNodes) {
        this._calculationStarted = true;
        const rows = this._table.rows().map((row, rowIndex) => {
            return row.cells().map((cell, cellIndex) => {
                const modifiedCell = calculationNodes.filter(x => x.column === cellIndex && x.row === rowIndex)[0];
                const weight = cell.weight();
                return modifiedCell ? modifiedCell.calc : () => cell.weight(weight);
            });
        });
        this._tableOffset.left && this._table.location.x(this._table.location.x() + this._tableOffset.left);
        this._tableOffset.width && this._table.size.width(this._table.size.width() + this._tableOffset.width);
        rows.forEach(r => r.forEach(c => c()));
        this._calculationStarted = false;
    }
    constructor(_table) {
        this._table = _table;
        this._tableOffset = {
            width: null,
            left: null
        };
        this._calculationStarted = false;
        this._calculationTimeout = null;
        this._calculationNodes = [];
    }
    addTableOffset(width, left) {
        this._tableOffset.width = width;
        this._tableOffset.left = left;
    }
    addCalculationNode(node) {
        if (this._calculationStarted)
            return;
        this._calculationNodes.push(node);
        this._calculationTimeout && clearTimeout(this._calculationTimeout);
        this._calculationTimeout = setTimeout(() => {
            const undo = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this._table);
            undo && undo.start();
            this._startCalculation();
            this._resetState();
            undo && undo.end();
        }, 1);
    }
    hasCalculationNode(rowIndex, cellIndex) {
        return this._calculationNodes.some(x => x.column === cellIndex && x.row === rowIndex);
    }
}

;// ./node_modules/devexpress-reporting/designer/helpers/_textElementSizeHelper.js

class TextElementSizeHelper {
    constructor() {
        this._spaceSymbol = '&nbsp';
    }
    _$createElement(options, processElement) {
        return processElement(external_jQuery_namespaceObject.fn.constructor('<div>').css(options)).appendTo(external_jQuery_namespaceObject.fn.constructor('body'));
    }
    $createTextElement(text, options) {
        return this._$createElement(options, ($element) => { return $element.text(text); });
    }
    $createSpaceElement(options) {
        return this._$createElement(options, ($element) => { return $element.html(this._spaceSymbol); });
    }
    getTextContainerSize(text, options, increaseHeight = 2) {
        const $div = text !== this._spaceSymbol ? this.$createTextElement(text, options) : this.$createSpaceElement(options);
        $div.height($div.height() + increaseHeight);
        const rect = $div[0].getBoundingClientRect();
        const height = Math.ceil(rect.height);
        const width = Math.ceil(rect.width);
        $div.remove();
        return { width, height };
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/fitBoundsToTextAction.js


class FitBoundsToTextAction {
    _getNewRectForVetical(textHeight, alignment) {
        const contentSize = this._control.getContentSize();
        const controlRect = this._control.rect();
        const difference = contentSize.height - textHeight;
        if (alignment === 'Middle') {
            return { top: controlRect.top + difference / 2, height: controlRect.height - difference };
        }
        else if (alignment === 'Bottom') {
            return { top: controlRect.top + difference, height: controlRect.height - difference };
        }
        else {
            return { height: controlRect.height - difference };
        }
    }
    _findWidth(text, currentWidth) {
        const content = this._control.getCssContent();
        if (!this._control.getWordWrap()) {
            return this.textElementHelper.getTextContainerSize(text, content).width;
        }
        let horOffset = 0;
        ['Left', 'Right'].forEach(propertyName => {
            horOffset += (parseFloat(content['padding' + propertyName]) * this._control._context.zoom());
            delete content['padding' + propertyName];
        });
        const words = text.split(' ');
        const wordsWidths = words.map(line => this.textElementHelper.getTextContainerSize(line, content).width);
        if (wordsWidths.some(width => width + horOffset > currentWidth)) {
            return currentWidth;
        }
        const spaceWidth = this.textElementHelper.getTextContainerSize('&nbsp', content).width;
        return wordsWidths.reduce((accumulator, currentVal, index) => {
            if (index === 0)
                return accumulator;
            const newVal = spaceWidth + currentVal;
            accumulator.lineWidth += newVal;
            if (accumulator.lineWidth + horOffset > currentWidth) {
                accumulator.lineWidth = currentVal;
            }
            if (accumulator.max < accumulator.lineWidth) {
                accumulator.max = accumulator.lineWidth;
            }
            return accumulator;
        }, { lineWidth: wordsWidths[0], max: wordsWidths[0] }).max + horOffset;
    }
    _getNewRectForHorizontal(textWidth, alignment) {
        const contentSize = this._control.getContentSize();
        const controlRect = this._control.rect();
        const difference = contentSize.width - textWidth;
        if (alignment === 'Center') {
            return { left: controlRect.left + difference / 2, width: controlRect.width - difference };
        }
        else if (alignment === 'Right') {
            return { left: controlRect.left + difference, width: controlRect.width - difference };
        }
        else {
            return { width: controlRect.width - difference };
        }
    }
    _getTextContainerSize(content) {
        return this.textElementHelper.getTextContainerSize(this._control.getText(), this._control.getCssContent(content));
    }
    _getTextHeight() {
        const content = { width: this._control.getContentSize().width / this._control._context.zoom() };
        return this._getTextContainerSize(content).height;
    }
    fitWidth() {
        const width = this._findWidth(this._control.getText(), this._control.getContentSize().width);
        const horizontalAlignment = this._control.getAlignments().horizontal;
        this._control.rect(this._getNewRectForHorizontal(width, horizontalAlignment));
    }
    fitHeight() {
        const height = this._getTextHeight();
        const verticalAlignment = this._control.getAlignments().vertical;
        this._control.rect(this._getNewRectForVetical(height, verticalAlignment));
    }
    fitBounds() {
        const size = {
            width: this._findWidth(this._control.getText(), this._control.getContentSize().width),
            height: this._getTextHeight()
        };
        const alignment = this._control.getAlignments();
        this._control.rect((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this._getNewRectForHorizontal(size.width, alignment.horizontal), this._getNewRectForVetical(size.height, alignment.vertical)));
    }
    constructor(_control, textElementHelper = new TextElementSizeHelper()) {
        this._control = _control;
        this.textElementHelper = textElementHelper;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/fitTextToBoundsAction.js

class FitTextToBoundsAction {
    _getTextSide($div, fontProperties, controlSize, getSide) {
        const currentSide = getSide($div);
        let sizeFounded = false;
        const inc = controlSize / currentSide;
        let currentFontSize = Math.ceil(fontProperties.size * inc);
        while (!sizeFounded) {
            $div.css({ 'font-size': currentFontSize + fontProperties.unit });
            if (getSide($div) > controlSize) {
                currentFontSize -= 1;
            }
            else {
                sizeFounded = true;
            }
        }
        return currentFontSize;
    }
    _calculateFont($div, fontProperties, maxHeight) {
        let sizeFounded = false;
        let font = fontProperties.size;
        const height = $div[0].getBoundingClientRect().height;
        if (height === maxHeight)
            return font;
        const inc = height > maxHeight ? -1 : 1;
        while (!sizeFounded) {
            font += inc;
            $div.css({ 'font-size': font + fontProperties.unit });
            const height = $div[0].getBoundingClientRect().height;
            if (height < maxHeight && inc === -1) {
                sizeFounded = true;
            }
            else if (inc === 1 && height > maxHeight) {
                font -= inc;
                sizeFounded = true;
            }
        }
        return font;
    }
    _getAvailableFont() {
        const fontModel = this._control.getFontModel();
        const containerSize = this._control.getContentSize();
        const zoom = this._control._context.zoom();
        let font = fontModel.size();
        if (!this._control.getWordWrap()) {
            const $div = this.textElementHelper.$createTextElement(this._control.getText(), this._control.getCssContent());
            const fontByHeight = this._getTextSide($div, { size: font, unit: fontModel.unit() }, containerSize.height, ($div) => $div[0].getBoundingClientRect().height);
            const fontByWidth = this._getTextSide($div, { size: fontByHeight, unit: fontModel.unit() }, containerSize.width, ($div) => $div[0].getBoundingClientRect().width);
            $div.remove();
            font = Math.min(fontByHeight, fontByWidth);
        }
        else {
            const $div = this.textElementHelper.$createTextElement(this._control.getText(), this._control.getCssContent({ width: containerSize.width / zoom }));
            font = this._calculateFont($div, { size: font, unit: fontModel.unit() }, containerSize.height - 2 * zoom);
            $div.remove();
        }
        return font;
    }
    fit() {
        this._control.setFontSize(this._getAvailableFont());
    }
    constructor(_control, textElementHelper = new TextElementSizeHelper()) {
        this._control = _control;
        this.textElementHelper = textElementHelper;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrTextControl.js







class XRTextControlSurfaceBase extends XRControlSurfaceBase {
    getAlignments() {
        const textAlignment = this._control['textAlignment']();
        let vertical = '';
        let horizontal = '';
        for (let i = 0; i < textAlignment.length; i++) {
            if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                if (vertical === '') {
                    vertical += textAlignment[i];
                }
                else if (vertical !== '') {
                    horizontal += textAlignment[i];
                }
            }
            else {
                if (horizontal !== '') {
                    horizontal += textAlignment[i];
                }
                else {
                    vertical += textAlignment[i];
                }
            }
        }
        return {
            vertical: vertical,
            horizontal: horizontal
        };
    }
    getWordWrap() {
        return this._control['wordWrap'] && this._control['wordWrap']();
    }
    getCssContent(content = {}) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.contentCss(), {
            'box-sizing': 'border-box',
            'height': 'auto',
            'display': 'inline-block',
            'width': 'auto',
            'transform': 'scale(' + this._context.zoom() + ')'
        }, content);
    }
    getContentSize() {
        return this.contentSizes();
    }
    getText() {
        return this.displayText();
    }
    getFontModel() {
        return this._font;
    }
    setFontSize(size) {
        this._font.size(size);
    }
    cacheElementContent($element) {
        this._$element(null);
        this._$element($element);
    }
    fitTextToBounds() {
        this.fitTextToBoundsAction.fit();
    }
    fitWidthToText() {
        this.fitBoundsToTextAction.fitWidth();
    }
    fitHeightToText() {
        this.fitBoundsToTextAction.fitHeight();
    }
    fitBoundsToText() {
        this.fitBoundsToTextAction.fitBounds();
    }
    constructor(control, context, units = XRControlSurface._unitProperties) {
        super(control, context, units);
        this._$element = external_ko_namespaceObject.observable(null);
        this._font = null;
        this.contenttemplate = 'dxrd-textcontrol-content';
        this['multiline'] = control['multiline'] || false;
        this._disposables.push(this._font = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel(control['font']));
        const canGrow = () => { return control['canGrow'] && control['canGrow'](); };
        const textElementSizeHelper = new TextElementSizeHelper();
        this.fitTextToBoundsAction = new FitTextToBoundsAction(this, textElementSizeHelper);
        this.fitBoundsToTextAction = new FitBoundsToTextAction(this, textElementSizeHelper);
        this._disposables.push(this.characterHeight = external_ko_namespaceObject.computed(() => {
            return textElementSizeHelper.getTextContainerSize('a', {
                'font-size': this._font.size() + this._font.unit(),
                'font-family': this._font.family(),
                'height': 'auto',
                'width': 'auto'
            }).height;
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (this._$element()) {
                this._$element().height('auto');
                const text = this._control['text']();
                const characterHeight = this.characterHeight();
                const contentHeight = this._$element().height();
                if (contentHeight > this.rect().height && !canGrow()) {
                    const visibleHeight = Math.floor(this.rect().height / characterHeight) * characterHeight;
                    if (visibleHeight)
                        this._$element().height(visibleHeight + 'px');
                }
            }
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_tableComponentSurface.js

var TableActionDirection;
(function (TableActionDirection) {
    TableActionDirection[TableActionDirection["vertical"] = 0] = "vertical";
    TableActionDirection[TableActionDirection["horizontal"] = 1] = "horizontal";
})(TableActionDirection || (TableActionDirection = {}));
class TableComponentSurface extends XRTextControlSurfaceBase {
    _getNeededProperties(rect) {
        if (this.direction === TableActionDirection.vertical) {
            return {
                positionProperty: rect.top === undefined ? this.rect().top : rect.top,
                secondaryPositionProperty: rect.bottom,
                sizeProperty: rect.height
            };
        }
        else {
            return {
                positionProperty: rect.left === undefined ? this.rect().left : rect.left,
                secondaryPositionProperty: rect.right,
                sizeProperty: rect.width
            };
        }
    }
    _generateRect(rect, result) {
        if (this.direction === TableActionDirection.vertical) {
            rect.top = result.positionProperty === undefined ? rect.top : result.positionProperty;
            rect.bottom = result.secondaryPositionProperty === undefined ? rect.bottom : result.secondaryPositionProperty;
            rect.height = result.sizeProperty === undefined ? rect.height : result.sizeProperty;
        }
        else {
            rect.left = result.positionProperty === undefined ? rect.left : result.positionProperty;
            rect.right = result.secondaryPositionProperty === undefined ? rect.right : result.secondaryPositionProperty;
            rect.width = result.sizeProperty === undefined ? rect.width : result.sizeProperty;
            delete rect.height;
        }
        return rect;
    }
    beforeRectUpdated(rect) {
        const incomingRect = this._getNeededProperties(rect);
        const currentRect = this._getNeededProperties(this.rect());
        const model = this.getControlModel();
        const parentModel = this.parent.getControlModel();
        if (incomingRect.secondaryPositionProperty !== undefined) {
            incomingRect.positionProperty = currentRect.positionProperty;
            incomingRect.sizeProperty = incomingRect.secondaryPositionProperty < incomingRect.positionProperty ? 0
                : incomingRect.secondaryPositionProperty - incomingRect.positionProperty;
        }
        if (incomingRect.positionProperty > currentRect.secondaryPositionProperty) {
            incomingRect.positionProperty = currentRect.secondaryPositionProperty;
            return this._generateRect(rect, incomingRect);
        }
        if (incomingRect.sizeProperty === undefined) {
            incomingRect.sizeProperty = currentRect.sizeProperty + currentRect.positionProperty - incomingRect.positionProperty;
        }
        const childCollectionName = this.parent._getChildrenHolderName();
        const positionRedused = parseInt(currentRect.positionProperty) > incomingRect.positionProperty;
        const sizeIncreased = parseInt(currentRect.sizeProperty) < incomingRect.sizeProperty && !positionRedused;
        const position = parentModel[childCollectionName]().indexOf(model);
        if (position !== 0 && positionRedused) {
            const prevElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position - 1].surface.rect());
            if (prevElementRect.positionProperty > incomingRect.positionProperty) {
                incomingRect.sizeProperty -= (prevElementRect.positionProperty - incomingRect.positionProperty);
                incomingRect.positionProperty = prevElementRect.positionProperty;
            }
        }
        if (sizeIncreased && position !== parentModel[childCollectionName]().length - 1) {
            const nextElementRect = this._getNeededProperties(parentModel[childCollectionName]()[position + 1].surface.rect());
            if (nextElementRect.secondaryPositionProperty < incomingRect.positionProperty + incomingRect.sizeProperty) {
                incomingRect.sizeProperty = nextElementRect.secondaryPositionProperty - incomingRect.positionProperty;
            }
        }
        return this._generateRect(rect, incomingRect);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrTableCell.js






class XRTableCellViewModel extends XRControlViewModel {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this._disposables.push(this.width = external_ko_namespaceObject.pureComputed({
            read: () => {
                const result = parent.width() * this.weight() / parent.cellsTotalWeight();
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(result, false, 3);
            },
            write: (newWidth) => {
                const currentIndex = parent.cells().indexOf(this);
                if (parent.hasCalculationNode(currentIndex))
                    return;
                const diff = newWidth - this.width();
                if (currentIndex < parent.cells().length - 1) {
                    parent.addCellToCalculation(currentIndex, diff);
                    parent.addCellToCalculation(currentIndex + 1, diff * -1);
                }
                else {
                    parent.addColumnToCalculation(diff, true);
                    parent.addTableOffset(diff);
                }
            }
        }).extend({ deferred: true }));
        this.textEditOptions = new ContainerEditOptions(model['EditOptions'] || {}, this, serializer);
        this.height = parent.height;
        this.size = new external_DevExpress_Analytics_Elements_namespaceObject.Size(0, 0);
        this.size.isPropertyDisabled = (name) => { return name === 'height'; };
        this._disposables.push(this.size.height = external_ko_namespaceObject.pureComputed({ read: () => { return this.height(); }, write: (newVal) => { if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                this.height(newVal);
            } } }));
        this._disposables.push(this.size.width = external_ko_namespaceObject.pureComputed({ read: () => { return this.width(); }, write: (newVal) => { if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                this.width(newVal);
            } } }));
        this._disposables.push(this.controls.subscribe(value => value.length > 0 && this.textEditOptions.enabled(false)));
        this._disposables.push(this.left = external_ko_namespaceObject.pureComputed({
            read: () => {
                const index = parent.cells().indexOf(this);
                if (index > 0) {
                    const previousCell = parent.cells()[index - 1];
                    return previousCell.left() + previousCell.width();
                }
                else {
                    return 0;
                }
            },
            write: (val) => {
                if (val === this.left())
                    return;
                const index = parent.cells().indexOf(this);
                const diff = val - this.left();
                if (index > 0) {
                    parent.addCellToCalculation(index - 1, diff);
                    parent.addCellToCalculation(index, diff * -1);
                }
                else {
                    parent.addColumnToCalculation(diff * -1);
                    parent.addTableOffset(diff * -1, diff);
                }
            }
        }).extend({ deferred: true }));
    }
}
XRTableCellViewModel.unitProperties = ['paddingObj'];

class XRTableCellSurface extends TableComponentSurface {
    _getAdjacentCellByRowIndex(rowIndex) {
        const nextRow = this._table.rows()[rowIndex];
        return nextRow && nextRow.cells && nextRow.cells().filter(cell => Math.round(cell.left() - this._control.left()) === 0)[0];
    }
    _isShowBorder(side) {
        if (side === 'Top') {
            const prevCell = this._getAdjacentCellByRowIndex(this._rowIndex() - 1);
            const borders = prevCell && prevCell['borders']();
            return (this._rowIndex() === 0) || (borders && borders !== 'All' && borders.indexOf('Bottom') === -1);
        }
        if (side === 'Left') {
            const prevCell = this._row.cells()[this._cellIndex() - 1], borders = prevCell && prevCell.borders();
            return (this._cellIndex() === 0) || (borders && borders !== 'All' && borders.indexOf('Right') === -1);
        }
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.controls);
        this.resetObservableArray(this.controls);
    }
    constructor(control, context) {
        super(control, context, XRTableCellSurface._unitProperties);
        this._row = this.parent.getControlModel();
        this._table = this._row.parentModel();
        this._cellIndex = () => this._row.cells().indexOf(this.getControlModel());
        this._rowIndex = () => this._table.rows().indexOf(this._row);
        this.direction = TableActionDirection.horizontal;
        this['multiline'] = control['multiline'];
        this._disposables.push(this.contentSizes = external_ko_namespaceObject.pureComputed(() => {
            if (this._isShowBorder('Left')) {
                return this.cssCalculator.contentSizeCss(this.rect().width, this.heightWithRowSpan(), this._context.zoom());
            }
            const bordersArray = control.borders().indexOf('All') === -1 ? control.borders().split(/\s*,\s*/g) : ['Left', 'Top', 'Right', 'Bottom'];
            const index = bordersArray.indexOf('Left');
            let width = this.rect().width;
            if (index !== -1) {
                bordersArray.splice(index, 1);
                width += 1;
            }
            return this.cssCalculator.contentSizeCss(width, this.heightWithRowSpan(), this._context.zoom(), bordersArray.join(','));
        }));
        this._disposables.push(this.css = external_ko_namespaceObject.pureComputed(() => {
            const bottom = this.cssCalculator.cellBorder('Bottom', this._context.zoom());
            const right = this.cssCalculator.cellBorder('Right', this._context.zoom());
            const left = this._isShowBorder('Left') ? this.cssCalculator.cellBorder('Left', this._context.zoom()) : this.cssCalculator.createControlBorder('', 0, 'transparent', ['Left'], 'Left');
            const top = this._isShowBorder('Top') ? this.cssCalculator.cellBorder('Top', this._context.zoom()) : { borderTop: '' };
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.fontCss(), this.cssCalculator.backGroundCss(), right, bottom, top, left, this.cssCalculator.foreColorCss(), this.cssCalculator.textAlignmentCss());
        }));
        this._disposables.push(this.rowSpan = external_ko_namespaceObject.pureComputed(() => {
            if (this.controls().length > 0) {
                return 1;
            }
            for (let i = 1; i <= this._rowIndex() && this._rowIndex() - i >= 0; i++) {
                const cell = this._getAdjacentCellByRowIndex(this._rowIndex() - i);
                if (cell && cell.surface.rowSpan() > i)
                    return 0;
            }
            const rowSpan = control['rowSpan']();
            let lastRowSpan = 1;
            const rowCount = this._table.rows().length;
            for (let i = 1; i < rowSpan && i + this._rowIndex() < rowCount; i++, lastRowSpan++) {
                const nextCell = this._getAdjacentCellByRowIndex(this._rowIndex() + i);
                if (!nextCell || nextCell.width() != control.width() || nextCell['rowSpan']() > 1 || nextCell.controls().length > 0) {
                    return lastRowSpan;
                }
            }
            return lastRowSpan;
        }));
        this._disposables.push(this.heightWithRowSpan = external_ko_namespaceObject.pureComputed(() => {
            let _height = this.rect().height;
            if (this.rowSpan() > 1) {
                for (let i = 1; i < this.rowSpan(); i++) {
                    const cell = this._getAdjacentCellByRowIndex(this._rowIndex() + i);
                    if (cell && cell.surface)
                        _height += cell.surface.rect().height;
                }
            }
            else if (this.rowSpan() === 0) {
                return 0;
            }
            return _height;
        }));
        this.offsetZIndex = () => {
            const hasRowSpan = this.rowSpan() > 1;
            return hasRowSpan && (this.selected() || this.focused()) && 2 || hasRowSpan && 1 || null;
        };
        this.getUsefulRect = () => {
            const borderWidth = external_ko_namespaceObject.unwrap(control['borderWidth']), borderFlags = control.borders();
            const rect = { top: 0, left: 0, width: this.rect().width, height: this.rect().height };
            if (borderWidth) {
                const allBorders = borderFlags === 'All';
                if ((allBorders || borderFlags.indexOf('Top') >= 0) && this._isShowBorder('Top')) {
                    rect.top += borderWidth;
                    rect.height -= borderWidth;
                }
                if (allBorders || borderFlags.indexOf('Right') >= 0)
                    rect.width -= borderWidth;
                if (allBorders || borderFlags.indexOf('Bottom') >= 0)
                    rect.height -= borderWidth;
                if ((allBorders || borderFlags.indexOf('Left') >= 0) && this._isShowBorder('Left')) {
                    rect.left += borderWidth;
                    rect.width -= borderWidth;
                }
            }
            return rect;
        };
    }
    selectColumn(selection) {
        (this.parent.parent).selectColumn(selection, this);
    }
    checkParent(surfaceParent) {
        return this.parent.parent === surfaceParent;
    }
    isThereIntersectionWithUsefulArea() {
        return false;
    }
    isThereIntersectionWithCrossBandControls() {
        return false;
    }
    isThereIntersectionWithNeighborsCollection() {
        return false;
    }
    isThereIntersectionWithParentCollection() {
        return false;
    }
    beforeRectUpdated(rect) {
        const _rowSpan = this.rowSpan.peek();
        for (let i = 1; i < _rowSpan; i++) {
            const nextCell = this._getAdjacentCellByRowIndex(this._rowIndex() + i);
            nextCell && nextCell.surface.rect(rect);
        }
        return super.beforeRectUpdated(rect);
    }
    canDrop() {
        return super.canDrop() && this.rowSpan() === 1;
    }
    getAdornTemplate() {
        let result = super.getAdornTemplate();
        result = XRControlSurface._appendValue(result, 'dxrd-surface-hidden', !this._control['visible']() || (this._control.parentModel() && !this._control.parentModel()['visible']()));
        return result;
    }
}
XRTableCellSurface._unitProperties = {
    _height: (o) => {
        return o.height;
    },
    _width: (o) => {
        return o.width;
    },
    _x: (o) => {
        return o.left;
    }
};


;// ./node_modules/devexpress-reporting/designer/controls/xrTableRow.js







class XRTableRowViewModel extends XRControlViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.cells);
        this.resetObservableArray(this.cells);
    }
    constructor(control, parent, serializer) {
        super(control, parent, serializer);
        this.top = external_ko_namespaceObject.observable(0);
        this.width = parent.size.width;
        this.cells = external_ko_namespaceObject.observableArray();
        this._disposables.push(this.cellsTotalWeight = external_ko_namespaceObject.pureComputed(() => {
            let result = 0;
            this.cells().forEach(cell => {
                result += cell.weight();
            });
            return result;
        }));
        this._disposables.push(this.pixelWidthWeight = external_ko_namespaceObject.pureComputed(() => {
            return parent.size.width() !== 0 ? this.cellsTotalWeight() / parent.size.width() : 0;
        }));
        this._disposables.push(this.height = external_ko_namespaceObject.pureComputed({
            read: () => {
                const result = parent.size.height() * this.weight() / parent.rowsTotalWeight();
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(result);
            },
            write: (newHeight) => {
                const dHeight = newHeight - this.height(), newWeight = parent.pixelHeightWeight() * newHeight, dWeight = newWeight - this.weight(), thisRowIndex = parent.rows().indexOf(this);
                this.weight(newWeight);
                if (thisRowIndex < parent.rows().length - 1) {
                    parent.rows()[thisRowIndex + 1].weight(parent.rows()[thisRowIndex + 1].weight() - dWeight);
                }
                else {
                    parent.size.height(parent.size.height() + dHeight);
                }
            }
        }));
        this.size = new external_DevExpress_Analytics_Elements_namespaceObject.Size(0, 0);
        this._disposables.push(this.size.height = external_ko_namespaceObject.pureComputed({ read: () => { return this.height(); }, write: (newVal) => { if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                this.height(newVal);
            } } }));
        this._disposables.push(this.size.width = external_ko_namespaceObject.pureComputed({ read: () => { return this.width(); }, write: (newVal) => { if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                this.width(newVal);
            } } }));
        const deserializedCells = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(control.Cells, (item) => { return this.getControlFactory().createControl(item, this, serializer); });
        this.cells(deserializedCells());
        const _top = external_ko_namespaceObject.observable(null);
        this._disposables.push(this.top = external_ko_namespaceObject.pureComputed({
            read: () => {
                const index = parent.rows().indexOf(this);
                if (index > 0) {
                    const previousRow = parent.rows()[index - 1];
                    _top(previousRow.top() + previousRow.height());
                }
                else {
                    _top(0);
                }
                return _top();
            },
            write: (val) => {
                parent.updateRowLocation(this, _top() - val);
                _top(val);
            }
        }));
    }
    hasCalculationNode(cellIndex) {
        return this.parentModel().tableCalculationProvider.hasCalculationNode(this.parentModel().rows().indexOf(this), cellIndex);
    }
    addCellToCalculation(cellIndex, delta) {
        const cell = this.cells()[cellIndex];
        const newWeight = this.pixelWidthWeight() * (cell.width() + delta);
        this.parentModel().tableCalculationProvider.addCalculationNode({
            column: cellIndex,
            row: this.parentModel().rows().indexOf(this),
            calc: () => {
                cell.weight(newWeight);
            }
        });
    }
    addColumnToCalculation(diff, last) {
        this.parentModel().addColumnToCalculation(diff, last);
    }
    addTableOffset(width, left) {
        this.parentModel().tableCalculationProvider.addTableOffset(width, left);
    }
    addChild(control, position, onComponentAdded) {
        if (control instanceof XRTableCellViewModel) {
            if (this.cells().indexOf(control) === -1) {
                control.parentModel(this);
                if (position != null) {
                    this.cells.splice(position, 0, control);
                }
                else {
                    this.cells.push(control);
                }
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(onComponentAdded))
                    onComponentAdded({ parent: this, model: control });
            }
        }
        else {
            throw new Error('Trying to add non a cell to the table row.');
        }
    }
    insertCellCopy(selectedCell, isRight, onComponentAdded) {
        const newCellWeight = selectedCell.weight() / 2, newCell = new XRTableCellViewModel({ '@ControlType': 'XRTableCell', '@Weight': newCellWeight, '@Multiline': 'true' }, this), indexSelectedCell = this.cells.indexOf(selectedCell);
        this.addChild(newCell, indexSelectedCell + (isRight ? 1 : 0), onComponentAdded);
        if (newCell['text']) {
            newCell['text'](newCell.name());
        }
        selectedCell.weight(newCellWeight);
    }
    removeChild(selectedCell) {
        if (this.cells().length > 0 && this.cells().indexOf(selectedCell) !== -1) {
            const index = this.cells().indexOf(selectedCell), selectedCellWeight = selectedCell.weight();
            this.cells.splice(index, 1);
            if (this.cells()[index]) {
                this.cells()[index].weight(this.cells()[index].weight() + selectedCellWeight);
            }
            else if (this.cells()[index - 1]) {
                this.cells()[index - 1].weight(this.cells()[index - 1].weight() + selectedCellWeight);
            }
            if (this.cells().length === 0) {
                this.parentModel().removeChild(this);
            }
        }
    }
}
XRTableRowViewModel.unitProperties = [];

class XRTableRowSurface extends TableComponentSurface {
    _getChildrenHolderName() { return 'cells'; }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.cells);
        this.resetObservableArray(this.cells);
    }
    constructor(control, context) {
        super(control, context, XRTableRowSurface._unitProperties);
        this.direction = TableActionDirection.vertical;
        this._disposables.push(this.css = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.backGroundCss());
        }));
        this._disposables.push(this.contentCss = external_ko_namespaceObject.pureComputed(() => {
            return {};
        }));
    }
    getAdornTemplate() {
        let result = XRTableRowSurface._appendValue('', 'dxrd-image-surface-bounded', this.hasBindings);
        result = XRTableRowSurface._appendValue(result, 'dxrd-uiselected', this.selected());
        return result;
    }
}
XRTableRowSurface._unitProperties = {
    _height: (o) => {
        return o.height;
    },
    _width: (o) => {
        return o.width;
    },
    _y: (o) => {
        return o.top;
    }
};


;// ./node_modules/devexpress-reporting/designer/controls/xrTable.js






class XRTableControlViewModel extends XRControlViewModel {
    _getAdjacentCells(condition) {
        const adjacentCells = [];
        this.rows().forEach((row) => {
            row.cells().filter((cell) => { return condition(cell); }).forEach((cell) => {
                adjacentCells.push(cell);
            });
        });
        return adjacentCells;
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.rows);
        this.resetObservableArray(this.rows);
    }
    constructor(control, parent, serializer) {
        super(control, parent, serializer);
        this.rows = external_ko_namespaceObject.observableArray();
        this._disposables.push(this.rowsTotalWeight = external_ko_namespaceObject.pureComputed(() => {
            let result = 0;
            this.rows().forEach(row => {
                result += row.weight();
            });
            return result;
        }));
        this._disposables.push(this.pixelHeightWeight = external_ko_namespaceObject.pureComputed(() => {
            return this.size.height() !== 0 ? this.rowsTotalWeight() / this.size.height() : 0;
        }));
        const deserializedRows = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(control.Rows, (item) => { return new XRTableRowViewModel(item, this, serializer); });
        this.rows(deserializedRows());
        this.tableCalculationProvider = new TableCalculationProvider(this);
    }
    updateRowLocation(row, deltaHeight) {
        const oldHeight = row.height();
        const rowIndex = this.rows().indexOf(row);
        if (rowIndex > 0) {
            const topRowHeight = this.rows()[rowIndex - 1].height;
            const topHeight = topRowHeight() - deltaHeight;
            topRowHeight(topHeight > 0 ? topHeight : 0);
        }
        else {
            const deltaWeight = (row.weight() / oldHeight) * deltaHeight;
            row.weight(row.weight() + deltaWeight);
            this.location.y(this.location.y() - deltaHeight);
            this.size.height(this.size.height() + deltaHeight);
        }
    }
    addChild(control, position, onComponentAdded) {
        if (control instanceof XRTableRowViewModel) {
            if (this.rows().indexOf(control) === -1) {
                control.parentModel(this);
                if (position != null) {
                    this.rows.splice(position, 0, control);
                }
                else {
                    this.rows.push(control);
                }
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(onComponentAdded))
                    onComponentAdded({ parent: this, model: control });
            }
        }
        else {
            throw new Error('Trying to add non a row to the table.');
        }
    }
    insertRow(selectedRow, isRowAbove, onComponentAdded) {
        const selectedRowHeight = selectedRow.height(), newRow = new XRTableRowViewModel({
            '@ControlType': 'XRTableRow',
            '@Weight': selectedRow.weight(),
            '@HeightF': selectedRowHeight,
        }, this), indexSelectedRow = this.rows.indexOf(selectedRow);
        selectedRow.cells().forEach((cell) => {
            newRow.createChild({ '@ControlType': 'XRTableCell', '@Weight': cell.weight(), '@Multiline': 'true' });
        });
        this.addChild(newRow, indexSelectedRow + (isRowAbove ? 0 : 1), onComponentAdded);
        this.size.height(this.size.height() + selectedRowHeight);
    }
    removeChild(selectedRow) {
        if (this.rows().length > 0 && this.rows().indexOf(selectedRow) !== -1) {
            const index = this.rows().indexOf(selectedRow);
            this.size.height(this.size.height() - selectedRow.height());
            this.rows.splice(index, 1);
        }
        if (this.rows().length === 0) {
            this.parentModel().removeChild(this);
        }
    }
    insertColumn(selectedCell, isRight, onComponentAdded) {
        const selectedCellX = selectedCell.surface.rect().left, selectedCellRight = selectedCell.surface.rect().left + selectedCell.surface.rect().width, adjacentCells = this._getAdjacentCells((cell) => { return isRight ? ((cell.surface.rect().left + cell.surface.rect().width) === selectedCellRight) : (cell.surface.rect().left === selectedCellX); });
        adjacentCells.forEach((cell) => {
            cell.parentModel().insertCellCopy(cell, isRight, onComponentAdded);
        });
    }
    addColumnToCalculation(diff, last = false) {
        const rows = this.rows();
        for (let i = 0; i < rows.length; i++) {
            rows[i].addCellToCalculation(last ? rows[i].cells().length - 1 : 0, diff);
        }
    }
}
class XRTableSurface extends XRControlSurfaceBase {
    _getChildrenHolderName() { return 'rows'; }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.rows);
        this.resetObservableArray(this.rows);
    }
    constructor(control, context) {
        super(control, context, XRTableSurface._unitProperties);
        this._isUpdating = false;
        this.template = 'dxrd-table';
        this.selectiontemplate = 'dxrd-table-selection';
        this._disposables.push(this.css = external_ko_namespaceObject.pureComputed(() => {
            return {};
        }));
        this._disposables.push(this.contentCss = external_ko_namespaceObject.pureComputed(() => {
            return {};
        }));
    }
    _isCellInColumn(cell, locationStart, locationEnd) {
        return Math.abs(cell.rect().left - locationStart) < 0.01 && Math.abs(cell.rect().left + cell.rect().width - locationEnd) < 0.01;
    }
    selectColumn(selection, cellSurface) {
        selection.initialize(this);
        const locationStart = cellSurface.rect().left, locationEnd = locationStart + cellSurface.rect().width;
        selection.selecting({ control: cellSurface, cancel: false });
        this.rows().forEach((rowSurface) => {
            rowSurface.cells().forEach((cellSurface) => {
                if (this._isCellInColumn(cellSurface, locationStart, locationEnd)) {
                    selection.selecting({ control: cellSurface, cancel: false });
                    return true;
                }
            });
        });
    }
    isThereIntersectionWithChildCollection() {
        return false;
    }
}
XRTableSurface._unitProperties = {
    _x: (o) => {
        return o.location.x;
    },
    _y: (o) => {
        return o.location.y;
    },
    _width: (o) => {
        return o.size.width;
    },
    _height: (o) => {
        return o.size.height;
    }
};


;// ./node_modules/devexpress-reporting/designer/controls/xrReport.js




































class ReportViewModel extends XRReportElementViewModel {
    static createObjectStorage(_componentStorage, _objectStorage, collectSubscription = (subscription) => void 0) {
        const objectStorage = external_ko_namespaceObject.observableArray([
            ..._objectStorage(),
            ..._componentStorage()
        ]);
        collectSubscription(objectStorage.subscribe((changeSet) => {
            changeSet.forEach((change) => {
                if (change.status === 'added') {
                    if (change.value.objectType && ReportViewModel.availableDataSourceTypes.some(x => change.value.objectType().indexOf(x) !== -1)) {
                        _componentStorage.push(change.value);
                    }
                    else {
                        _objectStorage.push(change.value);
                    }
                }
                else if (change.status === 'deleted') {
                    if (change.value.objectType && ReportViewModel.availableDataSourceTypes.some(x => change.value.objectType().indexOf(x) !== -1) && _componentStorage().indexOf(change.value) !== -1) {
                        _componentStorage.remove(change.value);
                    }
                    else {
                        _objectStorage.remove(change.value);
                    }
                }
            });
        }, null, 'arrayChange'));
        return objectStorage;
    }
    _getDpi(unitType) {
        switch (unitType) {
            case 'HundredthsOfAnInch': return 100;
            case 'TenthsOfAMillimeter': return 254;
            case 'Pixels': return 96;
        }
    }
    _recalculateUnits(unitType) {
        const newDpi = this._getDpi(unitType), oldDpi = this._innerDpi(), coef = newDpi / oldDpi;
        const unitProperties = getUnitProperties(this);
        unitProperties && unitProperties.reCalculateObject(coef);
        this.enumerateComponents((target) => {
            target().forEach((item) => {
                const unitProperties = getUnitProperties(item);
                unitProperties && unitProperties.reCalculateObject(coef);
            });
        });
        this._localization.recalculateUnits(coef);
        this._innerDpi(newDpi);
    }
    _updatePageSize(paperKind) {
        const size = paperKind === 'Custom' ? this.size : (0,external_DevExpress_Analytics_Internal_namespaceObject.getPaperSize)(paperKind);
        this.pageHeight((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(external_ko_namespaceObject.unwrap(this.landscape() ? size.width : size.height) * (this._innerDpi.peek() / 100), false, 0));
        this.pageWidth((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(external_ko_namespaceObject.unwrap(this.landscape() ? size.height : size.width) * (this._innerDpi.peek() / 100), false, 0));
    }
    enumerateComponents(process = () => void 0) {
        const controls = [];
        (0,external_DevExpress_Analytics_Internal_namespaceObject.collectionsVisitor)(this, process, ['controls', 'bands', 'subBands', 'crossBandControls', 'rows', 'cells', 'watermarks', 'parameters', 'parameterPanelLayoutItems', 'fields', 'levels', 'styles'], controls);
        return [].concat.apply([], controls);
    }
    createLocalizationProvider() {
        return new ReportLocalizationProvider(this);
    }
    createReportViewModel(report, serializer) {
        return new ReportViewModel(report, serializer);
    }
    findStyle(styleName) {
        const result = null;
        for (let i = 0; i < this.styles().length; i++) {
            if (this.styles()[i].name() === styleName) {
                return this.styles()[i];
            }
        }
        return result;
    }
    _getBandForToc(bands) {
        let currentBand = null;
        bands.some((band) => {
            if (!getExistTableOfContents(band)) {
                currentBand = band;
            }
            else if (band.bands().length > 0) {
                currentBand = this._getBandForToc(band.bands());
            }
            return !!currentBand;
        });
        return currentBand;
    }
    getOrCreateBandForToC(createNew = true) {
        const availableTypes = ['ReportHeaderBand', 'ReportFooterBand'];
        const bands = this.bands().filter(element => {
            const typesIndex = availableTypes.indexOf(element.controlType);
            if (typesIndex !== -1) {
                availableTypes.splice(typesIndex, 1);
                return true;
            }
            return false;
        });
        let currentBand = this._getBandForToc(bands);
        const canCreate = availableTypes.length > 0;
        if (createNew && !currentBand && canCreate) {
            currentBand = this.createChild({ '@ControlType': availableTypes[0] });
        }
        return { band: currentBand, canAdd: canCreate || !!currentBand };
    }
    canAddToC() {
        return this.getOrCreateBandForToC(false).canAdd;
    }
    _initializeBands() {
        const traverse = (xs) => xs.reduce((res, x) => { res.push(x, ...traverse(external_ko_namespaceObject.unwrap(x['bands']) || [])); return res; }, []);
        const bandNames = traverse(this.bands()).map(x => x.name());
        if (this.bands().length === 0) {
            this.createChild({ '@ControlType': 'DetailBand', '@Name': 'Detail1' });
        }
        else if ((0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.bands(), 'controlType', 'DetailBand') === null && (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.bands(), 'controlType', 'VerticalDetailBand') === null) {
            this.createChild({ '@ControlType': 'DetailBand', '@Name': (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(bandNames, 'Detail') });
        }
        if ((0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.bands(), 'controlType', 'TopMarginBand') === null) {
            this.createChild({ '@ControlType': 'TopMarginBand', '@Name': (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(bandNames, 'TopMargin') });
        }
        if ((0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.bands(), 'controlType', 'BottomMarginBand') === null) {
            this.createChild({ '@ControlType': 'BottomMarginBand', '@Name': (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(bandNames, 'BottomMargin') });
        }
    }
    isPropertyDisabled(name) {
        if (name === 'pageWidth' || name === 'pageHeight') {
            return this.paperKind() !== 'Custom';
        }
        else if (name === 'dataMember') {
            return this.dataSource() === null;
        }
        return super.isPropertyDisabled(name);
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.parameters);
        this.disposeObservableArray(this.calculatedFields);
        this.disposeObservableArray(this.watermarks);
        this.disposeObservableArray(this.crossBandControls);
        this.disposeObservableArray(this.formattingRuleSheet);
        this.disposeObservableArray(this.bands);
        this.disposeObservableArray(this.objectStorage);
        this.disposeObservableArray(this.styles);
        this.resetObservableArray(this.extensions);
        this.resetObservableArray(this.objectStorage);
        this.resetObservableArray(this.parameters);
        this.resetObservableArray(this.parameterPanelLayoutItems);
        this.resetObservableArray(this.calculatedFields);
        this.resetObservableArray(this.watermarks);
        this.resetObservableArray(this.crossBandControls);
        this.resetObservableArray(this.formattingRuleSheet);
        this.resetObservableArray(this.bands);
        this.resetObservableArray(this.styles);
        this.resetObservableArray(this.components);
    }
    preInitProperties() {
        this.controlType = 'DevExpress.XtraReports.UI.XtraReport';
    }
    constructor(report, serializer, knownEnums) {
        super(patchMargins(report = report.XtraReportsLayoutSerializer || report), null, serializer = serializer || new ReportModelSerializer());
        if (this.pageWidth() === pageWidth.defaultVal) {
            this.pageWidth(ReportViewModel.defaultPageSize.width);
        }
        if (this.pageHeight() === pageHeight.defaultVal) {
            this.pageHeight(ReportViewModel.defaultPageSize.height);
        }
        this.knownEnums = knownEnums;
        this._dataBindingMode = external_ko_namespaceObject.observable('');
        this._update = external_ko_namespaceObject.observable(false);
        this._disposables.push(this.isModelReady = external_ko_namespaceObject.pureComputed(() => { return !this._update(); }));
        this._disposables.push(this.key = external_ko_namespaceObject.pureComputed(() => { return this.name(); }));
        this._disposables.push(this['displayName'] = external_ko_namespaceObject.pureComputed({
            read: () => { return this.displayNameObject(); },
            write: (newValue) => { this.displayNameObject(newValue); }
        }));
        this.dataSourceRefs = [];
        this.dataSourceHelper = external_ko_namespaceObject.observable();
        this.stylesHelper = external_ko_namespaceObject.observable();
        this.dataBindingsProvider = external_ko_namespaceObject.observable();
        this._disposables.push(this.parameterHelper = new ReportParameterHelper(this));
        this.parameterHelper.initialize(knownEnums);
        this._disposables.push(this.measureUnit.subscribe((unitType) => {
            this._update(true);
            this._recalculateUnits(unitType);
            this._updatePageSize(this.paperKind.peek());
            this._update(false);
        }));
        this._disposables.push(this.landscape.subscribe((newVal) => {
            const width = this.pageWidth();
            this.pageWidth(this.pageHeight());
            this.pageHeight(width);
        }));
        this._disposables.push(this.dataSource.subscribe((newVal) => {
            if (!newVal) {
                this.dataMember(null);
            }
            else {
                const path = this.dsHelperProvider()?.getDataSourcePath(newVal);
                if (path)
                    this.dataBindingsProvider()?.getItems({ fullPath: path, pathParts: [path] }).then((items) => {
                        if (items.length) {
                            if (!items.some(dataMember => dataMember.name == this.dataMember()))
                                this.dataMember(null);
                        }
                    });
            }
        }));
        this.styles = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.StyleSheet, (item) => { return new StyleModel(item, this, serializer); });
        this._objectStorage = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.ObjectStorage, (item) => { return createNewObjectItem(item, this.dsHelperProvider, serializer); });
        this._componentStorage = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.ComponentStorage, (item) => { return createNewObjectItem(item, this.dsHelperProvider, serializer); });
        this.objectStorage = ReportViewModel.createObjectStorage(this._componentStorage, this._objectStorage, (subscription) => this._disposables.push(subscription));
        this.objectsStorageHelper = new ObjectsStorage(this.objectStorage, this.dsHelperProvider);
        this._disposables.push(this.objectsStorageHelper);
        this.parameters = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.Parameters, (item) => { return new Parameter(item, this, serializer); });
        this.parameterPanelLayoutItems = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.ParameterPanelLayoutItems, (item) => { return ParameterPanelLayoutItem.createLayoutItem(item, this, serializer); });
        this.parameterHelper.updateParameterLayoutItems();
        this.objectStorage().forEach((objectStorage) => {
            if (objectStorage instanceof UniversalDataSource) {
                objectStorage['tableInfoCollection']().forEach((tableInfoCollection) => {
                    tableInfoCollection.filterString().helper.parameters = this.parameters;
                });
            }
        });
        this.bands = (0,external_DevExpress_Analytics_Internal_namespaceObject.deserializeChildArray)(report.Bands, this, (item) => { return this.createControl(item, serializer); });
        initLevels(this.bands());
        this.bands().sort(sortBands);
        this.extensions = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.Extensions, (item) => { return new ExtensionModel(item, serializer); });
        this.crossBandControls = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.CrossBandControls, (item) => { return this.createControl(item, serializer); });
        this.calculatedFields = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.CalculatedFields, (item) => { return new CalculatedField(item, serializer); });
        this.watermarks = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.Watermarks, (item) => { return new WatermarkModel(item, serializer); });
        this._initializeBands();
        this.formattingRuleSheet = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.FormattingRuleSheet, (item) => { return new FormattingRule(item, this, serializer); });
        this.components = external_ko_namespaceObject.observableArray([]);
        this._disposables.push(this.formattingRuleSheet.subscribe((args) => {
            args.forEach((rule) => {
                if (!rule.value.name()) {
                    rule.value.name((0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this.formattingRuleSheet(), 'formattingRule'));
                }
                if (!rule.value.parent) {
                    rule.value.parent = this;
                }
            });
        }, null, 'arrayChange'));
        this._disposables.push(this.margins.left.subscribe((newVal) => {
            if (this.isModelReady() && newVal > this.pageWidth() - this.margins.right()) {
                this.margins.right(this.pageWidth() - this.margins.left());
            }
        }));
        this._disposables.push(this.margins.right.subscribe((newVal) => {
            if (this.isModelReady() && newVal > this.pageWidth() - this.margins.left()) {
                this.margins.left(this.pageWidth() - this.margins.right());
            }
        }));
        this._disposables.push(this.paperKind.subscribe((newVal) => {
            newVal !== 'Custom' && this._updatePageSize(newVal);
        }));
        const dataMember = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.getPath('dataMember'), this.dataMember());
        });
        const dataSource = this.dataSource;
        const disabled = external_ko_namespaceObject.pureComputed(() => !dataSource());
        const filterString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this['_filterString'], dataMember, disabled);
        this._disposables.push(dataMember);
        this._disposables.push(disabled);
        filterString.helper.parameters = external_ko_namespaceObject.computed(() => {
            return collectAvailableParameters(this.parameters());
        });
        this._disposables.push(filterString.helper.parameters);
        this['filterString'] = filterString;
        this._scriptReferencesString = external_ko_namespaceObject.observable(this.scriptReferencesString());
        this._disposables.push(this.scriptReferencesString = external_ko_namespaceObject.pureComputed({
            read: () => { return this._scriptReferencesString(); },
            write: (newVal) => { this._scriptReferencesString((0,external_DevExpress_Reporting_Internal_namespaceObject.transformNewLineCharacters)(newVal)); }
        }));
        this._localizationItems = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(report.LocalizationItems, (item) => { return new LocalizationItem(item, serializer); });
        this._disposables.push(this._localization = new ReportLocalizationEngine(this));
        this._localizationItems.removeAll();
        let currentLanguage = external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture;
        this.language = external_ko_namespaceObject.observable(currentLanguage);
        this._localization.apply(currentLanguage);
        this._disposables.push(this.language.subscribe((newVal) => {
            this._localization.save(currentLanguage);
            this._localization.apply(newVal);
            currentLanguage = newVal;
        }));
    }
    isLocalized() {
        return this._localization.isLocalized();
    }
    initialize() {
        super.initialize();
        this.size.height = this.pageHeight;
        this.size.width = this.pageWidth;
    }
    getNearestParent(target) {
        return this;
    }
    addChild(control) {
        if (control instanceof XRCrossBandControlViewModel) {
            control.parentModel(this);
            control.startBand(this.bands()[0]);
            control.endBand(this.bands()[0]);
            this.crossBandControls.push(control);
        }
        else if (control instanceof BandViewModel) {
            addBandToContainer(this, control);
        }
        else {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('Attempt to add wrong child control.');
        }
    }
    removeChild(control) {
        if (control instanceof XRCrossBandControlViewModel) {
            this.crossBandControls.splice(this.crossBandControls().indexOf(control), 1);
        }
        else if (control instanceof BandViewModel) {
            if (this.bands().length > 1) {
                this.bands.splice(this.bands().indexOf(control), 1);
            }
        }
        else {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('Attempt to remove wrong child control.');
        }
    }
    clearLocalization(culture = this.language()) {
        this._localization.items.clear(culture);
        this._localization.apply(culture);
    }
    serialize() {
        this._localization.save();
        if (this.isLocalized()) {
            this._localizationItems(this._localization.serialize());
        }
        else {
            this._localization.apply(external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture);
            this._localization.items.clear();
        }
        return new ReportModelSerializer(this).serialize();
    }
    save() {
        this.parameterHelper.clearLayoutItems();
        const data = this.serialize();
        if (this.onSave) {
            this.onSave(data);
        }
        return data;
    }
    getPath(propertyName) {
        const helper = external_ko_namespaceObject.unwrap(this.dataSourceHelper);
        if (!helper)
            return;
        let path = helper.getDataSourcePath(this.dataSource());
        if (propertyName === 'expression' && this.dataMember())
            path += '.' + this.dataMember();
        return path;
    }
    clone(dataSourceRefsFromParent) {
        const filteredDataSourceRefs = [];
        let dataSourceRefs = [...this.dataSourceRefs];
        if (this['objectStorageIsEmpty']() && dataSourceRefsFromParent && dataSourceRefsFromParent.length) {
            dataSourceRefs = [...dataSourceRefs, ...dataSourceRefsFromParent];
        }
        const collectStorages = (storage, isComponentStorage = false) => {
            storage.reduce((result, storageItem, index) => {
                const dataSourceRef = dataSourceRefs.filter(x => x.ref === storageItem['_model']['@Ref'])[0];
                if (dataSourceRef) {
                    result.push({
                        index,
                        isComponentStorage,
                        dataSourceRef: (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, dataSourceRef)
                    });
                }
                return result;
            }, filteredDataSourceRefs);
        };
        collectStorages(this._objectStorage());
        collectStorages(this._componentStorage(), true);
        const report = new ReportViewModel(this.save());
        report.dataSourceRefs = [];
        filteredDataSourceRefs.forEach((item) => {
            const storage = item.isComponentStorage ? report._componentStorage() : report._objectStorage();
            item.dataSourceRef.ref = storage[item.index]['_model']['@Ref'];
            report.dataSourceRefs.push(item.dataSourceRef);
        });
        return report;
    }
    isStyleProperty(propertyName) { return false; }
    get dataBindingMode() {
        return external_ko_namespaceObject.unwrap(this._dataBindingMode);
    }
}
ReportViewModel.availableDataSourceTypes = ['DataSource', 'ObjectSource'];
ReportViewModel.bandsTypeOrdering = ['TopMarginBand', 'ReportHeaderBand', 'PageHeaderBand', 'GroupHeaderBand', 'DetailBand', 'DetailReportBand', 'GroupFooterBand', 'ReportFooterBand', 'PageFooterBand', 'BottomMarginBand'];
ReportViewModel.unitProperties = ['snapGridSize', 'margins'];
ReportViewModel.defaultPageSize = {
    width: 850,
    height: 1100
};

class ReportSurface extends external_DevExpress_Analytics_Elements_namespaceObject.SurfaceElementArea {
    _createMargin(side, oppositeSide) {
        return external_ko_namespaceObject.pureComputed({
            read: () => this.rtl() ? this[oppositeSide]() : this[side](),
            write: (value) => {
                this.rtl() ? this[oppositeSide](value) : this[side](value);
            }
        });
    }
    _updateWatermarkImageNaturalSize(val) {
        if (!val)
            return;
        const image = new Image();
        image.src = val.getDataUrl();
        image.onload = (e) => {
            this._watermarkImageNaturalSize({ width: image.naturalWidth, height: image.naturalHeight });
            image.onload = null;
        };
    }
    get _unitAbsoluteRect() {
        return {
            top: 0, left: 0,
            right: this._control.size.width(), bottom: this._control.size.height(),
            width: this._control.size.width(), height: this._control.size.height(),
        };
    }
    dispose() {
        super.dispose();
        this._watermarkSubscriptions.forEach(watermark => watermark.dispose());
        this.disposeObservableArray(this.crossBandControls);
        this.resetObservableArray(this.crossBandControls);
    }
    get watermark() {
        return this.report.watermarks()[0];
    }
    constructor(report, zoom = external_ko_namespaceObject.observable(1)) {
        super(report, {
            measureUnit: report.measureUnit, zoom: zoom
        }, ReportSurface._unitProperties);
        this.report = report;
        this._watermarkSubscriptions = [];
        this._assignSelectedWatermark = () => {
            this._watermarkSubscriptions.push(this.watermark.imageSource.subscribe((newValue) => {
                this._updateWatermarkImageNaturalSize(newValue);
            }));
            this._updateWatermarkImageNaturalSize(this.watermark.imageSource.peek());
            this._watermarkSubscriptions.push(this._watermarkTextRenderingResult = external_ko_namespaceObject.pureComputed(() => {
                const canvas = document.createElement('canvas');
                const originalWidthPx = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(this.report.pageWidth(), this.measureUnit());
                const originalHeightPx = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(this.report.pageHeight(), this.measureUnit());
                canvas.width = originalWidthPx;
                canvas.height = originalHeightPx;
                const context = canvas.getContext('2d');
                context.translate(originalWidthPx / 2, originalHeightPx / 2);
                switch (this.watermark.textDirection()) {
                    case 'Vertical':
                        context.rotate(-Math.PI / 2);
                        break;
                    case 'ForwardDiagonal':
                        context.rotate(-50 * Math.PI / 180);
                        break;
                    case 'BackwardDiagonal':
                        context.rotate(50 * Math.PI / 180);
                }
                context.textAlign = 'center';
                context.textBaseline = 'middle';
                const font = new external_DevExpress_Analytics_Internal_namespaceObject.CssCalculator(this.watermark, external_ko_namespaceObject.observable(false)).fontCss();
                context.font = [font.fontStyle.toLowerCase(), font.fontWeight.toLowerCase(), font.fontSize, font.fontFamily].filter(x => x).join(' ');
                context.fillStyle = this.watermark.foreColor();
                context.fillText(this.watermark.text(), 0, 0);
                return canvas.toDataURL('image/png');
            }));
        };
        this.surfaceContextMenuHandler = (selection, surface, e) => {
            const target = e.target;
            if (target.className === 'dxrd-band-marker-content')
                return;
            const focused = selection.focused && selection.focused();
            if (!focused)
                return;
            if (focused instanceof XRTableSurface && selection.dropTarget instanceof XRTableCellSurface
                && focused.rows && focused.rows().some(row => row === selection.dropTarget.parent))
                return;
            !selection.disabled() && selection.clickHandler(selection.dropTarget ? null : surface, e);
        };
        this.allowMultiselect = false;
        this.locked = false;
        this.focused = external_ko_namespaceObject.observable(false);
        this.selected = external_ko_namespaceObject.observable(false);
        this.templateName = external_ko_namespaceObject.observable('dxrd-report');
        this.underCursor = external_ko_namespaceObject.observable(new external_DevExpress_Analytics_Internal_namespaceObject.HoverInfo());
        this.crossBandControls = external_ko_namespaceObject.observableArray();
        this.minHeight = external_ko_namespaceObject.observable();
        this.maxMarkerWidth = external_ko_namespaceObject.observable();
        this.validationMode = external_ko_namespaceObject.observable(false);
        this.parent = null;
        this.zoom = zoom;
        this.dpi = report.dpi;
        this._disposables.push(this.rtl = external_ko_namespaceObject.pureComputed(() => report.rtl() && report.rtlLayout() === 'Yes'));
        this.measureUnit = report.measureUnit;
        this._context = this;
        this._watermarkImageNaturalSize = external_ko_namespaceObject.observable({ width: 0, height: 0 });
        this.drawWatermark = report.drawWatermark;
        this._disposables.push(report.watermarks.subscribe((args) => {
            args.forEach(arg => {
                if (arg.status === 'deleted') {
                    const isSelectedWatermarkDeleted = arg.index === 0;
                    if (isSelectedWatermarkDeleted) {
                        this._watermarkSubscriptions.forEach(watermark => watermark.dispose());
                        report.watermarks().length > 0 && this._assignSelectedWatermark();
                    }
                }
                else if (arg.status === 'added' && report.watermarks().length === 1) {
                    this._assignSelectedWatermark();
                }
            });
        }, null, 'arrayChange'));
        this.watermark && this._assignSelectedWatermark();
        this._disposables.push(this._width = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this['pageWidth']();
            }
        }));
        this._disposables.push(this._height = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this['pageHeight']();
            }
        }));
        this.margins = {
            bottom: this['_bottom'],
            left: this._createMargin('_left', '_right'),
            right: this._createMargin('_right', '_left'),
            top: this['_top']
        };
        this._disposables.push(this.pageWidthWithoutMargins = external_ko_namespaceObject.computed(() => {
            return this.pageWidth() - this.margins.left() - this.margins.right();
        }));
        this._disposables.push(this.margins.left);
        this._disposables.push(this.margins.right);
        this._disposables.push(this.bandsHolder = new BandsHolder(this));
        this.bandsHolder.initialize(report.bands);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const levelCount = getLevelCount(this.bandsHolder);
            setMarkerWidth(this.bandsHolder, levelCount, 0);
            this.maxMarkerWidth(bandSurfaceCollapsedHeight * levelCount + 22);
        }));
        this._disposables.push(this.effectiveHeight = external_ko_namespaceObject.pureComputed(() => {
            const minHeight = this.bandsHolder.getHeight();
            this.minHeight(minHeight);
            return minHeight;
        }));
        this._disposables.push((0,external_DevExpress_Analytics_Internal_namespaceObject.createObservableArrayMapCollection)(report.crossBandControls, this.crossBandControls, this._createSurface));
        this._disposables.push(this.ghostContainerOffset = external_ko_namespaceObject.pureComputed(() => {
            return this.rtl() ? 0 : this.margins.left();
        }));
        const marginOptions = new SurfaceMarginResizeOptions(this.margins, this.rtl, this.pageWidth);
        this._disposables.push(marginOptions);
        this.rightMarginOffset = marginOptions.rightMarginOffset;
        this.leftMarginOffset = marginOptions.leftMarginOffset;
        this.rightMarginResizableOffset = marginOptions.rightMarginResizableOffset;
        this.leftMarginResizableOffset = marginOptions.leftMarginResizableOffset;
        this.leftMarginResizeOptions = marginOptions.leftMarginOptions;
        this.rightMarginResizeOptions = marginOptions.rightMarginOptions;
    }
    getChildrenCollection() {
        return this.bandsHolder.bands;
    }
    isFit(dropTarget) {
        return dropTarget.underCursor().y >= -0.1
            && dropTarget.underCursor().x >= 0
            && ((this === dropTarget) ? this.effectiveHeight() : dropTarget.rect().height) > dropTarget.underCursor().y
            && (this.pageWidth() - this.margins.left()) > dropTarget.underCursor().x;
    }
    canDrop() { return true; }
    wrapRtlProperty(data, undoEngine, element) {
        const wrapper = external_ko_namespaceObject.computed({
            read: data.value,
            write: (newValue) => {
                undoEngine.peek().start();
                const prevValue = this.rtl.peek();
                data.value(newValue);
                if (prevValue !== this.rtl.peek()) {
                    const report = this.getControlModel();
                    const left = report.margins.left();
                    report.margins.left(report.margins.right());
                    report.margins.right(left);
                }
                undoEngine.peek().end();
            }
        });
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => { wrapper.dispose(); });
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.assignObj)(data, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, data, { value: wrapper }));
    }
    clickHandler(selection, e) {
        !selection.disabled() && selection.clickHandler(this, e);
        e.stopPropagation();
    }
    reportContextMenuHandler(selection, e) {
        if (!e.target.closest('.dxrd-surface') && !selection.disabled())
            selection.clickHandler(this, e);
    }
    checkParent(surfaceParent) { return false; }
}
ReportSurface._unitProperties = {
    _width: (o) => { return o.size.width; },
    _height: (o) => { return o.size.height; },
    pageWidth: (o) => { return o.size.width; },
    pageHeight: (o) => { return o.size.height; },
    snapGridSize: (o) => {
        return o.snapGridSize;
    },
    _bottom: (o) => { return o.margins.bottom; },
    _left: (o) => { return o.margins.left; },
    _right: (o) => { return o.margins.right; },
    _top: (o) => { return o.margins.top; }
};

class SurfaceMarginResizeOptions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _createOptions(undoEngine, startDelegate, resizeDelegate) {
        return {
            handles: external_ko_namespaceObject.pureComputed(() => {
                return this.rtl() ? this.oppositeHandle : this.handle;
            }),
            start: (e, ui) => {
                startDelegate(e, ui);
                undoEngine().start();
            },
            resize: (e, ui) => {
                resizeDelegate(e, ui);
            },
            stop: (e, ui) => {
                undoEngine().end();
            },
            disabled: external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started
        };
    }
    constructor(margins, rtl, pageWidth) {
        super();
        this.rtl = rtl;
        this.handle = 'w';
        this.oppositeHandle = 'e';
        const elements = [];
        this._disposables.push(rtl.subscribe((value) => {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(elements).find('.ui-resizable-e, .ui-resizable-w')
                .removeClass('ui-resizable-' + (value ? this.handle : this.oppositeHandle))
                .addClass('ui-resizable-' + (value ? this.oppositeHandle : this.handle));
        }));
        let rightOptions = null;
        let leftOptions = null;
        this._disposables.push(this.rightMarginOffset = external_ko_namespaceObject.pureComputed(() => {
            return rtl() ? 0 : pageWidth() - margins.left() - margins.right();
        }));
        this._disposables.push(this.leftMarginOffset = external_ko_namespaceObject.pureComputed(() => {
            return rtl() ? pageWidth() - margins.left() : 0;
        }));
        this._disposables.push(this.rightMarginResizableOffset = external_ko_namespaceObject.pureComputed(() => {
            return rtl() ? margins.right() : this.rightMarginOffset();
        }));
        this._disposables.push(this.leftMarginResizableOffset = external_ko_namespaceObject.pureComputed(() => {
            return rtl() ? margins.right() : 0;
        }));
        this.rightMarginOptions = (undoEngine, element) => {
            if (!rightOptions) {
                let originalMarginRight = margins.right();
                let maxRightMargin = void 0;
                rightOptions = this._createOptions(undoEngine, (e, element) => {
                    originalMarginRight = margins.right();
                    maxRightMargin = pageWidth() - margins.left() - 1;
                }, (e, element) => {
                    const startResizePosition = (0,external_DevExpress_Analytics_Internal_namespaceObject.convertFromCssPixelUnits)(element.dataset.originalLeftMousePosition);
                    const positionDiff = e.pageX - startResizePosition;
                    margins.right(Math.max(0, Math.min(originalMarginRight + (rtl() ? positionDiff : -positionDiff), maxRightMargin)));
                    if (!element.classList.contains('dxrd-ruler-shadow')) {
                        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).css({ left: this.rightMarginResizableOffset() + 'px', width: '0px' });
                    }
                    else {
                        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).css({ left: this.rightMarginOffset() + 'px' });
                    }
                });
                this._disposables.push(rightOptions);
            }
            const resizableElement = new external_DevExpress_Analytics_Internal_namespaceObject.Resizable(element, rightOptions).initialize();
            (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => {
                resizableElement.dispose();
            });
            elements.push(element);
            return rightOptions;
        };
        this.leftMarginOptions = (undoEngine, element) => {
            if (!leftOptions) {
                let startMarginLeftPosition = margins.left();
                leftOptions = this._createOptions(undoEngine, (e, element) => {
                    startMarginLeftPosition = margins.left();
                }, (e, element) => {
                    const startResizePosition = (0,external_DevExpress_Analytics_Internal_namespaceObject.convertFromCssPixelUnits)(element.dataset.originalLeftMousePosition);
                    const sizeDiff = e.pageX - startResizePosition;
                    const maxLeftmargin = pageWidth() - margins.right();
                    margins.left(Math.min(Math.max(1, startMarginLeftPosition + (rtl() ? -sizeDiff : sizeDiff)), maxLeftmargin));
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).css({ left: this.leftMarginResizableOffset() + 'px', width: (pageWidth() - margins.left() - margins.right()) + 'px' });
                });
                this._disposables.push(leftOptions);
            }
            const resizableElement = new external_DevExpress_Analytics_Internal_namespaceObject.Resizable(element, leftOptions).initialize();
            (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => {
                resizableElement.dispose();
            });
            elements.push(element);
            return leftOptions;
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/subreportViewModel.js




class SubreportViewModel extends ReportViewModel {
    static from(model, serializer) {
        return model ? new SubreportViewModel(model, serializer) : null;
    }
    static toJson(value, serializer, refs) {
        value.parameterHelper.clearLayoutItems();
        return serializer.serialize(value, reportSerializationInfo, refs);
    }
    _initializeBands() {
        if (this.bands().length === 0) {
            this.createChild({ '@ControlType': 'DetailBand', '@Name': 'Detail1' });
        }
    }
    getInfo() {
        if (!this.isAllSufficient) {
            let newSerializationInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], super.getInfo());
            if (this.objectStorageIsEmpty && this.objectStorageIsEmpty()) {
                newSerializationInfo = newSerializationInfo.reduce((finalSerializationInfo, currentInfo, index) => {
                    if (currentInfo.propertyName === '_objectStorage' || currentInfo.propertyName === '_componentStorage')
                        return finalSerializationInfo;
                    return [...finalSerializationInfo, currentInfo];
                }, []);
            }
            return newSerializationInfo;
        }
        return super.getInfo();
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.isAllSufficient = false;
        this.objectStorageIsEmpty = external_ko_namespaceObject.observable(false);
        if (this.objectStorage().length === 0) {
            this.objectStorageIsEmpty(true);
            delete this._model['ObjectStorage'];
            delete this._model['ComponentStorage'];
        }
    }
    serialize() {
        this.isAllSufficient = true;
        const result = super.serialize();
        this.isAllSufficient = false;
        return result;
    }
}
SubreportViewModel.defaultReport = {
    '@ControlType': 'DevExpress.XtraReports.UI.XtraReport',
    '@PageWidth': '850',
    '@PageHeight': '1100',
    '@Version': '24.1',
    '@Font': 'Arial,9pt',
    '@Dpi': '100',
    'Bands': {
        'Item1': {
            '@ControlType': 'TopMarginBand',
            '@HeightF': '100'
        },
        'Item2': {
            '@ControlType': 'DetailBand',
            '@HeightF': '100'
        },
        'Item3': {
            '@ControlType': 'BottomMarginBand',
            '@HeightF': '100'
        }
    }
};


;// ./node_modules/devexpress-reporting/designer/dataObjects/expressions/_expressionWrapper.js










const colors = ['Transparent', 'AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenrod', 'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DodgerBlue', 'Firebrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'Goldenrod', 'Gray', 'Green', 'GreenYellow', 'Honeydew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenrodYellow', 'LightGreen', 'LightGray', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquamarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenrod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];
class ExpressionWrapper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        this._expressionsInfo = null;
        this._expressionsSerializationInfoCache = null;
        this._fieldListProvider = null;
    }
    static createExpression(propertyName, eventName, expression) {
        return {
            getInfo: () => expressionBindingSerializationsInfo,
            eventName: external_ko_namespaceObject.observable(eventName),
            expression: external_ko_namespaceObject.observable(expression),
            propertyName: external_ko_namespaceObject.observable(propertyName)
        };
    }
    _createPropertyByName(propertyName, prefix, displaName) {
        const result = {
            propertyName: prefix ? [prefix, propertyName].join('.') : propertyName,
            modelName: propertyName,
            displayName: displaName || propertyName,
            editor: designerEditorTemplates.getEditor('reportexpressionComplex')
        };
        if (this._displayNameDictionary[propertyName]) {
            result.localizationId = this._displayNameDictionary[propertyName].localizationId;
            result.displayName = this._displayNameDictionary[propertyName].displayName;
        }
        if (this._valuesDictionary[propertyName]) {
            result.valuesArray = this._valuesDictionary[propertyName];
        }
        return result;
    }
    _updateCachedControlInfo(description, useEvents) {
        const displayPath = description.displayPath?.split('.') || [];
        if (!useEvents) {
            if (description.events.indexOf('BeforePrint') !== -1)
                this._addControlInfoToCache(description.controlType, displayPath, description.group, description.propertyName, description.objectProperties);
        }
        else {
            description.events.forEach((eventName) => {
                displayPath.unshift(undefined);
                this._addControlInfoToCache(description.controlType, displayPath, eventName, description.group, description.propertyName, description.objectProperties);
            });
        }
    }
    _createInfo(rootInfo, displayPath, prefix, path) {
        let info = rootInfo;
        for (let i = 0; i < path.length; i++) {
            if (typeof (path[i]) !== 'string' && Array.isArray(path[i])) {
                info.push.apply(info, path[i].map(innerProperty => this._createPropertyByName(innerProperty, path[i - 1])));
            }
            else {
                const pathPart = path[i];
                const propertySplit = pathPart.split('.');
                const propertyName = propertySplit.pop();
                if (propertySplit.length > 0) {
                    path.splice(i, 1, ...propertySplit.concat([propertyName]));
                    return this._createInfo(rootInfo, displayPath, propertySplit.join('.'), path);
                }
                else {
                    let currentInfo = info.filter(x => x.propertyName === path[i] || x.propertyName === [prefix, path[i]].join('.'))[0];
                    const displaName = displayPath[i];
                    if (!currentInfo) {
                        const isComplexProperty = i !== path.length - 1;
                        currentInfo = this._createPropertyByName(path[i], isComplexProperty ? undefined : prefix, displaName);
                        if (isComplexProperty) {
                            currentInfo.editor = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor');
                            currentInfo.info = [];
                        }
                        info.push(currentInfo);
                    }
                    else if (displaName && displaName !== propertyName) {
                        info.splice(info.indexOf(currentInfo), 1, {
                            ...currentInfo,
                            displayName: displaName
                        });
                    }
                    info = currentInfo.info;
                }
            }
        }
        return rootInfo;
    }
    _addControlInfoToCache(controlType, displayPath, ...params) {
        if (!this._expressionsSerializationInfoCache[controlType]) {
            this._expressionsSerializationInfoCache[controlType] = [];
        }
        const cache = this._expressionsSerializationInfoCache[controlType];
        const infos = this._createInfo(cache, displayPath, '', params.filter(x => !!x));
        cache.splice(0, cache.length, ...infos);
    }
    _initCachedSerializationInfo(controlType, useEvents = false) {
        const propertyNames = Object.keys(this._expressionsInfo[controlType]);
        propertyNames.forEach((propertyName) => {
            const propertyDescriptor = this._expressionsInfo[controlType][propertyName];
            this._updateCachedControlInfo({
                ...propertyDescriptor,
                propertyName,
                controlType
            }, useEvents);
        });
    }
    _getPropertyDescriptors(controlType, expressionName) {
        const propertyNames = Object.keys(this._expressionsInfo[controlType]);
        if (!propertyNames.some(propertyName => propertyName === expressionName))
            return null;
        return this._expressionsInfo[controlType][expressionName];
    }
    _getExpressionFromArray(propertyName, eventName, expressions) {
        return expressions().filter(x => x.propertyName() === propertyName &&
            x.eventName() === eventName)[0];
    }
    _createExpressionMap(propertyName, eventName, expressions, subscriptions, path, summaryRunning) {
        const functions = !!summaryRunning && !!summaryRunning(propertyName)
            ? external_ko_namespaceObject.computed(() => summaryRunning(propertyName)() ? this._summaryFunctions() : reportFunctionDisplay)
            : reportFunctionDisplay;
        const expressionOptions = new WrappedExpressionOptions({
            path: path || external_ko_namespaceObject.observable(''),
            functions: functions
        }, {
            addExpression: (newVal) => {
                expressions.push(ExpressionWrapper.createExpression(propertyName, eventName, newVal));
            },
            removeExpression: (expression) => {
                expressions.remove(expression);
            }
        }, this._fieldListProvider, eventName);
        expressionOptions._disposables.push(functions);
        expressionOptions.expression(this._getExpressionFromArray(propertyName, eventName, expressions));
        return expressionOptions;
    }
    _summaryFunctions() {
        const createNewItemDelegate = (funcName, paramCount) => {
            return [{
                    paramCount: paramCount,
                    text: 'sum' + funcName + '()',
                    descriptionStringId: 'ReportStringId.ExpressionEditor_Description_Function_Summary' + funcName
                }];
        };
        const summaryCategory = {
            display: 'Summary',
            localizationId: 'ReportStringId.ExpressionEditor_ItemInfo_FunctionSummary',
            category: 'Summary',
            items: {}
        };
        ['Avg', 'Count', 'Sum', 'RunningSum', 'CarryoverSum', 'Percentage', 'Max', 'Min', 'Median', 'const', 'VarP', 'StdDev', 'StdDevP', 'DAvg', 'DCount', 'DSum', 'DVar', 'DVarP', 'DStdDev', 'DStdDevP', 'RecordNumber',
            { name: 'WAvg', paramCount: 2 }
        ].forEach(func => {
            if (typeof func === 'string') {
                summaryCategory.items[func] = createNewItemDelegate(func, 1);
            }
            else {
                summaryCategory.items[func.name] = createNewItemDelegate(func.name, func.paramCount);
            }
        });
        return reportFunctionDisplay
            .filter(cat => cat.category != 'Aggregate')
            .concat([summaryCategory]);
    }
    _mapExpressionsToObjectByEventName(object, eventName, expressions, subscriptions, path, summaryRunning) {
        const properties = object.getInfo();
        properties.forEach(info => {
            if (!external_ko_namespaceObject.isObservable(object[info.propertyName])) {
                this._mapExpressionsToObjectByEventName(object[info.propertyName], eventName, expressions, subscriptions, path, summaryRunning);
            }
            else {
                object[info.propertyName] = this._createExpressionMap(info.propertyName, eventName, expressions, subscriptions, path, summaryRunning);
                object[info.propertyName].serializationInfo = info;
                subscriptions.push(object[info.propertyName]);
            }
        });
    }
    _allExpressions(object, condition) {
        let positive = true;
        const properties = object.getInfo();
        properties.forEach(info => {
            if (!positive)
                return;
            if (object[info.propertyName] instanceof Object && !(object[info.propertyName] instanceof WrappedExpressionOptions)) {
                positive = this._allExpressions(object[info.propertyName], condition);
            }
            else {
                positive = condition(object[info.propertyName]);
            }
        });
        return positive;
    }
    _isValidExpressions(object) {
        return this._allExpressions(object, (expr) => expr.isValid());
    }
    _isWarningExpressions(object) {
        return !this._allExpressions(object, (expr) => !expr.warningMessage());
    }
    _getExpressionByPropertyName(object, propertyNameToSearch) {
        if (!object)
            return;
        if (object[propertyNameToSearch]) {
            return object[propertyNameToSearch];
        }
        else {
            const properties = object.getInfo();
            const innerObjectPropertyNames = properties.filter(info => !(object[info.propertyName] instanceof WrappedExpressionOptions));
            for (let i = 0; i < innerObjectPropertyNames.length; i++) {
                const result = this._getExpressionByPropertyName(object[innerObjectPropertyNames[i].propertyName], propertyNameToSearch);
                if (result)
                    return result;
            }
        }
    }
    _mapExpressionsToObject(controlType, expressions, path, summaryRunning) {
        if (this._bindingMode === _dataBindingMode_DataBindingMode.Bindings) {
            return null;
        }
        const useEvents = this._bindingMode === _dataBindingMode_DataBindingMode.ExpressionsAdvanced;
        const subscriptions = [];
        if (!this._expressionsSerializationInfoCache[controlType]) {
            this._initCachedSerializationInfo(controlType, useEvents);
        }
        const stateObj = {
            getInfo: external_ko_namespaceObject.observable(this._expressionsSerializationInfoCache[controlType]),
            getExpression: (propertyName, eventName) => {
                if (useEvents) {
                    return this._getExpressionByPropertyName(stateObj[eventName], propertyName);
                }
                else {
                    return this._getExpressionByPropertyName(stateObj, propertyName);
                }
            },
            getExpressionsTreeItems: (expressionName) => {
                const propertyDescriptor = this._getPropertyDescriptors(controlType, expressionName);
                if (!propertyDescriptor)
                    return null;
                const expressionTreeItems = [];
                const isComplexProperty = !!(propertyDescriptor.objectProperties || []).length;
                const generateExpressionItem = (currentExpressionName, parentExpressionName) => {
                    const expressionTreeItem = {
                        innerItems: null,
                        expressionName: currentExpressionName,
                    };
                    const expressionObjPropertyName = parentExpressionName ? [parentExpressionName, currentExpressionName].join('.') : currentExpressionName;
                    if (useEvents) {
                        propertyDescriptor.events.forEach((eventName) => {
                            const innerExpressionObj = stateObj.getExpression(expressionObjPropertyName, eventName);
                            if (!innerExpressionObj)
                                return;
                            const serializationInfo = innerExpressionObj['serializationInfo'];
                            expressionTreeItem.displayName = serializationInfo && serializationInfo.displayName;
                            expressionTreeItem.localizationId = serializationInfo && serializationInfo.localizationId;
                            expressionTreeItem.innerItems = expressionTreeItem.innerItems || [];
                            const eventInfo = this._displayNameDictionary[eventName];
                            expressionTreeItem.innerItems.push({
                                eventName: eventName,
                                displayName: eventInfo && eventInfo.displayName,
                                localizationId: eventInfo && eventInfo.localizationId,
                                expressionName: currentExpressionName,
                                expressionObj: innerExpressionObj
                            });
                        });
                    }
                    else {
                        const innerExpressionObj = stateObj.getExpression(expressionObjPropertyName);
                        if (!innerExpressionObj)
                            return;
                        expressionTreeItem.expressionObj = innerExpressionObj;
                        const serializationInfo = innerExpressionObj['serializationInfo'];
                        expressionTreeItem.displayName = serializationInfo.displayName;
                        expressionTreeItem.localizationId = serializationInfo.localizationId;
                    }
                    expressionTreeItems.push(expressionTreeItem);
                };
                if (isComplexProperty) {
                    (propertyDescriptor.objectProperties || []).forEach((innerExpresionName) => { generateExpressionItem(innerExpresionName, expressionName); });
                }
                else {
                    generateExpressionItem(expressionName);
                }
                return expressionTreeItems;
            },
            dispose: () => {
                subscriptions.forEach(x => x.dispose());
                subscriptions.splice(0);
            },
            validateExpression: () => {
                return this._isValidExpressions(stateObj);
            },
            hasWarning: () => {
                return this._isWarningExpressions(stateObj);
            },
            updateExpressionObjectProperties: (newExpressionProperties) => {
                stateObj.dispose();
                if (newExpressionProperties) {
                    newExpressionProperties?.forEach(description => this._updateCachedControlInfo(description, useEvents));
                }
                new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().deserialize(stateObj, {});
                if (useEvents) {
                    const properties = stateObj.getInfo();
                    properties.forEach(info => {
                        this._mapExpressionsToObjectByEventName(stateObj[info.propertyName], info.propertyName, expressions, subscriptions, path, summaryRunning);
                    });
                }
                else {
                    this._mapExpressionsToObjectByEventName(stateObj, 'BeforePrint', expressions, subscriptions, path, summaryRunning);
                }
                stateObj.getInfo(this._expressionsSerializationInfoCache[controlType]);
                subscriptions.push(expressions.subscribe((args) => {
                    args.forEach(arg => {
                        if (arg.status === 'deleted') {
                            stateObj.getExpression(arg.value.propertyName(), arg.value.eventName()).expression(null);
                        }
                        else if (arg.status === 'added') {
                            stateObj.getExpression(arg.value.propertyName(), arg.value.eventName()).expression(arg.value);
                        }
                    });
                }, null, 'arrayChange'));
            }
        };
        stateObj.updateExpressionObjectProperties();
        return { stateObj, subscriptions };
    }
    constructor(_bindingMode = _dataBindingMode_DataBindingMode.Expressions, _fieldListProvider) {
        super();
        this._bindingMode = _bindingMode;
        this._fieldListProvider = _fieldListProvider;
        this._valuesDictionary = {
            ForeColor: colors,
            BackColor: colors,
            FillColor: colors,
            BorderColor: colors,
            Borders: ['Left', 'Right', 'Top', 'Bottom', 'All'],
            BorderDashStyle: borderDashStyleValues,
            TextAlignment: textAlignmentValues,
            Name: Object.keys(external_ko_namespaceObject.unwrap(external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts))
        };
        this._displayNameDictionary = {
            AccessibleDescription: { localizationId: 'DevExpress.XtraReports.UI.XRControl.AccessibleDescription', displayName: 'Accessible Description' },
            Text: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Text', displayName: 'Text' },
            Visible: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Visible', displayName: 'Visible' },
            RowVisible: { localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.RowVisible', displayName: 'Row Visible' },
            ColumnVisible: { localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.ColumnVisible', displayName: 'Column Visible' },
            NavigateUrl: { localizationId: 'DevExpress.XtraReports.UI.XRControl.NavigateUrl', displayName: 'Navigate Url' },
            Bookmark: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Bookmark', displayName: 'Bookmark' },
            Tag: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag', displayName: 'Tag' },
            LeftF: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Left', displayName: 'Left' },
            TopF: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Top', displayName: 'Top' },
            WidthF: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Width', displayName: 'Width' },
            HeightF: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Height', displayName: 'Height' },
            StyleName: { localizationId: 'DevExpress.XtraReports.UI.XRControl.StyleName', displayName: 'Style Name' },
            ForeColor: { localizationId: 'DevExpress.XtraReports.UI.XRControl.ForeColor', displayName: 'Foreground Color' },
            BackColor: { localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor', displayName: 'Background Color' },
            BorderColor: { localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderColor', displayName: 'Border Color' },
            Borders: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Borders', displayName: 'Borders' },
            BorderWidth: { localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderWidth', displayName: 'Border Width' },
            BorderDashStyle: { localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderDashStyle', displayName: 'Border Dash Style' },
            TextAlignment: { localizationId: 'DevExpress.XtraReports.UI.XRControl.TextAlignment', displayName: 'Text Alignment' },
            Font: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Font', displayName: 'Font' },
            Padding: { localizationId: 'DevExpress.XtraReports.UI.XRControl.Padding', displayName: 'Padding' },
            Appearance: { localizationId: 'ReportStringId.CatAppearance', displayName: 'Appearance' },
            Layout: { localizationId: 'ReportStringId.CatLayout', displayName: 'Layout' },
            Name: { localizationId: 'AnalyticsCoreStringId.FormatFontName', displayName: 'Name' },
            Size: { localizationId: 'AnalyticsCoreStringId.Font.Size', displayName: 'Size' },
            Italic: { localizationId: 'System.Drawing.Font.Italic', displayName: 'Italic' },
            Strikeout: { localizationId: 'System.Drawing.Font.Strikeout', displayName: 'Strikeout' },
            Bold: { localizationId: 'System.Drawing.Font.Bold', displayName: 'Bold' },
            Underline: { localizationId: 'System.Drawing.Font.Underline', displayName: 'Underline' },
            Left: { localizationId: 'AnalyticsCoreStringId.PaddingInfo.Left', displayName: 'Left' },
            Right: { localizationId: 'AnalyticsCoreStringId.PaddingInfo.Right', displayName: 'Right' },
            Top: { localizationId: 'AnalyticsCoreStringId.PaddingInfo.Top', displayName: 'Top' },
            Bottom: { localizationId: 'AnalyticsCoreStringId.PaddingInfo.Bottom', displayName: 'Bottom' },
            CheckBoxState: { localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.CheckBoxState', displayName: 'Check Box State' },
            Image: { localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.Image', displayName: 'Image' },
            ImageSource: { localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageSource', displayName: 'Image Source' },
            ImageUrl: { localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageUrl', displayName: 'Image Url' },
            BinaryData: { localizationId: 'DevExpress.XtraReports.UI.XRBarCode.BinaryData', displayName: 'Binary Data' },
            TargetValue: { localizationId: 'DevExpress.XtraReports.UI.XRGauge.TargetValue', displayName: 'Target Value' },
            ActualValue: { localizationId: 'DevExpress.XtraReports.UI.XRGauge.ActualValue', displayName: 'Actual Value' },
            PrintOnPage: { localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnPrintOnPage', displayName: 'PrintOnPage' },
            BeforePrint: { localizationId: 'DevExpress.XtraReports.UI.XRControlEvents.OnBeforePrint', displayName: 'BeforePrint' },
            Minimum: { localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum', displayName: 'Minimum' },
            Maximum: { localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum', displayName: 'Maximum' },
            FillColor: { localizationId: 'DevExpress.XtraReports.UI.XRShape.FillColor', displayName: 'Fill Color' },
            Diagram: { localizationId: 'DevExpress.XtraReports.UI.XRChart.Diagram', displayName: 'Diagram' },
            AxisX: { localizationId: 'DevExpress.XtraCharts.XYDiagram.AxisX', displayName: 'X-Axis' },
            AxisY: { localizationId: 'DevExpress.XtraCharts.XYDiagram.AxisY', displayName: 'Y-Axis' },
            Title: { localizationId: 'DevExpress.XtraCharts.Axis2D.Title', displayName: 'Title' },
            EmptyChartText: { localizationId: 'DevExpress.XtraCharts.EmptyChartText', displayName: 'Empty Chart Text' },
            SmallChartText: { localizationId: 'DevExpress.XtraCharts.SmallChartText', displayName: 'Small Chart Text' },
            PaletteName: { localizationId: 'DevExpress.XtraReports.UI.XRChart.PaletteName', displayName: 'Palette Name' },
            DefaultPane: { localizationId: 'ChartStringId.DefaultPaneName', displayName: 'Default Pane' },
            Panes: { localizationId: 'ChartDesignerStringIDs.TreeAdditionalPanelCollection', displayName: 'Additional Panes' },
            Legend: { localizationId: 'DevExpress.XtraCharts.Legend', displayName: 'Legend' },
            Legends: { localizationId: 'DevExpress.XtraReports.UI.XRChart.Legends', displayName: 'Legends' },
            LegendText: { localizationId: 'DevExpress.XtraCharts.Strip.LegendText', displayName: 'Legend Text' },
            ConstantLines: { localizationId: 'DevExpress.XtraCharts.Axis2D.ConstantLines', displayName: 'Constant Lines' },
            Strips: { localizationId: 'DevExpress.XtraCharts.Axis2D.Strips', displayName: 'Strips' },
            AxisLabelText: { localizationId: 'DevExpress.XtraCharts.Strip.AxisLabelText', displayName: 'Axis Label Text' },
            SeriesTemplate: { localizationId: 'DevExpress.XtraReports.UI.XRChart.SeriesTemplate', displayName: 'Series Template' },
            Series: { localizationId: 'DevExpress.XtraReports.UI.XRChart.Series', displayName: 'Series' },
            MinValue: { localizationId: 'DevExpress.XtraCharts.AxisRange.MinValue', displayName: 'Min Value' },
            MaxValue: { localizationId: 'DevExpress.XtraCharts.AxisRange.MaxValue', displayName: 'Max Value' },
            MinLimit: { localizationId: 'DevExpress.XtraCharts.Strip.MinLimit', displayName: 'Min Limit' },
            MaxLimit: { localizationId: 'DevExpress.XtraCharts.Strip.MaxLimit', displayName: 'Max Limit' },
            LegendTextPattern: { localizationId: 'DevExpress.XtraCharts.SeriesBase.LegendTextPattern', displayName: 'Legend Text Pattern' },
            AxisValue: { localizationId: 'DevExpress.XtraCharts.AxisCoordinate.AxisValue', displayName: 'Axis Value' },
            WatermarkId: { localizationId: 'DevExpress.XtraReports.UI.XtraReport.WatermarkId', displayName: 'Watermark Id' }
        };
        this._expressionsInfo = {};
        this._expressionsSerializationInfoCache = {};
    }
    setPropertyDescription(controlType, propertyName, events, objectProperties, group) {
        if (!this._expressionsInfo[controlType])
            this._expressionsInfo[controlType] = {};
        this._expressionsInfo[controlType][propertyName] = {
            events: events,
            group: group,
            objectProperties: objectProperties
        };
    }
    hidePropertyDescriptions(controlType, ...propertyNames) {
        propertyNames.forEach(propertyName => {
            if (propertyName.indexOf('.') !== -1) {
                const propertyPath = propertyName.split('.');
                if (propertyPath.length > 2)
                    return;
                const expressionInfo = this._expressionsInfo[controlType][propertyPath[0]];
                if (!expressionInfo || !expressionInfo.objectProperties)
                    return;
                const index = expressionInfo.objectProperties.indexOf(propertyPath[1]);
                if (index === -1)
                    return;
                expressionInfo.objectProperties.splice(index, 1);
                if (expressionInfo.objectProperties.length === 0)
                    delete this._expressionsInfo[controlType][propertyPath[0]];
                return;
            }
            delete this._expressionsInfo[controlType][propertyName];
        });
    }
    createExpressionsObject(controlType, expressions, path, summaryRunning) {
        const result = this._mapExpressionsToObject(controlType, expressions, path, summaryRunning);
        if (!result)
            return;
        return result.stateObj;
    }
    setLocalizationId(propertyName, localizationId, displayName) {
        this._displayNameDictionary[propertyName] = {
            localizationId: localizationId,
            displayName: displayName || propertyName
        };
    }
    setValues(propertyName, values) {
        this._valuesDictionary[propertyName] = values;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/controlsFactory.js






class ControlsFactory extends external_DevExpress_Analytics_Utils_namespaceObject.ControlsFactory {
    dispose() {
        this._expressionWrapper.dispose();
        this._expressionWrapper = null;
        Object.keys(this.controlsMap).forEach((x) => {
            delete this.controlsMap[x];
        });
        this.fieldListProvider = null;
    }
    _registerCommonExpressions(controlType) {
        this.setExpressionBinding(controlType, 'Text', this._beforePrintPrintOnPage);
        this.setExpressionBinding(controlType, 'AccessibleDescription', this._beforePrintPrintOnPage);
        this.setExpressionBinding(controlType, 'Visible', this._beforePrintPrintOnPage);
        this.setExpressionBinding(controlType, 'NavigateUrl', this._beforePrint);
        this.setExpressionBinding(controlType, 'Bookmark', this._beforePrint);
        this.setExpressionBinding(controlType, 'Tag', this._beforePrint);
        this.setExpressionBinding(controlType, 'LeftF', this._beforePrint, 'Layout');
        this.setExpressionBinding(controlType, 'TopF', this._beforePrint, 'Layout');
        this.setExpressionBinding(controlType, 'WidthF', this._beforePrint, 'Layout');
        this.setExpressionBinding(controlType, 'HeightF', this._beforePrint, 'Layout');
        this.setExpressionBinding(controlType, 'StyleName', this._beforePrint);
        this.setExpressionBinding(controlType, 'ForeColor', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'BackColor', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'BorderColor', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'Borders', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'BorderWidth', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'BorderDashStyle', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'TextAlignment', this._beforePrintPrintOnPage, 'Appearance');
        this.setExpressionBinding(controlType, 'Font', this._beforePrintPrintOnPage, 'Appearance', ['Name', 'Size', 'Italic', 'Strikeout', 'Bold', 'Underline']);
        this.setExpressionBinding(controlType, 'Padding', this._beforePrintPrintOnPage, 'Appearance', ['All', 'Left', 'Right', 'Top', 'Bottom']);
    }
    _registerExtensions(controlType, metadata) {
        const parentType = (metadata && metadata.parentType || controlType);
        this._registerCommonExpressions(controlType);
        switch (parentType) {
            case 'XRCheckBox':
                this.setExpressionBinding(controlType, 'CheckBoxState', this._beforePrintPrintOnPage);
                break;
            case 'XRPictureBox':
                this.setExpressionBinding(controlType, 'ImageSource', this._beforePrintPrintOnPage);
                this.setExpressionBinding(controlType, 'ImageUrl', this._beforePrintPrintOnPage);
                this.hideExpressionBindings(controlType, 'Font', 'ForeColor', 'Text', 'TextAlignment');
                break;
            case 'XRBarCode':
                this.setExpressionBinding(controlType, 'BinaryData', this._beforePrint);
                break;
            case 'XRGauge':
                this.hideExpressionBindings(controlType, 'Text', 'TextAlignment', 'Font', 'ForeColor');
                this.setExpressionBinding(controlType, 'TargetValue', this._beforePrint);
                this.setExpressionBinding(controlType, 'ActualValue', this._beforePrint);
                this.setExpressionBinding(controlType, 'Minimum', this._beforePrint);
                this.setExpressionBinding(controlType, 'Maximum', this._beforePrint);
                break;
            case 'XRCharacterComb':
                this.hideExpressionBindings(controlType, 'Padding');
                break;
            case 'TopMarginBand':
            case 'BottomMarginBand':
            case 'DetailReportBand':
            case 'DetailBand':
            case 'SubBand':
            case 'GroupHeaderBand':
            case 'GroupFooterBand':
            case 'PageHeaderBand':
            case 'ReportHeaderBand':
            case 'ReportFooterBand':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Bookmark', 'NavigateUrl', 'Text', 'WidthF', 'LeftF', 'TopF');
                this.setExpressionBinding(controlType, 'Visible', this._beforePrint);
                break;
            case 'XRSubreport':
                this.setExpressionBinding(controlType, 'Visible', this._beforePrint);
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Bookmark', 'NavigateUrl', 'Padding', 'StyleName');
                this.hideExpressionBindings(controlType, 'BackColor', 'BorderColor', 'BorderWidth', 'BorderDashStyle', 'Borders', 'Font', 'ForeColor', 'TextAlignment', 'Tag', 'Text', 'NavigateUrl');
                break;
            case 'XRCrossBandBox':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Bookmark', 'NavigateUrl', 'Text', 'BackColor', 'Font', 'Padding', 'TextAlignment');
                this.hideExpressionBindings(controlType, 'ForeColor', 'Visible');
                break;
            case 'XRCrossBandLine':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Bookmark', 'NavigateUrl', 'Text', 'BackColor', 'Font', 'Padding', 'TextAlignment');
                this.hideExpressionBindings(controlType, 'BorderColor', 'BorderDashStyle', 'Borders', 'BorderWidth', 'Visible');
                break;
            case 'XRCrossTab':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Bookmark', 'BackColor', 'BorderColor', 'Borders', 'BorderDashStyle', 'BorderWidth', 'Font', 'ForeColor', 'Padding', 'TextAlignment', 'Text', 'NavigateUrl', 'Visible', 'StyleName');
                this.setExpressionBinding(controlType, 'Visible', this._beforePrint);
                break;
            case 'XRCrossTabCell':
                this.hideExpressionBindings(controlType, 'Visible', 'HeightF', 'WidthF', 'LeftF', 'TopF', 'StyleName');
                this.setExpressionBinding(controlType, 'ColumnVisible', this._beforePrint);
                this.setExpressionBinding(controlType, 'RowVisible', this._beforePrint);
                break;
            case 'XRChart':
                this.hideExpressionBindings(controlType, 'Text', 'Font', 'ForeColor', 'TextAlignment');
                this.setExpressionBinding(controlType, 'PaletteName', this._beforePrint);
                this.setExpressionBinding(controlType, 'StyleName', this._beforePrint);
                break;
            case 'XRLine':
                this.hideExpressionBindings(controlType, 'Font', 'Text', 'TextAlignment', 'NavigateUrl', 'Bookmark');
                break;
            case 'XRPivotGrid':
                this.setExpressionBinding(controlType, 'Visible', this._beforePrint);
                this.hideExpressionBindings(controlType, 'BackColor', 'BorderColor', 'Borders', 'BorderDashStyle', 'BorderWidth', 'Font', 'ForeColor', 'Padding', 'TextAlignment', 'Text', 'NavigateUrl', 'StyleName');
                break;
            case 'XRPageBreak':
                this.setExpressionBinding(controlType, 'Visible', this._beforePrint);
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'BackColor', 'BorderColor', 'Borders', 'BorderDashStyle', 'BorderWidth', 'Font', 'ForeColor', 'Padding', 'TextAlignment', 'Tag', 'Text', 'NavigateUrl', 'LeftF', 'WidthF', 'HeightF', 'Bookmark', 'StyleName');
                break;
            case 'XRPageInfo':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Text');
                break;
            case 'XRPanel':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Font', 'ForeColor', 'Text', 'TextAlignment');
                break;
            case 'XRRichText':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Text');
                this.setExpressionBinding(controlType, 'Rtf', this._beforePrint);
                this.setExpressionBinding(controlType, 'Html', this._beforePrint);
                break;
            case 'XRShape':
                this.hideExpressionBindings(controlType, 'Font', 'TextAlignment', 'Text');
                this.setExpressionBinding(controlType, 'FillColor', this._beforePrint, 'Appearance');
                break;
            case 'XRSparkline':
                this.hideExpressionBindings(controlType, 'Text', 'Font', 'TextAlignment', 'ForeColor');
                break;
            case 'XRTableOfContents':
                this.hideExpressionBindings(controlType, 'NavigateUrl', 'Text', 'TextAlignment', 'Bookmark', 'Font', 'LeftF', 'WidthF');
                break;
            case 'XRTableRow':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'LeftF', 'TopF', 'WidthF', 'Text', 'NavigateUrl', 'Bookmark');
                break;
            case 'XRTableCell':
                this.hideExpressionBindings(controlType, 'LeftF', 'TopF', 'HeightF', 'WidthF');
                break;
            case 'XRTable':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'Text', 'NavigateUrl');
                break;
            case 'XRZipCode':
                this.hideExpressionBindings(controlType, 'Font', 'TextAlignment');
                break;
            case 'XRPdfContent':
                this.setExpressionBinding(controlType, 'Visible', this._beforePrint);
                this.setExpressionBinding(controlType, 'Source', this._beforePrint, 'Data');
                this.setExpressionBinding(controlType, 'SourceUrl', this._beforePrint, 'Data');
                this.setExpressionBinding(controlType, 'PageRange', this._beforePrint, 'Data');
                this.hideExpressionBindings(controlType, 'BackColor', 'BorderColor', 'Borders', 'BorderDashStyle', 'BorderWidth', 'Font', 'ForeColor', 'Padding', 'TextAlignment', 'Tag', 'Text', 'NavigateUrl', 'LeftF', 'WidthF', 'HeightF');
                break;
            case 'DevExpress.XtraReports.UI.XtraReport':
                this.hideExpressionBindings(controlType, 'AccessibleDescription', 'StyleName', 'Text', 'NavigateUrl');
                this.setExpressionBinding(controlType, 'Bookmark', this._beforePrint);
                this.setExpressionBinding(controlType, 'WatermarkId', this._beforePrint, 'Appearance');
                this.hideExpressionBindings(controlType, 'LeftF', 'TopF', 'WidthF', 'HeightF');
                break;
            case 'XRPdfSignature':
                this.hideExpressionBindings(controlType, 'AccessibleDescription');
                break;
        }
    }
    constructor(fieldListProvider = external_ko_namespaceObject.observable(null)) {
        super();
        this.fieldListProvider = fieldListProvider;
        this._beforePrintPrintOnPage = ['BeforePrint', 'PrintOnPage'];
        this._beforePrint = ['BeforePrint'];
        this._expressionWrapper = new ExpressionWrapper(DataBindingMode(), this.fieldListProvider);
    }
    registerControl(typeName, metadata) {
        super.registerControl(typeName, metadata);
        this._registerExtensions(typeName, metadata);
    }
    _createExpressionObject(typeName, expressions, path, summaryRunning) {
        return this._expressionWrapper.createExpressionsObject(typeName, expressions, path, summaryRunning);
    }
    setExpressionBinding(controlType, propertyName, events, group, objectProperties) {
        this._expressionWrapper.setPropertyDescription(controlType, propertyName, events, objectProperties, group);
    }
    setPropertyDescription(controlType, propertyName, events, group, objectProperties) {
        return this.setExpressionBinding(controlType, propertyName, events, group, objectProperties);
    }
    setDisplayNameForExpression(propertyName, localizationId, displayName) {
        this._expressionWrapper.setLocalizationId(propertyName, localizationId, displayName);
    }
    hideExpressionBindings(type, ...propertyNames) {
        this._expressionWrapper.hidePropertyDescriptions(type, ...propertyNames);
    }
    hidePropertyDescriptions(type, ...propertyNames) {
        return this.hideExpressionBindings(type, ...propertyNames);
    }
    inheritControl(parentType, extendedOptions) {
        const parentInfo = this.getControlInfo(parentType);
        const copyParentSerializationsInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], parentInfo.info);
        const copyExtendedOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, extendedOptions);
        copyExtendedOptions.info = [].concat(copyParentSerializationsInfo, extendedOptions.info || []);
        copyExtendedOptions.popularProperties = [].concat(parentInfo.popularProperties || [], extendedOptions.popularProperties || []);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, parentInfo, copyExtendedOptions, {
            parentType: parentType,
        });
    }
    createPopularBindingInfo(options, isExpression = true) {
        return createPopularBindingInfo(options, isExpression);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrBarcode.js















const defaultCodeSerializationInfo = { propertyName: 'name', modelName: '@Name' };
const calcCheckSum = { propertyName: 'calcCheckSum', modelName: '@CalcCheckSum', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Calculate a Checksum', localizationId: 'DevExpress.XtraPrinting.BarCode.BarCodeGeneratorBase.CalcCheckSum' };
const code93SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum];
const wideNarrowRatio = { propertyName: 'wideNarrowRatio', modelName: '@WideNarrowRatio', defaultVal: 2.5, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, displayName: 'Wide Narrow Ratio', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarGenerator.WideNarrowRatio', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const wideNarrowRatio3 = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, wideNarrowRatio, { defaultVal: 3 });
const codabarStartStopSymbolValues = [
    { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.None' },
    { value: 'A', displayValue: 'A', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.A' },
    { value: 'B', displayValue: 'B', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.B' },
    { value: 'C', displayValue: 'C', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.C' },
    { value: 'D', displayValue: 'D', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarStartStopSymbol.D' },
];
const codaBarStartSymbol = {
    propertyName: 'startSymbol', modelName: '@StartSymbol', defaultVal: 'A',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Start Symbol', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarGenerator.StartSymbol',
    valuesArray: codabarStartStopSymbolValues
};
const codaBarStopSymbol = {
    propertyName: 'stopSymbol', modelName: '@StopSymbol', defaultVal: 'A',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Stop Symbol', localizationId: 'DevExpress.XtraPrinting.BarCode.CodabarGenerator.StopSymbol',
    valuesArray: codabarStartStopSymbolValues
};
const codabarSerializationInfo = [
    defaultCodeSerializationInfo,
    codaBarStartSymbol,
    codaBarStopSymbol,
    wideNarrowRatio
];
const charset = {
    propertyName: 'characterSet',
    modelName: '@CharacterSet', defaultVal: 'CharsetA', displayName: 'Character Set', localizationId: 'DevExpress.XtraPrinting.BarCode.Code128Generator.CharacterSet', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'CharsetAuto', displayValue: 'CharsetAuto', localizationId: 'DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetAuto' },
        { value: 'CharsetA', displayValue: 'CharsetA', localizationId: 'DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetA' },
        { value: 'CharsetB', displayValue: 'CharsetB', localizationId: 'DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetB' },
        { value: 'CharsetC', displayValue: 'CharsetC', localizationId: 'DevExpress.XtraPrinting.BarCode.Code128Charset.CharsetC' }
    ]
};
const addLeadingZero = { propertyName: 'addLeadingZero', displayName: 'Add Leading Zero', localizationId: 'DevExpress.XtraPrinting.BarCode.Code128Generator.AddLeadingZero', modelName: '@AddLeadingZero', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const fnc1Substitute = { propertyName: 'fNC1Substitute', modelName: '@FNC1Substitute', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), displayName: 'FNC1 Functional Character', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarGenerator.FNC1Substitute', descriptionLocalizationId: 'DevExpress.XtraPrinting.BarCode.Code128Generator.FNC1Substitute.Description' };
const fnc2Substitute = { propertyName: 'fNC2Substitute', modelName: '@FNC2Substitute', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), displayName: 'FNC2 Functional Character', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarGenerator.FNC2Substitute', descriptionLocalizationId: 'DevExpress.XtraPrinting.BarCode.Code128Generator.FNC2Substitute.Description' };
const fnc3Substitute = { propertyName: 'fNC3Substitute', modelName: '@FNC3Substitute', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), displayName: 'FNC3 Functional Character', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarGenerator.FNC3Substitute', descriptionLocalizationId: 'DevExpress.XtraPrinting.BarCode.Code128Generator.FNC3Substitute.Description' };
const fnc4Substitute = { propertyName: 'fNC4Substitute', modelName: '@FNC4Substitute', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), displayName: 'FNC4 Functional Character', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarGenerator.FNC4Substitute', descriptionLocalizationId: 'DevExpress.XtraPrinting.BarCode.Code128Generator.FNC4Substitute.Description' };
const code128SerializationInfo = [
    defaultCodeSerializationInfo,
    addLeadingZero,
    charset,
    fnc1Substitute,
    fnc2Substitute,
    fnc3Substitute,
    fnc4Substitute
];
const code39SerializationInfo = [wideNarrowRatio3].concat(code93SerializationInfo);
const codeMSISerializationInfo = [
    defaultCodeSerializationInfo,
    {
        propertyName: 'msiCheckSum',
        modelName: '@MSICheckSum', defaultVal: 'Modulo10', displayName: 'MSI Checksum', localizationId: 'DevExpress.XtraPrinting.BarCode.CodeMSIGenerator.MSICheckSum', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.BarCode.MSICheckSum.None' },
            { value: 'Modulo10', displayValue: 'Modulo10', localizationId: 'DevExpress.XtraPrinting.BarCode.MSICheckSum.Modulo10' },
            { value: 'DoubleModulo10', displayValue: 'DoubleModulo10', localizationId: 'DevExpress.XtraPrinting.BarCode.MSICheckSum.DoubleModulo10' }
        ]
    }
];
const fnc1SubstituteWithSharp = { ...fnc1Substitute, defaultVal: '#' };
const dataBarSerializationInfo = [
    defaultCodeSerializationInfo,
    fnc1SubstituteWithSharp,
    { propertyName: 'segmentsInRow', modelName: '@SegmentsInRow', defaultVal: 20, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Segments In Row', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarGenerator.SegmentsInRow' },
    {
        propertyName: 'type',
        modelName: '@Type', defaultVal: 'Omnidirectional', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        displayName: 'Type', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarGenerator.Type', valuesArray: [
            { value: 'Omnidirectional', displayValue: 'Omnidirectional', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.Omnidirectional' },
            { value: 'Truncated', displayValue: 'Truncated', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.Truncated' },
            { value: 'Stacked', displayValue: 'Stacked', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.Stacked' },
            { value: 'StackedOmnidirectional', displayValue: 'StackedOmnidirectional', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.StackedOmnidirectional' },
            { value: 'Limited', displayValue: 'Limited', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.Limited' },
            { value: 'Expanded', displayValue: 'Expanded', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.Expanded' },
            { value: 'ExpandedStacked', displayValue: 'ExpandedStacked', localizationId: 'DevExpress.XtraPrinting.BarCode.DataBarType.ExpandedStacked' }
        ]
    }
];
const matrixSize = {
    propertyName: 'matrixSize',
    modelName: '@MatrixSize', defaultVal: 'MatrixAuto', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    displayName: 'Matrix Size', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixGenerator.MatrixSize', valuesArray: [
        { value: 'MatrixAuto', displayValue: 'MatrixAuto', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.MatrixAuto' },
        { value: 'Matrix10x10', displayValue: 'Matrix10x10', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix10x10' },
        { value: 'Matrix12x12', displayValue: 'Matrix12x12', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x12' },
        { value: 'Matrix14x14', displayValue: 'Matrix14x14', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix14x14' },
        { value: 'Matrix16x16', displayValue: 'Matrix16x16', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x16' },
        { value: 'Matrix18x18', displayValue: 'Matrix18x18', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix18x18' },
        { value: 'Matrix20x20', displayValue: 'Matrix20x20', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix20x20' },
        { value: 'Matrix22x22', displayValue: 'Matrix22x22', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix22x22' },
        { value: 'Matrix24x24', displayValue: 'Matrix24x24', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix24x24' },
        { value: 'Matrix26x26', displayValue: 'Matrix26x26', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix26x26' },
        { value: 'Matrix32x32', displayValue: 'Matrix32x32', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix32x32' },
        { value: 'Matrix36x36', displayValue: 'Matrix36x36', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix36x36' },
        { value: 'Matrix40x40', displayValue: 'Matrix40x40', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix40x40' },
        { value: 'Matrix44x44', displayValue: 'Matrix44x44', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix44x44' },
        { value: 'Matrix48x48', displayValue: 'Matrix48x48', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix48x48' },
        { value: 'Matrix52x52', displayValue: 'Matrix52x52', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix52x52' },
        { value: 'Matrix64x64', displayValue: 'Matrix64x64', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix64x64' },
        { value: 'Matrix72x72', displayValue: 'Matrix72x72', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix72x72' },
        { value: 'Matrix80x80', displayValue: 'Matrix80x80', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix80x80' },
        { value: 'Matrix88x88', displayValue: 'Matrix88x88', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix88x88' },
        { value: 'Matrix96x96', displayValue: 'Matrix96x96', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix96x96' },
        { value: 'Matrix104x104', displayValue: 'Matrix104x104', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix104x104' },
        { value: 'Matrix120x120', displayValue: 'Matrix120x120', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix120x120' },
        { value: 'Matrix132x132', displayValue: 'Matrix132x132', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix132x132' },
        { value: 'Matrix144x144', displayValue: 'Matrix144x144', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix144x144' },
        { value: 'Matrix8x18', displayValue: 'Matrix8x18', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix8x18' },
        { value: 'Matrix8x32', displayValue: 'Matrix8x32', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix8x32' },
        { value: 'Matrix12x26', displayValue: 'Matrix12x26', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x26' },
        { value: 'Matrix12x36', displayValue: 'Matrix12x36', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix12x36' },
        { value: 'Matrix16x36', displayValue: 'Matrix16x36', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x36' },
        { value: 'Matrix16x48', displayValue: 'Matrix16x48', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixSize.Matrix16x48' }
    ]
};
const dataMatrixSerializationInfo = [
    defaultCodeSerializationInfo,
    matrixSize,
    {
        propertyName: 'compactionMode',
        modelName: '@CompactionMode', defaultVal: 'ASCII', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        displayName: 'Compaction Mode', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixGenerator.CompactionMode', valuesArray: [
            { value: 'ASCII', displayValue: 'ASCII', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.ASCII' },
            { value: 'C40', displayValue: 'C40', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.C40' },
            { value: 'Text', displayValue: 'Text', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Text' },
            { value: 'X12', displayValue: 'X12', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.X12' },
            { value: 'Edifact', displayValue: 'Edifact', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Edifact' },
            { value: 'Binary', displayValue: 'Binary', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixCompactionMode.Binary' }
        ]
    }
];
const humanReadableText = { propertyName: 'humanReadableText', modelName: '@HumanReadableText', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Human-Readable Text', localizationId: 'DevExpress.XtraPrinting.BarCode.DataMatrixGS1Generator.HumanReadableText', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const dataMatrixGS1SerializationInfo = [
    defaultCodeSerializationInfo,
    matrixSize,
    fnc1SubstituteWithSharp,
    humanReadableText,
];
const EAN128SerializationInfo = [
    defaultCodeSerializationInfo,
    charset,
    fnc1SubstituteWithSharp,
    humanReadableText
];
const Industrial2of5SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum, wideNarrowRatio];
const Interleaved2of5SerializationInfo = [defaultCodeSerializationInfo, calcCheckSum, wideNarrowRatio3];
const PDF417SerializationInfo = [
    defaultCodeSerializationInfo,
    { propertyName: 'columns', modelName: '@Columns', defaultVal: 1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Columns', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417Generator.Columns' },
    {
        propertyName: 'compactionMode',
        modelName: '@CompactionMode', defaultVal: 'Text', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Compaction Mode', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417Generator.CompactionMode',
        valuesArray: [
            { value: 'Binary', displayValue: 'Binary', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417CompactionMode.Binary' },
            { value: 'Text', displayValue: 'Text', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417CompactionMode.Text' }
        ]
    },
    {
        propertyName: 'errorCorrectionLevel',
        modelName: '@ErrorCorrectionLevel', defaultVal: 'Level2', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Error Correction Level', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417Generator.ErrorCorrectionLevel',
        valuesArray: [
            { value: 'Level0', displayValue: 'Level0', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level0' },
            { value: 'Level1', displayValue: 'Level1', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level1' },
            { value: 'Level2', displayValue: 'Level2', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level2' },
            { value: 'Level3', displayValue: 'Level3', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level3' },
            { value: 'Level4', displayValue: 'Level4', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level4' },
            { value: 'Level5', displayValue: 'Level5', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level5' },
            { value: 'Level6', displayValue: 'Level6', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level6' },
            { value: 'Level7', displayValue: 'Level7', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level7' },
            { value: 'Level8', displayValue: 'Level8', localizationId: 'DevExpress.XtraPrinting.BarCode.ErrorCorrectionLevel.Level8' }
        ]
    },
    { propertyName: 'rows', modelName: '@Rows', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Rows', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417Generator.Rows' },
    { propertyName: 'yToXRatio', modelName: '@YToXRatio', defaultVal: 3, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Y to X Ratio', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417Generator.YToXRatio' },
    { propertyName: 'truncateSymbol', modelName: '@TruncateSymbol', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Truncate Symbol', localizationId: 'DevExpress.XtraPrinting.BarCode.PDF417Generator.TruncateSymbol' }
];
const SSCCSerializationInfo = [
    defaultCodeSerializationInfo,
];
const compactionMode = {
    propertyName: 'compactionMode',
    modelName: '@CompactionMode', defaultVal: 'AlphaNumeric', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Compaction Mode', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeGenerator.CompactionMode',
    valuesArray: [
        { value: 'Numeric', displayValue: 'Numeric', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.Numeric' },
        { value: 'AlphaNumeric', displayValue: 'AlphaNumeric', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.AlphaNumeric' },
        { value: 'Byte', displayValue: 'Byte', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeCompactionMode.Byte' }
    ]
};
const errorCorrectionLevel = {
    propertyName: 'errorCorrectionLevel',
    modelName: '@ErrorCorrectionLevel', defaultVal: 'L', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Error Correction Level', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeGenerator.ErrorCorrectionLevel',
    valuesArray: [
        { value: 'M', displayValue: 'M', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.M' },
        { value: 'L', displayValue: 'L', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.L' },
        { value: 'H', displayValue: 'H', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.H' },
        { value: 'Q', displayValue: 'Q', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeErrorCorrectionLevel.Q' }
    ]
};
const logo = {
    propertyName: 'logo',
    modelName: '@Logo',
    editor: { header: 'dxrd-image-loadfile', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.Editor },
    displayName: 'Logo',
    localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeGenerator.Logo',
    from: val => external_ko_namespaceObject.observable(external_DevExpress_Reporting_namespaceObject.ImageSource.parse(val)),
    toJsonObject: external_DevExpress_Reporting_namespaceObject.ImageSource.toString,
    defaultVal: null
};
const includeQuietZone = {
    propertyName: 'IncludeQuietZone',
    modelName: '@IncludeQuietZone',
    displayName: 'Include Quiet Zone',
    localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeGenerator.IncludeQuietZone',
    defaultVal: true,
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'),
    from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool
};
const version = {
    propertyName: 'version',
    modelName: '@Version', defaultVal: 'AutoVersion', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Version', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeGenerator.Version',
    valuesArray: [
        { value: 'AutoVersion', displayValue: 'AutoVersion', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.AutoVersion' },
        { value: 'Version1', displayValue: 'Version1', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version1' },
        { value: 'Version2', displayValue: 'Version2', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version2' },
        { value: 'Version3', displayValue: 'Version3', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version3' },
        { value: 'Version4', displayValue: 'Version4', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version4' },
        { value: 'Version5', displayValue: 'Version5', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version5' },
        { value: 'Version6', displayValue: 'Version6', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version6' },
        { value: 'Version7', displayValue: 'Version7', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version7' },
        { value: 'Version8', displayValue: 'Version8', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version8' },
        { value: 'Version9', displayValue: 'Version9', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version9' },
        { value: 'Version10', displayValue: 'Version10', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version10' },
        { value: 'Version11', displayValue: 'Version11', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version11' },
        { value: 'Version12', displayValue: 'Version12', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version12' },
        { value: 'Version13', displayValue: 'Version13', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version13' },
        { value: 'Version14', displayValue: 'Version14', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version14' },
        { value: 'Version15', displayValue: 'Version15', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version15' },
        { value: 'Version16', displayValue: 'Version16', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version16' },
        { value: 'Version17', displayValue: 'Version17', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version17' },
        { value: 'Version18', displayValue: 'Version18', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version18' },
        { value: 'Version19', displayValue: 'Version19', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version19' },
        { value: 'Version20', displayValue: 'Version20', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version20' },
        { value: 'Version21', displayValue: 'Version21', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version21' },
        { value: 'Version22', displayValue: 'Version22', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version22' },
        { value: 'Version23', displayValue: 'Version23', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version23' },
        { value: 'Version24', displayValue: 'Version24', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version24' },
        { value: 'Version25', displayValue: 'Version25', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version25' },
        { value: 'Version26', displayValue: 'Version26', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version26' },
        { value: 'Version27', displayValue: 'Version27', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version27' },
        { value: 'Version28', displayValue: 'Version28', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version28' },
        { value: 'Version29', displayValue: 'Version29', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version29' },
        { value: 'Version30', displayValue: 'Version30', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version30' },
        { value: 'Version31', displayValue: 'Version31', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version31' },
        { value: 'Version32', displayValue: 'Version32', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version32' },
        { value: 'Version33', displayValue: 'Version33', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version33' },
        { value: 'Version34', displayValue: 'Version34', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version34' },
        { value: 'Version35', displayValue: 'Version35', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version35' },
        { value: 'Version36', displayValue: 'Version36', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version36' },
        { value: 'Version37', displayValue: 'Version37', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version37' },
        { value: 'Version38', displayValue: 'Version38', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version38' },
        { value: 'Version39', displayValue: 'Version39', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version39' },
        { value: 'Version40', displayValue: 'Version40', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeVersion.Version40' },
    ]
};
const frameOptions = { propertyName: 'frameOptions', modelName: 'FrameOptions' };
const frameOptionsFake = {
    propertyName: 'frameOptionsFake', editor: designerEditorTemplates.getEditor('contentByType'),
    valuesArray: frameOptionsTypes,
    displayName: 'Frame Options', localizationId: 'DevExpress.XtraPrinting.BarCode.QRCodeGenerator.FrameOptions'
};
const QRCodeSerializationInfo = [
    defaultCodeSerializationInfo,
    compactionMode,
    errorCorrectionLevel,
    frameOptions,
    frameOptionsFake,
    logo,
    includeQuietZone,
    version
];
const QRCodeGS1SerializationInfo = [
    defaultCodeSerializationInfo,
    fnc1SubstituteWithSharp,
    compactionMode,
    errorCorrectionLevel,
    frameOptions,
    frameOptionsFake,
    includeQuietZone,
    version,
];
const FrameOptionsFakeEPC = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, frameOptionsFake, { valuesArray: FrameOptionsTypesEPC });
const QRCodeEPCSerializationInfo = [
    defaultCodeSerializationInfo,
    frameOptions,
    FrameOptionsFakeEPC,
    includeQuietZone,
    logo,
    version,
];
const PharmacodeSerializationInfo = [
    defaultCodeSerializationInfo,
    {
        propertyName: 'pharmacodeType',
        modelName: '@PharmacodeType', defaultVal: 'OneTrack', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'PharmacodeType', localizationId: 'DevExpress.XtraPrinting.BarCode.PharmacodeGenerator.PharmacodeType',
        valuesArray: [
            { value: 'OneTrack', displayValue: 'OneTrack', localizationId: 'DevExpress.XtraPrinting.BarCode.PharmacodeType.OneTrack' },
            { value: 'TwoTrack', displayValue: 'TwoTrack', localizationId: 'DevExpress.XtraPrinting.BarCode.PharmacodeType.TwoTrack' }
        ]
    }
];
const autoModule = { propertyName: 'autoModule', modelName: '@AutoModule', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Auto-Module', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.AutoModule' };
const barCodeOrientation = {
    propertyName: 'barCodeOrientation',
    modelName: '@BarCodeOrientation', defaultVal: 'Normal',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    displayName: 'Orientation', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.BarCodeOrientation', valuesArray: [
        { value: 'Normal', displayValue: 'Normal', localizationId: 'DevExpress.XtraPrinting.BarCode.BarCodeOrientation.Normal' },
        { value: 'UpsideDown', displayValue: 'UpsideDown', localizationId: 'DevExpress.XtraPrinting.BarCode.BarCodeOrientation.UpsideDown' },
        { value: 'RotateLeft', displayValue: 'RotateLeft', localizationId: 'DevExpress.XtraPrinting.BarCode.BarCodeOrientation.RotateLeft' },
        { value: 'RotateRight', displayValue: 'RotateRight', localizationId: 'DevExpress.XtraPrinting.BarCode.BarCodeOrientation.RotateRight' }
    ]
};
const moduleInfo = { propertyName: 'module', modelName: '@Module', defaultVal: 2, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Module', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Module' };
const showText = { propertyName: 'showText', modelName: '@ShowText', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Show Text', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.ShowText' };
const symbology = { propertyName: 'symbology', modelName: 'Symbology' };
const targetDeviceDpi = { propertyName: 'targetDeviceDpi', modelName: '@TargetDeviceDpi', displayName: 'Target Device Dpi', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.TargetDeviceDpi', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), editorOptions: { min: 1, format: '#' } };
const barcodeFake = { propertyName: 'barcodeFake', valuesArray: barCodesTypes, editor: designerEditorTemplates.getEditor('contentByType'), displayName: 'Symbology', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Symbology', descriptionLocalizationId: '' };
const alignment = {
    propertyName: 'alignment',
    modelName: '@Alignment', displayName: 'Alignment', localizationId: 'DevExpress.XtraReports.UI.XRBarCode.Alignment', defaultVal: 'TopLeft',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: textAlignmentValues
};
const barCodesMap = {
    'Codabar': codabarSerializationInfo,
    'Code11': [defaultCodeSerializationInfo],
    'Code128': code128SerializationInfo,
    'Code39': code39SerializationInfo,
    'Code39Extended': code39SerializationInfo,
    'Code93': code93SerializationInfo,
    'Code93Extended': code93SerializationInfo,
    'CodeMSI': codeMSISerializationInfo,
    'DataBar': dataBarSerializationInfo,
    'DataMatrix': dataMatrixSerializationInfo,
    'DataMatrixGS1': dataMatrixGS1SerializationInfo,
    'EAN128': EAN128SerializationInfo,
    'EAN13': [defaultCodeSerializationInfo],
    'EAN8': [defaultCodeSerializationInfo],
    'Industrial2of5': Industrial2of5SerializationInfo,
    'IntelligentMail': [defaultCodeSerializationInfo],
    'IntelligentMailPackage': [defaultCodeSerializationInfo, fnc1Substitute],
    'Interleaved2of5': Interleaved2of5SerializationInfo,
    'ITF14': Interleaved2of5SerializationInfo,
    'Matrix2of5': Industrial2of5SerializationInfo,
    'PDF417': PDF417SerializationInfo,
    'PostNet': [defaultCodeSerializationInfo],
    'SSCC': SSCCSerializationInfo,
    'QRCode': QRCodeSerializationInfo,
    'UPCA': [defaultCodeSerializationInfo],
    'UPCE0': [defaultCodeSerializationInfo],
    'UPCE1': [defaultCodeSerializationInfo],
    'UPCSupplemental2': [defaultCodeSerializationInfo],
    'UPCSupplemental5': [defaultCodeSerializationInfo],
    'Pharmacode': PharmacodeSerializationInfo,
    'DeutschePostIdentcode': [defaultCodeSerializationInfo, wideNarrowRatio3],
    'DeutschePostLeitcode': [defaultCodeSerializationInfo, wideNarrowRatio3],
    'QRCodeGS1': QRCodeGS1SerializationInfo,
    'QRCodeEPC': QRCodeEPCSerializationInfo
};
const barcodeTextFormatString = { ...textFormatString, descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRBarCode.TextFormatString.Description' };
const barcodeSerializationsInfo = [
    alignment, autoModule, barCodeOrientation, moduleInfo, showText, symbology, metadata_text, barcodeTextFormatString,
    keepTogether, anchorVertical, anchorHorizontal, action,
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_textAlignment, { defaultVal: 'BottomLeft' }),
    textControlScripts, barcodeFake, targetDeviceDpi,
    dataBindings(['Bookmark', 'NavigateUrl', 'Tag', 'Text']),
].concat(createSinglePopularBindingInfos('Text'), sizeLocation, commonControlProperties, fontGroup, navigationGroup, processGroup);
const popularPropertiesBarCode = ['barcodeFake', 'module', 'targetDeviceDpi', 'autoModule', 'barCodeOrientation', 'text', 'popularDataBinding', 'textFormatString', 'bookmark', 'bookmarkParent', 'showText'];

;// ./node_modules/devexpress-reporting/designer/controls/xrBarcode.js





class XRBarCodeViewModel extends XRControlViewModel {
    createBarcode(model, serializer = null) {
        const name = model['@Name'] || 'Code1';
        model['@Name'] = name;
        const barcodeInfo = barCodesMap[name] || [defaultCodeSerializationInfo];
        return new BarCodeSymbology(model, serializer, barcodeInfo, this);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.symbology(this.createBarcode(this.symbology() || {}, serializer));
        this.barcodeFake = {
            type: external_ko_namespaceObject.pureComputed({
                read: () => {
                    return this.symbology()['name']();
                },
                write: (val) => {
                    this.symbology()?.dispose();
                    this.symbology(this.createBarcode({ '@Name': val }, serializer));
                }
            }),
            content: this.symbology
        };
        this._disposables.push(this.barcodeFake.type);
    }
    dispose() {
        super.dispose();
        this.symbology()?.dispose();
    }
}
XRBarCodeViewModel.unitProperties = [].concat(['module'], XRReportElementViewModel.unitProperties);


;// ./node_modules/devexpress-reporting/designer/controls/utils/_charactercombHelper.js
class CharacterCombHelper {
    static getAlignments(textAlignment) {
        let vertical = '';
        let horizontal = '';
        for (let i = 0; i < textAlignment.length; i++) {
            if (textAlignment[i] === textAlignment[i].toLocaleUpperCase()) {
                if (vertical === '') {
                    vertical += textAlignment[i];
                }
                else if (vertical !== '') {
                    horizontal += textAlignment[i];
                }
            }
            else {
                if (horizontal !== '') {
                    horizontal += textAlignment[i];
                }
                else {
                    vertical += textAlignment[i];
                }
            }
        }
        return {
            vertical: vertical,
            horizontal: horizontal
        };
    }
    static getLines(text, horizontal, multiline, wordwrap) {
        const texts = multiline ? text.split('\n') : [text];
        const result = [];
        if (horizontal === 0) {
            return result;
        }
        for (let i = 0; i < texts.length; i++) {
            let lines = 1;
            if (texts[i].length > horizontal && wordwrap) {
                lines = Math.round(texts[i].length / horizontal);
                if (lines < texts[i].length / horizontal) {
                    lines++;
                }
            }
            for (let j = 0; j < lines; j++) {
                result.push(texts[i].slice(j * (horizontal), (j + 1) * horizontal));
            }
        }
        return result;
    }
    static getTextOffset(texts, position, verticalAlign, horizontalAlign, vertical, horizontal) {
        let offset = 0;
        if (verticalAlign === 'Top') {
            offset += horizontal * position;
        }
        else if (verticalAlign === 'Middle') {
            offset += ((Math.floor((vertical - texts.length) / 2)) * horizontal);
            offset += horizontal * position;
        }
        else if (verticalAlign === 'Bottom') {
            offset += ((vertical - texts.length) * horizontal);
            offset += horizontal * position;
        }
        if (horizontalAlign === 'Center') {
            if (texts[position].length < horizontal) {
                offset += Math.floor((horizontal - Math.max(texts[position].length, 1)) / 2);
            }
        }
        else if (horizontalAlign === 'Right') {
            if (texts[position].length < horizontal) {
                offset += (horizontal - Math.max(texts[position].length, 1));
            }
        }
        return offset;
    }
    static setText(texts, cells, getTextOffset) {
        for (let i = 0; i < cells.length; i++) {
            cells[i].text('');
            cells[i].isEmpty = true;
        }
        for (let i = 0; i < texts.length; i++) {
            const offset = getTextOffset(texts, i);
            if (texts[i] === '' && offset < cells.length && offset >= 0) {
                cells[offset].isEmpty = false;
            }
            for (let j = offset; j < offset + texts[i].length; j++) {
                if ((j - offset) < texts[i].length && j < cells.length && j >= 0) {
                    cells[j].text(texts[i][j - offset]);
                    cells[j].isEmpty = false;
                }
            }
        }
    }
    static distributionEmptySpace(emptySpace, vertical, textAlignment) {
        if (vertical && textAlignment.indexOf('Top') !== -1 || !vertical && textAlignment.indexOf('Left') !== -1)
            return 0;
        if (vertical && textAlignment.indexOf('Middle') !== -1 || !vertical && textAlignment.indexOf('Center') !== -1)
            return emptySpace / 2;
        return emptySpace;
    }
    static getHorizontalVerticalByText(multiline, wordwrap, text, horizontal, vertical) {
        const stringLengths = text.split('\n').map(str => str.length);
        const _maxLength = Math.max(...stringLengths);
        let _horizontal = Math.min(text.length, horizontal);
        let _vertical = vertical;
        if (!multiline && !wordwrap) {
            _vertical = 1;
            _horizontal = text.length;
        }
        else if (!multiline && wordwrap) {
            _vertical = Math.ceil(text.length / _horizontal);
        }
        else if (multiline && wordwrap) {
            _horizontal = Math.min(_horizontal, _maxLength);
            _vertical = 0;
            stringLengths.forEach(length => _vertical += (length ? Math.ceil(length / _horizontal) : 1));
        }
        else if (multiline && !wordwrap) {
            _vertical = stringLengths.length;
            _horizontal = _maxLength;
        }
        return { horizontal: _horizontal, vertical: _vertical };
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrCharactercomb.js







class XRCharacterComb extends XRControlViewModel {
    isPropertyDisabled(name) {
        if (name === 'cellWidth') {
            return this.sizeMode() === 'AutoSize' || this.sizeMode() === 'AutoWidth';
        }
        if (name === 'cellHeight') {
            return this.sizeMode() === 'AutoSize' || this.sizeMode() === 'AutoHeight';
        }
        return super.isPropertyDisabled(name);
    }
    _createCellSideFromOriginalSide(originalCellSide, isHeight) {
        return external_ko_namespaceObject.pureComputed({
            read: () => {
                switch (this.sizeMode()) {
                    case 'AutoSize':
                        return null;
                    case 'AutoWidth':
                        return isHeight ? originalCellSide() : null;
                    case 'AutoHeight':
                        return !isHeight ? originalCellSide() : null;
                    case 'Custom':
                        return originalCellSide();
                }
            },
            write: (val) => { originalCellSide(val); }
        });
    }
    constructor(control, parent, serializer) {
        super(control, parent, serializer);
        const _originalCellWidth = this.cellWidth;
        const _originalCellHeight = this.cellHeight;
        this._disposables.push(this.cellWidth = this._createCellSideFromOriginalSide(_originalCellWidth, false));
        this._disposables.push(this.cellHeight = this._createCellSideFromOriginalSide(_originalCellHeight, true));
        const fontModel = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel(this.font);
        const borderWidth = external_ko_namespaceObject.computed(() => {
            if (this['borders']() && this['borders']() !== 'None') {
                return this['borderWidth']();
            }
            else {
                return 0;
            }
        });
        this._disposables.push(borderWidth);
        const textSizeHelper = new TextElementSizeHelper();
        this.autoCellSide = external_ko_namespaceObject.observable(this.cellHeight());
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (this.sizeMode() !== 'Custom') {
                const characterHeight = textSizeHelper.getTextContainerSize('a', {
                    'font-size': fontModel.size() + fontModel.unit(),
                    'font-family': fontModel.family(),
                    'height': 'auto',
                    'width': 'auto'
                }, 0).height;
                let side = characterHeight * 1.5 + 2 * borderWidth();
                if (this.parentModel()) {
                    side = (0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(side, this.parentModel().root['measureUnit'](), 1);
                }
                this.autoCellSide(side);
            }
        }));
    }
    roundSize() {
        this.size.width(Math.ceil(this.size.width()));
        this.size.height(Math.ceil(this.size.height()));
    }
}
XRCharacterComb.unitProperties = [].concat(['cellWidth', 'cellHeight', 'verticalSpacing', 'horizontalSpacing'], XRReportElementViewModel.unitProperties);

class XRCharacterCombSurface extends XRControlSurface {
    _createCell(text, position) {
        return {
            text: external_ko_namespaceObject.observable(text),
            left: external_ko_namespaceObject.computed(() => {
                const _horizontalSpacing = this.horizontalSpacing();
                const borderWidth = this._getBorderWidthBySpacing(_horizontalSpacing);
                const line = Math.floor((position) / this.horizontal());
                let column = position - (this.horizontal() * line);
                if (this.rtl()) {
                    column = (this.horizontal() * (line + 1)) - (position + 1);
                }
                return column * (this.cellSize.width() + _horizontalSpacing - borderWidth) + this.leftEmptySpace();
            }),
            top: external_ko_namespaceObject.computed(() => {
                const _verticalSpacing = this.verticalSpacing();
                const borderWidth = this._getBorderWidthBySpacing(_verticalSpacing);
                const line = Math.floor((position) / this.horizontal());
                return line * (this.cellSize.height() + _verticalSpacing - borderWidth) + this.topEmptySpace();
            }),
            size: this.cellSize,
            isEmpty: false
        };
    }
    _updateCellsText(textAlignment) {
        const alignments = CharacterCombHelper.getAlignments(textAlignment);
        const texts = CharacterCombHelper.getLines(this.displayText(), this.horizontal.peek(), this._control.multiline(), this._control['wordWrap'] && this._control['wordWrap']());
        CharacterCombHelper.setText(texts, this.cells.peek(), (texts, position) => {
            return CharacterCombHelper.getTextOffset(texts, position, alignments.vertical, alignments.horizontal, this.vertical.peek(), this.horizontal.peek());
        });
    }
    _getBorderWidthBySpacing(spacing) {
        return (!spacing && this.borders() && this.borders() !== 'None') ? this.borderWidth() : 0;
    }
    _applyBounds(newRect, newHorizontal, newVertical, multiline, wordwrap) {
        if (newVertical <= this.vertical()) {
            const notEmptyCells = this.cells().filter(cell => !cell.isEmpty);
            const cellLefts = notEmptyCells.map(cell => cell.left());
            newRect.top += notEmptyCells[0].top();
            if (newHorizontal <= this.horizontal())
                newRect.left += Math.min(...cellLefts);
        }
        else if (newHorizontal <= this.horizontal()) {
            const newCells = [];
            this.updateArray(newVertical * newHorizontal, newCells);
            const alignments = CharacterCombHelper.getAlignments(this.getControlModel()['textAlignment']());
            const texts = CharacterCombHelper.getLines(this.displayText(), newHorizontal, multiline, wordwrap);
            CharacterCombHelper.setText(texts, newCells, (texts, position) => {
                return CharacterCombHelper.getTextOffset(texts, position, alignments.vertical, alignments.horizontal, newVertical, newHorizontal);
            });
            const newCellsLefts = newCells.filter(cell => !cell.isEmpty).map(cell => cell.left());
            newRect.left += Math.min(...newCellsLefts);
        }
        newRect.height = (this.cellSize.height() + this.verticalSpacing()) * newVertical - this.verticalSpacing() - (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(this._getBorderWidthBySpacing(this.verticalSpacing()) * (newVertical - 1), this._context.measureUnit(), 1);
        newRect.width = (this.cellSize.width() + this.horizontalSpacing()) * newHorizontal - this.horizontalSpacing() - (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(this._getBorderWidthBySpacing(this.horizontalSpacing()) * (newHorizontal - 1), this._context.measureUnit(), 1);
    }
    updateArray(cellsCount, array) {
        const cells = array || this.cells.peek();
        if (cells.length > cellsCount) {
            cells.splice(cellsCount, cells.length - cellsCount);
        }
        else if (cells.length < cellsCount) {
            for (let i = cells.length; i < cellsCount; i++) {
                cells.push(this._createCell('', i));
            }
        }
        if (!array)
            this.cells.valueHasMutated();
    }
    fitBoundsToText() {
        const _multiline = this._control['multiline'] && this._control['multiline']();
        const _wordwrap = this._control['wordWrap'] && this._control['wordWrap']();
        const zoom = this._context.zoom();
        const oldRect = this.rect();
        const newRect = {};
        Object.keys(oldRect).forEach(propertyName => {
            newRect[propertyName] = oldRect[propertyName] / zoom;
        });
        const newHorizVert = CharacterCombHelper.getHorizontalVerticalByText(_multiline, _wordwrap, this.displayText(), this.horizontal() || 1, this.vertical() || 1);
        this._applyBounds(newRect, newHorizVert.horizontal, newHorizVert.vertical, _multiline, _wordwrap);
        if (newRect.top !== oldRect.top || newRect.height !== oldRect.height || newRect.left !== oldRect.left || newRect.width !== oldRect.width) {
            this.rect({ top: Math.round(newRect.top * zoom), height: newRect.height * zoom, left: Math.round(newRect.left * zoom), width: newRect.width * zoom });
            this.getControlModel().roundSize();
        }
    }
    constructor(control, context) {
        super(control, context);
        this.cells = external_ko_namespaceObject.observableArray([]);
        this._disposables.push(this.borderWidth = external_ko_namespaceObject.computed(() => {
            return control['borderWidth']() === undefined ? 1 : control['borderWidth']();
        }));
        this.rtl = () => { return control.rtl(); };
        this.borders = control['borders'];
        this.template = 'dxrd-charactercomb';
        this.contenttemplate = 'dxrd-charactercomb-content';
        this._disposables.push(control.textAlignment.subscribe((newVal) => {
            this._updateCellsText(newVal);
        }));
        this._disposables.push(this.verticalSpacing = external_ko_namespaceObject.computed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control.verticalSpacing(), context.measureUnit(), 1);
        }));
        this._disposables.push(this.horizontalSpacing = external_ko_namespaceObject.computed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control.horizontalSpacing(), context.measureUnit(), 1);
        }));
        this.cellSize = {
            width: external_ko_namespaceObject.computed(() => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control.cellWidth() || control.autoCellSide(), context.measureUnit(), 1);
            }),
            height: external_ko_namespaceObject.computed(() => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control.cellHeight() || control.autoCellSide(), context.measureUnit(), 1);
            }),
            isPropertyDisabled: (name) => { return false; }
        };
        this._disposables.push(this.cellSize.width);
        this._disposables.push(this.cellSize.height);
        this._disposables.push(this.fullCellHeight = external_ko_namespaceObject.computed(() => {
            const _verticalSpacing = this.verticalSpacing();
            let fullCellHeight = this.cellSize.height();
            if (!!this.verticalSpacing()) {
                fullCellHeight += this.verticalSpacing();
            }
            return fullCellHeight - this._getBorderWidthBySpacing(_verticalSpacing);
        }));
        this._disposables.push(this.fullCellWidth = external_ko_namespaceObject.computed(() => {
            const _horizontalSpacing = this.horizontalSpacing.peek();
            let fullCellWidth = this.cellSize.width();
            if (!!this.horizontalSpacing()) {
                fullCellWidth += this.horizontalSpacing();
            }
            return fullCellWidth - this._getBorderWidthBySpacing(_horizontalSpacing);
        }));
        this._disposables.push(this.vertical = external_ko_namespaceObject.computed(() => {
            const _borderWidth = this._getBorderWidthBySpacing(this.verticalSpacing()) * context.zoom();
            const fullCellHeight = this.fullCellHeight() * context.zoom();
            let vertical = Math.floor((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)((this.rect().height - _borderWidth) / fullCellHeight));
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(this.rect().height - (vertical * fullCellHeight + _borderWidth)) >= (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(this.cellSize.height() * context.zoom() - _borderWidth)) {
                vertical += 1;
            }
            return vertical;
        }));
        this._disposables.push(this.horizontal = external_ko_namespaceObject.computed(() => {
            const _borderWidth = this._getBorderWidthBySpacing(this.horizontalSpacing()) * context.zoom();
            const fullCellWidth = this.fullCellWidth() * context.zoom();
            let horizontal = Math.floor((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)((this.rect().width - _borderWidth) / fullCellWidth));
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(this.rect().width - (horizontal * fullCellWidth + _borderWidth)) >= (0,external_DevExpress_Analytics_Internal_namespaceObject.roundingXDecimals)(this.cellSize.width() * context.zoom() - _borderWidth)) {
                horizontal += 1;
            }
            return horizontal;
        }));
        this._disposables.push(this.topEmptySpace = external_ko_namespaceObject.computed(() => {
            const _verticalSpacing = this.verticalSpacing();
            const _borderWidth = this._getBorderWidthBySpacing(_verticalSpacing);
            const _emptySpace = this.rect().height / context.zoom() - (this.fullCellHeight() * this.vertical() - _verticalSpacing + _borderWidth);
            return CharacterCombHelper.distributionEmptySpace(_emptySpace, true, this.getControlModel().textAlignment());
        }));
        this._disposables.push(this.leftEmptySpace = external_ko_namespaceObject.computed(() => {
            const _horizontalSpacing = this.horizontalSpacing();
            const _borderWidth = this._getBorderWidthBySpacing(_horizontalSpacing);
            const _emptySpace = this.rect().width / context.zoom() - (this.fullCellWidth() * this.horizontal() - _horizontalSpacing + _borderWidth);
            return CharacterCombHelper.distributionEmptySpace(_emptySpace, false, this.getControlModel().textAlignment());
        }));
        this._disposables.push(this.css = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.fontCss(), this.cssCalculator.foreColorCss(), this.cssCalculator.backGroundCss());
        }));
        this._disposables.push(this.borderCss = external_ko_namespaceObject.pureComputed(() => {
            return this.cssCalculator.borderCss();
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this.updateArray(this.vertical() * this.horizontal());
            this._updateCellsText(control.textAlignment.peek());
        }));
        this._disposables.push(control.text.subscribe((newVal) => {
            this._updateCellsText(control.textAlignment.peek());
        }));
    }
    getText() {
        return this.displayText();
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/pivotgrid/sortBySummary.js

const summaryTypeValues = [
    { value: 'Count', displayValue: 'Count', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Count' },
    { value: 'Sum', displayValue: 'Sum', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Sum' },
    { value: 'Min', displayValue: 'Min', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Min' },
    { value: 'Max', displayValue: 'Max', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Max' },
    { value: 'Average', displayValue: 'Average', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Average' },
    { value: 'StdDev', displayValue: 'Standard Deviation', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.StdDev' },
    { value: 'StdDevp', displayValue: 'Standard Deviation for Entire Population', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.StdDevp' },
    { value: 'Var', displayValue: 'Variation', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Var' },
    { value: 'Varp', displayValue: 'Variation for Entire Population', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Varp' },
    { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryType.Custom' }
];
const summaryType = {
    propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'Summary Type', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.SummaryType',
    defaultVal: 'Sum', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: summaryTypeValues
};
const fieldComponentName = {
    propertyName: 'fieldComponentName', modelName: '@FieldComponentName', displayName: 'Field', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.Field',
    defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: '', displayValue: '(none)', localizationId: 'ChartStringId.WizNoBackImage' }]
};
const conditions = {
    propertyName: 'conditions', modelName: 'Conditions', displayName: 'Conditions', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.Conditions', array: true,
    template: '#dxrd-commonCollectionItem',
    editor: { custom: 'dxrd-pivot-sortBySummaryInfo-conditions' }
};
const field = { propertyName: 'fieldName', modelName: '@FieldName', displayName: 'Field Name', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.FieldName', defaultVal: null, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const customTotalSummaryType = {
    propertyName: 'customTotalSummaryType', modelName: '@CustomTotalSummaryType', displayName: 'Custom Total Summary Type', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldSortBySummaryInfo.CustomTotalSummaryType',
    defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: '', displayValue: '(none)', localizationId: 'ChartStringId.WizNoBackImage' }].concat(summaryTypeValues)
};
const sortBySummaryInfo = [conditions, customTotalSummaryType, fieldComponentName, field, summaryType];
const sortBySummaryConditionInfo = [
    fieldComponentName,
    { modelName: '@Value', propertyName: 'value', displayName: 'Value', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' },
    {
        modelName: '@Value_type', propertyName: 'valueType', displayName: 'Type', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: '<Null>', valuesArray: [
            { value: 'System.String', displayValue: 'String', localizationId: 'UtilsUIStringId.Parameter_Type_String' },
            { value: 'System.Byte', displayValue: 'Number (8 bit integer)', localizationId: 'DataAccessStringId.Type_SByte' },
            { value: 'System.Int16', displayValue: 'Number (16 bit integer)', localizationId: 'UtilsUIStringId.Parameter_Type_Int16' },
            { value: 'System.Int32', displayValue: 'Number (32 bit integer)', localizationId: 'UtilsUIStringId.Parameter_Type_Int32' },
            { value: 'System.Int64', displayValue: 'Number (64 bit integer)', localizationId: 'UtilsUIStringId.Parameter_Type_Int64' },
            { value: 'System.Single', displayValue: 'Number (floating-point)', localizationId: 'UtilsUIStringId.Parameter_Type_Float' },
            { value: 'System.Double', displayValue: 'Number (double-precision floating-point)', localizationId: 'UtilsUIStringId.Parameter_Type_Double' },
            { value: 'System.Decimal', displayValue: 'Number (decimal)', localizationId: 'UtilsUIStringId.Parameter_Type_Decimal' },
            { value: 'System.Boolean', displayValue: 'Boolean', localizationId: 'UtilsUIStringId.Parameter_Type_Boolean' },
            { value: 'System.Char', displayValue: 'Char', localizationId: 'DataAccessStringId.Type_Char' },
            { value: 'System.DateTime', displayValue: 'Date', localizationId: 'UtilsUIStringId.Parameter_Type_DateTime' },
            { value: '<Null>', displayValue: '<Null>' }
        ],
        localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Type'
    }
];

;// ./node_modules/devexpress-reporting/designer/controls/pivotgrid/sortBySummary.js



class SortBySummaryInfoCondition {
    constructor(model, fieldsProvider, serializer) {
        this._fieldsProvider = fieldsProvider;
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model);
    }
    getInfo() {
        const fields = this._fieldsProvider.fieldsAvailableForCondition();
        if (fields.length < 1) {
            return sortBySummaryConditionInfo;
        }
        const conditionInfoClone = sortBySummaryConditionInfo.slice(0), fieldComponentName = (0,external_DevExpress_Analytics_Internal_namespaceObject.find)(sortBySummaryConditionInfo, item => item.modelName === '@FieldComponentName'), fieldComponentNameClone = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, fieldComponentName);
        fields.forEach(fieldName => { fieldComponentNameClone.valuesArray.push({ value: fieldName, displayValue: fieldName }); });
        conditionInfoClone.splice(conditionInfoClone.indexOf(fieldComponentName), 1, fieldComponentNameClone);
        return conditionInfoClone;
    }
    static createNew(parent, serializer) {
        return new SortBySummaryInfoCondition({}, parent, serializer);
    }
}
class SortBySummaryInfo {
    _pivotGridFields() {
        return this._field.parentModel().fields;
    }
    constructor(model, field, serializer) {
        this._field = field;
        serializer = serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        serializer.deserialize(this, model, sortBySummaryInfo);
        this.conditions = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model['Conditions'] || {}, item => new SortBySummaryInfoCondition(item, this, serializer));
    }
    getInfo() {
        const fields = this._pivotGridFields();
        if (!fields) {
            return sortBySummaryInfo;
        }
        const sortBySummaryInfoClone = sortBySummaryInfo.slice(0), fieldComponentName = (0,external_DevExpress_Analytics_Internal_namespaceObject.find)(sortBySummaryInfo, item => item.modelName === '@FieldComponentName'), fieldComponentNameClone = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, fieldComponentName);
        fields().forEach(field => {
            if (field.name() !== this._field.name()) {
                fieldComponentNameClone.valuesArray.push({ value: field.name(), displayValue: field.name() });
            }
        });
        sortBySummaryInfoClone.splice(sortBySummaryInfo.indexOf(fieldComponentName), 1, fieldComponentNameClone);
        return sortBySummaryInfoClone;
    }
    fieldsAvailableForCondition() {
        const fields = this._pivotGridFields();
        if (!fields) {
            return [];
        }
        const result = [];
        fields().forEach(field => {
            const condition = (0,external_DevExpress_Analytics_Internal_namespaceObject.find)(this.conditions(), item => item.fieldComponentName() === field.name());
            if (!condition) {
                result.push(field.name());
            }
        });
        return result;
    }
    static from(model, serializer) {
        return model;
    }
    static toJSON(viewModel, serializer, refs) {
        return (serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()).serialize(viewModel, sortBySummaryInfo, refs);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/pivotgrid/pivotgridfield.js








class PivotGridFieldViewModel extends external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel {
    static createNew(parent) {
        return () => {
            return new PivotGridFieldViewModel({}, external_ko_namespaceObject.unwrap(parent), null);
        };
    }
    getFieldType() {
        const report = this.root;
        if (!report || !(report instanceof ReportViewModel))
            return;
        const dataBindingsProvider = report.dataBindingsProvider && report.dataBindingsProvider();
        let resultItem;
        if (dataBindingsProvider) {
            dataBindingsProvider.getItems(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(this.getPath(''))).done(result => {
                resultItem = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(result, x => x.name === this.fieldName());
            });
        }
        if (resultItem && resultItem.specifics)
            return resultItem.specifics;
    }
    getInfo() {
        return this.getControlFactory().controlsMap['PivotGridField'].info;
    }
    getControlFactory() {
        return controlsFactory();
    }
    constructor(model, parent, serializer) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.cutRefs)(model), parent, serializer);
        this.controlType = 'PivotGridField';
        this.areaIndexEditable = external_ko_namespaceObject.pureComputed({
            read: () => { return this.areaIndex(); },
            write: (newValue) => {
                if (newValue >= 0) {
                    const fields = parent['getFieldsFromArea'](this.area());
                    if (newValue >= fields.length)
                        return;
                    const currentValue = this.areaIndex(), delta = newValue < currentValue ? 1 : -1, min = Math.min(newValue, currentValue), max = Math.max(newValue, currentValue);
                    fields.forEach((field) => {
                        const fieldAreaIndex = field.areaIndex();
                        if (min <= fieldAreaIndex && fieldAreaIndex <= max)
                            field.areaIndex(fieldAreaIndex + delta);
                    });
                    this.areaIndex(newValue);
                }
            }
        });
        this._disposables.push(this.area.subscribe((newValue) => {
            this.areaIndex(parent['getFieldsFromArea'](this.area()).length - 1);
        }));
        this.sortBySummaryInfo = new SortBySummaryInfo(this.sortBySummaryInfo || {}, this, serializer);
    }
    getPath(propertyName) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.parentModel()['getPath'](''), this.parentModel()['dataMember']());
    }
    getDisplayName() {
        return this.caption() || this.fieldName() || this.name() || this['displayName'] && this['displayName']();
    }
}
PivotGridFieldViewModel.fieldHeight = 20;

class PivotGridFieldSurface extends XRControlSurfaceBase {
    constructor(control, context) {
        super(control, context, null);
        this.isIntersect = external_ko_namespaceObject.computed(() => { return false; });
        this.displayText = () => {
            return control.caption() || control.fieldName() || (control['displayName']() || '');
        };
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this._width(control['width']() * context.zoom());
            this._height(PivotGridFieldViewModel.fieldHeight * context.zoom());
        }));
        this.template = 'dxrd-pivotgrid-field';
        this.selectiontemplate = 'dxrd-pivotgrid-field-selection';
        this.area = control.area;
        this.areaIndex = control.areaIndex;
        this._disposables.push(this.minWidth = external_ko_namespaceObject.pureComputed(() => {
            return this.area() === 'ColumnArea' || this.area() === 'FilterArea' ? 100 : 0;
        }));
        this._disposables.push(this.positionWidthWithoutZoom = external_ko_namespaceObject.pureComputed(() => {
            return this['position'].width() / this._context.zoom();
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrPivotgrid.js






function comparerFields(firstField, secondField) {
    return firstField.areaIndex() - secondField.areaIndex();
}
class XRPivotGridViewModel extends XRControlViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.fields);
        this.resetObservableArray(this.fields);
    }
    _initCriteriaString() {
        this.prefilter.criteriaString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this.prefilter._criteriaString);
        this.prefilter.criteriaString.helper.canChoiceParameters = false;
        this.prefilter.criteriaString.helper.canChoiceProperty = false;
        this.prefilter.criteriaString.helper.getDisplayPropertyName = (path, name) => {
            const field = (0,external_DevExpress_Analytics_Internal_namespaceObject.find)(this.fields.peek(), f => f.name() === name);
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred()
                .resolve(field ? field.getDisplayName() : name)
                .promise();
        };
        this.prefilter.parent = this;
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.fields = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model && model.Fields || [], (item) => { return new PivotGridFieldViewModel(item, this, serializer); });
        this._disposables.push(this.fields.subscribe(() => {
            ['FilterArea', 'DataArea', 'ColumnArea', 'RowArea'].forEach((area) => {
                const areaFields = this.getFieldsFromArea(area);
                for (let index = 0; index < areaFields.length; index++) {
                    areaFields[index].areaIndex(index);
                }
            });
        }));
        this.addFieldToArea = (area) => {
            if (this.lockedInUserDesigner())
                return;
            const newField = new PivotGridFieldViewModel({ '@ControlType': 'PivotGridField', '@Area': area }, this, serializer);
            newField.index(this.fields().length);
            newField.areaIndex(this.getFieldsFromArea(area).length);
            this.fields.push(newField);
        };
        this._initCriteriaString();
    }
    removeChild(selectedField) {
        this.fields.splice(this.fields().indexOf(selectedField), 1);
    }
    getFieldsFromArea(area) {
        const result = [];
        result.push.apply(result, this.fields().filter(field => { return field.area() === area; }));
        return result.sort(comparerFields);
    }
    getPath(propertyName) {
        return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
    }
}
class XRPivotGridSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.contenttemplate = 'dxrd-pivotgrid-content';
        this.selectiontemplate = 'dxrd-pivotgrid-selection';
        this._disposables.push(this.filterFields = external_ko_namespaceObject.pureComputed(() => {
            return this.getAreaFields('FilterArea');
        }));
        this._disposables.push(this.dataFields = external_ko_namespaceObject.pureComputed(() => {
            return this.getAreaFields('DataArea');
        }));
        this._disposables.push(this.columnFields = external_ko_namespaceObject.pureComputed(() => {
            return this.getAreaFields('ColumnArea');
        }));
        this._disposables.push(this.rowFields = external_ko_namespaceObject.pureComputed(() => {
            return this.getAreaFields('RowArea');
        }));
        this._disposables.push(this.totalsHeight = external_ko_namespaceObject.pureComputed(() => {
            return this.columnFields().length > 0 ? this.columnFields().length * PivotGridFieldViewModel.fieldHeight : PivotGridFieldViewModel.fieldHeight;
        }));
        this._disposables.push(this.rowHeaderHeight = external_ko_namespaceObject.pureComputed(() => {
            return this.totalsHeight() + (this.dataFields().length > 0 ? PivotGridFieldViewModel.fieldHeight : 0) + 8;
        }));
        this._disposables.push(this.totalsDataFieldWidth = external_ko_namespaceObject.pureComputed(() => {
            return this.getTotalsAreaFieldWidth('DataArea', context.zoom());
        }));
        this._disposables.push(this.totalsRowFieldWidth = external_ko_namespaceObject.pureComputed(() => {
            return this.getTotalsAreaFieldWidth('RowArea', context.zoom());
        }));
    }
    _getChildrenHolderName() { return 'fields'; }
    getAreaFields(area) {
        return this.fields().filter(field => { return field.area() === area; }).sort(comparerFields);
    }
    getTotalsAreaFieldWidth(area, zoom) {
        let total = 0;
        const areaFields = this.getAreaFields(area);
        areaFields.forEach((field) => { total += field.rect().width; });
        return areaFields.length > 0 ? total / zoom : 100;
    }
    getAdornTemplate() {
        return this.isIntersect() ? 'dxrd-intersect' : '';
    }
    isThereIntersectionWithChildCollection() {
        return false;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrChart.js















class XRChartViewModel extends XRControlViewModel {
    static assignValueDataMembers(chart, str) {
        const valueDataMembers = chart.dataContainer.seriesTemplate.valueDataMembers();
        const assign = (array) => {
            array.forEach((property) => { valueDataMembers[property](str); });
        };
        if (valueDataMembers instanceof CommonValueDataMembers) {
            assign(['value']);
        }
        else if (valueDataMembers instanceof ValueWeightDataMembers) {
            assign(['value', 'weight']);
        }
        else if (valueDataMembers instanceof Value1Value2DataMembers) {
            assign(['value1', 'value2']);
        }
        else if (valueDataMembers instanceof StockValueDataMembers) {
            assign(['open', 'close', 'hight', 'low']);
        }
    }
    static setDataMembers(chart, isPivotGrid) {
        if (isPivotGrid) {
            XRChartViewModel.assignValueDataMembers(chart, 'Values');
            chart.dataContainer.seriesTemplate.argumentDataMember('Arguments');
            chart.dataContainer.seriesDataMember('Series');
        }
        else {
            XRChartViewModel.assignValueDataMembers(chart, null);
            chart.dataContainer.seriesTemplate.argumentDataMember(null);
            chart.dataContainer.seriesDataMember(null);
        }
    }
    _createChartModel() {
        const model = new ChartControlViewModel({
            chart: this.chart,
            dataSource: this.dataSource,
            parameters: this.controlParameters
        });
        model.isSeriesPropertyDisabled = (propertyName) => {
            if (!this.realDataSource() || (this.realDataSource() instanceof XRPivotGridViewModel)) {
                return propertyName === 'argumentDataMember' || propertyName === 'valueDataMembers' || propertyName === 'colorDataMember';
            }
        };
        model.isSeriesTemplatePropertyDisabled = (propertyName) => {
            if (!this.realDataSource() || (this.realDataSource() instanceof XRPivotGridViewModel && model.chart.dataContainer.pivotGridDataSourceOptions.autoBindingSettingsEnabled())) {
                return propertyName === 'argumentDataMember' || propertyName === 'valueDataMembers' || propertyName === 'valueScaleType' || propertyName === 'argumentScaleType';
            }
        };
        model.getPath = (propertyName) => {
            if (this.realDataSource() instanceof XRPivotGridViewModel || propertyName === 'dataMember')
                return this.getPath(propertyName);
            if (propertyName === 'seriesDataMember') {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.getPath('dataMember'), model.dataMember());
            }
        };
        model.isPropertyDisabled = (propertyName) => {
            return this.isPropertyDisabled(propertyName);
        };
        return model;
    }
    _updateExpressionObjectProperties(chartComponents) {
        const expressionDescriptions = this._getExpressionObjectProperties(chartComponents);
        this.expressionObj.updateExpressionObjectProperties(expressionDescriptions);
    }
    _getExpressionObjectProperties(chartComponents) {
        const expressionDescriptions = [];
        chartComponents.forEach(chartComponent => {
            if (chartComponent.component.getExpressionProperties) {
                const expressions = chartComponent.component.getExpressionProperties();
                expressionDescriptions.push(...expressions.map(expression => {
                    return {
                        controlType: this.controlType,
                        propertyName: chartComponent.path + '.' + expression,
                        events: ['BeforePrint'],
                        displayPath: chartComponent.displayPath
                    };
                }));
            }
        });
        return expressionDescriptions;
    }
    _getChildComponents() {
        return (0,external_DevExpress_Reporting_Internal_namespaceObject.getChartChildComponents)(this.chart, '');
    }
    createLocalizationProvider() {
        return new ChartLocalizationProvider(this);
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        ['seriesDataMember', 'dataMember'].forEach((val) => {
            this[val] = external_ko_namespaceObject.computed({
                read: () => {
                    return this.chart.dataContainer[val]();
                }, write: (newVal) => {
                    this.chart.dataContainer[val](newVal);
                }
            });
        });
        ['appearanceName', 'paletteName'].forEach((val) => {
            this[val] = external_ko_namespaceObject.computed({
                read: () => {
                    return this.chart[val]();
                }, write: (newVal) => {
                    this.chart[val](newVal);
                }
            });
        });
        this.controlParameters = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model['Parameters'], (item) => { return new ControlParameter(item, serializer); });
        this._disposables.push(this.controlParameters.subscribe((args) => {
            args.forEach((change) => {
                if (!change.value.parameterName()) {
                    change.value.parameterName((0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this.controlParameters(), 'controlParameter'));
                }
            });
        }, null, 'arrayChange'));
        this.pivotGridDataSourceOptions = external_ko_namespaceObject.computed(() => {
            return this.chart.dataContainer.pivotGridDataSourceOptions;
        });
        this.isPivotGridDataSource = external_ko_namespaceObject.observable(this.dataSource() instanceof XRPivotGridViewModel);
        this.isPivotGridDataSource.subscribe((newVal) => {
            XRChartViewModel.setDataMembers(this.chart, newVal);
        });
        this.realDataSource = external_ko_namespaceObject.computed(() => {
            this.isPivotGridDataSource(this.dataSource() instanceof XRPivotGridViewModel);
            const rootSource = this.root && this.root['dataSource'] && this.root['dataSource']();
            return this.dataSource() || rootSource;
        });
        this._disposables.push(this.allChartComponents = external_ko_namespaceObject.computed(() => this._getChildComponents()));
        if (this.expressionObj) {
            this._disposables.push(this.allChartComponents.subscribe((chartComponents) => this._updateExpressionObjectProperties(chartComponents)));
            this._updateExpressionObjectProperties(this.allChartComponents.peek());
        }
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const dataSources = this.root && this.root.dsHelperProvider && this.root.dsHelperProvider() && this.root.dsHelperProvider().usedDataSources().map(ds => ds.data);
            if (dataSources && !this.isPivotGridDataSource() && dataSources.indexOf(this.dataSource()) === -1)
                this.dataSource(null);
        }));
        this.chartModel = this._createChartModel();
        this.isPivotGridDataSource.subscribe((newVal) => {
            XRChartViewModel.setDataMembers(this.chart, newVal);
        });
    }
    isPropertyDisabled(name) {
        if (!this.realDataSource() || (this.realDataSource() instanceof XRPivotGridViewModel && this.pivotGridDataSourceOptions()['autoBindingSettingsEnabled']())) {
            return name === 'seriesDataMember' || name === 'dataMember';
        }
        else if (!this.realDataSource() || this.realDataSource() instanceof XRPivotGridViewModel) {
            return name === 'dataMember';
        }
        return super.isPropertyDisabled(name);
    }
    getPath(propertyName) {
        if (this.dataSource() instanceof XRPivotGridViewModel) {
            return ['PivotGrid', propertyName].join('.');
        }
        const dsHelperProvider = this.dsHelperProvider();
        const dataSourceName = dsHelperProvider && dsHelperProvider.getDataSourcePath(this.realDataSource());
        if (propertyName === 'seriesDataMember') {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(dataSourceName, this.dataMember());
        }
        else if (propertyName === 'dataMember') {
            return dataSourceName;
        }
    }
}
class XRChartSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.designTime = external_ko_namespaceObject.observable(false);
        this.isLoading = external_ko_namespaceObject.observable(false);
        this.imageSrc = external_ko_namespaceObject.observable('');
        this.template = 'dxrd-shape';
        this.contenttemplate = 'dxrd-server-rendered-control-content';
        this.selectiontemplate = 'dxrd-chart-selection';
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (!this.designTime()) {
                const _self = this;
                if (settings_HandlerUri()) {
                    _self.isLoading(true);
                    ReportRenderingService.getChartImage(this).done(function (result) {
                        _self.isLoading(false);
                        _self.imageSrc('data:image/svg+xml;base64,' + result.Image);
                    }).fail(function (jqXHR) {
                        _self.isLoading(false);
                        (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('Impossible to get chart image.');
                    });
                }
            }
        }).extend({ deferred: true }));
    }
    runDesignerButtonText() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Run Designer', 'ReportStringId.Verb_RunDesigner');
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrCheckbox.js








class XRCheckBoxViewModel extends XRControlViewModel {
    static _patchModel(model) {
        if (model['@CheckState']) {
            model['@CheckBoxState'] = model['@CheckState'];
            delete model['@CheckState'];
        }
        return model;
    }
    constructor(control, parent, serializer) {
        super(XRCheckBoxViewModel._patchModel(control), parent, serializer);
        const lock = new external_DevExpress_Reporting_Internal_namespaceObject.Locker().lock;
        this._disposables.push(this.checkBoxState.subscribe((val) => {
            lock(() => {
                this.checked(val === 'Checked' || val === 'Indeterminate');
            });
        }));
        this._disposables.push(this.checked.subscribe((val) => {
            lock(() => {
                this.checkBoxState(val ? 'Checked' : 'Unchecked');
            });
        }));
        if (this.checkBoxState() !== 'Unchecked') {
            this.checkBoxState.valueHasMutated();
        }
        else if (this.checked() !== false) {
            this.checked.valueHasMutated();
        }
        if (this.glyphOptions && external_ko_namespaceObject.isObservable(this.glyphOptions.alignment))
            this.glyphAlignment = this.glyphOptions.alignment;
    }
}
XRCheckBoxViewModel.unitProperties = [].concat(['glyphOptions'], XRReportElementViewModel.unitProperties);

class XRCheckBoxSurface extends XRTextControlSurfaceBase {
    constructor(control, context) {
        super(control, context);
        this.checkStateWidthContainer = external_ko_namespaceObject.observable();
        this.visibleText = external_ko_namespaceObject.observable(true);
        this.contenttemplate = 'dxrd-checkbox-content';
        this._disposables.push(this.checkStateWidth = external_ko_namespaceObject.computed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control.glyphOptions.size.width(), context.measureUnit(), 1);
        }));
        this._disposables.push(this.checkStateHeight = external_ko_namespaceObject.computed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control.glyphOptions.size.height(), context.measureUnit(), 1);
        }));
        this._disposables.push(this.checkStateClass = external_ko_namespaceObject.pureComputed(() => {
            return 'dxrd-checkbox-checkstate-' + control['checkBoxState']().toLowerCase();
        }));
        this._disposables.push(this.customGlyphStyleCss = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Reporting_Viewer_Editing_namespaceObject.createCustomGlyphStyleCss)(control.glyphOptions.customGlyphs[control['checkBoxState']()]());
        }));
        this._disposables.push(this.checkStateStyleIcon = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Reporting_Viewer_Editing_namespaceObject.getCheckBoxTemplate)(control.glyphOptions.style(), control['checkBoxState'](), this.customGlyphStyleCss());
        }));
        this.leftPadding = () => {
            const padding = external_ko_namespaceObject.unwrap(control['paddingObj']) || external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.from(external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.defaultVal);
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(padding._get('left'), context.measureUnit());
        };
        this._disposables.push(this.textWidth = external_ko_namespaceObject.pureComputed(() => {
            return this.contentWidthWithoutZoom() - this.checkStateWidth() - this.leftPadding();
        }));
        this._disposables.push(this.visibleText = external_ko_namespaceObject.pureComputed(() => {
            return control['glyphAlignment']() !== 'Center';
        }));
        this._disposables.push(this.checkStateWidthContainer = external_ko_namespaceObject.pureComputed(() => {
            return this.visibleText() ? this.checkStateWidth() + 'px' : '100%';
        }));
        this.isGlyphAlignmentNear = external_ko_namespaceObject.pureComputed(() => {
            return this._control.rtl() ? control['glyphAlignment']() === 'Far' : control['glyphAlignment']() === 'Near';
        });
        this._disposables.push(this.css = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.fontCss(), this.cssCalculator.backGroundCss(), this.cssCalculator.foreColorCss(), this.cssCalculator.textAlignmentCss(), this.cssCalculator.paddingsCss());
        }));
    }
}

;// external "DevExpress.Analytics.Wizard.Internal"
const external_DevExpress_Analytics_Wizard_Internal_namespaceObject = DevExpress.Analytics.Wizard.Internal;
;// ./node_modules/devexpress-reporting/designer/controls/metadata/pivotgrid/pivotgridfield.js







const caption = { displayName: 'Caption', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Caption', propertyName: 'caption', modelName: '@Caption', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const index = { displayName: 'Index', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField.Index', propertyName: 'index', modelName: '@Index', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const fieldName = { propertyName: 'fieldName', modelName: '@FieldName', displayName: 'Data Column Name', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.FieldName', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') };
const minWidth = { displayName: 'Min Width', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.MinWidth', propertyName: 'minWidth', modelName: '@MinWidth', defaultVal: 20, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const width = { displayName: 'Width', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Width', propertyName: 'width', modelName: '@Width', defaultVal: 100, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const pivotgridfield_area = {
    displayName: 'Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Area', propertyName: 'area', modelName: '@Area', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'FilterArea',
    valuesArray: [
        { value: 'RowArea', displayValue: 'Row Area', localizationId: 'DevExpress.XtraPivotGrid.PivotArea.RowArea' },
        { value: 'ColumnArea', displayValue: 'Column Area', localizationId: 'DevExpress.XtraPivotGrid.PivotArea.ColumnArea' },
        { value: 'FilterArea', displayValue: 'Filter Area', localizationId: 'DevExpress.XtraPivotGrid.PivotArea.FilterArea' },
        { value: 'DataArea', displayValue: 'Data Area', localizationId: 'DevExpress.XtraPivotGrid.PivotArea.DataArea' },
    ]
};
const allowedAreas = {
    propertyName: 'allowedAreas', modelName: '@AllowedAreas', displayName: 'Allowed Areas', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.AllowedAreas', defaultVal: 'All', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'All', displayValue: 'All', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAllowedAreas.All' },
        { value: 'RowArea', displayValue: 'Row Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAllowedAreas.RowArea' },
        { value: 'ColumnArea', displayValue: 'Column Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAllowedAreas.ColumnArea' },
        { value: 'FilterArea', displayValue: 'Filter Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAllowedAreas.FilterArea' },
        { value: 'DataArea', displayValue: 'Data Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAllowedAreas.DataArea' }
    ]
};
const areaIndex = { propertyName: 'areaIndex', modelName: '@AreaIndex', defaultVal: -1 };
const areaIndexEditable = { propertyName: 'areaIndexEditable', displayName: 'Area Index', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.AreaIndex', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const unboundType = {
    propertyName: 'unboundType', modelName: '@UnboundType', displayName: 'Unbound Type', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundType', defaultVal: 'Bound', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Bound', displayValue: 'Bound', localizationId: 'DevExpress.Data.UnboundColumnType.Bound' },
        { value: 'Integer', displayValue: 'Integer', localizationId: 'DevExpress.Data.UnboundColumnType.Integer' },
        { value: 'Decimal', displayValue: 'Decimal', localizationId: 'DevExpress.Data.UnboundColumnType.Decimal' },
        { value: 'DateTime', displayValue: 'DateTime', localizationId: 'DevExpress.XtraTreeList.Data.UnboundColumnType.DateTime' },
        { value: 'String', displayValue: 'String', localizationId: 'DevExpress.Data.UnboundColumnType.String' },
        { value: 'Boolean', displayValue: 'Boolean', localizationId: 'DevExpress.Data.UnboundColumnType.Boolean' },
        { value: 'Object', displayValue: 'Object', localizationId: 'DevExpress.Data.UnboundColumnType.Object' }
    ]
};
const unboundFieldName = { propertyName: 'unboundFieldName', modelName: '@UnboundFieldName', displayName: 'Unbound Field Name', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundFieldName', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const unboundExpression = { propertyName: 'unboundExpression', modelName: '@UnboundExpression', displayName: 'Unbound Expression', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundExpression', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const topValueType = {
    propertyName: 'topValueType', modelName: '@TopValueType', displayName: 'Top Value Type', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueType', defaultVal: 'Absolute', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Absolute', displayValue: 'Absolute', localizationId: 'DevExpress.XtraPivotGrid.PivotTopValueType.Absolute' },
        { value: 'Percent', displayValue: 'Percent', localizationId: 'DevExpress.XtraPivotGrid.PivotTopValueType.Percent' },
        { value: 'Sum', displayValue: 'Sum', localizationId: 'DevExpress.XtraPivotGrid.PivotTopValueType.Sum' }
    ]
};
const topValueShowOthers = { propertyName: 'topValueShowOthers', modelName: '@TopValueShowOthers', displayName: 'Top Value Show Others', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueShowOthers', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const topValueCount = { propertyName: 'topValueCount', modelName: '@TopValueCount', displayName: 'Top Value Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.TopValueCount', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const summaryDisplayType = {
    propertyName: 'summaryDisplayType', modelName: '@SummaryDisplayType', displayName: 'Summary Display Type', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.SummaryDisplayType', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.Default' },
        { value: 'AbsoluteVariation', displayValue: 'Absolute Variation', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.AbsoluteVariation' },
        { value: 'PercentVariation', displayValue: 'Percent Variation', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentVariation' },
        { value: 'PercentOfColumn', displayValue: 'Percent Of Column', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfColumn' },
        { value: 'PercentOfRow', displayValue: 'Percent Of Row', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfRow' },
        { value: 'PercentOfColumnGrandTotal', displayValue: 'Percent Of Column Grand Total', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfColumnGrandTotal' },
        { value: 'PercentOfRowGrandTotal', displayValue: 'Percent Of Row Grand Total', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfRowGrandTotal' },
        { value: 'PercentOfGrandTotal', displayValue: 'Percent Of Grand Total', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.PercentOfGrandTotal' },
        { value: 'RankInColumnSmallestToLargest', displayValue: 'Rank In Column Smallest To Largest', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInColumnSmallestToLargest' },
        { value: 'RankInRowSmallestToLargest', displayValue: 'Rank In Row Smallest To Largest', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInRowSmallestToLargest' },
        { value: 'RankInColumnLargestToSmallest', displayValue: 'Rank In Column Largest To Smallest', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInColumnLargestToSmallest' },
        { value: 'RankInRowLargestToSmallest', displayValue: 'Rank In Row Largest To Smallest', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.RankInRowLargestToSmallest' },
        { value: 'Index', displayValue: 'Index', localizationId: 'DevExpress.Data.PivotGrid.PivotSummaryDisplayType.Index' }
    ]
};
const pivotgridfield_sortOrder = {
    propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'Sort Order', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.SortOrder', defaultVal: 'Ascending', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Ascending', displayValue: 'Ascending', localizationId: 'DevExpress.XtraPivotGrid.PivotSortOrder.Ascending' }, { value: 'Descending', displayValue: 'Descending', localizationId: 'DevExpress.XtraPivotGrid.PivotSortOrder.Descending' }
    ]
};
const sortMode = {
    propertyName: 'sortMode', modelName: '@SortMode', displayName: 'Sort Mode', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.SortMode', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.Default' },
        { value: 'Value', displayValue: 'Value', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.Value' },
        { value: 'DisplayText', displayValue: 'DisplayText', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.DisplayText' },
        { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.Custom' },
        { value: 'Key', displayValue: 'Key', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.Key' },
        { value: 'ID', displayValue: 'ID', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.ID' },
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPivotGrid.PivotSortMode.None' }
    ]
};
const showNewValues = { propertyName: 'showNewValues', modelName: '@ShowNewValues', displayName: 'Show New Values', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.ShowNewValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const runningTotal = { propertyName: 'runningTotal', modelName: '@RunningTotal', displayName: 'Running Total', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.RunningTotal', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const rowValueLineCount = { propertyName: 'rowValueLineCount', modelName: '@RowValueLineCount', displayName: 'Row Value Line Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridField.RowValueLineCount', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const groupIntervalNumericRange = { propertyName: 'groupIntervalNumericRange', modelName: '@GroupIntervalNumericRange', displayName: 'Group Interval Numeric Range', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.GroupIntervalNumericRange', defaultVal: 10, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const groupInterval = {
    propertyName: 'groupInterval', modelName: '@GroupInterval', displayName: 'Group Interval', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridField.GroupInterval', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Default' },
        { value: 'Date', displayValue: 'Date', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Date' },
        { value: 'DateDay', displayValue: 'DateDay', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDay' },
        { value: 'DateDayOfWeek', displayValue: 'Day Of Week', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDayOfWeek' },
        { value: 'DateDayOfYear', displayValue: 'Day Of Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateDayOfYear' },
        { value: 'DateWeekOfMonth', displayValue: 'Week Of Month', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateWeekOfMonth' },
        { value: 'DateWeekOfYear', displayValue: 'Week Of Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateWeekOfYear' },
        { value: 'DateMonth', displayValue: 'Month', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonth' },
        { value: 'DateQuarter', displayValue: 'Quarter', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarter' },
        { value: 'DateYear', displayValue: 'Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateYear' },
        { value: 'YearAge', displayValue: 'Year Age', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.YearAge' },
        { value: 'MonthAge', displayValue: 'Month Age', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.MonthAge' },
        { value: 'WeekAge', displayValue: 'Week Age', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.WeekAge' },
        { value: 'DayAge', displayValue: 'Day Age', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DayAge' },
        { value: 'Alphabetical', displayValue: 'Alphabetical', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Alphabetical' },
        { value: 'Numeric', displayValue: 'Numeric', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Numeric' },
        { value: 'Hour', displayValue: 'Hour', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Hour' },
        { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Custom' },
        { value: 'Minute', displayValue: 'Minute', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Minute' },
        { value: 'Second', displayValue: 'Second', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.Second' },
        { value: 'DateMonthYear', displayValue: 'Month-Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateMonthYear' },
        { value: 'DateQuarterYear', displayValue: 'Quarter-Year', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateQuarterYear' },
        { value: 'DateHour', displayValue: 'Date-Hour', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateHour' },
        { value: 'DateHourMinute', displayValue: 'Date-Hour-Minute', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateHourMinute' },
        { value: 'DateHourMinuteSecond', displayValue: 'Date-Hour-Minute-Second', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupInterval.DateHourMinuteSecond' }
    ]
};
const grandTotalText = { propertyName: 'grandTotalText', modelName: '@GrandTotalText', displayName: 'Grand Total Text', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.GrandTotalText', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const expandedInFieldsGroup = { propertyName: 'expandedInFieldsGroup', modelName: '@ExpandedInFieldsGroup', displayName: 'Expanded In Fields Group', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.ExpandedInFieldsGroup', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const emptyValueText = { propertyName: 'emptyValueText', modelName: '@EmptyValueText', displayName: 'Empty Value Text', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.EmptyValueText', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const emptyCellText = { propertyName: 'emptyCellText', modelName: '@EmptyCellText', displayName: 'Empty Cell Text', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.EmptyCellText', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const displayFolder = { propertyName: 'displayFolder', modelName: '@DisplayFolder', displayName: 'Display Folder', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.DisplayFolder', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const columnValueLineCount = { propertyName: 'columnValueLineCount', modelName: '@ColumnValueLineCount', displayName: 'Column Value Line Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridField.ColumnValueLineCount', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const totalsVisibility = {
    propertyName: 'totalsVisibility', modelName: '@TotalsVisibility', displayName: 'Totals Visibility', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalsVisibility', defaultVal: 'AutomaticTotals', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'AutomaticTotals', displayValue: 'Automatic Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotTotalsVisibility.AutomaticTotals' },
        { value: 'CustomTotals', displayValue: 'Custom Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotTotalsVisibility.CustomTotals' },
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPivotGrid.PivotTotalsVisibility.None' }
    ]
};
const useNativeFormat = { propertyName: 'useNativeFormat', modelName: '@UseNativeFormat', displayName: 'Export As Numbers To Excel', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.UseNativeFormat', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray };
const KPIGraphic = {
    propertyName: 'KPIGraphic', modelName: '@KPIGraphic', displayName: 'KPI Graphic', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.KPIGraphic', defaultVal: 'ServerDefined', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.None' },
        { value: 'ServerDefined', displayValue: 'Server Defined', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.ServerDefined' },
        { value: 'Shapes', displayValue: 'Shapes', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Shapes' },
        { value: 'TrafficLights', displayValue: 'Traffic Lights', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.TrafficLights' },
        { value: 'RoadSigns', displayValue: 'Road Signs', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.RoadSigns' },
        { value: 'Gauge', displayValue: 'Gauge', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Gauge' },
        { value: 'ReversedGauge', displayValue: 'Reversed Gauge', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedGauge' },
        { value: 'Thermometer', displayValue: 'Thermometer', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Thermometer' },
        { value: 'ReversedThermometer', displayValue: 'Reversed Thermometer', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedThermometer' },
        { value: 'Cylinder', displayValue: 'Cylinder', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Cylinder' },
        { value: 'ReversedCylinder', displayValue: 'Reversed Cylinder', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedCylinder' },
        { value: 'Faces', displayValue: 'Faces', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.Faces' },
        { value: 'VarianceArrow', displayValue: 'Variance Arrow', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.VarianceArrow' },
        { value: 'StandardArrow', displayValue: 'Standard Arrow', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.StandardArrow' },
        { value: 'StatusArrow', displayValue: 'Status Arrow', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.StatusArrow' },
        { value: 'ReversedStatusArrow', displayValue: 'Reversed Status Arrow', localizationId: 'DevExpress.XtraPivotGrid.PivotKPIGraphic.ReversedStatusArrow' }
    ]
};
const formatType = {
    propertyName: 'formatType', modelName: '@FormatType', displayName: 'Format Type', localizationId: 'DevExpress.Utils.FormatInfo.FormatType', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.Utils.FormatType.None' },
        { value: 'Numeric', displayValue: 'Numeric', localizationId: 'DevExpress.Utils.FormatType.Numeric' },
        { value: 'DateTime', displayValue: 'DateTime', localizationId: 'DevExpress.Utils.FormatType.DateTime' },
        { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.Utils.FormatType.Custom' }
    ]
}, formatString = { propertyName: 'formatString', modelName: '@FormatString', displayName: 'Format String', localizationId: 'DevExpress.Utils.FormatInfo.FormatString', defaultVal: '', editor: designerEditorTemplates.getEditor('formatEditor') };
const formatInfo = [formatType, formatString];
const cellFormat = { propertyName: 'cellFormat', modelName: 'CellFormat', displayName: 'Cell Format', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.CellFormat', info: formatInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const totalCellFormat = { propertyName: 'totalCellFormat', modelName: 'TotalCellFormat', displayName: 'Total Cell Format', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalCellFormat', info: formatInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const grandTotalCellFormat = { propertyName: 'grandTotalCellFormat', modelName: 'GrandTotalCellFormat', displayName: 'Grand Total Cell Format', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.GrandTotalCellFormat', info: formatInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const valueFormat = { propertyName: 'valueFormat', modelName: 'ValueFormat', displayName: 'Value Format', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.ValueFormat', info: formatInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const totalValueFormat = { propertyName: 'totalValueFormat', modelName: 'TotalValueFormat', displayName: 'Total Value Format', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.TotalValueFormat', info: formatInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const textHorizontalAlignment = {
    propertyName: 'textHorizontalAlignment', modelName: '@HAlignment', displayName: 'Text Horizontal Alignment', localizationId: 'DevExpress.PivotGrid.Printing.PrintTextOptions.HAlignment', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.Utils.HorzAlignment.Default' },
        { value: 'Near', displayValue: 'Near', localizationId: 'DevExpress.Utils.HorzAlignment.Near' },
        { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.Utils.HorzAlignment.Center' },
        { value: 'Far', displayValue: 'Far', localizationId: 'DevExpress.Utils.HorzAlignment.Far' }
    ]
}, textVerticalAlignment = {
    propertyName: 'textVerticalAlignment', modelName: '@VAlignment', displayName: 'Text Vertical Alignment', localizationId: 'DevExpress.PivotGrid.Printing.PrintTextOptions.VAlignment', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.Utils.VertAlignment.Default' },
        { value: 'Top', displayValue: 'Top', localizationId: 'DevExpress.Utils.VertAlignment.Top' },
        { value: 'Center', displayValue: 'Center', localizationId: 'DevExpress.Utils.VertAlignment.Center' },
        { value: 'Bottom', displayValue: 'Bottom', localizationId: 'DevExpress.Utils.VertAlignment.Bottom' }
    ]
}, trimming = {
    propertyName: 'trimming', modelName: '@Trimming', displayName: 'Trimming', localizationId: 'DevExpress.PivotGrid.Printing.PrintTextOptions.Trimming', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: textTrimmingValues
}, appearanceWordWrap = {
    propertyName: 'wordWrap', modelName: '@WordWrap', displayName: 'Word Wrap', localizationId: 'DevExpress.PivotGrid.Printing.PrintTextOptions.WordWrap', defaultVal: 'NoWrap', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'NoWrap', displayValue: 'No Wrap', localizationId: 'DevExpress.Utils.WordWrap.NoWrap' },
        { value: 'Wrap', displayValue: 'Wrap', localizationId: 'DevExpress.Utils.WordWrap.Wrap' }
    ]
};
const textOptionsInfo = [textHorizontalAlignment, textVerticalAlignment, trimming, appearanceWordWrap], textOptions = { propertyName: 'textOptions', modelName: 'TextOptions', displayName: 'Text Options', localizationId: 'DevExpress.XtraReports.UI.XRAppearanceObject.TextOptions', info: textOptionsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const appearanceInfo = [metadata_backColor, metadata_borderColor, foreColor, metadata_font, textOptions];
const cellAppearance = { propertyName: 'cellAppearance', modelName: 'Cell', displayName: 'Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Cell', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, totalCellAppearance = { propertyName: 'totalCellAppearance', modelName: 'TotalCell', displayName: 'Total Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.TotalCell', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, customTotalCellAppearance = { propertyName: 'customTotalCellAppearance', modelName: 'CustomTotalCell', displayName: 'Custom Total Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.CustomTotalCell', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, grandTotalCellAppearance = { propertyName: 'grandTotalCellAppearance', modelName: 'GrandTotalCell', displayName: 'Grand Total Cell', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.GrandTotalCell', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, fieldValueAppearance = { propertyName: 'fieldValueAppearance', modelName: 'FieldValue', displayName: 'Field Value', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValue', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, fieldValueTotalAppearance = { propertyName: 'fieldValueTotalAppearance', modelName: 'FieldValueTotal', displayName: 'Field Value Total', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldValueTotal', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, fieldValueGrandTotalAppearance = { propertyName: 'fieldValueGrandTotalAppearance', modelName: 'FieldValueGrandTotal', displayName: 'Field Value Grand Total', localizationId: 'DevExpress.XtraPivotGrid.PivotGridAppearancesBase.FieldValueGrandTotal', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') }, fieldHeaderAppearance = { propertyName: 'fieldHeaderAppearance', modelName: 'FieldHeader', displayName: 'Field Header', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.FieldHeader', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const appearancesInfo = [cellAppearance, totalCellAppearance, customTotalCellAppearance, grandTotalCellAppearance, fieldHeaderAppearance, fieldValueAppearance, fieldValueGrandTotalAppearance, fieldValueTotalAppearance];
const appearances = { propertyName: 'appearances', modelName: 'Appearance', displayName: 'Appearance', localizationId: 'DevExpress.XtraPivotGrid.PivotGridField.Appearance', info: appearancesInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const allowRunTimeSummaryChange = { propertyName: 'allowRunTimeSummaryChange', modelName: '@AllowRunTimeSummaryChange', displayName: 'Allow Run Time Summary Change', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.AllowRunTimeSummaryChange', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, groupFilterMode = { propertyName: 'groupFilterMode', modelName: '@GroupFilterMode', displayName: 'Group Filter Mode', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.GroupFilterMode', defaultVal: null, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'List', displayValue: 'List', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupFilterMode.List' }, { value: 'Tree', displayValue: 'Tree', localizationId: 'DevExpress.XtraPivotGrid.PivotGroupFilterMode.Tree' }] }, hideEmptyVariationItems = { propertyName: 'hideEmptyVariationItems', modelName: '@HideEmptyVariationItems', displayName: 'Hide Empty Variation Items', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.HideEmptyVariationItems', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showCustomTotals = { propertyName: 'showCustomTotals', modelName: '@ShowCustomTotals', displayName: 'Show Custom Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowCustomTotals', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showGrandTotal = { propertyName: 'showGrandTotal', modelName: '@ShowGrandTotal', displayName: 'Show Grand Total', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowGrandTotal', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showSummaryTypeName = { propertyName: 'showSummaryTypeName', modelName: '@ShowSummaryTypeName', displayName: 'Show Summary Type Name', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowSummaryTypeName', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showTotals = { propertyName: 'showTotals', modelName: '@ShowTotals', displayName: 'Show Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowTotals', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showValues = { propertyName: 'showValues', modelName: '@ShowValues', displayName: 'Show Values', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldOptions.ShowValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const unboundExpressionMode = {
    propertyName: 'unboundExpressionMode', modelName: '@UnboundExpressionMode', displayName: 'Unbound Expression Mode', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.UnboundExpressionMode', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'UseSummaryValues', displayValue: 'Use Summary Values', localizationId: 'DevExpress.XtraPivotGrid.UnboundExpressionMode.UseSummaryValues' },
        { value: 'DataSource', displayValue: 'Data Source', localizationId: 'DevExpress.XtraPivotGrid.UnboundExpressionMode.DataSource' },
        { value: 'UseAggregateFunctions', displayValue: 'Use Aggregate Functions', localizationId: 'DevExpress.XtraPivotGrid.UnboundExpressionMode.UseAggregateFunctions' },
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPivotGrid.UnboundExpressionMode.Default' }
    ]
};
const optionsInfo = [allowRunTimeSummaryChange, groupFilterMode,
    hideEmptyVariationItems, showCustomTotals, showGrandTotal, showSummaryTypeName, showTotals, showValues];
const options = { propertyName: 'options', modelName: 'Options', displayName: 'Options', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Options', info: optionsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const sortBySummary = { propertyName: 'sortBySummaryInfo', modelName: 'SortBySummaryInfo', displayName: 'Sort By Summary Info', localizationId: 'DevExpress.XtraPivotGrid.PivotGridFieldBase.SortBySummaryInfo', from: SortBySummaryInfo.from, toJsonObject: SortBySummaryInfo.toJSON, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const pivotGridFieldSerializationsInfo = [
    appearances,
    allowedAreas, pivotgridfield_area, areaIndex, areaIndexEditable,
    caption, cellFormat, columnValueLineCount,
    displayFolder, emptyCellText, emptyValueText, expandedInFieldsGroup,
    fieldName, summaryType, topValueCount, topValueShowOthers,
    grandTotalCellFormat, grandTotalText, groupInterval, groupIntervalNumericRange,
    index, KPIGraphic, minWidth, width, rowValueLineCount, runningTotal,
    showNewValues, sortMode, pivotgridfield_sortOrder, summaryDisplayType,
    topValueType, totalCellFormat, totalValueFormat, totalsVisibility,
    unboundExpression, unboundExpressionMode, unboundFieldName, unboundType, useNativeFormat,
    valueFormat, options, sortBySummary
].concat(baseControlProperties);
const popularPropertiesPivotGridField = ['area', 'areaIndexEditable', 'fieldName', 'caption', 'groupInterval', 'summaryType', 'summaryDisplayType', 'unboundType', 'unboundExpression'];
const pivotGridFieldsSerializable = { displayName: 'Fields', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Fields', propertyName: 'fields', modelName: 'Fields', array: true, template: '#dxrd-collectionItemWithAccordion' };

;// ./node_modules/devexpress-reporting/designer/controls/metadata/crosstab/fields.js






const crossTabFieldName = { propertyName: 'fieldName', modelName: '@FieldName', displayName: 'Field Name', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabFieldBase.FieldName', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field'), defaultVal: '' };
const valuesGroupInterval = valuesArrayAsEnumWithLocalizationId(groupInterval, 'DevExpress.XtraReports.UI.CrossTab.GroupInterval.').filter(item => item.value !== 'Custom');
const crossTabGroupInterval = { propertyName: 'crossTabGroupInterval', modelName: '@GroupInterval', displayName: 'Group Interval', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabGroupFieldBase.GroupInterval', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Default', valuesArray: valuesGroupInterval };
const crossTabGroupIntervalNumericRange = { propertyName: 'crossTabGroupIntervalNumericRange', modelName: '@GroupIntervalNumericRange', displayName: 'Group Interval Numeric Range', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabGroupFieldBase.GroupIntervalNumericRange', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 10 };
let valuesArraySummaryType = valuesArrayAsEnumWithLocalizationId(summaryType, 'DevExpress.XtraReports.UI.CrossTab.SummaryType.');
const summaryExtended = [
    { value: 'CountDistinct', displayValue: 'Count Distinct', localizationId: 'DevExpress.XtraReports.UI.CrossTab.SummaryType.CountDistinct' },
    { value: 'Median', displayValue: 'Median', localizationId: 'DevExpress.XtraReports.UI.CrossTab.SummaryType.Median' },
    { value: 'Mode', displayValue: 'Mode', localizationId: 'DevExpress.XtraReports.UI.CrossTab.SummaryType.Mode' }
];
valuesArraySummaryType.push(...summaryExtended);
valuesArraySummaryType = valuesArraySummaryType.filter(item => item.value !== 'Custom');
const crossTabSummaryType = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, summaryType, { localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabDataField.SummaryType', valuesArray: valuesArraySummaryType });
const crossTabSortBySummaryInfo = { propertyName: 'crossTabSortBySummaryInfo', modelName: 'SortBySummaryInfo', displayName: 'Sort By Summary Info', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabGroupFieldBase.SortBySummaryInfo', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: [(0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, crossTabFieldName, { localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabFieldSortBySummaryInfo.FieldName' }), crossTabSummaryType] };
const summaryDisplayTypeValuesArray = valuesArrayAsEnumWithLocalizationId(summaryDisplayType, 'DevExpress.XtraReports.UI.CrossTab.SummaryDisplayType.');
const crossTabSummaryDisplayType = { propertyName: 'summaryDisplayType', modelName: '@SummaryDisplayType', displayName: 'Summary Display Type', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabDataField.SummaryDisplayType', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Default', valuesArray: summaryDisplayTypeValuesArray };
const crossTabFieldExpression = { propertyName: 'fieldExpression', modelName: '@FieldExpression', displayName: 'Field Expression', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabDataField.FieldExpression', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text') };
const crossTabDataFieldInfoBase = [crossTabSummaryType, crossTabSummaryDisplayType, crossTabFieldExpression];
const crossTabDataFieldInfo = crossTabDataFieldInfoBase.concat([crossTabFieldName]);
const sortOrderdefaultValAscending = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, sortOrder, { defaultVal: 'Ascending' });
const crossTabGroupFieldInfoBase = [sortOrderdefaultValAscending, crossTabGroupInterval, crossTabGroupIntervalNumericRange, crossTabSortBySummaryInfo];
const crossTabGroupFieldInfo = crossTabGroupFieldInfoBase.concat([crossTabFieldName]);
const rowFields = { propertyName: 'rowFields', modelName: 'RowFields', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.RowFields', displayName: 'Row Fields', array: true, editor: { custom: 'dx-commonCollection' }, template: '#dxrd-collectionItemWithAccordion', alwaysSerialize: true };
const columnFields = { propertyName: 'columnFields', modelName: 'ColumnFields', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.ColumnFields', displayName: 'Column Fields', array: true, editor: { custom: 'dx-commonCollection' }, template: '#dxrd-collectionItemWithAccordion', alwaysSerialize: true };
const dataFields = { propertyName: 'dataFields', modelName: 'DataFields', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.DataFields', displayName: 'Data Fields', array: true, editor: { custom: 'dx-commonCollection' }, template: '#dxrd-collectionItemWithAccordion', alwaysSerialize: true };

;// ./node_modules/devexpress-reporting/designer/controls/metadata/crosstab/xrCrossTabCell.js







const autoSizeMode = valuesArrayAsEnumWithLocalizationId(textFitMode, 'DevExpress.XtraReports.UI.AutoSizeMode.');
const rowVisible = { propertyName: 'rowVisible', modelName: '@RowVisible', displayName: 'Row Visible', localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.RowVisible', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const columnVisible = { propertyName: 'columnVisible', modelName: '@ColumnVisible', displayName: 'Column Visible', localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.ColumnVisible', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const rowAutoHeightMode = { propertyName: 'rowAutoHeightMode', modelName: '@RowAutoHeightMode', displayName: 'Row Auto Height Mode', localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.RowAutoHeightMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'None', valuesArray: autoSizeMode };
const columnAutoWidthMode = { propertyName: 'columnAutoWidthMode', modelName: '@ColumnAutoWidthMode', displayName: 'Column Auto Width Mode', localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.ColumnAutoWidthMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'None', valuesArray: autoSizeMode };
const crossTabCellOptionsInfo = [
    crossTabFieldName,
    metadata_angle,
    columnAutoWidthMode,
    rowAutoHeightMode,
    columnVisible,
    rowVisible,
    keepTogether
].concat(crossTabDataFieldInfoBase, crossTabGroupFieldInfoBase);
const columnIndex = { propertyName: '_columnIndex', modelName: '@ColumnIndex', displayName: 'Column Index', localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.ColumnIndex', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, alwaysSerialize: true, disabled: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const rowIndex = { propertyName: '_rowIndex', modelName: '@RowIndex', displayName: 'Row Index', localizationId: 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell.RowIndex', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, alwaysSerialize: true, disabled: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const cellserializtionInfoBase = [
    columnIndex,
    rowIndex,
    { propertyName: '_columnSpan', modelName: '@ColumnSpan', defaultVal: 1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel },
    { propertyName: '_rowSpan', modelName: '@RowSpan', defaultVal: 1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel }
];
const cellserializtionInfo = cellserializtionInfoBase.concat(baseControlProperties, sizeLocation, navigationGroup, crossTabCellOptionsInfo, commonControlProperties, allowMarkupText, dataBindings(['Text', 'Tag']), nullValueText, metadata_text, textFormatString, metadata_textAlignment, metadata_font, foreColor);
const popularPropertiesCrossTabCell = [
    'fieldName', 'sortOrder', 'crossTabGroupInterval', 'text', 'textFormatString',
    'columnAutoWidthMode', 'rowAutoHeightMode', 'columnVisible', 'rowVisible'
];

;// ./node_modules/devexpress-reporting/designer/controls/crossTab/enums.js
var CornerHeaderDisplayMode;
(function (CornerHeaderDisplayMode) {
    CornerHeaderDisplayMode[CornerHeaderDisplayMode["None"] = 0] = "None";
    CornerHeaderDisplayMode[CornerHeaderDisplayMode["RowFieldNames"] = 1] = "RowFieldNames";
    CornerHeaderDisplayMode[CornerHeaderDisplayMode["ColumnFieldNames"] = 2] = "ColumnFieldNames";
})(CornerHeaderDisplayMode || (CornerHeaderDisplayMode = {}));
var CellKind;
(function (CellKind) {
    CellKind[CellKind["None"] = 0] = "None";
    CellKind[CellKind["Corner"] = 1] = "Corner";
    CellKind[CellKind["RowHeader"] = 2] = "RowHeader";
    CellKind[CellKind["RowTotalHeader"] = 3] = "RowTotalHeader";
    CellKind[CellKind["RowTotal"] = 4] = "RowTotal";
    CellKind[CellKind["ColumnHeader"] = 5] = "ColumnHeader";
    CellKind[CellKind["ColumnTotalHeader"] = 6] = "ColumnTotalHeader";
    CellKind[CellKind["ColumnTotal"] = 7] = "ColumnTotal";
    CellKind[CellKind["Data"] = 8] = "Data";
    CellKind[CellKind["DataHeader"] = 9] = "DataHeader";
    CellKind[CellKind["GrandTotal"] = 10] = "GrandTotal";
    CellKind[CellKind["EmptyHeader"] = 11] = "EmptyHeader";
    CellKind[CellKind["Empty"] = 12] = "Empty";
})(CellKind || (CellKind = {}));
var TotalHeaderPosition;
(function (TotalHeaderPosition) {
    TotalHeaderPosition[TotalHeaderPosition["Inner"] = 0] = "Inner";
    TotalHeaderPosition[TotalHeaderPosition["Outer"] = 1] = "Outer";
})(TotalHeaderPosition || (TotalHeaderPosition = {}));
var TotalsPosition;
(function (TotalsPosition) {
    TotalsPosition[TotalsPosition["AfterData"] = 0] = "AfterData";
    TotalsPosition[TotalsPosition["BeforeData"] = 1] = "BeforeData";
})(TotalsPosition || (TotalsPosition = {}));
var DataFieldLayout;
(function (DataFieldLayout) {
    DataFieldLayout[DataFieldLayout["InRow"] = 0] = "InRow";
    DataFieldLayout[DataFieldLayout["InColumn"] = 1] = "InColumn";
})(DataFieldLayout || (DataFieldLayout = {}));

;// ./node_modules/devexpress-reporting/designer/controls/crossTab/cellCreator.js





class CrossTabCellInfo extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()) {
        super(model, serializer, cellserializtionInfoBase);
        this.kind = external_ko_namespaceObject.observable(CellKind.None);
    }
}
class CellCreator extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    get rowFieldCount() { return this.crossTab.rowFields().length; }
    get columnFieldCount() { return this.crossTab.columnFields().length; }
    get dataFieldCount() { return this.crossTab.dataFields().length; }
    get rowDataCount() { return 1; }
    get columnDataCount() { return 1; }
    constructor(crossTab) {
        super();
        this.crossTab = crossTab;
    }
    nextRowIndex(cell) {
        return cell._rowIndex() + cell._rowSpan();
    }
    lastRowIndex(cell) {
        return this.nextRowIndex(cell) - 1;
    }
    nextColumnIndex(cell) {
        return cell._columnIndex() + cell._columnSpan();
    }
    lastColumnIndex(cell) {
        return this.nextColumnIndex(cell) - 1;
    }
    setCellKind(cell, kind) {
        cell.kind(kind);
    }
    setLevel(cell, dataLevel, columnLevel, rowLevel) {
        if (dataLevel >= 0)
            this.setDataLevel(cell, dataLevel);
        if (columnLevel >= 0)
            this.setColumnLevel(cell, columnLevel);
        if (rowLevel >= 0)
            this.setRowLevel(cell, rowLevel);
    }
    setDataLevel(cell, level) {
        cell.dataLevel = level;
    }
    setColumnLevel(cell, level) {
        cell.columnLevel = level;
    }
    setRowLevel(cell, level) {
        cell.rowLevel = level;
    }
    indexToLevel(index, count) {
        return count - 1 - index;
    }
    setLayout(cell, columnIndex, rowIndex, columnSpan, rowSpan) {
        cell._columnIndex(columnIndex);
        cell._rowIndex(rowIndex);
        cell._columnSpan(columnSpan);
        cell._rowSpan(rowSpan);
    }
    static createInstance(crossTab) {
        return crossTab.dataFields().length <= 1 ? new CellCreator(crossTab)
            : crossTab.layoutOptions.dataFieldLayout() === DataFieldLayout[DataFieldLayout.InRow] ? new HorizontalCreator(crossTab)
                : new VerticalCreator(crossTab);
    }
    create() {
        const cells = [];
        const corners = this.createCorners(Math.max(1, this.columnFieldCount), Math.max(1, this.rowFieldCount));
        cells.push(...corners);
        this.lastCorner = corners[corners.length - 1];
        const dataHeaders = this.createDataHeaders();
        cells.push(...dataHeaders);
        const dataCells = this.createData();
        cells.push(...dataCells);
        const columnHeaders = this.createColumnHeaders(this.nextColumnIndex(this.lastCorner), this.columnFieldCount * this.columnDataCount, this.columnDataCount);
        cells.push(...columnHeaders);
        const rowHeaders = this.createRowHeaders(this.nextRowIndex(this.lastCorner), this.rowFieldCount * this.rowDataCount, this.rowDataCount);
        cells.push(...rowHeaders);
        const rowTotalHeaders = this.createRowTotalHeaders(rowHeaders[rowHeaders.length - 1]._columnIndex(), 1, this.nextRowIndex(rowHeaders[rowHeaders.length - 1]), this.rowDataCount);
        cells.push(...rowTotalHeaders);
        cells.push(...this.createRowTotals(dataCells[0]._columnIndex(), this.nextRowIndex(dataCells[0]), this.rowDataCount));
        const columnTotalHeaders = this.createColumnTotalHeaders(this.nextColumnIndex(columnHeaders[columnHeaders.length - 1]), columnHeaders[columnHeaders.length - 1]._rowIndex(), 1, this.columnDataCount);
        cells.push(...columnTotalHeaders);
        cells.push(...this.createColumnTotals(this.nextColumnIndex(dataCells[0]), dataCells[0]._rowIndex(), this.columnDataCount));
        cells.push(...this.createGrandTotals(dataCells, this.nextRowIndex(dataCells[dataCells.length - 1]), this.nextColumnIndex(dataCells[dataCells.length - 1]), dataCells.length, 1));
        if (this.crossTab.layoutOptions.hierarchicalRowLayout() && this.rowFieldCount > 1) {
            cells.push(...this.createEmptyHeaders(this.columnFieldCount + 1));
            cells.push(...this.createEmptyCells(1));
        }
        return cells;
    }
    creator(cellKind) {
        const cell = new CrossTabCellInfo({});
        this.setCellKind(cell, cellKind);
        return cell;
    }
    createCorners(columnCount, rowCount) {
        const mode = this.crossTab.layoutOptions.cornerHeaderDisplayMode();
        const corners = [];
        let cell;
        if (CornerHeaderDisplayMode[mode] === CornerHeaderDisplayMode.RowFieldNames) {
            for (let i = 0; i < rowCount; i++) {
                cell = this.creator(CellKind.Corner);
                this.setLayout(cell, i, 0, 1, columnCount);
                this.setRowLevel(cell, i);
                cell.field = external_ko_namespaceObject.observable(this.crossTab.rowFields()[i]);
                corners.push(cell);
            }
        }
        else if (CornerHeaderDisplayMode[mode] === CornerHeaderDisplayMode.ColumnFieldNames) {
            for (let i = 0; i < columnCount; i++) {
                cell = this.creator(CellKind.Corner);
                this.setLayout(cell, 0, i, rowCount, 1);
                this.setColumnLevel(cell, i);
                cell.field = external_ko_namespaceObject.observable(this.crossTab.columnFields()[i]);
                corners.push(cell);
            }
        }
        else {
            if (this.crossTab.layoutOptions)
                cell = this.creator(CellKind.Corner);
            this.setLayout(cell, 0, 0, rowCount, columnCount);
            corners.push(cell);
        }
        return corners;
    }
    createDataHeaders() {
        return [];
    }
    createDataHeader(columnIndex, rowIndex, dataLevel, columnLevel = -1, rowLevel = -1) {
        const cell = this.creator(CellKind.DataHeader);
        this.setLevel(cell, dataLevel, columnLevel, rowLevel);
        this.setLayout(cell, columnIndex, rowIndex, 1, 1);
        cell.field = external_ko_namespaceObject.observable(this.crossTab.dataFields()[dataLevel]);
        return cell;
    }
    createData() {
        let startRowIndex = this.nextRowIndex(this.lastCorner);
        if (this.crossTab.layoutOptions.hierarchicalRowLayout())
            startRowIndex += this.rowFieldCount - 1;
        return [this.createDataCell(this.nextColumnIndex(this.lastCorner), startRowIndex, 0)];
    }
    createDataCell(colIndex, rowIndex, level) {
        const cell = this.creator(CellKind.Data);
        cell.field = external_ko_namespaceObject.observable(this.crossTab.dataFields()[level]);
        this.setDataLevel(cell, level);
        this.setLayout(cell, colIndex, rowIndex, 1, 1);
        return cell;
    }
    createColumnTotals(startColumnIndex, startRowIndex, dataCount) {
        if (this.columnFieldCount == 0)
            return [];
        const cells = [];
        let columnIndex = startColumnIndex;
        for (let i = 0; i < this.columnFieldCount; i++) {
            const level = this.indexToLevel(i, this.columnFieldCount) - 1;
            for (let j = 0; j < Math.max(1, this.dataFieldCount); j++) {
                cells.push(this.createColumnTotal(columnIndex, startRowIndex, j, level));
            }
            columnIndex += dataCount;
        }
        return cells;
    }
    createColumnTotal(columnIndex, rowIndex, dataLevel, columnLevel) {
        const cell = this.creator(CellKind.ColumnTotal);
        this.setLevel(cell, dataLevel, columnLevel, -1);
        this.setLayout(cell, columnIndex, rowIndex, 1, 1);
        return cell;
    }
    createRowTotals(startColumnIndex, startRowIndex, dataCount) {
        if (this.rowFieldCount === 0)
            return [];
        const cells = [];
        let rowIndex = startRowIndex;
        for (let i = 0; i < this.rowFieldCount; i++) {
            const level = this.indexToLevel(i, this.rowFieldCount) - 1;
            for (let j = 0; j < Math.max(1, this.dataFieldCount); j++) {
                cells.push(this.createRowTotal(startColumnIndex, rowIndex, j, level));
            }
            rowIndex += dataCount;
        }
        return cells;
    }
    createRowTotal(columnIndex, rowIndex, dataLevel, rowLevel) {
        const cell = this.creator(CellKind.RowTotal);
        this.setLevel(cell, dataLevel, -1, rowLevel);
        this.setLayout(cell, columnIndex, rowIndex, 1, 1);
        return cell;
    }
    createGrandTotals(dataItems, startRowIndex, startColumnIndex, columnInc, rowInc) {
        let columnIndex = startColumnIndex;
        const totals = [];
        for (let i = 0; i < this.columnFieldCount; i++) {
            const columnLevel = this.indexToLevel(i, this.columnFieldCount) - 1;
            let rowIndex = startRowIndex;
            for (let j = 0; j < this.rowFieldCount; j++) {
                const rowLevel = this.indexToLevel(j, this.rowFieldCount) - 1;
                for (let k = 0; k < dataItems.length; k++) {
                    const cell = this.createGrandTotal(k, columnLevel, rowLevel);
                    this.setGrandTotalLayout(cell, k, columnIndex, rowIndex);
                    totals.push(cell);
                }
                rowIndex += rowInc;
            }
            columnIndex += columnInc;
        }
        return totals;
    }
    createGrandTotal(dataLevel, columnLevel, rowLevel) {
        const cell = this.creator(CellKind.GrandTotal);
        this.setLevel(cell, dataLevel, columnLevel, rowLevel);
        return cell;
    }
    setGrandTotalLayout(cells, inc, columnIndex, rowIndex) {
        this.setLayout(cells, columnIndex + inc, rowIndex, 1, 1);
    }
    createColumnHeaders(startColumnIndex, columnSpan, dataCount) {
        const cells = [];
        if (this.columnFieldCount === 0) {
            const columnHeader = this.creator(CellKind.ColumnHeader);
            this.setColumnLevel(columnHeader, 0);
            this.setLayout(columnHeader, startColumnIndex, 0, dataCount, 1);
            cells.push(columnHeader);
        }
        if (this.crossTab.layoutOptions.columnTotalHeaderPosition() === TotalHeaderPosition[TotalHeaderPosition.Outer])
            columnSpan = Math.max(dataCount, columnSpan - dataCount);
        let rowIndex = 0;
        const isReversed = this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData];
        isReversed && (startColumnIndex += dataCount * (this.columnFieldCount + 1));
        for (let i = 0; i < this.columnFieldCount; i++) {
            const columnHeader = this.creator(CellKind.ColumnHeader);
            columnHeader.field = external_ko_namespaceObject.observable(this.crossTab.columnFields()[i]);
            this.setColumnLevel(columnHeader, i);
            this.setLayout(columnHeader, isReversed ? startColumnIndex - columnSpan : startColumnIndex, rowIndex, columnSpan, 1);
            cells.push(columnHeader);
            columnSpan = Math.max(dataCount, columnSpan - dataCount);
            rowIndex = this.nextRowIndex(columnHeader);
        }
        return cells;
    }
    createColumnTotalHeaders(startColumnIndex, startRowIndex, rowSpan, dataCount) {
        const cells = [];
        if (this.columnFieldCount === 0)
            return [];
        if (this.crossTab.layoutOptions.columnTotalHeaderPosition() === TotalHeaderPosition[TotalHeaderPosition.Outer] && startRowIndex > 0) {
            startRowIndex--;
            rowSpan++;
        }
        let rowIndex = startRowIndex;
        let columnIndex = startColumnIndex;
        let columnInc = dataCount;
        if (this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            columnIndex -= dataCount * 2;
            columnInc = -columnInc;
        }
        for (let i = 0; i < this.columnFieldCount; i++) {
            const level = this.indexToLevel(i, this.columnFieldCount);
            const columnTotalHeader = level === 0 ? this.createColumnGrandTotalHeader() : this.createColumnTotalHeader(level - 1);
            columnTotalHeader.field = external_ko_namespaceObject.observable(this.crossTab.columnFields()[level - 1]);
            this.setLayout(columnTotalHeader, columnIndex, rowIndex, dataCount, rowSpan);
            cells.push(columnTotalHeader);
            if (rowIndex > 0) {
                rowIndex--;
                rowSpan++;
            }
            columnIndex += columnInc;
        }
        return cells;
    }
    createRowHeaders(startRowIndex, rowSpan, dataCount) {
        if (this.rowFieldCount === 0) {
            const rowHeader = this.creator(CellKind.RowHeader);
            this.setRowLevel(rowHeader, 0);
            this.setLayout(rowHeader, 0, startRowIndex, 1, dataCount);
            return [rowHeader];
        }
        const cells = [];
        let columnShift = 0;
        if (this.crossTab.layoutOptions.hierarchicalRowLayout() && this.rowFieldCount > 1) {
            columnShift = 1;
            rowSpan = 1;
        }
        else if (this.crossTab.layoutOptions.rowTotalHeaderPosition() === TotalHeaderPosition[TotalHeaderPosition.Outer]) {
            rowSpan = Math.max(dataCount, rowSpan - dataCount);
        }
        let columnIndex = 0;
        let rowIndex = startRowIndex;
        const isReversed = this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData];
        isReversed && (rowIndex += dataCount * (this.rowFieldCount + 1));
        let columnSpan = Math.max(1, this.rowFieldCount * columnShift);
        for (let i = 0; i < this.rowFieldCount; i++) {
            const rowHeader = this.creator(CellKind.RowHeader);
            rowHeader.field = external_ko_namespaceObject.observable(this.crossTab.rowFields()[i]);
            this.setRowLevel(rowHeader, i);
            if (this.crossTab.layoutOptions.hierarchicalRowLayout() && this.rowFieldCount - 1 > i
                && this.crossTab.layoutOptions.dataFieldLayout() === DataFieldLayout[DataFieldLayout.InColumn]) {
                columnSpan += 1;
            }
            this.setLayout(rowHeader, columnIndex, isReversed ? rowIndex - rowSpan : rowIndex, columnSpan, rowSpan);
            cells.push(rowHeader);
            if (!this.crossTab.layoutOptions.hierarchicalRowLayout() || this.rowFieldCount - 2 == i) {
                rowSpan = Math.max(dataCount, rowSpan - dataCount);
            }
            columnSpan = Math.max(1, (this.rowFieldCount - i - 1) * columnShift);
            columnIndex = rowHeader._columnIndex() + 1;
            !isReversed && (rowIndex = rowHeader._rowIndex() + columnShift);
        }
        return cells;
    }
    createRowTotalHeaders(startColumnIndex, columnSpan, startRowIndex, dataCount) {
        if (this.rowFieldCount === 0)
            return [];
        if (this.crossTab.layoutOptions.rowTotalHeaderPosition() === TotalHeaderPosition[TotalHeaderPosition.Outer] && startColumnIndex > 0) {
            startColumnIndex--;
            columnSpan++;
        }
        let rowIndex = startRowIndex;
        let rowInc = dataCount;
        if (this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            rowIndex -= dataCount * 2;
            rowInc = -rowInc;
        }
        let columnIndex = startColumnIndex;
        const cells = [];
        for (let i = 0; i < this.rowFieldCount; i++) {
            const level = this.indexToLevel(i, this.rowFieldCount);
            const rowTotalHeader = level === 0 ? this.createRowGrandTotalHeader() : this.createRowTotalHeader(level - 1);
            rowTotalHeader.field = external_ko_namespaceObject.observable(this.crossTab.rowFields()[level - 1]);
            this.setLayout(rowTotalHeader, columnIndex, rowIndex, columnSpan, dataCount);
            cells.push(rowTotalHeader);
            if (columnIndex > 0) {
                columnIndex--;
                columnSpan++;
            }
            rowIndex += rowInc;
        }
        return cells;
    }
    createEmptyHeaders(columnSpan) {
        let rowIndex = this.nextRowIndex(this.lastCorner);
        const columnIndex = this.nextColumnIndex(this.lastCorner);
        const cells = [];
        for (let i = 0; i < this.rowFieldCount - 1; i++) {
            const emptyHeader = this.createEmptyHeader(i);
            this.setLayout(emptyHeader, columnIndex, rowIndex, columnSpan, 1);
            cells.push(emptyHeader);
            rowIndex++;
        }
        return cells;
    }
    createEmptyCells(dataCount) {
        let rowIndex = this.nextRowIndex(this.lastCorner) + 1;
        let columnIndex = 0;
        let rowSpan = this.rowFieldCount * (dataCount + 1) - 2;
        if (this.crossTab.layoutOptions.rowTotalHeaderPosition() === TotalHeaderPosition[TotalHeaderPosition.Outer]) {
            rowSpan -= dataCount;
        }
        const cells = [];
        for (let i = 0; i < this.rowFieldCount - 1; i++) {
            const emptyCell = this.createEmptyCell(i);
            this.setLayout(emptyCell, columnIndex, rowIndex, 1, rowSpan);
            cells.push(emptyCell);
            rowIndex++;
            columnIndex++;
            rowSpan -= dataCount + 1;
        }
        return cells;
    }
    createEmptyHeader(level) {
        const emptyHeader = this.creator(CellKind.EmptyHeader);
        this.setRowLevel(emptyHeader, level);
        return emptyHeader;
    }
    createEmptyCell(level) {
        const emptyCell = this.creator(CellKind.Empty);
        this.setRowLevel(emptyCell, level);
        return emptyCell;
    }
    createColumnTotalHeader(level) {
        const columnHeaderTotal = this.creator(CellKind.ColumnTotalHeader);
        this.setColumnLevel(columnHeaderTotal, level);
        return columnHeaderTotal;
    }
    createColumnGrandTotalHeader() {
        const cell = this.creator(CellKind.ColumnTotalHeader);
        return cell;
    }
    createRowTotalHeader(level) {
        const rowHeaderTotal = this.creator(CellKind.RowTotalHeader);
        this.setRowLevel(rowHeaderTotal, level);
        return rowHeaderTotal;
    }
    createRowGrandTotalHeader() {
        const cell = this.creator(CellKind.RowTotalHeader);
        return cell;
    }
}
class HorizontalCreator extends CellCreator {
    get columnDataCount() { return this.dataFieldCount; }
    createCorners(columnCount, rowCount) {
        const corners = super.createCorners(columnCount, rowCount);
        if (this.crossTab.layoutOptions.cornerHeaderDisplayMode() == CornerHeaderDisplayMode[CornerHeaderDisplayMode.ColumnFieldNames]) {
            const lastCorner = corners[corners.length - 1];
            lastCorner._rowSpan(lastCorner._rowSpan() + 1);
        }
        else
            corners.forEach(corner => {
                corner._rowSpan(corner._rowSpan() + 1);
            });
        return corners;
    }
    createDataHeaders() {
        const rowIndex = this.lastRowIndex(this.lastCorner);
        const isReversed = this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData];
        let columnIndex = !isReversed ? this.nextColumnIndex(this.lastCorner) : this.nextColumnIndex(this.lastCorner) + this.columnFieldCount * this.dataFieldCount;
        const cells = [];
        for (let i = 0; i < this.dataFieldCount; i++) {
            cells.push(this.createDataHeader(columnIndex, rowIndex, i));
            columnIndex++;
        }
        const columnInc = Math.max(1, this.dataFieldCount);
        isReversed && (columnIndex -= 2 * columnInc);
        for (let i = 0; i < this.columnFieldCount; i++) {
            const columnLevel = this.indexToLevel(i, this.columnFieldCount);
            for (let j = 0; j < columnInc; j++) {
                const dataHeader = this.createDataHeader(columnIndex + j, rowIndex, j, columnLevel);
                this.setLevel(dataHeader, -1, columnLevel, -1);
                cells.push(dataHeader);
            }
            isReversed ? (columnIndex -= columnInc) : (columnIndex += columnInc);
        }
        return cells;
    }
    createData() {
        let startRowIndex = this.nextRowIndex(this.lastCorner);
        if (this.crossTab.layoutOptions.hierarchicalRowLayout())
            startRowIndex += this.rowFieldCount - 1;
        const rowIndex = this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.AfterData] ?
            startRowIndex : startRowIndex + this.rowFieldCount;
        const columnIndex = this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.AfterData] ?
            this.nextColumnIndex(this.lastCorner) : this.nextColumnIndex(this.lastCorner) + this.columnFieldCount * this.dataFieldCount;
        const cells = [];
        for (let i = 0; i < this.dataFieldCount; i++) {
            cells.push(this.createDataCell(columnIndex + i, rowIndex, i));
        }
        return cells;
    }
    createRowTotals(startColumnIndex, startRowIndex, dataCount) {
        if (this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            return super.createRowTotals(startColumnIndex, startRowIndex - 2, -dataCount);
        }
        return super.createRowTotals(startColumnIndex, startRowIndex, dataCount);
    }
    createColumnTotals(startColumnIndex, startRowIndex, dataCount) {
        if (this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            return super.createColumnTotals(startColumnIndex - dataCount - 1, startRowIndex, -dataCount);
        }
        return super.createColumnTotals(startColumnIndex + dataCount - 1, startRowIndex, dataCount);
    }
    createGrandTotals(dataItems, startRowIndex, startColumnIndex, columnIndex, rowIndex) {
        if (this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            startColumnIndex -= dataItems.length * 2;
            columnIndex = -dataItems.length;
        }
        if (this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            startRowIndex -= 2;
            rowIndex = -1;
        }
        return super.createGrandTotals(dataItems, startRowIndex, startColumnIndex, columnIndex, rowIndex);
    }
    createColumnTotal(columnIndex, rowIndex, dataLevel, columnLevel) {
        return super.createColumnTotal(columnIndex + dataLevel, rowIndex, dataLevel, columnLevel);
    }
    createRowTotal(columnIndex, rowIndex, dataLevel, rowLevel) {
        return super.createRowTotal(columnIndex + dataLevel, rowIndex, dataLevel, rowLevel);
    }
    createEmptyHeaders(columnSpan) {
        return super.createEmptyHeaders(columnSpan * this.dataFieldCount);
    }
}
class VerticalCreator extends CellCreator {
    get rowDataCount() { return this.dataFieldCount; }
    createCorners(columnCount, rowCount) {
        const corners = super.createCorners(columnCount, rowCount);
        if (this.crossTab.layoutOptions.cornerHeaderDisplayMode() == CornerHeaderDisplayMode[CornerHeaderDisplayMode.RowFieldNames]) {
            const lastCorner = corners[corners.length - 1];
            lastCorner._columnSpan(lastCorner._columnSpan() + 1);
        }
        else
            corners.forEach(corner => {
                corner._columnSpan(corner._columnSpan() + 1);
            });
        return corners;
    }
    createDataHeaders() {
        let startRowIndex = this.nextRowIndex(this.lastCorner);
        if (this.crossTab.layoutOptions.hierarchicalRowLayout())
            startRowIndex += this.rowFieldCount - 1;
        const isReversed = this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData];
        let rowIndex = !isReversed ? startRowIndex : startRowIndex + (this.rowFieldCount) * this.dataFieldCount;
        const columnIndex = this.lastColumnIndex(this.lastCorner);
        const cells = [];
        for (let i = 0; i < this.dataFieldCount; i++) {
            cells.push(this.createDataHeader(columnIndex, rowIndex, i));
            rowIndex++;
        }
        const rowInc = Math.max(1, this.dataFieldCount);
        isReversed && (rowIndex -= 2 * rowInc);
        for (let i = 0; i < this.rowFieldCount; i++) {
            const rowLevel = this.indexToLevel(i, this.rowFieldCount);
            for (let j = 0; j < rowInc; j++) {
                const dataHeader = this.createDataHeader(columnIndex, rowIndex + j, j, undefined, rowLevel);
                this.setLevel(dataHeader, -1, -1, rowLevel);
                cells.push(dataHeader);
            }
            isReversed ? (rowIndex -= rowInc) : (rowIndex += rowInc);
        }
        return cells;
    }
    createData() {
        let startRowIndex = this.nextRowIndex(this.lastCorner);
        if (this.crossTab.layoutOptions.hierarchicalRowLayout())
            startRowIndex += this.rowFieldCount - 1;
        const rowIndex = this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.AfterData] ?
            startRowIndex : startRowIndex + (this.rowFieldCount) * this.dataFieldCount;
        const columnIndex = this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.AfterData] ?
            this.nextColumnIndex(this.lastCorner) : this.nextColumnIndex(this.lastCorner) + this.columnFieldCount;
        const cells = [];
        for (let i = 0; i < this.dataFieldCount; i++) {
            cells.push(this.createDataCell(columnIndex, rowIndex + i, i));
        }
        return cells;
    }
    createRowTotals(startColumnIndex, startRowIndex, dataCount) {
        if (this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            return super.createRowTotals(startColumnIndex, startRowIndex - 3, -dataCount);
        }
        return super.createRowTotals(startColumnIndex, startRowIndex + dataCount - 1, dataCount);
    }
    createColumnTotals(startColumnIndex, startRowIndex, dataCount) {
        if (this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            return super.createColumnTotals(startColumnIndex - 2, startRowIndex, -dataCount);
        }
        return super.createColumnTotals(startColumnIndex, startRowIndex, dataCount);
    }
    createColumnTotal(columnIndex, rowIndex, dataLevel, columnLevel) {
        return super.createColumnTotal(columnIndex, rowIndex + dataLevel, dataLevel, columnLevel);
    }
    createRowTotal(columnIndex, rowIndex, dataLevel, rowLevel) {
        return super.createRowTotal(columnIndex, rowIndex + dataLevel, dataLevel, rowLevel);
    }
    createGrandTotals(dataItems, startRowIndex, startColumnIndex, columnIndex, rowIndex) {
        columnIndex = 1;
        rowIndex = dataItems.length;
        if (this.crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            startColumnIndex -= 2;
            columnIndex = -1;
        }
        if (this.crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
            startRowIndex -= this.dataFieldCount + 2;
            rowIndex = -dataItems.length;
        }
        return super.createGrandTotals(dataItems, startRowIndex, startColumnIndex, columnIndex, rowIndex);
    }
    setGrandTotalLayout(items, inc, columnIndex, rowIndex) {
        this.setLayout(items, columnIndex, rowIndex + inc, 1, 1);
    }
    createEmptyCells(dataCount) {
        return super.createEmptyCells(dataCount * this.dataFieldCount);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/crosstab/defenitions.js


const crossTabCellWidth = { propertyName: 'width', modelName: '@Width', localizationId: 'AnalyticsCoreStringId.SizeF.Width', defaultVal: 100, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel };
const autoWidthMode = { propertyName: 'autoWidthMode', modelName: '@AutoWidthMode', defaultVal: 'None', valuesArray: autoSizeMode };
const defenitions_visible = { propertyName: 'visible', modelName: '@Visible', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const crossTabColumnDefinitionInfo = [crossTabCellWidth, autoWidthMode, defenitions_visible];
const crossTabCellHeight = { propertyName: 'height', modelName: '@Height', displayName: 'Height', localizationId: 'AnalyticsCoreStringId.SizeF.Height', defaultVal: 25, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel };
const autoHeightMode = { propertyName: 'autoHeightMode', modelName: '@AutoHeightMode', defaultVal: 'None', valuesArray: autoSizeMode };
const crossTabRowDefinitionInfo = [crossTabCellHeight, autoHeightMode, defenitions_visible];
const rowDefinitions = { propertyName: '_rowDefinitions', modelName: 'RowDefinitions', array: true, alwaysSerialize: true };
const columnDefinitions = { propertyName: '_columnDefinitions', modelName: 'ColumnDefinitions', array: true, alwaysSerialize: true };

;// ./node_modules/devexpress-reporting/designer/controls/crossTab/defenitions.js





function findcells(cells, columnIndex, rowIndex) {
    return cells.filter(item => {
        if (columnIndex == null) {
            return item._rowIndex() === rowIndex;
        }
        if (rowIndex == null) {
            return item._columnIndex() === columnIndex;
        }
        return item._rowIndex() === rowIndex && item._columnIndex() === columnIndex;
    });
}
class CrossTabDefinitionsModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, parent, serializer) {
        super(model, serializer);
    }
}
class CrossTabRowDefinitionsModel extends CrossTabDefinitionsModel {
    getInfo() { return crossTabRowDefinitionInfo; }
}
class CrossTabColumnDefinitionsModel extends CrossTabDefinitionsModel {
    getInfo() { return crossTabColumnDefinitionInfo; }
}
class CellMatrixHelper {
    constructor(cells) {
        this.columnCount = 0;
        this.rowCount = 0;
        cells.forEach(cell => {
            if (cell._rowIndex() === 0)
                this.columnCount += cell._columnSpan();
            if (cell._columnIndex() === 0)
                this.rowCount += cell._rowSpan();
        });
        this.matrix = [];
        for (let i = 0; i < this.columnCount; i++) {
            this.matrix[i] = [];
            for (let j = 0; j < this.rowCount; j++) {
                const cell = findcells(cells, i, j)[0] || this.findRowCell(i, j - 1) || this.findColumnCell(i - 1, j);
                this.matrix[i][j] = cell;
            }
        }
    }
    findRowCell(i, j, span = 2) {
        if (j < 0)
            return null;
        const newCell = this.matrix[i][j];
        if (newCell && newCell._rowSpan() >= span)
            return newCell;
        return this.findRowCell(i, j - 1, span + 1);
    }
    findColumnCell(i, j, span = 1) {
        if (i < 0)
            return null;
        const newCell = this.matrix[i][j];
        if (newCell && newCell._rowSpan() >= span)
            return newCell;
        return this.findColumnCell(i - 1, j, span + 1);
    }
}
class DefenitionUpdater extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(crossTab) {
        super();
        this._columnDefinitions = [];
        this._rowDefinitions = [];
        this._serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        const matrixHelper = new CellMatrixHelper(crossTab.cells());
        for (let i = 0; i < matrixHelper.columnCount; i++) {
            for (let j = 0; j < matrixHelper.rowCount; j++) {
                const cell = matrixHelper.matrix[i][j];
                if (cell.kind() == CellKind.DataHeader || cell.kind() == CellKind.Corner)
                    continue;
                if (cell._columnSpan() === 1 && !this.findDefinition(this._columnDefinitions, cell)) {
                    this._columnDefinitions.push({ cell: cell, defenition: crossTab._columnDefinitions()[i] });
                }
                if (cell._rowSpan() === 1 && !this.findDefinition(this._rowDefinitions, cell)) {
                    this._rowDefinitions.push({ cell: cell, defenition: crossTab._rowDefinitions()[j] });
                }
            }
        }
    }
    findDefinition(array, cell) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(array, (item) => item.cell === cell);
    }
    update(cells, width, height) {
        const matrixHelper = new CellMatrixHelper(cells);
        const columnDefs = [];
        const rowDefs = [];
        for (let i = 0; i < matrixHelper.columnCount; i++) {
            for (let j = 0; j < matrixHelper.rowCount; j++) {
                const cell = matrixHelper.matrix[i][j];
                if (columnDefs[i] == null && cell._columnSpan() === 1) {
                    const element = this.findDefinition(this._columnDefinitions, cell);
                    if (element && element.defenition)
                        columnDefs[i] = new CrossTabColumnDefinitionsModel(this._serializer.serialize(element.defenition));
                }
                if (rowDefs[j] == null && cell._rowSpan() === 1) {
                    const element = this.findDefinition(this._rowDefinitions, cell);
                    if (element && element.defenition)
                        rowDefs[j] = new CrossTabRowDefinitionsModel(this._serializer.serialize(element.defenition));
                }
            }
        }
        for (let i = 0; i < matrixHelper.columnCount; i++) {
            if (columnDefs[i] == null)
                columnDefs[i] = new CrossTabColumnDefinitionsModel({ '@Width': i > 0 ? columnDefs[i - 1].width() : width });
        }
        for (let i = 0; i < matrixHelper.rowCount; i++) {
            if (rowDefs[i] == null)
                rowDefs[i] = new CrossTabRowDefinitionsModel({ '@Height': i > 0 ? rowDefs[i - 1].height() : height });
        }
        return { columnDefs: columnDefs, rowDefs: rowDefs };
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/crosstab/layoutOptions.js



const headerPositions = [
    { displayValue: 'Inner', value: TotalHeaderPosition[TotalHeaderPosition.Inner], localizationId: 'DevExpress.XtraReports.UI.CrossTab.TotalHeaderPosition.Inner' },
    { displayValue: 'Outer', value: TotalHeaderPosition[TotalHeaderPosition.Outer], localizationId: 'DevExpress.XtraReports.UI.CrossTab.TotalHeaderPosition.Outer' }
];
const totalsPositions = [
    { displayValue: 'AfterData', value: TotalsPosition[TotalsPosition.AfterData], localizationId: 'DevExpress.XtraReports.UI.CrossTab.TotalsPosition.AfterData' },
    { displayValue: 'BeforeData', value: TotalsPosition[TotalsPosition.BeforeData], localizationId: 'DevExpress.XtraReports.UI.CrossTab.TotalsPosition.BeforeData' },
];
const crossTabLayoutOptionsInfo = [
    {
        propertyName: 'cornerHeaderDisplayMode', modelName: '@CornerHeaderDisplayMode', displayName: 'Corner Header Display Mode', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.CornerHeaderDisplayMode', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'RowFieldNames', valuesArray: [
            { displayValue: 'None', value: CornerHeaderDisplayMode[CornerHeaderDisplayMode.None], localizationId: 'DevExpress.XtraReports.UI.CrossTab.CornerHeaderDisplayMode.None' },
            { displayValue: 'Row Field Names', value: CornerHeaderDisplayMode[CornerHeaderDisplayMode.RowFieldNames], localizationId: 'DevExpress.XtraReports.UI.CrossTab.CornerHeaderDisplayMode.RowFieldNames' },
            { displayValue: 'Column Field Names', value: CornerHeaderDisplayMode[CornerHeaderDisplayMode.ColumnFieldNames], localizationId: 'DevExpress.XtraReports.UI.CrossTab.CornerHeaderDisplayMode.ColumnFieldNames' },
        ]
    }, {
        propertyName: 'dataFieldLayout', modelName: '@DataFieldLayout', displayName: 'Data Field Layout', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.DataFieldLayout', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'InRow', valuesArray: [
            { displayValue: 'In Row', value: DataFieldLayout[DataFieldLayout.InRow], localizationId: 'DevExpress.XtraReports.UI.CrossTab.DataFieldLayout.InRow' },
            { displayValue: 'In Column', value: DataFieldLayout[DataFieldLayout.InColumn], localizationId: 'DevExpress.XtraReports.UI.CrossTab.DataFieldLayout.InColumn' },
        ]
    }, { propertyName: 'columnTotalsPosition', modelName: '@ColumnTotalsPosition', displayName: 'Column Totals Position', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.ColumnTotalsPosition', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'AfterData', valuesArray: totalsPositions },
    { propertyName: 'rowTotalsPosition', modelName: '@RowTotalsPosition', displayName: 'Row Totals Position', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.RowTotalsPosition', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'AfterData', valuesArray: totalsPositions },
    { propertyName: 'columnTotalHeaderPosition', modelName: '@ColumnTotalHeaderPosition', displayName: 'Column Total Header Position', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.ColumnTotalHeaderPosition', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Outer', valuesArray: headerPositions },
    { propertyName: 'rowTotalHeaderPosition', modelName: '@RowTotalHeaderPosition', displayName: 'Row Total Header Position', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.RowTotalHeaderPosition', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'Outer', valuesArray: headerPositions },
    { propertyName: 'hierarchicalRowLayout', modelName: '@HierarchicalRowLayout', displayName: 'Hierarchical Row Layout', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabLayoutOptions.HierarchicalRowLayout', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }
];
const crossTabLayoutOptions = { propertyName: 'layoutOptions', modelName: 'LayoutOptions', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.LayoutOptions', displayName: 'Layout Options', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: crossTabLayoutOptionsInfo };

;// ./node_modules/devexpress-reporting/designer/controls/xrCrossTabCell.js













function kindToString(kind) {
    switch (kind) {
        case CellKind.None:
            return 'NO';
        case CellKind.Corner:
            return 'CRN';
        case CellKind.RowHeader:
            return 'RH';
        case CellKind.RowTotalHeader:
            return 'RTH';
        case CellKind.RowTotal:
            return 'RT';
        case CellKind.ColumnHeader:
            return 'CH';
        case CellKind.ColumnTotalHeader:
            return 'CTH';
        case CellKind.ColumnTotal:
            return 'CT';
        case CellKind.Data:
            return 'DAT';
        case CellKind.DataHeader:
            return 'DH';
        case CellKind.GrandTotal:
            return 'GDT';
        case CellKind.Empty:
            return 'Emtpy';
        case CellKind.EmptyHeader:
            return 'EmtpyH';
    }
}
class XRCrossTabCellViewModel extends XRControlViewModel {
    get namePrefix() {
        let cellType = '';
        for (const type in XRCrossTabCellViewModel.cellKinds) {
            if (XRCrossTabCellViewModel.cellKinds[type].indexOf(this.kind()) != -1)
                cellType = type;
        }
        return 'crossTab' + cellType + 'Cell';
    }
    get _width() {
        const columns = this.parent._columnDefinitions();
        let result = 0;
        for (let i = this._columnIndex(); i < this._columnIndex() + this._columnSpan(); i++) {
            result += columns[i].width();
        }
        return result;
    }
    get _height() {
        const rows = this.parent._rowDefinitions();
        let result = 0;
        for (let i = this._rowIndex(); i < this._rowIndex() + this._rowSpan(); i++) {
            result += rows[i].height();
        }
        return result;
    }
    get _left() {
        const columns = this.parent._columnDefinitions();
        let result = 0;
        for (let i = 0; i < this._columnIndex(); i++) {
            result += columns[i].width();
        }
        return result;
    }
    get _top() {
        const rows = this.parent._rowDefinitions();
        let result = 0;
        for (let i = 0; i < this._rowIndex(); i++) {
            result += rows[i].height();
        }
        return result;
    }
    _getDefaultName(kind) {
        switch (kind) {
            case CellKind.ColumnHeader:
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Columns', 'ReportStringId.CrossTab_ColumnAreaName');
            case CellKind.RowHeader:
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Rows', 'ReportStringId.CrossTab_RowAreaName');
            case CellKind.Data:
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Data', 'ReportStringId.CrossTab_DataAreaName');
        }
    }
    _testFieldName(fieldName, path) {
        const report = this.root;
        if (!report || !(report instanceof ReportViewModel))
            return;
        const dataBindingsProvider = report.dataBindingsProvider && report.dataBindingsProvider();
        if (dataBindingsProvider) {
            dataBindingsProvider.getItems(path).done(result => {
                this.fieldNameAreValid(result.some(x => x.name === fieldName));
            });
        }
    }
    _createParametersExpressionCategory() {
        const crossTabParameters = this.parent.controlParameters();
        crossTabParameters.forEach(x => x.initDataMemberInfo());
        return (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.createExpressionEditorCollectionToolOptions)(crossTabParameters.map(x => {
            return {
                text: x.name,
                val: '?' + x.name,
                description: (x.dataType || x.specifics || 'object').toLowerCase() + ' ' + x.name
            };
        }), 'Parameters', 'ReportStringId.CatParameters', true);
    }
    constructor(model, parent, serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()) {
        super(model, parent, serializer);
        this.parent = parent;
        this._showCellCode = external_ko_namespaceObject.observable(false);
        this._oldFieldName = null;
        this.getPath = (propertyName) => {
            if (this.field && this.field())
                return this.field().getPath(propertyName);
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.parent.getPath('dataMember'), this.parent['dataMember']());
        };
        this.kind = external_ko_namespaceObject.observable(CellKind.None);
        this.fieldNameAreValid = external_ko_namespaceObject.observable(true);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                this.size.width(this._width);
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                this.size.height(this._height);
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                this.location.x(this._left);
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                this.location.y(this._top);
            }
        }));
        this._disposables.push(this.location.x.subscribe(newVal => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                const delta = newVal - this._left;
                if (this._columnIndex() != 0) {
                    const targetColumn = parent._columnDefinitions()[this._columnIndex() - 1];
                    targetColumn.width(targetColumn.width() + delta);
                }
                else {
                    parent.location.x(parent.location.x() + delta);
                }
            }
        }));
        this._disposables.push(this.location.y.subscribe(newVal => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                const delta = newVal - this._top;
                if (this._rowIndex() != 0) {
                    const targetRow = parent._rowDefinitions()[this._rowIndex() - 1];
                    targetRow.height(targetRow.height() + delta);
                }
                else {
                    parent.location.y(parent.location.y() + delta);
                }
            }
        }));
        this._disposables.push(this.size.height.subscribe(newHeight => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                const currentHeight = this._height;
                const rows = parent._rowDefinitions();
                for (let i = this._rowIndex(); i < this._rowIndex() + this._rowSpan(); i++) {
                    rows[i].height(rows[i].height() + (newHeight - currentHeight) * (rows[i].height() / currentHeight));
                }
            }
        }));
        this._disposables.push(this.size.width.subscribe(newWidth => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.parent)) {
                const currentWidth = this._width;
                const columns = parent._columnDefinitions();
                for (let i = this._columnIndex(); i < this._columnIndex() + this._columnSpan(); i++) {
                    columns[i].width(columns[i].width() + (newWidth - currentWidth) * (columns[i].width() / currentWidth));
                }
            }
        }));
        this._text = external_ko_namespaceObject.observable(this.text());
        this.field = external_ko_namespaceObject.observable(null);
        this._disposables.push(this.field.subscribe(field => {
            if (field) {
                crossTabGroupFieldInfoBase.concat(crossTabDataFieldInfoBase).forEach(info => {
                    if (field[info.propertyName])
                        this[info.propertyName] = field[info.propertyName];
                });
            }
        }));
        this._disposables.push(this.fieldName = external_ko_namespaceObject.pureComputed({
            read: () => this.field() && this.field().fieldName() || '',
            write: (newVal) => {
                if (this.field())
                    this.field().fieldName(newVal);
                else
                    this.createAndAssignNewField(newVal, true);
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this._testFieldName(this.fieldName(), new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest((0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.parent.getPath(''), this.parent['dataMember']())));
        }));
        this._disposables.push(this.kind.subscribe((kind) => {
            if (this._textFormatString() === '' && this.field() && (kind == CellKind.RowTotalHeader
                || kind == CellKind.ColumnTotalHeader))
                this.textFormatString('Total {0}');
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (this._text() === '' && this.isIndependant() && this.kind() != CellKind.Corner) {
                this.text('Grand Total');
            }
            if ((this.kind() == CellKind.Corner || this.kind() == CellKind.DataHeader) && this.fieldName() && this.fieldName() != this._oldFieldName) {
                (this._oldFieldName == this.text() || this.text() === '') && this.text(this.fieldName());
                this._oldFieldName = this.fieldName();
            }
        }));
        this._disposables.push(this.text = external_ko_namespaceObject.pureComputed({
            read: () => {
                if (this._showCellCode()) {
                    const kind = kindToString(this.kind());
                    const rowSpan = this._rowSpan() != 1 ? '(' + this._rowSpan() + ')' : '';
                    const columnSpan = this._columnSpan() != 1 ? '(' + this._columnSpan() + ')' : '';
                    return kind + ' X' + this._columnIndex() + columnSpan + ' Y' + this._rowIndex() + rowSpan;
                }
                if (this._text())
                    return this._text();
                const fieldName = this.fieldName() ? '[' + this.fieldName() + ']' : '';
                if (this.kind() == CellKind.RowTotalHeader || this.kind() == CellKind.ColumnTotalHeader) {
                    return this.textFormatString() ? (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(this.textFormatString(), fieldName) : fieldName;
                }
                if (this.isBindable())
                    return fieldName || this._getDefaultName(this.kind());
            },
            write: (newVal) => this._text(newVal)
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            switch (this.kind()) {
                case CellKind.Corner:
                case CellKind.ColumnHeader:
                case CellKind.ColumnTotalHeader:
                case CellKind.DataHeader:
                case CellKind.RowHeader:
                case CellKind.RowTotalHeader:
                case CellKind.EmptyHeader:
                case CellKind.Empty:
                    this.styleName(this.parent['headerAreaStyleName']());
                    break;
                case CellKind.ColumnTotal:
                case CellKind.RowTotal:
                case CellKind.GrandTotal:
                    this.styleName(this.parent['totalAreaStyleName']());
                    break;
                case CellKind.Data:
                    this.styleName(this.parent['dataAreaStyleName']());
                    break;
                default:
                    this.styleName(this.parent['generalStyleName']());
            }
            stylesProperties.forEach(property => {
                if (this['_' + property] && this['_' + property]())
                    this[property](this['_' + property]());
            });
        }));
        this._disposables.push(this.rowVisible = external_ko_namespaceObject.pureComputed({
            read: () => {
                const rows = parent._rowDefinitions().slice(this._rowIndex(), this._rowIndex() + this._rowSpan());
                return !rows.every(x => !x.visible());
            },
            write: (value) => {
                for (let i = 0; i < this._rowSpan(); i++) {
                    parent._rowDefinitions()[this._rowIndex() + i].visible(value);
                }
            }
        }));
        this._disposables.push(this.columnVisible = external_ko_namespaceObject.pureComputed({
            read: () => {
                const columns = parent._columnDefinitions().slice(this._columnIndex(), this._columnIndex() + this._columnSpan());
                return !columns.every(x => !x.visible());
            },
            write: (value) => {
                for (let i = 0; i < this._columnSpan(); i++) {
                    parent._columnDefinitions()[this._columnIndex() + i].visible(value);
                }
            }
        }));
        this.rowAutoHeightMode = parent._rowDefinitions()[this._rowIndex()].autoHeightMode;
        this.columnAutoWidthMode = parent._columnDefinitions()[this._columnIndex()].autoWidthMode;
        this.crossTabSortBySummaryInfo.getPath = (propertyName) => this.getPath(propertyName);
    }
    reset() {
        this.dataLevel = undefined;
        this.columnLevel = undefined;
        this.rowLevel = undefined;
    }
    canRemove() {
        return this.kind() === CellKind.Data && this.parent.dataFields().length > 0
            || this.kind() === CellKind.RowHeader && this.parent.rowFields().length > 0
            || this.kind() === CellKind.ColumnHeader && this.parent.columnFields().length > 0;
    }
    canDropDown() {
        return this.fieldName() && (this.kind() === CellKind.Data && (this.parent.dataFields().length < 2
            || this.parent.layoutOptions.dataFieldLayout() === DataFieldLayout[DataFieldLayout.InColumn])
            || this.kind() === CellKind.ColumnHeader);
    }
    canDropRight() {
        return this.fieldName() && (this.kind() === CellKind.Data && (this.parent.dataFields().length < 2
            || this.parent.layoutOptions.dataFieldLayout() === DataFieldLayout[DataFieldLayout.InRow])
            || this.kind() === CellKind.RowHeader);
    }
    canDropUp() {
        return this.fieldName() && this.kind() === CellKind.ColumnHeader;
    }
    canDropLeft() {
        return this.fieldName() && this.kind() === CellKind.RowHeader;
    }
    getExpressionBinding(property, event) {
        if (this.isBindable()) {
            return this.text();
        }
        return super.getExpressionBinding(property, event);
    }
    isPropertyVisible(name, isPopularProperty = false) {
        if (name == 'textFormatString')
            return !this.isIndependant();
        if (name == 'visible' || name == 'location' || name == 'canPublish')
            return false;
        if (name == 'fieldName')
            return this.isBindable();
        if (name == 'summaryType' || name == 'summaryDisplayType')
            return this.kind() === CellKind.Data;
        if (name == 'text' && isPopularProperty)
            return !this.isPropertyDisabled(name);
        if (stylesInfo.some(x => x.propertyName === name))
            return false;
        if (name == 'sortOrder' ||
            name == 'crossTabGroupInterval' ||
            name == 'crossTabGroupIntervalNumericRange' ||
            name == 'crossTabSortBySummaryInfo')
            return this.kind() === CellKind.RowHeader || this.kind() === CellKind.ColumnHeader;
        return super.isPropertyVisible(name);
    }
    isPropertyModified(name) {
        if (name === 'columnIndex' || name === 'rowIndex')
            return false;
        return super.isPropertyModified(name);
    }
    isPropertyDisabled(name) {
        if (name === 'text')
            return !this.isEditable();
        if (name === 'crossTabGroupInterval' ||
            name === 'sortOrder' ||
            name === 'summaryType' ||
            name === 'summaryDisplayType' ||
            name === 'crossTabSortBySummaryInfo')
            return !this.fieldName();
        if (name === 'crossTabGroupIntervalNumericRange')
            return !this.fieldName() || !this.crossTabGroupInterval() || (this.crossTabGroupInterval() != 'Numeric' &&
                this.crossTabGroupInterval() != 'DayAge' &&
                this.crossTabGroupInterval() != 'WeekAge' &&
                this.crossTabGroupInterval() != 'MonthAge' &&
                this.crossTabGroupInterval() != 'YearAge');
        return super.isPropertyDisabled(name);
    }
    isBindable() {
        return this.kind() === CellKind.RowHeader || this.kind() === CellKind.ColumnHeader || this.kind() === CellKind.Data;
    }
    isIndependant() {
        return this.kind() == CellKind.Corner ||
            this.kind() == CellKind.ColumnTotalHeader && this.columnLevel == undefined ||
            this.kind() == CellKind.RowTotalHeader && this.rowLevel == undefined;
    }
    isEditable() {
        return this.kind() == CellKind.Corner || this.kind() == CellKind.DataHeader
            || this.kind() == CellKind.ColumnTotalHeader || this.kind() == CellKind.RowTotalHeader
            || this.kind() == CellKind.EmptyHeader || this.kind() == CellKind.Empty;
    }
    createAndAssignNewField(fieldName, insertBefore, dataFieldLayout = DataFieldLayout.InRow) {
        const increment = insertBefore ? 0 : 1;
        switch (this.kind()) {
            case CellKind.ColumnHeader:
                this.parent.insertNewField('columnFields', this.columnLevel + increment, fieldName);
                break;
            case CellKind.RowHeader:
                this.parent.insertNewField('rowFields', this.rowLevel + increment, fieldName);
                break;
            case CellKind.Data:
                this.parent.insertNewField('dataFields', this.dataLevel + increment, fieldName, dataFieldLayout);
        }
    }
    customizeExpressionCategories(tools, categories) {
        const crossTabParameters = this.parent.controlParameters();
        const crossTabFields = this.parent.getFields();
        const fieldsCategory = categories.filter(item => item.content.name == 'dx-expressioneditor-fields')[0];
        if (fieldsCategory) {
            delete fieldsCategory.content.data.parameters;
            const fields = fieldsCategory.content.data.fields();
            if (fields) {
                fields.treeListController.customFilter = (path) => {
                    return crossTabFields.some(x => (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(x.getPath(''), x.fieldName()) === path);
                };
            }
            else {
                categories.splice(categories.indexOf(fieldsCategory), 1);
            }
        }
        if (crossTabParameters.length > 0) {
            categories.push(this._createParametersExpressionCategory());
        }
    }
}
XRCrossTabCellViewModel.cellKinds = {
    'Header': [CellKind.ColumnHeader, CellKind.ColumnTotalHeader, CellKind.DataHeader, CellKind.RowHeader,
        CellKind.RowTotalHeader, CellKind.Corner],
    'Total': [CellKind.RowTotal, CellKind.GrandTotal, CellKind.ColumnTotal],
    'Data': [CellKind.Data]
};

class XRCellsurface extends XRTextControlSurfaceBase {
    constructor(control, context) {
        super(control, context);
        this.controls = null;
        this.contenttemplate = 'dxrd-crosstab-control-content';
        this.dropRect = new external_DevExpress_Analytics_Elements_namespaceObject.Rectangle();
        this.isDropTarget = external_ko_namespaceObject.observable(false);
        this.dragCss = external_ko_namespaceObject.observable('dxrd-drag-helper-item-allowed');
        this.selectiontemplate = 'dxrd-crosstab-cell';
        this._disposables.push(this.showDropSurface = external_ko_namespaceObject.computed(() => {
            if (!this.underCursor().isOver) {
                this.isDropTarget(false);
            }
            return this.isDropTarget() && this.underCursor().isOver;
        }));
    }
    checkParent(surfaceParent) {
        return this.parent === surfaceParent;
    }
    selectLine(selection, event = { ctrlKey: false, metaKey: false }, isRow = false) {
        this.parent.selectLine(selection, this.getControlModel(), event.ctrlKey || event.metaKey, isRow);
    }
    cellClick() {
        if (controlsFactory && controlsFactory()) {
            const metadata = controlsFactory().controlsMap['XRCrossTabCell'];
            const isBindable = this._control.canRemove();
            if (isBindable) {
                metadata.isDeleteDeny = false;
            }
            else if (!isBindable) {
                metadata.isDeleteDeny = true;
            }
        }
    }
    isEditable() {
        const control = this._control;
        return control.isEditable();
    }
    _getDropCallback(insertBefore = false, dataFieldLayout = DataFieldLayout.InRow) {
        return (item) => {
            const control = this._control;
            control.createAndAssignNewField(item.path, insertBefore, dataFieldLayout);
        };
    }
    _canSetFieldName(fullPath) {
        const crossTab = this._control.parentModel();
        const path = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(crossTab.getPath(''), crossTab['dataMember']());
        const pathLength = path.split('.').length;
        return fullPath.indexOf(path) == 0
            && (pathLength < 2 || fullPath.split('.').length - pathLength == 1);
    }
    getAdornTemplate() {
        let result = super.getAdornTemplate();
        if (this._context['validationMode'] && this._context['validationMode']())
            result = XRControlSurface._appendValue(result, 'dxrd-image-surface-bounded-notvalid', this._control['isBindable']() && this._control['fieldName']() && !this._control['fieldNameAreValid']());
        result = XRControlSurface._appendValue(result, 'dxrd-image-surface-bounded', this._control['isBindable']() && this._control['fieldName']() && this._control['fieldNameAreValid']);
        result = XRControlSurface._appendValue(result, 'dxrd-surface-hidden', !this._control['columnVisible']() || !this._control['rowVisible']());
        return result;
    }
    dragCallback(item) {
        const control = this._control;
        const crossTab = control.parentModel();
        const rect = this.dropRect;
        this.isDropTarget(true);
        rect.left(-1);
        rect.top(-1);
        rect.width(this._width() - 3);
        rect.height(this._height() - 3);
        this.dropCallback = () => { };
        if ((control.kind() == CellKind.ColumnHeader || control.kind() == CellKind.RowHeader || control.kind() == CellKind.Data) && this._canSetFieldName(item.path)) {
            this.dragCss('dxrd-drag-helper-item-allowed');
            const cursor = { x: this.underCursor().x, y: this.underCursor().y };
            if (rect.height() - cursor.y < 7 && control.canDropDown()) {
                rect.top(rect.height() - 3);
                rect.height(7);
                this.dropCallback = this._getDropCallback(false, DataFieldLayout.InColumn);
            }
            else if (rect.width() - cursor.x < 7 && control.canDropRight()) {
                rect.left(rect.width() - 3);
                rect.width(7);
                this.dropCallback = this._getDropCallback(false);
            }
            else if (cursor.x < 7 && control.canDropLeft()) {
                if (control._columnIndex() != 0) {
                    rect.height(crossTab.cells().filter((x) => x._columnIndex() == control._columnIndex() - 1 && x.kind() == control.kind())[0].surface._height() - 3);
                    if (crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
                        rect.top(rect.top() - rect.height() + this._height() - 4);
                    }
                }
                else {
                    const grandTotal = crossTab.cells().filter((x) => x.kind() === CellKind.RowTotalHeader && x.rowLevel === undefined)[0];
                    rect.height(grandTotal.surface._y() + grandTotal.surface._height() - this._y() - 3);
                    if (crossTab.layoutOptions.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
                        rect.top(rect.top() - (this._y() - grandTotal.surface._y()));
                        rect.height(this._y() - grandTotal.surface._y() + this._height() - 4);
                    }
                }
                this.dropCallback = this._getDropCallback(true);
                rect.left(-6);
                rect.width(7);
            }
            else if (cursor.y < 7 && control.canDropUp()) {
                if (control._rowIndex() != 0) {
                    rect.width(crossTab.cells().filter((x) => x._rowIndex() == control._rowIndex() - 1 && x.kind() == control.kind())[0].surface._width() - 3);
                    if (crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
                        rect.left(rect.left() - rect.width() + this._width() - 4);
                    }
                }
                else {
                    const grandTotal = crossTab.cells().filter((x) => x.kind() === CellKind.ColumnTotalHeader && x.columnLevel === undefined)[0];
                    rect.width(grandTotal.surface._x() + grandTotal.surface._width() - this._x() - 3);
                    if (crossTab.layoutOptions.columnTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData]) {
                        rect.left(rect.left() - (this._x() - grandTotal.surface._x()));
                        rect.width(this._x() - grandTotal.surface._x() + this._width() - 4);
                    }
                }
                this.dropCallback = this._getDropCallback(true);
                rect.top(-6);
                rect.height(7);
            }
            else {
                this.dropCallback = (item) => {
                    if (!control.field()) {
                        this._getDropCallback(true)(item);
                        return;
                    }
                    control.field()['setFieldName'](item.path);
                };
            }
        }
        else {
            this.dragCss('dxrd-drag-helper-item-forbidden');
        }
    }
    findNextSelection() {
        return this.parent;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrCrossTab.js


















class XRCrossTabViewModel extends XRControlViewModel {
    _getCreator(type, serializer, name) {
        return (item) => new type(item || {}, this, serializer, name);
    }
    _getArray(type, model, name, serializer) {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model[name], this._getCreator(type, serializer, this.getNames()[name[0].toLowerCase() + name.slice(1)]));
    }
    _initStyles(root) {
        if (root && root.styles) {
            crossTabStyles.forEach(style => {
                let styleName = this[style.propertyName]();
                if (!styleName) {
                    const newStyle = new StyleModel(crossTabStylesDefaults[style.propertyName], this);
                    styleName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(root.styles(), newStyle.name());
                    newStyle.name(styleName);
                    root.styles.push(newStyle);
                    this[style.propertyName](styleName);
                }
            });
        }
    }
    _calcSize(defenition) {
        let result = 0;
        defenition.forEach(element => {
            result += element[(element instanceof CrossTabColumnDefinitionsModel ? 'width' : 'height')]();
        });
        return result;
    }
    constructor(model, parent, serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()) {
        super(model, parent, serializer);
        this.getPath = (propertyName) => this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this['dataSource']());
        this.dependentStyles = [];
        this._cells = external_ko_namespaceObject.observableArray([]);
        this._disposables.push(this.isModelReady = external_ko_namespaceObject.computed(() => { return (0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root) && !this.update(); }));
        this.layoutOptions = new CrossTabLayoutOptionsModel(model['LayoutOptions'] || {}, this, serializer);
        this.rowFields = this._getArray(CrossTabFieldModel, model, 'RowFields', serializer);
        this.columnFields = this._getArray(CrossTabFieldModel, model, 'ColumnFields', serializer);
        this.dataFields = this._getArray(CrossTabDataFieldModel, model, 'DataFields', serializer);
        this._rowDefinitions = this._getArray(CrossTabRowDefinitionsModel, model, 'RowDefinitions', serializer);
        this._columnDefinitions = this._getArray(CrossTabColumnDefinitionsModel, model, 'ColumnDefinitions', serializer);
        this.cells = this._getArray(XRCrossTabCellViewModel, model, 'Cells', serializer);
        this.controlParameters = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model['Parameters'], (item) => { return new ControlParameter(item, serializer, this.root.dataSourceHelper, this.root.dataBindingsProvider); });
        this.controlParameters().forEach(x => !x.parameter() && !x.dataSource() && x.dataSource(this.root['dataSource'] && this.root['dataSource']()));
        this.cellCreator = CellCreator.createInstance(this);
        const cells = this.cellCreator.create();
        this._cells(this.applyCells(cells, true));
        this._disposables.push(...(0,external_DevExpress_Analytics_Wizard_Internal_namespaceObject.subscribeProperties)([this.rowFields, this.columnFields, this.dataFields]
            .concat(Object.keys(this.layoutOptions).map(x => this.layoutOptions[x])), () => {
            this.updateLayout();
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this.size.width(this._calcSize(this._columnDefinitions()));
        }));
        this._disposables.push(this.size.width.subscribe(newWidth => {
            const columnDefinitions = this._columnDefinitions.peek();
            const currentWidth = this._calcSize(columnDefinitions);
            columnDefinitions.forEach(element => {
                element.width(element.width() + (newWidth - currentWidth) * (element.width() / currentWidth));
            });
            this._columnDefinitions.valueHasMutated();
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this.size.height(this._calcSize(this._rowDefinitions()));
        }));
        this._disposables.push(this.size.height.subscribe(newHeight => {
            const rowDefinitions = this._rowDefinitions.peek();
            const currentHeight = this._calcSize(rowDefinitions);
            rowDefinitions.forEach(element => {
                element.height(element.height() + (newHeight - currentHeight) * (element.height() / currentHeight));
            });
            this._rowDefinitions.valueHasMutated();
        }));
        this._disposables.push(this.dataSource.subscribe((val) => this['dataMember'](null)));
        this._disposables.push(this.controlParameters.subscribe((args) => {
            args.forEach((change) => {
                if (!change.value.parameterName()) {
                    change.value.parameterName((0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this.controlParameters(), 'controlParameter'));
                }
            });
        }, null, 'arrayChange'));
        const dataMember = external_ko_namespaceObject.pureComputed(() => (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.getPath('dataMember'), this['dataMember']()));
        const parameters = external_ko_namespaceObject.computed(() => this.controlParameters());
        const disabled = external_ko_namespaceObject.pureComputed(() => !this.dataSource());
        this.filterString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this._filterString, dataMember, disabled);
        this.filterString.helper.parameters = parameters;
        this._disposables.push(dataMember);
        this._disposables.push(disabled);
        this._disposables.push(parameters);
    }
    removeChild(cell) {
        if (cell.canRemove()) {
            this.removeField(cell.dataLevel, cell.columnLevel, cell.rowLevel);
        }
    }
    removeField(dataLevel, columnLevel, rowLevel) {
        if (dataLevel > -1) {
            this.dataFields.splice(dataLevel, 1);
        }
        else if (columnLevel > -1) {
            this.columnFields.splice(columnLevel, 1);
        }
        else if (rowLevel > -1) {
            this.rowFields.splice(rowLevel, 1);
        }
    }
    initialize() {
        this._disposables.push(this.parentModel.subscribe((model) => { model && this._initStyles(this.root); }));
        this.parentModel() && this._initStyles(this.root);
    }
    updateLayout() {
        if (this.update())
            return;
        let undo = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this);
        undo && undo.start();
        this.update(true);
        this.defenitionUpdater = new DefenitionUpdater(this);
        this.cellCreator = CellCreator.createInstance(this);
        const cells = this.cellCreator.create();
        const modelCells = this.applyCells(cells);
        this._cells(modelCells);
        const defs = this.defenitionUpdater.update(modelCells, crossTabCellWidth.defaultVal, crossTabCellHeight.defaultVal);
        const sumWidth = defs.columnDefs.reduce((acc, value) => {
            acc += value.width();
            return acc;
        }, 0);
        const sumHeight = defs.rowDefs.reduce((acc, value) => {
            acc += value.height();
            return acc;
        }, 0);
        const maxWidth = Math.min(sumWidth, Math.max(this.size.width(), this.parentModel().size.width() - this.location.x()));
        this._columnDefinitions(defs.columnDefs);
        this._rowDefinitions(defs.rowDefs);
        this.size.width(maxWidth);
        if (external_ko_namespaceObject.isObservable(this.size.width))
            this.size.width.valueHasMutated();
        this.size.height(sumHeight);
        this.update(false);
        undo = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this);
        undo && undo.end();
    }
    getFields() {
        return [].concat(this.rowFields(), this.columnFields(), this.dataFields());
    }
    getNames() {
        return {
            'columnFields': (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Column Field', 'DevExpress.XtraReports.UI.CrossTab.CrossTabColumnField'),
            'rowFields': (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Row Field', 'DevExpress.XtraReports.UI.CrossTab.CrossTabRowField'),
            'dataFields': (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Data Field', 'DevExpress.XtraReports.UI.CrossTab.CrossTabDataField')
        };
    }
    onDelete() {
        const root = this.root;
        this.dependentStyles = [];
        crossTabStyles.forEach(style => {
            if (root.stylesHelper()) {
                const targetStyle = root.stylesHelper().removeUnusedStyle(this[style.propertyName]());
                targetStyle && this.dependentStyles.push(targetStyle);
            }
            else {
                const targetStyle = root.findStyle(this[style.propertyName]());
                targetStyle && root.styles.remove(targetStyle) && this.dependentStyles.push(targetStyle);
            }
        });
    }
    preInitProperties() {
        const info = this.getInfo();
        this.getInfo = () => {
            info.forEach(item => {
                let type;
                if (item.propertyName === 'rowFields' || item.propertyName === 'columnFields')
                    type = CrossTabFieldModel;
                else if (item.propertyName === 'dataFields')
                    type = CrossTabDataFieldModel;
                else if (item.propertyName === 'controlParameters')
                    item.addHandler = () => new ControlParameter({}, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer(), this.root.dataSourceHelper, this.root.dataBindingsProvider);
                if (type)
                    item.addHandler = this._getCreator(type, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer(), this.getNames()[item.propertyName]);
            });
            return info;
        };
    }
    isPropertyDisabled(propertyName) {
        if (this.dataSource() === null) {
            return propertyName === 'dataMember' || propertyName === 'filterString';
        }
    }
    applyCells(cellsInfo, initOnly = false) {
        const newCells = [];
        const oldCells = [];
        cellsInfo.forEach((cell, index) => {
            let currentCell;
            cell.dependentFields = [this.dataFields()[cell.dataLevel], this.rowFields()[cell.rowLevel], this.columnFields()[cell.columnLevel]];
            if (initOnly)
                currentCell = findcells(this.cells(), cell._columnIndex(), cell._rowIndex())[0];
            else
                currentCell = this.cells().filter(x => {
                    if (x.kind() != cell.kind())
                        return false;
                    for (let i = 0; i < x.dependentFields.length; i++) {
                        if (x.dependentFields[i] != cell.dependentFields[i])
                            return false;
                    }
                    return true;
                })[0];
            if (!currentCell) {
                currentCell = controlsFactory().createControl(controlsFactory().controlsMap['XRCrossTabCell'].defaultVal, this);
                newCells.push(currentCell);
            }
            else {
                currentCell.reset();
                oldCells.push(currentCell);
            }
            this.applyCell(cell, currentCell);
        });
        for (let i = this.cells().length - 1; i >= 0; i--) {
            if (oldCells.indexOf(this.cells()[i]) == -1) {
                this.cells()[i].dispose();
                this.cells.splice(i, 1);
            }
        }
        newCells.forEach(x => this.cells.push(x));
        return oldCells.concat(newCells);
    }
    applyCell(from, to) {
        const info = from.getInfo();
        info.forEach(item => {
            to[item.propertyName](from[item.propertyName]());
        });
        ['dataLevel', 'rowLevel', 'columnLevel'].forEach(key => {
            if (from[key] != null)
                to[key] = from[key];
        });
        if (from.field)
            to.field(from.field());
        else if (to.field && to.field())
            to.field(null);
        to.kind(from.kind());
        to.dependentFields = from.dependentFields;
    }
    insertNewField(collectionName, insertPosition, fieldName, dataFieldLayout) {
        const newField = this.getInfo().filter(x => x.propertyName === collectionName)[0].addHandler();
        dataFieldLayout && this.layoutOptions.dataFieldLayout(DataFieldLayout[dataFieldLayout]);
        this[collectionName].splice(insertPosition, 0, newField);
        newField && newField.setFieldName(fieldName);
    }
    customizeExpressionCategories(tools, categories) {
        const fieldsCategory = categories.filter(item => item.content.name == 'dx-expressioneditor-fields')[0];
        fieldsCategory && categories.splice(categories.indexOf(fieldsCategory), 1);
    }
}
class CrossTabLayoutOptionsModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, parent, serializer) {
        super(model, serializer);
        this.parent = parent;
    }
    isPropertyDisabled(name) {
        switch (name) {
            case 'cornerHeaderDisplayMode':
                return this.parent.rowFields().length == 0 && this.parent.columnFields().length == 0;
            case 'dataFieldLayout':
                return this.parent.dataFields().length < 2;
            case 'columnTotalsPosition':
                return this.parent.columnFields().length < 1;
            case 'rowTotalsPosition':
                return this.parent.rowFields().length == 0 || this.hierarchicalRowLayout();
            case 'columnTotalHeaderPosition':
                return this.parent.columnFields().length < 2;
            case 'rowTotalHeaderPosition':
                return this.parent.rowFields().length < 2;
            case 'hierarchicalRowLayout':
                return this.parent.rowFields().length < 2 || this.rowTotalsPosition() === TotalsPosition[TotalsPosition.BeforeData];
        }
    }
    getInfo() { return crossTabLayoutOptionsInfo; }
}
class CrossTabFieldModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    constructor(model, parent, serializer, name) {
        super(model, serializer);
        this.getPath = (propertyName) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.parent.getPath('dataMember'), this.parent['dataMember']());
        this.isPropertyDisabled = (propertyName) => propertyName == 'fieldName' && this.parent.dataSource() == null;
        this.parent = parent;
        this._disposables.push(this.name = external_ko_namespaceObject.pureComputed(() => {
            if (this.fieldName())
                return name + ' (' + this.fieldName() + ')';
            return name;
        }));
        if (this.crossTabSortBySummaryInfo)
            this.crossTabSortBySummaryInfo.getPath = (propertyName) => this.getPath(propertyName);
    }
    setFieldName(fullPath) {
        const parts = fullPath.split('.');
        const dsHelper = this.parent.dsHelperProvider && this.parent.dsHelperProvider();
        if (dsHelper && parts.length >= 2) {
            let dataSource;
            if (this.parent.getPath('') === parts[0])
                dataSource = this.parent['dataSource']();
            else {
                dataSource = dsHelper && (dsHelper.findDataSourceInfoByID(parts[0])
                    || dsHelper.findDataSourceInfoByRef(parts[0]));
                dataSource && this.parent['dataSource'](dataSource.data);
            }
            dataSource && this.parent['dataMember'](parts.slice(1, -1).join('.'));
        }
        this.fieldName(parts.pop());
    }
    getInfo() { return crossTabGroupFieldInfo; }
}
class CrossTabDataFieldModel extends CrossTabFieldModel {
    getInfo() { return crossTabDataFieldInfo; }
}
class XRCrossTabSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.controls = external_ko_namespaceObject.observableArray();
        this._disposables.push((0,external_DevExpress_Analytics_Internal_namespaceObject.createObservableArrayMapCollection)(control.cells, this.controls, (item) => new XRCellsurface(item, context)));
        this.selectiontemplate = 'dxrd-crosstab';
    }
    selectLine(selection, cell, isMultiSelect, isRow) {
        if (!isMultiSelect)
            selection.initialize(this);
        const model = this.getControlModel();
        const surface = cell.surface;
        let cells;
        if (isRow)
            cells = findcells(model.cells(), null, cell._rowIndex());
        else
            cells = findcells(model.cells(), cell._columnIndex());
        cells.forEach(cell => {
            if (isMultiSelect) {
                selection.selectionWithCtrl(cell.surface);
                selection.applySelection();
            }
            else
                selection.selecting({ control: cell.surface, cancel: false });
        });
        if (!isMultiSelect)
            selection.swapFocusedItem(surface);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrGauge.js


const circularValues = [
    { displayValue: 'Half', value: 'Half', localizationId: 'GaugesPresetsStringId.ShapeHalf' },
    { displayValue: 'Full', value: 'Full', localizationId: 'GaugesPresetsStringId.ShapeFull' },
    { displayValue: 'QuarterLeft', value: 'QuarterLeft', localizationId: 'GaugesPresetsStringId.ShapeQuarterLeft' },
    { displayValue: 'QuarterRight', value: 'QuarterRight', localizationId: 'GaugesPresetsStringId.ShapeQuarterRight' },
    { displayValue: 'ThreeFourth', value: 'ThreeFourth', localizationId: 'GaugesPresetsStringId.ShapeThreeFourth' }
];
const linearValues = [
    { displayValue: 'Horizontal', value: 'Horizontal', localizationId: 'GaugesPresetsStringId.ShapeHorizontal' },
    { displayValue: 'Vertical', value: 'Vertical', localizationId: 'GaugesPresetsStringId.ShapeVertical' }
];
class XRGaugeViewModel extends XRControlViewModel {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this._disposables.push(this.viewType.subscribe((val) => {
            return this.viewStyle(val === 'Circular' ? circularValues[0].value : linearValues[0].value);
        }));
    }
    getInfo() {
        const serializationInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], super.getInfo());
        const viewStyleProperty = serializationInfo.filter((info) => { return info.propertyName === 'viewStyle'; })[0];
        viewStyleProperty.defaultVal = this.viewType && (this.viewType() === 'Linear') ? 'Horizontal' : 'Half';
        return serializationInfo;
    }
}
XRGaugeViewModel.bindings = ['ActualValue', 'Maximum', 'Minimum', 'TargetValue'];


;// ./node_modules/devexpress-reporting/designer/controls/xrLine.js



class XRLineSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this['lineWidth'] = control['lineWidth'];
        this['lineStyle'] = control['lineStyle'];
        this['lineDirection'] = control['lineDirection'];
        this.selectiontemplate = 'dxrd-control-selection';
        this.contenttemplate = 'dxrd-line-content';
        this._disposables.push(this.linePosition = external_ko_namespaceObject.pureComputed(() => {
            const result = {}, rect = this.rect();
            if (this['lineDirection']() === 'Horizontal') {
                result['x1'] = 0;
                result['x2'] = rect.width;
                result['y1'] = rect.height / 2;
                result['y2'] = rect.height / 2;
            }
            if (this['lineDirection']() === 'Vertical') {
                result['x1'] = rect.width / 2;
                result['x2'] = rect.width / 2;
                result['y1'] = 0;
                result['y2'] = rect.height;
            }
            if (this['lineDirection']() === 'BackSlant') {
                result['x1'] = 0;
                result['x2'] = rect.width;
                result['y1'] = 0;
                result['y2'] = rect.height;
            }
            if (this['lineDirection']() === 'Slant') {
                result['x1'] = 0;
                result['x2'] = rect.width;
                result['y1'] = rect.height;
                result['y2'] = 0;
            }
            return result;
        }));
        this._disposables.push(this.contentCss = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.stroke(), this.cssCalculator.strokeDashArray(), this.cssCalculator.strokeWidth());
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrPagebreak.js


class XRPageBreakSurface extends XRControlSurfaceBase {
    preInitProperties(control, context) {
        this._width = external_ko_namespaceObject.pureComputed({
            read: () => {
                return context.pageWidth() - context.margins.right() - context.margins.left();
            },
            write: () => { }
        });
    }
    constructor(control, context) {
        super(control, context, XRPageBreakSurface._unitProperties);
        this._disposables.push(this._width);
        this.template = 'dxrd-pagebreak';
        this.contenttemplate = 'dxrd-line-content';
        this.selectiontemplate = 'dxrd-pagebreak-selection';
        this._disposables.push(this.linePosition = external_ko_namespaceObject.pureComputed(() => {
            const rect = this.rect();
            return {
                'x1': 0,
                'x2': rect.width,
                'y1': rect.height / 2,
                'y2': rect.height / 2
            };
        }));
        this.contentCss = external_ko_namespaceObject.observable({
            'stroke': 'black',
            'strokeWidth': 1,
            'strokeDasharray': '4px, 4px'
        });
        this._disposables.push(this.lineHeight = external_ko_namespaceObject.pureComputed(() => {
            return this['position'].lineHeight() / this._context.zoom();
        }));
        this.css = external_ko_namespaceObject.observable({});
        this._disposables.push(this.isIntersect = external_ko_namespaceObject.pureComputed(() => { return false; }));
    }
    get isIntersectionDeny() { return true; }
}
XRPageBreakSurface._unitProperties = {
    _x: (o) => {
        return external_ko_namespaceObject.observable(0);
    },
    _y: (o) => {
        return o.location.y;
    },
    _height: (o) => {
        return external_ko_namespaceObject.observable(2);
    }
};


;// ./node_modules/devexpress-reporting/designer/controls/xrPageinfo.js

class XRPageInfoSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.displayText = () => {
            const format = control['textFormatString'] && control.textFormatString();
            if (format)
                return format;
            const value = control['pageInfo'](), info = pageInfoValuesMap.filter(item => item.value === value)[0];
            if (info)
                return info.displayValue;
            return value;
        };
    }
}
class XRPageInfoViewModel extends XRControlViewModel {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        const format = this['_model']['@Format'];
        if (format) {
            if (!this.textFormatString()) {
                this.textFormatString(format);
            }
            delete this['_model']['@Format'];
        }
    }
}
const pageInfoValuesMap = [
    { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.PageInfo.None' },
    { value: 'Number', displayValue: 'Page Number', localizationId: 'DevExpress.XtraPrinting.PageInfo.Number' },
    { value: 'NumberOfTotal', displayValue: "'Current of Total' Page Numbers", localizationId: 'DevExpress.XtraPrinting.PageInfo.NumberOfTotal' },
    { value: 'RomLowNumber', displayValue: 'Page Number (Roman, Lowercase)', localizationId: 'DevExpress.XtraPrinting.PageInfo.RomLowNumber' },
    { value: 'RomHiNumber', displayValue: 'Page Number (Roman, Uppercase)', localizationId: 'DevExpress.XtraPrinting.PageInfo.RomHiNumber' },
    { value: 'DateTime', displayValue: 'Current Date and Time', localizationId: 'DevExpress.XtraPrinting.PageInfo.DateTime' },
    { value: 'UserName', displayValue: 'User Name', localizationId: 'DevExpress.XtraPrinting.PageInfo.UserName' },
    { value: 'Total', displayValue: 'Page Count', localizationId: 'DevExpress.XtraPrinting.PageInfo.Total' }
];

;// external "DevExpress.Reporting.Export.Metadata"
const external_DevExpress_Reporting_Export_Metadata_namespaceObject = DevExpress.Reporting.Export.Metadata;
;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrSubreport.js









const reportSourceUrl = { propertyName: 'reportSourceUrl', modelName: '@ReportSourceUrl', defaultVal: '', editor: designerEditorTemplates.getEditor('reportSourceUrl'), displayName: 'Report Source Url', localizationId: 'DevExpress.XtraReports.UI.XRSubreport.ReportSourceUrl' };
const reportSource = {
    propertyName: 'reportSource', modelName: 'ReportSource',
    from: SubreportViewModel.from,
    toJsonObject: SubreportViewModel.toJson
};
const parameterBindings = { propertyName: 'parameterBindings', modelName: 'ParameterBindings', displayName: 'Parameter Bindings', localizationId: 'DevExpress.XtraReports.UI.XRSubreport.ParameterBindings', array: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'), addHandler: ParameterBinding.createNew, template: '#dxrd-commonCollectionItem' };
const generateOwnPages = { propertyName: 'generateOwnPages', defaultVal: false, modelName: '@GenerateOwnPages', displayName: 'Generate Own Pages', localizationId: 'DevExpress.XtraReports.UI.XRSubreport.GenerateOwnPages', descriptionLocalizationId: 'DevExpress.XtraReports.UI.SubreportBase.GenerateOwnPages.Description', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const subreportSerializationsInfo = [
    reportSource, reportSourceUrl, subreportScripts, parameterBindings, bookmarkParent, canShrink, generateOwnPages, formattingRuleLinks
].concat(sizeLocation, baseControlProperties.filter(x => x.modelName != metadata_tag.modelName));

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrPdfContent.js









const pdfSource = { propertyName: 'source', modelName: '@SourceSerializable', displayName: 'Source', defaultVal: null, editor: designerEditorTemplates.getEditor('pdfContentLoad'), localizationId: 'DevExpress.XtraReports.UI.XRPdfContent.Source' };
const pdfSourceUrl = { propertyName: 'sourceUrl', modelName: '@SourceUrl', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), displayName: 'Source Url', localizationId: 'DevExpress.XtraReports.UI.XRPdfContent.SourceUrl' };
const generateOwnPagesPdfContent = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, generateOwnPages, { defaultVal: true, localizationId: 'DevExpress.XtraReports.UI.XRPdfContent.GenerateOwnPages' });
const pageCount = { propertyName: 'pageCount', modelName: '@PageCount', displayName: 'PageCount', localizationId: 'DevExpress.XtraReports.UI.XRPdfContent.PageCount', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), disabled: true, defaultVal: 0 };
const pageRangePdfContent = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, external_DevExpress_Reporting_Export_Metadata_namespaceObject.pageRange, { localizationId: 'DevExpress.XtraReports.UI.XRPdfContent.PageRange' });
const pdfContentSerializationInfo = [pdfSource, pdfSourceUrl, pdfContentScripts, generateOwnPagesPdfContent, pageRangePdfContent, pageCount, dataBindings(['Bookmark', 'Source', 'SourceUrl', 'PageRange'])].concat(sizeLocation, baseControlProperties, bookmarkGroup, [metadata_tag]);
const popularPropertiesPdfContent = ['name', 'source', 'sourceUrl', 'generateOwnPages'];

;// ./node_modules/devexpress-reporting/designer/controls/_xrTodoControl.js


class UnknownViewModel extends XRControlViewModel {
    constructor(model, parent, serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()) {
        super(model, parent, serializer);
        serializer._collectLinksAndEnumRefs(this._model);
    }
}
class TodoControlSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this['controlTypeClass'] = 'dxrd-image-todo-' + control.controlType.slice(2).toLowerCase();
        this['controlTypeIconTemplate'] = 'dxrd-svg-todo-' + control.controlType.slice(2).toLowerCase();
        this.template = 'dxrd-todocontrol';
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrPdfContent.js






class XRPdfContentViewModel extends XRControlViewModel {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.imageSource = external_ko_namespaceObject.observable('');
        if (!!this.sourceUrl())
            this.source(null);
        const parentSize = () => (this.parentModel() ? this.parentModel().size.width() : 0);
        this._disposables.push(this.sourceUrl.subscribe(newVal => {
            if (!!newVal)
                this.source(null);
            this._getPdfContentData(!!newVal);
        }), this.source.subscribe(newVal => {
            if (!!newVal)
                this.sourceUrl('');
            this._getPdfContentData(!!newVal);
        }), external_ko_namespaceObject.computed(() => {
            if (this.generateOwnPages()) {
                this.size.width(parentSize());
                this.location.x(0);
            }
        }), this.location.x.subscribe(val => {
            if (this.generateOwnPages())
                this.location.x(0);
        }), this.size.width.subscribe(val => {
            if (this.generateOwnPages())
                this.size.width(parentSize());
        }), this.generateOwnPages.subscribe(val => {
            this._getPdfContentData(true);
        }), this.pageRange.subscribe(val => {
            this._getPdfContentData(false);
        }));
        this.generateOwnPages.valueHasMutated();
        this._disposables.push(this.textContent = external_ko_namespaceObject.pureComputed(() => {
            const sourceUrlExpression = this.getExpressionBinding('SourceUrl');
            const sourceExpression = this.getExpressionBinding('Source');
            let prefix = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Source', 'DevExpress.XtraReports.UI.XRPdfContent.Source');
            let suffix = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('(none)', 'DxDesignerStringId.None');
            if ((this.sourceUrl())) {
                prefix = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Source Url', 'DevExpress.XtraReports.UI.XRPdfContent.SourceUrl');
                suffix = this.sourceUrl();
            }
            else if (sourceUrlExpression != null) {
                prefix = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Source Url', 'DevExpress.XtraReports.UI.XRPdfContent.SourceUrl');
                suffix = sourceUrlExpression;
            }
            else if (this.source()) {
                suffix = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('PDF Content', 'ReportStringId.XRPdfContent_Content');
            }
            else if (sourceExpression != null) {
                suffix = sourceExpression;
            }
            return prefix + ': ' + suffix;
        }));
    }
    canFit() {
        return this.size.width() / this.size.height() != this.imageWidth / this.imageHeight;
    }
    fitToContent() {
        if (!this.imageSource())
            return;
        const width = this.size.width();
        const height = this.size.height();
        const coif = this.imageWidth / this.imageHeight;
        if (coif === 0 || !this.canFit())
            return;
        if (width / height > this.imageWidth / this.imageHeight) {
            this.size.width(height * coif);
        }
        else {
            this.size.height(width / coif);
        }
    }
    _getPdfContentData(checkSource) {
        const source = this.sourceUrl() || this.source();
        if (this.generateOwnPages() || (checkSource && (!source && !this._sourceItem || !!this._sourceItem && this._sourceItem === source)))
            return;
        this._sourceItem = source;
        ReportRenderingService.getPdfContentData(this).done((result) => {
            this.pageCount(result.PageCount);
            this.imageSource('data:image/png;base64,' + result.Img);
            this.imageWidth = result.Width;
            this.imageHeight = result.Height;
        }).fail(function (jqXHR) {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('It is impossible to get Pdf Content Preview');
        });
    }
    _getExpressionNameByPropertyName(propertyName) {
        const modelName = super._getExpressionNameByPropertyName(propertyName);
        if (!!modelName && pdfSource.modelName.indexOf(modelName) !== -1)
            return 'Source';
        return modelName;
    }
}
class XRPdfContentSurface extends TodoControlSurface {
    _getHandles(generateOwnPages) {
        return generateOwnPages ? 's,n' : 'all';
    }
    constructor(control, context) {
        super(control, context);
        this.selectiontemplate = 'dxrd-pdfcontent-selection';
        this.contenttemplate = 'dxrd-pdfcontent-control-content';
        this.template = 'dxrd-control';
        this.displayText = () => { return this.getControlModel().name(); };
        this.generateOwnPages = control.generateOwnPages;
        this._handles = external_ko_namespaceObject.observable(this._getHandles(this.generateOwnPages()));
        this._disposables.push(this.contentCss = external_ko_namespaceObject.computed(() => {
            const imageSource = control.imageSource();
            if (this.generateOwnPages() || !imageSource)
                return { background: 'unset' };
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, { background: ' url(' + imageSource + ') 50% 50% / contain no-repeat content-box transparent' });
        }));
    }
    getResizableOptions(resizeHandler) {
        this._disposables.push(this.generateOwnPages.subscribe((newVal) => {
            this._handles(this._getHandles(newVal));
        }));
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, resizeHandler, {
            handles: this._handles
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrPdfSignature.js




class XRPdfSignatureModel extends XRControlViewModel {
    constructor() {
        super(...arguments);
        this._displayDocumentSignatureSubscribed = false;
    }
    subscribeSignature(allControls) {
        if (!this._displayDocumentSignatureSubscribed) {
            this._displayDocumentSignatureSubscribed = true;
            this._disposables.push(this.signatureOptions.displayDocumentSignature.subscribe(newVal => {
                if (newVal) {
                    const control = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(allControls(), (item) => this !== item && item.signatureOptions.displayDocumentSignature());
                    control && control.signatureOptions.displayDocumentSignature(false);
                }
            }));
        }
    }
}
class XRPdfSignatureSurface extends XRControlSurface {
    getSignatureInformationString(control) {
        const viewInfo = {
            certificateName: this.certificateName,
            distinguishedName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('your distinguished name here', 'PreviewStringId.SignatureFillerText_DistinguishedName'),
            reason: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('your signing reason here', 'PreviewStringId.SignatureFillerText_Reason'),
            location: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('your signing location here', 'PreviewStringId.SignatureFillerText_Location'),
            dateString: new Date(new Date().setHours(0, 0, 0, 0)).toLocaleString()
        };
        const parts = [];
        const showCaptions = control.signatureOptions.showCaptions();
        if (control.signatureOptions.showCertificateName())
            parts.push((showCaptions ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Digitally signed by', 'PreviewStringId.SignatureCaptions_CertificateName') + ' ' : '') + viewInfo.certificateName);
        if (control.signatureOptions.showDistinguishedName())
            parts.push((showCaptions ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('DN:', 'PreviewStringId.SignatureCaptions_DistinguishedName') + ' ' : '') + viewInfo.distinguishedName);
        if (control.signatureOptions.showSignatureReason())
            parts.push((showCaptions ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Reason:', 'PreviewStringId.SignatureCaptions_Reason') + ' ' : '') + viewInfo.reason);
        if (control.signatureOptions.showLocation())
            parts.push((showCaptions ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Location:', 'PreviewStringId.SignatureCaptions_Location') + ' ' : '') + viewInfo.location);
        if (control.signatureOptions.showSignatureDate())
            parts.push((showCaptions ? (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Date:', 'PreviewStringId.SignatureCaptions_Date') + ' ' : '') + viewInfo.dateString);
        return parts.join('\r\n');
    }
    constructor(control, context) {
        super(control, context);
        this.contenttemplate = 'dxrd-pdfsignature-content';
        this['multiline'] = true;
        this.displayText = () => {
            if (control.signatureOptions.displayDocumentSignature())
                return this.getSignatureInformationString(control);
            else
                return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Digital Signature', 'PreviewStringId.SignatureUnsignedCaption');
        };
        this._disposables.push(this.showSkeleton = external_ko_namespaceObject.computed(() => {
            return !control.signatureOptions.displayDocumentSignature();
        }), this.visibleImage = external_ko_namespaceObject.computed(() => {
            return control.signatureOptions.imageDisplayMode() == 'Show';
        }), this.hideImage = external_ko_namespaceObject.computed(() => {
            return control.signatureOptions.imageDisplayMode() == 'Hide';
        }), this.visibleText = external_ko_namespaceObject.computed(() => {
            return control.signatureOptions.showCertificateName() ||
                control.signatureOptions.showDistinguishedName() ||
                control.signatureOptions.showLocation() ||
                control.signatureOptions.showSignatureDate() ||
                control.signatureOptions.showSignatureReason();
        }));
    }
    get certificateName() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('your common name here', 'PreviewStringId.SignatureFillerText_CertificateName');
    }
}

;// ./node_modules/devexpress-reporting/designer/utils/base64ImageParser.js
class Base64ImageParser {
    static getImageRatio(data, format) {
        const imageRatio = { x: 1, y: 1 };
        const byteArray = this._getDataChunks(data, format);
        let dpiX, dpiY;
        if (format === 'png') {
            if (!this._pngHasDpiChunks(data) || byteArray.length < 8)
                return imageRatio;
            dpiX = this._countDpiFromBytes(byteArray.slice(0, 4));
            dpiY = this._countDpiFromBytes(byteArray.slice(4, 8));
        }
        if (format === 'jpg' || format === 'jpeg') {
            if (byteArray.length < 4)
                return imageRatio;
            dpiX = this._countDpiFromBytes(byteArray.slice(0, 2));
            dpiY = this._countDpiFromBytes(byteArray.slice(2, 4));
        }
        if (dpiX && dpiY) {
            const ppi = this.getMonitorPPI();
            imageRatio.x = ppi / dpiX;
            imageRatio.y = ppi / dpiY;
        }
        return imageRatio;
    }
    static _getDataChunks(encoded, format) {
        const byteArray = [];
        if (!encoded)
            return [];
        const decodeString = atob(encoded);
        const startOfChunks = format === 'png' ? decodeString.indexOf('pHYs') + 4 : 14;
        if (startOfChunks == 3 || startOfChunks >= decodeString.length)
            return [];
        for (let i = startOfChunks; i < decodeString.length; i++) {
            byteArray.push(decodeString.charCodeAt(i));
        }
        return byteArray;
    }
    static _countDpiFromBytes(byteArray) {
        const defaultValuePerMeter = 39.370;
        if (byteArray && byteArray.length == 4)
            return ((byteArray[0] << 24) + (byteArray[1] << 16) + (byteArray[2] << 8) + byteArray[3]) / defaultValuePerMeter;
        if (byteArray && byteArray.length == 2)
            return (byteArray[0] << 8) + byteArray[1];
    }
    static _pngHasDpiChunks(data) {
        return data.indexOf('AAlwSFlz') != -1 || data.indexOf('AAAJcEhZ') != -1 || data.indexOf('AAAACXBI') != -1;
    }
    static getMonitorPPI() {
        const el = document.createElement('div');
        el.style.width = '1in';
        document.body.appendChild(el);
        const ppi = el.offsetWidth;
        document.body.removeChild(el);
        return ppi;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrPicturebox.js







class XRPictureBoxViewModel extends XRControlViewModel {
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.imageRatio = { x: 1, y: 1 };
        this.originalImageWidth = external_ko_namespaceObject.observable();
        this.originalImageHeight = external_ko_namespaceObject.observable();
        const imageHeight = external_ko_namespaceObject.observable(this.size.height()), imageWidth = external_ko_namespaceObject.observable(this.size.width());
        this._sizing = external_ko_namespaceObject.observable(this.sizing());
        this.size['_width'] = this.size.width;
        this.size['_height'] = this.size.height;
        this.size.isPropertyDisabled = (propertyName) => {
            return this._sizing() === 'AutoSize';
        };
        if (!this.imageSource() && model['@Image']) {
            this.imageSource(new external_DevExpress_Reporting_namespaceObject.ImageSource('img', model['@Image']));
            delete this['_model']['@Image'];
        }
        let oldSizingValue = this._sizing();
        this._disposables.push(this.sizing = external_ko_namespaceObject.computed({
            read: () => {
                return this._sizing();
            },
            write: (value) => {
                const undo = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this);
                undo && undo.start();
                if (oldSizingValue === 'AutoSize') {
                    this.size['_width'](imageWidth());
                    this.size['_height'](imageHeight());
                }
                oldSizingValue = value;
                this._sizing(value);
                if (value === 'CenterImage')
                    this.imageAlignment('MiddleCenter');
                undo && undo.end();
            }
        }));
        this._disposables.push(this.size.width = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this.isAutoSize ? imageWidth() : this.size['_width']();
            },
            write: (value) => {
                if (!this.isAutoSize) {
                    this.size['_width'](value);
                }
            }
        }));
        this._disposables.push(this.size.height = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this.isAutoSize ? imageHeight() : this.size['_height']();
            },
            write: (value) => {
                if (!this.isAutoSize) {
                    this.size['_height'](value);
                }
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const img = new Image();
            img.onload = () => {
                const report = this.root;
                this._disposables.push(external_ko_namespaceObject.computed(() => {
                    this.originalImageWidth((0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(img.width * this.imageRatio.x, report.measureUnit(), 1));
                    this.originalImageHeight((0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(img.height * this.imageRatio.y, report.measureUnit(), 1));
                }));
            };
            const imageSource = this.imageSource();
            if (imageSource) {
                img.src = imageSource.getDataUrl();
                this.imageRatio = Base64ImageParser.getImageRatio(imageSource.data, imageSource.sourceType);
            }
            else
                this.imageRatio = { x: 1, y: 1 };
        }));
        const toPixel = (value) => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(value, this.root['measureUnit']());
        };
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (this.isAutoSize && this.imageSource.peek()) {
                const borders = new external_DevExpress_Analytics_Internal_namespaceObject.BordersModel({ value: this['borders'] }), borderWidth = this['borderWidth']() || 0, paddings = (this['paddingObj']);
                const top = borders.top() ? borderWidth : 0;
                const bottom = borders.bottom() ? borderWidth : 0;
                const left = borders.left() ? borderWidth : 0;
                const right = borders.right() ? borderWidth : 0;
                imageWidth(this.originalImageWidth() + right + left + toPixel(paddings._get('left')) + toPixel(paddings._get('right')));
                imageHeight(this.originalImageHeight() + top + bottom + toPixel(paddings._get('top')) + toPixel(paddings._get('bottom')));
            }
        }));
        this._disposables.push(this.isSmallerImage = external_ko_namespaceObject.pureComputed(() => {
            return this.originalImageWidth() <= this.size.width() && this.originalImageHeight() <= this.size.height();
        }));
        this._disposables.push(this.imageUrl.subscribe((newVal) => {
            if (newVal) {
                this.imageSource(null);
                this.imageRatio = { x: 1, y: 1 };
            }
        }));
        this._disposables.push(this.imageSource.subscribe((newVal) => {
            if (newVal) {
                this.imageUrl(imageUrl.defaultVal);
            }
        }));
    }
    isAlignmentDisabled() {
        return ['Tile', 'StretchImage', 'AutoSize', 'Cover'].indexOf(this._sizing()) !== -1;
    }
    isPropertyDisabled(propertyName) {
        if (propertyName === 'imageAlignment')
            return this.isAlignmentDisabled();
        return super.isPropertyDisabled(propertyName);
    }
    get isAutoSize() {
        return this._sizing() === 'AutoSize';
    }
}
const backgroundSizeCss = ['-o-background-size', 'mozBackgroundSize', 'backgroundSize'];
const backgroundOriginCss = ['background-origin', '-webkit-background-origin', ' -o-background-origin', 'mozBackgroundOrigin', 'backgroundOrigin'];
class XRPictureBoxSurface extends XRControlSurface {
    _createBackgroundPosition(alignment, sizing) {
        if (alignment === 'Default' && (sizing === 'Squeeze' || sizing === 'ZoomImage')) {
            alignment = 'MiddleCenter';
        }
        let x = '0%';
        let y = '0%';
        if (alignment.indexOf('Middle') !== -1)
            y = '50%';
        if (alignment.indexOf('Bottom') !== -1)
            y = '100%';
        if (alignment.indexOf('Center') !== -1)
            x = '50%';
        if (alignment.indexOf('Right') !== -1)
            x = '100%';
        return {
            backgroundPosition: [x, y].join(' ')
        };
    }
    _createBackimage(background, urlContent, sizing, isSmallerImage) {
        let backgroundResult = {};
        if (urlContent) {
            backgroundResult = { background: background + ' url(' + urlContent + ') no-repeat' };
            if (this._control.imageSource()) {
                const imageFormat = this._control.imageSource().sourceType;
                if (imageFormat == 'png' || imageFormat == 'jpg' || imageFormat == 'jpeg') {
                    const size = this._control.originalImageWidth() + 'px ' + this._control.originalImageHeight() + 'px';
                    backgroundSizeCss.forEach(propName => { backgroundResult[propName] = size; });
                }
            }
            if (sizing) {
                if (sizing === 'Squeeze') {
                    sizing = isSmallerImage ? 'CenterImage' : 'ZoomImage';
                }
                switch (sizing) {
                    case 'StretchImage':
                        for (let i = 0; i < backgroundSizeCss.length; i++) {
                            backgroundResult[backgroundSizeCss[i]] = '100% 100%';
                        }
                        break;
                    case 'ZoomImage':
                    case 'Cover':
                        for (let i = 0; i < backgroundSizeCss.length; i++) {
                            backgroundResult[backgroundSizeCss[i]] = sizing === 'ZoomImage' ? 'contain' : 'cover';
                        }
                        backgroundResult['backgroundPosition'] = 'center center';
                        break;
                    case 'AutoSize':
                        for (let i = 0; i < backgroundSizeCss.length; i++) {
                            backgroundResult[backgroundSizeCss[i]] = '100% 100%';
                        }
                        break;
                    case 'Tile':
                        backgroundResult['backgroundRepeat'] = 'repeat';
                }
            }
            return backgroundResult;
        }
        backgroundResult = { background: background };
        return backgroundResult;
    }
    _createBackgroundOrigin() {
        const result = {};
        for (let i = 0; i < backgroundOriginCss.length; i++) {
            result[backgroundOriginCss[i]] = 'content-box';
        }
        result['width'] = this.contentWidthWithoutZoom() + 'px';
        result['height'] = this.contentHeightWithoutZoom() + 'px';
        return result;
    }
    constructor(model, context) {
        super(model, context);
        this.selectiontemplate = 'dxrd-picturebox-selection';
        const control = this.getControlModel();
        this.contentHeightWithoutZoom.dispose();
        this.contentWidthWithoutZoom.dispose();
        this.contentSizes.dispose();
        this._disposables.push(this.contentSizes = external_ko_namespaceObject.pureComputed(() => this.cssCalculator.contentSizeCss(this.rect().width, this.rect().height, this._context.zoom(), this._control['borders'](), this._control.paddingObj)));
        this._disposables.push(this.contentHeightWithoutZoom = external_ko_namespaceObject.pureComputed(() => this.contentSizes().height / this._context.zoom()));
        this._disposables.push(this.contentWidthWithoutZoom = external_ko_namespaceObject.pureComputed(() => this.contentSizes().width / this._context.zoom()));
        this._disposables.push(this.css = external_ko_namespaceObject.pureComputed(() => { return {}; }));
        this._disposables.push(this.contentCss = external_ko_namespaceObject.pureComputed(() => {
            const imageSource = control.imageSource();
            const urlContent = imageSource
                ? imageSource.getDataUrl()
                : control.imageUrl();
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this._createBackimage(control['backColor'](), urlContent, control.sizing(), control.isSmallerImage()), this._createBackgroundOrigin(), control.isAlignmentDisabled() ? {} : this._createBackgroundPosition(control.imageAlignment(), control.sizing()), this.cssCalculator.createVerticalAlignment('Top'));
        }));
    }
    getResizeOptions(resizeHandler) {
        if (!this.resizeOptions && resizeHandler) {
            const resizeDisabled = external_ko_namespaceObject.computed(() => {
                return resizeHandler.disabled && resizeHandler.disabled() || this._control.sizing() === 'AutoSize';
            });
            this.resizeOptions = {
                disabled: resizeDisabled,
                snapHelper: resizeHandler.snapHelper,
                starting: resizeHandler.starting,
                stopped: resizeHandler.stopped
            };
            this._disposables.push(resizeDisabled);
        }
        return this.resizeOptions;
    }
    getAdornTemplate() {
        const superAdornTemplate = super.getAdornTemplate(), placeholder = this.hasBindings || !this.getControlModel().imageSource() ? 'dxrd-image-surface-picturebox_placeholder' : '';
        return superAdornTemplate + (superAdornTemplate && placeholder ? ' ' : '') + placeholder;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrRichText.js





var XRRichTextStreamType;
(function (XRRichTextStreamType) {
    XRRichTextStreamType[XRRichTextStreamType["RtfText"] = 0] = "RtfText";
    XRRichTextStreamType[XRRichTextStreamType["PlainText"] = 1] = "PlainText";
    XRRichTextStreamType[XRRichTextStreamType["HtmlText"] = 2] = "HtmlText";
    XRRichTextStreamType[XRRichTextStreamType["XmlText"] = 3] = "XmlText";
})(XRRichTextStreamType || (XRRichTextStreamType = {}));
class XRRichViewModel extends XRControlViewModel {
    _toStreamType(extension) {
        switch (extension.toLowerCase()) {
            case 'txt':
                return XRRichTextStreamType.PlainText;
            case 'htm':
            case 'html':
                return XRRichTextStreamType.HtmlText;
            case 'docx':
                return XRRichTextStreamType.XmlText;
        }
        return XRRichTextStreamType.RtfText;
    }
    getInfo() {
        const serializationInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], super.getInfo());
        if (!(getRichEditSurface()() instanceof XRRichSurface)) {
            serializationInfo.filter(x => XRRichViewModel._hiddenProperties.some(propertyName => propertyName === x.propertyName))
                .forEach(x => x.visible = false);
        }
        return serializationInfo;
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.format = external_ko_namespaceObject.observable(XRRichTextStreamType.RtfText);
        this._newDocumentData = external_ko_namespaceObject.observable(null);
        this.textRtf = external_ko_namespaceObject.observable('');
        this._rtf = external_ko_namespaceObject.observable('');
        let nameSubscribe = null;
        nameSubscribe = external_ko_namespaceObject.computed(() => {
            const newVal = this.name();
            if (!this.textRtf() && newVal) {
                this.textRtf(newVal);
                nameSubscribe && nameSubscribe.dispose();
            }
        }).extend({ rateLimit: { method: 'notifyWhenChangesStop', timeout: 1 } });
        this._disposables.push(this._newDocumentData.subscribe((newVal) => {
            if (newVal)
                this.format(this._toStreamType(newVal.format));
            else
                this.format(XRRichTextStreamType.RtfText);
        }));
        this._disposables.push(nameSubscribe);
    }
    get textEditableProperty() { return this.textRtf; }
}
XRRichViewModel._hiddenProperties = ['_rtf', 'textRtf'];


;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrShape.js









const shapes = [
    { value: 'Rectangle', displayValue: 'Rectangle', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Rectangle' },
    { value: 'Ellipse', displayValue: 'Ellipse', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Ellipse' },
    { value: 'Top Arrow', displayValue: 'Top Arrow', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.TopArrow' },
    { value: 'Right Arrow', displayValue: 'Right Arrow', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.RightArrow' },
    { value: 'Bottom Arrow', displayValue: 'Bottom Arrow', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.BottomArrow' },
    { value: 'Left Arrow', displayValue: 'Left Arrow', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.LeftArrow' },
    { value: 'Triangle', displayValue: 'Triangle', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Triangle' },
    { value: 'Square', displayValue: 'Square', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Square' },
    { value: 'Pentagon', displayValue: 'Pentagon', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Pentagon' },
    { value: 'Hexagon', displayValue: 'Hexagon', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Hexagon' },
    { value: 'Octagon', displayValue: 'Octagon', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Octagon' },
    { value: '3-Point Star', displayValue: '3-Point Star', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.ThreePointStar' },
    { value: '4-Point Star', displayValue: '4-Point Star', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.FourPointStar' },
    { value: '5-Point Star', displayValue: '5-Point Star', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.FivePointStar' },
    { value: '6-Point Star', displayValue: '6-Point Star', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.SixPointStar' },
    { value: '8-Point Star', displayValue: '8-Point Star', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.EightPointStar' },
    { value: 'Vertical Line', displayValue: 'Vertical Line', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.VerticalLine' },
    { value: 'Horizontal Line', displayValue: 'Horizontal Line', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.HorizontalLine' },
    { value: 'Slant Line', displayValue: 'Slant Line', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.SlantLine' },
    { value: 'Backslant Line', displayValue: 'Backslant Line', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.BackslantLine' },
    { value: 'Cross', displayValue: 'Cross', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Cross' },
    { value: 'Bracket', displayValue: 'Bracket', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Bracket' },
    { value: 'Brace', displayValue: 'Brace', localizationId: 'DevExpress.XtraPrinting.Shape.Native.ShapeId.Brace' },
];
const shapeType = { propertyName: 'shapeType', modelName: '@ShapeName', defaultVal: 'Ellipse' };
const stretch = { propertyName: 'stretch', modelName: '@Stretch', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), displayName: 'Stretch', localizationId: 'DevExpress.XtraReports.UI.XRShape.Stretch' };
const fillColor = { propertyName: 'fillColor', modelName: '@FillColor', defaultVal: 'transparent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Fill Color', localizationId: 'DevExpress.XtraReports.UI.XRShape.FillColor' };
const Shape = { propertyName: 'Shape', modelName: 'Shape' };
const shapeFake = { propertyName: 'shapeFake', editor: designerEditorTemplates.getEditor('contentByType'), displayName: 'Shape', valuesArray: shapes, localizationId: 'DevExpress.XtraReports.UI.XRShape.Shape' };
const shapeElementSerializationsInfo = [shapeType];
const fillet = { propertyName: 'fillet', modelName: '@Fillet', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Fillet', localizationId: 'DevExpress.XtraPrinting.Shape.FilletShapeBase.Fillet' };
const shapeRectangleSerializationsInfo = [shapeType, fillet];
const shapeStarSerializationsInfo = [
    shapeType,
    { propertyName: 'concavity', modelName: '@Concavity', defaultVal: 50, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Concavity', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeStar.Concavity' },
    { propertyName: 'starPointCount', modelName: '@StarPointCount', defaultVal: 3, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Count of Star Points', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeStar.StarPointCount' },
    fillet
];
const shapeBraceSerializationsInfo = [
    shapeType,
    { propertyName: 'fillet', modelName: '@Fillet', defaultVal: 50, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Fillet', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeBrace.Fillet' },
    { propertyName: 'tailLength', modelName: '@TailLength', defaultVal: 20, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: "Tail\'s Length", localizationId: 'DevExpress.XtraPrinting.Shape.ShapeBrace.TailLength' },
    { propertyName: 'tipLength', modelName: '@TipLength', defaultVal: 20, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: "Tip\'s Length", localizationId: 'DevExpress.XtraPrinting.Shape.ShapeBracket.TipLength' }
];
const shapeBracketSerializationsInfo = [
    shapeType,
    { propertyName: 'tipLength', modelName: '@TipLength', defaultVal: 20, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: "Tip\'s Length", localizationId: 'DevExpress.XtraPrinting.Shape.ShapeBracket.TipLength' }
];
const shapePolygonSerializationsInfo = [
    shapeType, fillet,
    { propertyName: 'numberOfSides', modelName: '@NumberOfSides', defaultVal: 3, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Number of Sides', localizationId: 'DevExpress.XtraPrinting.Shape.ShapePolygon.NumberOfSides' },
];
const shapeArrowSerializationsInfo = [
    shapeType,
    { propertyName: 'arrowHeight', modelName: '@ArrowHeight', defaultVal: 50, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Arrow Height', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeArrow.ArrowHeight' },
    { propertyName: 'arrowWidth', modelName: '@ArrowWidth', defaultVal: 50, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Arrow Width', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeArrow.ArrowWidth' },
    fillet
];
const shapeCrossSerializationsInfo = [
    shapeType, fillet,
    { propertyName: 'horizontalLineWidth', modelName: '@HorizontalLineWidth', defaultVal: 50, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Horizontal Line Width', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeCross.HorizontalLineWidth' },
    { propertyName: 'verticalLineWidth', modelName: '@VerticalLineWidth', defaultVal: 50, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Vertical Line Width', localizationId: 'DevExpress.XtraPrinting.Shape.ShapeCross.VerticalLineWidth' }
];
const shapesMap = {
    'Rectangle': shapeRectangleSerializationsInfo,
    'Arrow': shapeArrowSerializationsInfo,
    'Ellipse': shapeElementSerializationsInfo,
    'Polygon': shapePolygonSerializationsInfo,
    'Star': shapeStarSerializationsInfo,
    'Line': shapeElementSerializationsInfo,
    'Bracket': shapeBracketSerializationsInfo,
    'Cross': shapeCrossSerializationsInfo,
    'Brace': shapeBraceSerializationsInfo
};
const shapeSerializationsInfo = [
    lineWidth, metadata_lineStyle, foreColor, Shape, fillColor, stretch, metadata_angle,
    anchorVertical, anchorHorizontal, controlScripts, shapeFake, action,
    dataBindings(['Bookmark', 'NavigateUrl', 'Tag']),
].concat(sizeLocation, commonControlProperties, navigationGroup);
const popularPropertiesShape = ['stretch', 'fillColor', 'lineWidth', 'angle', 'bookmark', 'bookmarkParent', 'shapeFake'];

;// ./node_modules/devexpress-reporting/designer/controls/xrShape.js






class XRShapeViewModel extends XRControlViewModel {
    static createShape(model, serializer = null) {
        const type = model && model['@ShapeName'] || 'Ellipse';
        const shapeInfo = shapesMap[type];
        const newShape = { 'shapeType': external_ko_namespaceObject.observable(type), 'getInfo': () => { return shapeInfo; } };
        (serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()).deserialize(newShape, model);
        return newShape;
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.Shape(XRShapeViewModel.createShape(this.Shape() || {}, serializer));
        this.shapeFake = {
            type: external_ko_namespaceObject.pureComputed({
                read: () => {
                    return this.Shape()['shapeType']();
                },
                write: (val) => {
                    const selectedShape = XRShapeViewModel.shapes.filter((shape) => { return shape['displayName'] === val; })[0];
                    const shape = XRShapeViewModel.createShape((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ShapeName': selectedShape['type'] }, selectedShape['val']), serializer);
                    if (selectedShape['angle'] !== void 0) {
                        this['angle'](selectedShape['angle']);
                    }
                    if (XRShapeViewModel.timeout === 0) {
                        this.Shape(shape);
                    }
                    else {
                        setTimeout(() => {
                            this.Shape(shape);
                        }, XRShapeViewModel.timeout);
                    }
                }
            }),
            content: this.Shape
        };
        this._disposables.push(this.shapeFake.type);
    }
}
XRShapeViewModel.timeout = 1;
XRShapeViewModel.shapes = [
    {
        displayName: 'Rectangle',
        type: 'Rectangle'
    },
    {
        displayName: 'Ellipse'
    },
    {
        displayName: 'Top Arrow',
        angle: 0,
        type: 'Arrow'
    },
    {
        displayName: 'Right Arrow',
        angle: 270,
        type: 'Arrow'
    },
    {
        displayName: 'Bottom Arrow',
        angle: 180,
        type: 'Arrow'
    },
    {
        displayName: 'Left Arrow',
        angle: 90,
        type: 'Arrow'
    },
    {
        displayName: 'Triangle',
        type: 'Polygon'
    },
    {
        displayName: 'Square',
        val: {
            '@NumberOfSides': 4
        },
        type: 'Polygon'
    },
    {
        displayName: 'Pentagon',
        val: {
            '@NumberOfSides': 5
        },
        type: 'Polygon'
    },
    {
        displayName: 'Hexagon',
        val: {
            '@NumberOfSides': 6
        },
        type: 'Polygon'
    },
    {
        displayName: 'Octagon',
        val: {
            '@NumberOfSides': 8
        },
        type: 'Polygon'
    },
    {
        displayName: '3-Point Star',
        type: 'Star'
    },
    {
        displayName: '4-Point Star',
        val: {
            '@StarPointCount': 4
        },
        type: 'Star'
    },
    {
        displayName: '5-Point Star',
        val: {
            '@StarPointCount': 5
        },
        type: 'Star'
    },
    {
        displayName: '6-Point Star',
        val: {
            '@StarPointCount': 6
        },
        type: 'Star'
    },
    {
        displayName: '8-Point Star',
        val: {
            '@StarPointCount': 8
        },
        type: 'Star'
    },
    {
        displayName: 'Vertical Line',
        angle: 0,
        type: 'Line'
    },
    {
        displayName: 'Horizontal Line',
        angle: 270,
        type: 'Line'
    },
    {
        displayName: 'Slant Line',
        angle: 135,
        type: 'Line'
    },
    {
        displayName: 'Backslant Line',
        angle: 225,
        type: 'Line'
    },
    {
        displayName: 'Cross',
        type: 'Cross'
    },
    {
        displayName: 'Bracket',
        type: 'Bracket'
    },
    {
        displayName: 'Brace',
        type: 'Brace'
    }
];

class ImageBase64Model {
}
class XRShapeControlSurface extends XRControlSurface {
    _updateImage() {
        this.isLoading(true);
        if (this._lastUpdateImageDeferred) {
            this._lastUpdateImageDeferred.reject();
        }
        const resultDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._lastUpdateImageDeferred = resultDeferred;
        ReportRenderingService.getShapeImage(this)
            .done((result) => {
            resultDeferred.resolve(result);
        })
            .fail((xhr) => {
            resultDeferred.resolve(null);
            this.error('An error occurred during an attempt to load data');
        });
        resultDeferred.done((result) => {
            this.isLoading(false);
            const imageSrc = result?.imageBase64 ? 'data:image/png;base64,' + result.imageBase64 : null;
            this.imageSrc(imageSrc);
        });
    }
    constructor(control, context) {
        super(control, context);
        this._lastUpdateImageDeferred = null;
        this.imageSrc = external_ko_namespaceObject.observable('');
        this.isLoading = external_ko_namespaceObject.observable(false);
        this.error = external_ko_namespaceObject.observable('');
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this._updateImage();
        }));
        this.template = 'dxrd-shape';
        this.contenttemplate = 'dxrd-server-rendered-control-content';
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrSparkline.js










const valueMember = { propertyName: 'valueMember', modelName: '@ValueMember', displayName: 'Value Member', localizationId: 'DevExpress.XtraReports.UI.XRSparkline.ValueMember', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') };
const highlightMinPoint = { modelName: '@HighlightMinPoint', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, propertyName: 'highlightMinPoint', displayName: 'Highlight Min Point', localizationId: 'DevExpress.Sparkline.SparklineViewBase.HighlightMinPoint', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }, highlightMaxPoint = { modelName: '@HighlightMaxPoint', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, propertyName: 'highlightMaxPoint', displayName: 'Highlight Max Point', localizationId: 'DevExpress.Sparkline.SparklineViewBase.HighlightMaxPoint', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }, highlightStartPoint = { modelName: '@HighlightStartPoint', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, propertyName: 'highlightStartPoint', displayName: 'Highlight Start Point', localizationId: 'DevExpress.Sparkline.SparklineViewBase.HighlightStartPoint', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }, highlightEndPoint = { modelName: '@HighlightEndPoint', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, propertyName: 'highlightEndPoint', displayName: 'Highlight End Point', localizationId: 'DevExpress.Sparkline.SparklineViewBase.HighlightEndPoint', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }, highlightNegativePoints = { modelName: '@HighlightNegativePoints', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, propertyName: 'highlightNegativePoints', displayName: 'Highlight Negative Points', localizationId: 'DevExpress.Sparkline.LineSparklineView.HighlightNegativePoints', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') }, xrSparkline_color = { modelName: '@Color', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'color', displayName: 'Color', localizationId: 'DevExpress.Sparkline.SparklineViewBase.Color', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') }, maxPointColor = { modelName: '@MaxPointColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'maxPointColor', displayName: 'Max Point Color', localizationId: 'DevExpress.Sparkline.SparklineViewBase.MaxPointColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') }, minPointColor = { modelName: '@MinPointColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'minPointColor', displayName: 'Min Point Color', localizationId: 'DevExpress.Sparkline.SparklineViewBase.MinPointColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') }, startPointColor = { modelName: '@StartPointColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'startPointColor', displayName: 'Start Point Color', localizationId: 'DevExpress.Sparkline.SparklineViewBase.StartPointColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') }, negativePointColor = { modelName: '@NegativePointColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'negativePointColor', displayName: 'Negative Point Color', localizationId: 'DevExpress.Sparkline.SparklineViewBase.NegativePointColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') }, endPointColor = { modelName: '@EndPointColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'endPointColor', displayName: 'End Point Color', localizationId: 'DevExpress.Sparkline.SparklineViewBase.EndPointColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') }, sparklineViewType = {
    modelName: '@Type', propertyName: 'type'
}, xrSparkline_enableAntialiasing = { modelName: '@EnableAntialiasing', propertyName: 'enableAntialiasing', displayName: 'Enable Antialiasing', localizationId: 'DevExpress.Sparkline.LineSparklineView.EnableAntialiasing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, defaultVal: true }, maxPointMarkerSize = { modelName: '@MaxPointMarkerSize', defaultVal: 5, propertyName: 'maxPointMarkerSize', displayName: 'Max Point Marker Size', localizationId: 'DevExpress.Sparkline.LineSparklineView.MaxPointMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, minPointMarkerSize = { modelName: '@MinPointMarkerSize', defaultVal: 5, propertyName: 'minPointMarkerSize', displayName: 'Min Point Marker Size', localizationId: 'DevExpress.Sparkline.LineSparklineView.MinPointMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, startPointMarkerSize = { modelName: '@StartPointMarkerSize', defaultVal: 5, propertyName: 'startPointMarkerSize', displayName: 'Start Point Marker Size', localizationId: 'DevExpress.Sparkline.LineSparklineView.StartPointMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, negativePointMarkerSize = { modelName: '@NegativePointMarkerSize', defaultVal: 5, propertyName: 'negativePointMarkerSize', displayName: 'Negative Point Marker Size', localizationId: 'DevExpress.Sparkline.LineSparklineView.NegativePointMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, endPointMarkerSize = { modelName: '@EndPointMarkerSize', defaultVal: 5, propertyName: 'endPointMarkerSize', displayName: 'End Point Marker Size', localizationId: 'DevExpress.Sparkline.LineSparklineView.EndPointMarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, markerSize = { modelName: '@MarkerSize', propertyName: 'markerSize', defaultVal: 5, displayName: 'Marker Size', localizationId: 'DevExpress.Sparkline.LineSparklineView.MarkerSize', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, showMarkers = { modelName: '@ShowMarkers', propertyName: 'showMarkers', displayName: 'Show Markers', localizationId: 'DevExpress.Sparkline.LineSparklineView.ShowMarkers', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: false }, markerColor = { modelName: '@MarkerColor', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, propertyName: 'markerColor', displayName: 'Marker Color', localizationId: 'DevExpress.Sparkline.LineSparklineView.MarkerColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const xrSparkline_barDistance = { modelName: '@BarDistance', propertyName: 'barDistance', defaultVal: 2, displayName: 'Bar Distance', localizationId: 'DevExpress.Sparkline.BarSparklineViewBase.BarDistance', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const areaOpacity = { modelName: '@AreaOpacity', propertyName: 'areaOpacity', defaultVal: 135, displayName: 'Area Opacity', localizationId: 'DevExpress.Sparkline.AreaSparklineView.AreaOpacity', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const commonSparklineViewProperties = [highlightStartPoint, highlightEndPoint, highlightMaxPoint, highlightMinPoint, xrSparkline_color, maxPointColor, minPointColor, startPointColor, endPointColor, negativePointColor, sparklineViewType];
const viewLineSerializationsInfo = [].concat(commonSparklineViewProperties, [highlightNegativePoints, xrSparkline_enableAntialiasing, negativePointMarkerSize, endPointMarkerSize, startPointMarkerSize, minPointMarkerSize, maxPointMarkerSize, markerSize, showMarkers, lineWidth, markerColor]);
const viewWinLoseSerializationsInfo = [].concat(commonSparklineViewProperties, [xrSparkline_barDistance]);
const viewBarSerializationsInfo = [].concat(commonSparklineViewProperties, [xrSparkline_barDistance, highlightNegativePoints]);
const viewAreaSerializationsInfo = [].concat(commonSparklineViewProperties, [xrSparkline_enableAntialiasing, areaOpacity, negativePointMarkerSize, lineWidth, highlightNegativePoints, showMarkers, markerSize, maxPointMarkerSize, markerColor, minPointMarkerSize, endPointMarkerSize, startPointMarkerSize]);
const sparklineViewMap = {
    'Line': viewLineSerializationsInfo,
    'Bar': viewBarSerializationsInfo,
    'WinLoss': viewWinLoseSerializationsInfo,
    'Area': viewAreaSerializationsInfo
};
const limit1 = { propertyName: 'limit1', modelName: '@Limit1', displayName: 'Limit 1', localizationId: 'DevExpress.Sparkline.SparklineRange.Limit1', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, limit2 = { propertyName: 'limit2', modelName: '@Limit2', displayName: 'Limit 2', localizationId: 'DevExpress.Sparkline.SparklineRange.Limit2', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, isAuto = { propertyName: 'isAuto', modelName: '@IsAuto', displayName: 'Is Auto', localizationId: 'DevExpress.Sparkline.SparklineRange.IsAuto', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const valueRange = { propertyName: 'valueRange', modelName: 'ValueRange', displayName: 'Value Range', localizationId: 'DevExpress.XtraReports.UI.XRSparkline.ValueRange', info: [limit1, limit2, isAuto], editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const sparklineView = { propertyName: 'view', modelName: 'View' };
const sparklineFake = { propertyName: 'sparklineFake', editor: designerEditorTemplates.getEditor('contentByType'), valuesArray: spartlineTypes, displayName: 'View', localizationId: 'DevExpress.XtraReports.UI.XRSparkline.View' };
const sparklineSerializationsInfo = [
    sparklineFake, sparklineView, valueMember, valueRange, imageType, anchorVertical, anchorHorizontal, dataBindings(['Bookmark', 'NavigateUrl', 'Tag']),
    action, dataAdapter, metadata_dataMember, dataSource, controlScripts
].concat(commonControlProperties, sizeLocation, navigationGroup);
const popularPropertiesSparkline = ['dataSource', 'dataMember', 'dataAdapter', 'valueMemberEditable', 'sparklineFake'];

;// ./node_modules/devexpress-reporting/designer/controls/xrSparkline.js






class XRSparklineViewModel extends XRControlViewModel {
    createView(model, serializer = null) {
        const type = model && model['@Type'] || 'Line';
        const viewTypeSerialization = sparklineViewMap[type];
        const newView = { 'type': external_ko_namespaceObject.observable(type), 'getInfo': () => { return viewTypeSerialization; } };
        (serializer || new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()).deserialize(newView, model);
        return newView;
    }
    constructor(model, parent, serializer) {
        super(model, parent, serializer);
        this.view(this.createView(this.view() || {}, serializer));
        this.sparklineFake = {
            type: external_ko_namespaceObject.pureComputed({
                read: () => {
                    return this.view().type();
                },
                write: (val) => {
                    this.view(this.createView({ '@Type': val }, serializer));
                }
            }),
            content: this.view
        };
        this._disposables.push(this.sparklineFake.type);
    }
    getPath(propertyName) {
        if (propertyName === 'dataMember') {
            return this.dsHelperProvider() && this.dsHelperProvider().getDataSourcePath(this.dataSource());
        }
        else if (propertyName === 'valueMember') {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.getPath('dataMember'), this.dataMember());
        }
        return super.getPath(propertyName);
    }
}
class XRSparkLineSurface extends TodoControlSurface {
    constructor(control, context) {
        super(control, context);
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_subreportUtils.js

function subreportControlCollector(target, subreportControls = []) {
    if (!target)
        return subreportControls;
    const visitor = (target) => {
        if (target.controlType === 'XRSubreport') {
            subreportControls.push(target);
            subreportControlCollector(target['reportSource'], subreportControls);
        }
    };
    visitor(target);
    (0,external_DevExpress_Analytics_Internal_namespaceObject.collectionsVisitor)(target, (collection) => {
        external_DevExpress_Analytics_Internal_namespaceObject.koUtils.unwrap(collection).forEach(visitor);
    }, ['controls', 'bands']);
    return subreportControls;
}

;// ./node_modules/devexpress-reporting/designer/internal/_utils.js








function recalculateUnit(value, dpi) {
    return Math.round(value * dpi) / 100;
}
const PromptBoolean = {
    'False': 'False',
    'True': 'True',
    'Prompt': 'Prompt'
};
function correctModel(model) {
    if (Array.isArray(model)) {
        for (let i = 0; i < model.length; i++) {
            if (model[i]['@Ref'] !== undefined) {
                model = model[i];
                break;
            }
        }
    }
    else {
        Object.keys(model).forEach((name) => {
            if (model[name] instanceof Object)
                model[name] = correctModel(model[name]);
        });
    }
    return model;
}
function createReportViewModel(newReportInfo, oldReport) {
    const reportModel = JSON.parse(newReportInfo.reportModel);
    const report = new ReportViewModel(reportModel, undefined, newReportInfo.knownEnums);
    if (oldReport) {
        let nextRef = Math.max(...report.objectStorage().map(data => parseInt(data['_model']['@Ref']))) + 1;
        oldReport.dsHelperProvider().usedDataSources()
            .filter(dsInfo => !!dsInfo.data && !newReportInfo.dataSourceRefs.some(ref => ref.name === dsInfo.name))
            .forEach((dsInfo) => {
            dsInfo.data['_model']['@Ref'] = nextRef.toString();
            newReportInfo.dataSourceRefs.push({
                name: dsInfo.name,
                ref: nextRef.toString(),
                isFederationDataSource: dsInfo.isFederationDataSource,
                isSqlDataSource: dsInfo.isSqlDataSource,
                isJsonDataSource: dsInfo.isJsonDataSource,
                isObjectDataSource: dsInfo.isObjectDataSource,
                isListType: dsInfo.isListType,
                isSupportQueries: dsInfo.isSupportQueries,
                dataSerializer: dsInfo.dataSerializer,
                hasParams: dsInfo['hasParams']
            });
            report.objectStorage.push(dsInfo.data);
            nextRef++;
        });
    }
    report.dataSourceRefs = newReportInfo.dataSourceRefs;
    return report;
}
function updateDataSourceRefs(report, dataSourceRefs) {
    const getDataSourceRefs = (key) => {
        const resultRefs = (dataSourceRefs || []).filter((ds) => { return ds.Key === key; })[0];
        return resultRefs && resultRefs.Value || [];
    };
    report.dataSourceRefs = getDataSourceRefs(report.key());
    const subreportControls = subreportControlCollector(report);
    subreportControls.forEach((subreport) => {
        if (subreport.reportSource) {
            subreport.reportSource.dataSourceRefs = getDataSourceRefs(subreport.key());
        }
    });
}
function isNotParameter(control) {
    return !(control instanceof Parameter);
}
function isControl(control) {
    return isNotParameter(control) && !(control instanceof StyleModel || control instanceof FormattingRule || control instanceof ComponentsModel || control instanceof CalculatedField);
}
function updateSurfaceContentSizeLocalizationMode(surfaceSize, root, rtl) {
    return () => {
        const $root = external_jQuery_namespaceObject.fn.constructor(root).find('.dxrd-designer').eq(0);
        const leftLocalizationPanel = external_jQuery_namespaceObject.fn.constructor(root).find('.dxrd-left-localization-panel:visible').outerWidth() || 0;
        const otherWidth = leftLocalizationPanel + 50;
        const surfaceWidth = $root.width() - (otherWidth);
        $root.find('.dxrd-surface-wrapper').eq(0).css({
            'left': rtl ? '50px' : otherWidth,
            'right': !rtl ? otherWidth : '50px',
            'width': surfaceWidth,
            'bottom': 0
        });
        surfaceSize(surfaceWidth);
    };
}

;// ./node_modules/devexpress-reporting/designer/services/reportStorageWeb.js







class ReportStorageWeb {
    static getErrorMessageHandler(defaultErrorMessage) {
        return function (message, jqXHR, textStatus) {
            const error = (0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(jqXHR);
            (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)(error || defaultErrorMessage || message || 'Internal Server Error', true);
        };
    }
    static getReportByUrl(url) {
        const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        ReportStorageWeb.getData(url).done((result) => {
            if (result) {
                const model = new ReportViewModel(JSON.parse(result.reportLayout), undefined, result.knownEnums);
                updateDataSourceRefs(model, result.dataSourceRefInfo);
                $deferred.resolve(model);
            }
            else {
                $deferred.reject();
            }
        }).fail(() => $deferred.reject());
        return $deferred.promise();
    }
    static getData(url) {
        if (reportStorageWebIsRegister()) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getData', JSON.stringify({
                reportUrl: url
            }), ReportStorageWeb.getErrorMessageHandler());
        }
        else {
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().promise();
        }
    }
    static setData(layout, url) {
        if (reportStorageWebIsRegister()) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'setData', JSON.stringify({
                reportLayout: JSON.stringify({
                    'XtraReportsLayoutSerializer': layout
                }),
                reportUrl: url
            }), ReportStorageWeb.getErrorMessageHandler((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cannot save the report.', 'ASPxReportsStringId.ReportDesigner_SaveReport_Error')));
        }
        else {
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().promise();
        }
    }
    static setNewData(layout, url) {
        if (reportStorageWebIsRegister()) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'setNewData', JSON.stringify({
                reportLayout: JSON.stringify({
                    'XtraReportsLayoutSerializer': layout
                }),
                reportUrl: url
            }), ReportStorageWeb.getErrorMessageHandler((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cannot save the report.', 'ASPxReportsStringId.ReportDesigner_SaveReport_Error')));
        }
        else {
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().promise();
        }
    }
    static getUrls(subreports) {
        if (reportStorageWebIsRegister()) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getUrls', 'true');
        }
        else {
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve((0,external_DevExpress_Reporting_namespaceObject.convertMapToKeyValuePair)(subreports)).promise();
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrSubreport.js











class XRSubreportViewModel extends XRControlViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.parameterBindings);
        this.reportSource && this.reportSource.dispose();
        this.resetObservableArray(this.parameterBindings);
    }
    getInfo() {
        const serializationInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], super.getInfo());
        if (this.reportSourceUrl && this.reportSourceUrl()) {
            const property = serializationInfo.filter((item) => { return item.propertyName === 'reportSource'; })[0];
            serializationInfo.splice(serializationInfo.indexOf(property), 1);
        }
        return serializationInfo;
    }
    _getCurrentGenerateOwnPagesIsActive() {
        return this.generateOwnPages() && !this.isPropertyDisabled('generateOwnPages');
    }
    _clearReportModel(reportModel) {
        const ignoreProperties = ['Parameters', 'ObjectStorage', 'ComponentStorage'];
        Object.keys(reportModel).forEach(x => {
            if (ignoreProperties.indexOf(x) === -1)
                delete reportModel[x];
        });
    }
    _assignParameters(parameters) {
        this.subreportParameters(collectAvailableParameters(parameters).map(x => x.name));
        this.refreshParameterBindings();
    }
    _calculateSubreportPosition(generateOwnPagesIsActive) {
        const offset = generateOwnPagesIsActive ? 0 : (0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(5, this.root.measureUnit(), 1);
        this.size.width(this.parentModel()['size'].width() - offset * 2);
        this.location.x(offset);
    }
    _subscribeStorages(objectStorage1, objectStorage2) {
        const locker = new external_DevExpress_Reporting_Internal_namespaceObject.Locker();
        const subscriptions = [
            objectStorage1.subscribe((newVal) => locker.lock(() => objectStorage2(newVal))),
            objectStorage2.subscribe((newVal) => locker.lock(() => objectStorage1(newVal)))
        ];
        return { dispose: () => subscriptions.forEach(x => x.dispose()) };
    }
    _initParameter(parameter) {
        parameter.initReportDataSource(() => this.root['dataSource'] && this.root['dataSource']() || null);
        parameter.initSubreportParameters(() => this.subreportParameters());
    }
    constructor(model, parent, serializer) {
        super(patchSubreport(model), parent, serializer);
        this.needProcessLocation = false;
        this.subreportParameters = external_ko_namespaceObject.observableArray();
        const _width = external_ko_namespaceObject.observable(this.size.width());
        this.size['_width'] = _width;
        this._disposables.push(this.key = external_ko_namespaceObject.pureComputed(() => {
            const key = this.parentModel() && this.parentModel().root && this.parentModel().root['key'];
            return (key ? (key() + '.') : '') + (this.name() ? this.name() : '');
        }));
        this._generateOwnPages = external_ko_namespaceObject.observable(this.generateOwnPages());
        let oldgenerateOwnPagesIsActive = this._generateOwnPages();
        this._disposables.push(this.generateOwnPages = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this._generateOwnPages();
            },
            write: (newVal) => {
                if (this.isPropertyDisabled('generateOwnPages'))
                    return;
                const undo = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this.parentModel());
                undo && undo.start();
                this._generateOwnPages(newVal);
                undo && undo.end();
                oldgenerateOwnPagesIsActive = this._getCurrentGenerateOwnPagesIsActive();
            }
        }), this.generateOwnPagesIsActive = external_ko_namespaceObject.computed(() => {
            return this._getCurrentGenerateOwnPagesIsActive();
        }), this.generateOwnPagesIsActive.subscribe((newVal) => {
            this._calculateSubreportPosition(newVal);
        }), this.size.width = external_ko_namespaceObject.computed({
            read: () => {
                if (this.generateOwnPagesIsActive())
                    return this.parentModel()['size'].width();
                return _width();
            },
            write: (newVal) => {
                _width(newVal);
            }
        }));
        this._disposables.push(this.parentModel.subscribe((newVal) => {
            this.needProcessLocation = oldgenerateOwnPagesIsActive !== this._getCurrentGenerateOwnPagesIsActive() || (oldgenerateOwnPagesIsActive && this._getCurrentGenerateOwnPagesIsActive());
            oldgenerateOwnPagesIsActive = this._getCurrentGenerateOwnPagesIsActive();
        }));
        this.size.isPropertyDisabled = (propertyName) => {
            if (propertyName === 'width')
                return this.generateOwnPagesIsActive();
            return false;
        };
        let storageSubscription = null;
        if (this.reportSource) {
            this.reportSource.key = this.key;
            if (parent) {
                if (this.reportSource['objectStorageIsEmpty']()) {
                    parent.root['objectStorage']([
                        ...parent.root['objectStorage'](),
                        ...this.reportSource.objectStorage()
                    ]);
                    this.reportSource.objectStorage([...parent.root['objectStorage']()]);
                    storageSubscription = this._subscribeStorages(this.reportSource.objectStorage, parent.root['objectStorage']);
                    this._disposables.push(storageSubscription);
                }
            }
        }
        this.parameterBindings = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(model.ParameterBindings, (item) => {
            const binding = new ParameterBinding(item, this, serializer);
            this._initParameter(binding);
            return binding;
        });
        this.updateParameters();
        this._disposables.push(this.parameterBindings.subscribe((changes) => {
            for (let index = 0; index < changes.length; index++) {
                if (changes[index].status === 'added') {
                    this._initParameter(changes[index].value);
                }
            }
        }, null, 'arrayChange'));
        if ('parameters' in this.root) {
            this._disposables.push(this.root['parameters'].subscribe((newParameters) => {
                this.parameterBindings().forEach((param) => {
                    if (!collectAvailableParameters(newParameters).some((parameter) => { return parameter === param.parameter(); })) {
                        param.parameter(null);
                    }
                });
            }));
        }
        this._disposables.push(this.reportSourceUrl.subscribe((newVal) => {
            storageSubscription && storageSubscription.dispose();
            this.reportSource && this.reportSource.dispose();
            if (!newVal)
                this.reportSource = new SubreportViewModel(SubreportViewModel.defaultReport, serializer);
            this.updateParameters();
        }));
    }
    refreshParameterBindings() {
        this.parameterBindings().forEach((x) => x.refresh());
    }
    isPropertyDisabled(propertyName) {
        if (propertyName === 'generateOwnPages')
            return this.parentModel()
                && ['ReportHeaderBand', 'ReportFooterBand', 'GroupHeaderBand', 'GroupFooterBand', 'DetailBand'].indexOf(this.parentModel().controlType) === -1;
        return super.isPropertyDisabled(propertyName);
    }
    updateParameters() {
        if (this.reportSourceUrl()) {
            ReportStorageWeb.getData(this.reportSourceUrl()).done((result) => {
                const reportJSONModel = JSON.parse(result.reportLayout);
                this._clearReportModel(reportJSONModel.XtraReportsLayoutSerializer);
                const report = new ReportViewModel(reportJSONModel);
                this._assignParameters(report.parameters());
            });
        }
        else if (this.reportSource) {
            this._assignParameters(this.reportSource.parameters());
        }
    }
    cloneReportSource() {
        if (this.reportSource) {
            const dataSourceRefFromParent = this.root?.dataSourceRefs;
            return this.reportSource.clone(dataSourceRefFromParent);
        }
    }
    get root() {
        return this._getRoot();
    }
}
class XRSubreportSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.template = 'dxrd-subreport';
        this.selectiontemplate = 'dxrd-subreport-selection';
        this.displayText = () => { return control.name(); };
    }
    getAdornTemplate() {
        let result = '';
        result = XRControlSurface._appendValue(result, 'dxrd-surface-hidden', !this._control['visible']());
        result = XRControlSurface._appendValue(result, 'dxrd-intersect', this.isIntersect());
        return result;
    }
    getResizableOptions(resizeHandler) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, resizeHandler, {
            handles: external_ko_namespaceObject.pureComputed(() => {
                return this._control.generateOwnPagesIsActive() ? 's,n' : 'all';
            }),
        });
    }
    processLocation(location) {
        if (this._control.needProcessLocation) {
            this._control.needProcessLocation = false;
            return { top: location.top };
        }
        return location;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/defaultTableOfContentsLevelHeight.js
const levelDefaultHeight = 23;

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrTableOfContentsLevel.js




const xrTableOfContentsLevel_font = { propertyName: 'font', localizable: true, modelName: '@Font', defaultVal: 'Times New Roman, 9.75pt', displayName: 'Font', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Font', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('font') };
const xrTableOfContentsLevel_backColor = { propertyName: 'backColor', modelName: '@BackColor', defaultVal: 'Transparent', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Background Color', localizationId: 'DevExpress.XtraReports.UI.XRControl.BackColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const xrTableOfContentsLevel_foreColor = { propertyName: 'foreColor', modelName: '@ForeColor', defaultVal: 'Black', from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString, displayName: 'Foreground Color', localizationId: 'DevExpress.XtraReports.UI.XRControl.ForeColor', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor') };
const baseTocLevelSerializationsInfo = [
    xrTableOfContentsLevel_backColor,
    xrTableOfContentsLevel_font,
    xrTableOfContentsLevel_foreColor,
    { propertyName: 'height', modelName: '@Height', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: levelDefaultHeight, displayName: 'Height', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevelBase.Height', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editorOptions: { min: 10 } }
].concat(paddingGroup);
const tocLevelSerializationsInfo = [
    { propertyName: 'leaderSymbol', modelName: '@LeaderSymbol', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('text'), defaultVal: '.', displayName: 'Leader Symbol', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevel.LeaderSymbol', editorOptions: { maxLength: 1 } },
    { propertyName: 'indent', modelName: '@Indent', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: null, displayName: 'Indent', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContentsLevel.Indent', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel }
].concat(baseTocLevelSerializationsInfo);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrTableOfContents.js







const xrTableOfContents_size = { propertyName: 'size', modelName: '@SizeF', from: external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString };
const xrTableOfContents_formattingRuleLinks = {
    propertyName: 'formattingRuleLinks', modelName: 'FormattingRuleLinks'
};
const tocTitleSerializationsInfo = [metadata_text, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_textAlignment, { defaultVal: 'TopLeft' })].concat(baseTocLevelSerializationsInfo);
const tocTitle = { propertyName: 'levelTitle', modelName: 'LevelTitle', displayName: 'Level Title', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContents.LevelTitle', info: tocTitleSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const tocLevelDefault = { propertyName: 'levelDefault', modelName: 'LevelDefault', displayName: 'Level Default', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContents.LevelDefault', info: tocLevelSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const maxNestingLevel = { propertyName: 'maxNestingLevel', modelName: '@MaxNestingLevel', defaultVal: 0, displayName: 'Max Nesting Level', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContents.MaxNestingLevel', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), editorOptions: { min: 0 } };
const tocLevels = {
    propertyName: 'levels',
    modelName: 'Levels',
    displayName: 'Levels', localizationId: 'DevExpress.XtraReports.UI.XRTableOfContents.Levels',
    array: true,
    editor: designerEditorTemplates.getEditor('toclevel'),
    template: '#dxrd-collectionItemWithAccordion'
};
const tocProperties = commonControlProperties.filter((item) => { return item !== canPublish && item != accessibleDescription; });
const tocSerializationsInfo = [xrTableOfContents_formattingRuleLinks, xrTableOfContents_size, metadata_location, tocTitle, tocLevels, tocLevelDefault, maxNestingLevel, rtl].concat(tocProperties);

;// ./node_modules/devexpress-reporting/designer/controls/xrTableOfContentsLevel.js











class TableOfContentsLevel extends external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel {
    dispose() {
        super.dispose();
        this.parentModel(null);
    }
    static createNew(parent) {
        return new TableOfContentsLevel({ '@Height': recalculateUnit(levelDefaultHeight, parent.dpi()) }, parent);
    }
    preInitProperties(model) {
        this.isTitle = model.isTitle;
        delete model['isTitle'];
    }
    constructor(model, parent, serializer, isTitle = false) {
        super((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ControlType': 'TableOfContentsLevel', isTitle: isTitle }, model), parent, serializer);
        this.borderWidth = parent.borderWidth;
        this.borderColor = parent.borderColor;
        this.borders = parent.borders;
        this.dpi = parent.dpi;
        if (this.padding) {
            createPaddingProperty(this, parent);
        }
        this.borderDashStyle = parent.borderDashStyle;
        this.borderDefault = parent.borderDefault;
        this._disposables.push(this._levelIndex = external_ko_namespaceObject.pureComputed(() => parent.allLevels().indexOf(this)));
        this._disposables.push(this._indentFactor = external_ko_namespaceObject.pureComputed(() => recalculateUnit(60, this.parentModel().dpi())));
        this.indent = this.indent || external_ko_namespaceObject.observable(0);
        this._disposables.push(this.left = external_ko_namespaceObject.pureComputed({
            read: () => {
                if (!this.indent)
                    return 0;
                if (this.indent() !== null && this.indent() !== undefined)
                    return this.indent();
                return this._levelIndex() === 0 ? 0 : (this._levelIndex() - 1) * this._indentFactor();
            },
            write: () => void (0)
        }));
        this._disposables.push(this.width = external_ko_namespaceObject.pureComputed({
            read: () => parent.size.width() - this.left(),
            write: () => void (0)
        }));
        this._disposables.push(this.name = external_ko_namespaceObject.pureComputed(() => {
            if (this.isTitle)
                return null;
            if (this._levelIndex() == parent.allLevels().length - 1)
                return 'Level (Default)';
            return 'Level ' + this._levelIndex();
        }));
        this._disposables.push(this.top = external_ko_namespaceObject.computed({
            read: () => {
                const previousLevel = parent.allLevels()[this._levelIndex() - 1];
                return previousLevel ? previousLevel.top() + previousLevel.height() : 0;
            },
            write: () => void (0),
            deferEvaluation: true
        }));
        this.lockedInUserDesigner = parent.lockedInUserDesigner;
    }
    getInfo() {
        return this.isTitle ? tocTitleSerializationsInfo : tocLevelSerializationsInfo;
    }
    isPropertyModified(name) {
        return false;
    }
    getControlFactory() {
        return controlsFactory();
    }
    rtl() {
        return this.parentModel() && this.parentModel().rtl();
    }
}
TableOfContentsLevel.unitProperties = ['height', 'indent'];

class TableOfContentsLevelSurface extends XRControlSurfaceBase {
    constructor(control, context) {
        super(control, context, TableOfContentsLevelSurface._unitProperties);
        this._leaderSymbolWidth = external_ko_namespaceObject.pureComputed(() => {
            if (!TableOfContentsLevelSurface._$leaderSymbol)
                TableOfContentsLevelSurface._$leaderSymbol = external_jQuery_namespaceObject.fn.constructor('<span />').hide().appendTo('body');
            TableOfContentsLevelSurface._$leaderSymbol.html(this.getControlModel().leaderSymbol()).css(this.contentCss());
            return TableOfContentsLevelSurface._$leaderSymbol.width();
        });
        this.leaderSymbols = external_ko_namespaceObject.pureComputed(() => {
            const elementWidth = this.contentWidthWithoutZoom();
            if (elementWidth <= 0 || this._leaderSymbolWidth() === 0)
                return '';
            const symbolsCount = elementWidth / this._leaderSymbolWidth();
            const symbol = this.getControlModel().leaderSymbol();
            const a = [];
            while (a.length < symbolsCount) {
                a.push(symbol);
            }
            return a.join('');
        });
        this._disposables.push(this.isIntersect = external_ko_namespaceObject.computed(() => { return false; }));
        this._disposables.push(this.leaderSymbols);
        this.text = control.text;
        this.template = 'dxrd-table-of-contents-level';
    }
    resizable(resizeHandler, element) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, resizeHandler, {
            handles: 's',
            $selectedNodes: external_jQuery_namespaceObject.fn.constructor(element),
            minimumHeight: 10
        });
    }
    rtlLayout() {
        return this._control.rtl();
    }
}
TableOfContentsLevelSurface._unitProperties = {
    _height: (o) => {
        return o.height;
    },
    _width: (o) => {
        return o.width;
    },
    _x: (o) => {
        return o.left;
    },
    _y: (o) => {
        return o.top;
    },
};


;// ./node_modules/devexpress-reporting/designer/controls/xrTableOfContents.js







class XRTableOfContentsViewModel extends XRControlViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.levels);
        this.resetObservableArray(this.levels);
    }
    createLocalizationProvider() {
        return new TableOfContentLocalizationProvider(this);
    }
    constructor(control, parent, serializer) {
        super(control, parent, serializer);
        this.borderDefault = external_ko_namespaceObject.pureComputed(() => 'none');
        this._disposables.push(this.levelTitle = new TableOfContentsLevel(control['LevelTitle'], this, serializer, true));
        this.levelTitleText = this.levelTitle.text;
        this._disposables.push(this.levelDefault = new TableOfContentsLevel(control['LevelDefault'], this, serializer));
        this.levels = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(control['Levels'], (item) => new TableOfContentsLevel(item, this, serializer));
        this._disposables.push(this.allLevels = external_ko_namespaceObject.computed(() => {
            const array = [this.levelTitle];
            Array.prototype.push.apply(array, this.levels());
            array.push(this.levelDefault);
            return array;
        }));
        this._disposables.push(this.size.height = external_ko_namespaceObject.computed({
            read: () => this.levelDefault.top() + this.levelDefault.height(),
            write: () => void (0)
        }));
        this._disposables.push(this.size.width = external_ko_namespaceObject.computed({
            read: () => (this.parentModel() ? this.parentModel().size.width() : 0),
            write: () => void (0)
        }));
        this._disposables.push(this.location.x = external_ko_namespaceObject.computed({
            read: () => 0,
            write: () => { }
        }));
        this._disposables.push(this.borderDefault);
    }
    get textEditableProperty() { return this.levelTitleText; }
}
XRTableOfContentsViewModel.unitProperties = [].concat(['levelTitle', 'levelDefault'], XRReportElementViewModel.unitProperties);

class XRTableOfContentsSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.levels = external_ko_namespaceObject.observableArray();
        this._disposables.push(this.levelTitle = new TableOfContentsLevelSurface(control.levelTitle, context));
        this._disposables.push(this.levelDefault = new TableOfContentsLevelSurface(control.levelDefault, context));
        this._disposables.push((0,external_DevExpress_Analytics_Internal_namespaceObject.createObservableArrayMapCollection)(control.levels, this.levels, (item) => new TableOfContentsLevelSurface(item, context)));
        this.template = 'dxrd-table-of-contents';
        this.selectiontemplate = 'dxrd-table-of-contents-selected';
    }
    isThereIntersectionWithChildCollection() {
        return false;
    }
    isThereIntersectionWithUsefulArea() {
        return false;
    }
    isThereIntersectionWithParentCollection() {
        return false;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrUnknownControl.js








class XRUnknownControlSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.isLoading = external_ko_namespaceObject.observable(false);
        this.imageSrc = external_ko_namespaceObject.observable('');
        this.error = external_ko_namespaceObject.observable('');
        this.template = 'dxrd-unknown-control';
        this.contenttemplate = 'dxrd-server-rendered-control-content';
        let fetchTimeout = null;
        let lastFetch = null;
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const _self = this;
            if (settings_HandlerUri()) {
                fetchTimeout && clearTimeout(fetchTimeout);
                const zoomValue = _self._context.zoom();
                const measureUnit = _self._control.root.measureUnit();
                const parentStyles = _self._getParentStyles();
                const serializedControl = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(_self._control);
                fetchTimeout = setTimeout(() => {
                    _self.isLoading(true);
                    const report = new ReportViewModel(SubreportViewModel.defaultReport);
                    report.measureUnit(measureUnit);
                    const detailBand = report.bands()[1];
                    _self._applyParentStyles(parentStyles, detailBand);
                    detailBand.createChild(serializedControl);
                    const serializedReport = report.serialize();
                    report.dispose();
                    const deferred = ReportRenderingService.getUnknownControlImage(serializedReport, zoomValue);
                    lastFetch = deferred;
                    deferred.done(function (result) {
                        if (lastFetch === deferred) {
                            _self.isLoading(false);
                            _self.imageSrc('data:image/x;base64,' + result.Img);
                        }
                    }).fail(function (jqXHR) {
                        if (lastFetch === deferred) {
                            _self.isLoading(false);
                            (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('Impossible to get control image.');
                            _self.error('An error occurred during an attempt to load data');
                        }
                    });
                }, 200);
            }
        }));
    }
    getValue(getter) {
        return getter && ((0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(getter) ? getter() : getter);
    }
    _getParentStyles() {
        const root = this._control.root;
        const parentModel = this._control.parentModel();
        return {
            measureUnit: root.measureUnit(),
            backColor: this.getValue(parentModel?.backColor),
            borderColor: this.getValue(parentModel?.borderColor),
            borderDashStyle: this.getValue(parentModel?.borderDashStyle),
            borders: this.getValue(parentModel?.borders),
            borderWidth: this.getValue(parentModel?.borderWidth),
            font: this.getValue(parentModel?.font),
            foreColor: this.getValue(parentModel?.foreColor),
            padding: this.getValue(parentModel?.padding),
            textAlignment: this.getValue(parentModel?.textAlignment),
        };
    }
    _applyParentStyles(parentStyles, detailsBand) {
        Object.getOwnPropertyNames(parentStyles)
            .forEach((prop) => {
            if (parentStyles[prop] && detailsBand[prop] && (0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(detailsBand[prop])) {
                detailsBand[prop](parentStyles[prop]);
            }
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/xrZipcode.js



class XRZipCodeSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.displayText = () => {
            let text = control.text();
            text = text && text.replace(/[^\d]/g, '_') || '0'.replace(/[^\d]/g, '_');
            return text;
        };
        this.fontSize = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(control['size']['height'](), context.measureUnit());
        });
        this.letterSpacing = external_ko_namespaceObject.pureComputed(() => {
            return Math.ceil(this.fontSize() / 10);
        });
        this.css = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.zipCodeFontCss(this.fontSize()), this.cssCalculator.backGroundCss(), this.cssCalculator.zipCodeAlignment(), this.cssCalculator.foreColorCss());
        });
        this.contentCss = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.cssCalculator.zipCodeAlignment(), this.cssCalculator.paddingsCss(), { 'letterSpacing': this.letterSpacing() + 'px' }, { 'lineHeight': 'inherit' });
        });
    }
}

;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls.js











































































































;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrDetailReportBandMetaData.js




const detailReportBandSerializationInfo = [
    bandsMetadata_level, height, pageBreak, detailReportBandScripts,
    drillDownDetailReportExpanded,
    drillDownControl,
].concat(commonBandSerializationInfo, datasourcePrintOptionsGroup).filter((x) => x.propertyName !== 'bands').concat([{
        propertyName: 'bands',
        modelName: 'Bands',
        array: true
    }]);
const popularPropertiesDetailReport = ['dataSource', 'dataMember', 'dataAdapter', 'filterString'];

;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrGroupBandMetaData.js







const groupUnion = {
    propertyName: 'groupUnion',
    modelName: '@GroupUnion', displayName: 'Group Union', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBand.GroupUnion', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'None', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.GroupUnion.None' },
        { value: 'WholePage', displayValue: 'Whole Page', localizationId: 'DevExpress.XtraReports.UI.GroupUnion.WholePage' },
        { value: 'WithFirstDetail', displayValue: 'With First Detail', localizationId: 'DevExpress.XtraReports.UI.GroupUnion.WithFirstDetail' }
    ]
};
const groupFooterUnion = {
    propertyName: 'groupFooterUnion',
    modelName: '@GroupUnion', displayName: 'Group Union', localizationId: 'DevExpress.XtraReports.UI.GroupFooterBand.GroupUnion', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'None', from: external_DevExpress_Analytics_Utils_namespaceObject.fromEnum,
    valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraReports.UI.GroupFooterUnion.None' },
        { value: 'WithLastDetail', displayValue: 'With Last Detail', localizationId: 'DevExpress.XtraReports.UI.GroupFooterUnion.WithLastDetail' }
    ]
};
const groupBand = [keepTogetherDefaultValueFalse, bandsMetadata_level, pageBreak, repeatEveryPage].concat(bandSerializationInfo);
const sortingSummarySerializationsInfo = [
    { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', localizationId: 'DevExpress.XtraReports.UI.XRGroupSortingSummary.Enabled', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
    {
        propertyName: 'Function', modelName: '@Function', displayName: 'Function', localizationId: 'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function', defaultVal: 'Sum', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        get valuesArray() {
            return getSummaryFunctionValues();
        }
    },
    { propertyName: 'fieldName', modelName: '@FieldName', displayName: 'Field Name', localizationId: 'DevExpress.XtraReports.UI.XRGroupSortingSummary.FieldName', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field') },
    { propertyName: 'ignoreNullValues', modelName: '@IgnoreNullValues', displayName: 'Ignore Null Values', localizationId: 'DevExpress.XtraReports.UI.XRGroupSortingSummary.IgnoreNullValues', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') },
    {
        propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'SortOrder', localizationId: 'DevExpress.XtraReports.UI.XRGroupSortingSummary.SortOrder', defaultVal: 'Ascending', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
        valuesArray: [
            { value: 'Ascending', displayValue: 'Ascending', localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending' },
            { value: 'Descending', displayValue: 'Descending', localizationId: 'DevExpress.XtraReports.UI.XRColumnSortOrder.Descending' }
        ]
    },
];
const groupFields = {
    propertyName: 'groupFields',
    modelName: 'GroupFields', displayName: 'Group Fields', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBand.GroupFields', array: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'),
    addHandler: GroupFieldModel.createNew, template: '#dxrd-collection-item-group',
    getChildCaption: (index) => {
        if (index === 0)
            return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Group By', 'DataAccessUIStringId.QueryBuilderColumns_GroupBy');
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Then By', 'ASPxReportsStringId.ReportDesigner_SortFields_ThenBy');
    }
};
const sortingSummary = { propertyName: 'sortingSummary', modelName: 'SortingSummary', displayName: 'Sorting Summary', localizationId: 'DevExpress.XtraReports.UI.GroupHeaderBand.SortingSummary', info: sortingSummarySerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const groupHeaderBandSerializationInfo = [groupFields, groupUnion, sortingSummary, drillDownDetailReportExpanded,
    drillDownControl, groupHeaderBandScripts].concat(groupBand);
const groupFooterBandSerializationInfo = [groupFooterUnion, printAtBottom, groupBandScripts].concat(groupBand);
const popularPropertiesGroupFooter = ['groupFooterUnion', 'pageBreak', 'keepTogether', 'repeatEveryPage', 'printAtBottom'];
const popularPropertiesGroupHeader = ['groupFields', 'groupUnion', 'level', 'pageBreak', 'keepTogether', printAcrossBands.propertyName, 'repeatEveryPage'];

;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrPageBandMetaData.js




const printOn = {
    propertyName: 'printOn',
    modelName: '@PrintOn', displayName: 'Print On', localizationId: 'DevExpress.XtraReports.UI.PageBand.PrintOn', defaultVal: 'AllPages',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'AllPages', displayValue: 'All Pages', localizationId: 'DevExpress.XtraReports.UI.PrintOnPages.AllPages' },
        { value: 'NotWithReportHeader', displayValue: 'Not with Report Header', localizationId: 'DevExpress.XtraReports.UI.PrintOnPages.NotWithReportHeader' },
        { value: 'NotWithReportFooter', displayValue: 'Not with Report Footer', localizationId: 'DevExpress.XtraReports.UI.PrintOnPages.NotWithReportFooter' },
        { value: 'NotWithReportHeaderAndReportFooter', displayValue: 'Not with Report Header and Report Footer', localizationId: 'DevExpress.XtraReports.UI.PrintOnPages.NotWithReportHeaderAndReportFooter' }
    ]
};
const pageBandSerializationInfoPageHeader = [printOn, commonBandScripts].concat(bandSerializationInfo);
const pageBandSerializationInfo = [printOn, commonBandScripts].concat(bandSerializationInfo);
const popularPropertiesPageHeader = ['printOn', printAcrossBands.propertyName];
const popularPropertiesPageFooter = ['printOn'];

;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrVerticalBandMetaData.js





const xrVerticalBandMetaData_width = { propertyName: 'width', modelName: '@WidthF', defaultVal: 300, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Width', localizationId: 'DevExpress.XtraReports.UI.XRControl.Width', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, localizable: true };
const commonVerticalBandProperties = [xrVerticalBandMetaData_width, keepTogetherDefaultValueFalse].concat(bandSerializationInfo);
const bandLayout = {
    propertyName: 'bandLayout',
    modelName: '@BandLayout',
    displayName: 'Band Layout',
    localizationId: 'DevExpress.XtraReports.UI.VerticalDetailBand.BandLayout',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'AcrossOnly', displayValue: 'Across Only', localizationId: 'DevExpress.XtraReports.UI.VerticalBandLayout.AcrossOnly' },
        { value: 'AcrossThenDown', displayValue: 'Across Then Down', localizationId: 'DevExpress.XtraReports.UI.VerticalBandLayout.AcrossThenDown' }
    ],
    defaultVal: 'AcrossOnly'
};
const verticalHeaderBandSerializationInfo = [repeatEveryPage].concat(commonVerticalBandProperties);
const popularPropertiesVerticalHeaderBand = ['repeatEveryPage'];
const verticalTotalBandSerializationInfo = [].concat(commonVerticalBandProperties);
const popularPropertiesVerticalTotalBand = [];

;// ./node_modules/devexpress-reporting/designer/bands/metadata/xrVerticalDetailBandMetaData.js


const verticalDetailBandSerializationInfo = [bandLayout, sortFields].concat(commonVerticalBandProperties);
const popularPropertiesVerticalDetailBand = ['sortFields', 'bandLayout'];

;// ./node_modules/devexpress-reporting/scopes/reporting-designer-bands-metadata.js





















;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrCharactercomb.js














const cellVerticalSpacing = { propertyName: 'verticalSpacing', localizable: true, modelName: '@CellVerticalSpacing', defaultVal: 0, displayName: 'Cell Vertical Spacing', localizationId: 'DevExpress.XtraReports.UI.XRCharacterComb.CellVerticalSpacing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const cellHorizontalSpacing = { propertyName: 'horizontalSpacing', localizable: true, modelName: '@CellHorizontalSpacing', defaultVal: 0, displayName: 'Cell Horizontal Spacing', localizationId: 'DevExpress.XtraReports.UI.XRCharacterComb.CellHorizontalSpacing', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const cellWidth = {
    propertyName: 'cellWidth', modelName: '@CellWidth', defaultVal: 25, displayName: 'Cell Width', localizable: true, localizationId: 'DevExpress.XtraReports.UI.XRCharacterComb.CellWidth', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), editorOptions: { placeholder: external_ko_namespaceObject.observable((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('(Auto)', 'ASPxReportsStringId.ReportDesigner_PropertyGrid_AutoValueString')) }
};
const cellHeight = {
    propertyName: 'cellHeight', modelName: '@CellHeight', defaultVal: 25, displayName: 'Cell Height', localizable: true, localizationId: 'DevExpress.XtraReports.UI.XRCharacterComb.CellHeight', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), editorOptions: { placeholder: external_ko_namespaceObject.observable((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('(Auto)', 'ASPxReportsStringId.ReportDesigner_PropertyGrid_AutoValueString')) }
};
const cellSizeMode = {
    propertyName: 'sizeMode', modelName: '@CellSizeMode', displayName: 'Cell Size Mode', localizationId: 'DevExpress.XtraReports.UI.XRCharacterComb.CellSizeMode', defaultVal: 'AutoSize', editor: designerEditorTemplates.getEditor('comboboxUndo'),
    valuesArray: [
        { value: 'Custom', displayValue: 'Custom', localizationId: 'DevExpress.XtraPrinting.SizeMode.Custom' },
        { value: 'AutoWidth', displayValue: 'Auto Width', localizationId: 'DevExpress.XtraPrinting.SizeMode.AutoWidth' },
        { value: 'AutoHeight', displayValue: 'Auto Height', localizationId: 'DevExpress.XtraPrinting.SizeMode.AutoHeight' },
        { value: 'AutoSize', displayValue: 'Auto Size', localizationId: 'DevExpress.XtraPrinting.SizeMode.AutoSize' }
    ]
};
const xrCharactercomb_wordWrap = { propertyName: 'wordWrap', modelName: '@WordWrap', defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Word Wrap', localizationId: 'DevExpress.XtraReports.UI.XRControl.WordWrap', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const characterCombFont = { propertyName: 'font', modelName: '@Font', displayName: 'Font', localizationId: 'DevExpress.XtraReports.UI.XRControl.Font', editor: designerEditorTemplates.getEditor('fontUndo') };
const characterCombBorders = { propertyName: 'borders', modelName: '@Borders', displayName: 'Borders', localizationId: 'DevExpress.XtraReports.UI.XRControl.Borders', defaultVal: 'All', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('borders') };
const characterCombBorderDashStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, borderDashStyle, { valuesArray: borderDashStyleValues });
const characterCombSerializationsInfo = [
    accessibleRole, styleName, evenStyleName, oddStyleName, stylePriority, canPublish, metadata_backColor, autoWidth, action,
    formattingRuleLinks, cellSizeMode, xrCharactercomb_wordWrap, cellWidth, cellHeight, cellVerticalSpacing, cellHorizontalSpacing, dataBindings(['Text']),
    metadata_textAlignment, metadata_text, textFormatString, metadata_textArea, nullValueText, keepTogetherDefaultValueFalse, summary, multiline, xrCharactercomb_wordWrap,
    xlsxFormatString, rtl, characterCombBorders, borderWidth, characterCombBorderDashStyle, metadata_borderColor, characterCombFont, foreColor, editOptions, interactiveSorting
].concat(createSinglePopularBindingInfos('Text'), baseControlProperties, navigationGroup, canGrowShrinkGroup, processGroup, sizeLocation);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrChart.js











const xrChart_chart = { propertyName: 'chart', modelName: 'Chart', from: chart.from, toJsonObject: chart.toJsonObject };
const controlParametersInfo = {
    propertyName: 'controlParameters', modelName: 'Parameters', displayName: 'Parameters', localizationId: 'DevExpress.XtraReports.UI.XRChart.Parameters',
    array: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'), addHandler: ControlParameter.createNew, template: '#dxrd-commonCollectionItem'
};
const chartRtl = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, rtl);
chartRtl.defaultVal = undefined;
const xrChartSerializationInfo = [appearanceName, paletteName, xrChart_chart, stylePriority, chartDataSource, imageType, chartScripts,
    controlParametersInfo, chartRtl, action,
    { propertyName: 'dataMember', displayName: 'Data Member', localizationId: 'DevExpress.XtraReports.UI.XRChart.DataMember', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('dataMember') }
].concat(baseControlProperties, sizeLocation, bordersProperties, navigationGroup);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrCheckbox.js













const checkState = {
    propertyName: 'checkBoxState',
    modelName: '@CheckBoxState', displayName: 'Check Box State', localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.CheckBoxState', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    defaultVal: 'Unchecked',
    valuesArray: [
        { value: 'Unchecked', displayValue: 'Unchecked', localizationId: 'StringId.CheckUnchecked' },
        { value: 'Checked', displayValue: 'Checked', localizationId: 'StringId.CheckChecked' },
        { value: 'Indeterminate', displayValue: 'Indeterminate', localizationId: 'StringId.CheckIndeterminate' }
    ]
};
const checked = { propertyName: 'checked', modelName: '@Checked', defaultVal: false, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool, displayName: 'Checked', localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.Checked', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool') };
const glyphOptions = {
    propertyName: 'glyphOptions',
    modelName: 'GlyphOptions',
    displayName: 'Glyph Options',
    localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.GlyphOptions',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'),
    from: (model, serializer) => new GlyphOptions(model, serializer),
    toJsonObject: (value, serializer) => serializer.serialize(value)
};
const checkEditOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, editOptions, {
    propertyName: 'checkEditOptions',
    from: (model, serializer) => new CheckEditOptions(model, serializer)
});
const checkboxTextFormatString = { ...textFormatString, descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRCheckBox.TextFormatString.Description' };
const checkboxTextTrimming = { ...textTrimming, descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRCheckBox.TextTrimming.Description' };
const checkboxSerializationsInfo = [
    checkState, checked, metadata_text, action, checkboxTextFormatString, wordWrap, keepTogether, anchorVertical, anchorHorizontal, glyphOptions,
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_textAlignment, { defaultVal: 'MiddleLeft' }),
    textControlScripts, checkboxTextTrimming, xlsxFormatString,
    dataBindings(['Text', 'NavigateUrl', 'Tag', 'Bookmark', 'CheckBoxState']),
    rtl,
    checkEditOptions
].concat(createPopularBindingInfos({ propertyName: 'CheckBoxState', localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.CheckBoxState' }), createPopularBindingInfos({ propertyName: 'Text', localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.Text' }), sizeLocation, commonControlProperties, fontGroup, navigationGroup);
const popularPropertiesCheckBox = ['checkBoxState', 'popularDataBindingCheckState', 'text', 'popularDataBindingText', 'glyphOptions', 'bookmark', 'bookmarkParent', 'textFormatString', 'alignment'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrControl.js






const panelSerializationsInfo = [
    canGrow, canShrink, keepTogether, anchorVertical, anchorHorizontal, controlScripts, action,
    dataBindings(['Bookmark', 'NavigateUrl', 'Tag']),
    { propertyName: 'controls', modelName: 'Controls', array: true },
    rtl
].concat(sizeLocation, commonControlProperties, navigationGroup).filter(x => x != accessibleDescription);
const xrControlSerializationsInfo = [
    allowMarkupText, anchorVertical, anchorHorizontal,
    dataBindings(['Tag'])
].concat(sizeLocation, commonControlProperties);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrCrossband.js







const crossBandLineWidth = { propertyName: 'width', modelName: '@WidthF', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Width', localizationId: 'DevExpress.XtraReports.UI.XRControl.Width', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel };
const startPoint = { propertyName: 'startPoint', modelName: '@StartPointFloat', from: external_DevExpress_Analytics_Elements_namespaceObject.Point.fromString, displayName: 'Start Point', localizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.StartPoint', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.StartPointF.Description', localizable: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const endPoint = { propertyName: 'endPoint', modelName: '@EndPointFloat', from: external_DevExpress_Analytics_Elements_namespaceObject.Point.fromString, displayName: 'End Point', localizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.EndPoint', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.EndPointF.Description', localizable: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const startBand = { propertyName: 'startBand', modelName: '@StartBand', link: true, displayName: 'Start Band', localizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.StartBand', editor: designerEditorTemplates.getEditor('bands') };
const endBand = { propertyName: 'endBand', modelName: '@EndBand', link: true, displayName: 'End Band', localizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.EndBand', editor: designerEditorTemplates.getEditor('bands') };
const borderDashStyleCrossband = {
    propertyName: 'borderDashStyleCrossband', modelName: '@BorderDashStyle',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), displayName: 'Border Dash Style', localizationId: 'DevExpress.XtraReports.UI.XRControl.BorderDashStyle', valuesArray: borderDashStyleValues
};
const xrCrossband_width = { propertyName: 'width', modelName: '@WidthF', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Width', localizationId: 'DevExpress.XtraReports.UI.XRControl.Width', descriptionLocalizationId: 'DevExpress.XtraReports.UI.XRCrossBandControl.WidthF.Description', from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, localizable: true };
const crossBandBoxControlSerializationsInfo = [
    startPoint, startBand, endPoint, endBand, xrCrossband_width,
    metadata_borderColor, borderDashStyleCrossband, canPublish,
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, borders, { defaultVal: 'All' }),
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, borderWidth, { defaultVal: 2 }),
    { propertyName: 'locationF', modelName: '@LocationFloat', from: external_DevExpress_Analytics_Elements_namespaceObject.Point.fromString },
].concat(baseControlProperties);
const crossBandLineControlSerializationsInfo = [
    startPoint, startBand, endPoint, endBand, xrCrossband_width,
    foreColor, metadata_lineStyle, crossBandLineWidth, canPublish,
    { propertyName: 'locationF', modelName: '@LocationFloat', from: external_DevExpress_Analytics_Elements_namespaceObject.Point.fromString, }
].concat(baseControlProperties);
const popularPropertiesCrossLine = ['lineStyle'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/crosstab/printOptions.js


const crossTabPrintOptionsInfo = [
    {
        propertyName: 'printLayout', modelName: '@PrintLayout', displayName: 'PrintLayout', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabPrintOptions.PrintLayout', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), defaultVal: 'AcrossOnly', valuesArray: [
            { displayValue: 'AcrossOnly', value: 'AcrossOnly', localizationId: 'DevExpress.XtraReports.UI.PrintLayout.AcrossOnly' },
            { displayValue: 'AcrossThenDown', value: 'AcrossThenDown', localizationId: 'DevExpress.XtraReports.UI.PrintLayout.AcrossThenDown' },
        ]
    }, { propertyName: 'acrossThenDownOffset', modelName: '@AcrossThenDownOffset', displayName: 'Across Then Down Offset', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabPrintOptions.AcrossThenDownOffset', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), defaultVal: 10 },
    { propertyName: 'repeatRowHeaders', modelName: '@RepeatRowHeaders', displayName: 'Repeat Row Headers', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabPrintOptions.RepeatRowHeaders', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'repeatColumnHeaders', modelName: '@RepeatColumnHeaders', displayName: 'Repeat Column Headers', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabPrintOptions.RepeatColumnHeaders', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool },
    { propertyName: 'printTotalsForSingleValues', modelName: '@PrintTotalsForSingleValues', displayName: 'Print Totals For Single Values', localizationId: 'DevExpress.XtraReports.UI.CrossTab.CrossTabPrintOptions.PrintTotalsForSingleValues', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), defaultVal: true, from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }
];
const crossTabPrintOptions = { propertyName: 'printOptions', modelName: 'PrintOptions', localizationId: 'DevExpress.XtraReports.UI.XRCrossTab.PrintOptions', displayName: 'Print Options', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: crossTabPrintOptionsInfo };

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrCrossTab.js









const xrCrossTab_cells = { propertyName: 'cells', modelName: 'Cells', array: true };
const originalPivotGridLayout = { propertyName: 'originalPivotGridLayout', modelName: '@OriginalPivotGridLayout', defaultVal: '' };
const crossTabSerializationInfo = [rowFields, columnFields, dataFields, rowDefinitions,
    columnDefinitions, dataSource, metadata_dataMember, crossTabLayoutOptions, crossTabPrintOptions,
    originalPivotGridLayout, controlParametersInfo, controlScripts, metadata_filterString, metadata_filterStringEditable].concat(baseControlProperties, sizeLocation, bookmarkGroup, xrCrossTab_cells, crossTabStyles);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrGauge.js











const actualValue = { propertyName: 'actualValue', defaultVal: null, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Actual Value', localizationId: 'DevExpress.XtraReports.UI.XRGauge.ActualValue', modelName: '@ActualValue' };
const maximum = { propertyName: 'maximum', defaultVal: null, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Maximum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum', modelName: '@Maximum' };
const minimum = { propertyName: 'minimum', modelName: '@Minimum', defaultVal: null, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Minimum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' };
const tickmarkCount = { propertyName: 'tickmarkCount', modelName: '@TickmarkCount', defaultVal: 11, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Tickmark Count', localizationId: 'DevExpress.XtraReports.UI.XRGauge.TickmarkCount' };
const targetValue = { propertyName: 'targetValue', modelName: '@TargetValue', defaultVal: null, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Target Value', localizationId: 'DevExpress.XtraReports.UI.XRGauge.TargetValue' };
const viewStyle = { propertyName: 'viewStyle', modelName: '@ViewStyle', displayName: 'View Style', localizationId: 'DevExpress.XtraReports.UI.XRGauge.ViewStyle', editor: designerEditorTemplates.getEditor('viewStyle') };
const viewTheme = {
    propertyName: 'viewTheme', modelName: '@ViewTheme',
    defaultVal: 'FlatLight', displayName: 'View Theme', localizationId: 'DevExpress.XtraReports.UI.XRGauge.ViewTheme', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'FlatLight', displayValue: 'FlatLight', localizationId: 'GaugesPresetsStringId.ThemeFlatLight' },
        { value: 'FlatDark', displayValue: 'FlatDark', localizationId: 'GaugesPresetsStringId.ThemeFlatDark' }
    ]
};
const viewType = {
    propertyName: 'viewType', modelName: '@ViewType',
    defaultVal: 'Circular', displayName: 'View Type', localizationId: 'DevExpress.XtraReports.UI.XRGauge.ViewType', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: [
        { value: 'Circular', displayValue: 'Circular', localizationId: 'ASPxReportsStringId.ReportDesigner_GaugeViewType_Circular' },
        { value: 'Linear', displayValue: 'Linear', localizationId: 'ASPxReportsStringId.ReportDesigner_GaugeViewType_Linear' }
    ]
};
const xrGaugeSerializationInfo = [
    viewStyle, viewTheme, viewType, actualValue, tickmarkCount, maximum, minimum, targetValue,
    anchorVertical, anchorHorizontal, controlScripts, imageType, action,
    dataBindings(['ActualValue', 'Bookmark', 'Maximum', 'Minimum', 'NavigateUrl', 'Tag', 'TargetValue'])
].concat(XRGaugeViewModel.bindings
    .map(name => createPopularBindingInfos({ propertyName: name, localizationId: 'DevExpress.XtraReports.UI.XRGauge.' + name }))
    .reduce((a, b) => a.concat(b)))
    .concat(sizeLocation, commonControlProperties, navigationGroup);
const popularPropertiesGauge = ['viewType', 'viewStyle', 'viewTheme', 'actualValue', 'popularDataBindingActualValue', 'targetValue', 'popularDataBindingTargetValue',
    'minimum', 'popularDataBindingMinimum', 'maximum', 'popularDataBindingMaximum'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrLine.js






const lineDirection = {
    propertyName: 'lineDirection',
    modelName: '@LineDirection',
    defaultVal: 'Horizontal',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    displayName: 'Line Direction', localizationId: 'DevExpress.XtraReports.UI.XRLine.LineDirection',
    valuesArray: [
        { value: 'Horizontal', displayValue: 'Horizontal', localizationId: 'DevExpress.XtraReports.UI.LineDirection.Horizontal' },
        { value: 'Vertical', displayValue: 'Vertical', localizationId: 'DevExpress.XtraReports.UI.LineDirection.Vertical' },
        { value: 'Slant', displayValue: 'Slant', localizationId: 'DevExpress.XtraReports.UI.LineDirection.Slant' },
        { value: 'BackSlant', displayValue: 'BackSlant', localizationId: 'DevExpress.XtraReports.UI.LineDirection.BackSlant' }
    ]
};
const lineSerializationsInfo = [
    foreColor, keepTogether, anchorVertical, anchorHorizontal,
    lineWidth, lineDirection, metadata_lineStyle, controlScripts,
    dataBindings(['Tag'])
].concat(sizeLocation, commonControlProperties);
const popularPropertiesLine = ['lineDirection', 'lineStyle', 'lineWidth', 'anchorVertical', 'anchorHorizontal'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrPagebreak.js




const pageBreakSerializationsInfo = [metadata_location, formattingRuleLinks, truncatedControlScripts].concat(baseControlProperties);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrPageinfo.js










const pageInfo = {
    propertyName: 'pageInfo',
    modelName: '@PageInfo', defaultVal: 'NumberOfTotal', displayName: 'Page Information', localizationId: 'DevExpress.XtraReports.UI.XRPageInfo.PageInfo',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    valuesArray: pageInfoValuesMap
};
const startPageNumber = {
    propertyName: 'startPageNumber',
    modelName: '@StartPageNumber', displayName: 'Start Page Number', localizationId: 'DevExpress.XtraReports.UI.XRPageInfo.StartPageNumber', defaultVal: 1, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric')
};
const runningBand = {
    propertyName: 'runningBand', modelName: '@RunningBand', link: true, displayName: 'Running Band', localizationId: 'DevExpress.XtraReports.UI.XRPageInfo.RunningBand', editor: designerEditorTemplates.getEditor('runningBand')
};
const pageInfoSerializationsInfo = [
    anchorVertical, anchorHorizontal, metadata_textAlignment, wordWrap, textFormatString, pageInfo, startPageNumber, runningBand,
    textControlScripts, rtl, action,
    dataBindings(['Bookmark', 'NavigateUrl', 'Tag']),
].concat(sizeLocation, commonControlProperties, fontGroup, navigationGroup).filter(x => x != accessibleDescription);
const popularPropertiesPageInfo = ['pageInfo', 'startPageNumber', 'textFormatString', 'runningBand', 'anchorVertical'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrPivotgrid.js









const linesAppearance = { propertyName: 'linesAppearance', modelName: 'Lines', displayName: 'Lines', localizationId: 'DevExpress.XtraReports.UI.PivotGrid.XRPivotGridAppearances.Lines', info: appearanceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const pivotGridAppearances = { propertyName: 'appearances', modelName: 'Appearance', displayName: 'Appearance', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Appearance', info: appearancesInfo.concat(linesAppearance), editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const criteriaString = { propertyName: '_criteriaString', modelName: '@CriteriaString' };
const criteriaStringEditable = { propertyName: 'criteriaString', displayName: 'Criteria', localizationId: 'DevExpress.XtraPivotGrid.Prefilter.Criteria', defaultVal: '', editor: designerEditorTemplates.getEditor('pivotCriteria') };
const xrPivotgrid_enabled = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', localizationId: 'DevExpress.XtraPivotGrid.PrefilterBase.Enabled', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
const prefilterSerializationsInfo = [criteriaString, criteriaStringEditable, xrPivotgrid_enabled];
const prefilter = { propertyName: 'prefilter', modelName: 'Prefilter', displayName: 'Prefilter', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.Prefilter', info: prefilterSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const autoTransposeChart = { propertyName: 'autoTransposeChart', modelName: '@AutoTransposeChart', displayName: 'Auto Transpose Chart', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.AutoTransposeChart', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, dataProvideMode = {
    propertyName: 'dataProvideMode', modelName: '@DataProvideMode', displayName: 'Data Provide Mode', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.DataProvideMode', defaultVal: 'ProvideLastLevelData', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'ProvideLastLevelData', displayValue: 'Provide Last Level Data', localizationId: 'DevExpress.XtraPivotGrid.PivotChartDataProvideMode.ProvideLastLevelData' },
        { value: 'UseCustomSettings', displayValue: 'Use Custom Settings', localizationId: 'DevExpress.XtraPivotGrid.PivotChartDataProvideMode.UseCustomSettings' }
    ]
}, dataProvidePriority = {
    propertyName: 'dataProvidePriority', modelName: '@DataProvidePriority', displayName: 'Data Provide Priority', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.DataProvidePriority', defaultVal: 'Rows', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Columns', displayValue: 'Columns', localizationId: 'DevExpress.XtraPivotGrid.PivotChartDataProvidePriority.Columns' },
        { value: 'Rows', displayValue: 'Rows', localizationId: 'DevExpress.XtraPivotGrid.PivotChartDataProvidePriority.Rows' }
    ]
}, fieldValuesProvideMode = {
    propertyName: 'fieldValuesProvideMode', modelName: '@FieldValuesProvideMode', displayName: 'Field Values Provide Mode', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.FieldValuesProvideMode', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.Default' },
        { value: 'DisplayText', displayValue: 'Display Text', localizationId: 'DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.DisplayText' },
        { value: 'Value', displayValue: 'Value', localizationId: 'DevExpress.XtraPivotGrid.PivotChartFieldValuesProvideMode.Value' }
    ]
}, maxAllowedPointCountInSeries = { propertyName: 'maxAllowedPointCountInSeries', modelName: '@MaxAllowedPointCountInSeries', displayName: 'Max Allowed Point Count In Series', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.MaxAllowedPointCountInSeries', defaultVal: 100, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, maxAllowedSeriesCount = { propertyName: 'maxAllowedSeriesCount', modelName: '@MaxAllowedSeriesCount', displayName: 'Max Allowed Series Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.MaxAllowedSeriesCount', defaultVal: 10, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, provideColumnCustomTotals = { propertyName: 'provideColumnCustomTotals', modelName: '@ProvideColumnCustomTotals', displayName: 'Provide Column Custom Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnCustomTotals', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideColumnGrandTotals = { propertyName: 'provideColumnGrandTotals', modelName: '@ProvideColumnGrandTotals', displayName: 'Provide Column Grand Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnGrandTotals', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideColumnTotals = { propertyName: 'provideColumnTotals', modelName: '@ProvideColumnTotals', displayName: 'Provide Column Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideColumnTotals', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideDataByColumns = { propertyName: 'provideDataByColumns', modelName: '@ProvideDataByColumns', displayName: 'Provide Data By Columns', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideDataByColumns', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideDataFieldsOnSeries = { propertyName: 'provideDataFieldsOnSeries', modelName: '@ProvideDataFieldsOnSeries', displayName: 'Provide Data Fields On Series', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideDataFieldsOnSeries', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideEmptyCells = { propertyName: 'provideEmptyCells', modelName: '@ProvideEmptyCells', displayName: 'Provide Empty Cells', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideEmptyCells', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideRowCustomTotals = { propertyName: 'provideRowCustomTotals', modelName: '@ProvideRowCustomTotals', displayName: 'Provide Row Custom Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowCustomTotals', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideRowGrandTotals = { propertyName: 'provideRowGrandTotals', modelName: '@ProvideRowGrandTotals', displayName: 'Provide Row Grand Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowGrandTotals', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, provideRowTotals = { propertyName: 'provideRowTotals', modelName: '@ProvideRowTotals', displayName: 'Provide Row Totals', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsChartDataSource.ProvideRowTotals', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, optionsChartDataSourceInfo = [autoTransposeChart, dataProvideMode, dataProvidePriority, fieldValuesProvideMode, maxAllowedPointCountInSeries,
    maxAllowedSeriesCount, provideColumnCustomTotals, provideColumnGrandTotals, provideColumnTotals, provideDataByColumns, provideDataFieldsOnSeries, provideEmptyCells,
    provideRowCustomTotals, provideRowGrandTotals, provideRowTotals], optionsChartDataSource = { propertyName: 'optionsChartDataSource', modelName: 'OptionsChartDataSource', displayName: 'Options Chart Data Source', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.OptionsChartDataSource', info: optionsChartDataSourceInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const allowCrossGroupVariation = { propertyName: 'allowCrossGroupVariation', modelName: '@AllowCrossGroupVariation', displayName: 'Allow Cross Group Variation', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.AllowCrossGroupVariation', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, autoExpandGroups = { propertyName: 'autoExpandGroups', modelName: '@AutoExpandGroups', displayName: 'Aut oExpand Groups', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.AutoExpandGroups', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, caseSensitive = { propertyName: 'caseSensitive', modelName: '@CaseSensitive', displayName: 'Case Sensitive', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.CaseSensitive', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, dataFieldUnboundExpressionMode = {
    propertyName: 'dataFieldUnboundExpressionMode', modelName: '@DataFieldUnboundExpressionMode', displayName: 'Data Field Unbound Expression Mode', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.DataFieldUnboundExpressionMode', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPivotGrid.DataFieldUnboundExpressionMode.Default' },
        { value: 'UseSummaryValues', displayValue: 'Use Summary Values', localizationId: 'DevExpress.XtraPivotGrid.DataFieldUnboundExpressionMode.UseSummaryValues' }
    ]
}, drillDownMaxRowCount = { propertyName: 'DrillDownMaxRowCount', modelName: '@DrillDownMaxRowCount', displayName: 'Drill Down Max Row Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.DrillDownMaxRowCount', defaultVal: -1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, filterByVisibleFieldsOnly = { propertyName: 'filterByVisibleFieldsOnly', modelName: '@FilterByVisibleFieldsOnly', displayName: 'Filter By Visible Fields Only', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.FilterByVisibleFieldsOnly', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, dataProcessingEngine = {
    propertyName: 'dataProcessingEngine', modelName: '@DataProcessingEngine', displayName: 'Data Processing Engine', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.DataProcessingEngine', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPivotGrid.PivotDataProcessingEngine.Default' },
        { value: 'Legacy', displayValue: 'Legacy', localizationId: 'DevExpress.XtraPivotGrid.PivotDataProcessingEngine.Legacy' },
        { value: 'LegacyOptimized', displayValue: 'Legacy Optimized', localizationId: 'DevExpress.XtraPivotGrid.PivotDataProcessingEngine.LegacyOptimized' }
    ]
}, useDataBindingAPI = { propertyName: 'useDataBindingAPI', modelName: '@UseDataBindingAPI', displayName: 'Use Data Binding API', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsData.UseDataBindingAPI', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, optionsDataInfo = [allowCrossGroupVariation, autoExpandGroups, caseSensitive, dataFieldUnboundExpressionMode, drillDownMaxRowCount, filterByVisibleFieldsOnly, dataProcessingEngine, useDataBindingAPI], optionsData = { propertyName: 'optionsData', modelName: 'OptionsData', displayName: 'Data Options', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.OptionsData', info: optionsDataInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const xrPivotgrid_area = {
    propertyName: 'area', modelName: '@Area', displayName: 'Area', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.Area', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPivotGrid.PivotDataArea.None' },
        { value: 'ColumnArea', displayValue: 'Column Area', localizationId: 'DevExpress.XtraPivotGrid.PivotDataArea.ColumnArea' },
        { value: 'RowArea', displayValue: 'Row Area', localizationId: 'DevExpress.XtraPivotGrid.PivotDataArea.RowArea' }
    ]
}, xrPivotgrid_areaIndex = { propertyName: 'areaIndex', modelName: '@AreaIndex', displayName: 'Area Index', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.AreaIndex', defaultVal: -1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, xrPivotgrid_columnValueLineCount = { propertyName: 'columnValueLineCount', modelName: '@ColumnValueLineCount', displayName: 'Column Value Line Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataFieldEx.ColumnValueLineCount', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, fieldNaming = {
    propertyName: 'fieldNaming', modelName: '@FieldNaming', displayName: 'Field Naming', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.FieldNaming', defaultVal: 'FieldName', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'FieldName', displayValue: 'Field Name', localizationId: 'DevExpress.XtraPivotGrid.DataFieldNaming.FieldName' },
        { value: 'Name', displayValue: 'Name', localizationId: 'DevExpress.XtraPivotGrid.DataFieldNaming.Name' }
    ]
}, rowHeaderWidth = { propertyName: 'rowHeaderWidth', modelName: '@RowHeaderWidth', displayName: 'Row Header Width', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataField.RowHeaderWidth', defaultVal: 100, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, xrPivotgrid_rowValueLineCount = { propertyName: 'rowValueLineCount', modelName: '@RowValueLineCount', displayName: 'Row Value Line Count', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsDataFieldEx.RowValueLineCount', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, optionsDataFieldInfo = [xrPivotgrid_area, xrPivotgrid_areaIndex, caption, xrPivotgrid_columnValueLineCount, fieldNaming, rowHeaderWidth, xrPivotgrid_rowValueLineCount], optionsDataField = { propertyName: 'optionsDataField', modelName: 'OptionsDataField', displayName: 'Data Field Options', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.OptionsDataField', info: optionsDataFieldInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const columnFieldValueSeparator = { propertyName: 'columnFieldValueSeparator', modelName: '@ColumnFieldValueSeparator', displayName: 'Column Field Value Separator', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.ColumnFieldValueSeparator', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, columnHeaderPaddingBottom = { propertyName: 'columnHeaderPaddingBottom', modelName: '@ColumnHeaderPaddingBottom', displayName: 'Column Header Padding Bottom', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.ColumnHeaderPaddingBottom', defaultVal: -1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, filterSeparatorBarPadding = { propertyName: 'filterSeparatorBarPadding', modelName: '@FilterSeparatorBarPadding', displayName: 'Filter Separator Bar Padding', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.FilterSeparatorBarPadding', defaultVal: -1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, mergeColumnFieldValues = { propertyName: 'mergeColumnFieldValues', modelName: '@MergeColumnFieldValues', displayName: 'Merge Column Field Values', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.MergeColumnFieldValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, mergeRowFieldValues = { propertyName: 'mergeRowFieldValues', modelName: '@MergeRowFieldValues', displayName: 'Merge Row Field Values', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.MergeRowFieldValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printColumnFieldValues = { propertyName: 'printColumnFieldValues', modelName: '@PrintColumnFieldValues', displayName: 'Print Column FieldValues', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnFieldValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printColumnHeaders = { propertyName: 'printColumnHeaders', modelName: '@PrintColumnHeaders', displayName: 'Print Column Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnHeaders', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, printDataHeaders = { propertyName: 'printDataHeaders', modelName: '@PrintDataHeaders', displayName: 'Print Data Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintDataHeaders', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, printFilterHeaders = { propertyName: 'printFilterHeaders', modelName: '@PrintFilterHeaders', displayName: 'Print Filter Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintFilterHeaders', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, printHeadersOnEveryPage = { propertyName: 'printHeadersOnEveryPage', modelName: '@PrintHeadersOnEveryPage', displayName: 'Print Headers on Every Page', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintHeadersOnEveryPage', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printColumnAreaOnEveryPage = { propertyName: 'printColumnAreaOnEveryPage', modelName: '@PrintColumnAreaOnEveryPage', displayName: 'Print Column Area on Every Page', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintColumnAreaOnEveryPage', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printRowAreaOnEveryPage = { propertyName: 'printRowAreaOnEveryPage', modelName: '@PrintRowAreaOnEveryPage', displayName: 'Print Row Area on Every Page', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowAreaOnEveryPage', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printHorzLines = { propertyName: 'printHorzLines', modelName: '@PrintHorzLines', displayName: 'Print Horizontal Lines', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintHorzLines', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, printRowFieldValues = { propertyName: 'printRowFieldValues', modelName: '@PrintRowFieldValues', displayName: 'Print Row FieldValues', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowFieldValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printRowHeaders = { propertyName: 'printRowHeaders', modelName: '@PrintRowHeaders', displayName: 'Print Row Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintRowHeaders', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, printUnusedFilterFields = { propertyName: 'printUnusedFilterFields', modelName: '@PrintUnusedFilterFields', displayName: 'Print Unused Filter Fields', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintUnusedFilterFields', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, printVertLines = { propertyName: 'printVertLines', modelName: '@PrintVertLines', displayName: 'Print Vertical Lines', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PrintVertLines', defaultVal: 'Default', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: defaultBooleanValuesArray }, rowFieldValueSeparator = { propertyName: 'rowFieldValueSeparator', modelName: '@RowFieldValueSeparator', displayName: 'Row Field Value Separator', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.RowFieldValueSeparator', defaultVal: 0, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, usePrintAppearance = { propertyName: 'usePrintAppearance', modelName: '@UsePrintAppearance', displayName: 'Use Print Appearance', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.UsePrintAppearance', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, optionsPrintInfo = [columnFieldValueSeparator, columnHeaderPaddingBottom, filterSeparatorBarPadding, mergeColumnFieldValues, mergeRowFieldValues, printColumnAreaOnEveryPage, printColumnFieldValues, printColumnHeaders, printDataHeaders, printFilterHeaders,
    printHeadersOnEveryPage, printHorzLines, printRowFieldValues, printRowHeaders, printRowAreaOnEveryPage, printUnusedFilterFields, printVertLines, rowFieldValueSeparator, usePrintAppearance], optionsPrint = { propertyName: 'optionsPrint', modelName: 'OptionsPrint', displayName: 'Print Options', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.OptionsPrint', info: optionsPrintInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const columnTotalsLocation = { propertyName: 'columnTotalsLocation', modelName: '@ColumnTotalsLocation', displayName: 'Column Totals Location', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ColumnTotalsLocation', defaultVal: 'Far', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [{ value: 'Near', displayValue: 'Near', localizationId: 'DevExpress.XtraPivotGrid.PivotTotalsLocation.Near' }, { value: 'Far', displayValue: 'Far ', localizationId: 'DevExpress.XtraPivotGrid.PivotTotalsLocation.Far' }] }, groupFieldsInCustomizationWindow = { propertyName: 'groupFieldsInCustomizationWindow', modelName: '@GroupFieldsInCustomizationWindow', displayName: 'Group Fields in the Customization Window', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsView.GroupFieldsInCustomizationWindow', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, rowTotalsLocation = {
    propertyName: 'rowTotalsLocation', modelName: '@RowTotalsLocation', displayName: 'Row Totals Location', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.RowTotalsLocation', defaultVal: 'Far', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { value: 'Near', displayValue: 'Near', localizationId: 'DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Near' },
        { value: 'Far', displayValue: 'Far', localizationId: 'DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Far' },
        { value: 'Tree', displayValue: 'Tree', localizationId: 'DevExpress.XtraPivotGrid.PivotRowTotalsLocation.Tree' }
    ]
}, rowTreeOffset = { propertyName: 'rowTreeOffset', modelName: '@RowTreeOffset', displayName: 'Row Tree Offset', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTreeOffset', defaultVal: 21, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, rowTreeWidth = { propertyName: 'rowTreeWidth', modelName: '@RowTreeWidth', displayName: 'Row Tree Width', localizationId: 'DevExpress.XtraPivotGrid.PivotGridOptionsViewBase.RowTreeWidth', defaultVal: 100, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') }, showColumnGrandTotalHeader = { propertyName: 'showColumnGrandTotalHeader', modelName: '@ShowColumnGrandTotalHeader', displayName: 'Show Column Grand Total Header', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnGrandTotalHeader', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showColumnGrandTotals = { propertyName: 'showColumnGrandTotals', modelName: '@ShowColumnGrandTotals', displayName: 'Show Column Grand Totals', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnGrandTotals', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showColumnHeaders = { propertyName: 'showColumnHeaders', modelName: '@ShowColumnHeaders', displayName: 'Show Column Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnHeaders', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showColumnTotals = { propertyName: 'showColumnTotals', modelName: '@ShowColumnTotals', displayName: 'Show Column Totals', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowColumnTotals', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showCustomTotalsForSingleValues = { propertyName: 'showCustomTotalsForSingleValues', modelName: '@ShowCustomTotalsForSingleValues', displayName: 'Show Custom Totals For Single Values', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowCustomTotalsForSingleValues', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showDataHeaders = { propertyName: 'showDataHeaders', modelName: '@ShowDataHeaders', displayName: 'Show Data Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowDataHeaders', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showFilterHeaders = { propertyName: 'showFilterHeaders', modelName: '@ShowFilterHeaders', displayName: 'Show Filter Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowFilterHeaders', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showFilterSeparatorBar = { propertyName: 'showFilterSeparatorBar', modelName: '@ShowFilterSeparatorBar', displayName: 'Show Filter Separator Bar', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowFilterSeparatorBar', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showGrandTotalsForSingleValues = { propertyName: 'showGrandTotalsForSingleValues', modelName: '@ShowGrandTotalsForSingleValues', displayName: 'Show Grand Totals For Single Values', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowGrandTotalsForSingleValues', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showHorzLines = { propertyName: 'showHorzLines', modelName: '@ShowHorzLines', displayName: 'Show Horz Lines', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowHorzLines', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showRowGrandTotalHeader = { propertyName: 'showRowGrandTotalHeader', modelName: '@ShowRowGrandTotalHeader', displayName: 'Show Row Grand Total Header', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowGrandTotalHeader', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showRowGrandTotals = { propertyName: 'showRowGrandTotals', modelName: '@ShowRowGrandTotals', displayName: 'Show Row Grand Totals', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowGrandTotals', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showRowHeaders = { propertyName: 'showRowHeaders', modelName: '@ShowRowHeaders', displayName: 'Show Row Headers', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowHeaders', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showRowTotals = { propertyName: 'showRowTotals', modelName: '@ShowRowTotals', displayName: 'Show Row Totals', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowRowTotals', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showTotalsForSingleValues = { propertyName: 'showTotalsForSingleValues', modelName: '@ShowTotalsForSingleValues', displayName: 'Show Totals For Single Values', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowTotalsForSingleValues', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, showVertLines = { propertyName: 'showVertLines', modelName: '@ShowVertLines', displayName: 'Show Vert Lines', localizationId: 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsViewBase.ShowVertLines', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool }, optionsViewInfo = [columnTotalsLocation, groupFieldsInCustomizationWindow, rowTotalsLocation, rowTreeOffset, rowTreeWidth, showColumnGrandTotalHeader, showColumnGrandTotals, showColumnHeaders, showColumnTotals, showCustomTotalsForSingleValues,
    showDataHeaders, showFilterHeaders, showFilterSeparatorBar, showGrandTotalsForSingleValues, showHorzLines, showRowGrandTotalHeader, showRowGrandTotals, showRowHeaders, showRowTotals,
    showTotalsForSingleValues, showVertLines], optionsView = { propertyName: 'optionsView', modelName: 'OptionsView', displayName: 'View Options', localizationId: 'DevExpress.XtraReports.UI.XRPivotGrid.OptionsView', info: optionsViewInfo, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
const pivotGridOptions = [optionsChartDataSource, optionsDataField, optionsData, optionsPrint, optionsView];
const pivotGridSerializationsInfo = [
    pivotGridAppearances,
    anchorVertical, anchorHorizontal, dataSource, metadata_dataMember, prefilter,
    keepTogether,
    pivotGridFieldsSerializable, pivotScripts, rtl
].concat(baseControlProperties, sizeLocation, bookmarkGroup, pivotGridStyles, pivotGridOptions);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrRichText.js









const rtf = { propertyName: '_rtf', defaultVal: '', displayName: 'RTF', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('stringArray'), localizationId: 'ASPxReportsStringId.ExportName_rtf' };
const textRtf = { propertyName: 'textRtf', defaultVal: '', displayName: 'Text', localizationId: 'DevExpress.XtraReports.UI.XRRichTextBase.RtfText', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('stringArray') };
const serializableRtfString = { propertyName: 'serializableRtfString', modelName: '@SerializableRtfString' };
const newDocumentData = { propertyName: '_newDocumentData', displayName: 'Load File', localizationId: 'AnalyticsCoreStringId.UploadFile', editor: designerEditorTemplates.getEditor('richTextLoad') };
const richTextSerializationsInfo = [
    serializableRtfString,
    rtf, textRtf, action,
    newDocumentData,
    nullValueText, keepTogetherDefaultValueFalse, anchorVertical, anchorHorizontal, textControlScripts,
    dataBindings(['Bookmark', 'Html', 'NavigateUrl', 'Rtf', 'Tag']),
    createPopularBindingInfo({ bindingName: 'Html', propertyName: 'popularDataBindingHtml', displayName: 'Html Data Binding', localizationId: 'ReportStringId.STag_Name_HtmlDataBinding' }, false),
    createPopularBindingInfo({ bindingName: 'Html', propertyName: 'popularExpressionHtml', displayName: 'Html Expression', localizationId: 'ReportStringId.STag_Name_HtmlExpressionBinding' }),
    createPopularBindingInfo({ bindingName: 'Rtf', propertyName: 'popularDataBindingRtf', displayName: 'Rtf Data Binding', localizationId: 'ReportStringId.STag_Name_RtfDataBinding' }, false),
    createPopularBindingInfo({ bindingName: 'Rtf', propertyName: 'popularExpressionRtf', displayName: 'Rtf Expression', localizationId: 'ReportStringId.STag_Name_RtfExpressionBinding' }),
].concat(sizeLocation, fontGroup, commonControlProperties, navigationGroup, processGroup, canGrowShrinkGroup).filter(x => x != accessibleDescription);
const popularPropertiesRichText = ['rtf', 'popularDataBindingRtf', 'popularExpressionRtf', 'html', 'popularDataBindingHtml', 'popularExpressionHtml', '_newDocumentData', 'bookmark', 'bookmarkParent', 'canGrow', 'canShrink'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrTable.js







const processHiddenCellMode = {
    propertyName: 'processHiddenCellMode',
    modelName: '@ProcessHiddenCellMode',
    displayName: 'Process Hidden Cell Mode',
    valuesArray: [
        { value: 'LeaveEmptySpace', displayValue: 'Leave Empty Space' },
        { value: 'ResizeCellsEqually', displayValue: 'Resize Cells Equally' },
        { value: 'ResizeCellsProportionally', displayValue: 'Resize Cells Proportionally' },
        { value: 'StretchPreviousCell', displayValue: 'Stretch Previous Cell' },
        { value: 'StretchNextCell', displayValue: 'Stretch Next Cell' },
        { value: 'DecreaseTableWidth', displayValue: 'Decrease Table Width' }
    ],
    defaultVal: 'LeaveEmptySpace',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'),
    localizationId: 'DevExpress.XtraReports.UI.XRTable.ProcessHiddenCellMode'
};
const accessibleRoleTable = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, accessibleRole, { valuesArray: [
        defaultAccessibleRole,
        { value: 'Table', displayValue: 'Table', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.Table' }
    ] });
const tableSerializationsInfo = [
    accessibleRoleTable,
    expressionableFont, foreColor, keepTogetherDefaultValueFalse, anchorVertical, anchorHorizontal, commonScripts,
    { propertyName: 'rows', modelName: 'Rows', array: true },
    dataBindings(['Bookmark', 'Tag']),
    rtl,
    metadata_textAlignment,
    processHiddenCellMode,
].concat(sizeLocation, commonControlProperties, bookmarkGroup).filter(x => x != accessibleDescription);
const popularPropertiesTable = ['bookmark', 'bookmarkParent'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrTableCell.js










const xrTableCell_weight = { propertyName: 'weight', localizable: true, modelName: '@Weight', defaultVal: 0, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel };
const rowSpan = { propertyName: 'rowSpan', modelName: '@RowSpan', displayName: 'Row Span', localizationId: 'DevExpress.XtraReports.UI.XRTableCell.RowSpan', defaultVal: 1, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
const accessibleRoleCell = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, accessibleRole, { valuesArray: [
        defaultAccessibleRole,
        { value: 'TableHeaderCell', displayValue: 'Table Header Cell', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.TableHeaderCell' }
    ] });
const tableCellSerializationsInfo = [
    accessibleRoleCell,
    xrTableCell_weight, labelScripts, rowSpan, textTrimming,
    { propertyName: 'width', displayName: 'Width', localizationId: 'DevExpress.XtraReports.UI.XRControl.Width' },
    { propertyName: 'controls', modelName: 'Controls', array: true },
    dataBindings(['Text', 'NavigateUrl', 'Tag', 'Bookmark']),
    textEditOptions, allowMarkupText, action
].concat(createSinglePopularBindingInfos('Text'), labelGroup);
const popularPropertiesTableCell = ['text', 'textArea', 'popularDataBinding', 'textFormatString', 'Summary', 'canGrow', 'canShrink', 'multiline', 'wordWrap'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrTableRow.js





const accessibleRoleRow = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, accessibleRole, { valuesArray: [
        defaultAccessibleRole,
        { value: 'TableHeaderRow', displayValue: 'Table Header Row', localizationId: 'DevExpress.XtraReports.UI.XRAccessibleRole.TableHeaderRow' }
    ] });
const tableRowSerializationsInfo = [
    accessibleRoleRow,
    xrTableCell_weight, metadata_textAlignment, keepTogether, controlScripts,
    { propertyName: 'height', displayName: 'Height', localizationId: 'DevExpress.XtraReports.UI.XRControl.Height' },
    cells,
].concat(commonControlProperties, fontGroup).filter(x => x != accessibleDescription);

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrTextControl.js








const labelSerializationsInfo = [
    accessibleRole,
    textEditOptions,
    allowMarkupText, autoWidth, anchorVertical, anchorHorizontal, labelScripts, textTrimming,
    action, dataBindings(['Text', 'NavigateUrl', 'Tag', 'Bookmark'])
].concat(createSinglePopularBindingInfos('Text'), sizeLocation, labelGroup);
const popularPropertiesLabel = ['text', 'textArea', 'popularDataBinding', 'textFormatString', 'Summary', 'angle', 'bookmark', 'bookmarkParent', 'allowMarkupText', 'autoWidth', 'canGrow', 'canShrink', 'multiline', 'wordWrap'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrZipcode.js









const segmentWidth = { propertyName: 'segmentWidth', modelName: '@SegmentWidth', defaultVal: 4, from: external_DevExpress_Analytics_Utils_namespaceObject.floatFromModel, editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), displayName: 'Segment Width', localizationId: 'DevExpress.XtraReports.UI.XRZipCode.SegmentWidth' };
const zipCodeSerializationInfo = [
    foreColor, segmentWidth, keepTogether, anchorVertical, anchorHorizontal, textControlScripts,
    (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, metadata_text, { defaultVal: '0' }), textFormatString,
    dataBindings(['Bookmark', 'NavigateUrl', 'Tag', 'Text'])
].concat(createSinglePopularBindingInfos('Text'), sizeLocation, commonControlProperties, navigationGroup);
const popularPropertiesZipCode = ['text', 'popularDataBinding', 'segmentWidth', 'bookmark', 'bookmarkParent'];

;// ./node_modules/devexpress-reporting/designer/controls/metadata/xrPdfSignature.js






const showSignatureDate = {
    propertyName: 'showSignatureDate', modelName: '@ShowSignatureDate', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Show Signature Date', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ShowSignatureDate',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const showCertificateName = {
    propertyName: 'showCertificateName', modelName: '@ShowCertificateName', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Show Certificate Name', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ShowCertificateName',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const showLocation = {
    propertyName: 'showLocation', modelName: '@ShowLocation', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Show Location', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ShowLocation',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const showSignatureReason = {
    propertyName: 'showSignatureReason', modelName: '@ShowSignatureReason', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Show Signature Reason', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ShowSignatureReason',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const showDistinguishedName = {
    propertyName: 'showDistinguishedName', modelName: '@ShowDistinguishedName', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Show Distinguished Name', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ShowDistinguishedName',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const showCaptions = {
    propertyName: 'showCaptions', modelName: '@ShowCaptions', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Show Captions', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ShowCaptions',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const displayDocumentSignature = {
    propertyName: 'displayDocumentSignature', modelName: '@DisplayDocumentSignature', defaultVal: 'true', from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool,
    displayName: 'Display Document Signature', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.DisplayDocumentSignature',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('bool')
};
const imageDisplayMode = {
    propertyName: 'imageDisplayMode', modelName: '@ImageDisplayMode', defaultVal: 'Show',
    displayName: 'Image Display Mode', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.ImageDisplayMode',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox'), valuesArray: [
        { displayValue: 'Show', localizationId: 'DevExpress.XtraPrinting.SignatureImageDisplayMode.Show', value: 'Show' },
        { displayValue: 'Hide', localizationId: 'DevExpress.XtraPrinting.SignatureImageDisplayMode.Hide', value: 'Hide' },
        { displayValue: 'Show Certificate Name As Image', localizationId: 'DevExpress.XtraPrinting.SignatureImageDisplayMode.ShowCertificateNameAsImage', value: 'ShowCertificateNameAsImage' }
    ]
};
const signatureOptionsInfo = [
    imageDisplayMode, displayDocumentSignature, showCaptions, showCertificateName, showDistinguishedName, showLocation, showSignatureDate, showSignatureReason
];
const signatureOptions = {
    propertyName: 'signatureOptions', modelName: 'SignatureOptions',
    displayName: 'Signature Options', localizationId: 'DevExpress.XtraReports.UI.XRPdfSignature.SignatureOptions',
    editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'),
    from: (model = {}, serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer()) => {
        const options = {
            getInfo: () => signatureOptionsInfo,
            isPropertyDisabled: function (propertyName) {
                return propertyName !== displayDocumentSignature.propertyName && !!this[displayDocumentSignature.propertyName]();
            }
        };
        serializer.deserialize(options, model);
        return options;
    },
    toJsonObject: (value, serializer, refs) => {
        return serializer.serialize(value, signatureOptionsInfo, refs);
    }
};
const pdfSignatureInfo = [signatureOptions, commonScripts, action].concat(sizeLocation, commonControlProperties, fontGroup, navigationGroup).filter(x => x != accessibleDescription);

;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-metadata.js

























































































;// ./node_modules/devexpress-reporting/scopes/reporting-designer-data-metadata.js





















;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-pivotGrid-metadata.js





;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-crossTab-metadata.js











;// ./node_modules/devexpress-reporting/designer/widgets/groups.js

















































const groups = {
    'Styles': {
        info: stylesInfo,
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Styles', 'DevExpress.XtraReports.UI.XRPivotGrid.Styles')
    },
    'Appearance': {
        info: [
            appearanceName, pivotGridAppearances, alignment, metadata_backColor, metadata_borderColor,
            borderDashStyle, borderDashStyleCrossband, borderWidth, borders,
            caption, cellFormat, columnValueLineCount,
            displayFolder, emptyCellText, emptyValueText,
            fillColor, metadata_font, expressionableFont, characterCombFont, foreColor,
            glyphOptions,
            grandTotalCellFormat, grandTotalText,
            lineDirection, metadata_lineStyle, lineWidth, metadata_padding, pageColor,
            paletteName, imageType, rowValueLineCount,
            signatureOptions, sparklineFake,
            stylePriority, metadata_textAlignment, textTrimming, totalCellFormat,
            totalValueFormat, valueFormat, viewStyle, viewTheme,
            viewType, formattingRuleLinks,
            columnIndex, rowIndex, watermarkId, watermarks
        ],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Appearance', 'DevExpress.XtraReports.UI.XRPivotGrid.Appearance')
    },
    'Behavior': {
        info: [
            allowedAreas, anchorVertical, anchorHorizontal, metadata_angle,
            pivotgridfield_area, areaIndexEditable, autoModule, allowMarkupText, autoWidth,
            barCodeOrientation, canGrow, canPublish, canShrink, conditionObj,
            drillDownControl, drillDownDetailReportExpanded, hierarchyPrintOptions, fillEmptySpace,
            generateOwnPages, columnAutoWidthMode, rowAutoHeightMode, rowVisible, columnVisible,
            groupInterval, groupIntervalNumericRange, totalsVisibility,
            displayName, formatting, groupFields, groupUnion, groupFooterUnion,
            keepTogether, keepTogetherWithDetailReports, bandsMetadata_level,
            moduleInfo, multiline, multiColumn,
            pageBreak, pageInfo, printAtBottom, printOn, printAcrossBands, processDuplicatesMode, processDuplicatesTarget, processNullValues,
            repeatEveryPage, measureUnit, rotated, runningBand, requestParameters, rowSpan,
            segmentWidth, shapeFake, external_DevExpress_Reporting_Viewer_Editing_namespaceObject.sizing, external_DevExpress_Reporting_Viewer_Editing_namespaceObject.imageAlignment, useImageMetadata, showPreviewMarginLines, showText, startPageNumber, stretch, barcodeFake, targetDeviceDpi,
            textFitMode, verticalContentSplitting, metadata_visible, wordWrap, scriptLanguage,
            reportExportOptionsSerializationInfo, horizontalContentSplitting,
            scriptReferencesString, allScripts, sortingSummary,
            tocTitle, tocLevelDefault, tocLevels, maxNestingLevel,
            editOptions, textEditOptions, checkEditOptions, imageEditOptions, interactiveSorting, sortBySummary,
            processHiddenCellMode, crossTabLayoutOptions, crossTabPrintOptions
        ],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Behavior', 'ReportStringId.CatBehavior')
    },
    'Data': {
        info: [
            accessibleDescription, accessibleRole, actualValue, seriesDataMember,
            checkState, checked, chartDataSource,
            dataSource, metadata_dataMember, dataAdapter, expandedInFieldsGroup, pivotGridDataSourceOptions,
            fieldName, metadata_filterStringEditable,
            imageSource, imageUrl, tickmarkCount, maximum, minimum, nullValueText, prefilter,
            runningTotal, sortFields, summary, showNewValues,
            sortMode, pivotgridfield_sortOrder, summaryDisplayType, summaryType,
            targetValue, metadata_tag, metadata_text, metadata_textArea, rtf, textRtf, newDocumentData, topValueCount, topValueShowOthers, topValueType,
            unboundExpression, unboundExpressionMode, unboundFieldName, unboundType, useNativeFormat,
            xlsxFormatString,
            pivotGridFieldsSerializable,
            valueMember, valueRange,
            reportSourceUrl, calculatedFields, parameterBindings, parametersInfo, controlParametersInfo,
            dataBindings([]), textFormatString,
            pdfSource, pdfSourceUrl,
            rowFields, columnFields, dataFields,
            calculatedFieldExpression,
            crossTabGroupInterval, crossTabGroupIntervalNumericRange, crossTabSortBySummaryInfo,
            external_DevExpress_Reporting_Export_Metadata_namespaceObject.pageRange, pageCount
        ],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Data', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data')
    },
    'Design': {
        info: [metadata_name, snapGridSize, drawWatermark, language],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Design', 'ReportStringId.CatDesign')
    },
    'Layout': {
        info: [
            cellHeight, cellHorizontalSpacing, cellSizeMode, cellVerticalSpacing, cellWidth,
            startBand, startPoint, endBand, endPoint, height,
            metadata_location, size, minWidth, xrCrossband_width
        ],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'DevExpress.XtraReports.UI.MultiColumn.Layout')
    },
    'Navigation': {
        info: [
            action, bookmark, bookmarkParent, bookmarkDuplicateSuppress, target, navigateUrl
        ],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Navigation', 'ASPxReportsStringId.DocumentViewer_RibbonNavigationGroupText')
    },
    'Page Settings': {
        info: [
            landscape, rollPaper, pageWidth, pageHeight, paperKind, margins, defaultPrinterSettingsUsingInfo
        ],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Settings', 'DevExpress.XtraPivotGrid.Data.PivotGridOptionsPrint.PageSettings')
    },
    'Printing': {
        info: [rtl, rtlReport, rtlLayout, reportPrintOptions],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Printing', 'ReportStringId.CatPrinting')
    },
    'Options': {
        info: pivotGridOptions.concat(options),
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Options', 'DevExpress.XtraPivotGrid.PivotGridFieldBase.Options')
    },
    'KPI': {
        info: [KPIGraphic],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Appearance', 'DevExpress.XtraReports.UI.XRPivotGrid.Appearance')
    },
    'Custom': {
        info: [],
        displayName: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Custom properties', '')
    }
};

;// ./node_modules/devexpress-reporting/designer/jsReportDesigner.js






class JSReportDesigner {
    get designerModel() {
        return this._designerModel();
    }
    set designerModel(newVal) {
        this._designerModel(newVal);
    }
    constructor(_designerModel) {
        this._designerModel = _designerModel;
    }
    UpdateLocalization(localization) {
        (0,external_DevExpress_Analytics_Utils_namespaceObject.updateLocalization)(localization);
    }
    GetDesignerModel() {
        return this.designerModel;
    }
    GetPreviewModel() {
        return this.designerModel.reportPreviewModel;
    }
    GetPropertyInfo(controlType, path) {
        return controlsFactory().getPropertyInfo(controlType, path);
    }
    GetButtonStorage() {
        return this.designerModel.actionStorage;
    }
    RunWizard(wizardType) {
        this.designerModel._wizardRunner.run(wizardType);
    }
    GetJsonReportModel() {
        return this.designerModel.model().serialize();
    }
    IsModified() {
        return this.designerModel && this.designerModel.isDirty();
    }
    ResetIsModified() {
        if (this.designerModel) {
            this.designerModel.isDirty(false);
            this.designerModel.undoEngine && this.designerModel.undoEngine().clearHistory();
        }
    }
    AddToPropertyGrid(groupName, property) {
        const group = groups[groupName];
        if (group) {
            group.info.push(property);
        }
        else {
            groups[groupName] = { info: [property] };
        }
    }
    AddParameterType(parameterInfo, editorInfo) {
        parameterTypeValues.push(parameterInfo);
        external_DevExpress_Analytics_Internal_namespaceObject.editorTypeMapper[parameterInfo.value] = editorInfo;
    }
    RemoveParameterType(parameterType) {
        const position = parameterTypeValues.indexOf(this.GetParameterInfo(parameterType));
        if (position !== -1) {
            parameterTypeValues.splice(position, 1);
        }
    }
    GetParameterInfo(parameterType) {
        return parameterTypeValues.filter(function (val) { return val.value === parameterType; })[0];
    }
    GetParameterEditor(valueType) {
        return external_DevExpress_Analytics_Internal_namespaceObject.editorTypeMapper[valueType];
    }
    ReportStorageGetData(url) {
        return ReportStorageWeb.getData(url);
    }
    ReportStorageSetData(reportLayout, url) {
        return ReportStorageWeb.setData(reportLayout, url);
    }
    ReportStorageSetNewData(reportLayout, url) {
        return ReportStorageWeb.setNewData(reportLayout, url);
    }
    SaveReport() {
        const navigateByReports = this.designerModel.navigateByReports;
        return this.ReportStorageSetData(navigateByReports.currentTab().context().report.serialize(), navigateByReports.currentTab().context().url());
    }
    GetTabs() {
        return this.designerModel.getTabs();
    }
    GetCurrentTab() {
        return this.designerModel.navigateByReports.currentTab();
    }
    CloseTab(tab, force = false) {
        this.designerModel.closeTab(tab, force);
    }
    CloseCurrentTab() {
        this.designerModel.navigateByReports.removeTab(this.designerModel.navigateByReports.currentTab());
    }
    AdjustControlCore() {
        this.designerModel && this.designerModel.updateSurfaceSize();
    }
    SaveNewReport(reportName) {
        const navigateByReports = this.designerModel.navigateByReports;
        return this.ReportStorageSetNewData(navigateByReports.currentTab().context().report.serialize(), reportName);
    }
    ReportStorageGetUrls() {
        return ReportStorageWeb.getUrls();
    }
    OpenReport(url) {
        this.designerModel.openReport(url);
    }
    ShowPreview() {
        this.designerModel.showPreview();
    }
}

;// external "DevExpress.QueryBuilder.Utils"
const external_DevExpress_QueryBuilder_Utils_namespaceObject = DevExpress.QueryBuilder.Utils;
;// external "DevExpress.Analytics.Tools"
const external_DevExpress_Analytics_Tools_namespaceObject = DevExpress.Analytics.Tools;
;// external "DevExpress.config"
const external_DevExpress_config_namespaceObject = DevExpress.config;
var external_DevExpress_config_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_config_namespaceObject);
;// external "DevExpress.ui.dxScrollView"
const external_DevExpress_ui_dxScrollView_namespaceObject = DevExpress.ui.dxScrollView;
var external_DevExpress_ui_dxScrollView_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxScrollView_namespaceObject);
;// ./node_modules/devexpress-reporting/designer/actions/actionId.js
const actionId_ActionId = {
    NewReport: 'dxrd-newreport',
    NewReportViaWizard: 'dxrd-newreport-via-wizard',
    OpenReport: 'dxrd-open-report',
    ReportWizard: 'dxrd-run-wizard',
    ReportWizardFullScreen: 'dxrd-run-wizard-full-screen',
    Preview: 'dxrd-preview',
    Scripts: 'dxrd-scripts',
    AddDataSource: 'dxrd-add-datasource',
    AddSqlDataSource: 'dxrd-add-sql-datasource',
    AddMultiQuerySqlDataSource: 'dxrd-add-multi-query-sql-datasource',
    ValidateBindings: 'dxrd-validate-bindings',
    Save: 'dxrd-save',
    SaveAs: 'dxrd-save-as',
    Exit: 'dxrd-exit',
    FullScreen: 'dxrd-fullscreen',
    Localization: 'dxrd-localization-editor',
};

;// ./node_modules/devexpress-reporting/designer/services/_controlConverterService.js


class ControlConverterService {
    static getXmlStringFromJson(controlJsonLayout, doneCallback, errorCallback) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'jsonToXmlString', JSON.stringify({ 'XRControlSerializer': { 'Controls': { 'Item1': controlJsonLayout } } }))
            .done((result) => doneCallback(result))
            .fail((error) => {
            const message = (0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(error);
            message && (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(message);
            errorCallback(error);
        });
    }
    static getControlModelFromXmlString(controlXmlLayout, doneCallback, errorCallback) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'xmlStringToJson', controlXmlLayout)
            .done((result) => doneCallback(JSON.parse(result).XRControlSerializer.Controls.Item1))
            .fail((error) => {
            const message = (0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(error);
            message && (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(message);
            errorCallback(error);
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_baseConverter.js



class BaseConverter {
    constructor() {
        this._model = null;
        this.popupOptions = {
            height: 250,
            visible: external_ko_namespaceObject.observable(false),
            title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Convert', 'ReportStringId.UD_Msg_ConvertBindingsCaption'),
            confirmMessage: '',
            infoMessage: '',
            linkText: '',
            linkUrl: '',
            container: (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(element),
            buttons: [
                {
                    toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                        text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Yes', 'AnalyticsCoreStringId.ParametersPanel_True'), type: 'default', stylingMode: 'contained', onClick: () => {
                            this._applyChanges();
                        }
                    }
                },
                {
                    toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                        text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('No', 'ASPxReportsStringId.ParametersPanel_No'), type: 'normal', stylingMode: 'contained', onClick: () => {
                            this._cancel();
                        }
                    }
                }
            ]
        };
    }
    convert(model) {
        if (!model)
            return;
        this._model = model;
        this.popupOptions.visible(true);
    }
    _applyChanges() {
        this.popupOptions.visible(false);
    }
    _cancel() {
        this.popupOptions.visible(false);
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_crossTabConverter.js













class CrossTabConverter extends BaseConverter {
    constructor(_selectionProvider, _context) {
        super();
        this._selectionProvider = _selectionProvider;
        this._context = _context;
        this._detailLink = 'https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRPivotGrid#convert-to-the-cross-tab-control';
        this.popupOptions.height = 316;
        this.popupOptions.confirmMessage = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The Cross Tab control does not support specific Pivot Grid functionality. Do you want to continue?', 'ASPxReportsStringId.ReportDesigner_ConvertPivotGridToCrossTab_Message_Confirmation');
        this.popupOptions.infoMessage = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("You can use the 'Revert to Original Pivot Grid' action in the Cross Tab properties window to restore the Pivot Grid control.", 'ASPxReportsStringId.ReportDesigner_ConvertPivotGridToCrossTab_Message_Info');
        this.popupOptions.linkText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('[More infomation about Cross Tab conversion]', 'ASPxReportsStringId.ReportDesigner_ConvertPivotGridToCrossTab_Message_LinkText');
        this.popupOptions.linkUrl = this._detailLink;
    }
    _applyChanges() {
        this._warnings = [];
        const pivotGrid = this._model;
        this._undoEngine = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(pivotGrid);
        this._undoEngine && this._undoEngine.start();
        const crossTab = controlsFactory().createControl(controlsFactory().controlsMap['XRCrossTab'].defaultVal, pivotGrid.parentModel());
        pivotGrid.getInfo().forEach(item => {
            if (crossTab[item.propertyName] && external_ko_namespaceObject.isObservable(pivotGrid[item.propertyName]))
                crossTab[item.propertyName](pivotGrid[item.propertyName]());
        });
        crossTab.location.x(pivotGrid.location.x());
        crossTab.location.y(pivotGrid.location.y());
        crossTab.name('CrossTab_' + pivotGrid.name());
        this._convertOptions(pivotGrid, crossTab);
        const convertedFields = this._convertFields(pivotGrid, crossTab);
        this._convertStyles(pivotGrid, crossTab, convertedFields);
        this._applyVisibility(pivotGrid, crossTab);
        this._applyText(pivotGrid, crossTab);
        this._validateChartLinked(pivotGrid);
        if (external_ko_namespaceObject.isObservable(crossTab.size.width))
            crossTab.size.width.valueHasMutated();
        this._saveOriginalLayout(pivotGrid, crossTab);
    }
    _convertStyles(pivotGrid, crossTab, convertedFields) {
        const root = crossTab.root;
        const resultStyleGroups = [];
        crossTab.cells().forEach(cell => {
            const deafultStyle = root.findStyle(cell.styleName());
            let cellStyle = StylesHelper.generateStyle(deafultStyle, crossTab);
            this._applyStyles(pivotGrid, cell, cellStyle);
            pivotGrid.fields().forEach(field => cell.field() == convertedFields[field.name()] && this._applyStyles(field, cell, cellStyle));
            cellStyle = StylesHelper.styleEqualityComparer(deafultStyle, cellStyle) ? deafultStyle : cellStyle;
            let styleAdded = false;
            for (const group of resultStyleGroups) {
                if (group.style == cellStyle) {
                    group.cells.push(cell);
                    styleAdded = true;
                    break;
                }
            }
            !styleAdded && resultStyleGroups.push({ style: cellStyle, cells: [cell] });
        });
        crossTab.onDelete();
        if (resultStyleGroups.length === 1) {
            this._prepareGeneralStyle(resultStyleGroups, crossTab, root);
            return;
        }
        if (resultStyleGroups.length === 3)
            if (this._prepareStandardStyles(resultStyleGroups, crossTab, root))
                return;
        this._prepareNoStyles(resultStyleGroups, crossTab);
    }
    _prepareNoStyles(resultStyleGroups, crossTab) {
        resultStyleGroups.forEach(group => group.cells.forEach(x => stylesProperties.forEach(element => {
            const value = group.style[element] && group.style.isPropertyModified(element) && group.style[element]();
            if (value) {
                x[element](group.style[element]());
            }
        })));
        crossTab['generalStyleName']('');
        crossTab['headerAreaStyleName']('');
        crossTab['dataAreaStyleName']('');
        crossTab['totalAreaStyleName']('');
    }
    _prepareGeneralStyle(resultStyleGroups, crossTab, root) {
        const generalStyle = resultStyleGroups[0].style;
        generalStyle.name(crossTab['generalStyleName']());
        root.styles.push(generalStyle);
        crossTab['headerAreaStyleName']('');
        crossTab['dataAreaStyleName']('');
        crossTab['totalAreaStyleName']('');
    }
    _prepareStandardStyles(resultStyleGroups, crossTab, root) {
        const headerStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(resultStyleGroups, (item) => item.cells.every(x => XRCrossTabCellViewModel.cellKinds.Header.indexOf(x.kind()) !== -1)).style;
        headerStyle.name(crossTab['headerAreaStyleName']());
        if (!headerStyle)
            return false;
        const dataStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(resultStyleGroups, (item) => item.cells.every(x => XRCrossTabCellViewModel.cellKinds.Data.indexOf(x.kind()) !== -1)).style;
        dataStyle.name(crossTab['dataAreaStyleName']());
        if (!dataStyle)
            return false;
        const totalStyle = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(resultStyleGroups, (item) => item.cells.every(x => XRCrossTabCellViewModel.cellKinds.Total.indexOf(x.kind()) !== -1)).style;
        if (!totalStyle)
            return false;
        totalStyle.name(crossTab['totalAreaStyleName']());
        crossTab['generalStyleName']('');
        root.styles.push(headerStyle, dataStyle, totalStyle);
        return true;
    }
    _applyStyles(source, cell, cellStyle) {
        XRCrossTabCellViewModel.cellKinds.Header.indexOf(cell.kind()) == -1 && this._applyStyle(source.appearances.cellAppearance, cell);
        if (cell.kind() == CellKind.Corner || cell.kind() == CellKind.DataHeader) {
            this._applyStyle(source.appearances.fieldHeaderAppearance, cellStyle);
        }
        if (cell.kind() === CellKind.Data) {
            this._applyStyle(source.appearances.cellAppearance, cellStyle);
        }
        else if (cell.isBindable()) {
            this._applyStyle(source.appearances.fieldValueAppearance, cellStyle);
        }
        if (cell.kind() == CellKind.RowTotalHeader || cell.kind() == CellKind.ColumnTotalHeader) {
            this._applyStyle(source.appearances.fieldValueTotalAppearance, cellStyle);
            if (cell.rowLevel === undefined && cell.columnLevel == undefined) {
                this._applyStyle(source.appearances.fieldValueGrandTotalAppearance, cellStyle);
            }
        }
        if (cell.kind() == CellKind.GrandTotal && (cell.rowLevel === undefined || cell.columnLevel == undefined) ||
            cell.kind() == CellKind.RowTotal && cell.rowLevel == undefined || cell.kind() == CellKind.ColumnTotal && cell.columnLevel == undefined) {
            this._applyStyle(source.appearances.grandTotalCellAppearance, cellStyle);
        }
        else if (cell.kind() == CellKind.RowTotal || cell.kind() == CellKind.ColumnTotal) {
            this._applyStyle(source.appearances.totalCellAppearance, cellStyle);
        }
    }
    _applyStyle(style, target) {
        appearanceInfo.forEach(element => {
            const propertyName = element.propertyName;
            if (propertyName == 'textOptions') {
                let result = '';
                const vertical = style.textOptions.textVerticalAlignment();
                if (vertical == 'Center')
                    result += 'Middle';
                else if (vertical != 'Default')
                    result += vertical;
                const horizontal = style.textOptions.textHorizontalAlignment();
                if (horizontal == 'Near')
                    result += 'Left';
                if (horizontal == 'Far')
                    result += 'Right';
                if (horizontal == 'Center')
                    result = 'Center';
                result && target['textAlignment'](result);
            }
            else {
                const value = style[propertyName] && style[propertyName]() && style[propertyName]();
                if (value) {
                    target[propertyName](value);
                }
            }
        });
    }
    _convertOptions(pivotGrid, crossTab) {
        crossTab.layoutOptions.columnTotalsPosition(pivotGrid['optionsView'].columnTotalsLocation() === 'Far' ?
            TotalsPosition[TotalsPosition.AfterData] : TotalsPosition[TotalsPosition.BeforeData]);
        crossTab.layoutOptions.rowTotalsPosition(pivotGrid['optionsView'].rowTotalsLocation() === 'Far' ?
            TotalsPosition[TotalsPosition.AfterData] : TotalsPosition[TotalsPosition.BeforeData]);
        crossTab['printOptions'].printTotalsForSingleValues(pivotGrid['optionsView'].showTotalsForSingleValues());
        crossTab['printOptions'].repeatColumnHeaders(pivotGrid['optionsPrint'].printColumnAreaOnEveryPage());
        crossTab['printOptions'].repeatRowHeaders(pivotGrid['optionsPrint'].printRowAreaOnEveryPage());
        crossTab.layoutOptions.dataFieldLayout(pivotGrid['optionsDataField'].area() === 'RowArea'
            ? DataFieldLayout[DataFieldLayout.InColumn] : DataFieldLayout[DataFieldLayout.InRow]);
    }
    _convertFields(pivotGrid, crossTab) {
        const convertedFields = {};
        const addField = (type, pivotField) => {
            const field = crossTab.getInfo().filter(info => info.propertyName === type)[0].addHandler();
            this._copyPropertiesToField(field, pivotField);
            crossTab[type].push(field);
            const dependentCell = crossTab.cells().filter(cell => cell.field() == field)[0];
            dependentCell.size.width(pivotField['width']());
            convertedFields[pivotField.name()] = field;
        };
        pivotGrid.fields().forEach(x => {
            if (x['unboundExpression']()) {
                this._warnings.push((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Cannot convert Field {0} - unbound expression is not supported', x.name()));
            }
            else {
                if (x.area() == 'ColumnArea')
                    addField('columnFields', x);
                else if (x.area() == 'RowArea')
                    addField('rowFields', x);
                else if (x.area() == 'DataArea')
                    addField('dataFields', x);
                else
                    this._warnings.push((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Cannot convert Field {0} - area is not supported', x.name()));
            }
        });
        return convertedFields;
    }
    _copyPropertiesToField(crossTabField, pivotField) {
        crossTabField.fieldName(pivotField.fieldName());
        if (crossTabField instanceof CrossTabDataFieldModel) {
            if (pivotField.summaryType() != 'Custom') {
                crossTabField['summaryType'](pivotField.summaryType());
                crossTabField['summaryDisplayType'](pivotField.summaryDisplayType());
            }
            else
                this._warnings.push((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Pivot Field {0} with a Custom Summary Type is not supported.', pivotField.fieldName()));
        }
        else {
            if (pivotField.groupInterval() != 'Custom') {
                crossTabField.crossTabGroupInterval(pivotField.groupInterval());
                crossTabField.crossTabGroupIntervalNumericRange(pivotField.groupIntervalNumericRange());
            }
            else {
                this._warnings.push((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Pivot Field {0} with a Custom Group Interval is not supported.', pivotField.fieldName()));
            }
            crossTabField.sortOrder(pivotField.sortOrder() === 'Ascending' ? 'Ascending' : 'Descending');
            if (pivotField.sortBySummaryInfo.summaryType() != 'Custom') {
                crossTabField.crossTabSortBySummaryInfo.fieldName(pivotField.sortBySummaryInfo.fieldName());
                crossTabField.crossTabSortBySummaryInfo.summaryType(pivotField.sortBySummaryInfo.summaryType());
            }
            else {
                this._warnings.push((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Pivot Field {0} with a Custom Summary Type is not supported.', pivotField.fieldName()));
            }
        }
    }
    _saveOriginalLayout(pivotGrid, crossTab) {
        const originalDataSource = pivotGrid.dataSource();
        const originalDataMember = pivotGrid.dataMember();
        pivotGrid.dataSource(null);
        pivotGrid.dataMember(null);
        const layout = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(pivotGrid);
        ControlConverterService.getXmlStringFromJson(layout, result => {
            const parentControls = pivotGrid.parentModel()['controls'];
            crossTab.originalPivotGridLayout(result);
            parentControls.splice(parentControls.indexOf(pivotGrid), 1, crossTab);
            this._selectionProvider.focused(crossTab.surface);
            this.popupOptions.visible(false);
            this._warnings.forEach(x => console.warn(x));
            pivotGrid.dataSource(originalDataSource);
            pivotGrid.dataMember(originalDataMember);
            this._undoEngine && this._undoEngine.end();
        }, error => {
            this._undoEngine && this._undoEngine.end();
            this._undoEngine && this._undoEngine.undo();
        });
    }
    _applyVisibility(pivotGrid, crossTab) {
        crossTab.cells().forEach(cell => {
            if ((!pivotGrid['optionsView'].showColumnTotals() && cell.kind() == CellKind.ColumnTotalHeader && cell.columnLevel !== undefined)
                || (!pivotGrid['optionsView'].showColumnGrandTotals() && cell.kind() == CellKind.ColumnTotalHeader && cell.columnLevel === undefined)) {
                cell.columnVisible(false);
            }
            if ((!pivotGrid['optionsView'].showRowTotals() && cell.rowLevel !== undefined && cell.kind() == CellKind.RowTotalHeader)
                || (!pivotGrid['optionsView'].showRowGrandTotals() && cell.rowLevel === undefined && cell.kind() == CellKind.RowTotalHeader)) {
                cell.rowVisible(false);
            }
        });
    }
    _applyText(pivotGrid, crossTab) {
        crossTab.cells().forEach(cell => {
            const cellKind = cell.kind();
            let formatInfo;
            const pivotGridFieldItem = this._findRelatedPivotGridItem(pivotGrid, cell.dataLevel, cell.columnLevel, cell.rowLevel);
            if (cellKind == CellKind.ColumnHeader || cellKind == CellKind.RowHeader) {
                formatInfo = pivotGridFieldItem.valueFormat;
            }
            else if ((cellKind === CellKind.ColumnTotalHeader && cell.columnLevel !== undefined)
                || (cellKind === CellKind.RowTotalHeader && cell.rowLevel !== undefined)) {
                formatInfo = !!pivotGridFieldItem.totalValueFormat.formatString() ? pivotGridFieldItem.totalValueFormat : {
                    formatType: external_ko_namespaceObject.observable('Numeric'),
                    formatString: external_ko_namespaceObject.observable('{0} Total')
                };
            }
            else {
                if (pivotGridFieldItem) {
                    const isTotal = cellKind === CellKind.RowTotal || cellKind === CellKind.ColumnTotal;
                    const isGrandTotal = cellKind === CellKind.GrandTotal;
                    let cellFormat = !pivotGridFieldItem.cellFormat.formatString() ? null : pivotGridFieldItem.cellFormat;
                    const totalCellFormat = !pivotGridFieldItem.totalCellFormat.formatString() ? cellFormat : pivotGridFieldItem.totalCellFormat;
                    if (isGrandTotal)
                        cellFormat = !pivotGridFieldItem.grandTotalCellFormat.formatString() ? totalCellFormat : pivotGridFieldItem.grandTotalCellFormat;
                    if (isTotal)
                        cellFormat = totalCellFormat || cellFormat;
                    if (cellFormat == null || !cellFormat.formatString()) {
                        if (pivotGridFieldItem.summaryDisplayType().indexOf('Percent') === 0) {
                            cellFormat = {
                                formatType: external_ko_namespaceObject.observable('Numeric'),
                                formatString: external_ko_namespaceObject.observable('{0:p}')
                            };
                        }
                        else {
                            if (pivotGridFieldItem.summaryDisplayType().indexOf('Index') === 0)
                                cellFormat = {
                                    formatType: external_ko_namespaceObject.observable('Numeric'),
                                    formatString: external_ko_namespaceObject.observable('{0:f2}')
                                };
                            else if (pivotGridFieldItem.summaryType() !== 'Count' && pivotGridFieldItem.summaryType() !== 'CountDistinct' && pivotGridFieldItem.summaryDisplayType().indexOf('RankIn') === -1) {
                                const fieldType = pivotGridFieldItem.getFieldType();
                                if (['Float', 'Double', 'Decimal'].some(x => x === fieldType) && ((pivotGridFieldItem.groupInterval() !== 'Default' || !!pivotGridFieldItem.unboundExpression()) || pivotGridFieldItem.unboundType() === 'Decimal'))
                                    cellFormat = {
                                        formatType: external_ko_namespaceObject.observable('Numeric'),
                                        formatString: external_ko_namespaceObject.observable('{0:c}')
                                    };
                            }
                        }
                    }
                    formatInfo = cellFormat;
                }
            }
            if (formatInfo && formatInfo.formatType() !== 'None' && formatInfo.formatString()) {
                cell.textFormatString(formatInfo.formatString());
            }
            if (cellKind == CellKind.Corner || cellKind == CellKind.DataHeader) {
                if (pivotGridFieldItem.caption && pivotGridFieldItem.caption())
                    cell.text(pivotGridFieldItem.caption());
            }
        });
    }
    _findRelatedPivotGridItem(pivotGrid, dataLevel, columnLevel, rowLevel) {
        if (dataLevel > -1) {
            return pivotGrid.fields().filter(x => x.area() === 'DataArea')[dataLevel];
        }
        else if (columnLevel > -1) {
            return pivotGrid.fields().filter(x => x.area() === 'ColumnArea')[columnLevel];
        }
        else if (rowLevel > -1) {
            return pivotGrid.fields().filter(x => x.area() === 'RowArea')[rowLevel];
        }
    }
    _validateChartLinked(pivotGrid) {
        const controlsHelper = this._context() && this._context().controlsHelper;
        controlsHelper && controlsHelper.allControls().forEach(control => {
            if (control instanceof XRChartViewModel) {
                if (control.dataSource() == pivotGrid) {
                    this._warnings.push((0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('Chart {0} uses PivotGrid as a DataSource, but the CrossTab can not be linked with Chart.', control.name()));
                }
            }
        });
    }
}
class PivotGridConverter extends BaseConverter {
    constructor(_selectionProvider) {
        super();
        this._selectionProvider = _selectionProvider;
        this.popupOptions.confirmMessage = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('All changes made to the Cross Tab will be lost. ' +
            'Do you want to continue?', 'ReportStringId.UD_Msg_RevertCrossTabToPivotGrid');
        this.popupOptions.height = 240;
    }
    _applyChanges() {
        const model = this._model;
        if (!model.originalPivotGridLayout())
            return;
        ControlConverterService.getControlModelFromXmlString(model.originalPivotGridLayout(), result => {
            const parentControls = model.parentModel()['controls'];
            const pivotGrid = new XRPivotGridViewModel(result, model.parentModel());
            pivotGrid.location.x(model.location.x());
            pivotGrid.location.y(model.location.y());
            pivotGrid.dataSource(model.dataSource());
            pivotGrid.dataMember(model['dataMember']());
            parentControls.splice(parentControls.indexOf(model), 1, pivotGrid);
            model.onDelete();
            this._selectionProvider.focused(pivotGrid.surface);
            this.popupOptions.visible(false);
        }, error => { });
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_defaultCrossTabControl.js
var DefaultCrossTabControlEnum;
(function (DefaultCrossTabControlEnum) {
    DefaultCrossTabControlEnum["XRCrossTab"] = "XRCrossTab";
    DefaultCrossTabControlEnum["XRPivotGrid"] = "XRPivotGrid";
})(DefaultCrossTabControlEnum || (DefaultCrossTabControlEnum = {}));

;// ./node_modules/devexpress-reporting/designer/actions/crossTabActions.js







class CrossTabActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    get _converter() {
        return this._converters.filter(x => x instanceof PivotGridConverter)[0];
    }
    constructor(_converters, isDisabled = () => false) {
        super();
        this._converters = _converters;
        super.initActions(DefaultCrossTabControl() == DefaultCrossTabControlEnum.XRCrossTab ? [
            {
                text: 'Revert to Original Pivot Grid',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cross Tab', 'ReportStringId.RibbonXRDesign_PageGroup_CrossTab'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Revert to Original Pivot Grid', 'ReportStringId.Verb_RevertCrossTabToPivotGrid'),
                imageClassName: 'dxrd-image-actions-convertation',
                imageTemplateName: 'dxrd-svg-actions-convertation',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: (model) => {
                    const converter = this._converter;
                    converter && converter.convert(model);
                }
            }
        ] : []);
    }
    condition(context) {
        return context instanceof XRCrossTabViewModel && !!context.originalPivotGridLayout();
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/_alignmentHandler.js





class AlignmentHandler {
    constructor(selectionProvider, surfaceContext) {
        this._selectionProvider = selectionProvider;
        this._surfaceContext = surfaceContext;
    }
    _getFocusedItem() { return this._selectionProvider.focused(); }
    _getFocusedParent() { return this._selectionProvider.focused().parent; }
    _getPositionFromBand(surface) {
        const rect = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, surface.rect());
        let parent = surface.parent;
        if (!(surface instanceof BandSurface)) {
            while (!(parent instanceof BandSurface)) {
                rect.left += parent.rect().left;
                rect.top += parent.rect().top;
                parent = parent.parent;
            }
            rect.bottom = rect.top + rect.height;
            rect.right = rect.left + rect.width;
        }
        else {
            parent = surface;
        }
        rect.band = parent;
        return rect;
    }
    _visitAllSelectedItemsInSameContainerWithFocused(iterator) {
        const focused = this._selectionProvider.focused();
        const rect = this._getPositionFromBand(focused);
        this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }).filter((item) => {
            return item !== focused;
        }).forEach((item) => {
            iterator(item, rect);
        });
    }
    _centerByBand(isHoriz, margins, rtl = false) {
        const items = this._selectionProvider.selectedItems.filter(x => !x.locked);
        if (!items.length)
            return;
        const axisProperty = isHoriz ? 'left' : 'top', lengthProperty = isHoriz ? 'width' : 'height', focusedParent = items[0].parent, bandOffset = focusedParent instanceof BandSurface ? margins.right() : 0, parentLengthProperty = focusedParent.rect()[lengthProperty] - bandOffset;
        let minAxis = items[0].rect()[axisProperty], maxSide = items[0].rect()[axisProperty] + items[0].rect()[lengthProperty];
        items.forEach((item) => {
            const axis = item.rect()[axisProperty];
            const side = item.rect()[axisProperty] + item.rect()[lengthProperty];
            if (axis < minAxis) {
                minAxis = axis;
            }
            if (side > maxSide) {
                maxSide = side;
            }
        });
        const newOffset = (parentLengthProperty - (maxSide - minAxis)) / 2 - minAxis + (rtl ? bandOffset : 0);
        items.forEach((item) => {
            const newVal = {};
            newVal[axisProperty] = item.rect()[axisProperty] + newOffset;
            newVal[lengthProperty] = item.rect()[lengthProperty];
            item.rect(newVal);
        });
    }
    _roundingValue(value, snapGridSize) {
        return Math.round(value / snapGridSize) * snapGridSize;
    }
    alignLeft() {
        this._visitAllSelectedItemsInSameContainerWithFocused((item, rect) => {
            if (item instanceof XRTableRowSurface) {
                item = item.parent;
            }
            const parentRect = this._getPositionFromBand(item.parent);
            const left = rect.left - parentRect.left;
            item.rect({ left: left });
        });
    }
    alignTop() {
        this._visitAllSelectedItemsInSameContainerWithFocused((item, rect) => {
            if (item instanceof XRTableCellSurface) {
                item = item.parent;
            }
            const parentRect = this._getPositionFromBand(item.parent);
            if (parentRect['band'] === rect['band']) {
                const top = rect.top - parentRect.top;
                item.rect({ top: top });
            }
        });
    }
    alignRight() {
        this._visitAllSelectedItemsInSameContainerWithFocused((item, rect) => {
            if (item instanceof XRTableRowSurface) {
                item = item.parent;
            }
            const parentRect = this._getPositionFromBand(item.parent);
            const right = rect.left - parentRect.left + rect.width;
            const left = right - item.rect().width;
            item.rect({ right: right, left: left });
        });
    }
    alignBottom() {
        this._visitAllSelectedItemsInSameContainerWithFocused((item, rect) => {
            if (item instanceof XRTableCellSurface) {
                item = item.parent;
            }
            const parentRect = this._getPositionFromBand(item.parent);
            if (parentRect['band'] === rect['band']) {
                const bottom = rect.top - parentRect.top + rect.height;
                const top = bottom - item.rect().height;
                item.rect({ bottom: bottom, top: top });
            }
        });
    }
    alignVerticalCenters() {
        const focused = this._getFocusedItem();
        const verticalCenter = focused.rect().left + focused.rect().width / 2;
        this._visitAllSelectedItemsInSameContainerWithFocused((item) => {
            if (item instanceof XRTableCellSurface) {
                item = item.parent.parent;
            }
            else if (item instanceof XRTableRowSurface) {
                item = item.parent;
            }
            item.rect({ left: verticalCenter - item.rect().width / 2 });
        });
    }
    alignHorizontalCenters() {
        const focused = this._getFocusedItem();
        const horizontalCenter = focused.rect().top + focused.rect().height / 2;
        this._visitAllSelectedItemsInSameContainerWithFocused((item) => {
            if (item instanceof XRTableCellSurface) {
                item = item.parent.parent;
            }
            else if (item instanceof XRTableRowSurface) {
                item = item.parent;
            }
            if (focused.parent === item.parent) {
                item.rect({ top: horizontalCenter - item.rect().height / 2 });
            }
        });
    }
    sizeToControlWidth() {
        const newWidth = this._getFocusedItem().rect().width;
        this._visitAllSelectedItemsInSameContainerWithFocused((item) => {
            if (item instanceof XRTableRowSurface) {
                item = item.parent;
            }
            item.rect({ width: newWidth });
        });
    }
    sizeToControlHeight() {
        const newHeight = this._getFocusedItem().rect().height;
        this._visitAllSelectedItemsInSameContainerWithFocused((item) => {
            if (item instanceof XRTableCellSurface) {
                item = item.parent;
            }
            item.rect({ height: newHeight });
        });
    }
    sizeToControl() {
        const newWidth = this._getFocusedItem().rect().width, newHeight = this._getFocusedItem().rect().height;
        this._visitAllSelectedItemsInSameContainerWithFocused((item) => {
            if (item instanceof XRTableCellSurface) {
                item.rect({ width: newWidth });
                item.parent.rect({ height: newHeight });
            }
            else if (item instanceof XRTableRowSurface) {
                item.rect({ height: newHeight });
                item.parent.rect({ width: newWidth });
            }
            else {
                item.rect({ width: newWidth, height: newHeight });
            }
        });
    }
    centerHorizontally() {
        this._centerByBand(true, this._surfaceContext().margins, this._surfaceContext().rtl());
    }
    centerVertically() {
        this._centerByBand(false, new external_DevExpress_Analytics_Elements_namespaceObject.Margins(0, 0, 0, 0));
    }
    alignToGrid() {
        const snapGridSize = this._surfaceContext().snapGridSize();
        this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }).forEach((item) => {
            if (item instanceof XRTableCellSurface) {
                item.rect({
                    left: this._roundingValue(item.rect().left, snapGridSize)
                });
                item.parent.rect({
                    top: this._roundingValue(item.rect().top, snapGridSize)
                });
            }
            else if (item instanceof XRTableRowSurface) {
                item.rect({
                    top: this._roundingValue(item.rect().top, snapGridSize)
                });
                item.parent.rect({
                    left: this._roundingValue(item.rect().left, snapGridSize)
                });
            }
            else {
                item.rect({
                    left: this._roundingValue(item.rect().left, snapGridSize),
                    top: this._roundingValue(item.rect().top, snapGridSize)
                });
            }
        });
    }
    sizeToGrid() {
        const snapGridSize = this._surfaceContext().snapGridSize();
        this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }).forEach((item) => {
            if (item instanceof XRTableCellSurface) {
                item.rect({
                    left: this._roundingValue(item.rect().left, snapGridSize),
                    width: this._roundingValue(item.rect().width, snapGridSize)
                });
                item.parent.rect({
                    top: this._roundingValue(item.rect().top, snapGridSize),
                    height: this._roundingValue(item.rect().height, snapGridSize)
                });
            }
            else if (item instanceof XRTableRowSurface) {
                item.rect({
                    top: this._roundingValue(item.rect().top, snapGridSize),
                    height: this._roundingValue(item.rect().height, snapGridSize)
                });
                item.parent.rect({
                    left: this._roundingValue(item.rect().left, snapGridSize),
                    width: this._roundingValue(item.rect().width, snapGridSize)
                });
            }
            else {
                item.rect({
                    left: this._roundingValue(item.rect().left, snapGridSize),
                    top: this._roundingValue(item.rect().top, snapGridSize),
                    width: this._roundingValue(item.rect().width, snapGridSize),
                    height: this._roundingValue(item.rect().height, snapGridSize)
                });
            }
        });
    }
    sendToBack() {
        this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }).forEach((item) => {
            if (!item.focused()) {
                item.getControlModel()['sendToBack']();
            }
        });
        this._getFocusedItem().getControlModel()['sendToBack']();
    }
    bringToFront() {
        const reverseSelectedItems = this._selectionProvider.selectedItems.filter((item) => { return !item.locked; });
        reverseSelectedItems.reverse();
        reverseSelectedItems.forEach((item) => {
            item.getControlModel()['bringToFront']();
        });
    }
    canChangeZOrder() {
        const focusedItem = this._getFocusedItem(), parent = focusedItem && focusedItem.parent;
        if (!focusedItem || !parent)
            return false;
        const childrenCollection = parent.getChildrenCollection();
        return (childrenCollection && childrenCollection.peek().length) > 1;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/_spaceCommandHandler.js
class SpaceCommandHandler {
    constructor(selectionProvider, surfaceContext) {
        this._selectionProvider = selectionProvider;
        this._surfaceContext = surfaceContext;
    }
    _comparer(propertyName) {
        return (a, b) => {
            return a.rect()[propertyName] - b.rect()[propertyName];
        };
    }
    _spaceIncrease(sign, isHoriz) {
        const sortedSelectedItems = this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }), axisProperty = isHoriz ? 'left' : 'top', lengthProperty = isHoriz ? 'width' : 'height', margin = isHoriz ? this._surfaceContext().margins.left() : 0, snapGridSize = this._surfaceContext().snapGridSize(), focusedParent = this._selectionProvider.focused().getControlModel().parentModel(), focusedItem = this._selectionProvider.focused();
        sortedSelectedItems.sort(this._comparer(axisProperty));
        const focusedItemIndex = sortedSelectedItems.indexOf(this._selectionProvider.focused());
        this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }).filter((item) => { return item !== focusedItem && item.getControlModel().parentModel() === focusedParent; }).forEach((item) => {
            const itemIndex = sortedSelectedItems.indexOf(item), spaceOffset = Math.abs(itemIndex - focusedItemIndex) * snapGridSize * sign, itemAxisProperty = item.rect()[axisProperty], itemLengthProperty = item.rect()[lengthProperty], parentLengthProperty = item.parent.rect()[lengthProperty] - margin;
            let newValue;
            if (itemIndex < focusedItemIndex) {
                newValue = itemAxisProperty - spaceOffset;
                if (newValue < 0) {
                    newValue = 0;
                }
            }
            else {
                newValue = itemAxisProperty + spaceOffset;
                if ((newValue + itemLengthProperty) > parentLengthProperty) {
                    newValue = parentLengthProperty - itemLengthProperty;
                }
            }
            const val = {};
            val[axisProperty] = newValue;
            item.rect(val);
        });
    }
    _spaceMakeEqual(isHoriz) {
        this._concatenateWithSpace(isHoriz, (sortedSelectedItems, axisProperty, lengthProperty) => {
            let averageSpace = 0;
            for (let i = 0; i < sortedSelectedItems.length - 1; i++) {
                const currentValue = sortedSelectedItems[i + 1].rect()[axisProperty] - (sortedSelectedItems[i].rect()[axisProperty] + sortedSelectedItems[i].rect()[lengthProperty]);
                averageSpace = (averageSpace * i + currentValue) / (i + 1);
            }
            return averageSpace;
        });
    }
    _concatenateWithSpace(isHoriz, getSpaceSize) {
        const sortedSelectedItems = this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }), axisProperty = isHoriz ? 'left' : 'top', lengthProperty = isHoriz ? 'width' : 'height', focusedParent = this._selectionProvider.focused().getControlModel().parentModel();
        sortedSelectedItems.sort(this._comparer(axisProperty));
        const spaceSize = getSpaceSize(sortedSelectedItems, axisProperty, lengthProperty);
        this._selectionProvider.selectedItems.filter((item) => { return !item.locked; }).filter((item) => { return focusedParent === item.getControlModel().parentModel(); }).forEach((item) => {
            const itemIndex = sortedSelectedItems.indexOf(item);
            if (itemIndex > 0) {
                const prevControl = sortedSelectedItems[itemIndex - 1], val = {};
                val[axisProperty] = prevControl.rect()[axisProperty] + prevControl.rect()[lengthProperty] + spaceSize;
                item.rect(val);
            }
        });
    }
    horizSpaceConcatenate() {
        this._concatenateWithSpace(true, () => { return 0; });
    }
    vertSpaceConcatenate() {
        this._concatenateWithSpace(false, () => { return 0; });
    }
    horizSpaceMakeEqual() {
        this._spaceMakeEqual(true);
    }
    vertSpaceMakeEqual() {
        this._spaceMakeEqual(false);
    }
    horizSpaceDecrease() {
        this._spaceIncrease(-1, true);
    }
    horizSpaceIncrease() {
        this._spaceIncrease(1, true);
    }
    vertSpaceDecrease() {
        this._spaceIncrease(-1, false);
    }
    vertSpaceIncrease() {
        this._spaceIncrease(1, false);
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/elementsGroupActions.js





class ElementsGroupActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    constructor(surfaceContext, selectionProvider) {
        super();
        this._selectionProvider = selectionProvider;
        const alignHandler = new AlignmentHandler(selectionProvider, surfaceContext), spaceCommandHandler = new SpaceCommandHandler(selectionProvider, surfaceContext);
        super.initActions([
            {
                text: 'Align Lefts',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Alignment', 'ReportStringId.RibbonXRDesign_PageGroup_Alignment'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Lefts', 'ReportStringId.UD_TTip_AlignLeft'),
                imageClassName: 'dxrd-image-actions-align_lefts',
                imageTemplateName: 'dxrd-svg-actions-align_lefts',
                clickAction: () => { alignHandler.alignLeft(); },
            }, {
                text: 'Align Centers',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Alignment', 'ReportStringId.RibbonXRDesign_PageGroup_Alignment'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Centers', 'ReportStringId.RibbonXRDesign_AlignVerticalCenters_STipTitle'),
                imageClassName: 'dxrd-image-actions-align_centers',
                imageTemplateName: 'dxrd-svg-actions-align_centers',
                clickAction: () => { alignHandler.alignVerticalCenters(); },
            }, {
                text: 'Align Rights',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Alignment', 'ReportStringId.RibbonXRDesign_PageGroup_Alignment'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Rights', 'ReportStringId.RibbonXRDesign_AlignRight_Caption'),
                imageClassName: 'dxrd-image-actions-align_rights',
                imageTemplateName: 'dxrd-svg-actions-align_rights',
                clickAction: () => { alignHandler.alignRight(); },
            }, {
                text: 'Align Tops',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Alignment', 'ReportStringId.RibbonXRDesign_PageGroup_Alignment'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Tops', 'ReportStringId.RibbonXRDesign_AlignTop_Caption'),
                imageClassName: 'dxrd-image-actions-align_tops',
                imageTemplateName: 'dxrd-svg-actions-align_tops',
                clickAction: () => { alignHandler.alignTop(); },
            }, {
                text: 'Align Middles',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Alignment', 'ReportStringId.RibbonXRDesign_PageGroup_Alignment'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Middles', 'ReportStringId.RibbonXRDesign_AlignHorizontalCenters_Caption'),
                imageClassName: 'dxrd-image-actions-align_middles',
                imageTemplateName: 'dxrd-svg-actions-align_middles',
                clickAction: () => { alignHandler.alignHorizontalCenters(); },
            }, {
                text: 'Align Bottoms',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Alignment', 'ReportStringId.RibbonXRDesign_PageGroup_Alignment'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Bottoms', 'ReportStringId.RibbonXRDesign_AlignBottom_Caption'),
                imageClassName: 'dxrd-image-actions-align_bottoms',
                imageTemplateName: 'dxrd-svg-actions-align_bottoms',
                clickAction: () => { alignHandler.alignBottom(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Size to Control Width',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Size to Control Width', 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControlWidth'),
                imageClassName: 'dxrd-image-actions-make_same_width',
                imageTemplateName: 'dxrd-svg-actions-make_same_width',
                clickAction: () => { alignHandler.sizeToControlWidth(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Size to Control Height',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Size to Control Height', 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControlHeight'),
                imageClassName: 'dxrd-image-actions-make_same_height',
                imageTemplateName: 'dxrd-svg-actions-make_same_height',
                clickAction: () => { alignHandler.sizeToControlHeight(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Size to Control',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Size to Control', 'ASPxReportsStringId.ReportDesigner_ElementsAction_SizeToControl'),
                imageClassName: 'dxrd-image-actions-make_same_sizes',
                imageTemplateName: 'dxrd-svg-actions-make_same_sizes',
                clickAction: () => { alignHandler.sizeToControl(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Make Horizontal Spacing Equal',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Make Horizontal Spacing Equal', 'ReportStringId.UD_TTip_HorizSpaceMakeEqual'),
                imageClassName: 'dxrd-image-actions-make_horizontal_spacing_equal',
                imageTemplateName: 'dxrd-svg-actions-make_horizontal_spacing_equal',
                clickAction: () => { spaceCommandHandler.horizSpaceMakeEqual(); },
                hasSeparator: true
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Increase Horizontal Spacing',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Increase Horizontal Spacing', 'ReportStringId.UD_TTip_HorizSpaceIncrease'),
                imageClassName: 'dxrd-image-actions-increase_horizontal_spacing',
                imageTemplateName: 'dxrd-svg-actions-increase_horizontal_spacing',
                clickAction: () => { spaceCommandHandler.horizSpaceIncrease(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Decrease Horizontal Spacing',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Decrease Horizontal Spacing', 'ReportStringId.RibbonXRDesign_HorizSpaceDecrease_Caption'),
                imageClassName: 'dxrd-image-actions-decrease_horizontal_spacing',
                imageTemplateName: 'dxrd-svg-actions-decrease_horizontal_spacing',
                clickAction: () => { spaceCommandHandler.horizSpaceDecrease(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Remove Horizontal Spacing',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove Horizontal Spacing', 'ReportStringId.RibbonXRDesign_HorizSpaceConcatenate_Caption'),
                imageClassName: 'dxrd-image-actions-remove_horizontal_spacing',
                imageTemplateName: 'dxrd-svg-actions-remove_horizontal_spacing',
                clickAction: () => { spaceCommandHandler.horizSpaceConcatenate(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Make Vertical Spacing Equal',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Make Vertical Spacing Equal', 'ReportStringId.RibbonXRDesign_VertSpaceMakeEqual_Caption'),
                imageClassName: 'dxrd-image-actions-make_vertical_spacing_equal',
                imageTemplateName: 'dxrd-svg-actions-make_vertical_spacing_equal',
                clickAction: () => { spaceCommandHandler.vertSpaceMakeEqual(); },
                hasSeparator: true
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Increase Vertical Spacing',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Increase Vertical Spacing', 'ReportStringId.RibbonXRDesign_VertSpaceIncrease_STipTitle'),
                imageClassName: 'dxrd-image-actions-increase_vertical_spacing',
                imageTemplateName: 'dxrd-svg-actions-increase_vertical_spacing',
                clickAction: () => { spaceCommandHandler.vertSpaceIncrease(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Decrease Vertical Spacing',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Decrease Vertical Spacing', 'ReportStringId.UD_TTip_VertSpaceDecrease'),
                imageClassName: 'dxrd-image-actions-decrease_vertical_spacing',
                imageTemplateName: 'dxrd-svg-actions-decrease_vertical_spacing',
                clickAction: () => { spaceCommandHandler.vertSpaceDecrease(); },
            }, {
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                text: 'Remove Vertical Spacing',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove Vertical Spacing', 'ReportStringId.UD_TTip_VertSpaceConcatenate'),
                imageClassName: 'dxrd-image-actions-remove_vertical_spacing',
                imageTemplateName: 'dxrd-svg-actions-remove_vertical_spacing',
                clickAction: () => { spaceCommandHandler.vertSpaceConcatenate(); },
            }
        ]);
        this.setDisabled = (context) => {
            const isDisabled = this._selectionProvider.selectedItems.some((item) => { return item.locked; });
            this.actions.forEach((action) => {
                action.disabled(isDisabled);
            });
        };
    }
    condition(context) {
        return this._selectionProvider.selectedItems.length > 1 && !this._selectionProvider.selectedItems.some(item => item instanceof XRCellsurface);
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/pdfContentActions.js




class PdfContentActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    get _focusedPdfContent() {
        const focusedModel = this._selection.focused().getControlModel();
        if (focusedModel instanceof XRPdfContentViewModel)
            return focusedModel;
        return null;
    }
    constructor(_selection, isDisabled = () => false) {
        super();
        this._selection = _selection;
        const actionDisabled = external_ko_namespaceObject.pureComputed(() => isDisabled() || this._focusedPdfContent && (this._focusedPdfContent.generateOwnPages() || !this._focusedPdfContent.canFit()
            || !this._focusedPdfContent.imageSource()));
        super.initActions([
            {
                text: 'Fit Size to Content',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pdf Content', 'ReportStringId.RibbonXRDesign_PageGroup_PdfContent'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Fit Size to Content', 'ReportStringId.Verb_FitControlSize'),
                imageClassName: 'dxrd-image-actions-fit_to_container',
                imageTemplateName: 'dxrd-svg-actions-fit_to_container',
                disabled: actionDisabled,
                clickAction: (model) => {
                    model.fitToContent();
                }
            }
        ]);
        this._disposables.push(actionDisabled);
    }
    condition(context) {
        return context instanceof XRPdfContentViewModel;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/pivotGridActions.js







class PivotGridActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    get _converter() {
        return this._converters.filter(x => x instanceof CrossTabConverter)[0];
    }
    constructor(_converters, isDisabled = () => false) {
        super();
        this._converters = _converters;
        super.initActions([
            {
                text: 'Insert Field in Filter Area',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pivot Grid', 'ReportStringId.RibbonXRDesign_PageGroup_PivotGrid'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Field in Filter Area', 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheFilterArea'),
                imageClassName: 'dxrd-image-actions-add_field_to_filter_area',
                imageTemplateName: 'dxrd-svg-actions-add_field_to_filter_area',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: (model) => { model['addFieldToArea']('FilterArea'); }
            },
            {
                text: 'Insert Field in Data Area',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pivot Grid', 'ReportStringId.RibbonXRDesign_PageGroup_PivotGrid'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Field in Data Area', 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheDataArea'),
                imageClassName: 'dxrd-image-actions-add_field_to_data_area',
                imageTemplateName: 'dxrd-svg-actions-add_field_to_data_area',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: (model) => { model['addFieldToArea']('DataArea'); }
            },
            {
                text: 'Insert Field in Column Area',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pivot Grid', 'ReportStringId.RibbonXRDesign_PageGroup_PivotGrid'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Field in Column Area', 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheColumnArea'),
                imageClassName: 'dxrd-image-actions-add_field_to_column_area',
                imageTemplateName: 'dxrd-svg-actions-add_field_to_column_area',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: (model) => { model['addFieldToArea']('ColumnArea'); }
            },
            {
                text: 'Insert Field in Row Area',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pivot Grid', 'ReportStringId.RibbonXRDesign_PageGroup_PivotGrid'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Field in Row Area', 'ASPxReportsStringId.ReportDesigner_PivotActions_InsertFieldInTheRowArea'),
                imageClassName: 'dxrd-image-actions-add_field_to_row_area',
                imageTemplateName: 'dxrd-svg-actions-add_field_to_row_area',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: (model) => { model['addFieldToArea']('RowArea'); }
            },
            {
                text: 'Convert to Cross Tab',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pivot Grid', 'ReportStringId.RibbonXRDesign_PageGroup_PivotGrid'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Convert to Cross Tab', 'ReportStringId.Verb_ConvertPivotGridToCrossTab'),
                imageClassName: 'dxrd-image-actions-convertation',
                imageTemplateName: 'dxrd-svg-actions-convertation',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                visible: DefaultCrossTabControl() == DefaultCrossTabControlEnum.XRCrossTab,
                clickAction: (model) => {
                    const converter = this._converter;
                    converter && converter.convert(model);
                }
            }
        ]);
    }
    condition(context) {
        return context instanceof XRPivotGridViewModel;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/reportActions.js





class ReportActions extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _canAddBand(bandType) {
        if (!this._targetModel()) {
            return false;
        }
        const report = this._targetModel().root;
        if (report && report.language && report.language() !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture)
            return false;
        if (bandType === 'GroupHeaderBand' || bandType === 'GroupFooterBand' || bandType === 'DetailReportBand') {
            return true;
        }
        if (bandType === 'SubBand') {
            const model = (this._contextModel());
            return model !== null && !model.lockedInUserDesigner() && (model.controlType.indexOf('XtraReport') === -1 && ['DetailReportBand', 'TopMarginBand', 'BottomMarginBand', 'SubBand'].indexOf(model.controlType) === -1);
        }
        if (this._targetModel().controlType === 'DetailReportBand' && (bandType === 'TopMarginBand' || bandType === 'BottomMarginBand' || bandType === 'PageHeaderBand' || bandType === 'PageFooterBand')) {
            return false;
        }
        return this._targetModel()['bands']().filter((band) => band.controlType === bandType).length === 0;
    }
    _addBand(bandType) {
        if (this._canAddBand(bandType)) {
            let model = this._targetModel();
            if (bandType === 'SubBand') {
                model = this._contextModel();
            }
            const height = model.root['dpi']();
            const control = model.createChild({ '@ControlType': bandType, '@HeightF': height });
            this.onComponentAdded({ parent: model, model: control });
        }
    }
    createComputed(contion) {
        const computed = external_ko_namespaceObject.computed(() => contion());
        this._disposables.push(computed);
        return computed;
    }
    constructor(onComponentAdded, _buildingModel) {
        super();
        this._buildingModel = _buildingModel;
        this._contextModel = external_ko_namespaceObject.observable();
        this._disposables.push(this._targetModel = external_ko_namespaceObject.computed(() => {
            let model = this._contextModel();
            if (model) {
                if (model.parentModel() && model.parentModel().parentModel() && model.controlType === 'SubBand') {
                    model = model.parentModel().parentModel();
                }
                else if (model.parentModel() && model.controlType !== 'DevExpress.XtraReports.UI.XtraReport' && model.controlType !== 'DetailReportBand') {
                    model = model.parentModel();
                }
            }
            return model;
        }));
        const reportWizardVisibile = external_ko_namespaceObject.observable(true);
        this._disposables.push(this._contextModel.subscribe(newValue => {
            reportWizardVisibile(newValue instanceof ReportViewModel);
        }));
        this.actions = [
            {
                text: 'Design in Report Wizard...',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Design in Report Wizard...', 'ReportStringId.Verb_ReportWizard'),
                clickAction: () => { _buildingModel?._wizardRunner.run('DesignInReportWizard'); },
                disabled: external_ko_namespaceObject.observable(false),
                visible: reportWizardVisibile,
                isContextMenuAction: true
            },
            {
                text: 'Top Margin',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Top Margin', 'ReportStringId.Cmd_TopMargin'),
                imageClassName: 'dxrd-image-actions-top_margin',
                imageTemplateName: 'dxrd-svg-actions-top_margin',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('TopMarginBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('TopMarginBand'); },
            }, {
                text: 'Report Header',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Header', 'ReportStringId.Cmd_ReportHeader'),
                imageClassName: 'dxrd-image-actions-report_header',
                imageTemplateName: 'dxrd-svg-actions-report_header',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('ReportHeaderBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('ReportHeaderBand'); },
            }, {
                text: 'Page Header',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Header', 'ReportStringId.Cmd_PageHeader'),
                imageClassName: 'dxrd-image-actions-page_header',
                imageTemplateName: 'dxrd-svg-actions-page_header',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('PageHeaderBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('PageHeaderBand'); },
            }, {
                text: 'Group Header',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Group Header', 'ReportStringId.Cmd_GroupHeader'),
                imageClassName: 'dxrd-image-actions-group_header',
                imageTemplateName: 'dxrd-svg-actions-group_header',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('GroupHeaderBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('GroupHeaderBand'); },
            }, {
                text: 'Detail',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Detail', 'ReportStringId.Cmd_Detail'),
                imageClassName: 'dxrd-image-actions-detail',
                imageTemplateName: 'dxrd-svg-actions-detail',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('DetailBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('DetailBand'); },
            }, {
                text: 'Detail Report',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Detail Report', 'ReportStringId.Cmd_DetailReport'),
                imageClassName: 'dxrd-image-actions-detail_report',
                imageTemplateName: 'dxrd-svg-actions-detail_report',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('DetailReportBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('DetailReportBand'); },
            }, {
                text: 'Group Footer',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Group Footer', 'ReportStringId.Cmd_GroupFooter'),
                imageClassName: 'dxrd-image-actions-group_footer',
                imageTemplateName: 'dxrd-svg-actions-group_footer',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('GroupFooterBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('GroupFooterBand'); },
            }, {
                text: 'Report Footer',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Footer', 'ReportStringId.Cmd_ReportFooter'),
                imageClassName: 'dxrd-image-actions-report_footer',
                imageTemplateName: 'dxrd-svg-actions-report_footer',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('ReportFooterBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('ReportFooterBand'); },
            }, {
                text: 'Page Footer',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Footer', 'ReportStringId.Cmd_PageFooter'),
                imageClassName: 'dxrd-image-actions-page_footer',
                imageTemplateName: 'dxrd-svg-actions-page_footer',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('PageFooterBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('PageFooterBand'); },
            }, {
                text: 'Bottom Margin',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Bottom Margin', 'ReportStringId.Cmd_BottomMargin'),
                imageClassName: 'dxrd-image-actions-bottom_margin',
                imageTemplateName: 'dxrd-svg-actions-bottom_margin',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('BottomMarginBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('BottomMarginBand'); },
            }, {
                text: 'Insert Sub-Band',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Band', 'ReportStringId.Cmd_InsertBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Sub-Band', 'ReportStringId.Cmd_AddSubBand'),
                imageClassName: 'dxrd-image-actions-subband',
                imageTemplateName: 'dxrd-svg-actions-subband',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('SubBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('SubBand'); },
            }, {
                text: 'Vertical Header',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Vertical Band', 'ReportStringId.Cmd_InsertVerticalBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Vertical Header', 'ReportStringId.Cmd_VerticalHeader'),
                imageClassName: 'dxrd-image-actions-vertical_header',
                imageTemplateName: 'dxrd-svg-actions-vertical_header',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('VerticalHeaderBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('VerticalHeaderBand'); },
            }, {
                text: 'Vertical Detail',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Vertical Band', 'ReportStringId.Cmd_InsertVerticalBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Vertical Detail', 'ReportStringId.Cmd_VerticalDetail'),
                imageClassName: 'dxrd-image-actions-vertical_detail',
                imageTemplateName: 'dxrd-svg-actions-vertical_detail',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('VerticalDetailBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('VerticalDetailBand'); },
            }, {
                text: 'Vertical Total',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Vertical Band', 'ReportStringId.Cmd_InsertVerticalBand'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Vertical Total', 'ReportStringId.Cmd_VerticalTotal'),
                imageClassName: 'dxrd-image-actions-vertical_total',
                imageTemplateName: 'dxrd-svg-actions-vertical_total',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('VerticalTotalBand');
                }),
                visible: true,
                clickAction: () => { this._addBand('VerticalTotalBand'); },
            }, {
                text: 'Insert Sub-Band',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Sub-Band', 'ReportStringId.Cmd_AddSubBand'),
                imageClassName: 'dxrd-image-actions-subband',
                imageTemplateName: 'dxrd-svg-actions-subband',
                disabled: this.createComputed(() => {
                    return !this._canAddBand('SubBand');
                }),
                visible: true,
                isContextMenuAction: true,
                clickAction: () => { this._addBand('SubBand'); },
            }
        ];
        this.onComponentAdded = (e) => { onComponentAdded && onComponentAdded(e); };
    }
    getActions(context) {
        if (context instanceof ReportViewModel || context instanceof BandViewModel) {
            this._contextModel(context);
            return this.actions;
        }
        else {
            this._contextModel(null);
        }
        return [];
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/fitToContainerAction.js








class FitToContainerAction {
    constructor(_control) {
        this._control = _control;
        this._container = external_ko_namespaceObject.pureComputed(() => this._control() && this._control().parent);
    }
    doAction() {
        this._control().rect(this._container().getUsefulRect());
    }
    allowed() {
        const container = this._container();
        if (!container || container.getChildrenCollection()().length > 1)
            return false;
        return (container instanceof XRTableCellSurface ||
            container instanceof XRControlSurface ||
            container instanceof BandSurface ||
            container instanceof VerticalBandSurface);
    }
    visible() {
        return !(this._control() instanceof XRCrossBandSurface ||
            this._control() instanceof XRPageBreakSurface ||
            this._control() instanceof XRTableOfContentsSurface);
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/elementActions.js










class ElementActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    constructor(surfaceContext, selectionProvider) {
        super();
        this._selectionProvider = selectionProvider;
        this._isMultiSelect = external_ko_namespaceObject.observable(false);
        const alignHandler = new AlignmentHandler(selectionProvider, surfaceContext);
        const fitToContainerAction = new FitToContainerAction(selectionProvider.focused);
        super.initActions([
            {
                text: 'Align to Grid',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align to Grid', 'ReportStringId.Cmd_AlignToGrid'),
                imageClassName: 'dxrd-image-actions-align_to_grid',
                imageTemplateName: 'dxrd-svg-actions-align_to_grid',
                clickAction: () => { alignHandler.alignToGrid(); },
                disabled: external_ko_namespaceObject.pureComputed(() => { return this._generalDisabled; }),
            }, {
                text: 'Size to Grid',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Size to Grid', 'ReportStringId.UD_Capt_MakeSameSizeSizeToGrid'),
                imageClassName: 'dxrd-image-actions-size_to_grid',
                imageTemplateName: 'dxrd-svg-actions-size_to_grid',
                clickAction: () => { alignHandler.sizeToGrid(); },
                disabled: external_ko_namespaceObject.pureComputed(() => { return this._generalDisabled; }),
            }, {
                text: 'Center Horizontally',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Center Horizontally', 'ReportStringId.RibbonXRDesign_CenterHorizontally_STipTitle'),
                imageClassName: 'dxrd-image-actions-center_horizontally',
                imageTemplateName: 'dxrd-svg-actions-center_horizontally',
                hasSeparator: true,
                clickAction: () => { alignHandler.centerHorizontally(); },
                disabled: external_ko_namespaceObject.pureComputed(() => {
                    return this._generalDisabled ||
                        selectionProvider.focused() instanceof XRCrossBandSurface ||
                        (() => {
                            let someParentIsNotBand = false;
                            let someParentNotFocused = false;
                            return selectionProvider.selectedItems.some(x => {
                                if (!x.parent)
                                    return true;
                                if (!someParentIsNotBand)
                                    someParentIsNotBand = !(x.parent.getControlModel() instanceof BandViewModel);
                                if (!someParentNotFocused)
                                    someParentNotFocused = x.parent !== selectionProvider.selectedItems[0].parent;
                                return someParentNotFocused && someParentIsNotBand;
                            });
                        })();
                })
            }, {
                text: 'Center Vertically',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Center Vertically', 'ReportStringId.RibbonXRDesign_CenterVertically_STipTitle'),
                imageClassName: 'dxrd-image-actions-center_vertically',
                imageTemplateName: 'dxrd-svg-actions-center_vertically',
                clickAction: () => { alignHandler.centerVertically(); },
                disabled: external_ko_namespaceObject.pureComputed(() => {
                    return this._generalDisabled ||
                        selectionProvider.focused() instanceof XRCrossBandSurface ||
                        selectionProvider.selectedItems.some(x => x.parent !== selectionProvider.selectedItems[0].parent);
                })
            }, {
                text: 'Bring to Front',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.localizeWithUpdateLocalizationMethod)('Arranging') || (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Arrangement', 'ReportStringId.RibbonXRDesign_PageGroup_Arranging'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Bring to Front', 'ReportStringId.Cmd_BringToFront'),
                imageClassName: 'dxrd-image-actions-bring_to_front',
                imageTemplateName: 'dxrd-svg-actions-bring_to_front',
                clickAction: () => { alignHandler.bringToFront(); },
                disabled: external_ko_namespaceObject.pureComputed(() => { return this._generalDisabled || !alignHandler.canChangeZOrder(); }),
            }, {
                text: 'Send to Back',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.localizeWithUpdateLocalizationMethod)('Arranging') || (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Arrangement', 'ReportStringId.RibbonXRDesign_PageGroup_Arranging'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Send to Back', 'ReportStringId.Cmd_SendToBack'),
                imageClassName: 'dxrd-image-actions-send_to_back',
                imageTemplateName: 'dxrd-svg-actions-send_to_back',
                clickAction: () => { alignHandler.sendToBack(); },
                disabled: external_ko_namespaceObject.pureComputed(() => { return this._generalDisabled || !alignHandler.canChangeZOrder(); }),
            }, {
                text: 'Fit Bounds To Container',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Fit Bounds To Container', 'ReportStringId.Cmd_FitBoundsToContainer'),
                imageClassName: 'dxrd-image-actions-fit_to_container',
                imageTemplateName: 'dxrd-svg-actions-fit_to_container',
                clickAction: () => { fitToContainerAction.doAction(); },
                hasSeparator: true,
                disabled: external_ko_namespaceObject.pureComputed(() => { return this._generalDisabled || !fitToContainerAction.allowed(); }),
                visible: external_ko_namespaceObject.pureComputed(() => {
                    return !this._isMultiSelect() && fitToContainerAction.visible();
                })
            }
        ]);
        this.setDisabled = (context) => {
            this._generalDisabled = this._selectionProvider.selectedItems.some((item) => { return item.locked; });
        };
    }
    condition(context) {
        this._isMultiSelect(context.controlType === 'multiselect');
        if (this._isMultiSelect())
            return !this._selectionProvider.selectedItems.some(item => item instanceof XRCellsurface);
        return !(context instanceof XRTableCellViewModel || context instanceof XRTableRowViewModel || context instanceof XRCrossTabCellViewModel);
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/reportElementActions.js




class ReportElementActions extends ElementActions {
    constructor(surfaceContext, selection) {
        super(surfaceContext, selection);
    }
    getActions(context) {
        if (context && !(context instanceof ReportViewModel || context instanceof BandViewModel) && (context instanceof XRReportElementViewModel || context.controlType === 'multiselect')) {
            return super.getActions(context);
        }
        return [];
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/tableRowActions.js





class TableRowActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    get _row() {
        return this.selection.focused().getControlModel();
    }
    get _table() {
        return this._row.parentModel();
    }
    isDisabled() {
        const item = this.selection.focused();
        if (item) {
            const report = item.getControlModel().root;
            return report && report.language() !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture;
        }
        return true;
    }
    constructor(selection, onComponentAdded, isDisabled = () => false) {
        super();
        this.selection = selection;
        super.initActions([
            {
                text: 'Insert Row Above',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Rows', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableRows'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Row Above', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertRowAbove'),
                imageClassName: 'dxrd-image-actions-insert_row_above',
                imageTemplateName: 'dxrd-svg-actions-insert_row_above',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertRowAbove(); },
            }, {
                text: 'Insert Row Below',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Rows', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableRows'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Insert Row Below', 'ASPxReportsStringId.ReportDesigner_TableActions_InsertRowBelow'),
                imageClassName: 'dxrd-image-actions-insert_row_below',
                imageTemplateName: 'dxrd-svg-actions-insert_row_below',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertRowBelow(); },
            }, {
                text: 'Delete Row',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Rows', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableRows'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Delete Row', 'ASPxReportsStringId.ReportDesigner_TableActions_DeleteRow'),
                imageClassName: 'dxrd-image-actions-delete_row',
                imageTemplateName: 'dxrd-svg-actions-delete_row',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteRow(); },
            }
        ]);
        this.onComponentAdded = (e) => { onComponentAdded && onComponentAdded(e); };
    }
    insertRowAbove() {
        this._table.insertRow(this._row, true, this.onComponentAdded);
    }
    insertRowBelow() {
        this._table.insertRow(this._row, false, this.onComponentAdded);
    }
    deleteRow() {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.deleteSelection)(this.selection);
    }
    condition(context) {
        return context instanceof XRTableRowViewModel;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/tableCellActions.js




class TableCellActions extends TableRowActions {
    get _cell() {
        return this.selection.focused().getControlModel();
    }
    get _row() {
        return this._cell.parentModel();
    }
    get _table() {
        return this._row.parentModel();
    }
    get _cellSurface() {
        const cell = this.selection.focused();
        return cell instanceof XRTableCellSurface && cell || null;
    }
    constructor(selection, onComponentAdded, isDisabled = () => false) {
        super(selection);
        super.initActions([
            {
                text: 'Row Above',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Insert', 'ReportStringId.Cmd_TableInsert'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Row Above', 'ReportStringId.Cmd_TableInsertRowAbove'),
                imageClassName: 'dxrd-image-actions-insert_row_above',
                imageTemplateName: 'dxrd-svg-actions-insert_row_above',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertRowAbove(); },
            }, {
                text: 'Row Below',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Insert', 'ReportStringId.Cmd_TableInsert'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Row Below', 'ReportStringId.Cmd_TableInsertRowBelow'),
                imageClassName: 'dxrd-image-actions-insert_row_below',
                imageTemplateName: 'dxrd-svg-actions-insert_row_below',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertRowBelow(); },
            },
            {
                text: 'Column To Left',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Insert', 'ReportStringId.Cmd_TableInsert'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Column To Left', 'ReportStringId.Cmd_TableInsertColumnToLeft'),
                imageClassName: 'dxrd-image-actions-insert_column_to_left',
                imageTemplateName: 'dxrd-svg-actions-insert_column_to_left',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertColumn(false); },
            }, {
                text: 'Column To Right',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Insert', 'ReportStringId.Cmd_TableInsert'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Column To Right', 'ReportStringId.Cmd_TableInsertColumnToRight'),
                imageClassName: 'dxrd-image-actions-insert_column_to_right',
                imageTemplateName: 'dxrd-svg-actions-insert_column_to_right',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertColumn(true); },
            }, {
                text: 'Cell',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Insert', 'ReportStringId.Cmd_TableInsert'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Cell', 'ReportStringId.Cmd_TableInsertCell'),
                imageClassName: 'dxrd-image-actions-insert_cell',
                imageTemplateName: 'dxrd-svg-actions-insert_cell',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.insertCell(); },
            }, {
                text: 'Row',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Delete', 'ReportStringId.Cmd_TableDelete'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Row', 'ReportStringId.Cmd_TableDeleteRow'),
                imageClassName: 'dxrd-image-actions-delete_row',
                imageTemplateName: 'dxrd-svg-actions-delete_row',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteRow(); },
            }, {
                text: 'Column',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Delete', 'ReportStringId.Cmd_TableDelete'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Column', 'ReportStringId.Cmd_TableDeleteColumn'),
                imageClassName: 'dxrd-image-actions-delete_column',
                imageTemplateName: 'dxrd-svg-actions-delete_column',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteColumn(); },
            }, {
                text: 'Cell',
                group: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Delete', 'ReportStringId.Cmd_TableDelete'),
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Cell', 'ReportStringId.Cmd_TableDeleteCell'),
                imageClassName: 'dxrd-image-actions-delete_cell',
                imageTemplateName: 'dxrd-svg-actions-delete_cell',
                disabled: external_ko_namespaceObject.pureComputed(() => isDisabled()),
                clickAction: () => { this.deleteCell(); },
            },
        ]);
        this.onComponentAdded = (e) => { onComponentAdded && onComponentAdded(e); };
    }
    insertCell() {
        this._row.insertCellCopy(this._cell, false, this.onComponentAdded);
    }
    deleteCell() {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.deleteSelection)(this.selection);
    }
    deleteRow() {
        this.selection.initialize(this._cellSurface.parent);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.deleteSelection)(this.selection);
    }
    insertColumn(isRight) {
        this._table.insertColumn(this._cell, isRight, this.onComponentAdded);
    }
    deleteColumn() {
        this._cellSurface.selectColumn(this.selection);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.deleteSelection)(this.selection);
    }
    condition(context) {
        return context instanceof XRTableCellViewModel && !!this._cellSurface;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/tableCellGroupActions.js




class TableCellGroupActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    constructor(selectionProvider) {
        super();
        this._selectionProvider = selectionProvider;
        this._distributeColumnsAction = {
            group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
            text: 'Distribute Columns Evenly',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Distribute Columns Evenly', 'ReportStringId.Cmd_TableDistributeColumnsEvenly'),
            imageClassName: 'dxrd-image-actions-distribute_columns_evenly',
            imageTemplateName: 'dxrd-svg-actions-distribute_columns_evenly',
            clickAction: () => { this._distributeColumns(); }
        };
        this._distributeRowsAction = {
            group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Cells', 'ASPxReportsStringId.ReportDesigner_PageGroup_TableCells'),
            text: 'Distribute Rows Evenly',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Distribute Rows Evenly', 'ReportStringId.Cmd_TableDistributeRowsEvenly'),
            imageClassName: 'dxrd-image-actions-distribute_rows_evenly',
            imageTemplateName: 'dxrd-svg-actions-distribute_rows_evenly',
            clickAction: () => { this._distributeRows(); }
        };
        super.initActions([
            this._distributeColumnsAction,
            this._distributeRowsAction
        ]);
        this.setDisabled = (context) => {
            const status = { rows: false, cols: false }, cells = this._selectedCells();
            if (cells.length) {
                const row0 = cells[0].parentModel(), colIndex0 = row0.cells().indexOf(cells[0]);
                for (let i = 1; i < cells.length; i++) {
                    const rowi = cells[i].parentModel();
                    if (!status.rows && rowi.name() !== row0.name())
                        status.rows = true;
                    if (!status.cols && rowi.cells().indexOf(cells[i]) != colIndex0)
                        status.cols = true;
                    if (status.rows && status.cols)
                        break;
                }
            }
            this._distributeColumnsAction.disabled(!status.cols);
            this._distributeRowsAction.disabled(!status.rows);
        };
    }
    _distributeColumns() {
        const cellsByRows = this._selectedCells()
            .reduce((acc, x) => {
            const row = x.parentModel().name();
            if (acc[row])
                acc[row].push(x);
            else
                acc[row] = [x];
            return acc;
        }, {});
        Object.keys(cellsByRows).forEach(row => {
            const cells = cellsByRows[row];
            if (cells.length >= 2) {
                const weight = cells.reduce((acc, x) => acc + x.weight(), 0) / cells.length;
                cells
                    .sort((x, y) => x.left() - y.left())
                    .forEach(x => { x.weight(weight); });
            }
        });
    }
    _distributeRows() {
        const rowModels = this._selectedCells()
            .map(x => x.parentModel())
            .reduce((acc, x) => acc.indexOf(x) >= 0 ? acc : acc.concat(x), []);
        let weight = rowModels.reduce((acc, x) => acc + x.weight(), 0) / rowModels.length;
        rowModels.forEach(x => { x.weight(weight); });
        const minHeight = Math.max(...[].concat(...rowModels.map(x => x.cells()))
            .map(x => {
            let height = this._calculateMinimalHeight(x);
            const rowSpan = x['rowSpan']();
            if (rowSpan > 1) {
                const row = x.parentModel(), table = row.parentModel(), rowIdx = table.rows.indexOf(row);
                let divisor = 1;
                for (let i = 1; i < rowSpan; i++) {
                    const nextRow = table.rows()[rowIdx + i];
                    if (!nextRow)
                        break;
                    if (rowModels.indexOf(nextRow) >= 0)
                        divisor++;
                    else
                        height -= nextRow.size.height();
                }
                height /= divisor;
            }
            return height;
        })), height = rowModels[0].height();
        if (height < minHeight) {
            const table = rowModels[0].parentModel();
            table.size.height(table.size.height() + (minHeight - height) * rowModels.length);
            weight *= minHeight / height;
            rowModels.forEach(x => { x.weight(weight); });
        }
    }
    _calculateMinimalHeight(cell) {
        return Math.max(this._calculateTextHeight(cell) + this._calculateBordersHeight(cell) + this._calculatePaddingsHeight(cell), ...cell.controls().map(control => control.location.y() + control.size.height()));
    }
    _calculateTextHeight(cell) {
        if (!(cell.text && cell.text()))
            return 0;
        const wordWrap = external_ko_namespaceObject.unwrap(cell['wordWrap']), width = wordWrap ? Math.max(1, cell.width() - this._calculatePaddingsWidth(cell)) + 'px' : 'auto', $div = external_jQuery_namespaceObject.fn.constructor('<div>')
            .css((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({
            'height': 'auto',
            'width': width,
            'overflow': 'hidden'
        }, cell.surface.cssCalculator.createFont(external_ko_namespaceObject.unwrap(cell['font'])), cell.surface.cssCalculator.createWordWrap(wordWrap, cell.multiline())))
            .html(cell.text())
            .appendTo(external_jQuery_namespaceObject.fn.constructor('body'));
        try {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(Math.ceil($div[0].getBoundingClientRect().height) + 2, cell.root.measureUnit(), 1);
        }
        finally {
            $div.remove();
        }
    }
    _calculateBordersHeight(cell) {
        const borders = cell.borders();
        let toCount;
        if (borders == 'All')
            toCount = [true, true];
        else {
            toCount = [false, false];
            if (borders.indexOf('Top') >= 0)
                toCount[0] = true;
            if (borders.indexOf('Bottom') >= 0)
                toCount[1] = true;
        }
        const row = cell.parentModel();
        const rowIndex = row.parentModel().rows().indexOf(row);
        if (rowIndex != 0)
            toCount[0] = false;
        return toCount.filter(x => x).length * external_ko_namespaceObject.unwrap(cell['borderWidth']);
    }
    _isCellTextControl(cell) { return cell.surface.getChildrenCollection()().length === 0; }
    _calculatePaddingsHeight(cell) { return this._isCellTextControl(cell) ? cell.paddingObj._get('top') + cell.paddingObj._get('bottom') : 0; }
    _calculatePaddingsWidth(cell) { return this._isCellTextControl(cell) ? cell.paddingObj._get('left') + cell.paddingObj._get('right') : 0; }
    _selectedCells() {
        const result = [];
        this._selectionProvider.selectedItems
            .map(x => x.getControlModel())
            .forEach(x => {
            switch (x.controlType) {
                case 'XRTableCell':
                    result.push(x);
                    break;
                case 'XRTableRow':
                    result.push(...x.cells());
                    break;
                case 'XRTable':
                    x.rows().forEach(row => result.push(...row.cells()));
                    break;
            }
        });
        return result;
    }
    condition(context) {
        return this._selectionProvider.selectedItems.length > 1
            && this._selectionProvider.selectedItems.every((x) => ['XRTableCell', 'XRTableRow'].indexOf(x.getControlModel().controlType) >= 0)
            || this._selectionProvider.selectedItems.length == 1
                && ['XRTable', 'XRTableRow'].indexOf(this._selectionProvider.selectedItems[0].getControlModel().controlType) >= 0;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/textElementAction.js



class TextElementAction extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    get _textControls() {
        return this._selectionProvider.selectedItems;
    }
    _inaccessibleAction() {
        if (this._textControls && this._textControls.some(item => item.getText && item.getText() === ''))
            return true;
        return !!(this._textControls && this._textControls.every(item => item.hasDataBindingByName && item.hasDataBindingByName('Text')));
    }
    constructor(_selectionProvider) {
        super();
        this._selectionProvider = _selectionProvider;
        const actionsDisabled = external_ko_namespaceObject.computed(() => { return this._inaccessibleAction(); });
        super.initActions([
            {
                text: 'Fit Bounds To Text',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Fit Bounds To Text', 'ReportStringId.Cmd_FitBoundsToText'),
                imageClassName: 'dxrd-image-actions-fit_bounds_to_text',
                imageTemplateName: 'dxrd-svg-actions-fit_bounds_to_text',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                disabled: actionsDisabled,
                visible: external_ko_namespaceObject.pureComputed(() => {
                    return this._selectionProvider.selectedItems.every(item => item.getControlModel().controlType === 'XRLabel' || item.getControlModel().controlType === 'XRCharacterComb');
                }),
                clickAction: () => { this._textControls.forEach(item => item.fitBoundsToText()); }
            }, {
                text: 'Fit Text To Bounds',
                group: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Layout', 'ReportStringId.RibbonXRDesign_PageGroup_Layout'),
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Fit Text To Bounds', 'ReportStringId.Cmd_FitTextToBounds'),
                imageClassName: 'dxrd-image-actions-fit_text_to_bounds',
                imageTemplateName: 'dxrd-svg-actions-fit_text_to_bounds',
                disabled: actionsDisabled,
                visible: external_ko_namespaceObject.pureComputed(() => {
                    return this._selectionProvider.selectedItems.every(item => item.getControlModel().controlType === 'XRLabel' || item.getControlModel().controlType === 'XRTableCell');
                }),
                clickAction: () => { this._textControls.forEach(item => item.fitTextToBounds()); }
            },
        ]);
        this._disposables.push(actionsDisabled);
    }
    condition(context) {
        return context && (context.controlType === 'XRLabel' || context.controlType === 'XRTableCell' || context.controlType === 'XRCharacterComb' || context.controlType === 'multiselect');
    }
}

;// ./node_modules/devexpress-reporting/designer/helpers/_dataSourceHelper.js






class DataSourceHelper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this._objects = null;
        this.availableDataSources.splice(0);
        this.usedDataSources([]);
        this.allDataSources([]);
    }
    constructor(objects, dataSourceRefs, availableDataSources) {
        super();
        this.usedDataSources = external_ko_namespaceObject.observableArray();
        this.allDataSources = external_ko_namespaceObject.observableArray();
        this.usedDataSources.push({ ref: 'none', name: 'none', specifics: 'none', data: null, dataSerializer: null });
        this._objects = objects;
        for (let i = 0; i < objects().length; i++) {
            const currentObject = objects()[i];
            const ref = currentObject['_model']['@Ref'];
            const dataSourceRef = dataSourceRefs.filter((ds) => { return ds.ref === ref; })[0];
            if (dataSourceRef) {
                const currentDataSourceInfo = {
                    ref: ref,
                    data: currentObject,
                    name: dataSourceRef.name,
                    isFederationDataSource: dataSourceRef.isFederationDataSource,
                    isSqlDataSource: dataSourceRef.isSqlDataSource,
                    isJsonDataSource: dataSourceRef.isJsonDataSource,
                    isObjectDataSource: dataSourceRef.isObjectDataSource,
                    isListType: dataSourceRef.isListType,
                    isSupportQueries: dataSourceRef.isSupportQueries,
                    dataSerializer: dataSourceRef.dataSerializer,
                    hasParams: dataSourceRef.hasParams,
                    hasErrors: dataSourceRef.hasErrors
                };
                currentObject['dataSourceInfo'] = currentDataSourceInfo;
                this._addUsedDataSource(currentDataSourceInfo);
            }
        }
        const self = this;
        this._disposables.push(objects.subscribe((changes) => {
            for (let index = 0; index < changes.length; index++) {
                if (!changes[index].value['dataSourceInfo'])
                    return;
                if (changes[index].status === 'added') {
                    self._addUsedDataSource(changes[index].value['dataSourceInfo']);
                }
                else if (changes[index].status === 'deleted') {
                    const dataSourceInfo = self.findDataSourceInfo(changes[index].value);
                    if (dataSourceInfo) {
                        this.usedDataSources.remove(dataSourceInfo);
                        this.allDataSources.remove(dataSourceInfo);
                    }
                }
            }
        }, null, 'arrayChange'));
        const serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        this.availableDataSources = (availableDataSources || []).map((object) => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, object, { data: createNewObjectItem(object.data, () => { return this; }, serializer) });
        });
        this.allDataSources.push.apply(this.allDataSources, this.availableDataSources);
    }
    getDataSourcePath(dataSource) {
        const dataSourceInfo = dataSource && this.findDataSourceInfo(dataSource);
        if (dataSourceInfo) {
            return dataSourceInfo.id || dataSourceInfo.ref;
        }
        else {
            return '';
        }
    }
    _findDataSourceInfo(name, collection) {
        return collection().filter((info) => { return info.name === name; })[0];
    }
    _getDataSourceInfo(name) {
        let result = this._findDataSourceInfo(name, this.usedDataSources);
        if (!result) {
            const resultSource = this._findDataSourceInfo(name, this.allDataSources);
            if (resultSource) {
                result = this._addDataSource(resultSource, resultSource.data);
            }
        }
        return result;
    }
    _getDataSourceName(dataSource) {
        const dataSourceInfo = this.findDataSourceInfo(dataSource);
        return dataSourceInfo && dataSourceInfo.name;
    }
    _addUsedDataSource(result) {
        this.usedDataSources.splice(this.usedDataSources().length - 1, 0, result);
        this.allDataSources.push(result);
    }
    _addDataSource(dataSource, data, uniqueName) {
        if (!dataSource.name) {
            throw new Error('dataSource name is undefined or null (ref=' + dataSource.ref + ', id=' + dataSource.id + ')');
        }
        const dataSourceName = uniqueName || this.getUniqueDataSourceName(dataSource.name);
        let newData = data;
        if (this._objects().indexOf(data) === -1) {
            newData = this._cloneObjectItem(data);
            newData['dataSourceInfo'] = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, dataSource, { name: dataSourceName, data: newData });
            newData['name'] = external_ko_namespaceObject.observable(dataSourceName);
            this._objects.push(newData);
        }
        return this.findDataSourceInfo(newData);
    }
    _cloneObjectItem(data) {
        const serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        let serializedObj;
        if (data instanceof DataFederationDataSource) {
            serializedObj = data.getSerializableModel().serialize();
            const newModel = new SerializableDataFederationDataSource(null, serializedObj, data.dsHelperProvider, serializer);
            const cloneSerializableSourceMap = [];
            data.serializableSourceMap().forEach(source => {
                const info = this.allDataSources().filter((item) => { return item.data === source.dataSource(); })[0];
                if (info) {
                    const existedDataSource = this.findDataSourceInfoByName(info.name);
                    const usedDataSource = existedDataSource || this._addDataSource(info, info.data, info.name);
                    cloneSerializableSourceMap.push(usedDataSource.data);
                }
            });
            const newSerializableModel = newModel.dataSource.getSerializableModel();
            newSerializableModel.dataSources(cloneSerializableSourceMap);
            cloneSerializableSourceMap.forEach((item, index) => {
                newSerializableModel.dataSource.serializableSourceMap()[index].dataSource(item);
            });
            newModel.dispose();
            return newSerializableModel.dataSource;
        }
        else {
            serializedObj = serializer.serialize(data);
            return createNewObjectItem(serializedObj, data.dsHelperProvider, serializer);
        }
    }
    getUniqueDataSourceName(name) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this.allDataSources(), (0,external_DevExpress_Analytics_Internal_namespaceObject.replaceInvalidSymbols)(name));
    }
    addDataSource(dataSourceInfo) {
        const data = (dataSourceInfo.data instanceof ObjectItem) ? dataSourceInfo.data : createNewObjectItem(dataSourceInfo.data, () => this);
        return this._addDataSource(dataSourceInfo, data).data;
    }
    removeDataSource(dataSourceInfo) {
        this._objects.remove(dataSourceInfo.data);
    }
    restoreDataSource(dataSourceInfo) {
        this._objects.push(dataSourceInfo.data);
    }
    dataSourceValue(value, undoEngine) {
        const dataSourceValue = external_ko_namespaceObject.pureComputed({
            read: () => {
                return this._getDataSourceName(value());
            },
            write: (val) => {
                const _undoEngine = undoEngine && undoEngine();
                _undoEngine && _undoEngine.start();
                const newDataSource = this._getDataSourceInfo(val);
                if (DataSourceHelper._assignValueInTimeout) {
                    setTimeout(() => {
                        value(newDataSource && newDataSource.data);
                        _undoEngine && _undoEngine.end();
                    }, 1);
                }
                else {
                    value(newDataSource && newDataSource.data);
                    _undoEngine && _undoEngine.end();
                }
            }
        });
        this._disposables.push(dataSourceValue);
        return dataSourceValue;
    }
    dataSourceDisplayExpr(dataSource) {
        return (!dataSource || !dataSource.data) ? (0,external_DevExpress_Analytics_Internal_namespaceObject.localizeNoneString)('none') : dataSource.name;
    }
    mergedDataSources() {
        const dataSources = this.usedDataSources().slice(0, -1);
        for (let i = this.availableDataSources.length - 1; i >= 0; i--) {
            if (!(0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(dataSources, (item) => item.name === this.availableDataSources[i].name)) {
                dataSources.unshift(this.availableDataSources[i]);
            }
        }
        return dataSources;
    }
    findDataSourceInfo(dataSource) {
        return this.usedDataSources().filter((info) => { return info.data === dataSource; })[0];
    }
    findDataSourceInfoByID(id) {
        return this.usedDataSources().filter((info) => { return info.id === id; })[0];
    }
    findDataSourceInfoByRef(ref) {
        return this.usedDataSources().filter((info) => { return info.ref === ref; })[0];
    }
    findDataSourceInfoByName(name) {
        return this.usedDataSources().filter((item) => { return item.name === name; })[0];
    }
}
DataSourceHelper.defaultReportExtensionKey = 'DataSerializationExtension';
DataSourceHelper._assignValueInTimeout = true;


;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_utils.js








function selectTreeListItem(item, event) {
    if (!item.isMultiSelected && !item.isSelected && item.toggleSelected)
        item.toggleSelected(item, event);
}
function getClosestDataMember(control) {
    while (control && !control['dataSource'] && !control['dataMember']) {
        control = control.parentModel();
    }
    return control['dataMember'] && control['dataMember']();
}
function getExpressionPath(container, pathRequest) {
    const fullPath = pathRequest instanceof external_DevExpress_Analytics_Utils_namespaceObject.PathRequest ? pathRequest.fullPath : pathRequest;
    if (fullPath.indexOf(Parameter.ParametersRefString + '.') === 0) {
        const pathParts = fullPath.split('.');
        return '?' + pathParts[pathParts.length - 1];
    }
    let path = pathRequest instanceof external_DevExpress_Analytics_Utils_namespaceObject.PathRequest ? pathRequest.path : pathRequest;
    const dataMember = getClosestDataMember(container);
    const prefix = dataMember && dataMember + '.';
    path = (prefix && path.indexOf(prefix) === 0) ? path.slice(prefix.length) : path;
    return '[' + path + ']';
}
function getFirstSurfaceParentByType(target, checkBandsType) {
    return checkBandsType(target) ? target : getFirstSurfaceParentByType(target.parent, checkBandsType);
}
function getUsefulReportWidth(surface) {
    const report = surface && surface.getControlModel();
    return surface ?
        external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString(((report.pageWidth() - report.margins.left() - report.margins.right()) / (surface.dpi() / 100)).toString() + ', 23') :
        external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString('200, 23');
}
function createPictureBox(container, bindingPath, dataBindingMode) {
    const newControl = container.createChild((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ControlType': 'XRPictureBox' }, controlsFactory().controlsMap['XRPictureBox'].defaultVal));
    if (dataBindingMode === _dataBindingMode_DataBindingMode.Bindings) {
        const binding = newControl.dataBindings()['findBinding']('ImageSource');
        binding.dataMember(bindingPath);
    }
    else {
        const binding = newControl['expressionObj'].getExpression('ImageSource', 'BeforePrint');
        binding.value(getExpressionPath(container, bindingPath));
    }
    return newControl;
}
const _checkBandsType = (target) => target instanceof BandSurface || target instanceof VerticalBandSurface;
function createSimpleControl(controlType, dropTargetControl) {
    return dropTargetControl.createChild((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ '@ControlType': controlType }, controlsFactory().controlsMap[controlType].defaultVal));
}
function assignBinding(control, container, bindingName, item, dataBindingMode) {
    if (dataBindingMode === _dataBindingMode_DataBindingMode.Bindings) {
        const binding = control.dataBindings()['findBinding'](bindingName);
        if (item.path.indexOf('Parameters.') === -1) {
            binding.dataMember(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).path);
        }
        else {
            binding.dataMember(item.data.name);
            binding.parameter(item.data);
        }
    }
    else {
        const binding = control['expressionObj'].getExpression(bindingName, 'BeforePrint');
        binding.value(getExpressionPath(container, new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path)));
    }
    return control;
}
function isList(data) {
    return data.isList === true || data.specifics === 'List' || data.specifics === 'ListSource';
}
function _disableCanGrowProperty(model) {
    if (model.controlType === 'XRTable') {
        model.rows().forEach(row => row.cells().forEach(cell => _disableCanGrowProperty(cell)));
    }
    if (model['canGrow'] && model['canGrow']()) {
        model['canGrow'](false);
    }
}
function dragDropComponentAdded(model, parent) {
    if (!(parent instanceof VerticalBandViewModel))
        return;
    _disableCanGrowProperty(model);
}

;// ./node_modules/devexpress-reporting/designer/internal/_dataUtils.js







function addDataSourceToReport(dataSourceHelper, report, undoEngine, itemsProvider, dataSource, forceAssigning = false) {
    undoEngine.start();
    const findFirstDataSourceWithSerializer = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(dataSourceHelper.usedDataSources.peek(), item => !!item.dataSerializer && item.dataSerializer !== dataSource.dataSerializer);
    const result = dataSourceHelper.addDataSource(dataSource);
    if (!findFirstDataSourceWithSerializer && dataSource.dataSerializer) {
        report.extensions.peek().forEach((item, index) => {
            if (item.key.peek() === DataSourceHelper.defaultReportExtensionKey) {
                report.extensions.splice(index, 1);
            }
        });
        const newDataSerializer = new ExtensionModel({});
        newDataSerializer.key = external_ko_namespaceObject.observable(DataSourceHelper.defaultReportExtensionKey);
        newDataSerializer.value = external_ko_namespaceObject.observable(dataSource.dataSerializer);
        report.extensions.push(newDataSerializer);
    }
    if (forceAssigning || !report.dataSource()) {
        report.dataSource(result);
        itemsProvider
            .getItems(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(dataSource.id || dataSource.ref))
            .done((dataMembers) => {
            const lists = dataMembers.filter(item => isList(item));
            if (dataMembers.length === 0 || includeNonListItem(dataMembers)) {
                report.dataMember('');
            }
            else if (!(0,external_DevExpress_Analytics_Internal_namespaceObject.find)(lists, item => item.name === report.dataMember())) {
                report.dataMember(lists[0].name);
            }
        });
    }
    undoEngine.end();
}
function includeNonListItem(dataMembers) {
    return dataMembers.some(field => !isList(field) || field.specifics === external_DevExpress_Analytics_Wizard_Internal_namespaceObject.defaultObjectDataSourceItemSpecifics);
}
function removeDataSourceFromReport(dataSourceHelper, reportDataSource, undoEngine, dataSource) {
    undoEngine().start();
    dataSourceHelper.removeDataSource(dataSource);
    if (reportDataSource() === dataSource.data) {
        reportDataSource(dataSourceHelper.findDataSourceInfoByRef('none').data);
    }
    undoEngine().end();
}

;// ./node_modules/devexpress-reporting/designer/services/_reportDataSourceService.js



class ReportDataSourceService {
    static fieldListCallback(request) {
        const requestJson = JSON.stringify(request);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'fieldList', requestJson);
    }
    static getCustomQueriesPreset(dataSource) {
        return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve([]).promise();
    }
    static getWizardSqlDataConnections() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getWizardSqlDataConnections', '');
    }
    static getWizardJsonDataConnections() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getWizardJsonDataConnections', '');
    }
    static sqlDataSourceFromBase64(base64) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'dataSourceFromBase64', base64);
    }
    static sqlRebuildResultSchema(base64) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'sqlRebuildResultSchema', base64);
    }
    static getSqlDataSourceBase64(dataSource) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getDataSourceBase64', JSON.stringify({ sqlDataSourceJSON: JSON.stringify({ SqlDataSource: new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(dataSource) }) }));
    }
    static federationDataSourceFromBase64(base64, dependentDataSources) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'federationDataSourceFromBase64', JSON.stringify({ base64: base64, dataSources: dependentDataSources }));
    }
    static federationRebuildResultSchema(base64, dependentDataSources) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'federationRebuildResultSchema', JSON.stringify({ base64: base64, dataSources: dependentDataSources }));
    }
    static getFederationDataSourceBase64(dataSource, dependentDataSources) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getFederationDataSourceBase64', JSON.stringify({ federationDataSourceJSON: JSON.stringify({ FederationDataSource: new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(dataSource) }), dataSources: dependentDataSources }));
    }
    static getJsonDataSourceBase64(dataSource) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getJsonDataSourceBase64', JSON.stringify({ jsonDataSourceJSON: JSON.stringify({ JsonDataSource: new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(dataSource) }) }));
    }
    static getObjectDataSourceBase64(json) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getObjectDataSourceBase64', JSON.stringify(json));
    }
    static editObjectDataSourceParameters(json, base64) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'editObjectDataSourceParameters', JSON.stringify({ objectDataSourceModel: json, base64: base64 }));
    }
    static objectDataSourceFromBase64(base64) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'objectDataSourceFromBase64', base64);
    }
    static jsonDataSourceFromBase64(base64) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'jsonDataSourceFromBase64', JSON.stringify({ base64: base64 }));
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/generator/_qBRequestWrapper.js


const QBRequestWrapper = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(new external_DevExpress_QueryBuilder_Utils_namespaceObject.RequestWrapper());

;// external "DevExpress.QueryBuilder.Widgets.Internal"
const external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject = DevExpress.QueryBuilder.Widgets.Internal;
;// ./node_modules/devexpress-reporting/designer/actions/_sqlDataSourceEditor.js











class DataSourceEditorBase {
    constructor(_dsHelper, _wizard, _reportViewModel, _undoEngine, _itemsProvider, _callbacks, _rtl) {
        this._dsHelper = _dsHelper;
        this._wizard = _wizard;
        this._reportViewModel = _reportViewModel;
        this._undoEngine = _undoEngine;
        this._itemsProvider = _itemsProvider;
        this._callbacks = _callbacks;
        this._rtl = _rtl;
    }
    _findDataSource(dataSourceID) {
        return this._dsHelper().usedDataSources().filter((item) => {
            return item.id === dataSourceID || item.ref === dataSourceID;
        })[0];
    }
    static _onFail(result, deferred) {
        if ((0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(result))
            (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(result));
        deferred.reject(result);
    }
}
class CreateQueryIterator extends external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageIterator {
    getNextPageId(pageId) {
        if (!pageId) {
            return external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.ConfigureQueryPage;
        }
        return super.getNextPageId(pageId);
    }
}
class SqlDataSourceEditor extends DataSourceEditorBase {
    constructor() {
        super(...arguments);
        this.relationsEditor = external_ko_namespaceObject.observable();
        this.addAction = {
            clickAction: (item) => {
                this.addSqlQuery(item.data.name);
            },
            imageClassName: 'dxrd-image-add-query',
            imageTemplateName: 'dxrd-svg-operations-add_query',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add query', 'AnalyticsCoreStringId.SqlDSWizard_AddQuery')
        };
        this.editAction = {
            clickAction: (item) => {
                this.editSqlQuery(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).id, item.name);
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Edit query', 'AnalyticsCoreStringId.SqlDSWizard_EditQuery')
        };
        this.removeAction = {
            clickAction: (item) => {
                this.removeSqlQuery(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).id, item.name);
            },
            position: 50,
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove query', 'AnalyticsCoreStringId.SqlDSWizard_RemoveQuery')
        };
        this.editRelationsAction = {
            clickAction: (item) => {
                this.editMasterDetailRelations(item.data.name);
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Edit Master-Detail Relations', 'ASPxReportsStringId.ReportDesigner_FieldListActions_EditMasterDetailRelations')
        };
    }
    _applyWizardChanges(dataSource, sqlDataSource, queryName, relationsEditing) {
        return this._applyDataSourceChange(sqlDataSource, dataSource, queryName, relationsEditing);
    }
    _createOrEditSqlDataSource(requestJson, dataSource, requestName) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), requestName, requestJson)
            .done((result) => {
            result.dataSource.data = JSON.parse(result.dataSource.data);
            result.dataSource.isSqlDataSource = true;
            if (dataSource) {
                dataSource.data['base64'](result.dataSource.data['@Base64']);
            }
            else {
                addDataSourceToReport(this._dsHelper(), this._reportViewModel(), this._undoEngine(), this._itemsProvider(), result.dataSource);
            }
        })
            .fail((result) => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(result))
                (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(result));
        });
    }
    _applyDataSourceChange(source, dest, queryName, relationsEditing) {
        const reportExtensions = this._reportViewModel && this._reportViewModel() && this._reportViewModel().extensions;
        return SqlDataSourceEditor.createSqlDataSourceInfo(source, queryName, relationsEditing, this._callbacks?.getParameters && this._callbacks?.getParameters(), reportExtensions)
            .done((result) => {
            if (dest) {
                dest.data['base64'](result.base64());
            }
            else {
                addDataSourceToReport(this._dsHelper(), this._reportViewModel(), this._undoEngine(), this._itemsProvider(), result);
            }
        });
    }
    editSqlQuery(dataSourceID, queryName) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data['base64']()).done((result) => {
            const sqlDataSource = new external_DevExpress_Analytics_Data_namespaceObject.SqlDataSource(JSON.parse(result.sqlDataSourceJSON), undefined, QBRequestWrapper());
            sqlDataSource.name(dataSourceInfo.name);
            this._wizard.initialize({
                dataSourceType: external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Sql,
                sqlDataSourceWizard: {
                    name: sqlDataSource.connection.name(),
                    queryName: queryName,
                    sqlDataSourceJSON: JSON.stringify(new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(sqlDataSource))
                }
            }, (factory, stateManager) => new CreateQueryIterator(factory, stateManager, this._wizard['_wizardOptions']));
            this._wizard.start();
            this._wizard.isVisible(true);
        });
    }
    addSqlQuery(dataSourceID) {
        this.editSqlQuery(dataSourceID, null);
    }
    removeSqlQuery(dataSourceID, queryName) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data['base64']()).done((result) => {
            const sqlDataSource = new external_DevExpress_Analytics_Data_namespaceObject.SqlDataSource(JSON.parse(result.sqlDataSourceJSON));
            sqlDataSource.queries.remove(x => { return x.name() === queryName; });
            this._applyWizardChanges(dataSourceInfo, sqlDataSource, queryName);
        });
    }
    editMasterDetailRelations(dataSourceID) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        ReportDataSourceService.sqlDataSourceFromBase64(dataSourceInfo.data['base64']()).done((result) => {
            const sqlDataSource = new external_DevExpress_Analytics_Data_namespaceObject.SqlDataSource(JSON.parse(result.sqlDataSourceJSON));
            if (sqlDataSource.queries().length < 2) {
                (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('At least two queries are required to create a master-detail relation.', 'DataAccessUIStringId.MessageLessThanTwoQueries'), 'warning', 10000);
                return;
            }
            this.relationsEditor(new external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject.MasterDetailEditor(sqlDataSource.relations, sqlDataSource.resultSet, () => {
                return this._applyWizardChanges(dataSourceInfo, sqlDataSource, '', true);
            }));
            this.relationsEditor().popupVisible(true);
        });
    }
    applySqlDataSourceWizardChanges(dataSourceWizardModel) {
        const dataSourceWrapped = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreSqlDataSourceFromState)(dataSourceWizardModel.sqlDataSourceWizard, QBRequestWrapper(), dataSourceWizardModel.dataSourceId);
        const dataSource = this._dsHelper().findDataSourceInfoByName(dataSourceWrapped.sqlDataSource.name());
        return this._applyDataSourceChange(dataSourceWrapped.sqlDataSource, dataSource, dataSourceWrapped.sqlQuery && dataSourceWrapped.sqlQuery.name());
    }
    static rebuildResultSchema(source, queryName, relationsEditing, parameters, dataSerializationExtension) {
        return QBRequestWrapper().rebuildResultSchema(source, queryName, relationsEditing, parameters, dataSerializationExtension)
            .done((result) => {
            const model = JSON.parse(result.resultSchemaJSON);
            source.resultSet = !!model ? new external_DevExpress_Analytics_Data_namespaceObject.ResultSet(model) : null;
            if (!!result.connectionParameters) {
                source.connection.parameteres((x => { try {
                    return JSON.parse(x)['Parameters'] || x;
                }
                catch (_) {
                    return x;
                } })(result.connectionParameters));
                source.connection.fromAppConfig(false);
            }
        });
    }
    static createSqlDataSourceInfo(source, queryName, relationsEditing, parameters, extensions) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        let dataSerializationExtension;
        if (extensions && extensions()) {
            const extensionModel = extensions().find(extension => extension.key() === DataSourceHelper.defaultReportExtensionKey);
            if (extensionModel?.value)
                dataSerializationExtension = extensionModel.value();
        }
        SqlDataSourceEditor.rebuildResultSchema(source, queryName, relationsEditing, parameters, dataSerializationExtension).done((_) => {
            ReportDataSourceService.getSqlDataSourceBase64(source)
                .done((result) => {
                deferred.resolve({
                    name: 'sqlDataSource',
                    id: source.id,
                    data: {
                        '@ObjectType': 'DevExpress.DataAccess.Sql.SqlDataSource',
                        '@Base64': result
                    },
                    isListType: false,
                    isSupportQueries: true,
                    isSqlDataSource: true,
                    base64: () => result
                });
            })
                .fail(result => { SqlDataSourceEditor._onFail(result, deferred); });
        }).fail(result => { SqlDataSourceEditor._onFail(result, deferred); });
        return deferred.promise();
    }
    getActions(context) {
        const result = [];
        if (!context.data)
            return result;
        if (context.data['canAddSqlQuery'] === true) {
            result.push(this.addAction);
            result.push(this.editRelationsAction);
        }
        if (context.data['canEditQuery'] === true) {
            result.push(this.editAction);
            result.push(this.removeAction);
        }
        return result;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/_jsonDataSourceEditor.js








class JsonEditSchemaIterator extends external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageIterator {
    getNextPageId(pageId) {
        if (!pageId)
            return external_DevExpress_Analytics_Wizard_namespaceObject.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
        return super.getNextPageId(pageId);
    }
}
class JsonDataSourceEditor extends DataSourceEditorBase {
    constructor() {
        super(...arguments);
        this.editSchemaAction = {
            clickAction: (item) => {
                this.editSchema(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).id);
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Edit Schema...', 'DataAccessUIStringId.JsonDataSourceDesignerVerbEditSchema')
        };
    }
    _applyDataSourceChange(source, dest) {
        return JsonDataSourceEditor.createJsonDataSourceInfo(source)
            .done((result) => {
            if (dest) {
                dest.data['base64'](result.base64());
            }
            else {
                addDataSourceToReport(this._dsHelper(), this._reportViewModel(), this._undoEngine(), this._itemsProvider(), result);
            }
        });
    }
    editSchema(dataSourceID) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        ReportDataSourceService.jsonDataSourceFromBase64(dataSourceInfo.data['base64']())
            .done((result) => {
            const jsonDataSource = new external_DevExpress_Analytics_Data_namespaceObject.JsonDataSource(JSON.parse(result.jsonDataSourceJSON), undefined, QBRequestWrapper());
            jsonDataSource.name(dataSourceInfo.name);
            const jsonSerialized = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(jsonDataSource);
            const beforeInitEvent = (e) => {
                e.state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Json;
            };
            this._wizard.events.addHandler('beforeInitialize', beforeInitEvent);
            this._wizard.initialize((0,external_DevExpress_Analytics_Wizard_namespaceObject._createDefaultDataSourceWizardState)(undefined, {
                connectionName: jsonDataSource.connectionName(),
                dataSourceName: jsonSerialized['@Name'],
                jsonScheme: JSON.stringify(jsonSerialized['Schema']),
                jsonSource: JSON.stringify(jsonSerialized['Source']),
                rootElement: jsonSerialized['@RootElement']
            }), (factory, stateManager) => new JsonEditSchemaIterator(factory, stateManager, this._wizard['_wizardOptions']));
            this._wizard.events.removeHandler('beforeInitialize', beforeInitEvent);
            this._wizard.start();
            this._wizard.isVisible(true);
        });
    }
    applyDataSourceWizardChanges(dataSourceWizardModel) {
        const jsonDataSource = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreJsonDataSourceFromState)(dataSourceWizardModel.jsonDataSourceWizard, undefined, dataSourceWizardModel.dataSourceId);
        const dataSource = jsonDataSource && this._dsHelper().findDataSourceInfoByName(jsonDataSource.name());
        return this._applyDataSourceChange(jsonDataSource, dataSource);
    }
    saveJsonSource(state, connections) {
        const jsonDataSourceState = state.jsonDataSourceWizard;
        const jsonDataSource = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreJsonDataSourceFromState)(jsonDataSourceState);
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        QBRequestWrapper().saveJsonSource(state.jsonDataSourceWizard.newConnectionName, jsonDataSource)
            .done((connectionName) => {
            if (connections.json().every(x => x.name !== jsonDataSourceState.newConnectionName)) {
                connections.json.push({
                    name: jsonDataSourceState.newConnectionName,
                    description: jsonDataSourceState.newConnectionName
                });
            }
            jsonDataSourceState.connectionName = connectionName;
            jsonDataSourceState.jsonSource = null;
            this.applyDataSourceWizardChanges(state)
                .done((result) => { deferred.resolve(result); })
                .fail(() => deferred.reject());
        })
            .fail(result => { JsonDataSourceEditor._onFail(result, deferred); });
        return deferred.promise();
    }
    static createJsonDataSourceInfo(source) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        ReportDataSourceService.getJsonDataSourceBase64(source)
            .done((result) => {
            deferred.resolve({
                name: 'jsonDataSource',
                id: source.id,
                data: {
                    '@ObjectType': 'DevExpress.DataAccess.Json.JsonDataSource',
                    '@Base64': result.base64
                },
                isJsonDataSource: true,
                isSupportQueries: result.isSupportQueries,
                isListType: result.isListType,
                base64: () => result.base64
            });
        })
            .fail(result => { JsonDataSourceEditor._onFail(result, deferred); });
        return deferred.promise();
    }
    getActions(context) {
        const result = [];
        if (!context.data)
            return result;
        if (context.data['isJsonDataSource'] === true) {
            result.push(this.editSchemaAction);
        }
        return result;
    }
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_chartUtils.js




const createChartDesignerOptions = (designerModel, dataSourceHelper, model, parameters, chartValueBindingProvider, accessibilityProvider) => {
    const chartDesignerOptionsVisible = external_ko_namespaceObject.observable(false);
    let chartIsDirty;
    const currentChart = external_ko_namespaceObject.observable(null);
    let disposables = [];
    let chartDisposables = [];
    disposables.push(chartDesignerOptionsVisible.subscribe((newVal) => {
        if (newVal) {
            currentChart().designTime(true);
            designerModel.undoEngine().start();
        }
        else {
            chartDisposables.forEach((x) => x.dispose());
            chartDisposables = [];
            designerModel.undoEngine().end();
            const isDirty = chartIsDirty();
            chartDesignerOptions.options.data.chart(null);
            if (isDirty) {
                const undoEngine = designerModel.undoEngine();
                undoEngine.undo();
                undoEngine.redoEnabled(false);
                undoEngine._observers.pop();
            }
            currentChart().designTime(false);
            currentChart(null);
        }
    }));
    const chartDesignerOptions = {
        dispose: () => {
            chartDisposables.forEach((x) => x.dispose());
            disposables.forEach((x) => x.dispose());
            chartDisposables = [];
            disposables = [];
        },
        options: null,
        visible: chartDesignerOptionsVisible,
        buttons: [{
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('OK', 'PivotGridStringId.FilterOk'), type: 'default', stylingMode: 'contained', onClick: () => {
                        chartIsDirty(false);
                        chartDesignerOptionsVisible(false);
                    }
                }
            },
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), type: 'normal', stylingMode: 'contained', onClick: () => {
                        chartDesignerOptionsVisible(false);
                    }
                }
            }],
        run: (chartSurface) => {
            const xrChart = chartSurface._control;
            currentChart(chartSurface);
            if (!chartDesignerOptions.options) {
                chartDesignerOptions.options = {
                    callbacks: {
                        customizeActions: function (actions) {
                            for (let i = 0; i < actions.length; i++) {
                                if (actions[i].id === external_DevExpress_Analytics_Tools_namespaceObject.ActionId.Undo || actions[i].id === external_DevExpress_Analytics_Tools_namespaceObject.ActionId.Redo) {
                                    actions[i].hasSeparator = false;
                                }
                                else {
                                    actions[i].visible = false;
                                    actions[i].hasSeparator = false;
                                }
                            }
                        },
                        init: function (chartModel) {
                            chartDisposables.push(chartIsDirty = external_ko_namespaceObject.computed({
                                read: () => {
                                    return chartModel.undoEngine().isDirty();
                                },
                                write: (newVal) => {
                                    chartModel.undoEngine().isDirty(newVal);
                                }
                            }));
                            chartModel.displayNameProvider = designerModel.displayNameProvider;
                            chartModel.dataSourceHelper = dataSourceHelper;
                            chartDisposables.push(chartModel.reportParameters = external_ko_namespaceObject.computed(() => { return parameters().parameters(); }));
                            chartDisposables.push(chartModel.reportDataSource = external_ko_namespaceObject.computed(() => { return dataSourceHelper().findDataSourceInfo(model() && model().dataSource()); }));
                            chartModel.reportDataBindingsProvider = chartValueBindingProvider;
                            chartDisposables.push(chartDesignerOptionsVisible.subscribe((newVal) => {
                                if (newVal) {
                                    chartModel.updateSurfaceSize();
                                }
                            }));
                        }
                    },
                    data: {
                        chart: external_ko_namespaceObject.observable(xrChart.chartModel),
                        availableChartDataSources: designerModel.chartDataSources,
                        width: 500,
                        height: 500
                    },
                    accessibilityProvider: accessibilityProvider,
                    visible: chartDesignerOptionsVisible,
                    rtl: designerModel.rtl,
                    canAddItems: designerModel.canAddItems,
                    fieldListProvider: designerModel.dataBindingsProvider
                };
            }
            else {
                chartDesignerOptions.options.data.chart(xrChart.chartModel);
            }
            chartDesignerOptions.visible(true);
        },
        container: (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(element, '.dx-designer')
    };
    return chartDesignerOptions;
};

;// ./node_modules/devexpress-reporting/designer/helpers/_reportDesignerControlsHelper.js


class ReportDesignerControlsHelper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(helper) {
        super();
        this.getControls = (context) => helper() && helper().getControls(context);
        this.getControlByName = (name) => helper() && helper().getControlByName(name);
        this._disposables.push(this.allControls = external_ko_namespaceObject.computed(() => helper() && helper().allControls() || []));
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_fieldListDragDropHelper.js






class FieldListDragDropHelper {
    constructor(_dataBindingMode, _size) {
        this._dataBindingMode = _dataBindingMode;
        this._size = _size;
        this._getItemsFromList = (treeListItem, childCollection) => {
            const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            treeListItem.getItems().done((items) => {
                const simpleFields = items.filter(item => { return !isList(item.data); });
                childCollection.push.apply(childCollection, simpleFields);
                deferred.resolve();
            });
            return deferred.promise();
        };
    }
    _createTable(parent, items) {
        if (items.length === 0)
            return null;
        const tableSize = this._size ? [this._size.width(), this._size.height()].join(',') : '200, 23';
        const table = parent.getControlFactory().createControl({ '@ControlType': 'XRTable', '@SizeF': tableSize }, parent);
        const tableRow = table.createChild({ '@ControlType': 'XRTableRow', '@Weight': '1' });
        items.forEach(item => {
            const cell = createSimpleControl('XRTableCell', tableRow);
            if (item.data.specifics !== 'Array') {
                assignBinding(cell, tableRow, 'Text', item, this._dataBindingMode);
            }
            else {
                const path = item.data instanceof Parameter ? item.path : new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).path;
                cell.addChild(createPictureBox(cell, path, this._dataBindingMode));
            }
        });
        return table;
    }
    _getFirstLevelItems(treeListItems) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const promises = [];
        const childCollection = [];
        for (let i = 0; i < treeListItems.length; i++) {
            if (!isList(treeListItems[i].data))
                childCollection.push.apply(childCollection, [treeListItems[i]]);
            else
                promises.push(this._getItemsFromList(treeListItems[i], childCollection));
        }
        external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred.when(promises).done(() => {
            deferred.resolve(childCollection);
        });
        return deferred.promise();
    }
    createTableFromListSource(treeListItem, parent) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        treeListItem.getModel().getItems().done((items) => {
            if (items.length === 0)
                deferred.resolve(null);
            const simpleFields = items.filter(item => { return !isList(item.data); });
            if (simpleFields.length === 1) {
                const control = (memberControlsMap[simpleFields['specifics']] || memberControlsMap['Default']).drop(simpleFields[0].getViewModel(), parent, this._dataBindingMode);
                deferred.resolve(control);
            }
            else if (simpleFields.length > 1) {
                deferred.resolve(this._createTable(parent, simpleFields));
            }
            else {
                this.createTableFromItems(items, parent).done(table => deferred.resolve(table));
            }
        });
        return deferred.promise();
    }
    createTableFromItems(treeListItems, parent) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._getFirstLevelItems(treeListItems).done(items => deferred.resolve(this._createTable(parent, items)));
        return deferred.promise();
    }
}
const listMemberControlsMap = {
    'List': {
        drop: (treeListItem, dropTargetControl, dataBindingMode, size) => {
            const helper = new FieldListDragDropHelper(dataBindingMode, size);
            if (treeListItem.data.specifics === 'ListSource')
                return helper.createTableFromListSource(treeListItem, dropTargetControl);
            return helper.createTableFromItems([treeListItem.getModel()], dropTargetControl);
        },
        size: getUsefulReportWidth,
        adjustDropTarget: (dropTarget) => {
            if (dropTarget instanceof ReportSurface)
                return dropTarget;
            const targetSurface = getFirstSurfaceParentByType(dropTarget, _checkBandsType);
            targetSurface.underCursor().x = 0;
            return targetSurface;
        }
    },
    'MultiList': {
        drop: (treeListItem, dropTargetControl, dataBindingMode, size) => {
            const helper = new FieldListDragDropHelper(dataBindingMode, size);
            return helper.createTableFromItems(treeListItem.getSelectedItems(), dropTargetControl);
        },
        size: getUsefulReportWidth,
        adjustDropTarget: (dropTarget) => {
            if (dropTarget instanceof ReportSurface)
                return dropTarget;
            const targetSurface = getFirstSurfaceParentByType(dropTarget, _checkBandsType);
            targetSurface.underCursor().x = 0;
            return targetSurface;
        }
    }
};
const memberControlsMap = {
    'Array': {
        drop: (treeListItem, dropTargetControl, dataBindingMode) => {
            return createPictureBox(dropTargetControl, new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(treeListItem.path).path, dataBindingMode);
        },
        size: (surface) => {
            return external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString('100, 100');
        }
    },
    'Bool': {
        drop: (treeListItem, dropTargetControl, dataBindingMode) => {
            const control = createSimpleControl('XRCheckBox', dropTargetControl);
            assignBinding(control, dropTargetControl, 'CheckBoxState', treeListItem.getModel(), dataBindingMode);
            control.text(treeListItem.data.displayName);
            return control;
        },
        size: (surface) => {
            return external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString('100, 23');
        }
    },
    'Default': {
        drop: (treeListItem, dropTargetControl, dataBindingMode) => {
            const control = createSimpleControl('XRLabel', dropTargetControl);
            assignBinding(control, dropTargetControl, 'Text', treeListItem.getModel(), dataBindingMode);
            return control;
        },
        size: (surface) => {
            return external_DevExpress_Analytics_Elements_namespaceObject.Size.fromString('100, 23');
        }
    },
    ...listMemberControlsMap
};

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_fieldListDragDropHandler.js








class FieldListDragDropHandler extends external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler {
    _setDragHelperContent(memberControlsMap, key) {
        const size = (memberControlsMap[key] || memberControlsMap['Default']).size(this.surface());
        this.recalculateSize(size);
        this.dragHelperContent.reset();
        this.dragHelperContent.setContent(new external_DevExpress_Analytics_Elements_namespaceObject.Rectangle(0, 0, this._size.width(), this._size.height()));
    }
    _getDropTarget(memberControlsMapElement) {
        return memberControlsMapElement && memberControlsMapElement.adjustDropTarget && memberControlsMapElement.adjustDropTarget(this.selection.dropTarget) || this.selection.dropTarget;
    }
    _needToChangeHelperContent(dragHelperContent, className) {
        return dragHelperContent && dragHelperContent.className === className;
    }
    _updateInnerControlSize(control) {
        if (!control.rows)
            return;
        const cells = control.rows()[0].cells();
        let innerControls = [];
        cells.forEach(cell => {
            innerControls = innerControls.concat(cell.controls());
        });
        if (innerControls.length === 0)
            return;
        const cellWidth = cells[0].width();
        const cellHeight = cells[0].height();
        innerControls.forEach(control => {
            control.size.width(cellWidth);
            control.size.height(cellHeight);
        });
    }
    _addControl(control, dropTarget) {
        if (!control)
            return;
        this._undoEngine().start();
        this.addControl(control, dropTarget, this._size);
        this._updateInnerControlSize(control);
        this._undoEngine().end();
        const parent = dropTarget.getControlModel();
        dragDropComponentAdded(control, parent);
        this.onComponentAdded({ parent: parent, model: control });
    }
    _isDefaultBindingAssigned(control, treeListItem) {
        if (control['hasDefaultBindingProperty'] && !isList(treeListItem.data)) {
            if (this.dataBindingMode() === _dataBindingMode_DataBindingMode.Bindings) {
                const dataBinding = control.getDefaultBinding();
                dataBinding.updateBinding(treeListItem.path, this._dataSources.peek());
            }
            else {
                const expression = control.getDefaultBinding();
                expression.value(getExpressionPath(control, new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(treeListItem.path)));
            }
            return true;
        }
        return false;
    }
    canDrop(dropTarget, controlModel, metaData) {
        const canDrop = super.canDrop(dropTarget, controlModel, metaData);
        return canDrop && (this._canAddItems() || this._isIcon);
    }
    constructor(_canAddItems, surface, selection, _undoEngine, snapHelper, dragHelperContent, _dataSources, onComponentAdded) {
        super(surface, selection, _undoEngine, snapHelper, dragHelperContent);
        this._canAddItems = _canAddItems;
        this._undoEngine = _undoEngine;
        this._dataSources = _dataSources;
        this._getKey = (item) => (item.data.isList || item.isMultiSelected) ? 'List' : item.data.specifics;
        this._isIcon = false;
        this._disposables.push(this.dataBindingMode = external_ko_namespaceObject.computed(() => { return surface() && surface()._control.dataBindingMode || _dataBindingMode_DataBindingMode.Expressions; }));
        this.cursor = 'arrow';
        this.onComponentAdded = (e) => { onComponentAdded && onComponentAdded(e); };
        this.containment = '.dxrd-designer';
        this['cursorAt'] = {
            top: 0,
            left: 0
        };
        this['helper'] = (draggable, event) => {
            super.helper(draggable);
            const item = draggable;
            selectTreeListItem(item, event);
            this._setDragHelperContent(memberControlsMap, this._getKey(item));
        };
    }
    drag(event, ui, draggable) {
        this._isIcon = false;
        this._snapDisabled = false;
        if (this.selection.dropTarget) {
            const key = this._getKey(draggable);
            const dropTarget = this._getDropTarget(memberControlsMap[key]);
            const dropTargetControl = dropTarget.getControlModel();
            const boundedClass = 'dxrd-image-ghost-bounded';
            const dragHelperContent = this.dragHelperContent.controls()[0];
            if (dropTargetControl['hasDefaultBindingProperty'] && !isList(draggable.data) || dropTarget.dragCallback) {
                if (!this._needToChangeHelperContent(dragHelperContent, boundedClass)) {
                    const rect = new external_DevExpress_Analytics_Elements_namespaceObject.Rectangle(12, 12, 12, 12);
                    rect.className = boundedClass;
                    this._size.width(12);
                    this._size.height(12);
                    this.dragHelperContent.reset();
                    this.dragHelperContent.setContent(rect);
                }
                dropTarget.dragCallback && dropTarget.dragCallback(draggable);
                this.snapHelper.deactivateSnapLines();
                this._snapDisabled = true;
                this._isIcon = true;
            }
            else if (this._needToChangeHelperContent(dragHelperContent, boundedClass)) {
                this._setDragHelperContent(memberControlsMap, key);
            }
        }
        super.drag(event, ui, draggable);
    }
    doStopDrag(uiElement, draggable, event) {
        this.dragHelperContent.reset();
        if (this.dragHelperContent.isLocked())
            return;
        if (this.selection.dropTarget) {
            if (this.selection.dropTarget instanceof ReportSurface)
                return;
            const position = this._getAbsoluteSurfacePosition(uiElement);
            this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget['absolutePosition'].x();
            this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget['absolutePosition'].y();
            const item = draggable;
            const key = item.data.isList ? 'List' : item.data.specifics;
            if (this.surface().isFit && this.surface().isFit(this.selection.dropTarget) || this.selection.dropTarget.underCursor().isOver) {
                let dropTarget = this._getDropTarget(memberControlsMap[key]);
                const dropTargetControl = dropTarget.getControlModel();
                const isMultiSelect = item.getSelectedItems().length > 1;
                if (!isMultiSelect && this._isDefaultBindingAssigned(dropTargetControl, item))
                    return;
                if (dropTarget.dropCallback) {
                    dropTarget.dropCallback(item);
                    return;
                }
                dropTarget = dropTargetControl.getMetaData().isContainer ? dropTarget : dropTarget.parent;
                if (!dropTarget.canDrop())
                    return;
                if (!isMultiSelect && !isList(item.data)) {
                    const control = (memberControlsMap[key] || memberControlsMap['Default']).drop(item, dropTarget.getControlModel(), this.dataBindingMode());
                    this._addControl(control, dropTarget);
                    return;
                }
                listMemberControlsMap[isMultiSelect ? 'MultiList' : key]
                    .drop(item, dropTarget.getControlModel(), this.dataBindingMode(), listMemberControlsMap[isMultiSelect ? 'MultiList' : key].size(this.surface()))
                    .done((control) => {
                    this._addControl(control, dropTarget);
                });
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_objectExplorerDragDropHandler.js


class ObjectExplorerDragDropHandler extends external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler {
    constructor(_canAddItems, surface, selection, undoEngine, dragHelperContent) {
        super(surface, selection, undoEngine, null, dragHelperContent);
        this._canAddItems = _canAddItems;
        this.undoEngine = undoEngine;
        this._lastList = null;
        this._timeout = null;
        this.cursor = 'arrow';
        this.alwaysAlt = true;
        this.containment = '.dxrd-designer';
        this['cursorAt'] = {
            top: 0,
            left: 0
        };
    }
    drag(event, ui) {
        let isLocked = this.selection && this.selection.dropTarget && this.selection.dropTarget.locked;
        if (this.reportControlsDragDropHelper.started) {
            const target = event['toElement'] || (external_ko_namespaceObject.dataFor(event.relatedTarget) && event.relatedTarget) || (event && event.target) || null;
            if (target && external_ko_namespaceObject.dataFor(target)?.getModel) {
                this.reportControlsDragDropHelper.setNewDropTarget(external_ko_namespaceObject.dataFor(target), target, event.pageY);
            }
            const _target = this.reportControlsDragDropHelper['_target'];
            if (_target && _target.hasItems && _target.collapsed) {
                if (this._lastList !== _target) {
                    this._timeout && clearTimeout(this._timeout);
                    this._lastList = _target;
                    this._timeout = setTimeout(() => {
                        this._lastList.collapsed && this._lastList.toggleCollapsed();
                    }, 500);
                }
            }
            else {
                this._lastList = null;
                this._timeout && clearTimeout(this._timeout);
            }
            isLocked = isLocked || !this._canAddItems();
        }
        this.dragHelperContent.isLocked(isLocked);
    }
}

;// ./node_modules/devexpress-reporting/designer/utils/utils.js


function b64ToUint6(nChr) {
    return nChr > 64 && nChr < 91 ?
        nChr - 65
        : nChr > 96 && nChr < 123 ?
            nChr - 71
            : nChr > 47 && nChr < 58 ?
                nChr + 4
                : nChr === 43 ?
                    62
                    : nChr === 47 ?
                        63
                        :
                            0;
}
function base64DecToArr(sBase64, nBlockSize) {
    const sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ''), nInLen = sB64Enc.length, nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2, aBytes = new Uint8Array(nOutLen);
    for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
        nMod4 = nInIdx & 3;
        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
        if (nMod4 === 3 || nInLen - nInIdx === 1) {
            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
            }
            nUint24 = 0;
        }
    }
    return aBytes;
}
function _arrayBufferToString(buf, callback) {
    const bb = new Blob([new Uint16Array(buf)]);
    const f = new FileReader();
    f.onload = function (e) {
        callback(btoa(e.target['result']));
    };
    f.readAsText(bb, 'UTF-16');
}
function btoaAtob16(utf16Base64, resultCallback) {
    try {
        resultCallback(btoa(String.fromCharCode.apply(null, new Uint16Array(base64DecToArr(utf16Base64, 2).buffer))));
    }
    catch (e) {
        _arrayBufferToString(base64DecToArr(utf16Base64, 2).buffer, resultCallback);
    }
}
function base64UTF16LEtobase64UTF8(base64UTF16, resultCallback) {
    base64UTF16 == undefined ? resultCallback(undefined) : atob(base64UTF16).indexOf('{\\rtf1') === 0 ? resultCallback(base64UTF16) : btoaAtob16(base64UTF16, resultCallback);
}
function _isReorderBand(dropTarget, dragFrom) {
    return BandViewModel.isReorderingBand(dropTarget.getControlModel()) &&
        BandViewModel.isReorderingBand(dragFrom) &&
        dropTarget.getControlModel().controlType === dragFrom.controlType &&
        dropTarget.getControlModel().parentModel() === dragFrom.parentModel();
}
function _isMarginBand(band) {
    return (band.controlType === 'TopMarginBand' || band.controlType === 'BottomMarginBand');
}
function _isPageBand(band) {
    return (band.controlType === 'PageHeaderBand' || band.controlType === 'PageFooterBand');
}
const availableFonts = external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts;

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_objectExplorerDragDropHelper.js


class ObjectExplorerDragDropHelper extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.ReorderTreeListDragDropHelper {
    constructor() {
        super(...arguments);
        this._orderingAreaHeight = 8;
    }
    _isInTopOrderArea(targetElement, mouseLocationY) {
        const targetTop = targetElement.offset().top;
        return mouseLocationY < (targetTop + this._orderingAreaHeight);
    }
    _isInBottomOrderArea(targetElement, mouseLocationY) {
        const targetTop = targetElement.offset().top;
        return mouseLocationY > (targetTop + targetElement.height() - this._orderingAreaHeight);
    }
    _getDroppableClassName(isInTopOrderArea, isInBottomOrderArea) {
        return this.droppableClassName;
    }
    _shouldCheckAreas() {
        return true;
    }
    setNewDropTarget(elementModel, element, mouseLocationY) {
        this.drag(elementModel, element);
        const $targetElement = external_jQuery_namespaceObject.fn.constructor(this._targetElement);
        if ($targetElement && $targetElement.length) {
            let isInTopOrderArea, isInBottomOrderArea;
            if (mouseLocationY && this._shouldCheckAreas()) {
                isInTopOrderArea = this._isInTopOrderArea($targetElement, mouseLocationY);
                isInBottomOrderArea = this._isInBottomOrderArea($targetElement, mouseLocationY);
            }
            $targetElement.addClass(this._getDroppableClassName(isInTopOrderArea, isInBottomOrderArea));
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_reportControlsDragDropHelper.js










class ReportControlsDragDropHelper extends ObjectExplorerDragDropHelper {
    _canReorder(currentTarget, draggableData) {
        const currentModel = this._getElementViewModel(currentTarget);
        if (BandViewModel.isReorderingBand(this._draggableModel) && BandViewModel.isReorderingBand(currentModel))
            return _isReorderBand(this._draggableModel.surface, currentModel);
        return currentTarget.data.specifics === draggableData.specifics ||
            (this._draggableModel.getMetaData().canDrop(currentModel.surface, this._draggableModel) &&
                !currentModel.getMetaData().isContainer && !(currentModel instanceof ReportViewModel));
    }
    _canInsertToTarget(targetModel) {
        const targetIsContainer = targetModel.getMetaData().isContainer || targetModel instanceof ReportViewModel;
        if (this._tableControlTypes.indexOf(this._draggableModel.controlType) === -1 && (targetModel.controlType === 'XRTable' || targetModel.controlType === 'XRTableRow'))
            return false;
        return targetIsContainer && targetModel.surface && targetModel.surface.canDrop()
            && this._draggableModel.getMetaData().canDrop(targetModel.surface, this._draggableModel);
    }
    _targetIsClosestOfDraggable(target, draggable) {
        return target === draggable || (target.parent && this._targetIsClosestOfDraggable(target.parent, draggable));
    }
    _canDrop(target, targetModel) {
        const isReportExplorerTreeListItem = target instanceof external_DevExpress_Analytics_Widgets_Internal_namespaceObject.TreeListItemViewModel && target.data && target.data['data'] instanceof external_DevExpress_Analytics_Elements_namespaceObject.ElementViewModel;
        if (!isReportExplorerTreeListItem || this._restrictedTargets.indexOf(targetModel.controlType) !== -1) {
            return false;
        }
        return (this._draggableParent !== this._targetModel && !this._targetIsClosestOfDraggable(this._target, this._draggable) &&
            (this._canReorder(target, this._draggable.data) || this._canInsertToTarget(targetModel)));
    }
    _insertTableChildren(parent, selectedEl, position, weightsCells = null) {
        let newChild, selectedRowHeight = 0;
        if (selectedEl['@ControlType'] === 'XRTableRow') {
            newChild = new XRTableRowViewModel(selectedEl, parent);
            selectedRowHeight = newChild.height.peek();
        }
        else if (selectedEl['@ControlType'] === 'XRTableCell') {
            newChild = new XRTableCellViewModel(selectedEl, parent);
        }
        parent.addChild(newChild, position);
        if (weightsCells) {
            weightsCells.splice(position, 0, parseFloat(selectedEl['@Weight']));
            weightsCells.forEach((weight, index) => {
                parent.cells()[index].weight(weight);
            });
        }
        if (selectedRowHeight) {
            parent.size.height(parent.size.height() + selectedRowHeight);
        }
        return newChild.surface;
    }
    _shouldCheckAreas() {
        this._isTargetContainer = this._draggableModel.controlType === 'DetailReportBand';
        return this._isTargetContainer;
    }
    _getDroppableClassName(isInTopOrderArea, isInBottomOrderArea) {
        let className = this.droppableClassName;
        const targetModel = this._getElementViewModel(this._target);
        if (this._canDrop(this._target, targetModel) && (!this._dragHelperContent || !this._dragHelperContent.isLocked())) {
            const canOrder = this._canReorder(this._target, this._draggable.data);
            const isDragToBottom = canOrder && this.isDragToBottom();
            className = className + ' ' + this.approveClassName;
            if (canOrder && this._draggableModel.controlType !== 'DetailReportBand') {
                className = className + ' ' + this.getDroppablePosition();
                this._isTargetContainer = false;
            }
            else if (canOrder && isDragToBottom && isInBottomOrderArea) {
                className = [className, this.classDropAfter].join(' ');
                this._isTargetContainer = false;
            }
            else if (canOrder && !isDragToBottom && isInTopOrderArea) {
                className = className + ' ' + this.classDropBefore;
                this._isTargetContainer = false;
            }
        }
        return className;
    }
    _reorderBands(targetModel) {
        if (this._isTargetContainer) {
            targetModel.addChild(this._draggableModel);
        }
        else {
            this._undoEngine && this._undoEngine.start();
            this._draggableModel['level'](targetModel['level']());
            this._undoEngine && this._undoEngine.end();
        }
    }
    _reorderTableControls(targetModel, siblings, isDragToBottom) {
        const clonedSiblings = siblings && siblings().slice(0);
        const draggableInfoClone = this._serializer.serialize(this._draggableModel);
        let weightsCells;
        if (this._draggableModel.controlType === 'XRTableCell') {
            weightsCells = clonedSiblings.filter((cell) => {
                return cell.name.peek() !== this._draggableModel.name.peek();
            }).map(cell => cell.weight.peek());
        }
        return this._insertTableChildren(targetModel.parentModel(), draggableInfoClone, siblings.indexOf(targetModel) + isDragToBottom, weightsCells);
    }
    _changeControlParent(targetModel) {
        const targetRect = targetModel.surface.rect();
        const draggableRect = this._draggableModel.surface.rect();
        const rect = {};
        if (targetRect.width < draggableRect.left + draggableRect.width) {
            rect['left'] = targetRect.width - draggableRect.width;
            rect['left'] = rect['left'] > 0 ? rect['left'] : 0;
        }
        if (targetRect.height < draggableRect.top + draggableRect.height) {
            rect['top'] = targetRect.height - draggableRect.height;
            rect['top'] = rect['top'] > 0 ? rect['top'] : 0;
        }
        this._draggableModel.surface.rect(rect);
        targetModel.addChild(this._draggableModel);
    }
    constructor(_dragHelperContent, _undoEngine) {
        super(_dragHelperContent);
        this._dragHelperContent = _dragHelperContent;
        this._undoEngine = _undoEngine;
        this._isTargetContainer = false;
        this._tableControlTypes = ['XRTableCell', 'XRTableRow'];
        this._restrictedTargets = ['XRCrossTabCell', 'XRCrossTab'];
    }
    start(draggable) {
        super.start(draggable);
        this._serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        this._draggableParent = this._draggableModel.parentModel();
    }
    getSiblings() {
        const draggablePathName = this._draggable.data.name.split('.')[0];
        return (this._targetModel.parentModel() || this._targetModel)[draggablePathName];
    }
    stop() {
        super.stop();
        if (!this._target || !this._targetModel || !this._canDrop(this._target, this._targetModel)) {
            return this._draggableModel.surface;
        }
        const canReorder = this._canReorder(this._target, this._draggable.data), isReorderingBand = BandViewModel.isReorderingBand(this._draggableModel), isDragToBottom = this.isDragToBottom(), isBandReordering = isReorderingBand && !this._isTargetContainer;
        if (!isBandReordering) {
            this._draggableParent.removeChild(this._draggableModel);
        }
        if (canReorder) {
            if (isReorderingBand) {
                this._reorderBands(this._targetModel);
            }
            else if (this._tableControlTypes.indexOf(this._draggableModel.controlType) !== -1) {
                this._reorderTableControls(this._targetModel, this.getSiblings(), isDragToBottom);
            }
            else {
                this.reorderSiblings(isDragToBottom);
            }
        }
        else if (this._targetModel instanceof XRTableControlViewModel || this._targetModel instanceof XRTableRowViewModel) {
            const draggableInfoClone = this._serializer.serialize(this._draggableModel);
            return this._insertTableChildren(this._targetModel, draggableInfoClone, 0);
        }
        else {
            this._changeControlParent(this._targetModel);
        }
        return this._draggableModel.surface;
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_reportExplorerDragDropHandler.js






class ReportExplorerDragDropHandler extends ObjectExplorerDragDropHandler {
    dispose() {
        super.dispose();
        this.reportControlsDragDropHelper.dispose();
    }
    constructor(canAddItems, surface, selection, undoEngine, dragHelperContent) {
        super(canAddItems, surface, selection, undoEngine, dragHelperContent);
        this._isStyle = (item) => item.data && item.data.specifics === 'stylemodel';
        this._isFormatingRule = (item) => item.data && item.data.specifics === 'formattingrule';
        this._isReportControl = (item) => !this._isStyle(item) && !this._isFormatingRule(item);
        this.cursor = 'arrow';
        this.alwaysAlt = true;
        this.containment = '.dxrd-designer';
        this['cursorAt'] = {
            top: 0,
            left: 0
        };
        this.reportControlsDragDropHelper = new ReportControlsDragDropHelper(this.dragHelperContent, this.undoEngine && this.undoEngine());
        this.helper = (draggable, event) => {
            const item = draggable;
            selectTreeListItem(item, event);
            if (this._isReportControl(item)) {
                this.reportControlsDragDropHelper.helper(draggable, event);
            }
            else {
                const rect = new external_DevExpress_Analytics_Elements_namespaceObject.Rectangle(12, 12, 12, 12);
                let templateId = '';
                if (this._isStyle(item)) {
                    rect.className = 'dxrd-image-ghost-stylemodel';
                    templateId = 'dxrd-svg-reportexplorer-style';
                }
                else if (this._isFormatingRule(item)) {
                    rect.className = 'dxrd-image-ghost-formattingrule';
                    templateId = 'dxrd-svg-reportexplorer-formatting_rule';
                }
                this.dragHelperContent.reset();
                dragHelperContent.setContent(rect, (templateId ? { template: templateId } : null));
                this._size.width(12);
                this._size.height(12);
            }
        };
    }
    startDrag(draggable) {
        if (this._isReportControl(draggable)) {
            this.reportControlsDragDropHelper.start(draggable);
        }
        super.startDrag(draggable);
    }
    doStopDrag(uiElement, draggable, event) {
        this.reportControlsDragDropHelper.started && this.reportControlsDragDropHelper.clearDroppableClasses();
        this.dragHelperContent.reset();
        if (this.dragHelperContent.isLocked())
            return;
        if (this.reportControlsDragDropHelper.started) {
            this.selection.initialize(this.reportControlsDragDropHelper.stop());
        }
        else if (this.selection.dropTarget && !this.selection.dropTarget.locked) {
            if (this.selection.dropTarget instanceof ReportSurface)
                return;
            const position = this._getAbsoluteSurfacePosition(uiElement);
            this.selection.dropTarget.underCursor().x = position.left - this.selection.dropTarget['absolutePosition'].x();
            this.selection.dropTarget.underCursor().y = position.top - this.selection.dropTarget['absolutePosition'].y();
            if (!draggable || !draggable.data)
                return;
            if (this.surface().isFit && this.surface().isFit(this.selection.dropTarget) || this.selection.dropTarget.underCursor().isOver) {
                if (draggable.data.specifics === 'stylemodel') {
                    this.selection.dropTarget.getControlModel()['styleName'] && this.selection.dropTarget.getControlModel()['styleName'](draggable.data.displayName);
                }
                else if (draggable.data.specifics === 'formattingrule') {
                    this.selection.dropTarget.getControlModel()['formattingRuleLinks'] && this.selection.dropTarget.getControlModel()['formattingRuleLinks'].push(FormattingRuleLink.createNew(draggable.data.data));
                }
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/xrSubband.js



class SubBandViewModel extends BandViewModel {
    constructor(band, parent, serializer) {
        super(band, parent, serializer);
    }
    isPropertyDisabled(name) {
        if (name === pageBreak.propertyName)
            return this.controlType === 'SubBand' && this[printAcrossBands.propertyName] && this[printAcrossBands.propertyName]();
        else
            return super.isPropertyDisabled(name);
    }
    isAllowedParent(target) {
        return target instanceof BandViewModel;
    }
}
class SubBandSurface extends BandSurface {
    constructor() {
        super(...arguments);
        this.leftMarginTemplate = 'dxrd-sub-band-coordinate-grid';
    }
    getAbsolutePositionY() {
        const y = super.getAbsolutePositionY();
        if (this.parent.bandsHolder.bands().indexOf(this) === 0) {
            return y + (this.parent.heightWithoutSubBands());
        }
        return y;
    }
    getBackgroundRect() {
        let top = 0, height = this._height();
        const parent = this.parent;
        const parentBands = external_ko_namespaceObject.unwrap(parent.bandsHolder.bands);
        const parentBackgroundRect = external_ko_namespaceObject.unwrap(parent.backgroundRect);
        top += (parentBackgroundRect.top + parentBackgroundRect.height);
        const bottom = parentBackgroundRect.bottom;
        const bandIndex = parentBands.indexOf(this);
        for (let i = 0; i < bandIndex; i++) {
            top += parentBands[i]._totalHeight();
        }
        if (top > bottom)
            height = 0;
        else if (top + height > bottom)
            height = bottom - top;
        return { top, bottom, height };
    }
    _initMultiColumn() {
        this._disposables.push(this.multiColumn = external_ko_namespaceObject.computed(() => {
            if (this.parent.multiColumn && this.parent.multiColumn() && this.parent.multiColumn().haveColumns()) {
                return this.parent.multiColumn();
            }
        }));
    }
    get parent() {
        return this._getParent();
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/xrDetailReportBand.js










class DetailReportBand extends BandViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.bands);
        this.resetObservableArray(this.bands);
    }
    initHeight() {
        let oldHeight = 0;
        this._disposables.push(this.height = external_ko_namespaceObject.pureComputed({
            read: () => {
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                    const verticalBand = this.bands().filter(x => x instanceof VerticalBandViewModel)[0];
                    let height = 0;
                    if (verticalBand)
                        height = verticalBand.height();
                    oldHeight = this.bands().filter(x => !(x instanceof VerticalBandViewModel)).reduce((sum, b) => { return sum + b.height(); }, height);
                }
                return oldHeight;
            },
            write: (newHeight) => {
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.checkModelReady)(this.root)) {
                    const deltaHeight = newHeight - this.height.peek(), oldHeight = this.bands()[this.bands().length - 1].height.peek();
                    this.bands()[this.bands().length - 1].height(oldHeight + deltaHeight);
                }
            }
        }));
    }
    createChildsArray(band, serializer) {
        const factory = this.getControlFactory();
        this.bands = (0,external_DevExpress_Analytics_Internal_namespaceObject.deserializeChildArray)(band.Bands, this, (item) => {
            return new (factory.controlsMap[item['@ControlType']].type || BandViewModel)(item, this, serializer);
        });
        const bands = this.bands.peek();
        if (bands) {
            initLevels(bands);
            bands.sort(sortBands);
        }
        if (this.bands().length === 0)
            this.createChild({ '@ControlType': 'DetailBand', '@HeightF': this.height() });
    }
    addChild(control) {
        if (control instanceof BandViewModel && !(control instanceof SubBandViewModel)) {
            addBandToContainer(this, control);
        }
    }
    constructor(band, parent, serializer) {
        super(band, parent, serializer);
        this._disposables.push(this.dataSource.subscribe((newVal) => {
            if (!newVal) {
                this.dataMember(null);
            }
        }));
        const dataMember = external_ko_namespaceObject.pureComputed(() => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.getPath('dataMember'), this.dataMember());
        });
        const disabled = external_ko_namespaceObject.pureComputed(() => !this.dataSource());
        this.filterString = new external_DevExpress_Analytics_Widgets_namespaceObject.FilterStringOptions(this._filterString, dataMember, disabled);
        this._disposables.push(dataMember);
        this._disposables.push(disabled);
        this.filterString.helper.parameters = external_ko_namespaceObject.computed(() => {
            return collectAvailableParameters(this.root['parameters']());
        });
        this._disposables.push(this.filterString.helper.parameters);
    }
}
class DetailReportBandSurface extends BandSurface {
    dispose() {
        super.dispose();
    }
    getChildrenCollection() {
        return this.bandsHolder.bands;
    }
    createUnderCursor() {
        const _underCursor = external_ko_namespaceObject.observable(new external_DevExpress_Analytics_Internal_namespaceObject.HoverInfo());
        this._disposables.push(this.underCursor = external_ko_namespaceObject.pureComputed({
            read: () => {
                _underCursor().isOver = this.bandsHolder.checkUnderCursor();
                return _underCursor();
            },
            write: (val) => { _underCursor(val); }
        }));
    }
    getTotalHeight() {
        return this.bandsHolder.getTotalHeight();
    }
    getHeight() {
        if (this.collapsed()) {
            return bandSurfaceCollapsedHeight;
        }
        else {
            return this.bandsHolder.getHeight();
        }
    }
    getHasOwnRuler() {
        return this.collapsed();
    }
    constructor(band, context) {
        super(band, context, {
            _height: (o) => o.height
        });
        this.templateName = 'dxrd-detailreportband';
        this.selectionTemplate = 'dxrd-detailreportband-selection';
        this.leftMarginTemplate = 'dxrd-detail-report-band-coordinate-grid';
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const isSomeParentCollapsed = this.collapsed() || this.isSomeParentCollapsed();
            this.bandsHolder.bands().forEach((band) => {
                band.isSomeParentCollapsed(isSomeParentCollapsed);
            });
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_reportSnapLinesCollector.js


class ReportSnapLinesCollector extends external_DevExpress_Analytics_Internal_namespaceObject.SnapLinesCollector {
    _getCollection(parent) {
        if (parent['controls'] && parent['controls']().length > 0) {
            return parent['controls']();
        }
        else if (parent['rows']) {
            return parent['rows']();
        }
        else if (parent['cells']) {
            return parent['cells']();
        }
    }
    _enumerateBandCollection(bandsHolder, parentAbsoluteProsition, callback) {
        const collection = bandsHolder.bands();
        for (let i = 0; i < collection.length; i++) {
            const itemRect = collection[i].getUsefulRect();
            const itemAbsoluteRect = this._processBandRtl({
                top: collection[i].absolutePosition.y(),
                bottom: collection[i].absolutePosition.y() + collection[i].height(),
                left: itemRect.left + parentAbsoluteProsition.left,
                right: itemRect.right + parentAbsoluteProsition.left
            });
            if (collection[i] instanceof DetailReportBandSurface) {
                this._enumerateBandCollection(collection[i].bandsHolder, itemAbsoluteRect, callback);
            }
            else {
                callback(collection[i], itemAbsoluteRect);
            }
        }
        if (bandsHolder.verticalBandsContainer && !bandsHolder.verticalBandsContainer.scrollOffset()) {
            bandsHolder.verticalBandsContainer.verticalBands().forEach((band => {
                const absoluteRect = {
                    top: band.absolutePosition.y(),
                    bottom: band.absolutePosition.y() + band._height(),
                    left: band.absolutePosition.x() - band.verticalBandsContainer.scrollOffset(),
                    right: band.absolutePosition.x() + band.rect().width - band.verticalBandsContainer.scrollOffset()
                };
                callback(band, absoluteRect);
            }));
        }
    }
    _processBandRtl(itemAbsoluteRect) {
        if (this._rtl()) {
            itemAbsoluteRect.right = itemAbsoluteRect.left;
            itemAbsoluteRect.left = 0;
        }
        return itemAbsoluteRect;
    }
    _enumerateCollection(parent, parentAbsoluteProsition, callback) {
        if (parent.bandsHolder)
            this._enumerateBandCollection(parent.bandsHolder, parentAbsoluteProsition, callback);
        super._enumerateCollection(parent, parentAbsoluteProsition, callback);
    }
    constructor(_rtl) {
        super();
        this._rtl = _rtl;
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_reportToolboxDragDropHandler.js






class ReportToolboxDragDropHandler extends external_DevExpress_Analytics_Internal_namespaceObject.ToolboxDragDropHandler {
    dispose() {
        this.surface = null;
        this.dragHelperContent = null;
        this.snapHelper = null;
    }
    constructor(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory, onComponentAdded) {
        super(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory);
        this._wholeWideControls = ['XRTableOfContents', 'XRPdfContent'];
        this.onComponentAdded = (e) => { onComponentAdded && onComponentAdded(e); };
    }
    helper(draggable) {
        super.helper(draggable);
        const toolboxItem = draggable;
        if (this._wholeWideControls.indexOf(toolboxItem.type) !== -1) {
            const width = this.surface().pageWidth() - (this.surface().margins.right() + this.surface().margins.left());
            const height = toolboxItem.type === 'XRTableOfContents' ? 46 : 23;
            const size = new external_DevExpress_Analytics_Elements_namespaceObject.Size(width, height);
            this.recalculateSize(size);
            this.dragHelperContent.reset();
            this.dragHelperContent.setContent(new external_DevExpress_Analytics_Elements_namespaceObject.Rectangle(0, 0, width, this._size.height()));
        }
    }
    _processProperty(propertyName, target, callback) {
        if (target instanceof Object && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(target)) {
            !!target[propertyName] && callback(target);
            Object.keys(target).forEach((name) => {
                if (target[name] instanceof Object && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(target[name])) {
                    this._processProperty(propertyName, target[name], callback);
                }
            });
        }
    }
    doStopDrag(ui, draggable) {
        const reportSurface = this.surface();
        const toolboxItem = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, draggable);
        this._processProperty('@Padding', toolboxItem.info, (target) => {
            const model = external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.from(target['@Padding']);
            external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.unitProperties.forEach((name) => {
                model[name](model[name]() * reportSurface.dpi() / 100);
            });
            model._set('dpi', reportSurface.dpi());
            target['@Padding'] = model.toString();
        });
        super.doStopDrag(ui, toolboxItem);
    }
    addControl(control, dropTargetSurface, size) {
        if (control.controlType === 'XRTableOfContents') {
            const dropTargetModel = dropTargetSurface.getControlModel();
            if (!isHeaderOrFooterBandType(dropTargetModel) || !!getExistTableOfContents(dropTargetModel)) {
                const reportSurface = this.surface();
                const reportModel = reportSurface.getControlModel();
                const targetBand = reportModel.getOrCreateBandForToC().band;
                if (!targetBand)
                    return;
                dropTargetSurface = (0,external_DevExpress_Analytics_Internal_namespaceObject.findSurface)(targetBand);
            }
            if (!dropTargetSurface)
                return;
            const band = dropTargetSurface.getControlModel();
            const tocModel = control;
            tocModel.allLevels().forEach((lvl) => {
                lvl.height(recalculateUnit(lvl.height(), band.dpi()));
            });
        }
        super.addControl(control, dropTargetSurface, size);
        const parent = dropTargetSurface.getControlModel();
        dragDropComponentAdded(control, parent);
        this.onComponentAdded({ parent: parent, model: control });
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/dragdrop/_selectionDragDropHandler.js


class SelectionDragDropHandler extends external_DevExpress_Analytics_Internal_namespaceObject.SelectionDragDropHandler {
    _localizationCanDrop(dropTarget, controlModel) {
        const locked = !this._canAddItems() && dropTarget.getControlModel() !== controlModel.parentModel();
        return !locked;
    }
    constructor(_canAddItems, surface, selection, undoEngine, snapHelper, dragHelperContent) {
        super(surface, selection, undoEngine, snapHelper, dragHelperContent);
        this._canAddItems = _canAddItems;
    }
    getLocation(adjustedTarget, item) {
        const location = super.getLocation(adjustedTarget, item);
        if (item instanceof XRSubreportSurface)
            return item.processLocation(location);
        return location;
    }
    canDrop(dropTarget, controlModel, metaData) {
        const canDrop = super.canDrop(dropTarget, controlModel, metaData);
        return canDrop && this._localizationCanDrop(dropTarget, controlModel);
    }
}

;// external "DevExpress.data.DataSource"
const external_DevExpress_data_DataSource_namespaceObject = DevExpress.data.DataSource;
var external_DevExpress_data_DataSource_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_DataSource_namespaceObject);
;// external "DevExpress.ui.dxButtonGroup"
const external_DevExpress_ui_dxButtonGroup_namespaceObject = DevExpress.ui.dxButtonGroup;
var external_DevExpress_ui_dxButtonGroup_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxButtonGroup_namespaceObject);
;// external "DevExpress.ui.dxDataGrid"
const external_DevExpress_ui_dxDataGrid_namespaceObject = DevExpress.ui.dxDataGrid;
var external_DevExpress_ui_dxDataGrid_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxDataGrid_namespaceObject);
;// ./node_modules/devexpress-reporting/designer/internal/errorPanel/_types.js
var ErrorSource;
(function (ErrorSource) {
    ErrorSource[ErrorSource["ReportCreation"] = 0] = "ReportCreation";
    ErrorSource[ErrorSource["ReportLayout"] = 1] = "ReportLayout";
    ErrorSource[ErrorSource["ReportExport"] = 2] = "ReportExport";
    ErrorSource[ErrorSource["ReportScripts"] = 3] = "ReportScripts";
})(ErrorSource || (ErrorSource = {}));
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["Error"] = 0] = "Error";
    ErrorType[ErrorType["Warning"] = 1] = "Warning";
    ErrorType[ErrorType["Information"] = 2] = "Information";
})(ErrorType || (ErrorType = {}));

;// ./node_modules/devexpress-reporting/designer/internal/errorPanel/_errorPanelViewModel.js









class ErrorPanelViewModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    static get allErrorSources() {
        return Object.keys(ErrorSource).filter(key => isNaN(parseFloat(key)));
    }
    static get allErrorTypes() {
        return Object.keys(ErrorType).filter(key => isNaN(parseFloat(key)));
    }
    _createMessage(count, localizationFormat) {
        const formats = localizationFormat.split('|');
        if (count === 1)
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(formats[0], count);
        if (count === 0 && formats[2]) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(formats[2], count);
        }
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(formats[1], count);
    }
    _createAvailableSourcesArray() {
        const dataSource = [];
        if (this._initOptions?.showReportCreationErrorSource)
            dataSource.push({ value: ErrorSource.ReportCreation, displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Creation', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Creation') });
        if (this._initOptions?.showReportLayoutErrorSource)
            dataSource.push({ value: ErrorSource.ReportLayout, displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Layout', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Layout') });
        if (this._initOptions?.showReportScriptsErrorSource)
            dataSource.push({ value: ErrorSource.ReportScripts, displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Scripts', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Scripts') });
        if (this._initOptions?.showReportExportErrorSource)
            dataSource.push({ value: ErrorSource.ReportExport, displayValue: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Export', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Export') });
        return dataSource;
    }
    _expandParentBands(root) {
        while (root) {
            const surface = root.surface;
            if (surface instanceof BandSurface) {
                surface.collapsed(false);
            }
            else if (surface instanceof XRCrossBandSurface) {
                const rect = surface['_unitAbsoluteRect'];
                const expandedBands = [];
                surface.parent.getChildrenCollection()().forEach(band => {
                    if (surface.isThereIntersection(rect, band.absoluteRect())) {
                        band.collapsed(false);
                        expandedBands.push(band);
                    }
                });
                const expandChildBands = (bands) => {
                    bands && bands.forEach(band => {
                        band.collapsed(false);
                        expandChildBands(band.bandsHolder.bands());
                    });
                };
                expandChildBands(expandedBands);
                return;
            }
            root = root.parentModel();
        }
    }
    clear() {
        this._providers = [];
        this._subscriptions.forEach(x => x.dispose());
        this._subscriptions = [];
        this._errorList([]);
    }
    navigateToItem(name) {
        this._onClick && this._onClick();
        const control = this._controlsHelper.getControlByName(name);
        if (!control)
            return;
        if (control['surface']) {
            this._expandParentBands(control);
            this._selection.focused(control['surface']);
            this._controlScrollingTool.scrollToControl(control['surface']);
        }
        else {
            this._editableObject(control);
        }
    }
    getNotificationTemplate() {
        return this._filteredErrorList().length > 0 ? 'dxrd-svg-errorPanel-notification' : 'dxrd-svg-errorPanel-notification_empty';
    }
    getTitleMessage() {
        return [this._errorMessage(), this._warningMessage(), this._informationMessage()].join('\n');
    }
    assignErrors() {
        const errors = this._errorList();
        errors.splice(0);
        for (let i = 0; i < this._providers.length; i++) {
            this._providers[i].errors().forEach(x => {
                x.link = 'https://docs.devexpress.com/XtraReports/403060#' + x.code.toLowerCase();
                x.showLink = this._initOptions?.enableErrorCodeLinks;
            });
            errors.push(...this._providers[i].errors());
        }
        this._errorList.valueHasMutated();
    }
    subscribeProvider(provider) {
        this._providers.push(provider);
        this._subscriptions.push(provider.errors.subscribe((errors) => {
            this.assignErrors();
        }));
        this.assignErrors();
    }
    collectErrors() {
        const undo = this._getUndoEngine();
        const latestChanges = undo && undo.getCurrentChangeSet();
        if (!undo || !latestChanges.equal(this._latestChangeSet())) {
            this._latestChangeSet(latestChanges);
            for (let i = 0; i < this._providers.length; i++) {
                this._providers[i].collectErrors();
            }
        }
    }
    toggleCollapsed() {
        if (this.collapsed())
            this.collectErrors();
        this.collapsed(!this.collapsed());
    }
    createDataGridOptions(undoEngine) {
        const ds = external_ko_namespaceObject.observable(new (external_DevExpress_data_DataSource_default())(this._errorList()));
        this._disposables.push(this._errorList.subscribe((newVal) => {
            ds().dispose();
            ds(new (external_DevExpress_data_DataSource_default())(this._errorList()));
        }));
        this._suppressedErrorCodes(this._initOptions.suppressedErrorCodes || []);
        this._dataGridOptions = {
            dataSource: ds,
            showColumnLines: false,
            showRowLines: true,
            showBorders: false,
            headerFilter: {
                visible: true
            },
            filterValue: this._filterValue,
            noDataText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('No errors', 'ASPxReportsStringId.ReportDesigner_ErrorPanel_NoErrors'),
            columns: [{
                    caption: ' ',
                    width: '30px',
                    dataField: 'errorType',
                    alignment: 'left',
                    allowHeaderFiltering: false,
                    cellTemplate: 'dxrd-errorType-column',
                    dataType: 'number'
                }, {
                    dataField: 'code',
                    caption: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Code', 'PreviewStringId.ReportDesignAnalyzer_GridColumn_Code'),
                    cellTemplate: 'dxrd-code-column',
                    filterType: 'exclude',
                    filterValues: this._suppressedErrorCodes(),
                    dataType: 'string'
                }, {
                    dataField: 'errorSource',
                    visible: false,
                    dataType: 'number'
                }, {
                    dataField: 'description',
                    visible: false,
                    dataType: 'string'
                },
                {
                    dataField: 'message',
                    allowFiltering: false,
                    caption: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Description', 'PreviewStringId.ReportDesignAnalyzer_GridColumn_Description'),
                    dataType: 'string'
                },
                {
                    dataField: 'controlName',
                    allowFiltering: false,
                    caption: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Source', 'PreviewStringId.ReportDesignAnalyzer_GridColumn_Source'),
                    cellTemplate: 'dxrd-source-column',
                    dataType: 'string'
                }],
            searchPanel: {
                visible: true
            },
            masterDetail: {
                enabled: true,
                template: 'detail'
            },
            onOptionChanged: (e) => {
                if (/columns\[[0-9]+\].filterValues/i.test(e.fullName)) {
                    this._suppressedErrorCodes(e.value || []);
                }
            },
            toolbar: {
                items: [
                    {
                        template: 'dxrd-error-source-filter',
                        data: {
                            value: this._errorSource,
                            dataSource: this._createAvailableSourcesArray(),
                            getContainer: external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer
                        },
                        location: 'before'
                    }, {
                        template: 'dxrd-error-type-filter',
                        data: {
                            selectedItemKeys: this._choosenTypes,
                            items: [
                                { template: 'dxrd-error-type-filter-item', text: () => this._errorMessage(), icon: ErrorType.Error },
                                { template: 'dxrd-error-type-filter-item', text: () => this._warningMessage(), icon: ErrorType.Warning },
                                { template: 'dxrd-error-type-filter-item', text: () => this._informationMessage(), icon: ErrorType.Information }
                            ], keyExpr: 'icon', selectionMode: 'multiple', stylingMode: 'outlined'
                        },
                        location: 'before'
                    }, {
                        widget: 'dxButtonWithTemplate',
                        cssClass: 'dxrd-collect-errors-button',
                        options: {
                            icon: 'dxrd-svg-errorPanel-collectErrors',
                            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Collect Errors', 'ASPxReportsStringId.ReportDesigner_Analyzer_CollectErrors'),
                            onClick: () => this.collectErrors(),
                            disabled: this._collectErrorButtonDisabled
                        },
                        location: 'before'
                    }, 'searchPanel'
                ]
            }
        };
    }
    _initDefaultFilter() {
        if (this._initOptions?.enableReportCreationErrorSource && this._initOptions?.showReportCreationErrorSource)
            this._errorSource.push(ErrorSource.ReportCreation);
        if (this._initOptions?.enableReportLayoutErrorSource && this._initOptions?.showReportLayoutErrorSource)
            this._errorSource.push(ErrorSource.ReportLayout);
        if (this._initOptions?.enableReportScriptsErrorSource && this._initOptions?.showReportScriptsErrorSource)
            this._errorSource.push(ErrorSource.ReportScripts);
        if (this._initOptions?.enableReportExportErrorSource && this._initOptions?.showReportExportErrorSource)
            this._errorSource.push(ErrorSource.ReportExport);
        if (this._initOptions?.showErrors)
            this._choosenTypes.push(ErrorType.Error);
        if (this._initOptions?.showWarnings)
            this._choosenTypes.push(ErrorType.Warning);
        if (this._initOptions?.showInformation)
            this._choosenTypes.push(ErrorType.Information);
    }
    _assignFilter() {
        const filter = [];
        const uncheckedTypes = ErrorPanelViewModel.allErrorTypes.map(x => ErrorType[x]).filter(x => this._choosenTypes().indexOf(x) === -1);
        const uncheckedSources = ErrorPanelViewModel.allErrorSources.map(x => ErrorSource[x]).filter(x => this._errorSource().indexOf(x) === -1);
        if (uncheckedTypes.length) {
            filter.push(['errorType', 'noneof', uncheckedTypes]);
        }
        if (uncheckedSources.length) {
            filter.push(['errorSource', 'noneof', uncheckedSources]);
        }
        this._filterValue(filter.reduce((res, val) => {
            if (!res.length)
                res.push(val);
            else
                res.push('and', val);
            return res;
        }, []));
    }
    getIconTemplateName(errorType) {
        return 'dxrd-svg-errorPanel-' + ErrorType[errorType].toLowerCase();
    }
    constructor(options) {
        super();
        this._offset = 20;
        this._height = external_ko_namespaceObject.observable(210);
        this._errorSource = external_ko_namespaceObject.observableArray([]);
        this._choosenTypes = external_ko_namespaceObject.observableArray([]);
        this._filterValue = external_ko_namespaceObject.observable();
        this._getUndoEngine = null;
        this._onClick = () => void 0;
        this._latestChangeSet = external_ko_namespaceObject.observable(external_DevExpress_Analytics_Utils_namespaceObject._LatestChangeSet.Empty());
        this._openErrorPanelIconHeight = 42;
        this.collapsed = external_ko_namespaceObject.observable(true);
        this.position = external_ko_namespaceObject.observable(null);
        this._suppressedErrorCodes = external_ko_namespaceObject.observableArray();
        this._errorList = external_ko_namespaceObject.observableArray([]);
        this._providers = [];
        this._subscriptions = [];
        this.panelTitle = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Design Analyzer', 'ReportStringId.UD_Title_ErrorList');
        this._initOptions = options || {};
        this._editableObject = options.editableObject;
        this._resizableOptions = {
            starting: () => void (0),
            handles: 'n',
            start: (e, element) => {
            },
            stop: () => { },
            resize: (e, element) => {
                const originalHeight = (0,external_DevExpress_Analytics_Internal_namespaceObject.convertFromCssPixelUnits)(element.dataset.originalHeight);
                const sizeDiff = e.pageY - (0,external_DevExpress_Analytics_Internal_namespaceObject.convertFromCssPixelUnits)(element.dataset.originalTopMousePosition);
                this._height(originalHeight - sizeDiff);
            },
            disabled: this.collapsed,
            zoom: 1,
            minimumHeight: external_ko_namespaceObject.computed(() => this.collapsed() ? this._openErrorPanelIconHeight : 210),
            maxHeight: 420
        };
        this._getUndoEngine = () => options.undoEngine && options.undoEngine();
        this._onClick = options.onClick;
        this._disposables.push(this._resizableOptions.minimumHeight);
        this._disposables.push({
            dispose: () => {
                this._getUndoEngine = null;
                this._latestChangeSet(external_DevExpress_Analytics_Utils_namespaceObject._LatestChangeSet.Empty());
            }
        });
        (external_DevExpress_ui_dxDataGrid_default()).length;
        (external_DevExpress_ui_dxButtonGroup_default()).length;
        if (options.position) {
            this._disposables.push(this._position = external_ko_namespaceObject.computed(() => {
                const left = this.collapsed() ? 'auto' : (options.position.left() + this._offset);
                const right = options.position.right() + this._offset;
                return {
                    left: options.rtl ? right : left,
                    right: options.rtl ? left : right,
                    height: (!this.collapsed() ? this._height() : 42),
                };
            }));
        }
        this._disposables.push(this._collectErrorButtonDisabled = external_ko_namespaceObject.computed(() => {
            return options.undoEngine && options.undoEngine() && options.undoEngine().getCurrentChangeSet().equal(this._latestChangeSet());
        }));
        this._selection = options.selection;
        this._controlsHelper = options.controlsHelper;
        this._controlScrollingTool = options.controlScrollingTool;
        this.createDataGridOptions(options.undoEngine);
        this._initDefaultFilter();
        this._assignFilter();
        this._disposables.push(this._errorMessage, this._warningMessage, this._informationMessage);
        this._disposables.push(...([this._errorSource, this._choosenTypes].map(x => x.subscribe(() => this._assignFilter(), undefined, undefined))));
        this._disposables.push(this._filteredErrorList = external_ko_namespaceObject.computed(() => this._errorList().filter(x => {
            return this._errorSource().indexOf(x.errorSource) !== -1 &&
                (this._suppressedErrorCodes() || []).indexOf(x.code) === -1;
        })), this._errorMessage = external_ko_namespaceObject.computed(() => this._createMessage(this._filteredErrorList().filter(x => x.errorType == ErrorType.Error).length, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} Error|{0} Errors', 'PreviewStringId.ReportDesignAnalyzer_Error'))), this._warningMessage = external_ko_namespaceObject.computed(() => this._createMessage(this._filteredErrorList().filter(x => x.errorType == ErrorType.Warning).length, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} Warning|{0} Warnings', 'PreviewStringId.ReportDesignAnalyzer_Warning'))), this._informationMessage = external_ko_namespaceObject.computed(() => this._createMessage(this._filteredErrorList().filter(x => x.errorType == ErrorType.Information).length, (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} Message|{0} Messages', 'PreviewStringId.ReportDesignAnalyzer_Message'))));
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_fieldListController.js



class ItemsInRangeEnumerator {
    constructor(start, end) {
        this._start = start;
        this._end = end;
    }
    _findCommonParent(current, last) {
        return current === last ? current :
            this._findCommonParent(current.parent || current, last.parent || last);
    }
    _selectItemsBetweenShiftSelection(parent) {
        const items = parent.items;
        for (let i = 0; i < items.length; i++) {
            if (this._isSelectedRangeEnded)
                return;
            const item = items[i];
            this._addToSelectedItems(item);
            if (item === this._start || item === this._end) {
                this._isSelectedRangeEnded = this._isInSelectedRage;
                this._isInSelectedRage = !this._isInSelectedRage;
                this._addToSelectedItems(item);
            }
            if (!this._isSelectedRangeEnded && !item.collapsed) {
                this._selectItemsBetweenShiftSelection(item);
            }
        }
    }
    _addToSelectedItems(item) {
        if (this._isInSelectedRage) {
            this._callBack(item);
        }
    }
    enumerate(callBack) {
        this._isInSelectedRage = false;
        this._isSelectedRangeEnded = false;
        this._callBack = callBack;
        this._selectItemsBetweenShiftSelection(this._findCommonParent(this._start.parent, this._end.parent));
    }
}
class FieldListController {
    dispose() {
        this._actionProviders.splice(0);
        this._selectedItems.splice(0);
    }
    constructor(actionProviders = [], fieldListActionWrapper, dragDropHandler, customizeFieldListActions = null) {
        this._selectedItems = external_ko_namespaceObject.observableArray([]);
        this.hasItems = FieldListController.isList;
        this._actionProviders = actionProviders;
        this._fieldListActionWrapper = fieldListActionWrapper;
        this.dragDropHandler = dragDropHandler;
        this._customizeFieldListActions = customizeFieldListActions;
    }
    itemsFilter(item) {
        return item['isCalculated'] === true || item.specifics !== 'none';
    }
    static isList(item) {
        if (!item)
            return false;
        return item['isCalculated'] ? false : item.specifics === 'List' || item.specifics === 'ListSource' || item.isList === true;
    }
    select(item) {
        this.selectedItem && (this.selectedItem.isSelected = false);
        this.selectedItem = item;
        item.isSelected = true;
    }
    canSelect(item) {
        return true;
    }
    getActions(item) {
        let result = [];
        (this._actionProviders || []).forEach(actionsProvider => {
            const actions = actionsProvider.getActions(item);
            if (this._fieldListActionWrapper) {
                this._fieldListActionWrapper(actions);
            }
            result.push.apply(result, actions);
        });
        const getActionPosition = (action) => {
            return action.position === undefined ? 1 : action.position;
        };
        result = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], result.sort((x, y) => getActionPosition(x) - getActionPosition(y)));
        this._customizeFieldListActions && this._customizeFieldListActions(item.data, result);
        return result;
    }
    canMultiSelect(item) {
        const path = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).path;
        const isSelectedItemCanMultiSelect = !this.selectedItem || this.selectedItem === item || this.canMultiSelect(this.selectedItem);
        return path.length !== 0 && isSelectedItemCanMultiSelect;
    }
    multiSelect(item, isShiftPressed = false, isCtrlPressed = false) {
        if (this.selectedItem) {
            this.selectedItem.isSelected = false;
            this.selectedItem.isMultiSelected = true;
        }
        if (isShiftPressed) {
            const lastSelectedItem = this.selectedItem;
            if (!isCtrlPressed) {
                this._selectedItems.peek().forEach(element => element.isMultiSelected = false);
                this._selectedItems([]);
            }
            new ItemsInRangeEnumerator(item, lastSelectedItem).enumerate(element => {
                if (!element.isMultiSelected) {
                    this._selectedItems.push(element);
                    element.isMultiSelected = true;
                }
            });
            if (this._selectedItems.peek()[0] === lastSelectedItem) {
                this._selectedItems.reverse();
            }
        }
        else if (this._selectedItems.peek().indexOf(item) > -1) {
            this._selectedItems.remove(item);
            item.isMultiSelected = false;
        }
        else {
            this._selectedItems.push(item);
            item.isMultiSelected = true;
        }
    }
    isDraggable(item) {
        return true;
    }
    get selectedItem() {
        return this._selectedItems()[this._selectedItems().length - 1];
    }
    set selectedItem(value) {
        this._selectedItems().forEach(item => item.isMultiSelected = false);
        this._selectedItems.splice(0);
        this._selectedItems.push(value);
    }
    selectedItems() {
        return this._selectedItems();
    }
    subscribeOnSelectedItemChange(callback) {
        return this._selectedItems.subscribe(() => callback());
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_renameDataSourceStrategy.js
class RenameDataSourceStrategy {
    constructor(dsHelper, _afterRenameCallBack) {
        this.dsHelper = dsHelper;
        this._afterRenameCallBack = _afterRenameCallBack;
        this._rename = (dataSourceInfo, name) => {
            dataSourceInfo.name = name;
            if (dataSourceInfo.data.name) {
                dataSourceInfo.data.name(name);
            }
            this._afterRenameCallBack && this._afterRenameCallBack();
        };
    }
    validateName(nameCandidate) {
        return nameCandidate && !nameCandidate.match(/(?!\_)[\W]+/);
    }
    validateUnique(nameCandidate, currentName) {
        return nameCandidate && (nameCandidate === currentName || this.dsHelper().usedDataSources().map(dataSource => dataSource.name).indexOf(nameCandidate) === -1);
    }
    tryRename(nameCandidate, currentItemData) {
        const currentDs = this.dsHelper && this.dsHelper().findDataSourceInfo(currentItemData);
        if (!currentDs)
            return false;
        this._rename(currentDs, nameCandidate);
        return true;
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_fieldListDataSourcesHelper.js







const maxNestingLevelUpdate = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(5);
function patchRequest(request, dataSources, state) {
    request.state = state;
    const dataSource = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(dataSources, (ds) => (request.id && ds.id === request.id) || (request.ref && ds.ref === request.ref));
    if (dataSource && dataSource.data) {
        if (dataSource.data instanceof DataFederationDataSource) {
            const serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
            dataSource.data.getSerializableModel().serializer = serializer;
            const serializableFederationDataSourceInfo = dataSource.data.getSerializableModel().getSerializableFederationDataSourceInfo();
            (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(request, serializableFederationDataSourceInfo);
        }
        else
            request.dataSource = JSON.stringify(new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(dataSource.data));
    }
}
class FieldListDataSourcesHelper {
    dispose() {
        this._usedDataSourceSubscription && this._usedDataSourceSubscription.dispose();
        this._usedDataSourceSubscription = null;
        this._clearDataSourceCache();
        this.fieldListDataSources([]);
        this.dataSourceHelper(null);
    }
    _clearDataSourceCache(dataSourceRef) {
        Object.keys(this._fieldListCache).forEach((prop) => {
            if (dataSourceRef === undefined || prop.split('.')[0] === dataSourceRef) {
                delete this._fieldListCache[prop];
                delete this._innerCache[prop];
            }
        });
        dataSourceRef !== undefined && this._cacheIsClearNotificicator.notifySubscribers();
    }
    _subscribeDataSource(dataSource) {
        if (dataSource.data && dataSource.data.base64) {
            this._dataSourceSubscriptions.push(dataSource.data.base64.subscribe((newVal) => {
                this._clearDataSourceCache(dataSource.ref || dataSource.id);
                this.fieldListDataSources.notifySubscribers(this.fieldListDataSources());
                this.dataSourceHelper().usedDataSources.notifySubscribers(this.dataSourceHelper().usedDataSources());
            }));
        }
    }
    _updateFieldListDataSources(usedDataSources, parameters) {
        if (!usedDataSources) {
            this.fieldListDataSources(null);
            return;
        }
        this._dataSourceSubscriptions.forEach(x => x.dispose());
        this._dataSourceSubscriptions = [];
        this._fieldListCache = {};
        this._innerCache = {};
        const dataSourcesArray = [].concat(usedDataSources);
        if (parameters) {
            dataSourcesArray.splice(-1, 0, { ref: Parameter.ParametersRefString, name: 'Parameters', specifics: 'parameters', data: parameters, dataSerializer: null });
        }
        dataSourcesArray.forEach((item) => this._subscribeDataSource(item));
        this.fieldListDataSources(dataSourcesArray);
    }
    constructor() {
        this._fieldListCache = {};
        this._dataSourceSubscriptions = [];
        this._innerCache = {};
        this._usedDataSourceSubscription = null;
        this._cacheIsClearNotificicator = external_ko_namespaceObject.observable();
        this.dataSourceHelper = external_ko_namespaceObject.observable();
        this.fieldListDataSources = external_ko_namespaceObject.observableArray([]);
        this._renameDataSourceStrategy = new RenameDataSourceStrategy(this.dataSourceHelper, () => this.fieldListDataSources.valueHasMutated());
    }
    _wrapRequest(request) {
        const pathParts = request.pathParts.length > 0 ? request.pathParts.map(x => x) : request.fullPath.split('.');
        const currentPathLength = Math.floor((pathParts.length - 1) / maxNestingLevelUpdate());
        const currentRequestPath = pathParts.splice(0, 1 + currentPathLength * maxNestingLevelUpdate());
        return new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(currentRequestPath.join('.'), currentRequestPath);
    }
    _findItems(items, pathParts) {
        if (pathParts.length === 0 || !items)
            return items;
        const itemName = pathParts.splice(0, 1)[0];
        const item = items.filter(x => x.name === itemName)[0];
        if (!item)
            return;
        if (pathParts.length > 0 && item['items']) {
            return this._findItems(item['items'], pathParts);
        }
        else if (pathParts.length === 0) {
            return item['items'];
        }
    }
    _createRelativePath(fullPath, currentPath) {
        if (!currentPath)
            return fullPath;
        if (fullPath != currentPath) {
            return fullPath.replace(currentPath + '.', '');
        }
        return '';
    }
    _updateInnerCache(currentRequest, currentPath, result) {
        result.forEach((item) => {
            const itemPath = [currentPath, item.name].join('.');
            if (item.relationPath) {
                Object.defineProperty(item, 'items', {
                    get: () => this._findItems(this._innerCache[currentRequest.fullPath], this._createRelativePath(item.relationPath, currentRequest.path).split('.'))
                });
            }
            else if (item.items) {
                this._updateInnerCache(currentRequest, itemPath, item.items);
            }
        });
    }
    _getPathPartsFromRequest(request) {
        return request.pathParts.length > 0 ? request.pathParts.map(x => x) : request.fullPath.split('.');
    }
    _getItemsFromCache(currentRequest) {
        let items = this._innerCache[currentRequest.fullPath];
        const closestCachedPath = this._getPathPartsFromRequest(currentRequest);
        while (!items && closestCachedPath.length > 1) {
            closestCachedPath.pop();
            items = this._innerCache[closestCachedPath.join('.')];
        }
        let currentPath = this._getPathPartsFromRequest(currentRequest);
        currentPath = currentPath.splice(closestCachedPath.length, currentPath.length);
        return this._findItems(items, currentPath);
    }
    wrapFieldsCallback(fieldsCallback, state, dataSources = this.fieldListDataSources, useCache = true) {
        const cache = this._fieldListCache;
        return (request) => {
            if (cache && useCache) {
                const items = this._getItemsFromCache(request);
                if (items)
                    return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(items).promise();
                const newRequest = this._wrapRequest(request);
                this._cacheIsClearNotificicator();
                if (cache[newRequest.fullPath]) {
                    const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                    cache[newRequest.fullPath].done(result => {
                        if (!Array.isArray(result))
                            $deferred.resolve(result);
                        else
                            $deferred.resolve(this._getItemsFromCache(request));
                    });
                    return $deferred.promise();
                }
                patchRequest(newRequest, dataSources.peek(), state());
                if (newRequest['dataSource']) {
                    const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                    cache[newRequest.fullPath] = fieldsCallback(newRequest).done((result) => {
                        if (Array.isArray(result)) {
                            this._innerCache[newRequest.fullPath] = result;
                            this._updateInnerCache(newRequest, newRequest.fullPath, result);
                            $deferred.resolve(this._getItemsFromCache(request));
                        }
                        else {
                            $deferred.resolve(result);
                        }
                    });
                    return $deferred.promise();
                }
                cache[newRequest.fullPath] = undefined;
                return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().reject().promise();
            }
            else {
                patchRequest(request, dataSources.peek(), state());
                return request.dataSource ? fieldsCallback(request) : new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().reject().promise();
            }
        };
    }
    _subscribeDataSources(usedDataSources, model) {
        this._usedDataSourceSubscription = usedDataSources.subscribe((args) => {
            const changeSet = args[0];
            const dataSource = changeSet.value;
            if (changeSet.status === 'added') {
                this._subscribeDataSource(dataSource);
                model.components.push(new ComponentsModel(dataSource, this._renameDataSourceStrategy));
                this.fieldListDataSources.splice(changeSet.index, 0, dataSource);
            }
            else {
                if (dataSource.data && dataSource.data.base64) {
                    this._dataSourceSubscriptions[changeSet.index].dispose();
                    this._dataSourceSubscriptions.splice(changeSet.index, 1);
                }
                model.components.splice(changeSet.index, 1);
                this.fieldListDataSources.splice(changeSet.index, 1);
                this._clearDataSourceCache(dataSource.ref || dataSource.id);
            }
        }, null, 'arrayChange');
    }
    updateDataSources(dsHelper, model, parameters) {
        this._subscribeDataSources(dsHelper.usedDataSources, model);
        this._updateFieldListDataSources(dsHelper.usedDataSources(), parameters);
        this.dataSourceHelper(dsHelper);
        model.components([]);
        model.components(dsHelper.usedDataSources()
            .filter(item => item.specifics !== 'none')
            .map(item => new ComponentsModel(item, this._renameDataSourceStrategy)));
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/parameterLayout/_parametersLayoutItemsProvider.js



const arrayName = 'parameterPanelLayoutItems';
class ParametersLayoutItemsProvider extends external_DevExpress_Analytics_Internal_namespaceObject.ObjectExplorerProvider {
    constructor(report, member) {
        super([{ model: report, name: 'Report' }], [arrayName], member, null);
        this._noDragable = false;
        this.getItems = (pathRequest) => {
            const result = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            if (!pathRequest.fullPath) {
                const resultItems = [];
                this.createArrayItem(report.parameterPanelLayoutItems(), resultItems, `Report.${arrayName}`);
                result.resolve(resultItems);
            }
            else {
                result.resolve(this.getObjectPropertiesForPath(report, pathRequest.fullPath, arrayName));
            }
            return result.promise();
        };
        this.getPathByMember = (model) => {
            if (model instanceof ParameterPanelLayoutItem) {
                return this.getPathByMember(model.parentModel()) + `.${arrayName}.` + model.parentModel().parameterPanelLayoutItems().indexOf(model);
            }
            else {
                return 'Report';
            }
        };
        this._noDragable = !report.parameterHelper._parameterEditingSettings.allowReorderParameters;
    }
    createArrayItem(currentTarget, result, propertyName) {
        currentTarget.forEach((element, index) => {
            element = external_ko_namespaceObject.unwrap(element);
            result.push({
                name: propertyName ? propertyName + '.' + index.toString() : index.toString(),
                displayName: external_ko_namespaceObject.unwrap(element['name']),
                specifics: element.className(),
                isList: element[arrayName] && external_ko_namespaceObject.unwrap(element[arrayName]).length > 0,
                data: element,
                dragData: {
                    noDragable: this._noDragable
                }
            });
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/parameterLayout/_parameterLayoutDragDropHandler.js







class ParameterLayoutDragDropHelper extends ObjectExplorerDragDropHelper {
    constructor(_selectedItem, dragHelperContent) {
        super(dragHelperContent);
        this._selectedItem = _selectedItem;
        this._dropBefore = false;
        this._dropInside = false;
    }
    _getDroppableClassName(isInTopOrderArea, isInBottomOrderArea) {
        if (!this.canDrop()) {
            return this.droppableClassName;
        }
        this._dropInside = false;
        const className = this.droppableClassName + ' ' + this.approveClassName;
        if (isInBottomOrderArea) {
            this._dropBefore = true;
            return className + ' ' + this.classDropAfter;
        }
        else if (isInTopOrderArea) {
            this._dropBefore = false;
            return className + ' ' + this.classDropBefore;
        }
        else if (this._targetModel instanceof GroupLayoutItem) {
            this._dropInside = true;
            return className;
        }
        return '';
    }
    getSiblings() {
        return this._draggableModel.parentModel().parameterPanelLayoutItems;
    }
    getNewParentModel() {
        return this._dropInside ? this._targetModel : this._targetModel.parentModel();
    }
    getTargetSiblings() {
        return this.getNewParentModel().parameterPanelLayoutItems;
    }
    reorderSiblings(isDragToBottom = this.isDragToBottom()) {
        const siblings = this.getSiblings();
        const targetSiblings = this.getTargetSiblings();
        if (siblings && targetSiblings) {
            const _siblings = siblings.peek();
            const _targetSiblings = targetSiblings.peek();
            _siblings.splice(siblings.indexOf(this._draggableModel), 1);
            let targetIndex = _targetSiblings.indexOf(this._targetModel);
            targetIndex === -1 && targetIndex++;
            _targetSiblings.splice(targetIndex + (isDragToBottom ? 1 : 0), 0, this._draggableModel);
            this._draggableModel.parentModel(this.getNewParentModel());
            siblings.valueHasMutated();
            siblings !== targetSiblings && targetSiblings.valueHasMutated();
            this._selectedItem(this._draggableModel);
        }
    }
    canDrop() {
        let currentParent = this._targetModel;
        while (currentParent instanceof ParameterPanelLayoutItem) {
            if (this._draggableModel === currentParent)
                return false;
            currentParent = currentParent.parentModel();
        }
        return true;
    }
    stop() {
        super.stop();
        if (!this._target || !this._targetModel || !this.canDrop()) {
            return;
        }
        this.reorderSiblings(this._dropBefore);
    }
}
class ParameterLayoutDragDropHandler extends ObjectExplorerDragDropHandler {
    constructor(selectedItem) {
        super(external_ko_namespaceObject.observable(false), null, null, external_ko_namespaceObject.observable(null), new external_DevExpress_Analytics_Internal_namespaceObject.DragHelperContent(null));
        this.containment = 'parent';
        this.parent = () => external_jQuery_namespaceObject.fn.constructor('.dx-designer-viewport .dxrd-parameters-edit-dialog .dxrd-parameters-content-list');
        this.reportControlsDragDropHelper = new ParameterLayoutDragDropHelper(selectedItem, this.dragHelperContent);
        this.helper = (draggable, event) => {
            this.reportControlsDragDropHelper.helper(draggable, event);
            const templateHtml = (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)(this.dragHelperContent.template);
            const $container = external_jQuery_namespaceObject.fn.constructor(templateHtml).css({ 'display': 'block' });
            $container.prependTo(this.parent());
            external_ko_namespaceObject.applyBindingsToDescendants(this.dragHelperContent, $container[0]);
            return $container;
        };
    }
    startDrag(draggable) {
        this.reportControlsDragDropHelper.start(draggable);
        super.startDrag(draggable);
    }
    doStopDrag(ui, draggable, event) {
        this.reportControlsDragDropHelper.started && this.reportControlsDragDropHelper.clearDroppableClasses();
        this.dragHelperContent.reset();
        this.reportControlsDragDropHelper.stop();
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/parameterLayout/_parametersLayoutTreeListController.js





class ParametersLayoutTreeListController extends external_DevExpress_Analytics_Internal_namespaceObject.ObjectStructureTreeListController {
    _innerSwap(selectedItemModel, swapElement, goUp, currentCollection) {
        currentCollection.remove(selectedItemModel);
        if (goUp) {
            swapElement.parameterPanelLayoutItems.push(selectedItemModel);
        }
        else {
            swapElement.parameterPanelLayoutItems.unshift(selectedItemModel);
        }
        selectedItemModel.parentModel(swapElement);
    }
    _outerSwap(selectedItemModel, goUp, currentCollection) {
        const parentModel = selectedItemModel.parentModel();
        const grandParentModel = parentModel.parentModel();
        currentCollection.remove(selectedItemModel);
        currentCollection = grandParentModel.parameterPanelLayoutItems;
        const index = currentCollection().indexOf(parentModel) + (goUp ? 0 : 1);
        currentCollection.splice(index, 0, selectedItemModel);
        selectedItemModel.parentModel(grandParentModel);
    }
    _siblingsSwap(currentCollection, index, offset) {
        const _collection = external_ko_namespaceObject.unwrap(currentCollection);
        [_collection[index + offset], _collection[index]] = [_collection[index], _collection[index + offset]];
        currentCollection.valueHasMutated();
    }
    _checkIndex(index, goUp, parentModel) {
        return goUp ? index > 0 : parentModel.parameterPanelLayoutItems().length - 1 > index;
    }
    constructor(_report, _selectedItemModel, _parameterEditingSettings) {
        super(undefined, undefined);
        this._report = _report;
        this._selectedItemModel = _selectedItemModel;
        this._parameterEditingSettings = _parameterEditingSettings;
        this.getActions = (item) => {
            const model = item && item.data && item.data['data'];
            const imageTemplateName = model instanceof GroupLayoutItem ? 'dxrd-svg-actions-ungroup' : 'dxrd-svg-operations-recycle_bin';
            const imageClassName = model instanceof GroupLayoutItem ? 'dxrd-image-ungroup' : 'dxrd-image-recycle-bin';
            if (model) {
                if (model instanceof ParameterLayoutItem) {
                    if (!this._parameterEditingSettings.allowEditParameterCollection || !model.canRemove) {
                        return [];
                    }
                }
                else if (model instanceof GroupLayoutItem && (!this._parameterEditingSettings.allowEditParameterGroups || !model.canRemove)) {
                    return [];
                }
                else if (model instanceof SeparatorLayoutItem && (!this._parameterEditingSettings.allowEditParameterSeparators || !model.canRemove)) {
                    return [];
                }
            }
            const actions = [];
            const deleteAction = {
                text: 'Delete',
                displayText: () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Delete', 'AnalyticsCoreStringId.Cmd_Delete'),
                imageClassName: imageClassName,
                imageTemplateName: imageTemplateName,
                clickAction: (treeListItem) => this.delete(treeListItem.data['data']),
            };
            actions.push(deleteAction);
            return actions;
        };
        this._disposables.push(this.dragDropHandler = new ParameterLayoutDragDropHandler(_selectedItemModel));
    }
    addItem(item) {
        let selectedItemModel = this._selectedItemModel();
        let root = this._report;
        if (selectedItemModel) {
            root = selectedItemModel instanceof GroupLayoutItem ? selectedItemModel : (selectedItemModel.parentModel() || selectedItemModel);
        }
        else {
            selectedItemModel = root.parameterPanelLayoutItems()[0];
        }
        root.parameterPanelLayoutItems.splice(root.parameterPanelLayoutItems().indexOf(selectedItemModel) + 1, 0, item);
        item.parentModel(root);
        this._selectedItemModel(item);
    }
    move(goUp = true) {
        const offset = goUp ? -1 : 1;
        const selectedItemModel = this._selectedItemModel();
        if (!selectedItemModel)
            return;
        const parentModel = selectedItemModel.parentModel();
        const collection = parentModel.parameterPanelLayoutItems;
        const index = collection().indexOf(selectedItemModel);
        if (this._checkIndex(index, goUp, parentModel)) {
            const swapElement = collection()[index + offset];
            if (swapElement instanceof GroupLayoutItem) {
                this._innerSwap(selectedItemModel, swapElement, goUp, collection);
            }
            else {
                this._siblingsSwap(collection, index, offset);
            }
        }
        else if (parentModel instanceof GroupLayoutItem) {
            this._outerSwap(selectedItemModel, goUp, collection);
        }
        this._selectedItemModel.valueHasMutated();
    }
    delete(item = this._selectedItemModel()) {
        if (!item)
            return;
        const isSelectedItem = item === this._selectedItemModel();
        const parentModel = item.parentModel();
        const collection = parentModel.parameterPanelLayoutItems.peek();
        const index = collection.indexOf(item);
        if (item instanceof GroupLayoutItem) {
            const childItems = item.parameterPanelLayoutItems();
            childItems.forEach(item => item.parentModel(parentModel));
            collection.splice(index, 0, ...childItems);
        }
        item.delete();
        if (item instanceof ParameterLayoutItem) {
            this._report.parameterHelper.parameters.remove(item.parameter());
        }
        if (isSelectedItem) {
            const nextItem = collection[index === collection.length ? index - 1 : index];
            if (nextItem) {
                this._selectedItemModel(nextItem);
            }
            else if (!(parentModel instanceof ReportViewModel)) {
                this._selectedItemModel(parentModel);
            }
            else {
                this._selectedItemModel(null);
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/dataObjects/parameters/parameterExpressionAddon.js


class ParameterExpressionAddOn extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(_editor, _parameter) {
        super();
        this._editor = _editor;
        this._parameter = _parameter;
        this.imageTemplateName = 'dx-objectdatasource-expression';
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            if (this._parameter()) {
                const wrappedExpression = this._editor.value.peek();
                const expressionValue = wrappedExpression && wrappedExpression.value && wrappedExpression.value.peek();
                this._parameter().propertyExpressionMapper.getExpressionProperty(this._editor.name).showExpression(!!expressionValue);
            }
        }));
        this._disposables.push(this.isExpression = external_ko_namespaceObject.pureComputed({
            read: () => {
                if (this._parameter()) {
                    return this._parameter().propertyExpressionMapper.getExpressionProperty(this._editor.name).showExpression();
                }
            },
            write: (value) => this._parameter() && this._parameter().propertyExpressionMapper.getExpressionProperty(this._editor.name).showExpression(value)
        }));
        this._disposables.push(this.disabled = external_ko_namespaceObject.pureComputed({
            read: () => external_ko_namespaceObject.unwrap(_editor.disabled),
        }));
    }
    switchEditors() {
        this.isExpression(!this.isExpression());
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/dialogs/parametersDialogs.js








class SettingsAreaModel {
    getInfo() {
        return this._parameter.getInfo().reduce((currentInfo, x) => {
            if (x.propertyName === 'valueSourceSettingsType') {
                const info = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, x);
                info.editor = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox');
                currentInfo.push(info);
            }
            else if (x.propertyName === valueSourceSettingsSerializationInfo.propertyName) {
                const info = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, x);
                info.editor = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('inplaceObjectEditor');
                currentInfo.push(info);
            }
            return currentInfo;
        }, []);
    }
    constructor(_parameter) {
        this._parameter = _parameter;
        this.valueSourceSettingsType = this._parameter.valueSourceSettingsType;
        this.valueSourceSettings = this._parameter.valueSourceSettings;
    }
    isPropertyVisible(propertyName) {
        if (propertyName === 'valueSourceSettings')
            return this.valueSourceSettingsType() !== 'None';
        return true;
    }
}
class ParametersDialogBase extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.selectItem(null);
        this.removeProperties();
    }
    onSubmit() { }
    get undoEngine() {
        if (!this._undoEngine) {
            this._undoEngine = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this._currentReport);
        }
        return this._undoEngine;
    }
    _getParameterFromLayoutItem(layoutItem) {
        return layoutItem instanceof ParameterLayoutItem ? layoutItem.parameter() : null;
    }
    _createParameter(parameters = this._currentReport.parameters()) {
        const newName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(parameters, 'parameter'), newParameter = new Parameter({ '@Name': newName, '@Description': 'P' + newName.slice(1) }, this._currentReport);
        newParameter._isEditing(true);
        newParameter._showLayoutProperties(true);
        return new ParameterLayoutItem({}, this._currentReport, null, newParameter);
    }
    _createButton(text, action, type = 'normal') {
        return {
            toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                text: text, type: type, stylingMode: 'contained', onClick: action
            }
        };
    }
    constructor(_currentReport) {
        super();
        this._currentReport = _currentReport;
        this._undoEngine = null;
        this._isSubmited = false;
        this.buttons = [
            this._createButton((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('OK', external_DevExpress_Analytics_Internal_namespaceObject.StringId.DataAccessBtnOK), () => this.submit(), 'default'),
            this._createButton((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', external_DevExpress_Analytics_Internal_namespaceObject.StringId.DataAccessBtnCancel), () => this.visible(false))
        ];
        this._editableObject = external_ko_namespaceObject.observable(null);
        this._selectedItem = external_ko_namespaceObject.observable(null);
        this._selectedParameter = external_ko_namespaceObject.observable(null);
        this._selectedParameterSettings = external_ko_namespaceObject.observable(null);
        this.visible = external_ko_namespaceObject.observable(false);
        this.container = (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(element);
        this._disposables.push(this._propertiesGrid = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(this._editableObject), this._settingsGrid = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(this._selectedParameterSettings), this.visible.subscribe((newVal) => !newVal && this.close()), this._selectedItem.subscribe((item) => {
            const parameter = item && this._getParameterFromLayoutItem(item);
            if (parameter) {
                this._editableObject(parameter);
                this._selectedParameterSettings(new SettingsAreaModel(parameter));
            }
            else {
                this._editableObject(item);
                this._selectedParameterSettings(null);
            }
            this._selectedParameter(parameter);
        }));
        this._propertiesGrid.createEditorAddOn = (_editor) => {
            const editor = (0,external_DevExpress_Analytics_Widgets_namespaceObject.unwrapEditor)(_editor);
            if (this._selectedParameter() && this._selectedParameter().propertyExpressionMapper.getExpressionProperty(editor.name) &&
                editor.name.toLowerCase().indexOf('value') === -1) {
                const addon = new ParameterExpressionAddOn(editor, this._selectedParameter);
                return {
                    data: addon,
                    templateName: 'dx-wizard-menu-box-editorswitch'
                };
            }
        };
    }
    selectItem(layoutItem) {
        const previousParameter = this._selectedParameter();
        const parameter = this._getParameterFromLayoutItem(layoutItem);
        if (parameter && previousParameter === parameter)
            return;
        this._selectedItem(layoutItem);
    }
    show(parameter) {
        this.undoEngine.start();
        this._isSubmited = false;
        this._currentReport.parameterHelper.startEditing();
        this._onStart(this._currentReport.parameterHelper.getParameterLayoutItem(parameter));
        this.visible(true);
    }
    _onStart(layoutItem) {
        this.selectItem(layoutItem);
        this._selectedItem.valueHasMutated();
    }
    close() {
        const cancel = !this._isSubmited && this.undoEngine._hasSessionChanges();
        this._currentReport.parameterHelper.endEditing();
        this.undoEngine.end();
        cancel && this.undoEngine.undo(true);
        this.selectItem(null);
    }
    submit() {
        this._isSubmited = true;
        this.onSubmit();
        this.visible(false);
    }
}
class AddParameterDialog extends ParametersDialogBase {
    constructor() {
        super(...arguments);
        this.popupCss = 'dxrd-parameters-add-dialog';
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add Parameter', 'ASPxReportsStringId.ReportDesigner_ParametersDialog_AddParameter');
        this.width = 900;
        this.height = 632;
        this.contentTemplate = 'dxrd-parameter-edit';
    }
    onSubmit() {
        this._currentReport.parameterPanelLayoutItems.push(this._selectedItem());
        this._currentReport.parameters.push(this._selectedParameter());
    }
    _onStart(parameter = this._createParameter()) {
        super._onStart(parameter);
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/dialogs/editParametersDialog.js






class EditParametersDialog extends ParametersDialogBase {
    dispose() {
        super.dispose();
        this.fieldListModel = null;
    }
    constructor(report) {
        super(report);
        this.buttonMap = {
            'addGroup': { text: 'Add Group', localizationId: 'ReportStringId.ParameterCollectionEditorForm_AddGroup' },
            'addParameter': { text: 'Add Parameter', localizationId: 'ReportStringId.ParameterCollectionEditorForm_AddParameter' },
            'addSeparator': { text: 'Add Separator', localizationId: 'ReportStringId.ParameterCollectionEditorForm_AddSeparator' },
            'down': { text: 'Move Down', localizationId: 'AnalyticsCoreStringId.Cmd_MoveDown' },
            'up': { text: 'Move Up', localizationId: 'AnalyticsCoreStringId.Cmd_MoveUp' }
        };
        this.addButtons = [];
        this.moveButtons = [];
        this.width = 'auto';
        this.height = 726;
        this.popupCss = 'dxrd-parameters-edit-dialog';
        this.title = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Edit Parameters', 'ASPxReportsStringId.ReportDesigner_ParametersDialog_EditParameters');
        this.contentEmptyAreaPlaceHolder = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Add items to configure report parameters and parameter panel layout', 'ReportStringId.ParameterCollectionEditorForm_EmptyViewPlaceHolder');
        this.contentNoPropertiesPlaceHolder = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('This item has no configurable properties', 'ReportStringId.ParameterCollectionEditorForm_SeparatorViewPlaceHolder');
        this.contentTemplate = 'dxrd-parameters-content';
        this.selectedPath = external_ko_namespaceObject.observable('');
        this._disposables.push(this.contentVisible = external_ko_namespaceObject.computed(() => {
            return this._currentReport.parameterPanelLayoutItems().length > 0 && !!this._selectedItem();
        }), this.hasNoEditableProperties = external_ko_namespaceObject.pureComputed(() => {
            return this._selectedItem() && this._selectedItem() instanceof SeparatorLayoutItem;
        }));
        const _parameterEditingSettings = report.parameterHelper._parameterEditingSettings;
        this._disposables.push(this.itemsProvider = new ParametersLayoutItemsProvider(this._currentReport, this._selectedItem));
        this._disposables.push(this.treeListController = new ParametersLayoutTreeListController(this._currentReport, this._selectedItem, _parameterEditingSettings));
        this.fieldListModel = {
            itemsProvider: this.itemsProvider,
            treeListController: this.treeListController,
            selectedPath: this.itemsProvider.selectedPath,
            expandRootItems: true,
            onItemsChanged: (items) => {
                items.forEach(item => {
                    item.parent.collapsed = false;
                });
            }
        };
        this.addButtons.push({
            onClick: () => this.addParameter(),
            icon: 'dxrd-svg-actions-add_parameter',
            iconClass: 'dx-image-add-parameter',
            name: 'addParameter',
            visible: _parameterEditingSettings.allowEditParameterCollection,
            title: this.getDisplayTextButton('addParameter')
        }, {
            onClick: () => this.addGroup(),
            icon: 'dxrd-svg-actions-add_group',
            iconClass: 'dx-image-add-group',
            name: 'addGroup',
            visible: _parameterEditingSettings.allowEditParameterGroups,
            title: this.getDisplayTextButton('addGroup')
        }, {
            onClick: () => this.addSeparator(),
            icon: 'dxrd-svg-actions-add_separator',
            iconClass: 'dx-image-add-separator',
            name: 'addSeparator',
            title: this.getDisplayTextButton('addSeparator'),
            visible: _parameterEditingSettings.allowEditParameterSeparators
        });
        this.moveButtons.push({
            onClick: () => this.up(),
            icon: 'dxrd-svg-operations-moveup',
            iconClass: 'dx-image-moveup',
            name: 'up',
            title: this.getDisplayTextButton('up'),
            visible: _parameterEditingSettings.allowReorderParameters
        }, {
            onClick: () => this.down(),
            icon: 'dxrd-svg-operations-movedown',
            iconClass: 'dx-image-movedown',
            name: 'down',
            title: this.getDisplayTextButton('down'),
            visible: _parameterEditingSettings.allowReorderParameters,
        });
    }
    getDisplayTextButton(key) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(this.buttonMap[key].text, this.buttonMap[key].localizationId);
    }
    up() {
        this.treeListController.move(true);
    }
    down() {
        this.treeListController.move(false);
    }
    addGroup() {
        this.treeListController.addItem(new GroupLayoutItem({}, this._currentReport, null));
    }
    addSeparator() {
        this.treeListController.addItem(new SeparatorLayoutItem({}, this._currentReport, null));
    }
    addParameter() {
        const parameterItem = this._createParameter();
        this.treeListController.addItem(parameterItem);
        this._currentReport.parameters.push(parameterItem.parameter());
    }
    isDisabledButton(buttonName) {
        if (buttonName === 'up' || buttonName === 'down')
            return !this.contentVisible();
        return false;
    }
    onSubmit() { }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_parametersViewModel.js





class ParametersViewModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(report) {
        super();
        this._parameterEditingSettings = report.parameterHelper._parameterEditingSettings;
        this.parameters = report.parameters;
        this.remove = (parameter) => {
            this.parameters.splice(this.parameters.indexOf(parameter), 1);
            report.parameterHelper.removeParameterModel(parameter);
        };
        this.add = () => {
            this._addParametersDialog.show();
        };
        this.edit = (parameter) => {
            this._editParametersDialog.show(parameter);
        };
        this._disposables.push(this._addParametersDialog = new AddParameterDialog(report), this._editParametersDialog = new EditParametersDialog(report));
        this.addAction = {
            clickAction: () => {
                return this.add();
            },
            imageClassName: 'dxrd-image-add',
            imageTemplateName: 'dxrd-svg-operations-add',
            text: 'Add parameter',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add parameter', 'AnalyticsCoreStringId.FieldListActions_AddParameter'),
        };
        this.removeAction = {
            clickAction: (item) => {
                this.remove(item.data);
            },
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: 'Remove parameter',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove parameter', 'ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveParameter'),
        };
        this.editAction = {
            clickAction: (item) => {
                if (item.data instanceof Parameter) {
                    this.edit(item.data);
                }
                else if (item.hasItems) {
                    this.edit(item.items[0].data);
                }
                else {
                    this.edit(undefined);
                }
            },
            imageClassName: 'dxrd-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: 'Edit parameter',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Edit parameter', 'ASPxReportsStringId.ReportDesigner_FieldListActions_EditParameter'),
            canAddItems: true
        };
    }
    getActions(context) {
        const result = [];
        if (context.path.indexOf(Parameter.ParametersRefString) === 0) {
            if (context.pathParts.length === 1) {
                result.push(this.editAction);
                if (this._parameterEditingSettings.allowEditParameterCollection) {
                    result.push(this.addAction);
                }
            }
            else if (context.pathParts.length === 2) {
                result.push(this.editAction);
                if (!context.data['canRemove']) {
                    return result;
                }
                if (this._parameterEditingSettings.allowEditParameterCollection) {
                    result.push(this.removeAction);
                }
            }
        }
        return result;
    }
    beforeItemsFilled(request, items) {
        if (request.ref !== Parameter.ParametersRefString)
            return false;
        items.push.apply(items, request.fullPath === Parameter.ParametersRefString ? this.parameters.slice(0) : []);
        this.parameters().forEach(parameter => {
            if (parameter.isList && parameter.parameterName() === request.path) {
                items.push.apply(items, parameter.getRangeParameters());
            }
        });
        return true;
    }
    afterItemsFilled(request, items) {
        if (!request.fullPath) {
            const parameters = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(items, item => item.specifics === 'parameters');
            if (parameters)
                parameters.displayName = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Parameters', 'DevExpress.XtraReports.UI.XtraReport.Parameters');
            const noneDataSource = !request.fullPath && (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(items, item => item.specifics === 'none');
            if (noneDataSource)
                noneDataSource.displayName = (0,external_DevExpress_Analytics_Internal_namespaceObject.localizeNoneString)('none');
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_treelistItem.js
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class ReportDesignerTreelistItem extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.TreeListItemViewModel {
    _isDisabled() {
        return this._fieldListItemFactory.renameInProgress && !this.isSelected;
    }
    _rename(val) {
        this.data['rename'](val);
        this.renameMode = false;
    }
    _getCssRules() {
        return {
            'dx-treelist-item-disabled': this.disabled,
            ...super._getCssRules()
        };
    }
    constructor(options, path = [], onItemsVisibilityChanged = () => void (0), rtl = false, resolver = new external_DevExpress_Analytics_Internal_namespaceObject.CodeResolver(), _fieldListItemFactory) {
        super(options, path, onItemsVisibilityChanged, rtl, resolver);
        this.resolver = resolver;
        this._fieldListItemFactory = _fieldListItemFactory;
        this._createValidatorOptions = () => ({
            validationRules: external_DevExpress_Analytics_Internal_namespaceObject.nameValidationRules,
        });
        this._onRenameDisposeFunc = null;
        this._createRenameEditorOptions = () => ({
            onFocusOut: (event) => {
                if (event.component.option('isValid') === true)
                    this._rename(event.component.option('value'));
                else
                    setTimeout(() => {
                        event.component.focus();
                    });
            },
            onInitialized: (event) => {
                setTimeout(() => {
                    event.component.focus();
                    const element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$unwrap)(event.component.element());
                    element?.querySelector('input')?.select();
                });
            },
            onKeyUp: (event) => {
                if (event.event.key.toLowerCase() === 'escape') {
                    this.renameMode = false;
                }
            },
            onEnterKey: (event) => {
                if (event.component.option('isValid') === true)
                    this._rename(event.component.option('value'));
                else
                    setTimeout(() => {
                        event.component.focus();
                    });
            },
            text: this.text
        });
        this.templates.actionsContainer = 'dx-treelist-action-container-with-rename';
        this.templates.itemTextContent = 'dx-treelist-item-text-content-with-rename';
        this._onRenameDisposeFunc = this._fieldListItemFactory.events.on('renameInProgressChanged', (args) => {
            this.disabled = this._isDisabled();
        });
    }
    onPropertyChanged(args) {
        super.onPropertyChanged(args);
        if (args.propertyName === 'renameMode') {
            this.toggleSelected(null, null);
            this._fieldListItemFactory.renameInProgress = this.renameMode;
        }
        else if (args.propertyName === 'isSelected') {
            this.disabled = this._isDisabled();
        }
    }
    updateViewModel(args) {
        super.updateViewModel(args);
        const viewModel = this.getViewModel();
        viewModel.inRenameMode = this.renameMode;
        viewModel.disabled = this._isDisabled();
        if (args.propertyName === 'disabled') {
            viewModel.cssRules = this._getCssRules();
        }
    }
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('setRenameMode', (value) => this.renameMode = value)
            .generateProperty('disabled', this.disabled)
            .generateProperty('inRenameMode', this.renameMode)
            .generateProperty('createValidatorOptions', () => this._createValidatorOptions())
            .generateProperty('createRenameEditorOptions', () => this._createRenameEditorOptions())
            .getViewModel();
    }
    dispose() {
        super.dispose();
        this._onRenameDisposeFunc();
    }
}
__decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportDesignerTreelistItem.prototype, "renameMode", void 0);
__decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], ReportDesignerTreelistItem.prototype, "disabled", void 0);

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_treelistFactory.js
var _treelistFactory_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class FieldListItemFactory extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.KoTreeListItemFactory {
    createItem(options, path, onItemsVisibilityChanged, rtl, resolver) {
        return new ReportDesignerTreelistItem((0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.wrapTreeListOptionsWithKo)(options), path, onItemsVisibilityChanged, rtl, resolver, this);
    }
}
_treelistFactory_decorate([
    (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.mutable)(false)
], FieldListItemFactory.prototype, "renameInProgress", void 0);

;// ./node_modules/devexpress-reporting/designer/internal/reportExplorer/_reportExplorer.js













class ReportExplorerModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    static getPathByMember(model) {
        if (model.parentModel && model.parentModel()) {
            if (model instanceof BandViewModel) {
                return ReportExplorerModel.getPathByMember(model.parentModel()) + '.bands.' + model.parentModel().bands().indexOf(model);
            }
            else if (model instanceof XRCrossBandControlViewModel) {
                return 'Crossband Controls.Crossband Controls.' + model.parentModel().crossBandControls().indexOf(model);
            }
            else if (model instanceof XRTableCellViewModel) {
                return ReportExplorerModel.getPathByMember(model.parentModel()) + '.cells.' + model.parentModel().cells().indexOf(model);
            }
            else if (model instanceof XRTableRowViewModel) {
                return ReportExplorerModel.getPathByMember(model.parentModel()) + '.rows.' + model.parentModel().rows().indexOf(model);
            }
            else if (model instanceof XRReportElementViewModel) {
                return ReportExplorerModel.getPathByMember(model.parentModel()) + '.controls.' + model.parentModel().controls().indexOf(model);
            }
        }
        else if (model instanceof ReportViewModel) {
            return 'Report';
        }
        return null;
    }
    _createActionsForOneElement(clickHandler, selection, editableObject, reportModel, item) {
        const element = item.data && item.data.data;
        let isEditDeny = false;
        let isDeleteDeny = element && ((element.getMetaData && element.getMetaData().isDeleteDeny) || false);
        const isLocked = element && ((element.lockedInUserDesigner && element.lockedInUserDesigner()) || false);
        if (element && element instanceof ComponentsModel) {
            isEditDeny = !(this._dataSourceSettings?.allowEditDataSource ?? true);
            isDeleteDeny = !(this._dataSourceSettings?.allowRemoveDataSource ?? true) || isDeleteDeny || isLocked;
        }
        const actions = [];
        if (!isEditDeny)
            actions.push({
                text: 'Properties',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Properties', 'AnalyticsCoreStringId.Cmd_Properties'),
                imageClassName: 'dx-image-edit',
                imageTemplateName: 'dxrd-svg-operations-edit',
                clickAction: (treeListItemViewModel) => {
                    clickHandler(treeListItemViewModel.data['data']);
                }
            });
        if (!isDeleteDeny && !isLocked) {
            actions.push({
                text: 'Delete',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Delete', 'AnalyticsCoreStringId.Cmd_Delete'),
                imageClassName: 'dxrd-image-recycle-bin',
                imageTemplateName: 'dxrd-svg-operations-recycle_bin',
                clickAction: (treeListItemViewModel) => {
                    const selectedObject = treeListItemViewModel?.data['data'];
                    if (selectedObject instanceof StyleModel) {
                        reportModel().styles.remove(selectedObject);
                    }
                    else if (selectedObject instanceof FormattingRule) {
                        reportModel().formattingRuleSheet.remove(selectedObject);
                    }
                    else if (selectedObject instanceof ComponentsModel) {
                        const dsHelper = reportModel().dsHelperProvider();
                        const removedDs = dsHelper.findDataSourceInfo(selectedObject.data);
                        removedDs && dsHelper.removeDataSource(removedDs);
                    }
                    else {
                        (0,external_DevExpress_Analytics_Internal_namespaceObject.deleteSelection)(selection, selectedObject);
                    }
                }
            });
        }
        return actions;
    }
    _createActionsForArray(item, reportModel) {
        if (item.data.name === 'Styles' || item.data.name === 'Formatting Rules') {
            return [{
                    text: 'Add New ' + (item.data.name === 'Styles' ? 'Style' : 'Formatting Rule'),
                    imageClassName: 'dx-image-add',
                    imageTemplateName: 'dxrd-svg-operations-add',
                    clickAction: () => {
                        const report = reportModel();
                        if (item.data.name === 'Styles') {
                            const newStyleName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(report.styles(), 'xrControlStyle');
                            report.styles.push(new StyleModel({ '@Name': newStyleName }, report));
                        }
                        else {
                            report.formattingRuleSheet.push(FormattingRule.createNew(report));
                        }
                    }
                }];
        }
        return [];
    }
    _getPathNonControl(model, rootName, arrayName, editableObject, reportModel) {
        const array = reportModel() && reportModel()[arrayName]();
        const index = array && array.indexOf(model) || 0;
        if (index < 0) {
            editableObject(array[0] || reportModel());
            return array.length > 0 ? [rootName, rootName, 0].join('.') : 'Report';
        }
        return [rootName, rootName, index].join('.');
    }
    constructor(reportModel, editableObject, clickHandler, dragDropHandler, selection, _dataSourceSettings) {
        super();
        this._dataSourceSettings = _dataSourceSettings;
        this._disposables.push(this.itemsProvider = new external_DevExpress_Analytics_Internal_namespaceObject.ObjectExplorerProvider([
            { model: reportModel, name: 'Report', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report', 'ASPxReportsStringId.DocumentViewer_RibbonReportGroupText'), className: 'master_report', data: reportModel, hasContextMenu: true },
            { model: external_ko_namespaceObject.pureComputed(() => { return reportModel() && reportModel().styles(); }), name: 'Styles', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Styles', 'DevExpress.XtraReports.UI.XRPivotGrid.Styles'), className: 'styles' },
            { model: external_ko_namespaceObject.pureComputed(() => { return reportModel() && reportModel().formattingRuleSheet(); }), name: 'Formatting Rules', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Formatting Rules', 'DevExpress.XtraReports.UI.XRControl.FormattingRules'), className: 'formattingrules' },
            { model: external_ko_namespaceObject.pureComputed(() => { return reportModel() && reportModel().crossBandControls(); }), name: 'Crossband Controls', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cross-Band Controls', 'ASPxReportsStringId.ReportDesigner_CrossBandControls'), className: 'xrcrossbandbox', hasContextMenu: true },
            { model: external_ko_namespaceObject.pureComputed(() => { return reportModel() && reportModel().components(); }), name: 'Components', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Data Sources', 'ASPxReportsStringId.ReportDesigner_DataSources'), className: 'components' }
        ], ['bands', 'controls', 'rows', 'cells'], editableObject, (model) => {
            let path = ReportExplorerModel.getPathByMember(model);
            if (!path) {
                if (model === (reportModel() && reportModel().styles())) {
                    path = 'Styles';
                }
                else if (model === (reportModel() && reportModel().formattingRuleSheet())) {
                    path = 'Formatting Rules';
                }
                else if (model === (reportModel() && reportModel().components())) {
                    path = 'Components';
                }
                else if (model instanceof StyleModel) {
                    path = this._getPathNonControl(model, 'Styles', 'styles', editableObject, reportModel);
                }
                else if (model instanceof FormattingRule) {
                    path = this._getPathNonControl(model, 'Formatting Rules', 'formattingRuleSheet', editableObject, reportModel);
                }
                else if (model instanceof ComponentsModel) {
                    path = this._getPathNonControl(model, 'Components', 'components', editableObject, reportModel);
                }
                else if (model === (reportModel() && reportModel().crossBandControls())) {
                    path = 'Crossband Controls';
                }
            }
            return path;
        }));
        const exprPropertyNames = ['bands', 'controls', 'rows', 'cells', 'Report', 'Styles', 'Crossband Controls', 'Components'];
        const bindingPropertyNames = [].concat(exprPropertyNames, 'Formatting Rules');
        this._disposables.push(this.treeListController = new external_DevExpress_Analytics_Internal_namespaceObject.ObjectStructureTreeListController(exprPropertyNames));
        this.treeListController.itemsFilter = (item) => {
            const realPropertyName = item.name.split('.')[0];
            const propertyNames = reportModel() && reportModel()._dataBindingMode() !== _dataBindingMode_DataBindingMode.Bindings ? exprPropertyNames : bindingPropertyNames;
            return propertyNames ? propertyNames.indexOf(realPropertyName) !== -1 || (0,external_DevExpress_Analytics_Internal_namespaceObject.isNumeric)(realPropertyName) : true;
        };
        this.treeListController.getActions = (item) => {
            if (item.data && item.data.name !== 'Crossband Controls' && item.data.name !== 'Components') {
                if (item.data.name !== 'Styles' && item.data.name !== 'Formatting Rules') {
                    return this._createActionsForOneElement(clickHandler, selection, editableObject, reportModel, item);
                }
                else {
                    return this._createActionsForArray(item, reportModel);
                }
            }
        };
        this.treeListController.dragDropHandler = dragDropHandler;
    }
}

;// ./node_modules/devexpress-reporting/designer/services/_reportScriptService.js


class ReportScriptService {
    static validateScripts(report) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'validateScripts', JSON.stringify({
            report: JSON.stringify({
                'XtraReportsLayoutSerializer': report.serialize()
            })
        }));
    }
    static getCompletions(editor, session, pos, prefix, callback, report, editorInstance, guid) {
        if (guid) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getCompletions', JSON.stringify({
                Line: pos.row,
                Column: pos.column,
                Guid: guid,
                Script: editorInstance.getValue()
            }));
        }
        else {
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve().promise();
        }
    }
    static setCodeDom(key, reportLayout) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'setReportLayout', JSON.stringify({
            ReportLayout: reportLayout,
            Key: key
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/scripting/_eventArgsTypes.js
const eventArgsTypes = {
    'EvaluateBinding': 'DevExpress.XtraReports.UI.BindingEventArgs',
    'AfterPrint': 'System.EventArgs',
    'BeforePrint': 'System.ComponentModel.CancelEventArgs',
    'PrintOnPage': 'DevExpress.XtraReports.UI.PrintOnPageEventArgs',
    'Draw': 'DevExpress.XtraReports.UI.DrawEventArgs',
    'HtmlItemCreated': 'DevExpress.XtraReports.UI.HtmlEventArgs',
    'LocationChanged': 'DevExpress.XtraReports.UI.ChangeEventArgs',
    'ParentChanged': 'DevExpress.XtraReports.UI.ChangeEventArgs',
    'PreviewClick': 'DevExpress.XtraReports.UI.PreviewMouseEventArgs',
    'PreviewDoubleClick': 'DevExpress.XtraReports.UI.PreviewMouseEventArgs',
    'PreviewMouseDown': 'DevExpress.XtraReports.UI.PreviewMouseEventArgs',
    'PreviewMouseMove': 'DevExpress.XtraReports.UI.PreviewMouseEventArgs',
    'PreviewMouseUp': 'DevExpress.XtraReports.UI.PreviewMouseEventArgs',
    'SizeChanged': 'DevExpress.XtraReports.UI.ChangeEventArgs',
    'TextChanged': 'System.EventArgs',
    'SummaryCalculated': 'DevExpress.XtraReports.UI.TextFormatEventArgs',
    'SummaryGetResult': 'DevExpress.XtraReports.UI.SummaryGetResultEventArgs',
    'SummaryReset': 'System.EventArgs',
    'SummaryRowChanged': 'System.EventArgs',
    'BandLevelChanged': 'System.EventArgs',
    'SortingSummaryGetResult': 'DevExpress.XtraReports.UI.GroupSortingSummaryGetResultEventArgs',
    'SortingSummaryReset': 'System.EventArgs',
    'SortingSummaryRowChanged': 'DevExpress.XtraReports.UI.GroupSortingSummaryRowChangedEventArgs',
    'DataSourceDemanded': 'System.EventArgs',
    'BandHeightChanged': 'DevExpress.XtraReports.UI.BandEventArgs',
    'DataSourceRowChanged': 'DevExpress.XtraReports.UI.DataSourceRowEventArgs',
    'FillEmptySpace': 'DevExpress.XtraReports.UI.BandEventArgs',
    'PrintProgress': 'DevExpress.XtraPrinting.PrintProgressEventArgs',
    'ParametersRequestBeforeShow': 'DevExpress.XtraReports.Parameters.ParametersRequestEventArgs',
    'ParametersRequestValueChanged': 'DevExpress.XtraReports.Parameters.ParametersRequestValueChangedEventArgs',
    'ParametersRequestSubmit': 'DevExpress.XtraReports.Parameters.ParametersRequestEventArgs',
    'GetValue': 'DevExpress.XtraReports.UI.GetValueEventArgs',
    'FieldValueDisplayText': 'DevExpress.XtraReports.UI.PivotGrid.PivotFieldDisplayTextEventArgs',
    'PrintCell': 'DevExpress.XtraReports.UI.PivotGrid.CustomExportCellEventArgs',
    'PrintFieldValue': 'DevExpress.XtraReports.UI.PivotGrid.CustomExportFieldValueEventArgs',
    'PrintHeader': 'DevExpress.XtraReports.UI.PivotGrid.CustomExportHeaderEventArgs',
    'CustomSummary': 'DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomSummaryEventArgs',
    'CustomGroupInterval': 'DevExpress.XtraReports.UI.PivotGrid.PivotCustomGroupIntervalEventArgs',
    'CustomChartDataSourceData': 'DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceDataEventArgs',
    'CustomChartDataSourceRows': 'DevExpress.XtraReports.UI.PivotGrid.PivotCustomChartDataSourceRowsEventArgs',
    'CustomCellDisplayText': 'DevExpress.XtraReports.UI.PivotGrid.PivotCellDisplayTextEventArgs',
    'CustomCellValue': 'DevExpress.XtraReports.UI.PivotGrid.PivotCellValueEventArgs',
    'CustomColumnWidth': 'DevExpress.XtraReports.UI.PivotGrid.PivotCustomColumnWidthEventArgs',
    'CustomFieldSort': 'DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomFieldSortEventArgs',
    'CustomServerModeSort': 'DevExpress.XtraReports.UI.PivotGrid.PivotGridCustomServerModeSortEventArgs',
    'CustomFieldValueCells': 'DevExpress.XtraReports.UI.PivotGrid.PivotCustomFieldValueCellsEventArgs',
    'CustomRowHeight': 'DevExpress.XtraReports.UI.PivotGrid.PivotCustomRowHeightEventArgs',
    'CustomUnboundFieldData': 'DevExpress.XtraReports.UI.PivotGrid.CustomFieldDataEventArgs',
    'PrefilterCriteriaChanged': 'System.EventArgs',
    'CustomDrawSeries': 'DevExpress.XtraCharts.CustomDrawSeriesEventArgs',
    'CustomDrawSeriesPoint': 'DevExpress.XtraCharts.CustomDrawSeriesPointEventArgs',
    'CustomDrawCrosshair': 'DevExpress.XtraCharts.CustomDrawCrosshairEventArgs',
    'CustomDrawAxisLabel': 'DevExpress.XtraCharts.CustomDrawAxisLabelEventArgs',
    'CustomPaint': 'DevExpress.XtraCharts.CustomPaintEventArgs',
    'BoundDataChanged': 'System.EventArgs',
    'PieSeriesPointExploded': 'DevExpress.XtraCharts.PieSeriesPointExplodedEventArgs',
    'AxisScaleChanged': 'DevExpress.XtraCharts.AxisScaleChangedEventArgs',
    'AxisWholeRangeChanged': 'DevExpress.XtraCharts.AxisRangeChangedEventArgs',
    'AxisVisualRangeChanged': 'DevExpress.XtraCharts.AxisRangeChangedEventArgs',
    'SmallChartTextShowing': 'System.EventArgs'
};

;// external "window[\"ace\"]"
const external_window_ace_namespaceObject = window["ace"];
var external_window_ace_default = /*#__PURE__*/__webpack_require__.n(external_window_ace_namespaceObject);
;// external "\"/mode-csharp\""
const mode_csharp_namespaceObject = "/mode-csharp";
var mode_csharp_default = /*#__PURE__*/__webpack_require__.n(mode_csharp_namespaceObject);
;// external "\"/mode-vbscript\""
const mode_vbscript_namespaceObject = "/mode-vbscript";
var mode_vbscript_default = /*#__PURE__*/__webpack_require__.n(mode_vbscript_namespaceObject);
;// ./node_modules/devexpress-reporting/designer/internal/scripting/_reportDummyCreator.js

class ReportDummyCreator {
    static _createDummy(report) {
        Object.keys(report).forEach((propertyName) => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.isPlainObject)(report[propertyName])) {
                ReportDummyCreator._createDummy(report[propertyName]);
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(report[propertyName]) || (Object.keys(report[propertyName]).length === 1 && report[propertyName]['@Ref']))
                    delete report[propertyName];
            }
            else if (propertyName !== '@Ref' &&
                propertyName.indexOf('Item') !== 0 &&
                propertyName !== '@Name' &&
                propertyName !== 'Name' &&
                propertyName !== '@ControlType' &&
                propertyName !== '@ObjectType' &&
                propertyName !== '@Content' &&
                propertyName !== '@Type' &&
                report[propertyName].toString().indexOf('#Ref-') !== 0) {
                delete report[propertyName];
            }
        });
        return report;
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/scripting/_reportCompleter.js


class ReportCompleter {
    __getCompletions(editor, session, pos, prefix, callback) {
        const self = this;
        ReportScriptService.getCompletions(editor, session, pos, prefix, callback, this.report(), this.editorInstance, this.guid())
            .done(function (result) {
            if (result) {
                if (result.State === 1) {
                    ReportScriptService.setCodeDom(self.guid(), JSON.stringify({
                        'XtraReportsLayoutSerializer': ReportDummyCreator._createDummy(self.report().serialize())
                    })).done((result) => {
                        self.guid(result.Guid);
                        self.__getCompletions(editor, session, pos, prefix, callback);
                    });
                }
                else {
                    const errors = [];
                    if (result.Errors.length > 0) {
                        const linesCount = editor.getSession().getLength();
                        result.Errors.forEach((error) => {
                            if (error.Line < linesCount && error.Line >= 0) {
                                errors.push({
                                    row: error.Line + 1,
                                    column: error.Column,
                                    text: error.ErrorNumber + ' - ' + error.ErrorText,
                                    type: error.IsWarning ? 'warning' : 'error'
                                });
                            }
                        });
                        editor.getSession().setAnnotations(errors);
                    }
                    self.completions = result.Completions;
                    callback(null, result.Completions);
                }
            }
        });
    }
    constructor(report, editorInstance, guid) {
        this.completions = [];
        this.report = report;
        this.editorInstance = editorInstance;
        this.guid = guid;
        this.oldPrefix = null;
    }
    getCompletions(editor, session, pos, prefix, callback) {
        if (!this.oldPrefix || prefix[0] !== this.oldPrefix) {
            this.oldPrefix = prefix[0];
            this.__getCompletions(editor, session, pos, prefix, callback);
        }
        else if (this.oldPrefix == prefix[0] && this.completions.length > 0) {
            callback(null, this.completions);
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/scripting/_languageHelper.js





(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.aceAvailable)(!!(external_window_ace_default()));
if (!window['ace'] && (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.aceAvailable)()) {
    external_window_ace_default().config.setModuleUrl('ace/mode/csharp', (mode_csharp_default()));
    external_window_ace_default().config.setModuleUrl('ace/mode/vbscript', (mode_vbscript_default()));
}
class LanguageHelper {
    getLanguageMode() {
        if (this._report()) {
            const scriptLanguage = this._report().scriptLanguage();
            switch (scriptLanguage) {
                case 'CSharp':
                    return 'ace/mode/csharp';
                case 'VisualBasic':
                    return 'ace/mode/vbscript';
                default:
                    return 'ace/mode/text';
            }
        }
    }
    createNewHandler(eventName, eventArgsType) {
        if (this._report()) {
            const scriptLanguage = this._report().scriptLanguage();
            switch (scriptLanguage) {
                case 'CSharp':
                    return '\r\nprivate void ' + eventName + '(object sender, ' + eventArgsType + ' e) {\r\n\r\n}\r\n';
                case 'VisualBasic':
                    return '\r\nPrivate Sub ' + eventName + '(ByVal sender As Object, ByVal e As ' + eventArgsType + ')\r\n\r\nEnd Sub\r\n';
                case 'JScript':
                    return '\r\nprivate final function ' + eventName + '(sender : System.Object, e : ' + eventArgsType + ') {\r\n\r\n}\r\n';
            }
        }
    }
    getFunctionNamesFromScript(scripts) {
        if (this._report()) {
            const keyWords = { 'CSharp': 'void ', 'VisualBasic': 'Sub ', 'JScript': 'function ' };
            const scriptLanguage = this._report().scriptLanguage();
            const events = [];
            if (scripts) {
                const lines = scripts.match(new RegExp(keyWords[scriptLanguage] + '(([A-Z])|[a-z])\\w+\\(', 'g'));
                lines && lines.forEach((line) => {
                    events.push(line.substring(keyWords[scriptLanguage].length, line.length - 1));
                });
            }
            return events;
        }
    }
    constructor(report) {
        this._report = report;
    }
    createCompleters(editor, bindingContext, viewModel) {
        return [new ReportCompleter(bindingContext.$root.model, editor, viewModel.guid)];
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/scripting/_scriptsEditor.js








class ScriptsEditor extends external_DevExpress_Analytics_Internal_namespaceObject.ActionListsBase {
    _changeSelection(textToSelect) {
        const editorContainer = this.editorContainer();
        if (editorContainer) {
            editorContainer.find(textToSelect, {
                backwards: false,
                wrap: false,
                caseSensitive: false,
                wholeWord: true,
                regExp: false
            }, true);
            editorContainer.findNext();
            editorContainer.findPrevious();
        }
    }
    createActionViewModel(action, index) {
        const viewModel = super.createActionViewModel(action, index);
        if ('controls' in action) {
            const selectBoxActionViewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(viewModel)
                .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
                .generateProperty('widget', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
                .generateProperty('dataSource', external_ko_namespaceObject.unwrap(action.controls))
                .generateProperty('value', external_ko_namespaceObject.unwrap(action['control']))
                .generateProperty('width', '300px')
                .generateProperty('onValueChanged', (e) => {
                action['control'](e.value);
            })
                .generateProperty('displayExpr', action.displayExpr)
                .generateProperty('placeholder', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select control...', 'ASPxReportsStringId.ReportDesigner_ScriptEditor_Toolbar_SelectControl'))
                .getViewModel())
                .getViewModel();
            this.subscribe(action, 'controls', () => selectBoxActionViewModel.widget.dataSource = external_ko_namespaceObject.unwrap(action.controls));
            this.subscribe(action, 'control', () => selectBoxActionViewModel.widget.value = external_ko_namespaceObject.unwrap(action['control']));
            return selectBoxActionViewModel;
        }
        if ('events' in action) {
            const selectBoxActionViewModel = (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(viewModel)
                .generateProperty('getPopupContainer', external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)
                .generateProperty('widget', (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)()
                .generateProperty('dataSource', external_ko_namespaceObject.unwrap(action.events))
                .generateProperty('width', '200px')
                .generateProperty('value', external_ko_namespaceObject.unwrap(action['event']))
                .generateProperty('onValueChanged', (e) => {
                action['event'](e.value);
            })
                .generateProperty('displayExpr', action.displayExpr)
                .generateProperty('placeholder', (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select event...', 'ASPxReportsStringId.ReportDesigner_ScriptEditor_Toolbar_SelectEvent'))
                .getViewModel())
                .getViewModel();
            this.subscribe(action, 'events', () => selectBoxActionViewModel.widget.dataSource = external_ko_namespaceObject.unwrap(action.events));
            this.subscribe(action, 'event', () => selectBoxActionViewModel.widget.value = external_ko_namespaceObject.unwrap(action['event']));
            return selectBoxActionViewModel;
        }
        return viewModel;
    }
    _initializeToolbar() {
        const self = this, copyText = external_ko_namespaceObject.observable('');
        this.toolbarItems.push({
            text: 'Cut',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cut', 'AnalyticsCoreStringId.EditCut'),
            imageClassName: 'dxrd-image-cut',
            imageTemplateName: 'dxrd-svg-toolbar-cut',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !self.report() || !self._selectionNotEmpty(); }),
            visible: true,
            clickAction: () => {
                copyText(self.editorContainer().getCopyText());
                self.editorContainer().execCommand('cut');
            },
            hotKey: { ctrlKey: true, keyCode: 'X'.charCodeAt(0) }
        });
        this.toolbarItems.push({
            text: 'Copy',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Copy', 'AnalyticsCoreStringId.Cmd_Copy'),
            imageClassName: 'dxrd-image-copy',
            imageTemplateName: 'dxrd-svg-toolbar-copy',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !self.report() || !self._selectionNotEmpty(); }),
            visible: true,
            clickAction: () => {
                copyText(self.editorContainer().getCopyText());
            },
            hotKey: { ctrlKey: true, keyCode: 'C'.charCodeAt(0) }
        });
        this.toolbarItems.push({
            text: 'Paste',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Paste', 'AnalyticsCoreStringId.Cmd_Paste'),
            imageClassName: 'dxrd-image-paste',
            imageTemplateName: 'dxrd-svg-toolbar-paste',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !self.report() || !copyText(); }),
            visible: true,
            clickAction: () => {
                self.editorContainer().onPaste(copyText());
            },
            hotKey: { ctrlKey: true, keyCode: 'V'.charCodeAt(0) }
        });
        this.toolbarItems.push({
            text: 'Delete',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Delete', 'AnalyticsCoreStringId.Cmd_Delete'),
            imageClassName: 'dxrd-image-delete',
            imageTemplateName: 'dxrd-svg-toolbar-delete',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !self.report() || !self._selectionNotEmpty(); }),
            visible: true,
            clickAction: () => {
                self.editorContainer().execCommand('del');
            }
        });
        this.toolbarItems.push({
            text: 'Undo',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Undo', 'AnalyticsCoreStringId.Undo'),
            imageClassName: 'dxrd-image-undo',
            imageTemplateName: 'dxrd-svg-toolbar-undo',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !self.report() || !self._canUndo(); }),
            visible: true,
            clickAction: () => {
                self.editorContainer().undo(false);
                self._updateEditorState();
            },
            hotKey: { ctrlKey: true, keyCode: 'Z'.charCodeAt(0) },
            hasSeparator: true
        });
        this.toolbarItems.push({
            text: 'Redo',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Redo', 'AnalyticsCoreStringId.Redo'),
            imageClassName: 'dxrd-image-redo',
            imageTemplateName: 'dxrd-svg-toolbar-redo',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !self.report() || !self._canRedo(); }),
            visible: true,
            clickAction: () => {
                self.editorContainer().redo(false);
                self._updateEditorState();
            },
            hotKey: { ctrlKey: true, keyCode: 'Y'.charCodeAt(0) },
        });
        this.toolbarItems.push({
            text: 'Controls',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !this.report(); }),
            visible: this.editorVisible,
            control: self.selectedControl,
            controls: self.controls,
            displayExpr: (value) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getControlFullName)(value),
            templateName: 'dxrd-scripting-selectboxaction',
            hasSeparator: true
        });
        this.toolbarItems.push({
            text: 'Events',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !this.report(); }),
            visible: this.editorVisible,
            events: self.eventsCollection,
            event: self.selectedEvent,
            templateName: 'dxrd-scripting-selectboxaction'
        });
        this.toolbarItems.push({
            text: 'Validate',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Validate', 'ReportStringId.ScriptEditor_Validate'),
            imageClassName: 'dxrd-image-validate',
            imageTemplateName: 'dxrd-svg-toolbar-validate',
            disabled: external_ko_namespaceObject.pureComputed(() => {
                return !self.report() || self.validateDisabled() || !self.editorContainer();
            }),
            visible: this.editorVisible,
            hotKey: { ctrlKey: true, keyCode: 'L'.charCodeAt(0) },
            clickAction: () => {
                self.validateDisabled(true);
                self._setScriptsText();
                ReportScriptService.validateScripts(self.report()).done(function (result) {
                    if (!self.editorContainer())
                        return;
                    const errors = [];
                    result.forEach((error) => {
                        const linesCount = self.editorContainer().getSession().getLength();
                        errors.push({
                            row: self._getValidIndex(error.Line, linesCount),
                            column: self._getValidIndex(error.Column, linesCount),
                            text: error.ErrorNumber + ' - ' + error.ErrorText,
                            type: error.IsWarning ? 'warning' : 'error'
                        });
                    });
                    self.editorContainer().getSession().setAnnotations(errors);
                    self.validateDisabled(false);
                    if (errors.length > 0) {
                        (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The script contains error(s).', 'ASPxReportsStringId.ReportDesigner_ScriptValidation_Message_ContainsErrors'));
                    }
                    else {
                        (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The script is valid.', 'ASPxReportsStringId.ReportDesigner_ScriptValidation_Message_ValidScript'), 'success');
                    }
                })
                    .fail(function (result) {
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Impossible to validate the script.', 'ASPxReportsStringId.ReportDesigner_ScriptValidation_Error'));
                    self.validateDisabled(false);
                });
            },
            hasSeparator: true
        });
        this.toolbarItems.push({
            text: 'Design',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Design', 'ReportStringId.RepTabCtl_Designer'),
            imageClassName: 'dxrd-image-design',
            imageTemplateName: 'dxrd-svg-preview-report_designer',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !this.report(); }),
            visible: this.editorVisible,
            hotKey: { ctrlKey: true, keyCode: 'P'.charCodeAt(0) },
            clickAction: () => {
                self._setScriptsText();
                self.editorVisible(false);
            },
            hasSeparator: true
        });
    }
    _getValidIndex(errorPosition, linesCount) {
        const position = errorPosition <= linesCount ? Math.max(1, errorPosition) : 1;
        return Math.max(0, position - 1);
    }
    _setScriptsText() {
        const editorContainer = this.editorContainer();
        if (editorContainer) {
            this.scriptsText(editorContainer.getValue());
        }
    }
    _getFunctionName(row) {
        let name = '';
        const allLines = this.editorContainer().getSession().getDocument().getAllLines();
        for (let rowIndex = row; rowIndex >= 0; rowIndex--) {
            if (name) {
                break;
            }
            for (let index = 0; index < this.allFunctionNames.length; index++) {
                if (allLines[rowIndex].indexOf(this.allFunctionNames[index]) !== -1) {
                    name = this.allFunctionNames[index];
                    break;
                }
            }
        }
        return name;
    }
    _getEventByFunction(control, currentFunctionName) {
        let result = '';
        Object.keys(control.scripts).some((propertyName) => {
            if (result) {
                return true;
            }
            const eventName = propertyName;
            if (external_ko_namespaceObject.unwrap(control.scripts[eventName]) === currentFunctionName && eventName.indexOf('on') === 0) {
                result = eventName.substring(2);
            }
            return false;
        });
        return result;
    }
    static generateFunctionName(control, eventName, functionName, allFunctionNames = []) {
        if (functionName || external_ko_namespaceObject.unwrap(control.name)) {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.replaceInvalidSymbols)(functionName || (external_ko_namespaceObject.unwrap(control.name) + '_' + eventName));
        }
        else {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(allFunctionNames, eventName);
        }
    }
    static getEventArgsType(eventName) {
        return eventArgsTypes[eventName] || 'System.EventArgs';
    }
    initialize() {
        const self = this;
        ReportScriptService.setCodeDom('', JSON.stringify({
            'XtraReportsLayoutSerializer': ReportDummyCreator._createDummy(this.report().serialize())
        })).done((result) => {
            this.guid(result.Guid);
        });
    }
    constructor(report, allControls) {
        super();
        this._selectionNotEmpty = external_ko_namespaceObject.observable(false);
        this._canUndo = external_ko_namespaceObject.observable(false);
        this._canRedo = external_ko_namespaceObject.observable(false);
        this._cursorPosition = external_ko_namespaceObject.observable().extend({ throttle: 100 });
        this.guid = external_ko_namespaceObject.observable(null);
        this.editorContainer = external_ko_namespaceObject.observable();
        this.editorVisible = external_ko_namespaceObject.observable(false);
        this.toolbarItems = [];
        this.controls = external_ko_namespaceObject.observableArray([]);
        this.selectedControl = external_ko_namespaceObject.observable();
        this.eventsCollection = external_ko_namespaceObject.observable([]);
        this.selectedEvent = external_ko_namespaceObject.observable();
        this.validateDisabled = external_ko_namespaceObject.observable(false);
        this.aceOptions = {
            enableBasicAutocompletion: true,
            enableSnippets: true,
            enableLiveAutocompletion: true,
            showPrintMargin: false
        };
        const self = this;
        let cursorPositionChanging = false;
        this.languageHelper = new LanguageHelper(report);
        this._updateEditorState = () => {
            if (this.editorContainer() && this.editorContainer().getSession()) {
                this._canUndo(this.editorContainer().getSession().getUndoManager().hasUndo());
                this._canRedo(this.editorContainer().getSession().getUndoManager().hasRedo());
            }
        };
        this.selectionChanged = (editor) => {
            this._selectionNotEmpty(!editor.getSelection().isEmpty());
            this._updateEditorState();
            editor.focus();
        };
        this.report = report;
        this.scriptsText = external_ko_namespaceObject.pureComputed({
            read: () => { return this.report() && this.report().scriptsSource(); },
            write: (newText) => { this.report() && this.report().scriptsSource(newText); }
        });
        this._initializeToolbar();
        this.editorContainer.subscribe(editor => {
            if (editor.getSession()) {
                editor.getSession().getSelection().on('changeSelection', () => {
                    this.selectionChanged(editor);
                });
                editor.getSession().getSelection().on('changeCursor', () => {
                    self._cursorPosition(editor.getCursorPosition());
                });
            }
        });
        this._cursorPosition.subscribe((currentCursorPosition) => {
            const currentFunctionName = this._getFunctionName(currentCursorPosition.row);
            let control, event;
            this.controls().some((ctrl) => {
                control = ctrl;
                event = this._getEventByFunction(ctrl, currentFunctionName);
                return !!event;
            });
            if (control && event) {
                try {
                    cursorPositionChanging = true;
                    this.selectedControl(control);
                    this.selectedEvent(event);
                }
                finally {
                    cursorPositionChanging = false;
                }
            }
        });
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            this.controls(allControls().filter((control) => { return !!control.scripts && !control.lockedInUserDesigner(); }));
        }));
        this.selectedControl.subscribe((newSelectedControl) => {
            let eventsList = [];
            if (newSelectedControl) {
                const info = newSelectedControl.getInfo();
                const scripts = info.filter(x => x.propertyName === 'scripts')[0];
                eventsList = scripts && scripts.info.filter((x) => external_ko_namespaceObject.unwrap(x.visible) !== false && !external_ko_namespaceObject.unwrap(x.disabled)).map((item) => {
                    return item.propertyName.indexOf('on') === 0 ? item.propertyName.substring(2) : item.propertyName;
                });
            }
            this.selectedEvent('');
            this.eventsCollection(eventsList);
        });
        this._ensureFunction = (functionName, eventArgsType) => {
            const editorContainer = this.editorContainer();
            if (editorContainer) {
                const editorContent = editorContainer.getValue();
                if (editorContent.indexOf(functionName) === -1) {
                    const newEventHandler = this.languageHelper.createNewHandler(functionName, eventArgsType);
                    const resultScripts = editorContent.concat(newEventHandler);
                    this.report().scriptsSource(resultScripts);
                    editorContainer.setValue(resultScripts);
                }
            }
        };
        this.ensureEvent = (eventName, functionName, model) => {
            let selectedControl = model;
            if (!selectedControl) {
                selectedControl = this.selectedControl();
            }
            functionName = ScriptsEditor.generateFunctionName(selectedControl, eventName, functionName, this.allFunctionNames);
            const eventArgsType = ScriptsEditor.getEventArgsType(eventName);
            this._ensureFunction(functionName, eventArgsType);
            this._changeSelection(functionName);
            selectedControl.scripts['on' + eventName](functionName);
            this.selectedControl(selectedControl);
            if (this.controls.indexOf(selectedControl) === -1) {
                this.controls.push((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({ displayExpr: selectedControl.name }, selectedControl));
            }
            this.selectedEvent(eventName);
        };
        this.selectedEvent.subscribe((newEvent) => {
            if (!cursorPositionChanging && newEvent) {
                const selectedControl = this.selectedControl();
                const selectedControlNewEvent = selectedControl && selectedControl.scripts['on' + newEvent];
                const newEventFunction = selectedControlNewEvent && selectedControlNewEvent();
                if (!newEventFunction || this.allFunctionNames.indexOf(newEventFunction) === -1) {
                    this.ensureEvent(newEvent);
                }
                else {
                    this._changeSelection(newEventFunction);
                }
            }
        });
    }
    get allFunctionNames() {
        return this.scriptsText() ? this.languageHelper.getFunctionNamesFromScript(this.scriptsText()) : [];
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_controlScrollingTool.js

class ControlScrollingTool extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(_rootElement) {
        super();
        this._rootElement = _rootElement;
    }
    scrollToControl(surface) {
        if (this._viewport == null) {
            this._viewport = this._rootElement.getElementsByClassName('dxrd-viewport')[0];
        }
        if (surface['absolutePosition']) {
            const currentPosition = surface['absolutePosition'];
            const scrollLeft = this._getScrollOffset(currentPosition.x(), this._viewport.scrollLeft, this._viewport.clientWidth, this._viewport.scrollWidth);
            const scrollTop = this._getScrollOffset(currentPosition.y(), this._viewport.scrollTop, this._viewport.clientHeight, this._viewport.scrollHeight);
            if (this._viewport.scrollTo) {
                this._viewport.scrollTo({
                    left: scrollLeft,
                    top: scrollTop
                });
            }
            else {
                this._viewport.scrollLeft = scrollLeft;
                this._viewport.scrollTop = scrollTop;
            }
        }
    }
    _getScrollOffset(elementPosition, scrollOffset, visibleSize, fullSize) {
        let newOffset = scrollOffset;
        if (elementPosition < scrollOffset || elementPosition > (scrollOffset + visibleSize) / 2) {
            newOffset = elementPosition;
            if (newOffset + visibleSize / 2 < fullSize) {
                newOffset -= visibleSize / 2;
            }
        }
        return newOffset;
    }
    dispose() {
        this._viewport = null;
        this._rootElement = null;
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_copyPasteStrategy.js




const reportCopyPasteStrategy = (componentAdded) => ({
    createChild: (pasteTarget, info) => {
        let control = null;
        let parent = pasteTarget;
        if (info['restore']) {
            info['restore']();
            return;
        }
        if (info['@ControlType'] === 'XRCrossBandBox' || info['@ControlType'] === 'XRCrossBandLine') {
            parent = pasteTarget.root;
            control = parent.createChild(info);
        }
        else {
            control = external_DevExpress_Analytics_Internal_namespaceObject.copyPasteStrategy.createChild(parent, info);
            if (control instanceof XRControlViewModel && !info['@Text'] && control.text) {
                control.text('');
            }
        }
        componentAdded && componentAdded({ parent: parent, model: control });
        return control;
    },
    calculateDelta: (selection, pasteTargetSurface, minPoint) => {
        const result = external_DevExpress_Analytics_Internal_namespaceObject.copyPasteStrategy.calculateDelta(selection, pasteTargetSurface, minPoint);
        if (selection.getControlModel().controlType === 'XRCrossBandBox' || selection.getControlModel().controlType === 'XRCrossBandLine') {
            result.y += pasteTargetSurface['absolutePosition'].y();
        }
        return result;
    },
    createSelfRestoringItems(model, serializer) {
        if (model instanceof XRCrossTabViewModel) {
            return model.dependentStyles.map(style => {
                const serializedModel = serializer.serialize(style);
                return {
                    restore: () => (model.root)['styles'] && model.root['styles'].push(new StyleModel(serializedModel, model))
                };
            });
        }
        else
            return [];
    },
    canPaste: (pasteTarget, info) => {
        const pasteTargetSurface = pasteTarget.surface;
        const itemInfos = info['objects'].map(x => pasteTarget.getControlFactory().getControlInfo(pasteTarget.getControlFactory().getControlType(x)));
        return itemInfos.every(x => (!x.canPaste || x.canPaste(pasteTargetSurface)) &&
            (!x.canDrop || x.canDrop(pasteTargetSurface)));
    }
});

;// ./node_modules/devexpress-reporting/designer/internal/_customMergingEngine.js


class CustomMergingEngine {
    _customMergeForFormatString(propertyName, controls, undoEngine) {
        if (propertyName === 'formatString') {
            const result = external_ko_namespaceObject.observable(controls.every((control) => { return controls[0][propertyName].peek() === control[propertyName].peek(); }) ? controls[0][propertyName].peek() : null);
            return {
                result,
                subscriptions: [
                    result.subscribe((newVal) => {
                        undoEngine && undoEngine().start();
                        controls.forEach(control => {
                            if (!control.disabled()) {
                                control[propertyName](newVal);
                            }
                        });
                        undoEngine && undoEngine().end();
                    })
                ]
            };
        }
    }
    customMerge(propertyName, controls, undoEngine) {
        if (propertyName === 'dataBindings') {
            const result = external_ko_namespaceObject.observableArray();
            let subscriptions = [];
            const allBindings = [].concat.apply([], controls.map((x) => x[propertyName]()));
            controls[0][propertyName]().map(x => x.propertyName()).forEach((name) => {
                const availableBindings = allBindings.filter(binding => {
                    return binding.propertyName() === name;
                });
                if (availableBindings.length === controls.length) {
                    const combinedObj = external_DevExpress_Analytics_Internal_namespaceObject.CombinedObject._merge(availableBindings, undoEngine, (propertyName, controls, undoEngine) => this._customMergeForFormatString(propertyName, controls, undoEngine));
                    const binding = combinedObj.result;
                    binding['isEmpty'] = () => {
                        return !(binding['dataMember']() || binding['dataSource']() || binding['parameter']());
                    };
                    binding['visible'] = external_ko_namespaceObject.observable(false);
                    binding['disabled'] = external_ko_namespaceObject.computed(() => {
                        return availableBindings.every(x => x.disabled());
                    });
                    combinedObj.subscriptions.push(binding['disabled']);
                    result.push(binding);
                    subscriptions = [].concat.apply(subscriptions, combinedObj.subscriptions);
                }
            });
            return { result, subscriptions };
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_designerEditorAddOn.js


class DesignerEditorAddOn extends external_DevExpress_Analytics_Internal_namespaceObject.EditorAddOn {
    constructor(editor, popupService, imageTemplateName = '') {
        super(editor, popupService);
        this._set('imageTemplateName', imageTemplateName);
    }
    onPopupShown(popupService) { }
    showPopup(_, element) {
        super.showPopup(_, element);
        const popupService = this['_popupService'];
        this.onPopupShown(popupService);
        popupService.target(element);
    }
}
class ExpressionEditorAddOn extends DesignerEditorAddOn {
    constructor() {
        super(...arguments);
        this.activateExpressionEditorFunc = (expressionEditor) => void 0;
        this.templateName = 'dxrd-expression-editor-addon';
    }
    dispose() {
        super.dispose();
        this.activateExpressionEditorFunc = null;
    }
    actionFilter(action) {
        return super.actionFilter(action) && action.id === expressionEditorActionId;
    }
    onPopupShown(popupService) {
        popupService.disabled(false);
        const actions = popupService.actions();
        if (actions.length == 1) {
            const items = actions[0].items;
            if (items && !!items.length) {
                popupService.actions(items);
                popupService.title(actions[0].title);
            }
            else {
                actions[0].action(this['_editor'].name);
                this.activateExpressionEditorFunc(actions[0]);
            }
        }
    }
    cacheFunction(callback) {
        this.activateExpressionEditorFunc = callback;
    }
}
class ValueEditorAddOn extends DesignerEditorAddOn {
    onPopupShown(popupService) {
        popupService.disabled(this['_editor']._get('disabled'));
    }
    actionFilter(action) {
        return super.actionFilter(action) && action.id !== expressionEditorActionId;
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_localizationStringId.js
const StringId = {
    Copy: 'ReportStringId.RibbonXRDesign_Copy_STipTitle',
    NewViaWizard: 'ReportStringId.UD_Capt_NewWizardReport',
    Open: 'ReportStringId.UD_Capt_OpenFile',
    Save: 'ReportStringId.Verb_Save',
    SaveAs: 'ReportStringId.UD_Capt_SaveFileAs',
    MdiReportChanged: 'ReportStringId.UD_Msg_MdiReportChanged'
};

;// external "DevExpress.Analytics.Criteria"
const external_DevExpress_Analytics_Criteria_namespaceObject = DevExpress.Analytics.Criteria;
;// ./node_modules/devexpress-reporting/designer/internal/_reportConverter.js











class ReportConverter extends BaseConverter {
    _mapRulesProperties(formatting) {
        const newFormatting = {};
        Object.keys(formatting).forEach((name) => {
            if (this._formattingMapper[name]) {
                newFormatting[this._formattingMapper[name]] = formatting[name];
            }
        });
        return newFormatting;
    }
    constructor(_controlsHelper, _undoEngine, _dataBindingMode = _dataBindingMode_DataBindingMode.Expressions) {
        super();
        this._controlsHelper = _controlsHelper;
        this._undoEngine = _undoEngine;
        this._dataBindingMode = _dataBindingMode;
        this.convertChoiceEnum = {
            'Convert': 'Convert',
            'Cancel': 'Cancel'
        };
        this._formattingMapper = {
            '@BackColor': '@BackColor',
            '@Sides': '@Borders',
            '@BorderColor': '@BorderColor',
            '@BorderDashStyle': '@BorderDashStyle',
            '@BorderWidthSerializable': '@BorderWidth',
            '@ForeColor': '@ForeColor',
            '@Font': '@Font',
            '@Padding': '@Padding',
            '@TextAlignment': '@TextAlignment',
            '@Visible': '@Visible'
        };
        this._expressionsToControlMap = {};
        this._lastChoice = null;
        this._defaultFormatting = {};
        this._notShowAgain = external_ko_namespaceObject.observable(false);
        this._detailLink = 'https://devexpress.github.io/dotnet-eud/interface-elements-for-web/articles/report-designer/bind-to-data/data-binding-modes.html';
        this._model = null;
        this._mapFontObj(this._defaultFormatting, new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel(external_ko_namespaceObject.observable('')));
        this._mapPaddingObj(this._defaultFormatting, external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.from('0,0,0,0'));
        this.popupOptions.linkUrl = this._detailLink;
        this.popupOptions.confirmMessage = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The {0} contains bindings. Do you want to convert them to expressions?', 'ReportStringId.UD_Msg_ConvertBindings'), (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report', 'DevExpress.XtraReports.UI.XtraReport'));
        this.popupOptions.linkText = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Learn more about the expressions...', 'ReportStringId.UD_Msg_ConvertBindings_LinkText');
        this.popupOptions.buttons.push({ toolbar: 'bottom', location: 'before', widget: 'dxCheckBox', options: { value: this._notShowAgain, text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("Remember my choice and don't ask me again.", 'ReportStringId.UD_Msg_ConvertBindings_RememberMyChoice') } });
    }
    _hasBindings() {
        const allcontrols = this._controlsHelper.allControls();
        return allcontrols.map(x => external_ko_namespaceObject.unwrap(x['dataBindings'])).filter(x => !!x).some(x => x.some(db => !!db.dataMember() || !!db.parameter()));
    }
    _hasFormattingRules() {
        return this._model.formattingRuleSheet().length > 0;
    }
    convert(model, convertBindingsToExpressions = PromptBoolean.Prompt) {
        if (!model.dataBindingMode) {
            this._model = model;
            model._dataBindingMode(this._dataBindingMode);
            if (this._dataBindingMode !== _dataBindingMode_DataBindingMode.Bindings && this._controlsHelper) {
                const needConvert = this._hasBindings() || this._hasFormattingRules();
                if (convertBindingsToExpressions === PromptBoolean.False)
                    return this._cancel(needConvert ? _dataBindingMode_DataBindingMode.Bindings : this._dataBindingMode);
                const canConvert = needConvert ? this._canConvertReport() : true;
                if (!canConvert)
                    return this._cancel();
                if (convertBindingsToExpressions === PromptBoolean.True || this._notShowAgain()) {
                    if (needConvert && this._lastChoice !== this.convertChoiceEnum.Cancel)
                        this._applyChanges();
                }
                else {
                    if (!needConvert) {
                        this._model = null;
                        this._expressionsToControlMap = {};
                    }
                    this.popupOptions.visible(needConvert);
                }
            }
        }
    }
    _generateStyleName(ruleName) {
        return ruleName;
    }
    _createBindingExpression(dataBinding, sumformat, condition) {
        if (dataBinding.propertyName() === 'Text' && sumformat) {
            condition = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(sumformat, condition);
        }
        if (dataBinding.propertyName() !== 'Text' && dataBinding.formatString()) {
            condition = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)("FormatString('{0}', {1})", dataBinding.formatString(), condition);
        }
        return ExpressionWrapper.createExpression(dataBinding.propertyName(), 'BeforePrint', condition);
    }
    _tryToGenerateBindingExpressions(control, expressions, controlDataInfo) {
        const dataBindings = external_ko_namespaceObject.unwrap(control['dataBindings']);
        let canConvertDataBindings = true;
        let sumformat = null;
        if (control['Summary'] && external_ko_namespaceObject.unwrap(control['Summary']['Running']) !== 'None') {
            const summaryFunc = external_ko_namespaceObject.unwrap(control['Summary']['Func']);
            if (summaryFunc === 'Custom')
                return false;
            sumformat = 'sum' + summaryFunc + '({0})';
        }
        if (!!dataBindings) {
            canConvertDataBindings = dataBindings.every(dataBinding => {
                let condition = '';
                if (dataBinding.dataSource() && controlDataInfo.dataSource !== dataBinding.dataSource()) {
                    return false;
                }
                else if (dataBinding.parameter()) {
                    condition = '[Parameters.' + dataBinding.parameter().name + ']';
                }
                else if (dataBinding.dataMember()) {
                    condition = dataBinding.dataMember();
                    if (controlDataInfo.dataMember) {
                        const prefix = controlDataInfo.dataMember + '.';
                        if (dataBinding.dataMember().indexOf(prefix) === 0) {
                            condition = dataBinding.dataMember().substring(prefix.length);
                        }
                    }
                    condition = '[' + condition + ']';
                }
                if (condition) {
                    expressions.push(this._createBindingExpression(dataBinding, sumformat, condition));
                }
                return true;
            });
        }
        return canConvertDataBindings;
    }
    _resetDataBindings(control) {
        const dataBindings = external_ko_namespaceObject.unwrap(control['dataBindings']);
        if (!!dataBindings) {
            dataBindings.forEach(dataBinding => {
                let formatString = null;
                if (dataBinding.propertyName() === 'Text') {
                    formatString = control['textFormatString'] && control['textFormatString']();
                }
                dataBinding.resetValue();
                formatString && control['textFormatString'](formatString);
            });
        }
    }
    _mapPaddingObj(obj, padding) {
        obj['@Padding.Left'] = padding._get('left');
        obj['@Padding.Right'] = padding._get('right');
        obj['@Padding.Top'] = padding._get('top');
        obj['@Padding.Bottom'] = padding._get('bottom');
    }
    _mapFontObj(obj, font) {
        obj['@Font.Name'] = font.family();
        obj['@Font.Size'] = font.size();
        obj['@Font.Italic'] = font.modificators.italic();
        obj['@Font.Strikeout'] = font.modificators.strikeout();
        obj['@Font.Bold'] = font.modificators.bold();
        obj['@Font.Underline'] = font.modificators.underline();
    }
    _splitFontPropertyValue(formatting) {
        if (formatting['@Font']) {
            const font = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel(external_ko_namespaceObject.observable(formatting['@Font']));
            this._mapFontObj(formatting, font);
            delete formatting['@Font'];
        }
    }
    _splitPaddingPropertyValue(formatting) {
        if (formatting['@Padding']) {
            const padding = external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel.from(formatting['@Padding']);
            this._mapPaddingObj(formatting, padding);
            delete formatting['@Padding'];
        }
    }
    _patchRuleCondition(condition, dataMember, controlDataMember) {
        if (!condition)
            return condition;
        const expression = external_DevExpress_Analytics_Criteria_Utils_namespaceObject.CriteriaOperatorStateMachine.parse(condition);
        const processNames = [];
        (0,external_DevExpress_Analytics_Criteria_Utils_namespaceObject.criteriaForEach)(expression, (operator, path) => {
            if (operator instanceof external_DevExpress_Analytics_Criteria_namespaceObject.OperandProperty && path === dataMember) {
                processNames.push(() => {
                    let propertyName = [dataMember, operator.propertyName].join('.');
                    if (propertyName.indexOf(controlDataMember) === 0 && (propertyName.length === controlDataMember.length || propertyName[controlDataMember.length] === '.')) {
                        propertyName = propertyName.substr(controlDataMember.length + 1, propertyName.length);
                    }
                    operator.propertyName = propertyName;
                });
            }
        }, dataMember);
        processNames.forEach(x => x());
        return new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FilterEditorSerializer().serialize(expression);
    }
    _tryToGenerateFormattingRulesExpressions(control, expressions, rules, controlDataInfo) {
        if (!control.formattingRuleLinks)
            return true;
        const conditions = {};
        const currentRules = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], control.formattingRuleLinks().map(x => rules[x.value().name()]));
        const changedPropertiesWithDot = [];
        const canConvertFormattingRules = currentRules.every(rule => {
            if (controlDataInfo.dataSource !== rule.dataSource) {
                return false;
            }
            Object.keys(rule.formatting).forEach((name) => {
                if (name.indexOf('.') !== -1 && this._defaultFormatting[name] !== rule.formatting[name]) {
                    changedPropertiesWithDot.push(name);
                }
            });
            return true;
        });
        if (!canConvertFormattingRules) {
            return false;
        }
        currentRules.forEach((rule) => {
            if (rule.dataMember !== controlDataInfo.dataMember) {
                rule.condition = this._patchRuleCondition(rule.condition, rule.dataMember, controlDataInfo.dataMember);
            }
            Object.keys(rule.formatting).forEach((propertyName) => {
                const hasPoint = propertyName.indexOf('.') !== -1;
                if (!hasPoint || (hasPoint && changedPropertiesWithDot.indexOf(propertyName) !== -1)) {
                    if (!conditions[propertyName]) {
                        conditions[propertyName] = [];
                    }
                    conditions[propertyName].unshift(rule.condition, "'" + rule.formatting[propertyName] + "'");
                }
            });
            return true;
        });
        Object.keys(conditions).forEach((propertyName) => {
            expressions.push(this._createRuleExpression(conditions[propertyName], '?', propertyName.substring(1)));
        });
        return true;
    }
    _getControlDataSourceDataMember(control) {
        let dataSource = null, dataMember = null;
        while (!dataSource && control) {
            dataSource = dataSource || control['dataSource'] && control['dataSource']();
            dataMember = dataMember || control['dataMember'] && control['dataMember']();
            control = control.parentModel();
        }
        return { dataSource, dataMember };
    }
    _generateFormattingRulesDictionary() {
        const rules = {};
        this._model.formattingRuleSheet().forEach(rule => {
            const newRule = {
                condition: rule.condition(),
                formatting: this._mapRulesProperties(new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(rule['formatting'])),
                dataSource: rule.dataSource() || this._model.dataSource(),
                dataMember: rule.dataMember() || this._model.dataMember()
            };
            this._splitFontPropertyValue(newRule.formatting);
            this._splitPaddingPropertyValue(newRule.formatting);
            rules[rule.name()] = newRule;
        });
        return rules;
    }
    _createRuleExpression(collection, defaultVal, propertyName) {
        collection.push(defaultVal);
        return ExpressionWrapper.createExpression(propertyName, 'BeforePrint', 'iif(' + collection.join(',') + ')');
    }
    _canConvertReport() {
        const controls = this._controlsHelper.allControls()
            .filter(isControl);
        const rules = this._generateFormattingRulesDictionary();
        this._expressionsToControlMap = {};
        return controls.every((control) => {
            const controlName = external_ko_namespaceObject.unwrap(control.name);
            this._expressionsToControlMap[controlName] = [];
            const controlDataInfo = this._getControlDataSourceDataMember(control.parentModel && control.parentModel() || control);
            return this._tryToGenerateBindingExpressions(control, this._expressionsToControlMap[controlName], controlDataInfo) &&
                this._tryToGenerateFormattingRulesExpressions(control, this._expressionsToControlMap[controlName], rules, controlDataInfo);
        });
    }
    _applyChanges() {
        this._lastChoice = this.convertChoiceEnum.Convert;
        const controls = this._controlsHelper.allControls()
            .filter(isControl);
        this._model.formattingRuleSheet.removeAll();
        controls.forEach((control) => {
            control.formattingRuleLinks && control.formattingRuleLinks.removeAll();
            const controlName = external_ko_namespaceObject.unwrap(control.name);
            this._resetDataBindings(control);
            const expressions = this._expressionsToControlMap[controlName];
            if (expressions.length > 0) {
                control.expressionBindings(expressions);
            }
        });
        this.popupOptions.visible(false);
        this._undoEngine().clearHistory();
        this._undoEngine().isDirty(true);
        this._expressionsToControlMap = null;
        this._model = null;
    }
    _cancel(mode = _dataBindingMode_DataBindingMode.Bindings) {
        this._lastChoice = this.convertChoiceEnum.Cancel;
        this._model._dataBindingMode(mode);
        this._model = null;
        this._expressionsToControlMap = {};
        this.popupOptions.visible(false);
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_wizardRunner.js

class WizardRunner extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this._currentWizard = null;
        this._wizards = {};
    }
    constructor(_menuOptions) {
        super();
        this._menuOptions = _menuOptions;
        this._currentWizard = null;
        this._wizards = {};
        this._disposables.push(this._menuOptions.collapsed.subscribe((newVal) => {
            if (!newVal) {
                this._currentWizard.close();
                this._currentWizard = null;
            }
        }));
    }
    registerCommand(wizardType, start, close) {
        this._wizards[wizardType] = { start, close };
    }
    run(command) {
        this._currentWizard && this._currentWizard.close();
        this._currentWizard = this._wizards[command];
        this._currentWizard && this._currentWizard.start();
    }
    closeWizard() {
        this._currentWizard && this._currentWizard.close();
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_translateHelper.js



class TranslateHelper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor() {
        super(...arguments);
        this._maxInterval = 1000;
        this._restoreDictionary = {};
        this._timeouts = {};
    }
    _getElement(name) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dx-designer .' + name)[0];
    }
    dispose() {
        (0,external_DevExpress_Reporting_namespaceObject.convertMapToKeyValuePair)(this._timeouts).forEach(item => clearTimeout(item.Value));
        super.dispose();
    }
    move(elementClassName, sign = '-', transform = 'translateY', transition = '0.35s transform ease-in-out') {
        clearTimeout(this._timeouts[elementClassName]);
        const element = this._getElement(elementClassName);
        if (element) {
            const result = transform === 'translateY' ? element.clientHeight : element.clientWidth;
            const _transform = transform + '(' + sign + result + 'px)';
            const currentTransition = element.style.transition || 'transform 0s ease 0s';
            const currentVisible = element.style.visibility || 'visible';
            const currentTransform = element.style.transform || 'none';
            this._restoreDictionary[elementClassName] = (element) => {
                element.style.visibility = currentVisible;
                element.style.transform = currentTransform;
                element.style['-webkit-transform'] = currentTransform;
                this._timeouts[elementClassName] = setTimeout(() => {
                    element.style.transition = currentTransition;
                }, this._maxInterval);
            };
            element.style.transition = transition;
            element.style.transform = _transform;
            element.style['-webkit-transform'] = _transform;
            this._timeouts[elementClassName] = setTimeout(() => {
                element.style.visibility = 'hidden';
            }, this._maxInterval);
        }
    }
    reset(elementClassName) {
        clearTimeout(this._timeouts[elementClassName]);
        const element = this._getElement(elementClassName);
        if (element && this._restoreDictionary[elementClassName]) {
            this._restoreDictionary[elementClassName](element);
            delete this._restoreDictionary[elementClassName];
        }
    }
}

;// external "DevExpress.data.ArrayStore"
const external_DevExpress_data_ArrayStore_namespaceObject = DevExpress.data.ArrayStore;
var external_DevExpress_data_ArrayStore_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_ArrayStore_namespaceObject);
;// ./node_modules/devexpress-reporting/designer/widgets/dataSourceSelectBox.js




class DataSourceSelectBox extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    static createDataSource(values) {
        const store = new (external_DevExpress_data_ArrayStore_default())(values);
        const options = { store: store, pageSize: 20, paginate: true };
        return new (external_DevExpress_data_DataSource_default())(options);
    }
    getValues() {
        if (!this.dataSource)
            this._disposables.push(this.dataSource = external_ko_namespaceObject.computed(() => DataSourceSelectBox.createDataSource(this._get('values'))));
        return this.dataSource;
    }
}

;// ./node_modules/devexpress-reporting/designer/localization/localizationService.js


class TranslationFactory {
    constructor() {
        this._services = {};
    }
    getFirstRegistered() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(Object.keys(this._services), (serviseKey) => this._services[serviseKey].onRequest !== undefined);
    }
    getTranslations(texts, destinationLanguage) {
        const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred.when(Object.keys(this._services).map((serviceName) => this.translate(serviceName, texts, destinationLanguage))).done((results) => {
            $deferred.resolve([].concat(results));
        });
        return $deferred;
    }
    translate(name, texts, destinationLanguage) {
        if (!this._services[name])
            return;
        const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        external_jQuery_namespaceObject.ajax(this._services[name].onRequest(texts, destinationLanguage)).done((result) => {
            $deferred.resolve({ name, texts: this._services[name].onResponse(result) });
        }).fail(() => $deferred.reject());
        return $deferred.promise();
    }
    register(name, service) {
        this._services[name] = service;
    }
    unregister(name) {
        delete this._services[name];
    }
}
const _translationFactory = new TranslationFactory();
function registerTranslationService(name, service) {
    _translationFactory.register(name, service);
}
function unregisterTranslationService(name) {
    _translationFactory.unregister(name);
}

;// ./node_modules/devexpress-reporting/designer/localization/_localizationEditor.js












class LocalizationEditor extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _uncollapseParent(newVal) {
        const parent = newVal.parentModel();
        if (!parent)
            return;
        if (parent instanceof BandViewModel) {
            parent.expanded(true);
        }
        this._uncollapseParent(parent);
    }
    _subscribeFocused() {
        return this._options.selection.focused.subscribe((newVal) => {
            if (newVal) {
                this._uncollapseParent(newVal.getControlModel());
                this._options.controlScrollingTool.scrollToControl(newVal);
            }
        });
    }
    _getDefaultLanguageItems() {
        return this._options.report()._localization.items.get(external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture).properties;
    }
    dispose() {
        super.dispose();
        this.localizationItems().forEach(x => x.dispose());
        this.localizationItems.removeAll();
        this._autoScrollingSubscription && this._autoScrollingSubscription.dispose();
        this._options = null;
        this.language = null;
        this.searchBox(null);
        this._selectionDisabled = null;
        this.translateHelper.dispose();
    }
    _isLocalizableControl(x) {
        if (x instanceof XRCheckBoxViewModel) {
            return x.glyphAlignment() !== 'Center';
        }
        return true;
    }
    _shouldLocalizeReportControl(control) {
        return control.getLocalizationProperties && control['text'] && !control.hasDataBindingByName()
            && this._isLocalizableControl(control) || this._isLocalizableType(control);
    }
    _isLocalizableType(control) {
        return control instanceof XRChartViewModel
            || control instanceof Parameter
            || control instanceof GroupLayoutItem;
    }
    _createLocalizationItem(component, localizedProperty, defaultProperties) {
        const displayName = external_ko_namespaceObject.unwrap(component.name) + '.' + localizedProperty.propertyName;
        const _defaultText = external_ko_namespaceObject.observable(localizedProperty.value());
        if (!this.isDefaultLanguage()) {
            const defaultTextProperty = defaultProperties.filter(x => x.component === component && x.propertyName === localizedProperty.propertyName)[0];
            _defaultText(defaultTextProperty && defaultTextProperty.value);
        }
        return {
            component,
            displayName: displayName,
            defaultText: external_ko_namespaceObject.computed({
                read: () => _defaultText(),
                write: (newVal) => {
                    _defaultText(newVal);
                    if (this.isDefaultLanguage())
                        localizedProperty.value(newVal);
                }
            }),
            isDefaultLanguage: () => this.isDefaultLanguage(),
            visible: external_ko_namespaceObject.computed(() => {
                const regex = new RegExp(this.textToSearch(), 'gi');
                return [_defaultText(), localizedProperty.value(), displayName].some(x => regex.test(x));
            }),
            dispose: function () {
                this.defaultText.dispose();
                this.visible.dispose();
            },
            localizedText: localizedProperty.value,
            multiline: component['multiline']
        };
    }
    _updateLocalizationItems() {
        const defaultProperties = this._getDefaultLanguageItems();
        const localizationItems = [];
        this._options.report().enumerateComponents().filter(x => this._shouldLocalizeReportControl(x)).forEach((control) => {
            control.getLocalizationProperties().forEach(property => {
                const propertyName = property.info.propertyName;
                if (this._allowedPropertyNames.indexOf(propertyName) !== -1) {
                    localizationItems.push(this._createLocalizationItem(control, property, defaultProperties));
                }
            });
        });
        this.localizationItems(localizationItems);
    }
    applyLocalization(serviceName) {
        if (this.language() !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture) {
            this.showLoadIndicator(true);
            const textCollection = this.localizationItems().reduce((result, item) => {
                if (item.visible())
                    result.push(item.localizedText);
                return result;
            }, []);
            _translationFactory.translate(serviceName, textCollection.map(x => x()), this.language()).done((result) => {
                result.texts.forEach((val, i) => {
                    textCollection[i](val);
                });
                this.showLoadIndicator(false);
            }).fail(() => {
                this.showLoadIndicator(false);
            });
        }
    }
    clearLocalization() {
        this._options.report().clearLocalization(this.language());
    }
    getRegisteredService() {
        return _translationFactory.getFirstRegistered();
    }
    isDefaultLanguage() {
        return this.language() === external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture;
    }
    constructor(_options) {
        super();
        this._options = _options;
        this._allowedPropertyNames = ['text', 'legendText', 'axisLabelText', 'legendTextPattern', 'description', 'title'];
        this.defaultLanguageText = () => (0,external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures)()[external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture];
        this.currentLanguageText = () => (0,external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures)()[this.language()];
        this.propertiesHeaderText = () => (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Property', 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Property');
        this.localizationItems = external_ko_namespaceObject.observableArray();
        this.textToSearch = external_ko_namespaceObject.observable('');
        this.searchPlaceholder = () => (0,external_DevExpress_Analytics_Internal_namespaceObject.searchPlaceholder)();
        this.searchBox = external_ko_namespaceObject.observable(null);
        this.isSearching = external_ko_namespaceObject.observable(false);
        this.getResizableOptions = external_DevExpress_Analytics_Internal_namespaceObject.getResizableOptions;
        this.isVisible = external_ko_namespaceObject.observable(false);
        this.width = external_ko_namespaceObject.observable(500);
        this.showLoadIndicator = external_ko_namespaceObject.observable(false);
        this.getLoadPanelPosition = (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).closest('.dxrd-localization-editor')[0];
        this._disposables.push(this.availableCultures = DataSourceSelectBox.createDataSource(Object.keys((0,external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures)()).map((key) => {
            return { value: key, displayValue: (0,external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures)()[key] };
        })));
        this.translateHelper = new TranslateHelper();
    }
    start() {
        if (this._options.controlScrollingTool) {
            this._autoScrollingSubscription = this._subscribeFocused();
        }
        this.language = this._options.report().language;
        this._updateLocalizationItems();
        this._options.selection.updateSelection(this._options.report().surface);
        this._selectionDisabled = this._options.selection.disabled();
        this._options.selection.disabled(true);
        this.isVisible(true);
    }
    finish() {
        this._autoScrollingSubscription && this._autoScrollingSubscription.dispose();
        this.localizationItems().forEach(x => x.dispose());
        this.localizationItems.removeAll();
        this._options.selection.disabled(this._selectionDisabled);
        this.language = null;
        this._selectionDisabled = null;
        this.searchBox(null);
        this.isVisible(false);
    }
    onSelectionChanged(e) {
        if (e.addedItems[0])
            this._options.selection.updateSelection(e.addedItems[0].component.surface);
        else
            this._options.selection.clear();
    }
    onItemGotFocus(e) {
        if (!e.model.component.surface?.selected())
            this._options.selection.updateSelection(e.model.component.surface);
    }
    switchSearchBox() {
        if (this.isSearching()) {
            this.textToSearch('');
        }
        this.isSearching(!this.isSearching());
    }
}

;// ./node_modules/devexpress-reporting/designer/localization/_localiziblePropertiesAccessibilityProvider.js

class LocaliziblePropertiesAccessibilityProvider extends external_DevExpress_Analytics_Internal_namespaceObject.PropertiesAccessibilityProvider {
    constructor(isDefaultLanguage) {
        super();
        this.isDefaultLanguage = isDefaultLanguage;
    }
    isPropertyVisible(editor) {
        const visible = super.isPropertyVisible(editor);
        if (visible) {
            if (!this.isDefaultLanguage()) {
                const info = editor._get('info');
                const hasLocalizedChild = () => info.info && info.info.length != 0 && info.info.filter(childProperty => !!childProperty.localizable).length != 0;
                return !!info.localizable || hasLocalizedChild() || this._hasLocalizedParent(editor._get('_parent'));
            }
        }
        return visible;
    }
    _hasLocalizedParent(parent) {
        if (!parent)
            return false;
        if (parent._get('info').localizable)
            return true;
        return this._hasLocalizedParent(parent._get('_parent'));
    }
}

;// ./node_modules/devexpress-reporting/designer/services/_reportPreviewService.js




class ReportPreviewService {
    static initializePreview(report) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'initializePreview', JSON.stringify({
            layout: JSON.stringify({ 'XtraReportsLayoutSerializer': report.serialize() }),
            culture: report.isLocalized() && report.language() !== language.defaultVal ? report.language() : ''
        }), external_DevExpress_Reporting_Viewer_Internal_namespaceObject.PreviewRequestWrapper.getProcessErrorCallback());
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pageId.js

const LegacyReportWizardPageId = {
    ChooseDataMemberPage: 'chooseDataMemberPage',
    SelectColumnsPage: 'selectColumnsPage',
    AddGroupingLevelPage: 'addGroupingLevelPage',
    ChooseSummaryOptionsPage: 'chooseSummaryOptionsPage',
    ChooseReportLayoutPage: 'chooseReportLayoutPage',
    ChooseReportStylePage: 'chooseReportStylePage'
};
const ReportWizardPageId = {
    SelectReportTypePage: 'selectReportTypePage',
    ChooseAvailableDataSourcePage: 'chooseAvailableDataSourcePage',
    SelectLabelTypePage: 'selectLabelTypePage',
    CustomizeLabelPage: 'customizeLabelPage',
    SelectDataMembersPage: 'selectDataMembersPage',
    AddGroupingLevelPage: 'addGroupingLevelPage',
    ChooseSummaryOptionsPage: 'chooseSummaryOptionsPage',
    ConfigureReportPageSettingsPage: 'configureReportPageSettingsPage',
    ChooseReportColorSchemePage: 'chooseReportColorSchemePage',
    SetReportTitlePage: 'setReportTitlePage',
};
const FullscreenReportWizardPageId = {
    SelectReportTypePage: ReportWizardPageId.SelectReportTypePage,
    SelectDataSourcePage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SelectDataSourcePage,
    SpecifySqlDataSourceSettingsPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage,
    SpecifyJsonDataSourceSettingsPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyJsonDataSourceSettingsPage,
    DefineReportLayoutPage: 'defineReportLayoutPage',
    DefineCrossTabPage: 'defineCrossTabPage',
    SpecifyPageSettingsPage: 'specifyPageSettingsPage',
    SpecifyLabelSettingsPage: 'specifyLabelSettingsPage',
};
const FullscreenReportWizardSectionId = {
    ChooseAvailableDataSourcePage: ReportWizardPageId.ChooseAvailableDataSourcePage,
    SelectLabelTypePage: ReportWizardPageId.SelectLabelTypePage,
    CustomizeLabelPage: ReportWizardPageId.CustomizeLabelPage,
    SelectDataMembersPage_Members: 'selectDataMembersPage_Members',
    SelectDataMembersPage_Fields: 'selectDataMembersPage_Fields',
    SelectSingleDataMemberPage: 'selectSingleDataMembersPage',
    AddGroupFieldsPage: ReportWizardPageId.AddGroupingLevelPage,
    AddSummaryFieldsPage: ReportWizardPageId.ChooseSummaryOptionsPage,
    ConfigurePageSettingsPage: ReportWizardPageId.ConfigureReportPageSettingsPage,
    SpecifyReportTitlePage: ReportWizardPageId.SetReportTitlePage,
    ChooseDataSourceTypePage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.ChooseDataSourceTypePage,
    ChooseJsonSchemaPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.ChooseJsonSchemaPage,
    SpecifyJsonConnectionPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.SpecifyJsonConnectionPage,
    ConfigureMasterDetailRelationshipsPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.ConfigureMasterDetailRelationshipsPage,
    ConfigureQueryParametersPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.ConfigureQueryParametersPage,
    ChooseSqlConnectionPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.ChooseSqlConnectionPage,
    ConfigureQueryPage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.ConfigureQueryPage,
    ChooseJsonSourcePage: external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardSectionId.ChooseJsonSourcePage,
    ConfigureCrossTabColumnsPage: 'configureCrossTabColumnsPage',
    ConfigureCrossTabRowsPage: 'configureCrossTabRowsPage',
    ConfigureCrossTabDataPage: 'configureCrossTabDataPage'
};

;// ./node_modules/devexpress-reporting/designer/wizard/pages/chooseAvailableDataSourcePage.js






function _convertToStateDataSource(dataSource) {
    let objStorageItem;
    if (dataSource.data instanceof DataFederationDataSource) {
        objStorageItem = dataSource.data.getSerializableModel().serialize();
    }
    else {
        objStorageItem = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(dataSource.data);
    }
    return JSON.stringify((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, dataSource, { data: JSON.stringify(objStorageItem) }));
}
function _restoreDataSourceFromState(serializedDataSource) {
    const dataSource = JSON.parse(serializedDataSource);
    if (dataSource) {
        const parsedData = JSON.parse(dataSource.data);
        if (parsedData.dataSources) {
            const serializableModel = new SerializableDataFederationDataSource(null, parsedData);
            dataSource.data = serializableModel.dataSource;
            serializableModel.dispose();
        }
        else {
            dataSource.data = createNewObjectItem(JSON.parse(dataSource.data));
        }
    }
    return dataSource;
}
class ChooseAvailableDataSourcePage extends external_DevExpress_Analytics_Wizard_namespaceObject.ChooseAvailableItemPage {
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            sqlDataSourceWizard: {},
            jsonDataSourceWizard: {},
            dataSource: this.selectedOperation().createNew ? null : _convertToStateDataSource(this.selectedItems()[0])
        }).promise();
    }
    _getSelectedItem(state) {
        const availableDataSources = this.items() || [];
        if (state.dataSource) {
            const dataSource = _restoreDataSourceFromState(state.dataSource);
            return availableDataSources.filter(x => x.id === dataSource.id || x.ref === dataSource.ref)[0];
        }
        else if (availableDataSources.length === 0) {
            return null;
        }
        else {
            return availableDataSources[0];
        }
    }
    get createNewOperationText() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("No, I'd like to create a new data source", 'AnalyticsCoreStringId.Wizard_CreateNewDataSource');
    }
}
function _registerChooseAvailableDataSourcePage(factory, reportWizardOptions) {
    factory.registerMetadata(ReportWizardPageId.ChooseAvailableDataSourcePage, {
        setState: (data, state) => {
            state.dataSource = data.dataSource;
            state.sqlDataSourceWizard = data.sqlDataSourceWizard;
            state.jsonDataSourceWizard = data.jsonDataSourceWizard;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.sqlDataSourceWizard = defaultState.sqlDataSourceWizard;
            state.jsonDataSourceWizard = defaultState.jsonDataSourceWizard;
            state.dataSource = defaultState.dataSource;
        },
        create: () => {
            return new ChooseAvailableDataSourcePage(reportWizardOptions.dataSources, reportWizardOptions.canCreateDataSource);
        },
        template: 'dxrd-page-selectitems',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Do you want to use an existing data source?', 'AnalyticsCoreStringId.Wizard_UseExisting_DataSource')
    });
}

;// ./node_modules/devexpress-reporting/designer/services/_reportWizardService.js







class ReportWizardService {
    static createNewWizardRequest(reportWizardState, requestType, state, customizeWizardModelAction, oldReportInfo) {
        let dataSourceJSON = null;
        let dataSources = [];
        reportWizardState.dataSource = reportWizardState.dataSource || reportWizardState.newDataSource;
        if (reportWizardState.dataSource) {
            if (reportWizardState.dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Federation) {
                const federationModel = (JSON.parse(JSON.parse(reportWizardState.dataSource).data));
                dataSourceJSON = JSON.stringify(federationModel.dataSource);
                dataSources = Object.keys(federationModel.dataSources).map(key => JSON.stringify(federationModel.dataSources[key]));
            }
            else {
                dataSourceJSON = JSON.parse(reportWizardState.dataSource).data;
            }
        }
        const wizardModel = new requestType(reportWizardState);
        customizeWizardModelAction && customizeWizardModelAction(wizardModel);
        const requestJson = JSON.stringify({
            reportModel: wizardModel,
            dataSource: dataSourceJSON,
            dataSources: dataSources,
            oldReport: oldReportInfo?.json,
            useInitialDataSource: oldReportInfo?.useInitialDataSource,
            state: state,
            colorScheme: reportWizardState.colorScheme && (reportWizardState.colorScheme.name === 'Custom' ? reportWizardState.colorScheme.baseColor : reportWizardState.colorScheme.name),
            customData: {
                data: reportWizardState.customData,
                reportTemplateID: reportWizardState.reportTemplateID
            }
        });
        return requestJson;
    }
    static generateReportFromWizardState(reportWizardState, requestType, state, customizeWizardModelAction, oldReportInfo) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'generateReportFromWizardModel', this.createNewWizardRequest(reportWizardState, requestType, state, customizeWizardModelAction, oldReportInfo), ReportStorageWeb.getErrorMessageHandler());
    }
    static getLabelReportWizardData() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'labelReportWizardData', '');
    }
    static createNewJsonDataSource(state, createJsonCallback) {
        const jsonDataSource = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreJsonDataSourceFromState)(state);
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        QBRequestWrapper().saveJsonSource(state.newConnectionName, jsonDataSource).done((connectionName) => {
            state.jsonSource = null;
            state.connectionName = connectionName;
            createJsonCallback((0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreJsonDataSourceFromState)(state))
                .done(result => {
                result.data = createNewObjectItem(result.data);
                deferred.resolve(_convertToStateDataSource(result));
            })
                .fail(() => deferred.reject());
        }).fail(() => deferred.reject());
        return deferred.promise();
    }
}

;// ./node_modules/devexpress-reporting/designer/utils/reportDesignerElements.js

const ReportDesignerElements = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, external_DevExpress_Analytics_Internal_namespaceObject.DesignerBaseElements, {
    MenuButton: 'dxrd-menubutton-template',
    NavigationPanel: 'dxrd-navigation-panel-template',
    ReportDialog: 'dxrd-report-dialog-template',
    ChartDialog: 'dxrd-chart-designer-popup',
    ReportConverterDialog: 'dxrd-report-dialog-converter-template',
    Parameters: 'dxrd-report-parameters-dialogs',
    ContextMenu: 'dxrd-context-menu'
});
const ReportDesignerAddOns = {
    Preview: 'dxrd-report-preview',
    ReportWizard: 'dx-wizard-newlayout#report',
    ReportWizardFullscreen: 'dx-wizard-fullscreen#report',
    LocalizationEditor: 'dxrd-localization-editor',
    ErrorPanel: 'dxrd-error-panel',
    DataSourceWizard: 'dx-wizard-newlayout#data-source',
    MultiQueryDataSourceWizard: 'dx-wizard-newlayout#multiquery-data-source',
    MultiQueryDataSourceWizardFullscreen: 'dx-wizard-fullscreen#multiquery-data-source',
    MasterDetailEditor: 'dxrd-masterDetail-editor',
    FederatedManageQueriesEditor: 'dxrd-federated-manageQueries-editor',
    FederatedQueriesPopups: 'dx-querybuilder-federation-popup-templates',
    ScriptEditor: 'dxrd-scripts',
    ExpressionEditor: 'dxrd-activated-expressioneditor'
};

;// ./node_modules/devexpress-reporting/designer/bands/xrGroupBand.js



class GroupHeaderBand extends BandViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.groupFields);
        this.resetObservableArray(this.groupFields);
    }
    constructor(band, parent, serializer) {
        super(band, parent, serializer);
        this.groupFields = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(band.GroupFields, (field) => { return new GroupFieldModel(field, serializer); });
        this.sortingSummary.getPath = (propertyName) => {
            if (propertyName === 'fieldName') {
                return this.getPath('groupFields');
            }
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/xrMarginBands.js


class TopMarginBand extends BandViewModel {
    initHeight() {
        this.height = this.parentModel() && this.root.margins.top || external_ko_namespaceObject.observable(0);
        super.initHeight();
    }
}
class BottomMarginBand extends BandViewModel {
    initHeight() {
        this.height = this.parentModel() && this.root.margins.bottom || external_ko_namespaceObject.observable(0);
        super.initHeight();
    }
}
class BottomMarginSurface extends BandSurface {
    getBackgroundRect() {
        const top = this.parent.pageHeight() - this._height(), bottom = undefined, height = this._height();
        return { top, bottom, height };
    }
    get parent() {
        return this._getParent();
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/xrPageBand.js

class PageFooterSurface extends BandSurface {
    getBackgroundRect() {
        const bottom = undefined, height = this._height(), top = this.parent.pageHeight() - this._totalHeight() - this.parent.margins.bottom();
        return { top, bottom, height };
    }
    get parent() {
        return this._getParent();
    }
}

;// ./node_modules/devexpress-reporting/designer/bands/xrVerticalDetailBand.js



class VerticalDetailBandViewModel extends VerticalBandViewModel {
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.sortFields);
        this.resetObservableArray(this.sortFields);
    }
    preInit(band, parent, serializer) {
        this.sortFields = (0,external_DevExpress_Analytics_Utils_namespaceObject.deserializeArray)(band.SortFields, (field) => { return new GroupFieldModel(field, serializer); });
    }
}

;// ./node_modules/devexpress-reporting/designer/utils/_registerControls.js























































































const canPasteInBand = (dropTarget) => {
    const model = dropTarget.getControlModel();
    return model instanceof BandViewModel;
};
function _registerControls_registerControls(fieldListProvider) {
    controlsFactory(new ControlsFactory(fieldListProvider));
    controlsFactory().registerControl('Unknown', {
        info: unknownSerializationsInfo,
        type: UnknownViewModel,
        defaultVal: {
            '@SizeF': '100,23'
        },
        nonToolboxItem: true,
        surfaceType: XRControlSurface
    });
    controlsFactory().registerControl('XRLabel', {
        info: labelSerializationsInfo,
        toolboxIndex: 0,
        defaultVal: {
            '@Padding': defaultTextPadding,
            '@Multiline': 'true',
            '@SizeF': '100,23'
        },
        group: 'common',
        defaultBindingName: 'Text',
        surfaceType: XRTextControlSurfaceBase,
        type: XRControlViewModel,
        popularProperties: popularPropertiesLabel,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Label', 'DevExpress.XtraReports.UI.XRLabel')
    });
    controlsFactory().registerControl('XRCheckBox', {
        info: checkboxSerializationsInfo,
        toolboxIndex: 1,
        group: 'common',
        type: XRCheckBoxViewModel,
        surfaceType: XRCheckBoxSurface,
        defaultVal: {
            '@SizeF': '100,23',
            '@Padding': defaultTextPadding
        },
        defaultBindingName: 'CheckBoxState',
        popularProperties: popularPropertiesCheckBox,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Check Box', 'DevExpress.XtraReports.UI.XRCheckBox')
    });
    controlsFactory().registerControl('XRRichText', {
        info: richTextSerializationsInfo,
        toolboxIndex: 2,
        group: 'common',
        defaultVal: {
            '@SizeF': '100,23',
            '@Padding': defaultTextPadding
        },
        surfaceType: getRichEditSurface()(),
        type: XRRichViewModel,
        defaultBindingName: 'Rtf',
        popularProperties: popularPropertiesRichText,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Rich Text', 'DevExpress.XtraReports.UI.XRRichText')
    });
    controlsFactory().registerControl('XRPictureBox', {
        info: pictureBoxSerializationsInfo,
        toolboxIndex: 3,
        group: 'common',
        defaultVal: {
            '@SizeF': '100,100',
            '@Sizing': 'ZoomImage',
        },
        type: XRPictureBoxViewModel,
        surfaceType: XRPictureBoxSurface,
        defaultBindingName: 'ImageSource',
        popularProperties: popularPropertiesPicture,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Picture Box', 'DevExpress.XtraReports.UI.XRPictureBox')
    });
    controlsFactory().registerControl('XRPanel', {
        info: panelSerializationsInfo,
        toolboxIndex: 4,
        group: 'common',
        defaultVal: {
            '@SizeF': '300,75'
        },
        surfaceType: XRControlSurface,
        type: XRControlViewModel,
        isContainer: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Panel', 'DevExpress.XtraReports.UI.XRPanel')
    });
    controlsFactory().registerControl('XRTable', {
        info: tableSerializationsInfo,
        group: 'common',
        type: XRTableControlViewModel,
        toolboxIndex: 5,
        defaultVal: {
            '@SizeF': '300,25',
            '@Padding': defaultTextPadding,
            'Rows': {
                'Item1': {
                    '@ControlType': 'XRTableRow',
                    '@Weight': '1',
                    'Cells': {
                        'Item1': {
                            '@ControlType': 'XRTableCell',
                            '@Weight': '1',
                            '@Multiline': 'true'
                        },
                        'Item2': {
                            '@ControlType': 'XRTableCell',
                            '@Weight': '1',
                            '@Multiline': 'true'
                        },
                        'Item3': {
                            '@ControlType': 'XRTableCell',
                            '@Weight': '1',
                            '@Multiline': 'true'
                        }
                    }
                }
            }
        },
        surfaceType: XRTableSurface,
        popularProperties: popularPropertiesTable,
        isContainer: true,
        isPasteDeny: true,
        canDrop: (dropTarget) => dropTarget.getControlModel().controlType !== 'XRTableRow',
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table', 'DevExpress.XtraReports.UI.XRTable')
    });
    controlsFactory().registerControl('XRCharacterComb', {
        info: characterCombSerializationsInfo,
        toolboxIndex: 6,
        group: 'common',
        defaultVal: {
            '@SizeF': '200,80',
            '@Multiline': 'true'
        },
        defaultBindingName: 'Text',
        surfaceType: XRCharacterCombSurface,
        type: XRCharacterComb,
        popularProperties: popularPropertiesLabel,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Character Comb', 'DevExpress.XtraReports.UI.XRCharacterComb')
    });
    controlsFactory().registerControl('XRLine', {
        info: lineSerializationsInfo,
        group: 'graphics',
        toolboxIndex: 7,
        type: XRControlViewModel,
        surfaceType: XRLineSurface,
        defaultVal: {
            '@SizeF': '100,23',
        },
        popularProperties: popularPropertiesLine,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Line', 'DevExpress.XtraReports.UI.XRLine')
    });
    controlsFactory().registerControl('XRShape', {
        info: shapeSerializationsInfo,
        toolboxIndex: 8,
        group: 'graphics',
        defaultVal: {
            '@SizeF': '100,100'
        },
        defaultBindingName: 'Tag',
        type: XRShapeViewModel,
        surfaceType: XRShapeControlSurface,
        popularProperties: popularPropertiesShape,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Shape', 'DevExpress.XtraReports.UI.XRShape')
    });
    controlsFactory().registerControl('XRBarCode', {
        info: barcodeSerializationsInfo,
        toolboxIndex: 9,
        group: 'graphics',
        defaultVal: {
            '@SizeF': '200,75',
            '@Padding': '10,10,0,0,100',
            'Symbology': {
                '@Name': 'Code128'
            },
            '@Text': ''
        },
        defaultBindingName: 'Text',
        surfaceType: XRUnknownControlSurface,
        type: XRBarCodeViewModel,
        popularProperties: popularPropertiesBarCode,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Bar Code', 'DevExpress.XtraReports.UI.XRBarCode')
    });
    controlsFactory().registerControl('XRZipCode', {
        info: zipCodeSerializationInfo,
        type: XRControlViewModel,
        nonToolboxItem: true,
        group: 'graphics',
        surfaceType: XRZipCodeSurface,
        toolboxIndex: 10,
        defaultVal: {
            '@SizeF': '100,23'
        },
        popularProperties: popularPropertiesZipCode,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Zip Code', 'DevExpress.XtraReports.UI.XRZipCode')
    });
    controlsFactory().registerControl('XRChart', {
        info: xrChartSerializationInfo,
        group: 'complex',
        toolboxIndex: 11,
        defaultVal: {
            '@SizeF': '400,300',
            'Chart': {
                'Diagram': {
                    '@TypeNameSerializable': 'XYDiagram',
                    'AxisY': {
                        '@VisibleInPanesSerializable': '-1'
                    },
                    'AxisX': {
                        '@VisibleInPanesSerializable': '-1'
                    }
                },
                'DataContainer': {}
            }
        },
        defaultBindingName: 'Tag',
        type: XRChartViewModel,
        surfaceType: XRChartSurface,
        popularProperties: ['dataSource', 'dataMember', 'controlParameters'],
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Chart', 'DevExpress.XtraReports.UI.XRChart')
    });
    controlsFactory().registerControl('XRGauge', {
        info: xrGaugeSerializationInfo,
        surfaceType: XRUnknownControlSurface,
        type: XRGaugeViewModel,
        group: 'complex',
        toolboxIndex: 12,
        defaultVal: {
            '@SizeF': '220,120'
        },
        defaultBindingName: 'Tag',
        popularProperties: popularPropertiesGauge,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Gauge', 'DevExpress.XtraReports.UI.XRGauge')
    });
    controlsFactory().registerControl('XRSparkline', {
        info: sparklineSerializationsInfo,
        toolboxIndex: 13,
        group: 'complex',
        defaultVal: {
            '@SizeF': '150,80',
            'View': {
                '@Type': 'Line'
            },
        },
        surfaceType: XRSparkLineSurface,
        defaultBindingName: 'Tag',
        type: XRSparklineViewModel,
        popularProperties: popularPropertiesSparkline,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Sparkline', 'DevExpress.XtraReports.UI.XRSparkline')
    });
    controlsFactory().registerControl('XRPivotGrid', {
        info: pivotGridSerializationsInfo,
        toolboxIndex: 14,
        group: 'complex',
        defaultVal: {
            '@ControlType': 'XRPivotGrid',
            '@SizeF': '250,120',
            'OptionsChartDataSource': {},
            'Prefilter': {},
            'OptionsPrint': {
                '@FilterSeparatorBarPadding': '3',
                '@UsePrintAppearance': 'true',
                '@PrintFilterHeaders': 'False'
            },
            'OptionsView': {}
        },
        canPaste: canPasteInBand,
        defaultBindingName: 'Tag',
        type: XRPivotGridViewModel,
        surfaceType: XRPivotGridSurface,
        nonToolboxItem: DefaultCrossTabControl() == DefaultCrossTabControlEnum.XRCrossTab,
        popularProperties: ['dataSource', 'dataMember'],
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pivot Grid', 'DevExpress.XtraReports.UI.XRPivotGrid')
    });
    controlsFactory().registerControl('XRCrossTab', {
        info: crossTabSerializationInfo,
        toolboxIndex: 14,
        type: XRCrossTabViewModel,
        group: 'complex',
        defaultVal: {
            '@ControlType': 'XRCrossTab',
            '@SizeF': '200,50',
            'ColumnDefinitions': {
                'Item1': {},
                'Item2': {}
            },
            'RowDefinitions': {
                'Item1': {},
                'Item2': {}
            },
            'Cells': {
                'Item1': { '@ControlType': 'XRCrossTabCell', '@ColumnIndex': '0', '@RowIndex': '0', '@Text': null },
                'Item2': { '@ControlType': 'XRCrossTabCell', '@ColumnIndex': '1', '@RowIndex': '1', '@Text': null },
                'Item3': { '@ControlType': 'XRCrossTabCell', '@ColumnIndex': '1', '@RowIndex': '0', '@Text': null },
                'Item4': { '@ControlType': 'XRCrossTabCell', '@ColumnIndex': '0', '@RowIndex': '1', '@Text': null }
            }
        },
        surfaceType: XRCrossTabSurface,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cross Tab', 'DevExpress.XtraReports.UI.XRCrossTab'),
        nonToolboxItem: DefaultCrossTabControl() == DefaultCrossTabControlEnum.XRPivotGrid,
        popularProperties: ['dataSource', 'dataMember', 'layoutOptions', 'printOptions', 'controlParameters', 'filterString']
    });
    controlsFactory().registerControl('XRCrossTabCell', {
        info: cellserializtionInfo,
        type: XRCrossTabCellViewModel,
        popularProperties: popularPropertiesCrossTabCell,
        nonToolboxItem: true,
        isDeleteDeny: true,
        group: 'complex',
        defaultVal: {
            '@ControlType': 'XRCrossTabCell',
            '@Text': '',
            '@TextFormatString': ''
        },
        surfaceType: XRCellsurface,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cross Tab Cell', 'DevExpress.XtraReports.UI.CrossTab.XRCrossTabCell')
    });
    controlsFactory().registerControl('XRSubreport', {
        info: subreportSerializationsInfo,
        toolboxIndex: 15,
        group: 'complex',
        defaultVal: {
            '@SizeF': '100,23',
            'ReportSource': SubreportViewModel.defaultReport
        },
        surfaceType: XRSubreportSurface,
        type: XRSubreportViewModel,
        canPaste: canPasteInBand,
        popularProperties: ['name', 'reportSourceUrl'],
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Sub-Report', 'DevExpress.XtraReports.UI.XRSubreport')
    });
    controlsFactory().registerControl('XRPdfContent', {
        info: pdfContentSerializationInfo,
        toolboxIndex: 16,
        group: 'complex',
        defaultVal: {
            '@HeightF': '23'
        },
        defaultBindingName: 'SourceUrl',
        surfaceType: XRPdfContentSurface,
        type: XRPdfContentViewModel,
        popularProperties: popularPropertiesPdfContent,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('PDF Content', 'DevExpress.XtraReports.UI.XRPdfContent'),
        canDrop: (dropTarget, dragFrom) => {
            const bandModel = getNearestBand(dropTarget.getControlModel());
            return bandModel && !_isMarginBand(bandModel) && !_isPageBand(bandModel);
        },
        canPaste: canPasteInBand
    });
    controlsFactory().registerControl('XRPdfSignature', {
        info: pdfSignatureInfo,
        type: XRPdfSignatureModel,
        toolboxIndex: 17,
        group: 'complex',
        defaultVal: {
            '@SizeF': '200,100',
            'SignatureOptions': {
                '@DisplayDocumentSignature': 'false'
            }
        },
        surfaceType: XRPdfSignatureSurface,
        popularProperties: ['signatureOptions'],
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('PDF Signature', 'DevExpress.XtraReports.UI.XRPdfSignature')
    });
    controlsFactory().registerControl('XRTableOfContents', {
        toolboxIndex: 18,
        info: tocSerializationsInfo,
        group: 'misc',
        surfaceType: XRTableOfContentsSurface,
        type: XRTableOfContentsViewModel,
        defaultVal: {
            '@ControlType': 'XRTableOfContents',
            'LevelTitle': {
                '@Text': 'Title',
                '@Height': '23',
                '@Padding': '0,0,0,0,100'
            },
            'LevelDefault': {
                '@Height': '23',
                '@Padding': '0,0,0,0,100'
            }
        },
        canDrop: (dropTarget, dragFrom) => {
            const bandModel = getNearestBand(dropTarget.getControlModel());
            if (!bandModel)
                return false;
            if (!dragFrom) {
                const reportModel = bandModel.root;
                return reportModel.canAddToC();
            }
            else if (isHeaderOrFooterBandType(bandModel)) {
                const toc = getExistTableOfContents(bandModel);
                return !toc || toc === dragFrom;
            }
            return false;
        },
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table of Contents', 'DevExpress.XtraReports.UI.XRTableOfContents')
    });
    controlsFactory().registerControl('XRPageInfo', {
        info: pageInfoSerializationsInfo,
        type: XRPageInfoViewModel,
        surfaceType: XRPageInfoSurface,
        toolboxIndex: 19,
        group: 'misc',
        defaultVal: {
            '@SizeF': '100,23',
            '@Padding': defaultTextPadding
        },
        popularProperties: popularPropertiesPageInfo,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Info', 'DevExpress.XtraReports.UI.XRPageInfo')
    });
    controlsFactory().registerControl('XRPageBreak', {
        info: pageBreakSerializationsInfo,
        type: XRControlViewModel,
        surfaceType: XRPageBreakSurface,
        toolboxIndex: 20,
        group: 'misc',
        defaultVal: {
            '@SizeF': '30,2'
        },
        canPaste: canPasteInBand,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Break', 'DevExpress.XtraReports.UI.XRPageBreak')
    });
    controlsFactory().registerControl('XRCrossBandLine', {
        info: crossBandLineControlSerializationsInfo,
        type: XRCrossBandControlViewModel,
        toolboxIndex: 21,
        group: 'misc',
        defaultVal: {
            '@WidthF': '9.38',
            '@StartPointFloat': '0,0',
            '@EndPointFloat': '0,50'
        },
        size: '9.38, 50',
        surfaceType: XRCrossBandSurface,
        popularProperties: popularPropertiesCrossLine,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cross-band Line', 'DevExpress.XtraReports.UI.XRCrossBandLine')
    });
    controlsFactory().registerControl('XRCrossBandBox', {
        info: crossBandBoxControlSerializationsInfo,
        type: XRCrossBandControlViewModel,
        toolboxIndex: 22,
        group: 'misc',
        defaultVal: {
            '@WidthF': '50',
            '@StartPointFloat': '0,0',
            '@EndPointFloat': '0,50'
        },
        size: '50,50',
        popularProperties: ['borderColor', 'visible', 'canPublish', 'borders'],
        surfaceType: XRCrossBandSurface,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cross-band Box', 'DevExpress.XtraReports.UI.XRCrossBandBox')
    });
    controlsFactory().registerControl('DevExpress.XtraReports.UI.XtraReport', {
        info: reportSerializationInfo,
        nonToolboxItem: true,
        surfaceType: ReportSurface,
        popularProperties: popularPropertiesReport,
        isCopyDeny: true,
        isDeleteDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report', 'DevExpress.XtraReports.UI.XtraReport')
    });
    controlsFactory().registerControl('TopMarginBand', {
        info: bandSerializationInfo.concat(commonBandScripts),
        type: TopMarginBand,
        nonToolboxItem: true,
        surfaceType: BandSurface,
        isContainer: true,
        isCopyDeny: true,
        isDeleteDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Top Margin', 'DevExpress.XtraReports.UI.TopMarginBand')
    });
    controlsFactory().registerControl('BottomMarginBand', {
        info: bandSerializationInfo.concat(commonBandScripts),
        type: BottomMarginBand,
        nonToolboxItem: true,
        surfaceType: BottomMarginSurface,
        isContainer: true,
        isCopyDeny: true,
        isDeleteDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Bottom Margin', 'DevExpress.XtraReports.UI.BottomMarginBand')
    });
    controlsFactory().registerControl('DetailReportBand', {
        info: detailReportBandSerializationInfo,
        type: DetailReportBand,
        nonToolboxItem: true,
        surfaceType: DetailReportBandSurface,
        popularProperties: popularPropertiesDetailReport,
        isContainer: true,
        isCopyDeny: true,
        canDrop: (dropTarget, draggableModel) => {
            const dropTargetModel = dropTarget.getControlModel();
            return (dropTargetModel.controlType === 'DevExpress.XtraReports.UI.XtraReport' || dropTargetModel.controlType === 'DetailReportBand');
        },
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Detail Report', 'DevExpress.XtraReports.UI.DetailReportBand')
    });
    controlsFactory().registerControl('DetailBand', {
        info: detailBandSerializationInfo,
        type: DetailBand,
        nonToolboxItem: true,
        surfaceType: DetailBandSurface,
        popularProperties: popularPropertiesDetail,
        isContainer: true,
        isCopyDeny: true,
        isDeleteDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Detail', 'DevExpress.XtraReports.UI.DetailBand')
    });
    controlsFactory().registerControl('SubBand', {
        info: subBandSerializationInfo,
        type: SubBandViewModel,
        nonToolboxItem: true,
        surfaceType: SubBandSurface,
        popularProperties: generalBandPopularProperties,
        isContainer: true,
        isCopyDeny: true,
        canDrop: (dropTarget, draggableModel) => {
            const dropTargetModel = dropTarget.getControlModel();
            return draggableModel.parentModel() === dropTargetModel.parentModel() && dropTargetModel.controlType === 'SubBand';
        },
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Sub-Band', 'DevExpress.XtraReports.UI.SubBand')
    });
    controlsFactory().registerControl('GroupHeaderBand', {
        info: groupHeaderBandSerializationInfo,
        type: GroupHeaderBand,
        nonToolboxItem: true,
        surfaceType: BandSurface,
        popularProperties: popularPropertiesGroupHeader,
        isContainer: true,
        isCopyDeny: true,
        canDrop: _isReorderBand,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Group Header', 'DevExpress.XtraReports.UI.GroupHeaderBand')
    });
    controlsFactory().registerControl('GroupFooterBand', {
        info: groupFooterBandSerializationInfo,
        type: BandViewModel,
        nonToolboxItem: true,
        surfaceType: BandSurface,
        popularProperties: popularPropertiesGroupFooter,
        isContainer: true,
        isCopyDeny: true,
        canDrop: _isReorderBand,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Group Footer', 'DevExpress.XtraReports.UI.GroupFooterBand')
    });
    controlsFactory().registerControl('PageHeaderBand', {
        info: pageBandSerializationInfoPageHeader,
        type: BandViewModel,
        nonToolboxItem: true,
        surfaceType: BandSurface,
        popularProperties: popularPropertiesPageHeader,
        isContainer: true,
        isCopyDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Header', 'DevExpress.XtraReports.UI.PageHeaderBand')
    });
    controlsFactory().registerControl('PageFooterBand', {
        info: pageBandSerializationInfo,
        type: BandViewModel,
        nonToolboxItem: true,
        surfaceType: PageFooterSurface,
        popularProperties: popularPropertiesPageFooter,
        isContainer: true,
        isCopyDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Page Footer', 'DevExpress.XtraReports.UI.PageFooterBand')
    });
    controlsFactory().registerControl('ReportHeaderBand', {
        info: reportHeaderBandSerializationInfo,
        type: BandViewModel,
        nonToolboxItem: true,
        surfaceType: BandSurface,
        popularProperties: popularPropertiesReportHeader,
        isContainer: true,
        isCopyDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Header', 'DevExpress.XtraReports.UI.ReportHeaderBand')
    });
    controlsFactory().registerControl('ReportFooterBand', {
        info: reportFooterBandSerializationInfo,
        type: BandViewModel,
        nonToolboxItem: true,
        popularProperties: popularPropertiesReportFooter,
        surfaceType: BandSurface,
        isContainer: true,
        isCopyDeny: true,
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Footer', 'DevExpress.XtraReports.UI.ReportFooterBand')
    });
    controlsFactory().registerControl('VerticalHeaderBand', {
        info: verticalHeaderBandSerializationInfo,
        type: VerticalBandViewModel,
        nonToolboxItem: true,
        popularProperties: popularPropertiesVerticalHeaderBand,
        surfaceType: VerticalBandSurface,
        isContainer: true,
        isCopyDeny: true
    });
    controlsFactory().registerControl('VerticalDetailBand', {
        info: verticalDetailBandSerializationInfo,
        type: VerticalDetailBandViewModel,
        nonToolboxItem: true,
        popularProperties: popularPropertiesVerticalDetailBand,
        surfaceType: VerticalBandSurface,
        isContainer: true,
        isCopyDeny: true,
        isDeleteDeny: true
    });
    controlsFactory().registerControl('VerticalTotalBand', {
        info: verticalTotalBandSerializationInfo,
        type: VerticalBandViewModel,
        nonToolboxItem: true,
        popularProperties: popularPropertiesVerticalTotalBand,
        surfaceType: VerticalBandSurface,
        isContainer: true,
        isCopyDeny: true
    });
    controlsFactory().registerControl('PivotGridField', {
        info: pivotGridFieldSerializationsInfo,
        type: PivotGridFieldViewModel,
        surfaceType: PivotGridFieldSurface,
        nonToolboxItem: true,
        popularProperties: popularPropertiesPivotGridField,
        displayName: 'PivotGridField'
    });
    controlsFactory().registerControl('XRTableRow', {
        info: tableRowSerializationsInfo,
        type: XRTableRowViewModel,
        defaultVal: {
            '@HeightF': '25',
            '@Weight': '20'
        },
        nonToolboxItem: true,
        surfaceType: XRTableRowSurface,
        isContainer: true,
        isCopyDeny: true,
        isPasteDeny: true,
        canDrop: (dropTarget) => dropTarget.getControlModel().controlType === 'XRTable',
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Row', 'DevExpress.XtraReports.UI.XRTableRow')
    });
    controlsFactory().registerControl('XRTableCell', {
        info: tableCellSerializationsInfo,
        type: XRTableCellViewModel,
        defaultVal: {
            '@Weight': '1',
            '@WidthF': '100',
            '@Multiline': 'true'
        },
        nonToolboxItem: true,
        surfaceType: XRTableCellSurface,
        popularProperties: popularPropertiesTableCell,
        isContainer: true,
        defaultBindingName: 'Text',
        isCopyDeny: true,
        canDrop: (dropTarget) => dropTarget.getControlModel().controlType === 'XRTableRow',
        displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Table Cell', 'DevExpress.XtraReports.UI.XRTableCell')
    });
    controlsFactory().registerControl('XRControl', {
        isToolboxItem: false,
        info: xrControlSerializationsInfo,
        defaultVal: {
            '@Padding': defaultTextPadding,
            '@SizeF': '100,23'
        },
        surfaceType: XRUnknownControlSurface,
        type: XRControlViewModel,
        popularProperties: [],
        displayName: 'XRControl'
    });
}

;// ./node_modules/devexpress-reporting/designer/controls/customControlViewModel.js

class CustomControlSerializableModel extends external_DevExpress_Analytics_Elements_namespaceObject.SerializableModel {
    static from(model, serializer, info) {
        return new CustomControlSerializableModel(model || {}, serializer, info);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, undefined, refs);
    }
}

;// ./node_modules/devexpress-reporting/designer/utils/_registerCustomControls.js







function registerCustomControls(controls) {
    if (!controls?.length) {
        return;
    }
    const factory = controlsFactory();
    const indexes = Object.getOwnPropertyNames(factory.controlsMap)
        .map(prop => factory.controlsMap[prop]?.toolboxIndex)
        .filter(index => index);
    let toolboxIndex = Math.max(...indexes) + 1;
    controls.forEach((control) => {
        if (!factory.getControlInfo(control.className)) {
            const info = getSerializationInfo(control.properties, `${control.className}_`);
            const meta = factory.inheritControl(control.inheritClassName, getMetaForControl(control, info, toolboxIndex++));
            factory.registerControl(control.className, meta);
            info.forEach((prop) => {
                if (groups[prop.group] === undefined) {
                    groups[prop.group] = {
                        info: [prop],
                        displayName: () => prop.group,
                    };
                }
                else {
                    groups[prop.group].info.push(prop);
                }
            });
        }
    });
}
function getMetaForControl(control, info, toolboxIndex) {
    const defaultVal = (control.initValues ?? []).reduce((result, current) => {
        result[current.Key] = current.Value;
        return result;
    }, {});
    const popularProperties = control.properties.filter(x => x.isFavorite).map(x => x.name);
    return {
        info,
        toolboxIndex,
        group: 'custom',
        surfaceType: XRUnknownControlSurface,
        displayName: control.className,
        isToolboxItem: control.showInToolbox,
        popularProperties,
        defaultVal: {
            ...defaultVal,
            '@ControlType': control.fullTypeName,
        },
    };
}
function getSerializationInfo(properties, namePrefix = '') {
    return properties
        .map(prop => {
        const info = {
            propertyName: namePrefix + prop.name,
            modelName: prop.model,
            displayName: prop.displayName,
            group: prop.category,
            defaultVal: prop.defaultValue,
            ...getEditor(prop.editor)
        };
        if (prop.editor === 'enum') {
            const enumValues = prop?.values ?? [];
            info.valuesArray = enumValues;
        }
        if (prop.editor === 'object') {
            const objectProps = prop?.properties ?? [];
            info.from = (val, serializer) => CustomControlSerializableModel.from(val, serializer, getSerializationInfo(objectProps));
            info.toJsonObject = CustomControlSerializableModel.toJson;
        }
        if (prop.editor === 'array') {
            const arrayItemProps = prop?.properties ?? [];
            const propsInfo = getSerializationInfo(arrayItemProps);
            info.template = '#dxrd-commonCollectionItem';
            info.info = propsInfo;
            info.addHandler = () => CustomControlSerializableModel.from({}, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer(), propsInfo);
        }
        return info;
    });
}
function getEditor(name) {
    if (name === 'unknown') {
        return {};
    }
    if (name === 'boolean') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('boolSelect'), from: external_DevExpress_Analytics_Utils_namespaceObject.parseBool };
    }
    if (name === 'rationalNumber') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric') };
    }
    if (name === 'irrationalNumber') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('numeric'), from: parseFloat };
    }
    if (name === 'enum') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('combobox') };
    }
    if (name === 'array') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('commonCollection'), array: true };
    }
    if (name === 'object') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor') };
    }
    if (name === 'color') {
        return { editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('customColorEditor'), from: external_DevExpress_Analytics_Utils_namespaceObject.colorFromString, toJsonObject: external_DevExpress_Analytics_Utils_namespaceObject.colorToString };
    }
    if (name === 'link') {
        return { link: true };
    }
    const defaultEditor = external_DevExpress_Analytics_Internal_namespaceObject.editorTypeMapper[name] || external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor(name);
    if (defaultEditor) {
        return { editor: defaultEditor };
    }
    return {};
}

;// ./node_modules/devexpress-reporting/designer/utils/_registerCustomExpressions.js




function registerCustomGlobalExpressions(expressions) {
    if (!expressions?.length) {
        return;
    }
    expressions.forEach((expressionInfo) => {
        const expression = translateExpression(expressionInfo);
        (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.insertOrUpdateFunctions)((0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.functionDisplay)(), [(0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, expression)]);
        (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.insertOrUpdateFunctions)(external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject.expressionFunctions, [(0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, expression)]);
        (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.insertOrUpdateFunctions)(reportFunctionDisplay, [(0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, expression)]);
    });
}
function registerCustomReportExpressions(expressions) {
    if (!expressions?.length) {
        return;
    }
    expressions.forEach((expressionInfo) => {
        const expression = translateExpression(expressionInfo);
        (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.insertOrUpdateFunctions)(reportFunctionDisplay, [expression]);
    });
}
const translateExpression = (expression) => {
    const editorText = `${expression.name}(${Array.from({ length: expression.maxOperandCount }, () => '').join(', ')})`;
    const editorPrefix = expression.category === 'Aggregate' ? '[].' : '';
    const categoryName = expression.category ?? 'Custom';
    return {
        display: categoryName,
        items: {
            [expression.name]: [{
                    paramCount: Math.max(expression.maxOperandCount, 0),
                    text: `${editorPrefix}${editorText}`,
                    displayName: editorText,
                    description: expression.description
                }],
        }
    };
};

;// ./node_modules/devexpress-reporting/designer/widgets/styleseditor.js







class StylesEditorHeaderModel {
    get styles() {
        return this._report()?.styles;
    }
    constructor(styleName, _report, disabled, popupContainer) {
        this._report = _report;
        this.displayExpr = 'name';
        this.valueExpr = 'name';
        this.displayCustomValue = true;
        this.encodeNoDataText = true;
        this.placeholder = (0,external_DevExpress_Analytics_Internal_namespaceObject.selectPlaceholder)();
        this.noDataText = (0,external_DevExpress_Analytics_Internal_namespaceObject.noDataText)();
        this.value = external_ko_namespaceObject.pureComputed({
            read: () => {
                return styleName();
            },
            write: (newVal) => {
                if (newVal !== (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId)) {
                    styleName(newVal);
                }
            }
        });
        this.items = external_ko_namespaceObject.pureComputed(() => {
            const result = [new StyleModel({ '@Name': (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId) }, this._report())];
            if (this.styles && this.styles()) {
                result.push.apply(result, this.styles());
            }
            return result;
        });
        this.onValueChanged = (e) => {
            if (e.value === (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(StylesEditorHeaderModel.newItem, StylesEditorHeaderModel.newItemTextId)) {
                const newStyleName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this.styles(), 'xrControlStyle');
                const newStyle = new StyleModel({ '@Name': newStyleName }, this._report());
                this.styles.push(newStyle);
                this.value(newStyleName);
            }
        };
        this.disabled = disabled;
        this.dropDownOptions = { container: popupContainer };
    }
}
StylesEditorHeaderModel.newItem = 'Create New Style';
StylesEditorHeaderModel.newItemTextId = 'ASPxReportsStringId.ReportDesigner_StylesEditor_CreateNew';

external_ko_namespaceObject.bindingHandlers['dxStylesEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        let _subscriptionNewStyle;
        external_jQuery_namespaceObject.fn.constructor(element).children().remove();
        const templateHtml = (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)('dx-propertieseditor');
        let $element = external_jQuery_namespaceObject.fn.constructor(element).append(templateHtml);
        const style = external_ko_namespaceObject.pureComputed(() => {
            const value = valueAccessor(), styles = value.styles && value.styles(), filtered = styles && styles.filter((item) => {
                return item.name() === value.styleName();
            });
            if (filtered && filtered.length > 0) {
                const style = filtered[0];
                _subscriptionNewStyle = style.name.subscribe(newName => {
                    value.styleName(newName);
                    _subscriptionNewStyle.dispose();
                });
                return style;
            }
            return null;
        });
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => {
            $element = null;
            _subscriptionNewStyle && _subscriptionNewStyle.dispose();
        });
        external_ko_namespaceObject.applyBindings(bindingContext.createChildContext(new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(style, { editors: styleSerializationInfo }, 1, viewModel.disabled, undefined, viewModel.textToSearch)), $element.children()[0]);
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/designer/utils/paperKind.js
var PaperKind;
(function (PaperKind) {
    PaperKind[PaperKind["Custom"] = 0] = "Custom";
    PaperKind[PaperKind["Letter"] = 1] = "Letter";
    PaperKind[PaperKind["LetterSmall"] = 2] = "LetterSmall";
    PaperKind[PaperKind["Tabloid"] = 3] = "Tabloid";
    PaperKind[PaperKind["Ledger"] = 4] = "Ledger";
    PaperKind[PaperKind["Legal"] = 5] = "Legal";
    PaperKind[PaperKind["Statement"] = 6] = "Statement";
    PaperKind[PaperKind["Executive"] = 7] = "Executive";
    PaperKind[PaperKind["A3"] = 8] = "A3";
    PaperKind[PaperKind["A4"] = 9] = "A4";
    PaperKind[PaperKind["A4Small"] = 10] = "A4Small";
    PaperKind[PaperKind["A5"] = 11] = "A5";
    PaperKind[PaperKind["B4"] = 12] = "B4";
    PaperKind[PaperKind["B5"] = 13] = "B5";
    PaperKind[PaperKind["Folio"] = 14] = "Folio";
    PaperKind[PaperKind["Quarto"] = 15] = "Quarto";
    PaperKind[PaperKind["Standard10x14"] = 16] = "Standard10x14";
    PaperKind[PaperKind["Standard11x17"] = 17] = "Standard11x17";
    PaperKind[PaperKind["Note"] = 18] = "Note";
    PaperKind[PaperKind["Number9Envelope"] = 19] = "Number9Envelope";
    PaperKind[PaperKind["Number10Envelope"] = 20] = "Number10Envelope";
    PaperKind[PaperKind["Number11Envelope"] = 21] = "Number11Envelope";
    PaperKind[PaperKind["Number12Envelope"] = 22] = "Number12Envelope";
    PaperKind[PaperKind["Number14Envelope"] = 23] = "Number14Envelope";
    PaperKind[PaperKind["CSheet"] = 24] = "CSheet";
    PaperKind[PaperKind["DSheet"] = 25] = "DSheet";
    PaperKind[PaperKind["ESheet"] = 26] = "ESheet";
    PaperKind[PaperKind["DLEnvelope"] = 27] = "DLEnvelope";
    PaperKind[PaperKind["C5Envelope"] = 28] = "C5Envelope";
    PaperKind[PaperKind["C3Envelope"] = 29] = "C3Envelope";
    PaperKind[PaperKind["C4Envelope"] = 30] = "C4Envelope";
    PaperKind[PaperKind["C6Envelope"] = 31] = "C6Envelope";
    PaperKind[PaperKind["C65Envelope"] = 32] = "C65Envelope";
    PaperKind[PaperKind["B4Envelope"] = 33] = "B4Envelope";
    PaperKind[PaperKind["B5Envelope"] = 34] = "B5Envelope";
    PaperKind[PaperKind["B6Envelope"] = 35] = "B6Envelope";
    PaperKind[PaperKind["ItalyEnvelope"] = 36] = "ItalyEnvelope";
    PaperKind[PaperKind["MonarchEnvelope"] = 37] = "MonarchEnvelope";
    PaperKind[PaperKind["PersonalEnvelope"] = 38] = "PersonalEnvelope";
    PaperKind[PaperKind["USStandardFanfold"] = 39] = "USStandardFanfold";
    PaperKind[PaperKind["GermanStandardFanfold"] = 40] = "GermanStandardFanfold";
    PaperKind[PaperKind["GermanLegalFanfold"] = 41] = "GermanLegalFanfold";
    PaperKind[PaperKind["IsoB4"] = 42] = "IsoB4";
    PaperKind[PaperKind["JapanesePostcard"] = 43] = "JapanesePostcard";
    PaperKind[PaperKind["Standard9x11"] = 44] = "Standard9x11";
    PaperKind[PaperKind["Standard10x11"] = 45] = "Standard10x11";
    PaperKind[PaperKind["Standard15x11"] = 46] = "Standard15x11";
    PaperKind[PaperKind["InviteEnvelope"] = 47] = "InviteEnvelope";
    PaperKind[PaperKind["LetterExtra"] = 50] = "LetterExtra";
    PaperKind[PaperKind["LegalExtra"] = 51] = "LegalExtra";
    PaperKind[PaperKind["TabloidExtra"] = 52] = "TabloidExtra";
    PaperKind[PaperKind["A4Extra"] = 53] = "A4Extra";
    PaperKind[PaperKind["LetterTransverse"] = 54] = "LetterTransverse";
    PaperKind[PaperKind["A4Transverse"] = 55] = "A4Transverse";
    PaperKind[PaperKind["LetterExtraTransverse"] = 56] = "LetterExtraTransverse";
    PaperKind[PaperKind["APlus"] = 57] = "APlus";
    PaperKind[PaperKind["BPlus"] = 58] = "BPlus";
    PaperKind[PaperKind["LetterPlus"] = 59] = "LetterPlus";
    PaperKind[PaperKind["A4Plus"] = 60] = "A4Plus";
    PaperKind[PaperKind["A5Transverse"] = 61] = "A5Transverse";
    PaperKind[PaperKind["B5Transverse"] = 62] = "B5Transverse";
    PaperKind[PaperKind["A3Extra"] = 63] = "A3Extra";
    PaperKind[PaperKind["A5Extra"] = 64] = "A5Extra";
    PaperKind[PaperKind["B5Extra"] = 65] = "B5Extra";
    PaperKind[PaperKind["A2"] = 66] = "A2";
    PaperKind[PaperKind["A3Transverse"] = 67] = "A3Transverse";
    PaperKind[PaperKind["A3ExtraTransverse"] = 68] = "A3ExtraTransverse";
    PaperKind[PaperKind["JapaneseDoublePostcard"] = 69] = "JapaneseDoublePostcard";
    PaperKind[PaperKind["A6"] = 70] = "A6";
    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber2"] = 71] = "JapaneseEnvelopeKakuNumber2";
    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber3"] = 72] = "JapaneseEnvelopeKakuNumber3";
    PaperKind[PaperKind["JapaneseEnvelopeChouNumber3"] = 73] = "JapaneseEnvelopeChouNumber3";
    PaperKind[PaperKind["JapaneseEnvelopeChouNumber4"] = 74] = "JapaneseEnvelopeChouNumber4";
    PaperKind[PaperKind["LetterRotated"] = 75] = "LetterRotated";
    PaperKind[PaperKind["A3Rotated"] = 76] = "A3Rotated";
    PaperKind[PaperKind["A4Rotated"] = 77] = "A4Rotated";
    PaperKind[PaperKind["A5Rotated"] = 78] = "A5Rotated";
    PaperKind[PaperKind["B4JisRotated"] = 79] = "B4JisRotated";
    PaperKind[PaperKind["B5JisRotated"] = 80] = "B5JisRotated";
    PaperKind[PaperKind["JapanesePostcardRotated"] = 81] = "JapanesePostcardRotated";
    PaperKind[PaperKind["JapaneseDoublePostcardRotated"] = 82] = "JapaneseDoublePostcardRotated";
    PaperKind[PaperKind["A6Rotated"] = 83] = "A6Rotated";
    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber2Rotated"] = 84] = "JapaneseEnvelopeKakuNumber2Rotated";
    PaperKind[PaperKind["JapaneseEnvelopeKakuNumber3Rotated"] = 85] = "JapaneseEnvelopeKakuNumber3Rotated";
    PaperKind[PaperKind["JapaneseEnvelopeChouNumber3Rotated"] = 86] = "JapaneseEnvelopeChouNumber3Rotated";
    PaperKind[PaperKind["JapaneseEnvelopeChouNumber4Rotated"] = 87] = "JapaneseEnvelopeChouNumber4Rotated";
    PaperKind[PaperKind["B6Jis"] = 88] = "B6Jis";
    PaperKind[PaperKind["B6JisRotated"] = 89] = "B6JisRotated";
    PaperKind[PaperKind["Standard12x11"] = 90] = "Standard12x11";
    PaperKind[PaperKind["JapaneseEnvelopeYouNumber4"] = 91] = "JapaneseEnvelopeYouNumber4";
    PaperKind[PaperKind["JapaneseEnvelopeYouNumber4Rotated"] = 92] = "JapaneseEnvelopeYouNumber4Rotated";
    PaperKind[PaperKind["Prc16K"] = 93] = "Prc16K";
    PaperKind[PaperKind["Prc32K"] = 94] = "Prc32K";
    PaperKind[PaperKind["Prc32KBig"] = 95] = "Prc32KBig";
    PaperKind[PaperKind["PrcEnvelopeNumber1"] = 96] = "PrcEnvelopeNumber1";
    PaperKind[PaperKind["PrcEnvelopeNumber2"] = 97] = "PrcEnvelopeNumber2";
    PaperKind[PaperKind["PrcEnvelopeNumber3"] = 98] = "PrcEnvelopeNumber3";
    PaperKind[PaperKind["PrcEnvelopeNumber4"] = 99] = "PrcEnvelopeNumber4";
    PaperKind[PaperKind["PrcEnvelopeNumber5"] = 100] = "PrcEnvelopeNumber5";
    PaperKind[PaperKind["PrcEnvelopeNumber6"] = 101] = "PrcEnvelopeNumber6";
    PaperKind[PaperKind["PrcEnvelopeNumber7"] = 102] = "PrcEnvelopeNumber7";
    PaperKind[PaperKind["PrcEnvelopeNumber8"] = 103] = "PrcEnvelopeNumber8";
    PaperKind[PaperKind["PrcEnvelopeNumber9"] = 104] = "PrcEnvelopeNumber9";
    PaperKind[PaperKind["PrcEnvelopeNumber10"] = 105] = "PrcEnvelopeNumber10";
    PaperKind[PaperKind["Prc16KRotated"] = 106] = "Prc16KRotated";
    PaperKind[PaperKind["Prc32KRotated"] = 107] = "Prc32KRotated";
    PaperKind[PaperKind["Prc32KBigRotated"] = 108] = "Prc32KBigRotated";
    PaperKind[PaperKind["PrcEnvelopeNumber1Rotated"] = 109] = "PrcEnvelopeNumber1Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber2Rotated"] = 110] = "PrcEnvelopeNumber2Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber3Rotated"] = 111] = "PrcEnvelopeNumber3Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber4Rotated"] = 112] = "PrcEnvelopeNumber4Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber5Rotated"] = 113] = "PrcEnvelopeNumber5Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber6Rotated"] = 114] = "PrcEnvelopeNumber6Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber7Rotated"] = 115] = "PrcEnvelopeNumber7Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber8Rotated"] = 116] = "PrcEnvelopeNumber8Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber9Rotated"] = 117] = "PrcEnvelopeNumber9Rotated";
    PaperKind[PaperKind["PrcEnvelopeNumber10Rotated"] = 118] = "PrcEnvelopeNumber10Rotated";
})(PaperKind || (PaperKind = {}));

;// ./node_modules/devexpress-reporting/designer/wizard/reportWizardState.js


var ReportType;
(function (ReportType) {
    ReportType[ReportType["Empty"] = 3] = "Empty";
    ReportType[ReportType["Standard"] = 0] = "Standard";
    ReportType[ReportType["Vertical"] = 1] = "Vertical";
    ReportType[ReportType["Label"] = 2] = "Label";
    ReportType[ReportType["Template"] = 5] = "Template";
    ReportType[ReportType["CrossTab"] = 6] = "CrossTab";
})(ReportType || (ReportType = {}));
var PivotSummaryType;
(function (PivotSummaryType) {
    PivotSummaryType[PivotSummaryType["Count"] = 0] = "Count";
    PivotSummaryType[PivotSummaryType["Sum"] = 1] = "Sum";
    PivotSummaryType[PivotSummaryType["Min"] = 2] = "Min";
    PivotSummaryType[PivotSummaryType["Max"] = 3] = "Max";
    PivotSummaryType[PivotSummaryType["Average"] = 4] = "Average";
    PivotSummaryType[PivotSummaryType["StdDev"] = 5] = "StdDev";
    PivotSummaryType[PivotSummaryType["StdDevp"] = 6] = "StdDevp";
    PivotSummaryType[PivotSummaryType["Var"] = 7] = "Var";
    PivotSummaryType[PivotSummaryType["Varp"] = 8] = "Varp";
    PivotSummaryType[PivotSummaryType["Custom"] = 9] = "Custom";
    PivotSummaryType[PivotSummaryType["CountDistinct"] = 10] = "CountDistinct";
    PivotSummaryType[PivotSummaryType["Median"] = 11] = "Median";
    PivotSummaryType[PivotSummaryType["Mode"] = 12] = "Mode";
})(PivotSummaryType || (PivotSummaryType = {}));
var GraphicsUnit;
(function (GraphicsUnit) {
    GraphicsUnit[GraphicsUnit["World"] = 0] = "World";
    GraphicsUnit[GraphicsUnit["Display"] = 1] = "Display";
    GraphicsUnit[GraphicsUnit["Pixel"] = 2] = "Pixel";
    GraphicsUnit[GraphicsUnit["Point"] = 3] = "Point";
    GraphicsUnit[GraphicsUnit["Inch"] = 4] = "Inch";
    GraphicsUnit[GraphicsUnit["Document"] = 5] = "Document";
    GraphicsUnit[GraphicsUnit["Millimeter"] = 6] = "Millimeter";
})(GraphicsUnit || (GraphicsUnit = {}));
const defaultPageSize = (0,external_DevExpress_Analytics_Internal_namespaceObject.getPaperSize)(paperKind.defaultVal, 0);
const defaultPageSetupState = {
    paperKind: paperKind.defaultVal,
    landscape: false,
    marginTop: 1,
    marginRight: 1,
    marginBottom: 1,
    marginLeft: 1,
    width: defaultPageSize.width / 100,
    height: defaultPageSize.height / 100,
    unit: GraphicsUnit.Inch
};
const defaultReportWizardState = {
    masterDetailInfoCollection: [],
    pageSetup: (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, defaultPageSetupState),
    colorScheme: {},
    ignoreNullValuesForSummary: false
};

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_commonRequestModel.js

class CommonRequestModel {
    constructor(state) {
        this.DataMember = state.dataMember;
        if (state.reportType === ReportType.Label) {
            this.CustomLabelInformation = {
                Height: state.labelDetails.height,
                HorizontalPitch: state.labelDetails.hPitch,
                LeftMargin: state.labelDetails.leftMargin,
                RightMargin: state.labelDetails.rightMargin,
                PaperKindDataId: state.labelDetails.paperKindId,
                TopMargin: state.labelDetails.topMargin,
                BottomMargin: state.labelDetails.bottomMargin,
                Unit: state.labelDetails.unit === GraphicsUnit.Inch ? GraphicsUnit.Inch : GraphicsUnit.Millimeter,
                VerticalPitch: state.labelDetails.vPitch,
                Width: state.labelDetails.width
            };
            this.LabelProductId = state.labelDetails.productId;
            this.LabelProductDetailId = state.labelDetails.id;
        }
        this.IgnoreNullValuesForSummary = state.ignoreNullValuesForSummary;
        this.ReportTitle = state.reportTitle;
        this.ReportType = state.reportType;
        if (state.dataMemberInfo != null || state.dataMemberPath != null) {
            this.DataMemberName = {
                DisplayName: state.dataMemberInfo.displayName,
                Name: state.dataMemberInfo.name,
                DataMemberType: 0
            };
            if (state.dataMemberInfo.name) {
                const index = state.dataMemberPath.indexOf('.');
                this.DataMemberName.Name = index > 0 ? state.dataMemberPath.substr(index + 1) : state.dataMemberPath;
            }
        }
        else {
            this.DataMemberName = null;
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_crossTabRequestModel.js


class CrossTabFieldInfoBase {
    constructor(info) {
        this.__type = '';
        this.FieldName = info.name;
        this.DisplayText = info.displayName;
    }
}
class CrossTabGroupFieldInfo extends CrossTabFieldInfoBase {
    constructor(info) {
        super(info);
        this.SortOrder = external_DevExpress_Reporting_Viewer_Internal_namespaceObject.ColumnSortOrder[info.sortOrder] || external_DevExpress_Reporting_Viewer_Internal_namespaceObject.ColumnSortOrder.Ascending;
    }
}
class CrossTabColumnFieldInfo extends CrossTabGroupFieldInfo {
    constructor() {
        super(...arguments);
        this.__type = 'CrossTabColumnFieldInfo:#DevExpress.XtraReports.Wizards.CrossTab';
    }
}
class CrossTabRowFieldInfo extends CrossTabGroupFieldInfo {
    constructor() {
        super(...arguments);
        this.__type = 'CrossTabRowFieldInfo:#DevExpress.XtraReports.Wizards.CrossTab';
    }
}
class CrossTabDataFieldInfo extends CrossTabFieldInfoBase {
    constructor(info) {
        super(info);
        this.__type = 'CrossTabDataFieldInfo:#DevExpress.XtraReports.Wizards.CrossTab';
        this.SummaryType = PivotSummaryType[info.summaryType] || PivotSummaryType.Sum;
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_masterDetailRequestModel.js





class MasterDetailRequestModel extends CommonRequestModel {
    constructor(state) {
        super(state);
        this._masterRelationMap = (query, path) => {
            const newInfo = {
                Name: query.name,
                DisplayName: query.displayName,
                CheckedState: query.checked,
                Fields: query.fields.map(field => {
                    return {
                        Name: field.name,
                        DisplayName: field.displayName,
                        Checked: field.checked,
                    };
                }),
                Relations: query.relations.map(relation => this._masterRelationMap(relation, relation.path))
            };
            this._collectionByPath[path] = newInfo;
            return newInfo;
        };
        this._collectionByPath = {};
        this.UseMasterDetailBuilder = true;
        const dataSource = state.dataSource || state.newDataSource;
        this.DataSourceName = dataSource && JSON.parse(dataSource).name;
        if (state.reportType === ReportType.CrossTab) {
            this.CrossTabFieldInfo = [].concat((state.crossTabColumnsFieldInfo || []).map(item => new CrossTabColumnFieldInfo({ name: item.name, displayName: item.displayName, sortOrder: item.sortOrder })), (state.crossTabRowsFieldInfo || []).map(item => new CrossTabRowFieldInfo({ name: item.name, displayName: item.displayName, sortOrder: item.sortOrder })), (state.crossTabDataFieldInfo || []).map(item => new CrossTabDataFieldInfo({ name: item.name, displayName: item.displayName, summaryType: item.summaryType })));
        }
        else {
            this.MasterDetailInfo = state.masterDetailInfoCollection.map(info => {
                return this._masterRelationMap(info, info.path);
            });
            this.MasterDetailGroupsInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.$map)(state.masterDetailGroups, (array, key) => ({
                'Key': this._collectionByPath[key],
                'Value': (array || []).map(item => ((item || [])))
            }));
            this.MasterDetailSummariesInfo = (0,external_DevExpress_Analytics_Internal_namespaceObject.$map)(state.masterDetailSummariesInfo, (value, key) => ({
                'Key': this._collectionByPath[key],
                'Value': (value || []).map((item) => {
                    return {
                        Column: {
                            Name: item.column.name,
                            DisplayName: item.column.displayName
                        },
                        SummaryFunctions: item.summaryFunctions
                    };
                })
            }));
        }
        if (state.pageSetup) {
            this.PaperKind = PaperKind[state.pageSetup.paperKind];
            this.PaperSize = {
                width: state.pageSetup.width,
                height: state.pageSetup.height
            };
            this.Margins = {
                left: state.pageSetup.marginLeft,
                right: state.pageSetup.marginRight,
                top: state.pageSetup.marginTop,
                bottom: state.pageSetup.marginBottom
            };
            this.Portrait = !state.pageSetup.landscape;
            this.Unit = state.pageSetup.unit;
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/chooseReportTypePage.js










class SelectReportTypePage extends external_DevExpress_Analytics_Wizard_namespaceObject.ChooseDataSourceTypePage {
    constructor(_options) {
        super({});
        this._options = _options;
        this._IsSelected = (item) => {
            return this.selectedItem().type === item.type && this.selectedItem().id === item.id;
        };
        this.selectedItem = external_ko_namespaceObject.observable();
        this._extendCssClass = (rightPath) => 'dxrd-report-' + rightPath;
        this._textToSearch = external_ko_namespaceObject.observable('');
        this.typeItems = [];
        _options.reportTemplates.forEach(template => {
            template.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(template.text, template.localizationID);
            template.type = ReportType[template.id] !== undefined ? ReportType[template.id] : ReportType.Template;
            if (!template.imageTemplateName && !template.imageClassName) {
                template.imageTemplateName = SelectReportTypePage.defaultImageID;
            }
            if (this.itemsFilter(template)) {
                this.typeItems.push(template);
            }
        });
    }
    getListOptions() {
        const searchEnabled = this._options.searchBoxVisibilityMode === SearchBoxVisibilityMode.Always ||
            this._options.searchBoxVisibilityMode === SearchBoxVisibilityMode.Auto && this.typeItems.length > 15;
        return {
            itemTemplate: (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)('dxrd-page-choose-type-item'),
            dataSource: this.typeItems,
            searchEnabled: searchEnabled,
            searchValue: this._textToSearch,
            searchExpr: 'text',
            focusStateEnabled: false,
            hoverStateEnabled: false,
            activeStateEnabled: false,
            pageLoadMode: 'scrollBottom',
            searchEditorOptions: {
                placeholder: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Find a Report Template...', 'ASPxReportsStringId.ReportDesigner_Wizard_SearchPlaceholder')
            }
        };
    }
    itemsFilter(item) {
        if (item.type === ReportType.Standard || item.type === ReportType.CrossTab)
            return !!this._options.canCreateDatabound;
        if (item.type === ReportType.Vertical)
            return this._options.canCreateDatabound && this._options.showVertical;
        return true;
    }
    canNext() {
        return this.selectedItem() !== null && this.selectedItem().type !== ReportType.Empty;
    }
    canFinish() {
        return this.selectedItem() !== null && this.selectedItem().canInstantlyFinish;
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({ reportType: this.selectedItem().type, reportTemplateID: this.selectedItem().id }).promise();
    }
    initialize(state) {
        const type = state.reportType || ReportType.Standard;
        const item = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this.typeItems, (item) => item.type === type);
        this.selectedItem(item || this.typeItems[0]);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
}
SelectReportTypePage.defaultImageID = 'dxrd-svg-wizard-UndefinedReport';

class ChooseDataSourceTypePage extends external_DevExpress_Analytics_Wizard_namespaceObject.ChooseDataSourceTypePage {
    constructor(dataSourceWizardOptions) {
        super(dataSourceWizardOptions);
        this.typeItems.push(new external_DevExpress_Analytics_Wizard_namespaceObject.TypeItem('No Data', 'DataAccessUIStringId.DSTypeNoData', 'nodata', 'dxrd-svg-wizard-NoDataSource', external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.NoData));
    }
}
function _registerSelectReportTypePage(factory, options) {
    factory.registerMetadata(FullscreenReportWizardPageId.SelectReportTypePage, {
        setState: (data, state) => {
            state.reportType = data.reportType;
            state.reportTemplateID = data.reportTemplateID;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.reportType = defaultState.reportType;
            state.reportTemplateID = defaultState.reportTemplateID;
        },
        create: () => {
            const canCreateDatabound = 'function' === typeof (options.canCreateDatabound) ? options.canCreateDatabound() : options.canCreateDatabound;
            return new SelectReportTypePage({
                canCreateDatabound: canCreateDatabound,
                showVertical: options.showVertical,
                reportTemplates: options.reportTemplates,
                searchBoxVisibilityMode: options.searchBoxVisibilityMode
            });
        },
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select the report type you wish to create.', 'ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType_Message'),
        template: 'dxrd-page-choose-report-type',
        navigationPanelText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select Report Type', 'ASPxReportsStringId.ReportDesigner_Wizard_SelectReportType')
    });
}
function _registerChooseDataSourceTypePage(factory, dataSourceWizardOptions) {
    factory.registerMetadata(external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageId.ChooseDataSourceTypePage, {
        setState: (data, state) => {
            state.dataSourceType = data.dataSourceType;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.dataSourceType = defaultState.dataSourceType;
        },
        create: () => {
            return new ChooseDataSourceTypePage(dataSourceWizardOptions);
        },
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select the data source type.', 'DataAccessUIStringId.WizardPageChooseDSType'),
        template: 'dxrd-page-choose-datasource-type'
    });
}
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(`Report Template`, `ASPxReportsStringId.ReportDesigner_Wizard_ReportTemplate_Thumbnail`)', function ($context, $element) {
    return {
        'text': function () {
            return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Template', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportTemplate_Thumbnail');
        }
    };
});

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_crossTabDragUtils.js



class CrossTabWizardFieldListController extends FieldListController {
    constructor() {
        super(...arguments);
        this.showIconsForChildItems = () => true;
    }
    isDraggable(item) {
        if (item.data && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isList)(item.data))
            return true;
        return false;
    }
}
class CrossTabWizardDragDropHandler extends external_DevExpress_Analytics_Internal_namespaceObject.WizardDragDropHandler {
    doStopDrag(ui, _) {
        this.dragHelperContent.reset();
        if (this._dropTarget) {
            this._addHandler(this._dropTarget, external_ko_namespaceObject.dataFor(ui).data.name);
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_utils.js



const _masterDetailWizardHeight = '600';
const _masterDetailWizardWidth = '840';
const _masterDetailScrollViewHeight = '100%';
function overrideFullscreenDataSourceWizardPageMetadata(factory, pageId, create) {
    const meta = factory.getMetadata(pageId);
    meta.canNext = (page) => { return page.canFinish() || page.canNext(); };
    meta.canFinish = (page) => page.canFinish();
    meta.create = create;
    const oldSetState = meta.setState;
    meta.setState = (data, state) => {
        oldSetState(data, state);
        state.newDataSource = data.newDataSource;
    };
    const oldResetState = meta.resetState;
    meta.resetState = (state, defaultState) => {
        oldResetState(state, defaultState);
        state.newDataSource = defaultState.newDataSource;
    };
}
class FieldInfo extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(data) {
        super();
        this.field = external_ko_namespaceObject.observable(null);
        this.selectedItems = external_ko_namespaceObject.observableArray([]);
        this.functionValue = external_ko_namespaceObject.observable();
        this.visible = external_ko_namespaceObject.observable(true);
        this.value = {
            value: this.functionValue,
            dataSource: data,
            placeholder: (0,external_DevExpress_Analytics_Internal_namespaceObject.selectPlaceholder)(),
            selectAllText: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Select All', 'AnalyticsCoreStringId.SelectAll'),
            getPopupContainer: external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer,
            getOptions: (options) => this.getOptions(options),
            showDropDownButton: true,
            selectedItems: this.selectedItems,
            displayExpr: function (value) {
                if (!value)
                    return value;
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(value.displayValue, value.localizationId);
            }
        };
    }
    getOptions(options) { return options; }
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_masterDetailWizardUtils.js








class MasterDetailInfoBase {
    constructor(name, specifics, displayName) {
        this.name = name;
        this.specifics = specifics;
        this.displayName = displayName;
        if (!this.displayName)
            this.displayName = this.name;
    }
}
class MasterDetailFieldInfo extends MasterDetailInfoBase {
    constructor(field) {
        super(field.name, field.specifics, field.displayName);
        this.checked = !field.unChecked();
    }
}
class MasterDetailQueryInfo extends MasterDetailInfoBase {
    _expandComplexFieds(complexField) {
        complexField.children().forEach(child => {
            const newChild = (0,external_DevExpress_Analytics_Internal_namespaceObject.assignObj)(child, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, child, { name: complexField.name + '.' + child.name }));
            if (child instanceof external_DevExpress_Analytics_Wizard_Internal_namespaceObject.FieldTreeNode) {
                this._complexFields.push(new MasterDetailFieldInfo(newChild));
            }
            if (!child.isComplex && child instanceof external_DevExpress_Analytics_Wizard_Internal_namespaceObject.DataMemberTreeNode) {
                this._complexRelations.push(new MasterDetailQueryInfo(newChild));
            }
            if (child.isComplex && child instanceof external_DevExpress_Analytics_Wizard_Internal_namespaceObject.DataMemberTreeNode) {
                this._expandComplexFieds(newChild);
            }
        });
    }
    constructor(dataMember) {
        super(dataMember.name, dataMember.specifics, dataMember.displayName);
        this._complexFields = [];
        this._complexRelations = [];
        this.fields = [];
        this.relations = [];
        this.path = dataMember.path;
        this.checked = dataMember.checked();
        dataMember.children().forEach(item => {
            if (!item.isList || item.isComplex) {
                if (item.isComplex && item instanceof external_DevExpress_Analytics_Wizard_Internal_namespaceObject.DataMemberTreeNode) {
                    this._expandComplexFieds(item);
                }
                else {
                    this.fields.push(new MasterDetailFieldInfo(item));
                }
            }
            else {
                this.relations.push(new MasterDetailQueryInfo(item));
            }
        });
        this.fields = this.fields.concat(this._complexFields);
        this.relations = this.relations.concat(this._complexRelations);
    }
}
class DataMemberCustomCheckedTreeNode extends external_DevExpress_Analytics_Wizard_Internal_namespaceObject.DataMemberTreeNode {
    constructor(name, displayName, specifics, isChecked, path, afterCheckToggled) {
        super(name, displayName, specifics, isChecked, path, afterCheckToggled);
        this.checked = external_ko_namespaceObject.pureComputed({
            read: () => {
                const lists = this.children().filter(item => isList(item));
                if (lists.length === 0) {
                    return this._checked();
                }
                else {
                    let checkedChildren = 0;
                    let partiallySelectedItems = 0;
                    lists.forEach(item => {
                        if (item.checked() === true) {
                            checkedChildren++;
                        }
                        else if (item.checked() !== false) {
                            partiallySelectedItems++;
                        }
                    });
                    if (checkedChildren > 0)
                        this._checked(true);
                    if (checkedChildren === lists.length) {
                        return true;
                    }
                    else {
                        return this._checked() || partiallySelectedItems > 0 ? undefined : false;
                    }
                }
            }
        });
        this.checked.subscribe(item => {
            afterCheckToggled && afterCheckToggled(this);
        });
        if (isChecked)
            afterCheckToggled && afterCheckToggled(this);
    }
    setChecked(value) {
        if (!value || (!this.unChecked() && value)) {
            this.children().forEach(item => isList(item) && item.setChecked(false));
            this._checked(false);
        }
        else
            this._checked(value);
    }
}
class MasterDetailTreeListController extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.DataMemberTreeListController {
    constructor(hideDataMemberSubItems) {
        super();
        this.hideDataMemberSubItems = hideDataMemberSubItems || external_ko_namespaceObject.observable(false);
    }
    canSelect(value) {
        return (value.hasItems && !!value.path) || value.data.specifics === 'none';
    }
    hasItems(item) {
        if (this.hideDataMemberSubItems()) {
            return false;
        }
        return super.hasItems(item);
    }
}
class AvailableFieldsTreeListController extends FieldListController {
    constructor(rootItems) {
        super(null);
        this.rootItems = rootItems;
    }
    itemsFilter(item) {
        let visible = false;
        if (!!item.path && isList(item)) {
            visible = this.rootItems().map(item => item['path']).indexOf(item.path) > -1;
        }
        else if (item.path) {
            const stringEndIndex = item.path.lastIndexOf(item.name);
            const pathParts = item.path.substring(0, stringEndIndex != -1 ? stringEndIndex : undefined).split('.');
            if (pathParts.length > 0 && !pathParts[pathParts.length - 1])
                pathParts.splice(pathParts.length - 1, 1);
            visible = this.rootItems().map(item => item['path']).indexOf(pathParts.join('.')) > -1;
        }
        if (!visible && !item.unChecked()) {
            item.setChecked(false);
        }
        item.visible(visible);
        return visible;
    }
    isDraggable(item) {
        return false;
    }
}
class SummaryInfo extends FieldInfo {
    constructor(data) {
        super(data);
        this.functionValue([]);
    }
}
class SummaryInfoFieldlist extends SummaryInfo {
    constructor() {
        super(getSummaryFunctionValues());
        this.selectedPath = external_ko_namespaceObject.observable('');
        this._disposables.push(this.displayName = external_ko_namespaceObject.computed(() => {
            if (!this.field())
                return null;
            return [this.field().parent.displayName, this.field().displayName].join(' - ');
        }).extend({ rateLimit: 0 }));
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/selectDataMembersPage.js











class SelectDataMembersPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    _wrapFieldListCallback(itemsCallback) {
        return (pathRequest) => {
            if (this._hideDataMemberSubItems) {
                return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve([]).promise();
            }
            else {
                return itemsCallback(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(this._showDataSource ? pathRequest.fullPath : this.dataSourcePath + '.' + pathRequest.fullPath), this._dataSource);
            }
        };
    }
    get dataSourcePath() {
        return (this._dataSource.id || this._dataSource.ref);
    }
    getDataMemberSelectedPath(state) {
        if (state.masterDetailInfoCollection.length > 0)
            return null;
        return state.dataMember;
    }
    _beginInternal(state) {
        if (state.reportType === ReportType.Vertical) {
            this._multiSelectMode = false;
            this._showFirstLevelDataMembers(true);
        }
        this._dataSource = _restoreDataSourceFromState(state.newDataSource || state.dataSource);
        const dataMember = this.getDataMemberSelectedPath(state);
        this.initialFullDataMember = state.dataMember;
        if (state.masterDetailInfoCollection.length === 0) {
            return this._fieldListCallBack(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(this.dataSourcePath), this._dataSource)
                .done((fields) => {
                this._fieldSelectedPath(null);
                this._checkedDataMembers([]);
                this._showDataSource = false;
                if (includeNonListItem(fields)) {
                    this._dataMemberSelectedPath([this.dataSourcePath, dataMember].join('.'));
                    this._showDataSource = true;
                    this._rootItems([{
                            name: this.dataSourcePath,
                            displayName: this._dataSource.name,
                            specifics: 'List'
                        }]);
                }
                else {
                    this._dataMemberSelectedPath(dataMember);
                    this._rootItems(fields.map((value) => {
                        return {
                            name: value.name,
                            displayName: value.displayName || value.name,
                            specifics: 'List'
                        };
                    }));
                }
            });
        }
        else {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
        }
    }
    _processFields(node) {
        if (!node.unChecked()) {
            if (this._checkedFields.indexOf(node) === -1) {
                this._checkedFields.push(node);
            }
        }
        else
            this._checkedFields.remove(node);
        this._onChange();
    }
    _processNode(node) {
        if ((0,external_DevExpress_Analytics_Internal_namespaceObject.isList)(node)) {
            node.children().forEach((item) => {
                if ((0,external_DevExpress_Analytics_Internal_namespaceObject.isList)(item)) {
                    this._processNode(item);
                }
                else {
                    this._processFields(item);
                }
            });
        }
        else {
            this._processFields(node);
        }
    }
    canNext() {
        return this._fieldMemberItemsProvider.hasCheckedItems();
    }
    canFinish() {
        return true;
    }
    constructor(_fieldListCallBack, _hideDataMemberSubItems = false) {
        super();
        this._fieldListCallBack = _fieldListCallBack;
        this._hideDataMemberSubItems = _hideDataMemberSubItems;
        this._rootItems = external_ko_namespaceObject.observableArray([]);
        this._dataMemberSelectedPath = external_ko_namespaceObject.observable(null);
        this._fieldSelectedPath = external_ko_namespaceObject.observable(null);
        this._checkedDataMembers = external_ko_namespaceObject.observableArray([]);
        this._checkedFields = external_ko_namespaceObject.observableArray([]);
        this._showDataSource = false;
        this._afterCheckToggled = (node) => {
            if (!(0,external_DevExpress_Analytics_Internal_namespaceObject.isList)(node))
                return;
            if (!node.unChecked()) {
                if (this._checkedDataMembers.indexOf(node) === -1) {
                    if (!this._multiSelectMode) {
                        this._checkedDataMembers()[0] && this._checkedDataMembers()[0].setChecked(false);
                        this._checkedDataMembers([node]);
                    }
                    else {
                        this._checkedDataMembers.push(node);
                    }
                    this._fieldSelectedPath(node.path);
                }
            }
            else
                this._checkedDataMembers.remove(node);
            this._onChange();
        };
        this._afterCheckToggledFields = (node) => {
            this._processNode(node);
            this._onChange();
        };
        this._createMasterDetailTreeNode = (item, isChecked, path) => {
            const node = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.DataMemberTreeNode(item.name, item.displayName, item.specifics, isChecked, path, this._afterCheckToggledFields);
            this._disposables.push(node);
            return node;
        };
        this._createMasterDetailFirstTabTreeNode = (item, isChecked, path) => {
            const checked = isChecked || (this._showDataSource ? [this.dataSourcePath, this.initialFullDataMember].join('.') : this.initialFullDataMember) === path;
            const node = new DataMemberCustomCheckedTreeNode(item.name, item.displayName, item.specifics, checked, path, this._afterCheckToggled);
            this._disposables.push(node);
            return node;
        };
        this._createMasterDetailLeafTreeNode = (item, isChecked, path) => {
            const node = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path, this._afterCheckToggledFields);
            this._disposables.push(node);
            return node;
        };
        this._showFirstLevelDataMembers = external_ko_namespaceObject.observable(false);
        this._multiSelectMode = true;
        this._selectDataMembersCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select data members', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataMembers');
        this._selectDataFieldsCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select data fields', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_SelectDataFields');
        const fieldListProvider = new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(this._wrapFieldListCallback(this._fieldListCallBack), external_ko_namespaceObject.observableArray([]));
        this._disposables.push(this._dataMemberItemsProvider = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.TreeNodeItemsProvider(fieldListProvider, this._rootItems, this._createMasterDetailFirstTabTreeNode, this._createMasterDetailLeafTreeNode));
        this._disposables.push(this._fieldMemberItemsProvider = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.TreeNodeItemsProvider(fieldListProvider, this._rootItems, this._createMasterDetailTreeNode, this._createMasterDetailLeafTreeNode));
        this._availableFieldsController = new AvailableFieldsTreeListController(this._checkedDataMembers);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const item = this._availableFieldsController.selectedItem;
            item && item.collapsed && item.toggleCollapsed();
        }));
        this._dataMemberFieldListModel = {
            itemsProvider: this._dataMemberItemsProvider,
            selectedPath: this._dataMemberSelectedPath,
            treeListController: new MasterDetailTreeListController(this._showFirstLevelDataMembers),
            templateName: 'dxrd-treelist-with-checkbox'
        };
        this._fieldMemberFieldListModel = {
            itemsProvider: this._fieldMemberItemsProvider,
            selectedPath: this._fieldSelectedPath,
            treeListController: this._availableFieldsController,
            templateName: 'dxrd-treelist-with-checkbox'
        };
    }
    selectDataMember(dataMemberPath) {
        this._dataMemberItemsProvider.selectItemByPath(dataMemberPath).always(() => this._onChange());
    }
    selectAllDataMembers() {
        this._dataMemberItemsProvider.selectAllItems(false).always(() => this._onChange());
    }
    selectDataField(dataFieldPath) {
        const pathParts = dataFieldPath.split('.');
        pathParts.pop();
        this._dataMemberItemsProvider.selectItemByPath(pathParts.join('.')).always(() => this._fieldMemberItemsProvider.selectItemByPath(dataFieldPath).always(() => this._onChange()));
    }
    selectDataFields(dataMemberPath) {
        this._dataMemberItemsProvider.selectItemByPath(dataMemberPath).always(() => {
            this._fieldMemberItemsProvider.selectItemsByPath(dataMemberPath).always(() => this._onChange());
        });
    }
    selectAllDataFields() {
        this._dataMemberItemsProvider.selectAllItems(false).always(() => this._fieldMemberItemsProvider.selectAllItems().always(() => this._onChange()));
    }
    initialize(state) {
        return this._beginInternal(state);
    }
    _haveCheckedFields() {
        return this._checkedFields().length !== 0;
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            masterDetailInfoCollection: (this._fieldMemberItemsProvider.getRootItems().filter(item => item.isList && !item.isComplex).map(item => {
                if (this._showDataSource)
                    item = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, item, { name: '' });
                return new MasterDetailQueryInfo(item);
            }))
        }).promise();
    }
}
function _registerSelectDataMembersPage(factory, reportWizardOptions, pageId = ReportWizardPageId.SelectDataMembersPage) {
    factory.registerMetadata(pageId, {
        create: () => {
            return new SelectDataMembersPage(reportWizardOptions.callbacks.fieldListsCallback, reportWizardOptions.hideDataMemberSubItems);
        },
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select data members to assign to the report and its detail reports and fields to display in these reports.', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_ChooseDataMembers_Description'),
        template: 'dxrd-page-masterdetail-select-reportdata',
        getState: (state) => state,
        setState: (data, state) => state.masterDetailInfoCollection = data.masterDetailInfoCollection,
        resetState: (state, defaultState) => state.masterDetailInfoCollection = defaultState.masterDetailInfoCollection
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/configureCrossTabPage.js









class SelectCrossTabDataMember extends SelectDataMembersPage {
    _findFirstCheckedField(dataMembers) {
        let result = null;
        for (let i = 0; i < dataMembers.length; i++) {
            const element = dataMembers[i];
            if (element.checked()) {
                result = element;
                break;
            }
            if (element.children && element.children().length) {
                result = this._findFirstCheckedField(element.children().filter(x => x.isList));
                if (result)
                    break;
            }
        }
        return result;
    }
    constructor(_fieldListCallBack, _hideDataMemberSubItems = false) {
        super(_fieldListCallBack, _hideDataMemberSubItems);
        this._pageRendered = false;
        this._createCrossTabLeafTreeNode = (item, isChecked, path) => {
            const field = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path);
            this._disposables.push(field);
            clearTimeout(this._timeout);
            this._timeout = setTimeout(() => {
                if (!this._pageRendered && this._firstRenderNode.initialized()) {
                    this._afteCheck(this._firstRenderNode);
                    this._pageRendered = true;
                }
            }, 1);
            field.disabled(!field.checked());
            this._disposables.push(field.checked.subscribe(val => {
                field.disabled(!val);
            }));
            return field;
        };
        this._createCrossTabTreeNode = (item, isChecked, path) => {
            const node = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.SingleCheckedDataMemberTreeNode(item.name, item.displayName, item.specifics, isChecked, path, this._afteCheck);
            this._disposables.push(node);
            if (!this._firstRenderNode) {
                this._firstRenderNode = node;
            }
            return node;
        };
        this._afteCheck = (node) => {
            const rootItems = this._signleFieldMemberFieldListModel.itemsProvider.getRootItems();
            rootItems.forEach(item => {
                item.setChecked(false);
            });
            node._checked(true);
            node.children().forEach(item => {
                item.setChecked(item.isList ? false : true);
            });
            this._onChange();
        };
        this._title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Available fields', 'ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields');
        this._icon = 'dxrd-svg-wizard-crosstab-fields';
        const fieldListProvider = new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(this._wrapFieldListCallback(_fieldListCallBack), external_ko_namespaceObject.observableArray([]));
        this._disposables.push(this._itemsProvider = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.TreeNodeItemsProvider(fieldListProvider, this._rootItems, this._createCrossTabTreeNode, this._createCrossTabLeafTreeNode));
        this._disposables.push(this._controller = new CrossTabWizardFieldListController());
        this._dragHelperContent = new external_DevExpress_Analytics_Internal_namespaceObject.DragHelperContent(null);
        this._disposables.push(this._controller.dragDropHandler = new CrossTabWizardDragDropHandler({
            dragHelperContent: this._dragHelperContent,
            parent: '.dx-designer-viewport .dx-fullscreen-wizard',
            containment: '.dxrd-report-wizard',
            target: '.dxrd-wizard-page',
            addHandler: (dropTarget, name) => {
                if (dropTarget && dropTarget instanceof ConfigureCrossTabPage)
                    dropTarget.addInfo(name);
            }
        }));
        this._signleFieldMemberFieldListModel = {
            itemsProvider: this._itemsProvider,
            selectedPath: external_ko_namespaceObject.observable(null),
            treeListController: this._controller,
            templateName: 'dxrd-treelist-with-checkbox'
        };
    }
    commit() {
        const dataMember = this._findFirstCheckedField(this._itemsProvider.getRootItems());
        const result = {};
        if (dataMember) {
            result.crossTabFields = dataMember.children().filter(x => !x.isList) || [];
            if (dataMember.path !== this.dataSourcePath) {
                result.dataMemberPath = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.dataSourcePath, dataMember.path);
                result.dataMemberInfo = dataMember;
            }
        }
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve(result).promise();
    }
}
class ConfigureCrossTabPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor(stateName, itemInfo, title, localizationId) {
        super();
        this.stateName = stateName;
        this.itemInfo = itemInfo;
        this.changeAlways = true;
        this.underCursor = external_ko_namespaceObject.observable(new external_DevExpress_Analytics_Internal_namespaceObject.HoverInfo());
        this._crossTabFields = external_ko_namespaceObject.observableArray([]);
        this._template = 'dxrd-page-crosstab-setlayout';
        this.fieldInfos = external_ko_namespaceObject.observableArray([]);
        this._title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(title, localizationId);
        this._icon = 'dxrd-svg-wizard-crosstab-' + title.toLowerCase();
        this._fieldName = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Field Name', 'ASPxReportsStringId.ReportDesigner_Wizard_PageCrossTab_FieldName_Caption');
        this._valueName = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(itemInfo.displayName, itemInfo.localizationId);
        this._disposables.push(this.isDroppable = external_ko_namespaceObject.computed(() => {
            if (external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started())
                return this.underCursor().isOver;
            else
                return false;
        }));
    }
    _removeInfo(item) {
        this.fieldInfos.splice(this.fieldInfos.indexOf(item), 1);
        this.addInfo();
    }
    addInfo(fieldName) {
        let newField = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this.fieldInfos(), (item) => item.field() === null);
        if (!newField) {
            newField = new FieldInfo(this.itemInfo.valuesArray);
            this.fieldInfos.push(newField);
            this._disposables.push(newField.field.subscribe(newValue => {
                if (!newField.functionValue())
                    this.setFieldDefaultValue(this.itemInfo.defaultVal, newField);
                this.addInfo();
                this._onChange();
            }));
        }
        if (fieldName) {
            const field = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this._crossTabFields(), (item) => item.name === fieldName);
            newField.field(field);
        }
    }
    setFieldDefaultValue(defaultVal, fieldInfo) {
        fieldInfo.functionValue((0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(fieldInfo.value.dataSource, (item) => item.value === defaultVal));
    }
    initialize(state, stateChanged = false) {
        if (stateChanged) {
            state[this.stateName] = [];
            this.fieldInfos([]);
        }
        this._crossTabFields(state.crossTabFields);
        this.addInfo();
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    canFinish() {
        return true;
    }
}
function _registerConfigureCrossTabPage(factory, pageId, title, localizationId, info) {
    const stateName = 'crossTab' + title + 'FieldInfo';
    factory.registerMetadata(pageId, {
        setState: (data, state) => { },
        getState: (state) => state,
        resetState: (state, defaultState) => { },
        create: () => {
            return new ConfigureCrossTabPage(stateName, info, title, localizationId);
        },
        template: 'dxrd-page-crosstab-setlayout',
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/_utils.js


function getFormattedValueInUnits(value, unit) {
    const format = unit === GraphicsUnit.Inch ? 2 : 1;
    return value.toFixed(format);
}
class ListViewModel {
    constructor(caption) {
        this.caption = caption;
        this._items = external_ko_namespaceObject.observableArray([]).extend({ deferred: true });
        this._refreshActiveItem = (previousActivItemIndex = -1) => {
            if (this.isEmpty) {
                this.activeItemArray.removeAll();
            }
            else if (previousActivItemIndex < 0) {
                this.activeItemArray.splice(0, 1, this._items()[0]);
            }
            else {
                if (previousActivItemIndex >= this._items().length) {
                    previousActivItemIndex = this._items().length - 1;
                }
                this.activeItemArray.splice(0, 1, this._items()[previousActivItemIndex]);
            }
        };
        this.activeItemArray = external_ko_namespaceObject.observableArray([]).extend({ deferred: true });
    }
    get items() {
        return this._items();
    }
    get activeItem() {
        return this.activeItemArray().length === 1 ? this.activeItemArray()[0] : null;
    }
    set activeItem(value) {
        if (this._items().indexOf(value) > -1) {
            this.activeItemArray.splice(0, 1, value);
        }
    }
    add(item) {
        this._items.push(item);
        this.activeItemArray.splice(0, 1, item);
    }
    addRange(items) {
        this.setItems(this._items().concat(items));
    }
    removeActiveItem() {
        const index = this._items.indexOf(this.activeItemArray()[0]);
        this._items.remove(this.activeItemArray()[0]);
        this._refreshActiveItem(index);
    }
    removeAll() {
        this._items.removeAll();
        this.activeItemArray.removeAll();
    }
    setItems(items) {
        this._items(items);
        this.activeItemArray([this._items()[0]]);
        this._refreshActiveItem();
    }
    moveUp() {
        if (this.isMoveUpEnabled()) {
            const index = this._items.indexOf(this.activeItem);
            this.activeItemArray.removeAll();
            this._items.splice(index - 1, 2, this._items()[index], this._items()[index - 1]);
            this.activeItemArray.splice(0, 1, this._items()[index - 1]);
        }
    }
    moveDown() {
        if (this.isMoveDownEnabled()) {
            const index = this._items.indexOf(this.activeItem);
            this.activeItemArray.removeAll();
            this._items.splice(index, 2, this._items()[index + 1], this._items()[index]);
            this.activeItemArray.splice(0, 1, this._items()[index + 1]);
        }
    }
    get isEmpty() {
        return this._items().length === 0;
    }
    isMoveUpEnabled() {
        return this._items.indexOf(this.activeItemArray()[0]) > 0;
    }
    isMoveDownEnabled() {
        const index = this._items.indexOf(this.activeItemArray()[0]);
        return index > -1 && index < this._items().length - 1;
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/addGroupingLevelPage.js







function _fillTreeQueries(reportTree, queries, level, parentDisplayName) {
    const lvl = level;
    queries.forEach(query => {
        if (query.checked !== false) {
            const fields = query.fields.filter(field => field.checked).map((value => { return { name: value.name, displayName: value.displayName, specifics: value.specifics }; }));
            const name = query.displayName || query.name;
            const displayName = parentDisplayName ? [parentDisplayName, name].join('.') : name;
            reportTree.push({
                name: name,
                displayName: displayName,
                path: query.path,
                fields: fields,
                isList: true,
                level: level
            });
            if (query.relations.length > 0) {
                const newLvl = lvl + 1;
                _fillTreeQueries(reportTree, query.relations, newLvl, displayName);
            }
        }
    });
    return reportTree;
}
class AddGroupingLevelPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    _setData(queries) {
        queries.forEach(query => {
            if (!this._groupingLevels[query.path] || !this._availableColumns[query.path]) {
                this._availableColumns[query.path] = new ListViewModel();
                this._groupingLevels[query.path] = new ListViewModel();
            }
            if (!this._masterDetailGroups[query.path]) {
                this._masterDetailGroups[query.path] = [];
            }
            const fields = external_ko_namespaceObject.observableArray(query.fields.map(value => value.displayName));
            this._groupingLevels[query.path].setItems(this._masterDetailGroups[query.path].map((value) => {
                fields.removeAll(value);
                return { fields: external_ko_namespaceObject.observableArray(value) };
            }));
            this._availableColumns[query.path].setItems(fields());
        });
    }
    constructor() {
        super();
        this._availableColumns = {};
        this._groupingLevels = {};
        this._masterDetailGroups = {};
        this._addNewGroup = () => {
            if (this._isCreateGroupEnabled()) {
                this._currentGroups().add({ fields: external_ko_namespaceObject.observableArray([this._currentFields().activeItem]) });
                this._currentFields().removeActiveItem();
                this._onChange();
            }
        };
        this._appendFieldsToGroup = () => {
            if (this._isAppendToGroupEnabled()) {
                this._currentGroups().activeItem.fields.push(this._currentFields().activeItem);
                this._currentFields().removeActiveItem();
                this._onChange();
            }
        };
        this._removeGroup = () => {
            if (this._isRemoveGroupEnabled()) {
                this._currentFields().addRange(this._currentGroups().activeItem.fields());
                this._currentGroups().removeActiveItem();
                this._onChange();
            }
        };
        this._moveUp = () => {
            !!this._currentGroups() && this._currentGroups().moveUp();
            this._onChange();
        };
        this._moveDown = () => {
            !!this._currentGroups() && this._currentGroups().moveDown();
            this._onChange();
        };
        this._fieldDblClick = (field) => {
            this._currentFields().activeItem = field;
            this._addNewGroup();
        };
        this._fieldClick = (e) => {
            this._currentFields().activeItem = e.itemData;
        };
        this._groupDblClick = (group) => {
            this._currentGroups().activeItem = group;
            this._removeGroup();
        };
        this._groupClick = (e) => {
            this._currentGroups().activeItem = e.itemData;
        };
        this._currentPath = external_ko_namespaceObject.observable('');
        this._currentFields = external_ko_namespaceObject.observable(null);
        this._currentGroups = external_ko_namespaceObject.observable(null);
        this._fieldCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Available fields', 'ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields');
        this._groupCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Groups', 'ASPxReportsStringId.ReportDesigner_Groups');
        this._reportTree = external_ko_namespaceObject.observableArray([]);
        this._disposables.push(this._currentPath.subscribe(newPath => {
            this._currentGroups(this._groupingLevels[newPath]);
            this._currentFields(this._availableColumns[newPath]);
        }));
    }
    canFinish() {
        return true;
    }
    _isCreateGroupEnabled() {
        return !!this._currentFields() && !!this._currentFields().activeItem;
    }
    _isAppendToGroupEnabled() {
        return !!this._currentFields() && this._currentFields().activeItem && !!this._currentGroups() && this._currentGroups().activeItem && this._currentGroups().activeItem.fields().length > 0;
    }
    _isRemoveGroupEnabled() {
        return !!this._currentGroups() && this._currentGroups().activeItem && this._currentGroups().activeItem.fields().length > 0;
    }
    _isMoveUpEnabled() {
        return !!this._currentGroups() && this._currentGroups().isMoveUpEnabled();
    }
    _isMoveDownEnabled() {
        return !!this._currentGroups() && this._currentGroups().isMoveDownEnabled();
    }
    initialize(state) {
        this._reportTree(_fillTreeQueries([], state.masterDetailInfoCollection, 0).map(item => { return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, item); }));
        this._masterDetailGroups = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, state.masterDetailGroups);
        const firstPath = this._reportTree()[0] && this._reportTree()[0].path;
        if (firstPath) {
            this._setData(this._reportTree());
            this._currentPath(firstPath);
            if (firstPath === this._currentPath.peek())
                this._currentPath.notifySubscribers(firstPath);
        }
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        const masterDetailGroups = {};
        const masterDetailSummaryOptionsColumns = {};
        this._reportTree().forEach(query => {
            if (this._groupingLevels[query.path].items.length > 0) {
                masterDetailGroups[query.path] = this._groupingLevels[query.path].items.map((item) => {
                    return item.fields().map(displayName => (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(query.fields, 'displayName', displayName).name);
                });
            }
            if (this._availableColumns[query.path]) {
                const summaryColumns = [];
                masterDetailSummaryOptionsColumns[query.path] = [];
                this._availableColumns[query.path].items.forEach((fieldName) => {
                    const field = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(query.fields, 'displayName', fieldName);
                    if (field.specifics && ['integer', 'float', 'date'].indexOf(field.specifics.toLowerCase()) > -1) {
                        summaryColumns.push(field);
                    }
                });
                summaryColumns.sort((a, b) => { return a.name.localeCompare(b.name); });
                if (summaryColumns.length === 0)
                    delete masterDetailSummaryOptionsColumns[query.path];
                else
                    masterDetailSummaryOptionsColumns[query.path] = summaryColumns;
            }
        });
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            masterDetailGroups: masterDetailGroups,
            masterDetailSummaryOptionsColumns: masterDetailSummaryOptionsColumns
        }).promise();
    }
}
function _registerAddGroupingLevelPage(factory) {
    factory.registerMetadata(ReportWizardPageId.AddGroupingLevelPage, {
        create: () => {
            return new AddGroupingLevelPage();
        },
        getState: (state) => state,
        setState: (data, state) => {
            state.masterDetailGroups = data.masterDetailGroups;
            state.masterDetailSummaryOptionsColumns = data.masterDetailSummaryOptionsColumns;
        },
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Group data in the selected reports. You can specify one or more fields for each group.', 'ReportBoxDesignerStringId.Wizard_MasterDetailAddGroupingLevel_Description'),
        template: 'dxrd-page-masterdetail-groups',
        resetState: (state, defaultState) => {
            state.masterDetailGroups = defaultState.masterDetailGroups;
            state.masterDetailSummaryOptionsColumns = defaultState.masterDetailSummaryOptionsColumns;
        }
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/addGroupingLevelSection.js







class _GroupsFieldStore extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        this.disposeObservableArray(this.groups);
    }
    constructor(query, _onChange) {
        super();
        this._onChange = _onChange;
        this.groups = external_ko_namespaceObject.observableArray();
        this.addGroupText = () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add Group', 'ASPxReportsStringId.ReportDesigner_Wizard_AddGroup_Text');
        this.path = query.path;
        this.displayName = query.displayName;
        this.dataSource = external_ko_namespaceObject.observableArray(query.fields.map(x => (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, x, { visible: external_ko_namespaceObject.observable(true) })));
    }
    getSelectedFieldsFlat() {
        return [].concat([], ...this.getSelectedFields());
    }
    getSelectedFields() {
        return this.groups().filter(x => x.fields().length > 0).map(x => x.fields());
    }
    isCreateGroupEnabled() {
        const groupsWithoutFields = this.groups().filter(x => x.fields().length === 0).length;
        const newAvailableGroupsCount = this.dataSource().length - this.getSelectedFieldsFlat().length;
        return newAvailableGroupsCount - groupsWithoutFields > 0;
    }
    add() {
        this.groups.push(new _GroupField(this, this._onChange));
        this._onChange();
    }
    remove(index) {
        this.groups()[index].dispose();
        this.groups.splice(index, 1);
        this._onChange();
    }
    moveUpDisabled(index) {
        return index === 0;
    }
    moveDownDisabled(index) {
        return index === this.groups().length - 1;
    }
    moveup(index) {
        const groups = this.groups();
        groups.splice(index - 1, 2, groups[index], groups[index - 1]);
        this.groups.valueHasMutated();
        this._onChange();
    }
    movedown(index) {
        const groups = this.groups();
        groups.splice(index, 2, groups[index + 1], groups[index]);
        this.groups.valueHasMutated();
        this._onChange();
    }
}
class _GroupField extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _updateDataSource() {
        this._store.dataSource().forEach(item => {
            item.visible(!this._store.groups.peek().some(group => {
                return group !== this && group.fields().indexOf(item.name) !== -1;
            }));
        });
    }
    constructor(_store, _onChange) {
        super();
        this._store = _store;
        this._onChange = _onChange;
        this.fields = external_ko_namespaceObject.observableArray();
        this._disposables.push(this.fields.subscribe(() => this._onChange()));
        let needRefresh = true;
        this.value = {
            dataSource: this._store.dataSource,
            showDropDownButton: true,
            searchEnabled: true,
            value: this.fields,
            getOptions: (options) => this.getOptions(options),
            multiline: false,
            placeholder: (0,external_DevExpress_Analytics_Internal_namespaceObject.selectPlaceholder)(),
            selectAllText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select All', 'AnalyticsCoreStringId.SelectAll'),
            getPopupContainer: external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer,
            showSelectionControls: true,
            valueExpr: 'name',
            displayExpr: 'displayName',
            searchExpr: ['displayName'],
            onOpened: (e) => {
                this._updateDataSource();
                if (e.component._popup) {
                    const _$content = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(e.component.content());
                    const _selectAll = _$content.find('.dx-list-select-all');
                    const _popupHeight = _$content.height();
                    _selectAll.css('display', 'none');
                    _$content.height(_popupHeight - _selectAll.outerHeight());
                    e.component._popup.refreshPosition();
                }
                if (needRefresh) {
                    e.component._refresh();
                    needRefresh = false;
                }
            },
            onClosed: (e) => {
                this._store.dataSource().forEach(x => x.visible(true));
                needRefresh = true;
            },
        };
    }
    getOptions(options) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(this.value, { dropDownOptions: options.dropDownOptions });
    }
}
class AddGroupFieldsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this._reportTree = [];
        this._groupInfos = external_ko_namespaceObject.observableArray();
    }
    dispose() {
        this.disposeObservableArray(this._groupInfos);
    }
    canFinish() {
        return true;
    }
    _mergeGroups(newGroups) {
        const currentGroups = this._groupInfos();
        newGroups.forEach((groupInfo) => {
            const currentGroup = currentGroups.filter(group => group.displayName === groupInfo.displayName)[0];
            if (!currentGroup || currentGroup.groups().length === 0)
                return;
            currentGroup.groups().filter(group => group.fields().length > 0).forEach((group) => {
                const availabelFields = groupInfo.dataSource().filter((field) => group.fields().some(x => x === field.name));
                if (availabelFields.length > 0) {
                    groupInfo.add();
                    groupInfo.groups()[groupInfo.groups().length - 1].fields(availabelFields.map(x => x.name));
                }
            });
        });
        this.disposeObservableArray(this._groupInfos);
    }
    initialize(state) {
        this._reportTree = _fillTreeQueries([], state.masterDetailInfoCollection, 0).map(item => { return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, item); });
        const newGroups = this._reportTree.filter(x => x.fields.length > 0).map(x => new _GroupsFieldStore(x, this._onChange));
        this._mergeGroups(newGroups);
        this._groupInfos(newGroups);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        const masterDetailGroups = {};
        const masterDetailSummaryOptionsColumns = {};
        this._groupInfos().forEach(groupInfo => {
            const selectedFields = groupInfo.getSelectedFields();
            if (selectedFields.length > 0) {
                masterDetailGroups[groupInfo.path] = selectedFields;
            }
        });
        this._reportTree.forEach(query => {
            let availableFields = query.fields.filter(field => field.specifics && ['integer', 'float', 'date', 'bool'].indexOf(field.specifics.toLowerCase()) > -1);
            if (masterDetailGroups[query.path]) {
                availableFields = availableFields.filter(field => masterDetailGroups[query.path].some(items => items.indexOf(field.name) === -1));
            }
            if (availableFields.length > 0) {
                masterDetailSummaryOptionsColumns[query.path] = availableFields;
            }
        });
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            masterDetailGroups: masterDetailGroups,
            masterDetailSummaryOptionsColumns: masterDetailSummaryOptionsColumns
        }).promise();
    }
}
function _registerAddGroupFieldsPage(factory) {
    _registerAddGroupingLevelPage(factory);
    const meta = factory.getMetadata(ReportWizardPageId.AddGroupingLevelPage);
    meta.create = () => {
        return new AddGroupFieldsPage();
    };
    meta['disabledText'] = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('To add groups to the report, select data fields.', 'ASPxReportsStringId.ReportDesigner_Wizard_AddGroupFields_Placeholder');
    meta.template = 'dxrd-page-masterdetail-groups-section';
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/chooseSummaryOptionsPage.js








class ChooseSummaryOptionsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    _createSummaryInfo() {
        const newItem = new SummaryInfo(getSummaryFunctionValues());
        this._disposables.push(newItem.field.subscribe(newValue => {
            this._createNewItemIfNeed();
        }));
        return newItem;
    }
    _createNewItemIfNeed() {
        const _summaryInfos = this._summaryInfos.peek();
        if (_summaryInfos.filter(item => !item.field()).length === 0 && _summaryInfos.length < this._availableFields.peek().length)
            this._summaryInfos.push(this._createSummaryInfo());
        const fieldNames = this._summaryInfos.peek().filter(item => !!item.field()).map(item => item.field().name);
        this._displayedFields[this._currentPath()] && this._displayedFields[this._currentPath()]().forEach(item => item.visible(fieldNames.indexOf(item.name) === -1));
        this._onChange();
    }
    _changeQuery(path) {
        this._currentPath(path);
        this._summaryInfoMapByDataMember[this._currentDataMember] = this._summaryInfos();
        this._currentDataMember = path;
        this._availableFields(this._masterDetailColumns[path] || []);
        this._summaryInfos(this._summaryInfoMapByDataMember[path] || []);
        this._createNewItemIfNeed();
    }
    constructor() {
        super();
        this._allColumns = {};
        this._masterDetailColumns = {};
        this._toggleIgnoreNullValues = () => {
            this.ignoreNullValues(!this.ignoreNullValues());
            this._onChange();
        };
        this._summaryOptions = external_ko_namespaceObject.observableArray([]);
        this.ignoreNullValues = external_ko_namespaceObject.observable(false);
        this._template = 'dxrd-page-masterdetail-summary';
        this._reportTree = external_ko_namespaceObject.observableArray([]);
        this._currentPath = external_ko_namespaceObject.observable('');
        this._availableFields = external_ko_namespaceObject.observableArray([]);
        this._summaryInfos = external_ko_namespaceObject.observableArray([]);
        this._selectFieldToSummaryCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select fields and assign summary functions to them', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SelectFieldsAndSummaries');
        this._fieldsCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Fields', 'DevExpress.XtraReports.UI.XRPivotGrid.Fields');
        this._summaryFunctionCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Summary Functions', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SummaryFunctions');
        this._ignoreNullValuesCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues');
        this._disposables.push(this._currentPath.subscribe(newPath => {
            this._changeQuery(newPath);
        }));
    }
    _removeSummaryInfo(info) {
        const index = this._summaryInfos.indexOf(info);
        if (index === -1)
            return;
        this._summaryInfos.splice(index, 1);
        this._createNewItemIfNeed();
        this._onChange();
    }
    canFinish() {
        return true;
    }
    initialize(state) {
        this._masterDetailColumns = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, state.masterDetailSummaryOptionsColumns);
        this.ignoreNullValues(state.ignoreNullValuesForSummary);
        this._reportTree(_fillTreeQueries([], state.masterDetailInfoCollection, 0));
        this._currentDataMember = this._reportTree()[0].path;
        const allColumnsTest = {};
        this._reportTree().forEach(query => {
            allColumnsTest[query.path] = state.masterDetailSummaryOptionsColumns[query.path] && state.masterDetailSummaryOptionsColumns[query.path].map(field => field.name);
        });
        let changes = [];
        Object.keys(allColumnsTest).forEach((key) => {
            changes = changes.concat(external_ko_namespaceObject.utils.compareArrays(this._allColumns[key], allColumnsTest[key]));
        });
        const isColumnsChanged = changes.some((change, index, array) => { return change.status != 'retained'; });
        if (isColumnsChanged) {
            this._allColumns = allColumnsTest;
            this._summaryInfos([]);
            this._summaryInfoMapByDataMember = {};
            this._displayedFields = {};
            Object.keys(this._masterDetailColumns || {}).forEach((key) => {
                this._displayedFields[key] = external_ko_namespaceObject.observableArray([]);
                this._displayedFields[key](this._masterDetailColumns[key].map(item => {
                    return { name: item.name, displayName: item.displayName, visible: external_ko_namespaceObject.observable(true) };
                }));
            });
        }
        else {
            this._summaryInfos(this._summaryInfoMapByDataMember[this._currentDataMember]);
        }
        this._changeQuery(this._currentDataMember);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        this._summaryInfoMapByDataMember[this._currentDataMember] = this._summaryInfos();
        const masterDetailSummaryOptionsColumns = this._masterDetailColumns;
        const masterDetailSummariesInfo = {};
        Object.keys(this._summaryInfoMapByDataMember || {}).forEach((key) => {
            masterDetailSummariesInfo[key] = this._summaryInfoMapByDataMember[key].filter(item => !!item.field()).map(summaryOption => ({ column: summaryOption.field(), summaryFunctions: summaryOption.value.value().map(item => summaryOption.value.dataSource.map(option => option.value).indexOf(item)) }));
        });
        const ignoreNullValuesForSummary = this.ignoreNullValues();
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            masterDetailSummaryOptionsColumns: masterDetailSummaryOptionsColumns,
            masterDetailSummariesInfo: masterDetailSummariesInfo,
            ignoreNullValuesForSummary: ignoreNullValuesForSummary
        }).promise();
    }
}
function _registerChooseSummaryOptionsPage(factory) {
    factory.registerMetadata(ReportWizardPageId.ChooseSummaryOptionsPage, {
        create: () => {
            return new ChooseSummaryOptionsPage();
        },
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Choose summary functions to calculate in reports.', 'ReportBoxDesignerStringId.Wizard_MasterDetailChooseSummaryOptions_Description'),
        template: 'dxrd-page-masterdetail-summary',
        getState: (state) => state,
        setState: (data, state) => {
            state.masterDetailSummariesInfo = data.masterDetailSummariesInfo;
            state.ignoreNullValuesForSummary = data.ignoreNullValuesForSummary;
        },
        resetState: (state, defaultState) => {
            state.masterDetailSummariesInfo = defaultState.masterDetailSummariesInfo;
            state.ignoreNullValuesForSummary = defaultState.ignoreNullValuesForSummary;
        }
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/chooseSummaryOptionsSection.js








class AddSummaryFieldsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this._toggleIgnoreNullValues = () => {
            this.ignoreNullValues(!this.ignoreNullValues());
            this._onChange();
        };
        this._fieldListProvider = external_ko_namespaceObject.observable(null);
        this.ignoreNullValues = external_ko_namespaceObject.observable(false);
        this._template = 'dxrd-page-masterdetail-summary-section';
        this._reportTree = external_ko_namespaceObject.observableArray([]);
        this._availableFieldsCount = external_ko_namespaceObject.observable(0);
        this._summaryInfos = external_ko_namespaceObject.observableArray([]);
        this._selectFieldToSummaryCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select fields and assign summary functions to them', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SelectFieldsAndSummaries');
        this._fieldsCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Field', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryFields_Text');
        this._summaryFunctionCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Summary Functions', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SummaryOptions_SummaryFunctions');
        this._ignoreNullValuesCaption = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues');
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this._summaryInfos);
    }
    _fillTreeQueries(tree, queries, availableQueries) {
        _fillTreeQueries([], queries, 0).forEach((value) => {
            if (availableQueries[value.path]) {
                const fields = value.fields.filter(x => availableQueries[value.path].some(field => field.name === x.name));
                const treeItem = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, value);
                treeItem.fields = fields;
                tree.push(treeItem);
            }
        });
        return tree;
    }
    _createSummaryInfo() {
        const newItem = new SummaryInfoFieldlist();
        newItem._disposables.push(newItem.selectedPath.subscribe((newVal) => {
            if (!newVal)
                newItem.field(null);
            else {
                this._fieldListProvider().getItemByPath({
                    fullPath: newVal,
                    path: newVal
                }).done((item) => {
                    newItem.field(item);
                    this._createNewItemIfNeed();
                });
            }
            this._onChange();
        }));
        newItem._disposables.push(newItem.functionValue.subscribe((newVal) => {
            this._onChange();
        }));
        return newItem;
    }
    _createNewItemIfNeed() {
        const _summaryInfos = this._summaryInfos.peek();
        if (_summaryInfos.filter(item => !item.field()).length === 0 && _summaryInfos.length < this._availableFieldsCount())
            this._summaryInfos.push(this._createSummaryInfo());
    }
    _getParentName(parent) {
        if (parent.parent) {
            return [this._getParentName(parent.parent), parent.displayName].join('.');
        }
        return parent.displayName;
    }
    _flat(fields, parent) {
        let flatList = fields.map(x => {
            if (x.path) {
                x.name = x.path;
            }
            else {
                x.path = [parent.path, x.name].join('.');
            }
            if (parent) {
                x.parent = {
                    path: parent.path,
                    displayName: this._getParentName(parent)
                };
            }
            return x;
        });
        fields.forEach(x => {
            if (x.fields) {
                flatList = flatList.concat(this._flat(x.fields, x));
            }
        });
        return flatList;
    }
    _removeSummaryInfo(info) {
        const index = this._summaryInfos.indexOf(info);
        if (index === -1)
            return;
        info.dispose();
        this._summaryInfos.splice(index, 1);
        if (this._summaryInfos.length === 0) {
            this._createNewItemIfNeed();
        }
        this._onChange();
    }
    canFinish() {
        return true;
    }
    _updateSummaries(flatlist) {
        this._summaryInfos().filter(x => x.field() && flatlist.every(item => item.path !== x.field().path)).forEach((item) => {
            this._summaryInfos().splice(this._summaryInfos().indexOf(item), 1);
        });
        this._summaryInfos.valueHasMutated();
    }
    initialize(state) {
        this.ignoreNullValues(state.ignoreNullValuesForSummary);
        this._reportTree(this._fillTreeQueries([], state.masterDetailInfoCollection, state.masterDetailSummaryOptionsColumns));
        const flatList = this._flat(this._reportTree());
        this._updateSummaries(flatList);
        this._availableFieldsCount(this._reportTree().reduce((count, item) => {
            count += item.fields.length;
            return count;
        }, 0));
        this._fieldListProvider({
            getItemByPath: (path) => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve(flatList.filter(x => x.path === path.fullPath)[0]).promise();
            },
            getItems: (path) => {
                const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
                if (path.fullPath === '') {
                    deferred.resolve(this._reportTree().filter(root => root.fields.some((field) => this._summaryInfos().every((summaryInfo) => summaryInfo.field() !== field))));
                }
                else {
                    const item = this._reportTree().filter(x => x.path === path.fullPath)[0];
                    if (item) {
                        deferred.resolve(item.fields.filter(field => this._summaryInfos().every(summaryInfo => summaryInfo.field() !== field)));
                    }
                    else
                        deferred.resolve([]);
                }
                return deferred.promise();
            }
        });
        this._createNewItemIfNeed();
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        const masterDetailSummariesInfo = {};
        this._summaryInfos().forEach(summaryOption => {
            const field = summaryOption.field();
            if (!field)
                return;
            if (!masterDetailSummariesInfo[field['parent'].path]) {
                masterDetailSummariesInfo[field['parent'].path] = [];
            }
            masterDetailSummariesInfo[field['parent'].path].push({
                column: summaryOption.field(),
                summaryFunctions: summaryOption.value.value().map(item => summaryOption.value.dataSource.map(option => option.value).indexOf(item))
            });
        });
        const ignoreNullValuesForSummary = this.ignoreNullValues();
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            masterDetailSummariesInfo: masterDetailSummariesInfo,
            ignoreNullValuesForSummary: ignoreNullValuesForSummary
        }).promise();
    }
}
function _registerAddSummaryFieldsPage(factory) {
    _registerChooseSummaryOptionsPage(factory);
    const meta = factory.getMetadata(ReportWizardPageId.ChooseSummaryOptionsPage);
    meta.create = () => {
        return new AddSummaryFieldsPage();
    };
    meta['disabledText'] = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('To add a summary field to the report, select a data field (numeric, date-time or boolean) and ensure that it is not used in groups.', 'ASPxReportsStringId.ReportDesigner_Wizard_AddSummaryFields_Placeholder');
    meta.template = 'dxrd-page-masterdetail-summary-section';
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/defineReportLayoutPage.js








class DefineReportLayoutPage extends external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizardPage {
    constructor(_reportWizardOptions) {
        super();
        this._reportWizardOptions = _reportWizardOptions;
    }
    registerSections() {
        _registerSelectDataMembersPage(this._factory, this._reportWizardOptions, FullscreenReportWizardSectionId.SelectDataMembersPage_Members);
        _registerAddGroupFieldsPage(this._factory);
        _registerAddSummaryFieldsPage(this._factory);
        let meta = this._factory.getMetadata(FullscreenReportWizardSectionId.SelectDataMembersPage_Members);
        meta['disabledText'] = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Loading...', 'AnalyticsCoreStringId.Loading');
        meta.description = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select queries for the report and its detail reports.', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectQueries');
        meta = this._factory.getMetadata(FullscreenReportWizardSectionId.AddGroupFieldsPage);
        meta.description = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add group fields.', 'ASPxReportsStringId.ReportDesigner_Wizard_AddGroupFields');
        meta = this._factory.getMetadata(FullscreenReportWizardSectionId.AddSummaryFieldsPage);
        meta.description = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add summary fields.', 'ASPxReportsStringId.ReportDesigner_Wizard_AddSummaryFields');
        this._setSectionPosition(FullscreenReportWizardSectionId.SelectDataMembersPage_Members, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Top);
        this._setSectionPosition(FullscreenReportWizardSectionId.AddGroupFieldsPage, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.BottomRight : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.BottomLeft);
        this._setSectionPosition(FullscreenReportWizardSectionId.AddSummaryFieldsPage, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.BottomLeft : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.BottomRight);
    }
    _beforeStart() {
        this._sections[0].metadata.template = 'dxrd-page-masterdetail-select-dataMembers';
        const cachedItem = new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardPageSection(FullscreenReportWizardSectionId.SelectDataMembersPage_Fields, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, this._sections[0].metadata, {
            template: 'dxrd-page-masterdetail-select-fieldMembers',
            description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select data fields to display in the report.', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectDataFields'),
            disabledText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Loading...', 'AnalyticsCoreStringId.Loading')
        }));
        cachedItem.page = this._sections[0].page;
        this._sections.splice(1, 0, cachedItem);
        this._setSectionPosition(FullscreenReportWizardSectionId.SelectDataMembersPage_Members, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.TopRight : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.TopLeft);
        this._setSectionPosition(FullscreenReportWizardSectionId.SelectDataMembersPage_Fields, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.TopLeft : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.TopRight);
    }
    getNextSectionId(sectionId) {
        if (!sectionId)
            return FullscreenReportWizardSectionId.SelectDataMembersPage_Members;
        else if (sectionId === FullscreenReportWizardSectionId.SelectDataMembersPage_Members && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(this._stateManager.getCurrentState().masterDetailInfoCollection) && this._stateManager.getCurrentState().masterDetailInfoCollection.some(item => item.checked !== false)) {
            return FullscreenReportWizardSectionId.AddGroupFieldsPage;
        }
        else if (sectionId === FullscreenReportWizardSectionId.AddGroupFieldsPage && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(this._stateManager.getCurrentState().masterDetailSummaryOptionsColumns)) {
            return FullscreenReportWizardSectionId.AddSummaryFieldsPage;
        }
    }
}
function _registerDefineReportLayoutPage(factory, reportWizardOptions) {
    factory.registerMetadata(FullscreenReportWizardPageId.DefineReportLayoutPage, {
        create: () => {
            return new DefineReportLayoutPage(reportWizardOptions);
        },
        getState: (state) => state,
        setState: (data, state) => {
            state.masterDetailInfoCollection = data.masterDetailInfoCollection;
            state.masterDetailGroups = data.masterDetailGroups;
            state.masterDetailSummaryOptionsColumns = data.masterDetailSummaryOptionsColumns;
            state.masterDetailSummariesInfo = data.masterDetailSummariesInfo;
            state.ignoreNullValuesForSummary = data.ignoreNullValuesForSummary;
        },
        resetState: (state, defaultState) => {
            state.masterDetailInfoCollection = defaultState.masterDetailInfoCollection;
            state.masterDetailGroups = defaultState.masterDetailGroups;
            state.masterDetailSummaryOptionsColumns = defaultState.masterDetailSummaryOptionsColumns;
            state.masterDetailSummariesInfo = defaultState.masterDetailSummariesInfo;
            state.ignoreNullValuesForSummary = defaultState.ignoreNullValuesForSummary;
        },
        navigationPanelText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Define Report Layout', 'ASPxReportsStringId.ReportDesigner_Wizard_DefineReportLayout'),
        template: 'dx-wizard-fullscreen-page'
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/defineCrossTabPage.js








class DefineCrossTabPage extends external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizardPage {
    constructor(_reportWizardOptions) {
        super();
        this._reportWizardOptions = _reportWizardOptions;
        this._className = 'dxrd-wizard-section-crosstab';
    }
    _showPageDescription() {
        return false;
    }
    canNext() {
        return true;
    }
    registerSections() {
        _registerSelectSingleDataMemberPage(this._factory, this._reportWizardOptions);
        this._setSectionPosition(FullscreenReportWizardSectionId.SelectSingleDataMemberPage, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.TopLeft);
        _registerConfigureCrossTabPage(this._factory, FullscreenReportWizardSectionId.ConfigureCrossTabColumnsPage, 'Columns', 'ReportStringId.CrossTab_ColumnAreaName', sortOrderdefaultValAscending);
        this._setSectionPosition(FullscreenReportWizardSectionId.ConfigureCrossTabColumnsPage, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.TopRight);
        _registerConfigureCrossTabPage(this._factory, FullscreenReportWizardSectionId.ConfigureCrossTabRowsPage, 'Rows', 'ReportStringId.CrossTab_RowAreaName', sortOrderdefaultValAscending);
        this._setSectionPosition(FullscreenReportWizardSectionId.ConfigureCrossTabRowsPage, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.BottomLeft);
        _registerConfigureCrossTabPage(this._factory, FullscreenReportWizardSectionId.ConfigureCrossTabDataPage, 'Data', 'ReportStringId.CrossTab_DataAreaName', crossTabSummaryType);
        this._setSectionPosition(FullscreenReportWizardSectionId.ConfigureCrossTabDataPage, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.BottomRight);
    }
    getNextSectionId(sectionId) {
        if (!sectionId)
            return FullscreenReportWizardSectionId.SelectSingleDataMemberPage;
        else if (sectionId === FullscreenReportWizardSectionId.SelectSingleDataMemberPage) {
            return FullscreenReportWizardSectionId.ConfigureCrossTabColumnsPage;
        }
        else if (sectionId === FullscreenReportWizardSectionId.ConfigureCrossTabColumnsPage) {
            return FullscreenReportWizardSectionId.ConfigureCrossTabRowsPage;
        }
        else if (sectionId === FullscreenReportWizardSectionId.ConfigureCrossTabRowsPage) {
            return FullscreenReportWizardSectionId.ConfigureCrossTabDataPage;
        }
    }
    commit() {
        const result = {};
        this._sections.forEach(section => {
            if (section && section.page().page instanceof ConfigureCrossTabPage) {
                const page = section.page().page;
                result[page.stateName] = page.fieldInfos().filter(x => x.field()).map(x => {
                    const info = {
                        name: x.field().name, displayName: x.field().displayName
                    };
                    info[page.itemInfo.propertyName] = x.functionValue().value;
                    return info;
                });
            }
        });
        const defferer = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        super.commit().done(sectionsResult => {
            defferer.resolve((0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(sectionsResult, result));
        });
        return defferer.promise();
    }
}
function _registerSelectSingleDataMemberPage(factory, reportWizardOptions) {
    factory.registerMetadata(FullscreenReportWizardSectionId.SelectSingleDataMemberPage, {
        create: () => {
            return new SelectCrossTabDataMember(reportWizardOptions.callbacks.fieldListsCallback, reportWizardOptions.hideDataMemberSubItems);
        },
        template: 'dxrd-page-crosstab-dataMembers',
        getState: (state) => state,
        setState: (data, state) => {
            state.crossTabFields = data.crossTabFields;
            state.dataMemberPath = data.dataMemberPath;
            state.dataMemberInfo = data.dataMemberInfo;
        },
        resetState: (state, defaultState) => {
            state.crossTabFields = defaultState.crossTabFields;
            state.dataMemberPath = defaultState.dataMemberPath;
            state.dataMemberInfo = defaultState.dataMemberInfo;
        }
    });
}
function _registerDefineCrossTabPage(factory, reportWizardOptions) {
    _registerDefineReportLayoutPage(factory, reportWizardOptions);
    const meta = factory.getMetadata(FullscreenReportWizardPageId.DefineReportLayoutPage);
    const newMeta = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, meta, {
        create: () => {
            return new DefineCrossTabPage(reportWizardOptions);
        },
        setState: (data, state) => {
            state.crossTabFields = data.crossTabFields;
            state.dataMemberPath = data.dataMemberPath;
            state.dataMemberInfo = data.dataMemberInfo;
            state.crossTabColumnsFieldInfo = data.crossTabColumnsFieldInfo;
            state.crossTabRowsFieldInfo = data.crossTabRowsFieldInfo;
            state.crossTabDataFieldInfo = data.crossTabDataFieldInfo;
        },
        resetState: (state, defaultState) => {
            state.crossTabFields = defaultState.crossTabFields;
            state.dataMemberPath = defaultState.dataMemberPath;
            state.dataMemberInfo = defaultState.dataMemberInfo;
            state.crossTabColumnsFieldInfo = defaultState.crossTabColumnsFieldInfo;
            state.crossTabRowsFieldInfo = defaultState.crossTabRowsFieldInfo;
            state.crossTabDataFieldInfo = defaultState.crossTabDataFieldInfo;
        }
    });
    factory.registerMetadata(FullscreenReportWizardPageId.DefineCrossTabPage, newMeta);
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/selectDataSourcePage.js






class SelectDataSourcePage extends external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizardPage {
    constructor(reportWizardOptions) {
        super();
        this.reportWizardOptions = reportWizardOptions;
    }
    registerSections() {
        if (this.reportWizardOptions.dataSources().length > 0) {
            _registerChooseAvailableDataSourcePage(this._factory, this.reportWizardOptions);
            this._setSectionPosition(FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage);
        }
        if (this.reportWizardOptions.canCreateDataSource) {
            _registerChooseDataSourceTypePage(this._factory, this.reportWizardOptions);
            this._setSectionPosition(FullscreenReportWizardSectionId.ChooseDataSourceTypePage);
            const meta = this._factory.getMetadata(FullscreenReportWizardSectionId.ChooseDataSourceTypePage);
            meta['disabledText'] = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("To specify a data source, select \"No, I'd like to create a new data source\".", 'AnalyticsCoreStringId.Wizard_SelectDataSourceType_Placeholder');
        }
        if (this.reportWizardOptions.dataSources().length > 0 && this.reportWizardOptions.canCreateDataSource) {
            this._setSectionPosition(FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Top);
            this._setSectionPosition(FullscreenReportWizardSectionId.ChooseDataSourceTypePage, external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Bottom);
        }
    }
    getNextSectionId(sectionId) {
        if (!sectionId && this.reportWizardOptions.dataSources().length > 0)
            return FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage;
        else if (!sectionId)
            return FullscreenReportWizardSectionId.ChooseDataSourceTypePage;
        else if (sectionId === FullscreenReportWizardSectionId.ChooseAvailableDataSourcePage && !this._stateManager.getCurrentState().dataSource)
            return FullscreenReportWizardSectionId.ChooseDataSourceTypePage;
    }
}
function _registerSelectDataSourcePage(factory, reportWizardOptions) {
    factory.registerMetadata(FullscreenReportWizardPageId.SelectDataSourcePage, {
        setState: (data, state) => {
            state.dataSourceType = data.dataSourceType;
            state.dataSource = data.dataSource;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.dataSource = defaultState.dataSource;
            state.dataSourceType = defaultState.dataSourceType;
        },
        create: () => {
            return new SelectDataSourcePage(reportWizardOptions);
        },
        navigationPanelText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select Data Source', 'ASPxReportsStringId.ReportDesigner_Wizard_SelectDataSource'),
        template: 'dx-wizard-fullscreen-page'
    });
}

;// ./node_modules/devexpress-reporting/designer/actions/_federationDataSourceEditor.js













class FederationDataSourceEditor extends DataSourceEditorBase {
    constructor() {
        super(...arguments);
        this.addAction = {
            clickAction: (item) => {
                this.openManageQueriesEditor(item.data.name);
            },
            imageClassName: 'dxrd-image-add-query',
            imageTemplateName: 'dxrd-svg-operations-add_query',
            text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Manage Queries...', 'DataAccessUIStringId.FederationDataSourceDesignerVerbManageQueries')
        };
        this.editAction = {
            clickAction: (item) => {
                const dataSourceInfo = this._findDataSource(item.path.split('.')[0]);
                this.getFederationDataSourceByInfo(dataSourceInfo).done(federationDataSource => {
                    const query = federationDataSource.queries().filter(x => x.alias() === item.name)[0];
                    this.queriesPopupHelper(new external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject.FederatedQueriesHelper(federationDataSource, federationDataSource.queries, {
                        onSave: () => this.saveDataSourceInfo(federationDataSource, dataSourceInfo),
                        onClose: () => this.queriesPopupHelper().dispose()
                    }, this._rtl));
                    this.queriesPopupHelper().editQuery(external_DevExpress_QueryBuilder_Utils_namespaceObject.FederationQueryType[query.queryType()], query.alias());
                });
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Edit query', 'AnalyticsCoreStringId.SqlDSWizard_EditQuery')
        };
        this.editRelationsAction = {
            clickAction: (item) => {
                this.editMasterDetailRelations(item.data.name);
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Edit Master-Detail Relations', 'ASPxReportsStringId.ReportDesigner_FieldListActions_EditMasterDetailRelations')
        };
        this.removeAction = {
            clickAction: (item) => {
                const dataSourceInfo = this._findDataSource(item.path.split('.')[0]);
                this.getFederationDataSourceByInfo(dataSourceInfo).done(federationDataSource => {
                    const query = federationDataSource.queries().filter(x => x.alias() === item.name)[0];
                    federationDataSource.queries.remove(query);
                    this.saveDataSourceInfo(federationDataSource, dataSourceInfo);
                });
            },
            position: 50,
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('Remove query', 'AnalyticsCoreStringId.SqlDSWizard_RemoveQuery')
        };
        this.relationsEditor = external_ko_namespaceObject.observable();
        this.manageQueriesEditor = external_ko_namespaceObject.observable();
        this.queriesPopupHelper = external_ko_namespaceObject.observable();
    }
    _applyFederationDataSourceWizardChanges(federationDataSource, dataSourceInfo) {
        return FederationDataSourceEditor.createFederationDataSourceInfo(federationDataSource)
            .done((result) => {
            if (dataSourceInfo) {
                dataSourceInfo.data['base64'](result.base64());
            }
            else {
                result.data = new DataFederationDataSource(result.data, this._dsHelper(), new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer());
                result.data.serializableSourceMap(federationDataSource.serializableSourceMap());
                addDataSourceToReport(this._dsHelper(), this._reportViewModel(), this._undoEngine(), this._itemsProvider(), result);
            }
        });
    }
    applyFederationDataSourceWizardChanges(dataSourceWizardModel) {
        const federationDataSource = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreFederationDataSourceFromState)(dataSourceWizardModel.federationDataSourceWizard, this._dsHelper().usedDataSources, dataSourceWizardModel.dataSourceId);
        return this._applyFederationDataSourceWizardChanges(federationDataSource);
    }
    static createFederationDataSourceInfo(dataSource) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        ReportDataSourceService.getFederationDataSourceBase64(dataSource, dataSource.dependentDataSources)
            .done((result) => {
            deferred.resolve({
                name: 'federationDataSource',
                id: dataSource.id,
                data: {
                    '@ObjectType': 'DevExpress.DataAccess.DataFederation.FederationDataSource',
                    '@Base64': result
                },
                isFederationDataSource: true,
                isListType: false,
                isSupportQueries: true,
                base64: () => result
            });
        })
            .fail(result => { DataSourceEditorBase._onFail(result, deferred); });
        return deferred.promise();
    }
    _wrapFieldListCallback(itemsCallback) {
        return (pathRequest, dataSource) => {
            return itemsCallback(pathRequest, dataSource, false);
        };
    }
    getFederationDataSourceByInfo(dataSourceInfo) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const rootManageQueriesDataSources = external_ko_namespaceObject.observableArray(this._dsHelper().usedDataSources().filter(x => x !== dataSourceInfo));
        ReportDataSourceService.federationDataSourceFromBase64(dataSourceInfo.data['base64'](), dataSourceInfo.data.dependentDataSources).done((result) => {
            const fieldListProvider = new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(this._wrapFieldListCallback(this._callbacks.fieldListsCallback), rootManageQueriesDataSources, [new external_DevExpress_Analytics_Wizard_Internal_namespaceObject.FederationDataSourceItemsExtender(rootManageQueriesDataSources)], true);
            const federationDataSource = new external_DevExpress_Analytics_Data_namespaceObject.FederationDataSource(JSON.parse(result.federationDataSourceJSON), rootManageQueriesDataSources, fieldListProvider);
            federationDataSource.name(dataSourceInfo.name);
            deferred.resolve(federationDataSource);
        });
        return deferred.promise();
    }
    editMasterDetailRelations(dataSourceID) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        this.getFederationDataSourceByInfo(dataSourceInfo).done(federationDataSource => {
            if (federationDataSource.queries().length < 2) {
                (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)('At least two queries are required to create a master-detail relation.', 'DataAccessUIStringId.MessageLessThanTwoQueries'), 'warning', 10000);
                return;
            }
            QBRequestWrapper().getFederationResultSchema(federationDataSource).done((schemaResult) => {
                this.relationsEditor(new external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject.MasterDetailEditor(federationDataSource.relations, new external_DevExpress_Analytics_Data_namespaceObject.ResultSet(JSON.parse(schemaResult.resultSchemaJSON)), () => {
                    federationDataSource.relations(federationDataSource.relations().map(x => external_DevExpress_Analytics_Data_namespaceObject.FederationMasterDetailRelation.create(x)));
                    return this._applyFederationDataSourceWizardChanges(federationDataSource, dataSourceInfo);
                }));
                this.relationsEditor().popupVisible(true);
            });
        });
    }
    saveDataSourceInfo(federationDataSource, dataSourceInfo) {
        this._undoEngine().start();
        federationDataSource.updateSerializableModel();
        dataSourceInfo.data.serializableSourceMap(federationDataSource.serializableSourceMap());
        this._applyFederationDataSourceWizardChanges(federationDataSource, dataSourceInfo).always(() => {
            this._undoEngine().end();
        });
    }
    openManageQueriesEditor(dataSourceID) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        this.getFederationDataSourceByInfo(dataSourceInfo).done(federationDataSource => {
            this.manageQueriesEditor() && this.manageQueriesEditor().dispose();
            this.manageQueriesEditor(new external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject.ManageFederatedQueriesEditor(federationDataSource, () => this.saveDataSourceInfo(federationDataSource, dataSourceInfo), this._rtl));
            this.manageQueriesEditor().popupVisible(true);
        });
    }
    getActions(context) {
        const result = [];
        if (!context.data)
            return result;
        if (context.data['canAddFederatedQuery']) {
            result.push(this.addAction);
            result.push(this.editRelationsAction);
        }
        if (context.data['canEditFederatedQuery']) {
            result.push(this.editAction);
            result.push(this.removeAction);
        }
        return result;
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/specifyFederationDataSourceSettingsPage.js







class SpecifyFederationDataSourceSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.SpecifyFederationDataSourceSettingsPage {
    canNext() {
        return super.canFinish();
    }
    initialize(state) {
        return super.initialize(state);
    }
    commit() {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        super.commit().done((state) => {
            const federationDataSource = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreFederationDataSourceFromState)(state.federationDataSourceWizard, this._dataSourceWizardOptions.dataSources, state.dataSourceId);
            const infoPromise = FederationDataSourceEditor.createFederationDataSourceInfo(federationDataSource);
            infoPromise.done((result) => {
                result.data = new DataFederationDataSource(result.data, this._dataSourceWizardOptions.dataSources, new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer());
                result.data.serializableSourceMap(federationDataSource.serializableSourceMap());
                deferred.resolve({
                    federationDataSourceWizard: state.federationDataSourceWizard,
                    newDataSource: _convertToStateDataSource(result)
                });
            }).fail(deferred.reject);
        });
        return deferred.promise();
    }
}
function _registerSpecifyFederationDataSourceSettingsPage(factory, wizardOptions) {
    (0,external_DevExpress_Analytics_Wizard_namespaceObject._registerSpecifyFederationDataSourceSettingsPage)(factory, wizardOptions);
    overrideFullscreenDataSourceWizardPageMetadata(factory, external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyFederationDataSourceSettingsPage, () => new SpecifyFederationDataSourceSettingsPage(wizardOptions));
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/dataSourceWizard/_dataSourceWizardHelper.js



function overrideDataSourceWizardPage(factory, pageId, meta) {
    const oldMetadata = factory.getMetadata(pageId);
    factory.registerMetadata(pageId, {
        canNext: (page) => page.canFinish() || page.canNext(),
        create: () => meta.create(),
        resetState: (state, defaultState) => {
            state.newDataSource = defaultState.newDataSource;
            meta.resetState && meta.resetState(state, defaultState);
        },
        getState: (state) => state,
        setState: (data, state) => {
            meta.setState && meta.setState(data, state);
            state.newDataSource = data.newDataSource;
        },
        description: oldMetadata.description,
        template: oldMetadata.template
    });
}
function overrideJsonDataSourceWizardPage(factory, pageId, meta) {
    overrideDataSourceWizardPage(factory, pageId, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, meta, {
        setState: (data, state) => {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(state.jsonDataSourceWizard, data.result);
        }
    }));
}
function overrideSqlDataSourceWizardPage(factory, pageId, meta) {
    overrideDataSourceWizardPage(factory, pageId, (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, meta, {
        setState: (data, state) => {
            state.sqlDataSourceWizard = data.result;
        }
    }));
}
class DataSourceWizardHelper {
    constructor(_page, _callback) {
        this._page = _page;
        this._callback = _callback;
    }
    commit(superCommit, createDataSource) {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        if (!this._page.canNext() && this._page.canFinish()) {
            superCommit().done((commitResult) => {
                const dataSourcePromise = this._callback(createDataSource(commitResult));
                dataSourcePromise.done((result) => {
                    result.data = createNewObjectItem(result.data);
                    deferred.resolve({
                        result: commitResult,
                        newDataSource: _convertToStateDataSource(result)
                    });
                }).fail(deferred.reject);
            });
        }
        else
            superCommit().done((commitResult) => {
                deferred.resolve({
                    result: commitResult
                });
            });
        return deferred.promise();
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/dataSourceWizard/chooseJsonSchemaPage.js


class ChooseJsonSchemaPage extends external_DevExpress_Analytics_Wizard_namespaceObject.ChooseJsonSchemaPage {
    constructor(createJsonDataSourceInfo) {
        super();
        this._dataSourceWizardHelper = new DataSourceWizardHelper(this, createJsonDataSourceInfo);
    }
    initialize(state) {
        this._dataSourceId = state.dataSourceId;
        return super.initialize(state.jsonDataSourceWizard);
    }
    commit() {
        return this._dataSourceWizardHelper.commit(() => super.commit(), (state) => (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreJsonDataSourceFromState)(state, undefined, this._dataSourceId));
    }
}
function _registerChooseJsonSchemaPage(factory, callbacks) {
    overrideJsonDataSourceWizardPage(factory, external_DevExpress_Analytics_Wizard_namespaceObject.JsonDataSourceWizardPageId.ChooseJsonSchemaPage, {
        create: () => {
            return new ChooseJsonSchemaPage(callbacks.createJsonDataSourceInfo);
        },
        resetState: (state) => {
            delete state.jsonDataSourceWizard.dataSourceName;
            delete state.jsonDataSourceWizard.jsonScheme;
            delete state.jsonDataSourceWizard.rootElement;
        }
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/specifyJsonDataSourceSettingsPage.js





class SpecifyJsonDataSourceSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.SpecifyJsonDataSourceSettingsPage {
    registerSections() {
        super.registerSections();
        _registerChooseJsonSchemaPage(this._factory, this['_dataSourceWizardOptions'].callbacks);
        const meta = this._factory.getMetadata(FullscreenReportWizardSectionId.ChooseJsonSchemaPage);
        meta['disabledText'] = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('To select data fields, choose or create a data connection.', 'AnalyticsCoreStringId.JsonDSWizard_ChooseJsonSchemaPage_Placeholder');
    }
}
function _registerSpecifyJsonDataSourceSettingsPage(factory, wizardOptions) {
    (0,external_DevExpress_Analytics_Wizard_namespaceObject._registerSpecifyJsonDataSourceSettingsPage)(factory, wizardOptions);
    overrideFullscreenDataSourceWizardPageMetadata(factory, FullscreenReportWizardPageId.SpecifyJsonDataSourceSettingsPage, () => new SpecifyJsonDataSourceSettingsPage(wizardOptions));
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_labelWizardUtils.js
const CONVERSION_COEEFICIENT = 0.0393701;

;// ./node_modules/devexpress-reporting/designer/wizard/pages/_selectLabelTypePage.js


let labelReportWizardPromise = null;
function initializeLabelReportWizardPromise() {
    if (!labelReportWizardPromise) {
        const $def = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        ReportWizardService.getLabelReportWizardData().done(data => $def.resolve(JSON.parse(data)));
        labelReportWizardPromise = $def.promise();
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/customizeLabelPage.js











class CustomizeLabelPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    _getFormattedValueInUnits(value) {
        return getFormattedValueInUnits(value, this.unit());
    }
    _getLabelsCount(paperDimentionInLabelUnit, labelPitch, labelWidth, margin) {
        return Math.floor((paperDimentionInLabelUnit - margin + (labelPitch - labelWidth)) / labelPitch);
    }
    constructor() {
        super();
        this._id = external_ko_namespaceObject.observable(0);
        this._labelWidth = external_ko_namespaceObject.observable(0);
        this._labelHeight = external_ko_namespaceObject.observable(0);
        this._horizontalPitch = external_ko_namespaceObject.observable(0);
        this._verticalPitch = external_ko_namespaceObject.observable(0);
        this._topMargin = external_ko_namespaceObject.observable(0);
        this._leftMargin = external_ko_namespaceObject.observable(0);
        this._rightMargin = external_ko_namespaceObject.observable(0);
        this._bottomMargin = external_ko_namespaceObject.observable(0);
        this._rowsCount = external_ko_namespaceObject.pureComputed(() => {
            return this._getLabelsCount(this._pageHeight(), this._verticalPitch(), this._labelHeight(), this._topMargin() + this._bottomMargin());
        });
        this._columnsCount = external_ko_namespaceObject.pureComputed(() => {
            return this._getLabelsCount(this._pageWidth(), this._horizontalPitch(), this._labelWidth(), this._leftMargin() + this._rightMargin());
        });
        this._pageHeight = external_ko_namespaceObject.pureComputed(() => {
            if (this._selectedPaperSize().unit === this.unit())
                return this._selectedPaperSize().height;
            if (this._selectedPaperSize().unit === GraphicsUnit.Millimeter)
                return this._selectedPaperSize().height * CustomizeLabelPage._CONVERSION_COEEFICIENT;
            return this._selectedPaperSize().height / CustomizeLabelPage._CONVERSION_COEEFICIENT;
        });
        this._pageWidth = external_ko_namespaceObject.pureComputed(() => {
            if (this._selectedPaperSize().unit === this.unit())
                return this._selectedPaperSize().width;
            if (this._selectedPaperSize().unit === GraphicsUnit.Millimeter)
                return this._selectedPaperSize().width * CustomizeLabelPage._CONVERSION_COEEFICIENT;
            return this._selectedPaperSize().width / CustomizeLabelPage._CONVERSION_COEEFICIENT;
        });
        this.paperKinds = () => { return (this._labelData.paperKinds); };
        this._selectedPaperSize = external_ko_namespaceObject.observable({ 'id': 1, 'enumId': 9, 'name': 'A4', 'width': 210.0, 'height': 297.0, 'unit': 6, 'isRollPaper': false });
        this.unit = external_ko_namespaceObject.observable();
        this._stepUnit = external_ko_namespaceObject.pureComputed(() => this.unit() === GraphicsUnit.Inch ? 0.01 : 0.1);
        this.labelWidth = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._labelWidth())),
            write: (value) => this._labelWidth(value)
        });
        this.labelHeight = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._labelHeight())),
            write: (value) => this._labelHeight(value)
        });
        this.horizontalPitch = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._horizontalPitch())),
            write: (value) => this._horizontalPitch(value)
        });
        this.verticalPitch = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._verticalPitch())),
            write: (value) => this._verticalPitch(value)
        });
        this.topMargin = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._topMargin())),
            write: (value) => this._topMargin(value)
        });
        this.leftMargin = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._leftMargin())),
            write: (value) => this._leftMargin(value)
        });
        this.rightMargin = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._rightMargin())),
            write: (value) => this._rightMargin(value)
        });
        this.bottomMargin = external_ko_namespaceObject.computed({
            read: () => parseFloat(this._getFormattedValueInUnits(this._bottomMargin())),
            write: (value) => this._bottomMargin(value)
        });
        this._labelsCountText = external_ko_namespaceObject.pureComputed(() => {
            return this._rowsCount() * this._columnsCount() + ' ' + (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('labels on the page', 'ASPxReportsStringId.ReportDesigner_Wizard_CustomizeLabelPage_LabelCountText') + ', ' + this._columnsCount() + ' x ' + this._rowsCount();
        });
        this._pageSizeText = external_ko_namespaceObject.pureComputed(() => {
            return CustomizeLabelPage._getPageSizeText(this._pageWidth(), this._pageHeight(), this.unit());
        });
        this._units = [
            { text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Inch', 'AnalyticsCoreStringId.Wizard_Inch'), value: GraphicsUnit.Inch },
            { text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Millimeter', 'AnalyticsCoreStringId.Wizard_Millimeter'), value: GraphicsUnit.Millimeter }
        ];
        this._disposables.push(this._rowsCount, this._columnsCount, this._pageHeight, this._pageWidth);
        this._disposables.push(this.unit.subscribe(newUnit => {
            if (newUnit === GraphicsUnit.Inch) {
                this._labelWidth(this._labelWidth() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._labelHeight(this._labelHeight() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._horizontalPitch(this._horizontalPitch() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._verticalPitch(this._verticalPitch() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._topMargin(this._topMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._leftMargin(this._leftMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._rightMargin(this._rightMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._bottomMargin(this._bottomMargin() * CustomizeLabelPage._CONVERSION_COEEFICIENT);
            }
            else if (newUnit === GraphicsUnit.Millimeter) {
                this._labelWidth(this._labelWidth() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._labelHeight(this._labelHeight() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._horizontalPitch(this._horizontalPitch() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._verticalPitch(this._verticalPitch() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._topMargin(this._topMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._leftMargin(this._leftMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._rightMargin(this._rightMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
                this._bottomMargin(this._bottomMargin() / CustomizeLabelPage._CONVERSION_COEEFICIENT);
            }
        }));
        this._disposables.push(...(0,external_DevExpress_Analytics_Wizard_Internal_namespaceObject.subscribeProperties)([
            this._labelWidth,
            this._labelHeight,
            this._horizontalPitch,
            this._verticalPitch,
            this._topMargin,
            this._leftMargin,
            this._rightMargin,
            this._bottomMargin,
            this.unit,
            this._selectedPaperSize
        ], () => this._onChange()));
        this._disposables.push(this._stepUnit, this.labelWidth, this.labelHeight, this.horizontalPitch, this.verticalPitch, this.topMargin, this.leftMargin, this.rightMargin, this.bottomMargin, this._labelsCountText, this._pageSizeText);
    }
    canNext() {
        return false;
    }
    canFinish() {
        return true;
    }
    initialize(labelDetails) {
        initializeLabelReportWizardPromise();
        return labelReportWizardPromise.done((labelData) => {
            this._labelData = labelData;
            this._id(labelDetails.id);
            this.unit(labelDetails.unit);
            this._selectedPaperSize((0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this.paperKinds(), item => item.id === labelDetails.paperKindId));
            this._labelWidth(labelDetails.width);
            this._labelHeight(labelDetails.height);
            this._horizontalPitch(labelDetails.hPitch);
            this._verticalPitch(labelDetails.vPitch);
            this._topMargin(labelDetails.topMargin);
            this._leftMargin(labelDetails.leftMargin);
            this._rightMargin(labelDetails.rightMargin);
            this._bottomMargin(labelDetails.bottomMargin);
        });
    }
    commit() {
        const labelDetails = {};
        labelDetails.width = this._labelWidth();
        labelDetails.height = this._labelHeight();
        labelDetails.hPitch = this._horizontalPitch();
        labelDetails.vPitch = this._verticalPitch();
        labelDetails.topMargin = this._topMargin();
        labelDetails.leftMargin = this._leftMargin();
        labelDetails.rightMargin = this._rightMargin();
        labelDetails.bottomMargin = this._bottomMargin();
        labelDetails.unit = this.unit();
        labelDetails.paperKindId = this._selectedPaperSize().id;
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve(labelDetails).promise();
    }
    static _getPageSizeText(width, height, unit) {
        return getFormattedValueInUnits(width, unit) + ' x ' + getFormattedValueInUnits(height, unit) + (unit === GraphicsUnit.Inch ? ' in' : ' mm');
    }
}
CustomizeLabelPage._CONVERSION_COEEFICIENT = CONVERSION_COEEFICIENT;

function _registerCustomizeLabelPage(factory) {
    factory.registerMetadata(ReportWizardPageId.CustomizeLabelPage, {
        setState: (labelDetails, state) => {
            state.width = labelDetails.width;
            state.height = labelDetails.height;
            state.hPitch = labelDetails.hPitch;
            state.vPitch = labelDetails.vPitch;
            state.topMargin = labelDetails.topMargin;
            state.leftMargin = labelDetails.leftMargin;
            state.rightMargin = labelDetails.rightMargin;
            state.bottomMargin = labelDetails.bottomMargin;
            state.unit = labelDetails.unit;
            state.paperKindId = labelDetails.paperKindId;
        },
        getState: (state) => {
            return state.labelDetails;
        },
        resetState: (state, defaultState) => {
            state.width = defaultState.width;
            state.height = defaultState.height;
            state.hPitch = defaultState.hPitch;
            state.vPitch = defaultState.vPitch;
            state.topMargin = defaultState.topMargin;
            state.leftMargin = defaultState.leftMargin;
            state.rightMargin = defaultState.rightMargin;
            state.bottomMargin = defaultState.bottomMargin;
            state.unit = defaultState.unit;
            state.paperKindId = defaultState.paperKindId;
        },
        create: () => {
            return new CustomizeLabelPage();
        },
        template: 'dxrd-page-customizeLabel',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("Choose the page size and customize the label's parameters.", 'ASPxReportsStringId.ReportDesigner_Wizard_LabelPageSize')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/selectLabelTypePage.js









class SelectLabelTypePage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super();
        this._selectedPaperSize = external_ko_namespaceObject.computed({
            read: () => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this._labelData.paperKinds, item => item.id === this._selectedLabelDetails().paperKindId);
            },
            deferEvaluation: true
        });
        this._selectedLabelProduct = external_ko_namespaceObject.observable();
        this._selectedLabelDetails = external_ko_namespaceObject.observable();
        this._labelDetails = external_ko_namespaceObject.observable();
        this._width = external_ko_namespaceObject.pureComputed(() => getFormattedValueInUnits(this._selectedLabelDetails().width, this._selectedPaperSize().unit) + (this._selectedPaperSize().unit === GraphicsUnit.Inch ? ' in' : ' mm'));
        this._height = external_ko_namespaceObject.pureComputed(() => getFormattedValueInUnits(this._selectedLabelDetails().height, this._selectedPaperSize().unit) + (this._selectedPaperSize().unit === GraphicsUnit.Inch ? ' in' : ' mm'));
        this._paperType = external_ko_namespaceObject.pureComputed(() => this._selectedPaperSize().name);
        this._pageSizeText = external_ko_namespaceObject.pureComputed(() => getFormattedValueInUnits(this._selectedPaperSize().width, this._selectedPaperSize().unit) + ' x ' + getFormattedValueInUnits(this._selectedPaperSize().height, this._selectedPaperSize().unit) + (this._selectedPaperSize().unit === GraphicsUnit.Inch ? ' in' : ' mm'));
        this._disposables.push(this._selectedLabelProduct.subscribe(newProductsType => {
            const labelDetails = this._labelData.labelDetails.filter(item => item.productId === newProductsType.id);
            this._selectedLabelDetails(labelDetails[0]);
            this._labelDetails({
                store: labelDetails,
                paginate: labelDetails.length > 200,
                pageSize: 100
            });
        }));
        this._disposables.push(this._selectedLabelDetails.subscribe(() => this._onChange()));
        this._disposables.push(this._selectedPaperSize, this._width, this._height, this._paperType, this._pageSizeText);
    }
    initialize(state) {
        initializeLabelReportWizardPromise();
        return labelReportWizardPromise.done((labelData) => {
            this._labelData = labelData;
            if (state.labelDetails) {
                if (!this._selectedLabelProduct() || this._selectedLabelProduct().id !== state.labelDetails.productId) {
                    this._selectedLabelProduct((0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this._labelData.labelProducts, item => item.id === state.labelDetails.productId));
                }
                this._selectedLabelDetails((0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(this._labelData.labelDetails, item => item.id === state.labelDetails.id));
            }
            else {
                this._selectedLabelProduct(this._labelData.labelProducts[0]);
            }
        });
    }
    canNext() {
        return !!this._selectedLabelDetails();
    }
    canFinish() {
        return !!this._selectedLabelDetails();
    }
    commit() {
        const labelDetails = this._selectedLabelDetails() ? (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this._selectedLabelDetails()) : null;
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({ labelDetails: labelDetails }).promise();
    }
}
function _registerSelectLabelTypePage(factory) {
    factory.registerMetadata(ReportWizardPageId.SelectLabelTypePage, {
        setState: (data, state) => {
            if (data && (!state.labelDetails || data.labelDetails.id !== state.labelDetails.id))
                state.labelDetails = data.labelDetails;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.labelDetails = defaultState.labelDetails;
        },
        create: () => {
            return new SelectLabelTypePage();
        },
        template: 'dxrd-page-selectPredefinedLabels',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select the label type.', 'ASPxReportsStringId.ReportDesigner_Wizard_SelectLabelType')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/specifyLabelSettingsPage.js






class SpecifyLabelSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizardPage {
    constructor(_reportWizardOptions) {
        super();
        this._reportWizardOptions = _reportWizardOptions;
    }
    registerSections() {
        _registerSelectLabelTypePage(this._factory);
        _registerCustomizeLabelPage(this._factory);
        this._factory.getMetadata(FullscreenReportWizardSectionId.SelectLabelTypePage)['recreate'] = false;
        this._factory.getMetadata(FullscreenReportWizardSectionId.CustomizeLabelPage)['recreate'] = false;
        this._setSectionPosition(FullscreenReportWizardSectionId.SelectLabelTypePage, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Right : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Left);
        this._setSectionPosition(FullscreenReportWizardSectionId.CustomizeLabelPage, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Left : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Right);
    }
    canNext() {
        return false;
    }
    getNextSectionId(sectionId) {
        if (!sectionId) {
            return FullscreenReportWizardSectionId.SelectLabelTypePage;
        }
        else if (sectionId === FullscreenReportWizardSectionId.SelectLabelTypePage)
            return FullscreenReportWizardSectionId.CustomizeLabelPage;
    }
}
function _registerSpecifyLabelSettingsPage(factory, reportWizardOptions) {
    factory.registerMetadata(FullscreenReportWizardPageId.SpecifyLabelSettingsPage, {
        setState: (data, state) => {
            if (data && (!state.labelDetails || data.labelDetails.id !== state.labelDetails.id))
                state.labelDetails = data.labelDetails;
            state.labelDetails.width = data.labelDetails.width;
            state.labelDetails.height = data.labelDetails.height;
            state.labelDetails.hPitch = data.labelDetails.hPitch;
            state.labelDetails.vPitch = data.labelDetails.vPitch;
            state.labelDetails.topMargin = data.labelDetails.topMargin;
            state.labelDetails.leftMargin = data.labelDetails.leftMargin;
            state.labelDetails.rightMargin = data.labelDetails.rightMargin;
            state.labelDetails.bottomMargin = data.labelDetails.bottomMargin;
            state.labelDetails.unit = data.labelDetails.unit;
            state.labelDetails.paperKindId = data.labelDetails.paperKindId;
        },
        getState: (state) => state,
        resetState: (state, defaultState) => {
            state.labelDetails = defaultState.labelDetails;
        },
        create: () => {
            return new SpecifyLabelSettingsPage(reportWizardOptions);
        },
        navigationPanelText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Specify Page Settings', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettings'),
        template: 'dx-wizard-fullscreen-page',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)("Choose the page size and customize the label's parameters.", 'ASPxReportsStringId.ReportDesigner_Wizard_LabelPageSize')
    });
}

;// ./node_modules/devexpress-reporting/designer/actions/_objectDataSourceEditor.js






class ObjectDataSourceEditParametersIterator extends external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageIterator {
    getNextPageId(pageId) {
        if (!pageId)
            return external_DevExpress_Analytics_Wizard_namespaceObject.ObjectDataSourceWizardPageId.ConfigureParametersPage;
        return super.getNextPageId(pageId);
    }
}
class ObjectDataSourceEditor extends DataSourceEditorBase {
    constructor() {
        super(...arguments);
        this.editParametersAction = {
            clickAction: (item) => {
                this.editSchema(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(item.path).id);
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Edit Parameters...', 'AnalyticsCoreStringId.ObjectDSWizard_EditParameters')
        };
    }
    static createObjectDataSourceInfo(objectDataSourceWizard, objectDataSource, base64) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        (base64 ?
            ReportDataSourceService.editObjectDataSourceParameters(objectDataSourceWizard, base64) :
            ReportDataSourceService.getObjectDataSourceBase64(objectDataSourceWizard))
            .done((result) => {
            const ctors = objectDataSourceWizard.ctor;
            const name = objectDataSourceWizard.dataSourceName || 'objectDataSource';
            const dataMembers = objectDataSourceWizard.dataMember;
            const info = {
                base64: result.base64,
                data: {
                    '@ObjectType': 'DevExpress.DataAccess.ObjectBinding.ObjectDataSource',
                    '@Base64': result.base64
                },
                name: name,
                isSupportQueries: result.isSupportQueries,
                isListType: result.isListType,
                id: objectDataSource.id,
                isObjectDataSource: true
            };
            info['hasParams'] = ((ctors && ctors.parameters.length > 0) || (dataMembers && dataMembers.parameters.length > 0));
            deferred.resolve(info);
        }).fail((error) => {
            deferred.reject();
        });
        return deferred.promise();
    }
    applyDataSourceWizardChanges(dataSourceWizardModel) {
        const objectDataSource = (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreObjectDataSourceFromState)(dataSourceWizardModel.objectDataSourceWizard);
        const dataSourceInfo = objectDataSource && this._dsHelper().findDataSourceInfoByName(objectDataSource.name());
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        ObjectDataSourceEditor.createObjectDataSourceInfo(dataSourceWizardModel.objectDataSourceWizard, objectDataSource, dataSourceInfo && dataSourceInfo.data.base64())
            .done((info) => {
            if (dataSourceInfo) {
                dataSourceInfo.base64 = info.base64;
                dataSourceInfo.data.base64(info.base64);
                deferred.resolve(dataSourceInfo);
            }
            else {
                addDataSourceToReport(this._dsHelper(), this._reportViewModel(), this._undoEngine(), this._itemsProvider(), info);
                deferred.resolve(info);
            }
        })
            .fail((error) => {
            deferred.reject();
        });
        return deferred.promise();
    }
    getActions(context) {
        const result = [];
        if (context.data && context.data['isObjectDataSource'] === true && context.data['hasParams']) {
            result.push(this.editParametersAction);
        }
        return result;
    }
    editSchema(dataSourceID) {
        const dataSourceInfo = this._findDataSource(dataSourceID);
        ReportDataSourceService.objectDataSourceFromBase64(dataSourceInfo.data['base64']()).done(result => {
            const beforeInitEvent = (e) => {
                e.state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Object;
            };
            this._wizard.events.addHandler('beforeInitialize', beforeInitEvent);
            this._wizard.initialize((0,external_DevExpress_Analytics_Wizard_namespaceObject._createDefaultDataSourceWizardState)(undefined, undefined, {
                ctor: result.ctor,
                dataMember: result.dataMember,
                selectedType: result.selectedType,
                dataSourceName: dataSourceInfo.name
            }), (factory, stateManager) => new ObjectDataSourceEditParametersIterator(factory, stateManager, this._wizard['_wizardOptions']));
            this._wizard.events.removeHandler('beforeInitialize', beforeInitEvent);
            this._wizard.start();
            this._wizard.isVisible(true);
        }).fail((result) => {
            if ((0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(result))
                (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Internal_namespaceObject.getErrorMessage)(result));
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/specifyObjectDataSourceSettingsPage.js






class SpecifyObjectDataSourceSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.SpecifyObjectDataSourceSettingsPage {
    canNext() {
        return super.canFinish();
    }
    initialize(state) {
        this._dataSourceId = state.dataSourceId;
        return super.initialize(state);
    }
    commit() {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        super.commit().done((state) => {
            const infoPromise = ObjectDataSourceEditor.createObjectDataSourceInfo(state, (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreObjectDataSourceFromState)(state, undefined, this._dataSourceId));
            infoPromise.done((result) => {
                result.data = createNewObjectItem(result.data);
                deferred.resolve({
                    objectDataSourceWizard: state,
                    newDataSource: _convertToStateDataSource(result)
                });
            });
        });
        return deferred.promise();
    }
}
function _registerSpecifyObjectDataSourceSettingsPage(factory, wizardOptions) {
    (0,external_DevExpress_Analytics_Wizard_namespaceObject._registerSpecifyObjectDataSourceSettingsPage)(factory, wizardOptions);
    overrideFullscreenDataSourceWizardPageMetadata(factory, external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyObjectDataSourceSettingsPage, () => new SpecifyObjectDataSourceSettingsPage(wizardOptions));
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/colorSchemaPageUtils.js



class ColorScheme {
    constructor(name, localizationId, baseColor) {
        this._isCustom = false;
        this.name = name;
        this.localizationId = localizationId;
        this.baseColor = baseColor;
        this.color = external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap((0,external_DevExpress_Analytics_Utils_namespaceObject.colorFromString)(baseColor));
        this.displayName = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(this.name, this.localizationId);
        this.selected = external_ko_namespaceObject.observable(false);
    }
}
class CustomColorScheme extends ColorScheme {
    applyColor() {
        this.color(this.editorColor());
        this.baseColor = (0,external_DevExpress_Analytics_Utils_namespaceObject.colorToString)(this.editorColor());
        this.popoverVisible(false);
    }
    resetColor() {
        this.editorColor(this.color());
        this.popoverVisible(false);
    }
    constructor(name, localizationId, baseColor) {
        super(name, localizationId, baseColor);
        this.color = (0,external_DevExpress_Analytics_Utils_namespaceObject.colorFromString)(baseColor);
        this.editorColor = external_ko_namespaceObject.observable(this.color());
        this.popoverVisible = external_ko_namespaceObject.observable(false);
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/colorSchemePage.js







class ChooseReportColorSchemePage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super();
        this._scheme = external_ko_namespaceObject.observable(null);
        this._customColorScheme = new CustomColorScheme('Custom', 'ReportStringId.Wizard_ReportColorScheme_Custom', '255, 183, 227, 228');
        this._lookupData = {
            scheme: [
                new ColorScheme('Grey', 'ReportStringId.Wizard_ReportColorScheme_Grey', '255, 75,75,75'),
                new ColorScheme('ColdGrey', 'ReportStringId.Wizard_ReportColorScheme_ColdGrey', '255, 93,98,110'),
                new ColorScheme('Cream', 'ReportStringId.Wizard_ReportColorScheme_Cream', '255, 227,202,166'),
                new ColorScheme('JeansBlue', 'ReportStringId.Wizard_ReportColorScheme_JeansBlue', '255, 69,94,178'),
                new ColorScheme('Blue', 'ReportStringId.Wizard_ReportColorScheme_Blue', '255, 23,104,196'),
                new ColorScheme('Yellow', 'ReportStringId.Wizard_ReportColorScheme_Yellow', '255, 255,209,107'),
                new ColorScheme('LightGreen', 'ReportStringId.Wizard_ReportColorScheme_LightGreen', '255, 181,211,142'),
                new ColorScheme('Mint', 'ReportStringId.Wizard_ReportColorScheme_Mint', '255, 46,148,130'),
                new ColorScheme('LightBlue', 'ReportStringId.Wizard_ReportColorScheme_LightBlue', '255, 153,212,246'),
                new ColorScheme('Azure', 'ReportStringId.Wizard_ReportColorScheme_Azure', '255, 57,159,228'),
                new ColorScheme('Coral', 'ReportStringId.Wizard_ReportColorScheme_Coral', '255, 250,128,114'),
                new ColorScheme('Red', 'ReportStringId.Wizard_ReportColorScheme_Red', '255, 196,66,79'),
                new ColorScheme('Raspberry', 'ReportStringId.Wizard_ReportColorScheme_Raspberry', '255, 152,51,91'),
                new ColorScheme('Violet', 'ReportStringId.Wizard_ReportColorScheme_Violet', '255, 113,69,168'),
                this._customColorScheme
            ]
        };
        let customSubscription = null;
        this._scheme(this._lookupData.scheme[0]);
        this._disposables.push(this._scheme.subscribe((newVal) => {
            if (newVal === this._customColorScheme) {
                this._disposables.push(customSubscription = this._customColorScheme.color.subscribe(() => {
                    this._onChange();
                }));
            }
            else {
                customSubscription && customSubscription.dispose();
            }
            this._onChange();
        }));
    }
    addColorScheme(name, color, position = this._lookupData.scheme.length) {
        const scheme = new ColorScheme(name, undefined, color);
        scheme._isCustom = true;
        this._lookupData.scheme.splice(position, 0, scheme);
    }
    removeColorScheme(...names) {
        names.forEach(name => {
            const scheme = this._lookupData.scheme.filter(x => x.name == name || x.displayName == name)[0];
            if (scheme) {
                this._lookupData.scheme.splice(this._lookupData.scheme.indexOf(scheme), 1);
            }
        });
    }
    removeAllColorSchemes() {
        this._lookupData.scheme = [];
    }
    setCustomColor(color) {
        this._customColorScheme.editorColor(color.indexOf('rgb') === 0 ?
            color :
            external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap((0,external_DevExpress_Analytics_Utils_namespaceObject.colorFromString)(color)));
        this._customColorScheme.applyColor();
    }
    _applyScheme(data) {
        this._scheme() && this._scheme().selected(false);
        data.selected(true);
        this._scheme(data);
    }
    canFinish() {
        return true;
    }
    initialize(state) {
        if (state.name === 'Custom') {
            this._customColorScheme.editorColor(state.baseColor);
            this._customColorScheme.applyColor();
        }
        let currentScheme = this._lookupData.scheme.filter(x => x.name === state.name)[0];
        if (!currentScheme) {
            currentScheme = this._lookupData.scheme[0];
        }
        this._scheme(currentScheme);
        if (currentScheme)
            currentScheme.selected(true);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        const scheme = this._scheme();
        const result = scheme ? {
            name: scheme._isCustom ? 'Custom' : scheme.name,
            baseColor: scheme.baseColor,
            _color: external_ko_namespaceObject.unwrap(scheme.color)
        } : {};
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve(result).promise();
    }
}
function _applyColorSchemeState(data, state) {
    state.baseColor = data.baseColor;
    state.name = data.name;
    state['_color'] = data['_color'];
}
function _registerChooseReportColorSchemePage(factory) {
    factory.registerMetadata(ReportWizardPageId.ChooseReportColorSchemePage, {
        create: () => new ChooseReportColorSchemePage(),
        getState: (state) => state.colorScheme,
        setState: (data, state) => {
            _applyColorSchemeState(data, state);
        },
        resetState: (state, defaultState) => {
            _applyColorSchemeState(defaultState, state);
        },
        template: 'dxrd-page-colorScheme',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Choose a report color scheme.', 'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme_Description')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_pageSetupUtils.js



class PageSetupHelper {
    static mm2px(val) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(10 * val, 'TenthsOfAMillimeter'); }
    static in2px(val) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(100 * val, 'HundredthsOfAnInch'); }
    static px2mm(val) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(val, 'TenthsOfAMillimeter', 1) / 10; }
    static px2in(val) { return (0,external_DevExpress_Analytics_Internal_namespaceObject.pixelToUnits)(val, 'HundredthsOfAnInch', 1) / 100; }
    static mm2in(val) { return val * CONVERSION_COEEFICIENT; }
    static in2mm(val) { return val / CONVERSION_COEEFICIENT; }
    static getConverter(from, to) {
        if (from === to)
            return x => x;
        const unitCode = (unit) => {
            switch (unit) {
                case GraphicsUnit.Inch:
                    return 'in';
                case GraphicsUnit.Millimeter:
                    return 'mm';
                case GraphicsUnit.Pixel:
                    return 'px';
            }
        };
        const fnName = unitCode(from) + '2' + unitCode(to);
        return PageSetupHelper[fnName];
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/configureReportPageSettingsPage.js










class PreviewPageHelper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    cachePagePreviewElement($element) {
        setTimeout(() => {
            this.pagePreviewElement($element);
        }, 100);
    }
    constructor(settings) {
        super();
        this.width = external_ko_namespaceObject.observable(0);
        this.height = external_ko_namespaceObject.observable(0);
        this.marginLeft = external_ko_namespaceObject.observable(0);
        this.marginRight = external_ko_namespaceObject.observable(0);
        this.marginTop = external_ko_namespaceObject.observable(0);
        this.marginBottom = external_ko_namespaceObject.observable(0);
        this.pagePreviewElement = external_ko_namespaceObject.observable(null);
        if (settings) {
            this.width = settings.width;
            this.height = settings.height;
            this.marginLeft = settings.marginLeft;
            this.marginRight = settings.marginRight;
            this.marginTop = settings.marginTop;
            this.marginBottom = settings.marginBottom;
        }
        const elementWidth = external_ko_namespaceObject.computed(() => this.pagePreviewElement() && this.pagePreviewElement().width() || 200).extend({ throttle: 100 });
        const elementHeight = external_ko_namespaceObject.computed(() => this.pagePreviewElement() && this.pagePreviewElement().height() || 292).extend({ throttle: 100 });
        const previewRatio = external_ko_namespaceObject.computed(() => Math.min(elementWidth() / this.width(), elementHeight() / this.height()));
        const resizeHandler = () => {
            this.pagePreviewElement.valueHasMutated();
        };
        window.addEventListener('resize', resizeHandler);
        this._disposables.push({
            dispose: () => {
                this.pagePreviewElement(null);
                window.removeEventListener('resize', resizeHandler);
            }
        }, elementWidth, elementHeight, previewRatio, this.previewPageHeight = external_ko_namespaceObject.pureComputed(() => this.height() * previewRatio()), this.previewPageWidth = external_ko_namespaceObject.pureComputed(() => Math.round(this.width() * previewRatio())), this.previewTopMargin = external_ko_namespaceObject.pureComputed(() => Math.round(this.marginTop() * previewRatio())), this.previewRightMargin = external_ko_namespaceObject.pureComputed(() => Math.round(this.marginRight() * previewRatio())), this.previewBottomMargin = external_ko_namespaceObject.pureComputed(() => Math.round(this.marginBottom() * previewRatio())), this.previewLeftMargin = external_ko_namespaceObject.pureComputed(() => Math.round(this.marginLeft() * previewRatio())));
    }
    updatePageSettings(pageSetup) {
        this.width(pageSetup.width);
        this.height(pageSetup.height);
        this.marginTop(pageSetup.marginTop);
        this.marginRight(pageSetup.marginRight);
        this.marginBottom(pageSetup.marginBottom);
        this.marginLeft(pageSetup.marginLeft);
    }
}
class ConfigureReportPageSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    canFinish() {
        return true;
    }
    constructor() {
        super();
        this.lookupData = {
            paperKind: paperKind.valuesArray
                .map(x => { return { value: x.value, displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(x.displayValue, x.localizationId) }; })
                .sort((a, b) => a.value === 'Custom' ? 1 : b.value === 'Custom' ? -1 : a.displayName.localeCompare(b.displayName)),
            unit: [
                { value: GraphicsUnit.Inch, displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Inch', 'AnalyticsCoreStringId.Wizard_Inch') },
                { value: GraphicsUnit.Millimeter, displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Millimeter', 'AnalyticsCoreStringId.Wizard_Millimeter') },
                { value: GraphicsUnit.Pixel, displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Pixel', 'ASPxReportsStringId.ReportDesigner_Wizard_Pixel') }
            ]
        };
        this.paperKind = external_ko_namespaceObject.observable(defaultPageSetupState.paperKind);
        this.landscape = external_ko_namespaceObject.observable(defaultPageSetupState.landscape);
        this.width = external_ko_namespaceObject.observable(defaultPageSetupState.width);
        this.height = external_ko_namespaceObject.observable(defaultPageSetupState.height);
        this._disposables.push(this.fixedSize = external_ko_namespaceObject.computed(() => this.paperKind() !== 'Custom'));
        this.marginTop = external_ko_namespaceObject.observable(defaultPageSetupState.marginTop);
        this.marginRight = external_ko_namespaceObject.observable(defaultPageSetupState.marginRight);
        this.marginBottom = external_ko_namespaceObject.observable(defaultPageSetupState.marginBottom);
        this.marginLeft = external_ko_namespaceObject.observable(defaultPageSetupState.marginLeft);
        this._disposables.push(this.previewPageHelper = new PreviewPageHelper({
            height: this.height,
            width: this.width,
            marginTop: this.marginTop,
            marginRight: this.marginRight,
            marginBottom: this.marginBottom,
            marginLeft: this.marginLeft
        }));
        this._unit = external_ko_namespaceObject.observable(defaultPageSetupState.unit);
        this._disposables.push(this.unit = external_ko_namespaceObject.computed({
            read: () => this._unit(),
            write: (newVal) => {
                const converter = PageSetupHelper.getConverter(this._unit(), newVal);
                [this.width, this.height, this.marginTop, this.marginRight, this.marginBottom, this.marginLeft].forEach(x => { x(converter(x())); });
                this._unit(newVal);
            }
        }));
        this._disposables.push(this.paperKind.subscribe(newVal => {
            if (newVal !== 'Custom') {
                const convert = PageSetupHelper.getConverter(GraphicsUnit.Inch, this._unit());
                const size = (0,external_DevExpress_Analytics_Internal_namespaceObject.getPaperSize)(newVal, 0);
                let width = convert(size.width / 100);
                let height = convert(size.height / 100);
                if (this.landscape())
                    [width, height] = [height, width];
                this.width(width);
                this.height(height);
            }
        }));
        this._disposables.push(this.landscape.subscribe((newVal) => {
            const width = this.height();
            const height = this.width();
            this.width(width);
            this.height(height);
            let t = this.marginTop(), r = this.marginRight(), b = this.marginBottom(), l = this.marginLeft();
            [t, r, b, l] = newVal
                ? [l, t, r, b]
                : [r, b, l, t];
            this.marginTop(t);
            this.marginRight(r);
            this.marginBottom(b);
            this.marginLeft(l);
        }));
        this._disposables.push(this.valueFormat = external_ko_namespaceObject.pureComputed(() => {
            switch (this._unit()) {
                case GraphicsUnit.Inch:
                    return '#0.00 "';
                case GraphicsUnit.Millimeter:
                    return '#0.0 mm';
                case GraphicsUnit.Pixel:
                    return '#0 px';
            }
        }));
        this._disposables.push(...(0,external_DevExpress_Analytics_Wizard_Internal_namespaceObject.subscribeProperties)([
            this.paperKind,
            this.landscape,
            this.width,
            this.height,
            this.marginTop,
            this.marginLeft,
            this.marginRight,
            this.marginBottom,
            this.unit
        ], () => this._onChange()));
    }
    initialize(state) {
        this.paperKind(state.paperKind);
        this.landscape(state.landscape);
        this.unit(state.unit);
        if (state.paperKind === 'Custom') {
            this.width(state.width);
            this.height(state.height);
        }
        this.marginLeft(state.marginLeft);
        this.marginRight(state.marginRight);
        this.marginTop(state.marginTop);
        this.marginBottom(state.marginBottom);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            paperKind: this.paperKind(),
            unit: this.unit(),
            width: this.width(),
            height: this.height(),
            marginLeft: this.marginLeft(),
            marginRight: this.marginRight(),
            marginTop: this.marginTop(),
            marginBottom: this.marginBottom(),
            landscape: this.landscape()
        }).promise();
    }
}
function _applyPageSetting(data, state) {
    state.height = data.height;
    state.landscape = data.landscape;
    state.marginBottom = data.marginBottom;
    state.marginLeft = data.marginLeft;
    state.marginRight = data.marginRight;
    state.marginTop = data.marginTop;
    state.paperKind = data.paperKind;
    state.unit = data.unit;
    state.width = data.width;
}
function _registerConfigureReportPageSettingsPage(factory) {
    factory.registerMetadata(ReportWizardPageId.ConfigureReportPageSettingsPage, {
        create: () => new ConfigureReportPageSettingsPage(),
        getState: (state) => state.pageSetup,
        setState: (data, state) => {
            _applyPageSetting(data, state);
        },
        resetState: (state, defaultState) => {
            _applyPageSetting(defaultState, state);
        },
        template: 'dxrd-page-pageSetup',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Specify report page settings.', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Description')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/configureReportPageSettingsAndColorSchemeSection.js






class ConfigurePageSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this._configureReportPageSettingsPage = new ConfigureReportPageSettingsPage();
        this._colorSchemePage = new ChooseReportColorSchemePage();
        this._colorSchemePageVisible = true;
    }
    dispose() {
        this._configureReportPageSettingsPage.dispose();
        this._colorSchemePage.dispose();
    }
    addColorScheme(name, color, position) {
        this._colorSchemePage.addColorScheme(name, color, position);
    }
    removeColorScheme(...names) {
        this._colorSchemePage.removeColorScheme(...names);
    }
    removeAllColorSchemes() {
        this._colorSchemePage.removeAllColorSchemes();
    }
    setCustomColor(color) {
        this._colorSchemePage.setCustomColor(color);
    }
    onChange(callback) {
        this._colorSchemePage.onChange(callback);
        this._configureReportPageSettingsPage.onChange(callback);
    }
    canNext() {
        return this._colorSchemePage.canNext() && this._configureReportPageSettingsPage.canNext();
    }
    canFinish() {
        return this._colorSchemePage.canFinish() && this._configureReportPageSettingsPage.canFinish();
    }
    initialize(state) {
        this._colorSchemePageVisible = this._colorSchemePage._lookupData.scheme.length > 0 && !!(state.dataSource || state.newDataSource);
        return external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred.when([
            this._configureReportPageSettingsPage.initialize(state.pageSetup),
            this._colorSchemePage.initialize(state.colorScheme)
        ]).promise();
    }
    commit() {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        this._colorSchemePage.commit().done((colorResult) => {
            this._configureReportPageSettingsPage.commit().done((configureReportPageSettingsPageResult) => {
                deferred.resolve({
                    pageSetup: configureReportPageSettingsPageResult,
                    colorScheme: colorResult
                });
            });
        });
        return deferred.promise();
    }
}
function _registerConfigureReportPageSettingsSection(factory) {
    factory.registerMetadata(ReportWizardPageId.ConfigureReportPageSettingsPage, {
        create: () => new ConfigurePageSettingsPage(),
        getState: (state) => state,
        setState: (data, state) => {
            _applyPageSetting(data.pageSetup, state.pageSetup);
            _applyColorSchemeState(data.colorScheme, state.colorScheme);
        },
        resetState: (state, defaultState) => {
            _applyPageSetting(defaultState.pageSetup, state.pageSetup);
            _applyColorSchemeState(defaultState.colorScheme, state.colorScheme);
        },
        template: 'dxrd-page-pageSetupAndColorScheme',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Specify page settings and a report color scheme.', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettingsColorScheme')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/specifyPageSettingsPage.js









class SpecifyPageSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizardPage {
    constructor(_reportWizardOptions) {
        super();
        this._reportWizardOptions = _reportWizardOptions;
    }
    canNext() {
        return false;
    }
    canFinish() {
        return true;
    }
    registerSections() {
        _registerConfigureReportPageSettingsSection(this._factory);
        _registerSpecifyReportTitlePage(this._factory);
        let meta = this._factory.getMetadata(FullscreenReportWizardSectionId.ConfigurePageSettingsPage);
        meta['recreate'] = false;
        meta.description = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Specify page settings and a report color scheme.', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettingsColorScheme');
        meta = this._factory.getMetadata(FullscreenReportWizardSectionId.SpecifyReportTitlePage);
        meta['recreate'] = false;
        meta.description = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Specify the report title.', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle');
        this._setSectionPosition(FullscreenReportWizardSectionId.ConfigurePageSettingsPage, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Right : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Left);
        this._setSectionPosition(FullscreenReportWizardSectionId.SpecifyReportTitlePage, this._reportWizardOptions.rtl ? external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Left : external_DevExpress_Analytics_Wizard_Internal_namespaceObject.WizardSectionPosition.Right);
    }
    getNextSectionId(sectionId) {
        if (!sectionId)
            return FullscreenReportWizardSectionId.ConfigurePageSettingsPage;
        else if (sectionId === FullscreenReportWizardSectionId.ConfigurePageSettingsPage)
            return FullscreenReportWizardSectionId.SpecifyReportTitlePage;
    }
}
function _registerSpecifyPageSettingsPage(factory, reportWizardOptions) {
    factory.registerMetadata(FullscreenReportWizardPageId.SpecifyPageSettingsPage, {
        getState: (state) => {
            return state;
        },
        setState: (data, state) => {
            state.colorScheme.baseColor = data.colorScheme.baseColor;
            state.colorScheme.name = data.colorScheme.name;
            state.reportTitle = data.reportTitle;
            _applyPageSetting(data.pageSetup, state.pageSetup);
        },
        resetState: (state, defaultState) => {
            state.colorScheme.baseColor = defaultState.colorScheme.baseColor;
            state.colorScheme.name = defaultState.colorScheme.name;
            state.reportTitle = defaultState.reportTitle;
            _applyPageSetting(defaultState.pageSetup, state.pageSetup);
        },
        create: () => {
            return new SpecifyPageSettingsPage(reportWizardOptions);
        },
        template: 'dx-wizard-fullscreen-page',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Manage page and color settings.', 'TODO'),
        navigationPanelText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Specify Page Settings', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyPageSettings')
    });
}
class SpecifyReportTitlePage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super();
        this._foreColor = external_ko_namespaceObject.observable('white');
        this._masterDetailInfo = external_ko_namespaceObject.observableArray();
        this.reportTitle = external_ko_namespaceObject.observable('');
        this._color = external_ko_namespaceObject.observable('rgba( 75, 75, 75, 1)');
        this._disposables.push(this.reportTitle.subscribe(() => this._onChange()));
        this._disposables.push(this._previewPageHelper = new PreviewPageHelper());
        this._previewPageHelper.updatePageSettings(defaultPageSetupState);
    }
    _getBrightness(r, g, b) {
        r = r / 255.0;
        g = g / 255.0;
        b = b / 255.0;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        return (max + min) / 2;
    }
    _fillTables(info) {
        info.forEach((item) => {
            const fields = item.fields.filter(x => x.checked);
            if (fields.length > 0) {
                this._masterDetailInfo.push({
                    fields: fields.slice(0, 4)
                });
            }
            if (item.relations.length > 0) {
                this._fillTables(item.relations);
            }
        });
    }
    initialize(state) {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        this._masterDetailInfo([]);
        if (state.colorScheme['baseColor']) {
            this._color(state.colorScheme['_color']);
            const color = state.colorScheme['baseColor'].split(',').map(x => parseInt(x));
            this._foreColor(this._getBrightness(color[1], color[2], color[3]) > 0.6 ? 'black' : 'white');
        }
        this.reportTitle(state.reportTitle ? state.reportTitle : '');
        this._fillTables(state.masterDetailInfoCollection);
        this._reportTitleVisible = !!(state.dataSource || state.newDataSource);
        this._previewPageHelper.updatePageSettings(state.pageSetup);
        super.initialize(state.pageSetup).done(() => {
            deferred.resolve();
        });
        return deferred.promise();
    }
    commit() {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        deferred.resolve({
            reportTitle: this.reportTitle()
        });
        return deferred.promise();
    }
    _reportTitlePlaceholder() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Type title here...', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportTitle_Placeholder');
    }
}
function _registerSpecifyReportTitlePage(factory) {
    factory.registerMetadata(ReportWizardPageId.SetReportTitlePage, {
        create: () => new SpecifyReportTitlePage(),
        getState: (state) => state,
        setState: (data, state) => {
            state.reportTitle = data.reportTitle;
        },
        resetState: (state, defaultState) => {
            state.reportTitle = defaultState.reportTitle;
        },
        template: 'dxrd-page-pageSetup-preview',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Manage page and color settings.', 'TODO')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/fullscreen/specifySqlDataSourceSettingsPage.js






class SpecifySqlDataSourceSettingsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.SpecifySqlDataSourceSettingsPage {
    registerSections() {
        super.registerSections();
        [
            this._factory.getMetadata(FullscreenReportWizardSectionId.ConfigureMasterDetailRelationshipsPage),
            this._factory.getMetadata(FullscreenReportWizardSectionId.ConfigureQueryParametersPage)
        ].forEach(meta => {
            meta.canFinish = () => false;
            meta.canNext = (page) => page.canNext() || page.canFinish();
        });
    }
    commit() {
        const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
        super.commit().done((commitResult) => {
            const dataSourcePromise = this['_dataSourceWizardOptions'].callbacks.createSqlDataSourceInfo((0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreSqlDataSourceFromState)(commitResult.sqlDataSourceWizard, undefined, commitResult.dataSourceId).sqlDataSource);
            dataSourcePromise.done((result) => {
                result.data = createNewObjectItem(result.data);
                deferred.resolve({
                    sqlDataSourceWizard: commitResult,
                    newDataSource: _convertToStateDataSource(result)
                });
            }).fail(deferred.reject);
        });
        return deferred.promise();
    }
}
function _registerSpecifySqlDataSourceSettingsPage(factory, wizardOptions) {
    (0,external_DevExpress_Analytics_Wizard_namespaceObject._registerSpecifySqlDataSourceSettingsPage)(factory, wizardOptions);
    overrideFullscreenDataSourceWizardPageMetadata(factory, external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage, () => new SpecifySqlDataSourceSettingsPage(wizardOptions));
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_reportWizardStateHelper.js


class ReportWizardStateHelper {
    static applyDataBindings(state, model) {
        const modelDS = model.dataSource();
        const dataSourceInfo = modelDS && modelDS['dataSourceInfo'];
        state.dataSource = dataSourceInfo && _convertToStateDataSource(dataSourceInfo);
        state.dataMember = model.dataMember() || '';
        if (state.dataMember) {
            state.dataMemberInfo = {
                name: model.dataMember(),
                displayName: undefined
            };
            state.dataMemberPath = model.dataMember();
        }
    }
    static applyPageSetup(state, model) {
        let unit;
        let _pageSetupProps = [
            model.pageWidth(),
            model.pageHeight(),
            model.margins.left(),
            model.margins.right(),
            model.margins.top(),
            model.margins.bottom()
        ];
        switch (model.measureUnit()) {
            case 'HundredthsOfAnInch':
                _pageSetupProps = _pageSetupProps.map(x => x / 100);
                unit = GraphicsUnit.Inch;
                break;
            case 'TenthsOfAMillimeter':
                _pageSetupProps = _pageSetupProps.map(x => x / 10);
                unit = GraphicsUnit.Millimeter;
                break;
            case 'Pixels':
                unit = GraphicsUnit.Pixel;
                break;
        }
        state.pageSetup = {
            paperKind: model.paperKind(),
            unit: unit,
            width: _pageSetupProps[0],
            height: _pageSetupProps[1],
            marginLeft: _pageSetupProps[2],
            marginRight: _pageSetupProps[3],
            marginTop: _pageSetupProps[4],
            marginBottom: _pageSetupProps[5],
            landscape: model.landscape()
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/reportWizardStateCreating.js




function createReportWizardState(reportViewModel) {
    const state = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, defaultReportWizardState, (0,external_DevExpress_Analytics_Wizard_namespaceObject._createDefaultDataSourceWizardState)());
    if (reportViewModel) {
        ReportWizardStateHelper.applyDataBindings(state, reportViewModel);
        ReportWizardStateHelper.applyPageSetup(state, reportViewModel);
    }
    return state;
}

;// ./node_modules/devexpress-reporting/designer/wizard/fullscreenReportWizard.js



















class FullscreenReportWizard extends external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizard {
    _callBeforeFinishHandler(state, wizardModel) { }
    _callAfterFinishHandler(state, result) {
        this.events.call('afterFinish', { state: state, wizardResult: result });
    }
    constructor(pageFactory, _reportWizardOptions) {
        super(pageFactory, _reportWizardOptions.callbacks.finishCallback);
        this._reportWizardOptions = _reportWizardOptions;
        this._requestModelType = MasterDetailRequestModel;
        this._availableDataSources = external_ko_namespaceObject.observable([]);
        this._extendCssClass = 'dxrd-master-detail-report-wizard ' + this._extendCssClass;
    }
    _description() {
        return (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Wizard', 'ASPxReportsStringId.ReportDesigner_Wizard_Header');
    }
    initialize(state = createReportWizardState()) {
        if (this._reportWizardOptions.dataSources().length === 1 && !this._reportWizardOptions.canCreateDataSource) {
            state.dataSource = _convertToStateDataSource(this._reportWizardOptions.dataSources()[0]);
        }
        if (this._reportWizardOptions.sqlDataSourceAvailable || !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(state.sqlDataSourceWizard)) {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Sql;
        }
        else if (this._reportWizardOptions.jsonDataSourceAvailable || state.jsonDataSourceWizard.jsonSource) {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Json;
        }
        else if (this._reportWizardOptions.objectDataSourceAvailable || !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(state.objectDataSourceWizard)) {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Object;
        }
        else {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.NoData;
        }
        super.initialize(state, (factory, stateManager) => new FullscreenReportWizardPageIterator(factory, stateManager, (page) => this._onResetPage(page), this._reportWizardOptions));
    }
}
class FullscreenReportWizardPageIterator extends external_DevExpress_Analytics_Wizard_namespaceObject.PageIterator {
    constructor(pagesFactory, stateManager, _onResetPage, _reportWizardOptions) {
        super(pagesFactory, stateManager, _onResetPage);
        this._reportWizardOptions = _reportWizardOptions;
    }
    getNextPageId(pageId) {
        const getDefineLayoutPage = () => {
            return this._getCurrentState().reportType === ReportType.CrossTab ? FullscreenReportWizardPageId.DefineCrossTabPage : FullscreenReportWizardPageId.DefineReportLayoutPage;
        };
        if (!pageId)
            return FullscreenReportWizardPageId.SelectReportTypePage;
        if (pageId === FullscreenReportWizardPageId.SelectReportTypePage && this._getCurrentState().reportType === ReportType.Label) {
            return FullscreenReportWizardPageId.SpecifyLabelSettingsPage;
        }
        else if (pageId === FullscreenReportWizardPageId.SelectReportTypePage && this._getCurrentState().dataSource && !this._reportWizardOptions.canCreateDataSource) {
            return getDefineLayoutPage();
        }
        else if (pageId === FullscreenReportWizardPageId.SelectReportTypePage) {
            return FullscreenReportWizardPageId.SelectDataSourcePage;
        }
        else if (pageId === FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSource) {
            return getDefineLayoutPage();
        }
        else if (pageId === FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Json) {
            return external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyJsonDataSourceSettingsPage;
        }
        else if (pageId === FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Sql) {
            return external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage;
        }
        else if (pageId === FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Object) {
            return external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyObjectDataSourceSettingsPage;
        }
        else if (pageId === FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Federation) {
            return external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyFederationDataSourceSettingsPage;
        }
        else if (pageId === FullscreenReportWizardPageId.SelectDataSourcePage && this._getCurrentState().dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.NoData) {
            return FullscreenReportWizardPageId.SpecifyPageSettingsPage;
        }
        else if (pageId === external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifySqlDataSourceSettingsPage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyJsonDataSourceSettingsPage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyObjectDataSourceSettingsPage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizardPageId.SpecifyFederationDataSourceSettingsPage) {
            return getDefineLayoutPage();
        }
        else if (pageId === FullscreenReportWizardPageId.DefineReportLayoutPage || pageId === FullscreenReportWizardPageId.DefineCrossTabPage) {
            return FullscreenReportWizardPageId.SpecifyPageSettingsPage;
        }
    }
}
function _registerFullscreenReportWizardPages(factory, reportWizardOptions) {
    _registerSelectReportTypePage(factory, {
        canCreateDatabound: () => reportWizardOptions.dataSources().length > 0 ||
            reportWizardOptions.connectionStrings.sql().length > 0 ||
            reportWizardOptions.connectionStrings.json().length > 0 ||
            reportWizardOptions.wizardSettings.enableObjectDataSource ||
            (reportWizardOptions.allowCreateNewJsonConnection && reportWizardOptions.wizardSettings.enableJsonDataSource),
        showVertical: true,
        reportTemplates: reportWizardOptions.reportTemplates,
        searchBoxVisibilityMode: reportWizardOptions.searchBoxVisibilityMode
    });
    _registerSelectDataSourcePage(factory, reportWizardOptions);
    _registerSpecifySqlDataSourceSettingsPage(factory, reportWizardOptions);
    _registerSpecifyJsonDataSourceSettingsPage(factory, reportWizardOptions);
    _registerSpecifyObjectDataSourceSettingsPage(factory, reportWizardOptions);
    _registerSpecifyFederationDataSourceSettingsPage(factory, reportWizardOptions);
    _registerDefineReportLayoutPage(factory, reportWizardOptions);
    _registerDefineCrossTabPage(factory, reportWizardOptions);
    _registerSpecifyLabelSettingsPage(factory, reportWizardOptions);
    _registerSpecifyPageSettingsPage(factory, reportWizardOptions);
}
function _createFullscreenReportWizard(reportWizardOptions) {
    const factory = new external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizardPageFactory();
    _registerFullscreenReportWizardPages(factory, reportWizardOptions);
    return new FullscreenReportWizard(factory, reportWizardOptions);
}

;// ./node_modules/devexpress-reporting/designer/controls/utils/_chartFieldListExtender.js

class ChartFieldListExtender {
    beforeItemsFilled(request, items) {
        if (request.ref !== 'PivotGrid' && request.id !== 'PivotGrid')
            return false;
        switch (request.path) {
            case 'dataMember': return true;
            case 'seriesDataMember': {
                items.push({ name: 'Arguments', displayName: 'Arguments', specifics: 'String' }, { name: 'Series', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Series', 'DevExpress.XtraReports.UI.XRChart.Series'), specifics: 'String' }, { name: 'Values', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Values', 'DevExpress.XtraCharts.SeriesPoint.Values'), specifics: 'Integer' });
                return true;
            }
            case 'valueDataMembers': {
                items.push({ name: 'Values', displayName: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Values', 'DevExpress.XtraCharts.SeriesPoint.Values'), specifics: 'Integer' });
                return true;
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/helpers/_designControlsHelper.js





class DesignControlsHelper extends external_DevExpress_Analytics_Internal_namespaceObject.DesignControlsHelper {
    dispose() {
        this._xrPdfSignatureCollection = [];
        super.dispose();
    }
    getNameProperty(model) {
        if (model instanceof Parameter)
            return model.parameterName;
        if (model instanceof CalculatedField)
            return model.calculatedFieldName;
        if (model instanceof WatermarkModel)
            return model.watermarkId;
        return super.getNameProperty(model);
    }
    _setName(value) {
        if (value !== this.target) {
            super._setName(value);
        }
    }
    _setDefaultText(value) {
        const controlType = value.controlType || 'Unknown';
        controlType !== 'XRCrossTabCell' && super._setDefaultText(value);
    }
    _getNamePrefix(value) {
        const controlType = value.controlType || 'Unknown';
        if (controlType === 'XRCrossTabCell') {
            return value.namePrefix;
        }
        return super._getNamePrefix(value);
    }
    processCollection(collection) {
        const pdfSignatures = collection.filter(x => x instanceof XRPdfSignatureModel);
        pdfSignatures.forEach(x => x.subscribeSignature(() => this._xrPdfSignatureCollection));
        if (!this._xrPdfSignatureCollection)
            this._xrPdfSignatureCollection = [];
        this._xrPdfSignatureCollection = [].concat(this._xrPdfSignatureCollection, pdfSignatures);
    }
    constructor(target, selection) {
        super(target, [{
                added: (control) => {
                    if (control instanceof XRPdfSignatureModel) {
                        control.signatureOptions.displayDocumentSignature(!this._xrPdfSignatureCollection.some(x => x.signatureOptions.displayDocumentSignature()));
                        this._xrPdfSignatureCollection.push(control);
                        control.subscribeSignature(() => this._xrPdfSignatureCollection);
                    }
                },
                deleted: (control) => {
                    if (control instanceof XRPdfSignatureModel) {
                        const position = this._xrPdfSignatureCollection.indexOf(control);
                        if (position !== -1)
                            this._xrPdfSignatureCollection.splice(position, 1);
                    }
                    control.surface === selection.focused() && selection.focused(control.surface.findNextSelection());
                }
            }], ['controls', 'bands', 'crossBandControls', 'rows', 'cells', 'fields', 'styles', 'parameters', 'formattingRuleSheet', 'calculatedFields', 'components', 'watermarks']);
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/errorPanel/_designerErrorProvider.js




class DesignerErrorProvider extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    collectErrors() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'getDesignErrors', JSON.stringify({
            'XtraReportsLayoutSerializer': this._report.serialize()
        })).done((result) => {
            this.errors(result);
        });
    }
    constructor(_report) {
        super();
        this._report = _report;
        this.errors = external_ko_namespaceObject.observableArray([]);
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/errorPanel/_runtimeErrorProvider.js

class RuntimeErrorProvider {
    constructor() {
        this.errors = external_ko_namespaceObject.observableArray();
    }
    collectErrors() { }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_calculatedFieldsSource.js









class CalculatedFieldsSource extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        Object.keys(this._calculatedFieldsInfo).forEach((name) => {
            this.disposeObservableArray(this._calculatedFieldsInfo[name]);
            this.resetObservableArray(this._calculatedFieldsInfo[name]);
            delete this._calculatedFieldsInfo[name];
        });
        this.disposeObservableArray(this._calculatedFields);
        this.resetObservableArray(this._calculatedFields);
        this._dataSourceHelper(null);
        this._reportDataSource = null;
        this._fieldsDataMembersInfo = null;
        this._fieldsCallback = null;
    }
    _getDataMembersInfoByPath(fullPath) {
        this._calculatedFieldsInfo[fullPath] = this._calculatedFieldsInfo[fullPath] || external_ko_namespaceObject.observableArray();
        return this._calculatedFieldsInfo[fullPath];
    }
    _subscribeFieldProperties(field) {
        field._disposables.push(field.dataMember.subscribe((newValue) => {
            this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
            field.pathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest((0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(field.pathRequest.id || field.pathRequest.ref, newValue));
            this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
        }));
        field._disposables.push(field.dataSource.subscribe((newValue) => {
            this._updateFieldPathRequest(field);
        }));
        field._disposables.push(field.calculatedFieldName.subscribe((newValue) => {
            this._getDataMembersInfoByPath(field.pathRequest.fullPath).notifySubscribers();
        }));
    }
    _getFieldPathRequest(field) {
        const dataSourceInfo = this._dataSourceHelper().findDataSourceInfo(field.dataSource() || this._reportDataSource());
        if (dataSourceInfo)
            return new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest((0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(dataSourceInfo.id || dataSourceInfo.ref, field.dataMember()));
        return new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest('none');
    }
    _updateFieldPathRequest(field) {
        this._getDataMembersInfoByPath(field.pathRequest.fullPath).remove(field);
        field.pathRequest = this._getFieldPathRequest(field);
        if (field.pathRequest.ref !== 'none') {
            this._getDataMembersInfoByPath(field.pathRequest.fullPath).push(field);
        }
    }
    _initializeCalculatedField(field) {
        const pathRequest = this._getFieldPathRequest(field);
        field['getPath'] = (propertyName) => {
            const dataSourceInfo = this._dataSourceHelper().findDataSourceInfo(field.dataSource() || this._reportDataSource());
            return dataSourceInfo && (dataSourceInfo.id || dataSourceInfo.ref);
        };
        field._disposables.push(field.calcExpressionObj = new WrappedExpressionOptions({
            value: field['expression'],
            path: external_ko_namespaceObject.pureComputed(() => {
                return this._getFieldPathRequest(field).fullPath;
            }),
            fieldName: field.calculatedFieldName,
            functions: reportFunctionDisplay.filter(cat => cat.category != 'Summary')
        }));
        field._disposables.push(field.calcExpressionObj.path);
        field.nameEditable = external_ko_namespaceObject.pureComputed({
            read: function () {
                return field.calculatedFieldName();
            },
            write: function (value) {
                const fields = this._ordinaryFieldsInfo[field.pathRequest.fullPath];
                if (!!value && (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this._calculatedFields(), 'name', value) === null && (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(fields || [], 'displayName', value) === null) {
                    field.calculatedFieldName(value);
                }
            },
            owner: this
        });
        field._disposables.push(field.nameEditable);
        field.pathRequest = pathRequest;
        field.propertyGrid = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(external_ko_namespaceObject.observable(field));
        field._disposables.push(field.propertyGrid);
        this._subscribeFieldProperties(field);
        this._getDataMembersInfoByPath(pathRequest.fullPath).push(field);
    }
    _generateNewFieldName() {
        let i = 1;
        let generatedName;
        do {
            generatedName = 'calculatedField' + i++;
        } while ((0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this._calculatedFields(), 'name', generatedName) !== null);
        return generatedName;
    }
    constructor(calculatedFields, reportDataSource, dataSourceHelper) {
        super();
        this._calculatedFieldsInfo = {};
        this._ordinaryFieldsInfo = {};
        this._fieldsDataMembersInfo = {};
        this.addAction = {
            clickAction: (item) => {
                return this.addCalculatedField(item.path);
            },
            imageClassName: 'dxrd-image-add-calcfield',
            imageTemplateName: 'dxrd-svg-operations-add_calcfield',
            text: 'Add calculated field',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add calculated field', 'ASPxReportsStringId.ReportDesigner_FieldListActions_AddCalculatedField')
        };
        this.removeAction = {
            clickAction: (item) => {
                this.removeCalculatedField(item.path);
            },
            position: 50,
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: 'Remove calculated field',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove calculated field', 'ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveCalculatedField')
        };
        this._calculatedFieldsInfo = {};
        this._calculatedFields = calculatedFields;
        this._dataSourceHelper = external_ko_namespaceObject.observable(dataSourceHelper);
        this._reportDataSource = reportDataSource;
        for (let index = 0; index < calculatedFields().length; index++) {
            this._initializeCalculatedField(calculatedFields()[index]);
        }
        const self = this;
        this._disposables.push(this._calculatedFields.subscribe(function (changes) {
            for (let index = 0; index < changes.length; index++) {
                if (changes[index].status === 'added') {
                    self._initializeCalculatedField(changes[index].value);
                }
                else if (changes[index].status === 'deleted') {
                    const fullPath = self._getFieldPathRequest(changes[index].value).fullPath;
                    self._getDataMembersInfoByPath(fullPath).remove(function (item) {
                        return changes[index].value.name === item.name;
                    });
                    changes[index].value.dispose();
                }
            }
        }, null, 'arrayChange'));
        this._disposables.push(this._reportDataSource.subscribe((newValue) => {
            for (let index = 0; index < calculatedFields().length; index++) {
                if (!calculatedFields()[index].dataSource()) {
                    this._updateFieldPathRequest(calculatedFields()[index]);
                }
            }
        }));
        this.addCalculatedField = (fullPath) => {
            const pathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(fullPath);
            const newField = this.createCalculatedField(pathRequest.path);
            const dataSourceInfo = this._dataSourceHelper().findDataSourceInfoByID(pathRequest.id) || this._dataSourceHelper().findDataSourceInfoByRef(pathRequest.ref);
            newField.dataSource(dataSourceInfo.data);
            calculatedFields.push(newField);
            return newField;
        };
        this.removeCalculatedField = (fullPath) => {
            const pathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(fullPath);
            calculatedFields.remove(function (item) {
                const path = item.dataMember() ? (item.dataMember() + '.' + item.name) : item.name;
                return pathRequest.path === path;
            });
        };
    }
    createCalculatedField(dataMember) {
        return new CalculatedField({
            '@Name': this._generateNewFieldName(),
            '@DataMember': dataMember
        });
    }
    getActions(context) {
        const result = [];
        if (context.hasItems && context.data && (context.data.specifics === 'List' || context.data.specifics === 'ListSource') && context.path.indexOf(Parameter.ParametersRefString) !== 0) {
            result.push(this.addAction);
        }
        if (context.data && context.data.specifics && context.data.specifics.indexOf('calc') === 0) {
            result.push(this.removeAction);
        }
        return result;
    }
    beforeItemsFilled(request, items) {
        if (request.fullPath) {
            items.push.apply(items, this._getDataMembersInfoByPath(request.fullPath)());
        }
        return false;
    }
    afterItemsFilled(request, items) {
        if (request.fullPath) {
            this._ordinaryFieldsInfo[request.fullPath] = items;
            items.sort((a, b) => {
                const aIsList = FieldListController.isList(a) ? 1 : 0;
                const bIsList = FieldListController.isList(b) ? 1 : 0;
                if (aIsList !== bIsList) {
                    return bIsList - aIsList;
                }
                else {
                    return (a.displayName && b.displayName) ? a.displayName.localeCompare(b.displayName) : a.name.localeCompare(b.name);
                }
            });
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_dataSourceItemsExtender.js

class DataSourceItemsExtender {
    constructor(dataSources, _renameCallback) {
        this._renameCallback = _renameCallback;
        this._dataSources = dataSources;
    }
    beforeItemsFilled(request, items) {
        return false;
    }
    afterItemsFilled(request, items) {
        if (!(this._dataSources && this._dataSources.peek()))
            return;
        if (!request.fullPath) {
            this._dataSources.peek().forEach((dataSourceItem) => {
                const dataMember = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(items, 'displayName', dataSourceItem.name);
                if (!(dataMember && dataSourceItem.data))
                    return;
                if (dataSourceItem.data.tableInfoCollection) {
                    dataMember['contenttemplate'] = 'dxrd-datasource-item';
                    dataMember['tableInfoItems'] = dataSourceItem.data.tableInfoCollection;
                }
                else if (dataSourceItem.isSqlDataSource) {
                    dataMember['canAddSqlQuery'] = true;
                    dataMember['isSqlDataSource'] = true;
                }
                else if (dataSourceItem.isFederationDataSource) {
                    dataMember['canAddFederatedQuery'] = true;
                    dataMember['isFederationDataSource'] = true;
                }
                else if (dataSourceItem.isJsonDataSource) {
                    dataMember['isJsonDataSource'] = true;
                }
                else if (dataSourceItem.isObjectDataSource) {
                    dataMember['isObjectDataSource'] = true;
                    dataMember['hasParams'] = dataSourceItem['hasParams'];
                }
                dataMember['canRemove'] = true;
                dataMember['rename'] = (newName) => this._renameCallback(newName, dataSourceItem);
            });
        }
        else if (request.fullPath === request.id || request.fullPath === request.ref) {
            const dataSourcesInfo = this._dataSources.peek().filter((dataSourceItem) => {
                return !!dataSourceItem.id && dataSourceItem.id === request.id || !!dataSourceItem.ref && dataSourceItem.ref === request.ref;
            })[0];
            if (!dataSourcesInfo || (!dataSourcesInfo.isSqlDataSource && !dataSourcesInfo.isFederationDataSource))
                return;
            items.forEach((dataMemberItem) => {
                dataMemberItem['canEditQuery'] = dataSourcesInfo.isSqlDataSource && dataMemberItem.isList;
                dataMemberItem['canEditFederatedQuery'] = dataSourcesInfo.isFederationDataSource && dataMemberItem.isList;
            });
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/reportExplorer/_reportItemsProvider.js





class ReportItemsProvider extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _getControlByName(controlsHelper, name) {
        if (name === 'Report') {
            return controlsHelper.allControls().filter(x => x instanceof ReportViewModel)[0];
        }
        return controlsHelper.allControls().filter(x => controlsHelper.getNameProperty(x)() === name)[0];
    }
    _getProperties(targetInfo, propertyName) {
        return targetInfo.filter(x => x.modelName === '@' + propertyName || x.modelName === propertyName)[0];
    }
    _tryGenerateGetItemsFunc(rootItem, path) {
        if (path.indexOf(rootItem.propertyName) === 0) {
            return (controlsHelper) => rootItem.getItems(path, controlsHelper);
        }
    }
    getReportElementsByPath(controlsHelper, path) {
        if (path.length === 1) {
            return controlsHelper.allControls().map(x => {
                const name = x instanceof ReportViewModel ? 'Report' : controlsHelper.getNameProperty(x)();
                return createIDataMemberInfoByName(name);
            });
        }
        path = path.slice(1);
        const control = this._getControlByName(controlsHelper, path[0]);
        if (!control) {
            return null;
        }
        let info = control.getInfo();
        const controlsPath = path.slice(1);
        for (let i = 0; i < controlsPath.length; i++) {
            info = this._getProperties(info, controlsPath[i]);
            info = info && info.info;
        }
        if (info) {
            return info.filter(x => !!x.modelName && !x.array).map(x => {
                const name = x.modelName.indexOf('@') === 0 ? x.modelName.slice(1) : x.modelName;
                return createIDataMemberInfoByName(name, x.info ? 'list' : 'string');
            });
        }
        else {
            return null;
        }
    }
    constructor(controlsHelper, fieldListProvider) {
        super();
        this._rootItems = {
            'ReportItems': (path, controlsHelper) => this.getReportElementsByPath(controlsHelper, path.split('.'))
        };
        this.getItems = (path, rootItems) => {
            rootItems = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this._rootItems, rootItems);
            let getItemsFunc = undefined;
            Object.keys(rootItems).some((currentName) => {
                const rootItem = { propertyName: currentName, getItems: rootItems[currentName] };
                getItemsFunc = this._tryGenerateGetItemsFunc(rootItem, path.path) || this._tryGenerateGetItemsFunc(rootItem, path.fullPath);
                return !!getItemsFunc;
            });
            if (getItemsFunc) {
                const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                const items = getItemsFunc(controlsHelper);
                items && $deferred.resolve(items) || $deferred.reject();
                return $deferred.promise();
            }
            else if (path.fullPath === 'Root') {
                const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                const result = Object.keys(rootItems).map(name => createIDataMemberInfoByName(name));
                $deferred.resolve(result);
                return $deferred.promise();
            }
            else {
                return fieldListProvider.getItems(path);
            }
        };
        this.getItemByPath = (pathRequest, rootItems) => {
            const parts = pathRequest.fullPath.split('.');
            const propertyName = parts.pop();
            return this._getItemByPath(parts, rootItems, propertyName);
        };
    }
    _getItemByPath(pathParts, rootItems, propertyName) {
        const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        let currentPropertyName = propertyName;
        if (pathParts.length === 0)
            return $deferred.reject().promise();
        const parentPathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(pathParts.join('.'));
        this.getItems(parentPathRequest, rootItems).done((items) => {
            const isParameter = pathParts.length === 1 && pathParts[0] === 'Parameters';
            if (!isParameter && items.length === 0) {
                currentPropertyName = [pathParts.pop(), currentPropertyName].join('.');
                return this._getItemByPath(pathParts, rootItems, currentPropertyName)
                    .done((item) => $deferred.resolve(item))
                    .fail(() => $deferred.reject());
            }
            const item = items.filter(x => x.name === currentPropertyName)[0];
            if (item) {
                if (item instanceof CalculatedField && pathParts.length > 1) {
                    currentPropertyName = pathParts.pop();
                    this._getItemByPath(pathParts, rootItems, currentPropertyName)
                        .done(() => $deferred.resolve(item))
                        .fail(() => $deferred.reject());
                }
                else if (isParameter && item.isList) {
                    $deferred.reject();
                }
                else {
                    $deferred.resolve(item);
                }
            }
            else if (isParameter) {
                items.forEach(parameter => {
                    if (!parameter.isList)
                        return;
                    this._getItemByPath(['Parameters', parameter.name], rootItems, currentPropertyName)
                        .done((innerParameter) => $deferred.resolve(innerParameter));
                });
                $deferred.state() !== 'resolved' && $deferred.reject();
            }
            else {
                $deferred.reject();
            }
        }).fail(() => $deferred.reject());
        return $deferred.promise();
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_displayNameProvider.js



class DisplayNameProvider {
    _getRequest(path) {
        if (!this._requests[path]) {
            const pathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(path);
            this._requests[path] = external_ko_namespaceObject.pureComputed(() => this._fieldsProvider.getItems(pathRequest));
        }
        return this._requests[path];
    }
    _ignoreDisplayNameRequest(propertyName) {
        if (propertyName.indexOf('ReportItems') === 0)
            return true;
        return false;
    }
    _getDisplayNameRequest(path, fieldName) {
        const def = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._getRequest(path)().done((data) => {
            const displayName = this._getFieldDisplayName(data, fieldName);
            if (!displayName)
                def.reject();
            else
                def.resolve(displayName);
        }).fail(() => {
            def.reject();
        });
        return def.promise();
    }
    _createRequestInfo(dataSource, path, dataMember, dataMemberOffset, includeDataSourceName) {
        if (!dataMember)
            return null;
        let dataSourceName = null;
        if (!path) {
            const ds = (dataSource || this._rootDS());
            const dsInfo = ds && this._dataSourceHelper.findDataSourceInfo(ds);
            if (!dsInfo)
                return null;
            path = (dsInfo.ref || dsInfo.id);
            if (includeDataSourceName)
                dataSourceName = dsInfo.name;
        }
        const offset = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(path, dataMemberOffset);
        return {
            fullPath: offset + '.' + dataMember,
            offset: offset,
            dataMember: dataMember,
            dataMemberParts: dataMember.split('.'),
            dataSourceName: dataSourceName
        };
    }
    _getFieldDisplayName(fields, fieldName) {
        if (!fields)
            return null;
        const field = (0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(fields, field => field.name === fieldName);
        return field ? field.displayName : null;
    }
    _getDisplayName(request) {
        const def = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        if (!request) {
            def.reject();
            return def.promise();
        }
        const fieldsRequests = [];
        for (let i = -1, path = request.offset; i < request.dataMemberParts.length - 1;) {
            fieldsRequests.push(this._getDisplayNameRequest(path, request.dataMemberParts[i + 1]));
            path += '.' + request.dataMemberParts[++i];
        }
        external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred.when(fieldsRequests).done((results) => {
            let result = request.dataSourceName ? (request.dataSourceName + ' - ') : '';
            for (let i = 0; i < results?.length; i++) {
                result += results[i];
                if (i < results.length - 1)
                    result += '.';
            }
            def.resolve(result);
        }).fail(() => def.reject());
        return def.promise();
    }
    _getRealName(request) {
        if (!request)
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().reject().promise();
        return this._getRealNameRequest(request.offset, request.dataMember);
    }
    _getRealNameRequest(path, dataMember) {
        const def = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._getRequest(path)()
            .done((items) => {
            let targetItem = items.filter(item => dataMember === item.displayName)[0];
            if (!targetItem)
                targetItem = items.filter(item => dataMember.indexOf(item.displayName + '.') === 0 && item.isList)[0];
            if (targetItem) {
                dataMember === targetItem.displayName ? def.resolve(targetItem.name) :
                    this._getRealNameRequest(path + '.' + targetItem.name, dataMember.substring(targetItem.displayName.length + 1))
                        .done(data => {
                        def.resolve(targetItem.name + '.' + data);
                    })
                        .fail(() => {
                        def.reject();
                    });
            }
            else {
                def.reject();
            }
        })
            .fail(() => {
            def.reject();
        });
        return def.promise();
    }
    constructor(_fieldsProvider, _dataSourceHelper, _rootDS) {
        this._fieldsProvider = _fieldsProvider;
        this._dataSourceHelper = _dataSourceHelper;
        this._rootDS = _rootDS;
        this._requests = {};
        this._fieldsProvider = _fieldsProvider;
        this._dataSourceHelper = _dataSourceHelper;
        this._rootDS = _rootDS;
    }
    getDisplayName(dataSource, dataMember, dataMemberOffset = '', includeDataSourceName = true) {
        const request = this._createRequestInfo(dataSource, null, dataMember, dataMemberOffset, includeDataSourceName);
        return this._getDisplayName(request);
    }
    getDisplayNameByPath(path, dataMember) {
        if (this._ignoreDisplayNameRequest(dataMember))
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(dataMember).promise();
        return this._getByPath(path, dataMember, x => this._getDisplayName(x));
    }
    getRealName(path, dataMember) {
        return this._getByPath(path, dataMember, x => this._getRealName(x));
    }
    _getByPath(path, dataMember, getNameFunc) {
        path = path || '';
        let request = this._createRequestInfo(null, path, dataMember, '', false);
        const pathParts = path.split('.');
        if (pathParts.length === 1) {
            return getNameFunc(request);
        }
        else {
            const result = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            getNameFunc(request).done(x => {
                result.resolve(x);
            }).fail(x => {
                request = this._createRequestInfo(null, pathParts[0], dataMember, '', false);
                getNameFunc(request).done(x => {
                    result.resolve(x);
                }).fail(x => result.reject());
            });
            return result.promise();
        }
    }
    dispose() {
        Object.keys(this._requests).forEach((key) => {
            this._requests[key].dispose();
            delete this._requests[key];
        });
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/fieldlist/_watermarksViewModel.js



class WatermarksViewModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(watermarks) {
        super();
        this._watermarks = watermarks;
    }
    createWatermark() {
        return new WatermarkModel({
            '@Id': (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueNameForNamedObjectsArray)(this._watermarks(), 'watermark')
        });
    }
    getActions(context) {
        return [];
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/generator/reportDesignerContext.js

















class ReportDesignerContext extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _getChartAvailableSources(dsHelper, dataSource, parameters) {
        return [
            dataSource && dsHelper.findDataSourceInfo(dataSource),
            { ref: 'Parameters', name: 'Parameters', specifics: 'parameters', data: parameters },
            { ref: 'none', name: 'none', specifics: 'none', data: null }
        ].filter(x => x);
    }
    getInfo() {
        return [{ propertyName: 'report', modelName: '@Report' }];
    }
    isModelReady() {
        return this.report && this.report.isModelReady();
    }
    dispose() {
        super.dispose();
        this.report = null;
        this.url = null;
        this.surface = null;
        this.watermarks = null;
        this.parameters = null;
        this.dataSourceHelper = null;
        this.fieldListDataSourceHelper = null;
        this.calcFieldsSource = null;
        this.fieldListItemsExtenders = [];
        this.controlsHelper = null;
        this.fieldListProvider = null;
        this.reportItemsProvider = null;
        this.dataBindingsProvider = null;
        this.chartValueBindingProvider = null;
        this.displayNameProvider = null;
        this.expressionDisplayNameProvider = null;
        this.stylesHelper = null;
        this.dataBindingsProvider = null;
    }
    constructor(options) {
        super();
        this.report = options.report || new ReportViewModel(options.data);
        this.url = external_ko_namespaceObject.isObservable(options.url) ? options.url : external_ko_namespaceObject.observable(options.url);
        if (options.dataSourceRefs)
            this.report.dataSourceRefs = options.dataSourceRefs;
        const knownEnums = !!options.knownEnums?.length ? options.knownEnums : options.report.knownEnums;
        const selection = options.selection;
        const data = options.initializeOptions;
        const designerCallbacks = options.designerCallbacks;
        const parameterEditingSettings = data.parameterEditingSettings;
        this.report.parameterHelper.initialize(knownEnums, options.designerCallbacks, parameterEditingSettings);
        this.surface = new ReportSurface(this.report);
        this.watermarks = new WatermarksViewModel(this.report.watermarks);
        this.parameters = new ParametersViewModel(this.report);
        this.dataSourceHelper = new DataSourceHelper(this.report.objectStorage, this.report.dataSourceRefs, data.availableDataSources);
        this.report.dataSourceHelper(this.dataSourceHelper);
        this.fieldListDataSourceHelper = new FieldListDataSourcesHelper();
        this.fieldListDataSourceHelper.updateDataSources(this.dataSourceHelper, this.report, this.parameters.parameters);
        this.calcFieldsSource = new CalculatedFieldsSource(this.report.calculatedFields, this.report.dataSource, this.dataSourceHelper);
        const chartValueBindingAvailableSources = external_ko_namespaceObject.observableArray(this._getChartAvailableSources(this.dataSourceHelper, this.report.dataSource(), this.parameters));
        const subscription = this.report.dataSource.subscribe((newVal) => {
            chartValueBindingAvailableSources(this._getChartAvailableSources(this.dataSourceHelper, newVal, this.parameters));
        });
        this._disposables.push({
            dispose: () => {
                chartValueBindingAvailableSources([]);
                subscription.dispose();
            }
        });
        const dataSourceItemsExtender = new DataSourceItemsExtender(this.dataSourceHelper.usedDataSources, (nameCandidate, dataSourceInfo) => {
            const component = this.report.components().filter(x => x.data === dataSourceInfo.data)[0];
            component.name(nameCandidate);
        });
        const chartFieldListExtender = new ChartFieldListExtender();
        this.state = () => {
            const extensions = this.report && this.report.extensions.peek() || [];
            if (extensions.length > 0) {
                return {
                    reportExtensions: this.report.extensions().map((item) => {
                        return {
                            'Key': item.key(),
                            'Value': item.value()
                        };
                    })
                };
            }
            return data.state;
        };
        this.fieldListItemsExtenders = [
            this.parameters,
            dataSourceItemsExtender,
            this.calcFieldsSource,
            chartFieldListExtender
        ];
        this.controlsHelper = new DesignControlsHelper(this.report, selection);
        this.stylesHelper = new StylesHelper(this.report, this.controlsHelper);
        this.report.stylesHelper(this.stylesHelper);
        const wrappedCallback = this.fieldListDataSourceHelper.wrapFieldsCallback(designerCallbacks.fieldLists, this.state);
        this.fieldListProvider = new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(wrappedCallback, this.fieldListDataSourceHelper.fieldListDataSources, this.fieldListItemsExtenders);
        this.reportItemsProvider = new ReportItemsProvider(this.controlsHelper, this.fieldListProvider);
        this.dataBindingsProvider = new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(wrappedCallback, this.fieldListDataSourceHelper.fieldListDataSources, [this.parameters, this.calcFieldsSource, chartFieldListExtender]);
        this.report.dataBindingsProvider(this.dataBindingsProvider);
        this.chartValueBindingProvider = new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(wrappedCallback, chartValueBindingAvailableSources, [this.parameters, this.calcFieldsSource]);
        this.displayNameProvider = new DisplayNameProvider(this.fieldListProvider, this.fieldListDataSourceHelper.dataSourceHelper(), this.report.dataSource);
        this.expressionDisplayNameProvider = new DisplayNameProvider(this.reportItemsProvider, this.fieldListDataSourceHelper.dataSourceHelper(), this.report.dataSource);
        this.reportErrorProvider = new DesignerErrorProvider(this.report);
        this.runtimeErrorProvider = new RuntimeErrorProvider();
        this._disposables.push(this.report);
        this._disposables.push(this.surface);
        this._disposables.push(this.displayNameProvider);
        this._disposables.push(this.expressionDisplayNameProvider);
        this._disposables.push(this.dataSourceHelper);
        this._disposables.push(this.fieldListDataSourceHelper);
        this._disposables.push(this.calcFieldsSource);
        this._disposables.push(this.watermarks);
        this._disposables.push(this.parameters);
        this._disposables.push(this.controlsHelper);
        this._disposables.push(this.reportItemsProvider);
        this._disposables.push(this.stylesHelper);
        this._disposables.push(this.reportErrorProvider);
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/navigation/navigateTab.js



class NavigateTab extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.undoEngine['_callDisposeFunction'](this.context());
        this.context().dispose();
    }
    _generateDisplayName(model) {
        const name = model && (model.displayNameObject() || model.name());
        return name;
    }
    _createReport() {
        return external_ko_namespaceObject.computed({
            read: () => this.context().report,
            write: (newVal) => this.changeContext(newVal, this.context().url())
        });
    }
    _createReportUrl() {
        return external_ko_namespaceObject.computed({
            read: () => this.context().url(),
            write: (newVal) => this.context().url(newVal)
        });
    }
    changeContext(report, reportUrl) {
        this.context(this._callbacks.createContext(report, reportUrl));
        this._isReportLoading(false);
    }
    resetIsModified() {
        this.undoEngine.isDirty(false);
        this.undoEngine.clearHistory();
    }
    refresh(resetState) {
        this._isReportLoading(true);
        ReportStorageWeb.getReportByUrl((this.context().url())).done((result) => {
            this.report(result);
            if (resetState) {
                this.resetIsModified();
            }
        });
    }
    constructor(options) {
        super();
        this._isReportLoading = options.isReportLoading;
        this._callbacks = options.callbacks;
        this.context = external_ko_namespaceObject.observable(this._callbacks.createContext(options.report, options.url));
        this._disposables.push(this.displayName = external_ko_namespaceObject.computed(() => this._generateDisplayName(this.context().report)));
        this._disposables.push(this.undoEngine = new external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine(this.context, ['surface', 'reportSource'], 'getInfo', ['objectStorage']));
        this.isDirty = this.undoEngine.isDirty;
        this.isModified = this.undoEngine.isDirty;
        this._disposables.push(this.report = this._createReport());
        this._disposables.push(this.url = this._createReportUrl());
        this._callbacks.afterInititalize(this);
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/navigation/navigateByReports.js







class NavigateByReports extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _removeTab(tab) {
        const removingDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        if (!this._callbacks.reportTabClosing || !this._callbacks.reportTabClosing(tab, removingDeferred)) {
            removingDeferred.resolve();
        }
        removingDeferred.done(() => {
            const currentIndex = this._selectedIndex(), closingIndex = this.tabs().indexOf(tab), newIndex = (currentIndex < closingIndex || currentIndex === closingIndex && currentIndex < this.tabs().length - 1)
                ? currentIndex
                : currentIndex - 1;
            this.tabs.remove(tab);
            this._selectedIndex(newIndex);
            if (newIndex === currentIndex)
                this.selectedIndex.notifySubscribers();
            this._callbacks.reportTabClosed && this._callbacks.reportTabClosed(tab);
            tab.dispose();
        });
        return removingDeferred.promise();
    }
    dispose() {
        super.dispose();
        this._selectedIndex(-1);
        this.disposeObservableArray(this.tabs);
        this.resetObservableArray(this.tabs);
    }
    _closeTab(deletedTab) {
        const closingDeferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        deletedTab.close = closingDeferred;
        if (deletedTab.isDirty()) {
            this.save(deletedTab);
        }
        else {
            closingDeferred.resolve();
        }
        return closingDeferred.promise();
    }
    _closeAll(deferred) {
        if (this.tabs().length === 0) {
            deferred.resolve();
            return;
        }
        const tab = this.tabs()[this.tabs().length - 1];
        this._closeTab(tab).done(() => {
            this._removeTab(tab)
                .done(() => this._closeAll(deferred))
                .fail(() => deferred.reject());
        });
    }
    _getTabByControl(report, reportUrl) {
        return this.tabs().filter((tab) => { return reportUrl ? tab.context().url() === reportUrl : tab.context().report === report; })[0];
    }
    _addTab(report, url, newReportName) {
        const newTab = new NavigateTab({
            report: report,
            url: url,
            isReportLoading: this._isReportLoading,
            callbacks: {
                afterInititalize: (tab) => {
                    tab._disposables.push(tab.displayName.subscribe(() => this.checkHeight()));
                    tab.icon = !this.allowMDI && this.tabs().length === 0 ? undefined : 'dx-icon-close';
                    if (newReportName) {
                        newReportName = (0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(this.tabs().map((t) => t.displayName()), newReportName, false);
                        tab.context().report.displayNameObject(newReportName);
                        tab.undoEngine.clearHistory();
                    }
                    else if (!tab.displayName()) {
                        tab.context().report.name((0,external_DevExpress_Analytics_Internal_namespaceObject.getUniqueName)(this.tabs().map((t) => { return t.displayName(); }), 'Report'));
                        tab.undoEngine.clearHistory();
                    }
                    tab._disposables.push(tab.context.subscribe(() => this.height.notifySubscribers()));
                },
                createContext: (report, url) => {
                    return new ReportDesignerContext({
                        report: report,
                        selection: this._selection,
                        designerCallbacks: this._callbacks,
                        knownEnums: report.knownEnums,
                        initializeOptions: this._initializeOptions,
                        url: url
                    });
                }
            }
        });
        this.tabs.push(newTab);
        this.switch(newTab);
        newTab.undoEngine.clearHistory();
    }
    changeContext(report, reportUrl) {
        if (!this.currentTab())
            this.addTab(report, reportUrl);
        else {
            this.currentTab().changeContext(report, external_ko_namespaceObject.unwrap(reportUrl || this.currentTab().url));
        }
    }
    constructor(options) {
        super();
        this._isReportLoading = external_ko_namespaceObject.observable(false);
        this.save = (tab) => void 0;
        this.height = external_ko_namespaceObject.observable(0);
        this.tabs = external_ko_namespaceObject.observableArray([]);
        this._selectedIndex = external_ko_namespaceObject.observable(-1);
        this.selectedIndex = external_ko_namespaceObject.computed({
            read: () => { return this._selectedIndex(); },
            write: value => { if (value != -1)
                this._selectedIndex(value); }
        });
        this.allowMDI = options.allowMDI != undefined ? options.allowMDI : true;
        this.knownEnums = options.knownEnums;
        this._callbacks = options.callbacks || {};
        this._selection = options.selection;
        this._initializeOptions = options.initOptions;
        let currentTab = null;
        this._disposables.push(this.selectedIndex);
        this._disposables.push(this.currentTab = external_ko_namespaceObject.pureComputed(() => {
            if (this.selectedIndex() !== -1) {
                const oldValue = currentTab;
                currentTab = this.tabs.peek()[this.selectedIndex()];
                if (currentTab !== oldValue)
                    this._isReportLoading(true);
                return currentTab;
            }
            else {
                return null;
            }
        }));
        if (options.report)
            this.addTab(options.report, options.reportUrl || external_ko_namespaceObject.observable(null));
        this._disposables.push(this.currentTab.subscribe((newVal) => {
            setTimeout(() => {
                this._isReportLoading(false);
                this.height.notifySubscribers();
                this.checkHeight();
                this._callbacks.tabChanged && this._callbacks.tabChanged(newVal);
            }, 1);
        }));
    }
    init(isLoading) {
        this._isReportLoading = isLoading;
    }
    removeTab(tab, force = false) {
        if (force)
            return this._removeTab(tab);
        this._closeTab(tab).done(() => {
            this._removeTab(tab);
        });
    }
    closeAll() {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._closeAll(deferred);
        return deferred.promise();
    }
    switch(tab) {
        this._selectedIndex(this.tabs().indexOf(tab));
    }
    _createNewTab(report, url = external_ko_namespaceObject.observable(''), newReportName) {
        this._addTab(report, url, newReportName);
        const onOpened = this._callbacks.reportOpened;
        onOpened && setTimeout(() => {
            onOpened && onOpened({ report, url: external_ko_namespaceObject.unwrap(url) });
        }, 10);
    }
    goToSubreport(subreportSurface) {
        if (reportStorageWebIsRegister()) {
            const subreportControl = subreportSurface.getControlModel();
            let currentReport = null;
            if (!subreportControl.reportSourceUrl())
                currentReport = subreportControl.cloneReportSource();
            this.addTab(currentReport, subreportControl.reportSourceUrl);
        }
    }
    addTab(report, url = external_ko_namespaceObject.observable(''), onCancel = () => void 0, newReportName) {
        const $deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        const tab = this._getTabByControl(report, url());
        if (!tab) {
            if ((args => void (this._callbacks.reportOpening && this._callbacks.reportOpening(args)) || args)({ url: url(), cancel: false }).cancel) {
                onCancel();
                return $deferred.reject().promise();
            }
            if (url() && !report) {
                ReportStorageWeb.getReportByUrl(url()).done((result) => {
                    $deferred.resolve();
                    this._createNewTab(result, url, newReportName);
                }).fail(() => $deferred.reject());
            }
            else {
                $deferred.resolve();
                this._createNewTab(report, url, newReportName);
            }
        }
        else {
            $deferred.resolve();
            this.switch(tab);
        }
        return $deferred.promise();
    }
    checkHeight() {
        const currentHeight = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dxrd-navigation-panel-wrapper').outerHeight();
        if (this.height() !== currentHeight) {
            this.height(currentHeight);
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/smartTags/expressionSmartTag.js





class ExpressionSmartTag extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(reportElement, _expressionEditor) {
        super();
        this.reportElement = reportElement;
        this._expressionEditor = _expressionEditor;
        this.imageTemplateName = 'dxrd-svg-properties-propertyexpression';
        this.visible = external_ko_namespaceObject.observable(true);
    }
    onClick() {
        const expressionEditor = new ReportExpressionEditorWrapper(external_ko_namespaceObject.observable(this.reportElement), external_ko_namespaceObject.observable(null));
        this._expressionEditor(expressionEditor);
        this._expressionEditor().popupVisible(true);
        this.subscription = expressionEditor.popupVisible.subscribe((newVal) => {
            if (!newVal) {
                setTimeout(() => {
                    expressionEditor.dispose();
                    this._expressionEditor(null);
                    this.subscription.dispose();
                }, 10);
            }
        });
    }
    dispose() {
        this._expressionEditor()?.dispose();
        this._expressionEditor(null);
        this.subscription?.dispose();
    }
}
class TasksSmartTag extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(reportElement, popularProperties) {
        super();
        this.reportElement = reportElement;
        this.popularProperties = popularProperties;
        this._booleanEditors = external_ko_namespaceObject.observableArray([]);
        this._nonBooleanEditors = external_ko_namespaceObject.observableArray([]);
        this.visible = external_ko_namespaceObject.observable(true);
        this.popoverVisible = external_ko_namespaceObject.observable(false);
        this.imageTemplateName = 'dxrd-svg-properties-tasksmarttag';
        this.templateName = 'dxrd-smart-tag';
        this.editorsAvailableSubscriptions = [];
        this.getPopupContainer = external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer;
        this.separatorVisible = external_ko_namespaceObject.observable(false);
        const updateStatus = () => {
            const condition = (editor) => editor._get('visible');
            const hasBooleanEditor = this._booleanEditors().some(condition);
            const hasNonBooleanEditor = this._nonBooleanEditors().some(condition);
            this.visible(hasBooleanEditor || hasNonBooleanEditor);
            this.separatorVisible(hasBooleanEditor && hasNonBooleanEditor);
        };
        const fillAndSubscribeEditors = () => {
            const popularPropertyNames = this.getPopularPropertyNames(this.reportElement?.controlType)?.popularProperties;
            const booleanEditors = [];
            const nonBooleanEditors = [];
            const editors = this.popularProperties?.getEditors();
            editors && editors.forEach(editor => {
                const pushAndSubscribeEditors = (editors) => {
                    editors.forEach(editor => {
                        this.editorsAvailableSubscriptions.push(editor.subscribeProperty('visible', () => { updateStatus(); }));
                        if (editor instanceof external_DevExpress_Analytics_Widgets_namespaceObject.BooleanEditor)
                            booleanEditors.push(editor);
                        else
                            nonBooleanEditors.push(editor);
                    });
                };
                if (editor.isComplexEditor) {
                    const editorsFromComplex = this.collectEditorsFromComplex(editor, popularPropertyNames, [], editor._get('displayName'));
                    editorsFromComplex.length && pushAndSubscribeEditors(editorsFromComplex);
                }
                else {
                    pushAndSubscribeEditors([editor]);
                }
            });
            this._booleanEditors(booleanEditors);
            this._nonBooleanEditors(nonBooleanEditors);
        };
        fillAndSubscribeEditors();
        updateStatus();
        const dispose = () => {
            this.editorsAvailableSubscriptions.forEach(subsription => subsription());
            this.editorsAvailableSubscriptions = [];
        };
        this.addDisposable({ dispose: dispose });
        this.addDisposable(this.popularProperties.subscribeProperty('_editors', (newValue) => {
            dispose();
            fillAndSubscribeEditors();
            updateStatus();
        }));
    }
    collectEditorsFromComplex(complexEditor, propertyNames, editorsFound = [], parentEditorName) {
        const checkAndPushEditor = (editor) => {
            if (propertyNames && propertyNames.length && propertyNames.some(pName => pName === editor.name)
                && !editor.templateName.toLowerCase().includes('header')) {
                if (editor._get('displayName') !== parentEditorName)
                    editor.parentName = ' (' + parentEditorName + ')';
                editorsFound.push(editor);
            }
        };
        checkAndPushEditor(complexEditor);
        const editors = complexEditor.viewmodel?.editors;
        if (editors && editors.length) {
            editors.forEach(editor => {
                if (editor.isComplexEditor) {
                    this.collectEditorsFromComplex(editor, propertyNames, editorsFound, (parentEditorName && parentEditorName.length) ? parentEditorName + ' > ' + editor._get('displayName') : editor._get('displayName'));
                }
                checkAndPushEditor(editor);
            });
        }
        return editorsFound;
    }
    getPopularPropertyNames(controlType) {
        return this.reportElement.root?.getControlFactory()?.getControlInfo(controlType);
    }
    onClick() {
        this.popoverVisible(!this.popoverVisible());
    }
    getEditors(booleanEditors) {
        if (booleanEditors)
            return this._booleanEditors();
        else
            return this._nonBooleanEditors();
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/smartTags/smartTagContainer.js





class SmartTagModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(selection, reportSurface, offset, smartTagFactory, rtl) {
        super();
        this.smartTags = external_ko_namespaceObject.observableArray();
        this.visible = external_ko_namespaceObject.observable(true);
        this.width = 22;
        this.position = new external_DevExpress_Analytics_Elements_namespaceObject.Point(0, 0);
        this._disposables.push(selection.focused.subscribe(selectedSurface => {
            const selectedItem = selectedSurface && selectedSurface['_control'];
            if (selectedItem) {
                const reportElement = selectedItem;
                this.smartTags().forEach(x => x.dispose());
                this.smartTags(smartTagFactory[reportElement.controlType] ? smartTagFactory[reportElement.controlType](reportElement) :
                    smartTagFactory['default'] && smartTagFactory['default'](reportElement));
            }
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const surface = reportSurface();
            if (!surface)
                return;
            const selectedSurface = selection.focused();
            const selectedItem = selectedSurface && selectedSurface['_control'];
            if (selectedItem) {
                const position = selectedSurface['absoluteRect'] && selectedSurface['absoluteRect']();
                const margin = this._getMargin(selectedItem, rtl);
                if (position) {
                    let left = surface.margins.left() + margin;
                    left += rtl ? position.left : position.right;
                    this.position.x(left);
                    this.position.y(position.top);
                }
                else {
                    let left = margin;
                    left += rtl ? surface._x() : surface._width() + offset();
                    this.position.x(left);
                    this.position.y(0);
                }
            }
            this.visible(selectedItem ? !external_ko_namespaceObject.unwrap(selectedItem.lockedInUserDesigner) : false);
        }).extend(({ rateLimit: { timeout: 1, method: 'notifyWhenChangesStop' } })));
    }
    _getMargin(control, rtl) {
        const controlMargin = control instanceof ReportViewModel ? 3 : control instanceof BandViewModel ? -this.width : 9;
        return rtl ? -this.width - controlMargin : controlMargin;
    }
}

;// external "DevExpress.events"
const external_DevExpress_events_namespaceObject = DevExpress.events;
;// ./node_modules/devexpress-reporting/designer/tools/generator/_reportMenuSettings.js



class ReportMenuSettings extends external_DevExpress_Analytics_Internal_namespaceObject.MenuSettings {
    dispose() {
        super.dispose();
        external_DevExpress_events_namespaceObject.off(document, 'dxpointerdown', this.toggleAppMenu);
        this._$menuElement = null;
    }
    setMenuElement($element) {
        this._$menuElement = $element;
    }
    constructor() {
        super();
        this._appMenuVisible = external_ko_namespaceObject.observable(false);
        this._$menuElement = null;
        this.isMenuCollapsed = external_ko_namespaceObject.observable(false);
        this.toggleAppMenu = (event) => {
            const canToggle = !event || !this._$menuElement.is(event.target) && !this._$menuElement.find(event.target).length;
            canToggle && this._toggleAppMenu();
            return canToggle;
        };
    }
    _toggleAppMenu() {
        this.appMenuVisible(!this.appMenuVisible());
        if (this.appMenuVisible()) {
            external_DevExpress_events_namespaceObject.on(document, 'dxpointerdown', this.toggleAppMenu);
        }
        else {
            this.isMenuCollapsed(false);
            external_DevExpress_events_namespaceObject.off(document, 'dxpointerdown', this.toggleAppMenu);
        }
    }
    generate() {
        const result = super.generate();
        if (this.isMenuCollapsed)
            result['isMenuCollapsed'] = this.isMenuCollapsed;
        result['setMenuElement'] = ($element) => this.setMenuElement($element);
        return result;
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/_dataSourceActions.js





class DataSourceActions {
    _findDataSource(dataSourceID) {
        return this._dsHelper().usedDataSources().filter((item) => {
            return item.id === dataSourceID || item.ref === dataSourceID;
        })[0];
    }
    constructor(dsHelper, reportViewModel, undoEngine, _allowEditDataSource = true, _allowRemoveDataSource = true, _fieldListProvider) {
        this._allowEditDataSource = _allowEditDataSource;
        this._allowRemoveDataSource = _allowRemoveDataSource;
        this._fieldListProvider = _fieldListProvider;
        this.removeDataSourceAction = {
            clickAction: (item) => {
                this.removeDataSource(item.data.name);
            },
            position: 50,
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Remove Data Source', 'ASPxReportsStringId.ReportDesigner_FieldListActions_RemoveDataSource')
        };
        this.rebuildResultSchemaAction = {
            clickAction: (item) => {
                this.rebuildResultSchema(item.data.name);
            },
            position: 0,
            imageClassName: 'dxrd-image-operations-rebuild_schema',
            imageTemplateName: 'dxrd-svg-operations-rebuild_schema',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Rebuild Result Schema', 'DataAccessUIStringId.SqlDataSourceDesignerVerbRebuildSchema')
        };
        this.renameAction = {
            clickAction: (item) => {
                item.setRenameMode(true);
            },
            position: 0,
            imageClassName: 'dxrd-image-operations-rename',
            imageTemplateName: 'dxrd-svg-operations-rename',
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Rename', 'ASPxReportsStringId.ReportDesigner_FieldListActions_Rename')
        };
        this._dsHelper = dsHelper;
        this._reportViewModel = reportViewModel;
        this._undoEngine = undoEngine;
    }
    removeDataSource(dataSourceID) {
        const dsInfo = this._findDataSource(dataSourceID);
        if (!dsInfo)
            return;
        removeDataSourceFromReport(this._dsHelper(), this._reportViewModel().dataSource, this._undoEngine, dsInfo);
    }
    addPredifinedDataSource(dataSourceName) {
        const dsHelper = external_ko_namespaceObject.unwrap(this._dsHelper);
        const data = dsHelper.availableDataSources.filter(x => x.name === dataSourceName)[0];
        data.id = (0,external_DevExpress_Analytics_Internal_namespaceObject.guid)().replace(/-/g, '');
        addDataSourceToReport(dsHelper, this._reportViewModel(), this._undoEngine(), this._fieldListProvider(), data, true);
    }
    rebuildResultSchema(dataSourceID) {
        const dsInfo = this._findDataSource(dataSourceID);
        if (!dsInfo)
            return;
        let request = null;
        if (dsInfo.isSqlDataSource)
            request = ReportDataSourceService.sqlRebuildResultSchema(dsInfo.data['base64']());
        if (dsInfo.isFederationDataSource)
            request = ReportDataSourceService.federationRebuildResultSchema(dsInfo.data['base64'](), dsInfo.data.dependentDataSources);
        request.done((result) => {
            dsInfo.data['base64'](result);
            (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Result schema is rebuilt successfully.', 'DataAccessUIStringId.RebuildResultSchemaComplete'), external_DevExpress_Analytics_Internal_namespaceObject.NotifyType.success);
        });
    }
    getActions(context) {
        const result = [];
        if (!context.data)
            return result;
        if (this._allowRemoveDataSource && context.data.specifics === 'ListSource' && context.data['canRemove'] === true) {
            result.push(this.removeDataSourceAction);
        }
        if (this._allowEditDataSource) {
            if (!!context.data['rename'])
                result.push(this.renameAction);
            if (context.data['isSqlDataSource'] || context.data['isFederationDataSource'])
                result.push(this.rebuildResultSchemaAction);
        }
        return result;
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/utils.js


class _ReportWizardOptions extends external_DevExpress_Analytics_Wizard_namespaceObject._DataSourceWizardOptionsBase {
    constructor() {
        super(...arguments);
        this.wizardSettings = new ReportWizardSettings().createDefault();
        this.hideDataMemberSubItems = false;
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/dataSourceWizard/configureMasterDetailRelationshipsPage.js


class ConfigureMasterDetailRelationshipsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.ConfigureMasterDetailRelationshipsPage {
    constructor(createSqlDataSourceInfo, sqlDataSourceResultSchema) {
        super(sqlDataSourceResultSchema);
        this._dataSourceWizardHelper = new DataSourceWizardHelper(this, createSqlDataSourceInfo);
    }
    initialize(state) {
        return super.initialize(state.sqlDataSourceWizard);
    }
    commit() {
        return this._dataSourceWizardHelper.commit(() => super.commit(), (state) => (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreSqlDataSourceFromState)(state).sqlDataSource);
    }
}
function _registerConfigureMasterDetailRelationshipsPage(factory, callbacks) {
    overrideSqlDataSourceWizardPage(factory, external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage, {
        create: () => {
            return new ConfigureMasterDetailRelationshipsPage(callbacks.createSqlDataSourceInfo, callbacks.sqlDataSourceResultSchema);
        }
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/dataSourceWizard/multiQueryConfigurePage.js


class MultiQueryConfigurePage extends external_DevExpress_Analytics_Wizard_namespaceObject.MultiQueryConfigurePage {
    constructor(reportWizardOptions) {
        super(reportWizardOptions);
        this._dataSourceWizardHelper = new DataSourceWizardHelper(this, reportWizardOptions.callbacks.createSqlDataSourceInfo);
    }
    _getQueriesCount() {
        return this['_dataSource']().queries().length;
    }
    _canEditQueryParameters() {
        return this['_dataSource']().queries().some(query => (0,external_DevExpress_Analytics_Wizard_namespaceObject._canEditQueryParameters)(query, this['_customQueries']()));
    }
    initialize(state) {
        return super.initialize(state.sqlDataSourceWizard);
    }
    commit() {
        return this._dataSourceWizardHelper.commit(() => super.commit(), (state) => (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreSqlDataSourceFromState)(state).sqlDataSource);
    }
}
function _registerMultiQueryConfigurePage(factory, reportWizardOptions) {
    overrideSqlDataSourceWizardPage(factory, external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.MultiQueryConfigurePage, {
        create: () => {
            return new MultiQueryConfigurePage(reportWizardOptions);
        },
        resetState: (state) => {
            delete state.sqlDataSourceWizard.customQueries;
            delete state.sqlDataSourceWizard.sqlDataSourceJSON;
        }
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/dataSourceWizard/multiQueryConfigureParametersPage.js



class MultiQueryConfigureParametersPage extends external_DevExpress_Analytics_Wizard_namespaceObject.MultiQueryConfigureParametersPage {
    constructor(createSqlDataSourceInfo, parametersConverters, requestWrapper) {
        super(parametersConverters, requestWrapper);
        this.createSqlDataSourceInfo = createSqlDataSourceInfo;
        this._dataSourceWizardHelper = new DataSourceWizardHelper(this, createSqlDataSourceInfo);
    }
    initialize(state) {
        return super.initialize(state.sqlDataSourceWizard);
    }
    commit() {
        return this._dataSourceWizardHelper.commit(() => super.commit(), (state) => (0,external_DevExpress_Analytics_Wizard_namespaceObject._restoreSqlDataSourceFromState)(state).sqlDataSource);
    }
}
function _registerMultiQueryConfigureParametersPage(factory, callbacks) {
    overrideSqlDataSourceWizardPage(factory, external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage, {
        create: () => {
            return new MultiQueryConfigureParametersPage(callbacks.createSqlDataSourceInfo, undefined, QBRequestWrapper);
        }
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/setReportTitlePage.js





class SetReportTitlePage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this.reportTitle = external_ko_namespaceObject.observable('');
    }
    initialize(data) {
        this.reportTitle(data.reportTitle ? data.reportTitle : '');
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    canNext() {
        return false;
    }
    canFinish() {
        return true;
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            reportTitle: this.reportTitle()
        }).promise();
    }
}
function _registerSetReportTitlePage(factory) {
    factory.registerMetadata(ReportWizardPageId.SetReportTitlePage, {
        create: () => new SetReportTitlePage(),
        getState: (state) => state,
        setState: (data, state) => state.reportTitle = data.reportTitle,
        resetState: (state, defaultState) => state.reportTitle = defaultState.reportTitle,
        template: 'dxrd-page-reportTitle',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('We have all the information needed to process the report.', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportComplete_Description')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/reportWizard.js






















class ReportWizard extends external_DevExpress_Analytics_Wizard_namespaceObject.PopupWizard {
    _callBeforeFinishHandler(state, wizardModel) { }
    _callAfterFinishHandler(state, result) {
        this.events.call('afterFinish', { state: state, wizardResult: result });
    }
    constructor(pageFactory, _reportWizardOptions) {
        super(pageFactory, _reportWizardOptions.callbacks.finishCallback);
        this._reportWizardOptions = _reportWizardOptions;
        this._requestModelType = MasterDetailRequestModel;
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Wizard', 'ASPxReportsStringId.ReportDesigner_Wizard_Header');
        this.height(_masterDetailWizardHeight);
        this.width(_masterDetailWizardWidth);
        this._extendCssClass = 'dxrd-report-wizard dxrd-master-detail-report-wizard';
    }
    initialize(state = createReportWizardState()) {
        if (this._reportWizardOptions.dataSources().length === 1 && !this._reportWizardOptions.canCreateDataSource) {
            state.dataSource = _convertToStateDataSource(this._reportWizardOptions.dataSources()[0]);
        }
        if (this._reportWizardOptions.sqlDataSourceAvailable || !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(state.sqlDataSourceWizard)) {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Sql;
        }
        else if (this._reportWizardOptions.jsonDataSourceAvailable || state.jsonDataSourceWizard.jsonSource) {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Json;
        }
        else {
            state.dataSourceType = external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.NoData;
        }
        super.initialize(state, (pageFactory, stateManager) => new ReportWizardPageIterator(pageFactory, stateManager, this._reportWizardOptions));
    }
    start(finishCallback) {
        if (finishCallback)
            this['_finishCallback'] = finishCallback;
        super.start();
    }
}
class ReportWizardPageIterator extends external_DevExpress_Analytics_Wizard_namespaceObject.MultiQueryDataSourceWizardPageIterator {
    constructor(pagesFactory, stateManager, _reportWizardOptions) {
        super(pagesFactory, stateManager, _reportWizardOptions);
        this._reportWizardOptions = _reportWizardOptions;
    }
    getNextPageId(pageId) {
        if (!pageId)
            return ReportWizardPageId.SelectReportTypePage;
        if (pageId === ReportWizardPageId.SelectReportTypePage && this._getCurrentState().reportType === ReportType.Label) {
            return ReportWizardPageId.SelectLabelTypePage;
        }
        else if (pageId === ReportWizardPageId.SelectLabelTypePage) {
            return ReportWizardPageId.CustomizeLabelPage;
        }
        else if (pageId === ReportWizardPageId.SelectReportTypePage && this._getCurrentState().dataSource && !this._reportWizardOptions.canCreateDataSource) {
            return ReportWizardPageId.SelectDataMembersPage;
        }
        else if (pageId === ReportWizardPageId.SelectReportTypePage && this._reportWizardOptions.dataSources().length === 0) {
            return super.getNextPageId();
        }
        else if (pageId === ReportWizardPageId.SelectReportTypePage) {
            return ReportWizardPageId.ChooseAvailableDataSourcePage;
        }
        else if (pageId === ReportWizardPageId.ChooseAvailableDataSourcePage && !this._getCurrentState().dataSource) {
            return super.getNextPageId();
        }
        else if (super.getNextPageId(pageId)) {
            return super.getNextPageId(pageId);
        }
        else if (pageId === ReportWizardPageId.ChooseAvailableDataSourcePage && this._getCurrentState().dataSource) {
            return ReportWizardPageId.SelectDataMembersPage;
        }
        else if ((pageId === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.MultiQueryConfigurePage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.JsonDataSourceWizardPageId.ChooseJsonSchemaPage)) {
            return ReportWizardPageId.SelectDataMembersPage;
        }
        else if (pageId === ReportWizardPageId.SelectDataMembersPage && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(this.stateManager.getCurrentState().masterDetailInfoCollection) && this.stateManager.getCurrentState().masterDetailInfoCollection.some(item => item.checked !== false)) {
            return ReportWizardPageId.AddGroupingLevelPage;
        }
        else if (pageId === ReportWizardPageId.AddGroupingLevelPage && !(0,external_DevExpress_Analytics_Internal_namespaceObject.isEmptyObject)(this._getCurrentState().masterDetailSummaryOptionsColumns)) {
            return ReportWizardPageId.ChooseSummaryOptionsPage;
        }
        else if (pageId === ReportWizardPageId.AddGroupingLevelPage || pageId === ReportWizardPageId.ChooseSummaryOptionsPage) {
            return ReportWizardPageId.ConfigureReportPageSettingsPage;
        }
        else if (pageId === ReportWizardPageId.ConfigureReportPageSettingsPage) {
            return ReportWizardPageId.ChooseReportColorSchemePage;
        }
        else if (pageId === ReportWizardPageId.ChooseReportColorSchemePage) {
            return ReportWizardPageId.SetReportTitlePage;
        }
    }
}
function _registerCommonReportWizardPages(factory, reportWizardOptions) {
    _registerSelectLabelTypePage(factory);
    _registerCustomizeLabelPage(factory);
    _registerChooseAvailableDataSourcePage(factory, reportWizardOptions);
    _registerSetReportTitlePage(factory);
    (0,external_DevExpress_Analytics_Wizard_namespaceObject._registerMultiQueryDataSourcePages)(factory, reportWizardOptions);
    _registerChooseJsonSchemaPage(factory, reportWizardOptions.callbacks);
    _registerConfigureMasterDetailRelationshipsPage(factory, reportWizardOptions.callbacks);
    _registerMultiQueryConfigurePage(factory, reportWizardOptions);
    _registerMultiQueryConfigureParametersPage(factory, reportWizardOptions.callbacks);
}
function _registerReportWizardPages(factory, reportWizardOptions) {
    _registerCommonReportWizardPages(factory, reportWizardOptions);
    _registerSelectReportTypePage(factory, {
        showVertical: false,
        canCreateDatabound: () => reportWizardOptions.dataSources().length > 0 ||
            reportWizardOptions.connectionStrings.sql().length > 0 ||
            reportWizardOptions.connectionStrings.json().length > 0 ||
            (reportWizardOptions.allowCreateNewJsonConnection && reportWizardOptions.wizardSettings.enableJsonDataSource),
        reportTemplates: reportWizardOptions.reportTemplates,
        searchBoxVisibilityMode: reportWizardOptions.searchBoxVisibilityMode
    });
    _registerSelectDataMembersPage(factory, reportWizardOptions);
    _registerAddGroupingLevelPage(factory);
    _registerChooseSummaryOptionsPage(factory);
    _registerConfigureReportPageSettingsPage(factory);
    _registerChooseReportColorSchemePage(factory);
}
function _createReportWizard(reportWizardOptions) {
    const factory = new external_DevExpress_Analytics_Wizard_namespaceObject.PageFactory();
    _registerReportWizardPages(factory, reportWizardOptions);
    return new ReportWizard(factory, reportWizardOptions);
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_legacyReportRequestModel.js



class LegacyReportRequestModel extends CommonRequestModel {
    constructor(state) {
        super(state);
        if (state.reportType === ReportType.Standard) {
            this.AdjustFieldWidth = state.fitFieldsToPage;
            if (state.fields.length) {
                this.Columns = state.fields.map((value) => { return value.name; });
                this.ColumnInfo = state.fields.map(value => {
                    return {
                        Name: value.name,
                        DisplayName: value.displayName,
                        TypeSpecifics: 0
                    };
                });
            }
            else {
                this.Columns = null;
                this.ColumnInfo = null;
            }
            this.DataSourceName = null;
            this.GroupingLevels = state.groups;
            this.Layout = state.layout;
            this.Portrait = state.portrait;
            this.ReportStyleId = state.style;
            this.SummaryOptions = (state.summaryOptions || []).map((item) => {
                return {
                    ColumnName: item.columnName,
                    Flags: item.flags
                };
            });
            if (state.pageSetup) {
                this.PaperKind = PaperKind[state.pageSetup.paperKind];
                this.PaperSize = {
                    width: state.pageSetup.width,
                    height: state.pageSetup.height
                };
                this.Margins = {
                    left: state.pageSetup.marginLeft,
                    right: state.pageSetup.marginRight,
                    top: state.pageSetup.marginTop,
                    bottom: state.pageSetup.marginBottom
                };
                this.Unit = state.pageSetup.unit;
            }
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/legacy/addGroupingLevelPage.js







class LegacyAddGroupingLevelPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this.fields = new ListViewModel((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Available fields', 'ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields'));
        this.groups = new ListViewModel((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Groups', 'ASPxReportsStringId.ReportDesigner_Groups'));
        this.addNewGroup = () => {
            if (this.isCreateGroupEnabled()) {
                this.groups.add({ fields: external_ko_namespaceObject.observableArray([this.fields.activeItem]) });
                this.fields.removeActiveItem();
            }
        };
        this.appendFieldsToGroup = () => {
            if (this.isAppendToGroupEnabled()) {
                this.groups.activeItem.fields.push(this.fields.activeItem);
                this.fields.removeActiveItem();
            }
        };
        this.removeGroup = () => {
            if (this.isRemoveGroupEnabled()) {
                this.fields.addRange(this.groups.activeItem.fields());
                this.groups.removeActiveItem();
            }
        };
        this.moveUp = () => {
            this.groups.moveUp();
        };
        this.moveDown = () => {
            this.groups.moveDown();
        };
        this.fieldDblClick = (field) => {
            this.fields.activeItem = field;
            this.addNewGroup();
        };
        this.fieldClick = (e) => {
            this.fields.activeItem = e.itemData;
        };
        this.groupDblClick = (group) => {
            this.groups.activeItem = group;
            this.removeGroup();
        };
        this.groupClick = (e) => {
            this.groups.activeItem = e.itemData;
        };
    }
    canFinish() {
        return true;
    }
    isCreateGroupEnabled() {
        return !!this.fields.activeItem;
    }
    isAppendToGroupEnabled() {
        return this.fields.activeItem && this.groups.activeItem && this.groups.activeItem.fields().length > 0;
    }
    isRemoveGroupEnabled() {
        return this.groups.activeItem && this.groups.activeItem.fields().length > 0;
    }
    isMoveUpEnabled() {
        return this.groups.isMoveUpEnabled();
    }
    isMoveDownEnabled() {
        return this.groups.isMoveDownEnabled();
    }
    initialize(state) {
        this.initialFields = state.fields || [];
        const fields = external_ko_namespaceObject.observableArray((state.fields || []).map((value, index, array) => { return value.displayName; }));
        this.groups.setItems((state.groups || []).map((value) => {
            fields.removeAll(value);
            return { fields: external_ko_namespaceObject.observableArray(value) };
        }));
        this.fields.setItems(fields());
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        const groups = this.groups.items.map((item) => {
            return item.fields();
        });
        const summaryColumns = [];
        if (!this.groups.isEmpty) {
            this.fields.items.forEach((fieldName) => {
                const field = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.initialFields, 'displayName', fieldName);
                if (field.specifics && ['integer', 'float', 'date'].indexOf(field.specifics.toLowerCase()) > -1) {
                    summaryColumns.push(field);
                }
            });
            summaryColumns.sort((a, b) => { return a.name.localeCompare(b.name); });
        }
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            groups: groups,
            summaryOptionsColumns: summaryColumns
        }).promise();
    }
}
function _registerLegacyAddGroupingLevelPage(factory) {
    factory.registerMetadata(LegacyReportWizardPageId.AddGroupingLevelPage, {
        setState: (data, state) => {
            state.groups = data.groups;
            state.summaryOptionsColumns = data.summaryOptionsColumns;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.groups = defaultState.groups;
            state.summaryOptionsColumns = defaultState.summaryOptionsColumns;
        },
        create: () => {
            return new LegacyAddGroupingLevelPage();
        },
        template: 'dxrd-page-groups',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Create multiple groups, each with a single field value, or define several fields in the same group.', 'ASPxReportsStringId.ReportDesigner_Wizard_CreateGroups')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/layoutPageUtils.js

var ReportLayout;
(function (ReportLayout) {
    ReportLayout[ReportLayout["stepped"] = 0] = "stepped";
    ReportLayout[ReportLayout["block"] = 1] = "block";
    ReportLayout[ReportLayout["outline1"] = 2] = "outline1";
    ReportLayout[ReportLayout["outline2"] = 3] = "outline2";
    ReportLayout[ReportLayout["alignLeft1"] = 4] = "alignLeft1";
    ReportLayout[ReportLayout["alignLeft2"] = 5] = "alignLeft2";
    ReportLayout[ReportLayout["columnar"] = 6] = "columnar";
    ReportLayout[ReportLayout["tabular"] = 7] = "tabular";
    ReportLayout[ReportLayout["justified"] = 8] = "justified";
})(ReportLayout || (ReportLayout = {}));
class LayoutTypeItem {
    constructor(textValue, textID, layoutType, margin) {
        this.layoutType = layoutType;
        this.margin = margin;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(textValue, textID);
    }
    get imageClassName() {
        return 'dxrd-report-layout-type-image-' + ReportLayout[this.layoutType].toLowerCase();
    }
}
var PageOrientation;
(function (PageOrientation) {
    PageOrientation[PageOrientation["Portrait"] = 0] = "Portrait";
    PageOrientation[PageOrientation["Landscape"] = 1] = "Landscape";
})(PageOrientation || (PageOrientation = {}));
class PageOrientationItem {
    constructor(textValue, textID, orientation) {
        this.orientation = orientation;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(textValue, textID);
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/legacy/chooseReportLayoutPage.js







class LegacyChooseReportLayoutPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this._isGroupedReport = external_ko_namespaceObject.observable(false);
        this._reportLayoutTypes = [
            new LayoutTypeItem('Columnar', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Columnar', ReportLayout.columnar, 18),
            new LayoutTypeItem('Tabular', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Tabular', ReportLayout.tabular, 18),
            new LayoutTypeItem('Justified', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Justified', ReportLayout.justified, 18)
        ];
        this._groupedReportLayoutsTypes = [
            new LayoutTypeItem('Stepped', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Stepped', ReportLayout.stepped, 1),
            new LayoutTypeItem('Outline 1', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline1', ReportLayout.outline1, 1),
            new LayoutTypeItem('Outline 2', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Outline2', ReportLayout.outline2, 1),
            new LayoutTypeItem('Align Left 1', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft1', ReportLayout.alignLeft1, 1),
            new LayoutTypeItem('Align Left 2', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AlignLeft2', ReportLayout.alignLeft2, 1)
        ];
        this.toggleFitFieldsToPage = () => {
            this.fitFieldsToPage(!this.fitFieldsToPage());
        };
        this.selectedLayoutType = external_ko_namespaceObject.observable(null);
        this.fitFieldsToPage = external_ko_namespaceObject.observable(true);
        this.pageOrientationItems = [
            new PageOrientationItem('Portrait', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait', PageOrientation.Portrait),
            new PageOrientationItem('Landscape', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape', PageOrientation.Landscape)
        ];
        this.selectedPageOrientation = external_ko_namespaceObject.observable(this.pageOrientationItems[0]);
        this.layoutTypeItems = external_ko_namespaceObject.pureComputed(() => {
            const items = this._isGroupedReport() ? this._groupedReportLayoutsTypes : this._reportLayoutTypes;
            this.selectedLayoutType(items[0]);
            return items;
        });
        this.layoutTypeItemClick = (item) => {
            this.selectedLayoutType(item);
        };
        this.isSelected = (item) => {
            return this.selectedLayoutType() === item;
        };
    }
    canFinish() {
        return true;
    }
    initialize(state) {
        this._isGroupedReport(state.groups.length > 0);
        let selectedLayoutType = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.layoutTypeItems(), 'layoutType', state.layout);
        if (!selectedLayoutType) {
            selectedLayoutType = (0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.layoutTypeItems(), 'layoutType', this._isGroupedReport() ? ReportLayout.stepped : ReportLayout.columnar);
        }
        this.selectedLayoutType(selectedLayoutType);
        this.fitFieldsToPage(state.fitFieldsToPage === undefined ? true : state.fitFieldsToPage);
        this.selectedPageOrientation((state.portrait === undefined || state.portrait) ? this.pageOrientationItems[0] : this.pageOrientationItems[1]);
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            layout: this.selectedLayoutType().layoutType,
            fitFieldsToPage: this.fitFieldsToPage(),
            portrait: this.selectedPageOrientation().orientation === PageOrientation.Portrait
        }).promise();
    }
}
function _registerLegacyChooseReportLayoutPage(factory) {
    factory.registerMetadata(LegacyReportWizardPageId.ChooseReportLayoutPage, {
        setState: (data, state) => {
            state.fitFieldsToPage = data.fitFieldsToPage;
            state.layout = data.layout;
            state.portrait = data.portrait;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.fitFieldsToPage = defaultState.fitFieldsToPage;
            state.layout = defaultState.layout;
            state.portrait = defaultState.portrait;
        },
        create: () => {
            return new LegacyChooseReportLayoutPage();
        },
        template: 'dxrd-page-reportLayoutType',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The report layout specifies the manner in which selected data fields are arranged on individual pages.', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/reportStylePageUtils.js

var ReportStyle;
(function (ReportStyle) {
    ReportStyle[ReportStyle["Bold"] = 0] = "Bold";
    ReportStyle[ReportStyle["Casual"] = 1] = "Casual";
    ReportStyle[ReportStyle["Compact"] = 2] = "Compact";
    ReportStyle[ReportStyle["Corporate"] = 3] = "Corporate";
    ReportStyle[ReportStyle["Formal"] = 4] = "Formal";
})(ReportStyle || (ReportStyle = {}));
class ReportStyleItem {
    constructor(textDefault, textID, reportStyle) {
        this.reportStyle = reportStyle;
        this.text = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(textDefault, textID);
    }
    get className() {
        return 'dxrd-wizard-report-style-image ' + ReportStyle[this.reportStyle].toLowerCase();
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/legacy/chooseReportStylePage.js







class LegacyChooseReportStylePage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this.reportStyleItems = [
            new ReportStyleItem('Bold', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Bold', ReportStyle.Bold),
            new ReportStyleItem('Casual', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Casual', ReportStyle.Casual),
            new ReportStyleItem('Corporate', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Corporate', ReportStyle.Corporate),
            new ReportStyleItem('Compact', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Compact', ReportStyle.Compact),
            new ReportStyleItem('Formal', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Formal', ReportStyle.Formal)
        ];
        this.selectedReportStyle = external_ko_namespaceObject.observable(this.reportStyleItems[0]);
    }
    canFinish() {
        return true;
    }
    initialize(state) {
        this.selectedReportStyle((0,external_DevExpress_Analytics_Internal_namespaceObject.getFirstItemByPropertyValue)(this.reportStyleItems, 'reportStyle', state.style || ReportStyle.Bold));
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            style: this.selectedReportStyle().reportStyle
        }).promise();
    }
}
function _registerLegacyChooseReportStylePage(factory) {
    factory.registerMetadata(LegacyReportWizardPageId.ChooseReportStylePage, {
        setState: (data, state) => {
            state.style = data.style;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.style = defaultState.style;
        },
        create: () => {
            return new LegacyChooseReportStylePage();
        },
        template: 'dxrd-page-reportStyle',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The report style specifies the appearance of your report.', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/internal/_summaryOptionsPageUtils.js

class SummaryOptionsWrapper {
    static _getNumber(value) {
        return value ? 1 : 0;
    }
    constructor(name, displayName) {
        this.avg = external_ko_namespaceObject.observable(false);
        this.count = external_ko_namespaceObject.observable(false);
        this.max = external_ko_namespaceObject.observable(false);
        this.min = external_ko_namespaceObject.observable(false);
        this.sum = external_ko_namespaceObject.observable(false);
        this._name = name;
        this.columnName = displayName;
    }
    getOptions() {
        return {
            columnName: this._name,
            flags: SummaryOptionsWrapper._getNumber(this.sum()) << 0 |
                SummaryOptionsWrapper._getNumber(this.avg()) << 1 |
                SummaryOptionsWrapper._getNumber(this.min()) << 2 |
                SummaryOptionsWrapper._getNumber(this.max()) << 3 |
                SummaryOptionsWrapper._getNumber(this.count()) << 4
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/legacy/chooseSummaryOptionsPage.js






class LegacyChooseSummaryOptionsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor() {
        super(...arguments);
        this._columns = [];
        this.summaryOptions = external_ko_namespaceObject.observableArray([]);
        this.ignoreNullValues = external_ko_namespaceObject.observable(false);
        this.toggleIgnoreNullValues = () => {
            this.ignoreNullValues(!this.ignoreNullValues());
        };
    }
    canFinish() {
        return true;
    }
    initialize(state) {
        this.ignoreNullValues(state.ignoreNullValuesForSummary);
        const changes = external_ko_namespaceObject.utils.compareArrays(state.summaryOptionsColumns || [], this._columns);
        const isColumnsChanged = changes.some((change, index, array) => { return change.status != 'retained'; });
        if (isColumnsChanged) {
            this._columns = state.summaryOptionsColumns || [];
            this.summaryOptions.removeAll();
            this._columns.forEach((column) => {
                this.summaryOptions.push(new SummaryOptionsWrapper(column.name, column.displayName));
            });
        }
        this.summaryOptions.notifySubscribers();
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            ignoreNullValuesForSummary: this.ignoreNullValues(),
            summaryOptions: this.summaryOptions().map((value) => { return value.getOptions(); })
        }).promise();
    }
}
function _registerLegacyChooseSummaryOptionsPage(factory) {
    factory.registerMetadata(LegacyReportWizardPageId.ChooseSummaryOptionsPage, {
        setState: (data, state) => {
            state.summaryOptions = data.summaryOptions;
            state.ignoreNullValuesForSummary = data.ignoreNullValuesForSummary;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.summaryOptions = defaultState.summaryOptions;
            state.ignoreNullValuesForSummary = defaultState.ignoreNullValuesForSummary;
        },
        create: () => {
            return new LegacyChooseSummaryOptionsPage();
        },
        template: 'dxrd-page-summaryOptions',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('What summary function would you like to calculate?', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/legacy/selectColumnsPage.js






class LegacySelectColumnsPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    constructor(getFieldListItems) {
        super();
        this._selectedPath = null;
        this._fields = [];
        this.select = () => {
            this.selectedFields.add(this.availableFields.activeItem);
            this.availableFields.removeActiveItem();
        };
        this.selectAll = () => {
            this.selectedFields.setItems(this._fields.slice(0));
            this.availableFields.removeAll();
        };
        this.unselect = () => {
            this.availableFields.add(this.selectedFields.activeItem);
            this.selectedFields.removeActiveItem();
        };
        this.unselectAll = () => {
            this.availableFields.setItems(this._fields.slice(0));
            this.selectedFields.removeAll();
        };
        this.availableFieldDblClick = (field) => {
            this.availableFields.activeItem = field;
            this.select();
        };
        this.availableFieldClick = (e) => {
            this.availableFields.activeItem = e.itemData;
        };
        this.selectedFieldDblClick = (field) => {
            this.selectedFields.activeItem = field;
            this.unselect();
        };
        this.selectedFieldClick = (e) => {
            this.selectedFields.activeItem = e.itemData;
        };
        this.availableFields = new ListViewModel((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Available fields', 'ASPxReportsStringId.ReportDesigner_Wizard_AvailableFields'));
        this.selectedFields = new ListViewModel((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Selected fields', 'ASPxReportsStringId.ReportDesigner_Wizard_SelectedFields'));
        this._fieldListsCallback = getFieldListItems;
    }
    canFinish() {
        return true;
    }
    canNext() {
        return !this.selectedFields.isEmpty;
    }
    selectedPath() {
        return this._selectedPath;
    }
    reset() {
        this._selectedPath = null;
    }
    initialize(state) {
        this.selectedFields.setItems(state.fields || []);
        if (this._selectedPath != state.dataMemberPath) {
            return this._fieldListsCallback(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(state.dataMemberPath), _restoreDataSourceFromState(state.newDataSource || state.dataSource))
                .done((fields) => {
                this._fields = fields.filter((item) => {
                    return (item.specifics !== 'List' && item.specifics !== 'ListSource' && item.isList !== true);
                });
                this._selectedPath = state.dataMemberPath;
                this.availableFields.setItems(this._fields.filter((value) => {
                    return this.selectedFields.items.indexOf(value) === -1;
                }));
            });
        }
        else {
            this.availableFields.setItems(this._fields.filter((value) => {
                return this.selectedFields.items.indexOf(value) === -1;
            }));
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
        }
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            fields: this.selectedFields.items
        }).promise();
    }
    isSelectEnable() {
        return !!this.availableFields.activeItem;
    }
    isUnselectEnable() {
        return !!this.selectedFields.activeItem;
    }
}
function _registerLegacySelectColumnsPage(factory, fieldListItemsCallback) {
    factory.registerMetadata(LegacyReportWizardPageId.SelectColumnsPage, {
        setState: (data, state) => {
            state.fields = data.fields;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.fields = defaultState.fields;
        },
        create: () => {
            return new LegacySelectColumnsPage(fieldListItemsCallback);
        },
        template: 'dxrd-page-columns',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Select the columns you want to display within your report.', 'ASPxReportsStringId.ReportDesigner_Wizard_ChooseColumns')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/pages/legacy/selectDataMemberPage.js









class DataMemberPageTreeListController extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.DataMemberTreeListController {
    canSelect(value) {
        return (this.hasItems(value.data) && !!value.path) || value.data.specifics === 'none';
    }
}
class LegacyChooseDataMemberPage extends external_DevExpress_Analytics_Wizard_namespaceObject.WizardPageBase {
    _wrapFieldListCallback(itemsCallback) {
        return (pathRequest) => {
            if (this._hideDataMemberSubItems) {
                const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
                deferred.resolve([]);
                return deferred.promise();
            }
            else {
                return itemsCallback(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(this.dataSourcePath + '.' + pathRequest.fullPath), this._dataSource);
            }
        };
    }
    get dataSourcePath() {
        return (this._dataSource.id || this._dataSource.ref);
    }
    _beginInternal(state) {
        this._dataSource = _restoreDataSourceFromState(state.newDataSource || state.dataSource);
        if (!state.dataMemberPath) {
            return this._fieldListCallBack(new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(this.dataSourcePath), this._dataSource).done((fields) => {
                this._selectedPath(null);
                this._rootItems(fields.map((value) => {
                    return {
                        name: value.displayName,
                        id: value.name,
                        specifics: 'List',
                        dataSerializer: null,
                        data: {}
                    };
                }));
            });
        }
        else {
            this._selectedPath(state.dataMemberPath.replace(this.dataSourcePath + '.', ''));
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve().promise();
        }
    }
    constructor(reportWizardOptions) {
        super();
        this._rootItems = external_ko_namespaceObject.observableArray([]);
        this._selectedPath = external_ko_namespaceObject.observable(null);
        this._fieldListCallBack = reportWizardOptions.callbacks.fieldListsCallback;
        this._createSqlDataSourceInfo = reportWizardOptions.callbacks.createSqlDataSourceInfo;
        this._hideDataMemberSubItems = reportWizardOptions.hideDataMemberSubItems;
        this.scrollViewHeight = _masterDetailScrollViewHeight;
        this.fieldListModel = {
            itemsProvider: new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(this._wrapFieldListCallback(this._fieldListCallBack), this._rootItems),
            selectedPath: this._selectedPath,
            treeListController: new DataMemberPageTreeListController()
        };
    }
    canNext() {
        return !!this._selectedPath();
    }
    canFinish() {
        return !!this._selectedPath();
    }
    initialize(state) {
        return this._beginInternal(state);
    }
    commit() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)().resolve({
            dataMemberPath: (0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(this.dataSourcePath, this._selectedPath()),
            dataMemberInfo: this.fieldListModel.treeListController.selectedItem && this.fieldListModel.treeListController.selectedItem.data
        }).promise();
    }
}
function _registerLegacyChooseDataMemberPage(factory, reportWizardOptions) {
    factory.registerMetadata(LegacyReportWizardPageId.ChooseDataMemberPage, {
        setState: (data, state) => {
            state.dataMemberInfo = data.dataMemberInfo;
            state.dataMemberPath = data.dataMemberPath;
        },
        getState: (state) => {
            return state;
        },
        resetState: (state, defaultState) => {
            state.dataMemberInfo = defaultState.dataMemberInfo;
            state.dataMemberPath = defaultState.dataMemberPath;
        },
        create: () => {
            return new LegacyChooseDataMemberPage(reportWizardOptions);
        },
        template: 'dxrd-page-dataMember',
        description: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The table or view you choose determines wich columns will be available in your report.', 'ASPxReportsStringId.ReportDesigner_Wizard_ChooseDataMember')
    });
}

;// ./node_modules/devexpress-reporting/designer/wizard/legacyReportWizard.js














class LegacyReportWizard extends external_DevExpress_Analytics_Wizard_namespaceObject.PopupWizard {
    _callBeforeFinishHandler(state, wizardModel) { }
    _callAfterFinishHandler(state, result) {
        this.events.call('afterFinish', { state: state, wizardResult: result });
    }
    constructor(pageFactory, _reportWizardOptions) {
        super(pageFactory, _reportWizardOptions.callbacks.finishCallback);
        this._reportWizardOptions = _reportWizardOptions;
        this._requestModelType = LegacyReportRequestModel;
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Report Wizard', 'ASPxReportsStringId.ReportDesigner_Wizard_Header');
    }
    initialize(state = createReportWizardState()) {
        super.initialize(state, (factory, stateManager) => new LegacyReportWizardPageIterator(factory, stateManager, this._reportWizardOptions));
    }
    start(finishCallback) {
        if (finishCallback)
            this['_finishCallback'] = finishCallback;
        super.start();
    }
}
class LegacyReportWizardPageIterator extends external_DevExpress_Analytics_Wizard_namespaceObject.MultiQueryDataSourceWizardPageIterator {
    constructor(pageFactory, stateManager, reportWizardOptions) {
        super(pageFactory, stateManager, reportWizardOptions);
    }
    getNextPageId(pageId) {
        if (!pageId)
            return ReportWizardPageId.SelectReportTypePage;
        if (pageId === ReportWizardPageId.SelectReportTypePage && this._getCurrentState().reportType === ReportType.Label) {
            return ReportWizardPageId.SelectLabelTypePage;
        }
        else if (pageId === ReportWizardPageId.SelectLabelTypePage) {
            return ReportWizardPageId.CustomizeLabelPage;
        }
        else if (pageId === ReportWizardPageId.SelectReportTypePage && (this._getCurrentState().reportType === ReportType.Standard)) {
            return ReportWizardPageId.ChooseAvailableDataSourcePage;
        }
        else if (pageId === ReportWizardPageId.ChooseAvailableDataSourcePage && !this._getCurrentState().dataSource) {
            return external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.ChooseConnectionPage;
        }
        else if (super.getNextPageId(pageId)) {
            return super.getNextPageId(pageId);
        }
        else if (pageId === ReportWizardPageId.ChooseAvailableDataSourcePage && this._getCurrentState().dataSource) {
            return LegacyReportWizardPageId.ChooseDataMemberPage;
        }
        else if (pageId === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.MultiQueryConfigurePage ||
            pageId === external_DevExpress_Analytics_Wizard_namespaceObject.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage) {
            return LegacyReportWizardPageId.ChooseDataMemberPage;
        }
        else if (pageId === LegacyReportWizardPageId.ChooseDataMemberPage) {
            return LegacyReportWizardPageId.SelectColumnsPage;
        }
        else if (pageId === LegacyReportWizardPageId.SelectColumnsPage) {
            return LegacyReportWizardPageId.AddGroupingLevelPage;
        }
        else if (pageId === LegacyReportWizardPageId.AddGroupingLevelPage && this._getCurrentState().summaryOptionsColumns.length > 0) {
            return LegacyReportWizardPageId.ChooseSummaryOptionsPage;
        }
        else if (pageId === LegacyReportWizardPageId.ChooseSummaryOptionsPage || (pageId === LegacyReportWizardPageId.AddGroupingLevelPage && this._getCurrentState().summaryOptionsColumns.length == 0)) {
            return LegacyReportWizardPageId.ChooseReportLayoutPage;
        }
        else if (pageId === LegacyReportWizardPageId.ChooseReportLayoutPage) {
            return LegacyReportWizardPageId.ChooseReportStylePage;
        }
        else if (pageId === LegacyReportWizardPageId.ChooseReportStylePage) {
            return ReportWizardPageId.SetReportTitlePage;
        }
    }
}
function _createLegacyReportWizard(reportWizardOptions) {
    const factory = new external_DevExpress_Analytics_Wizard_namespaceObject.PageFactory();
    _registerCommonReportWizardPages(factory, reportWizardOptions);
    _registerSelectReportTypePage(factory, {
        showVertical: false,
        canCreateDatabound: () => reportWizardOptions.dataSources().length > 0 ||
            reportWizardOptions.connectionStrings.sql().length > 0,
        reportTemplates: reportWizardOptions.reportTemplates,
        searchBoxVisibilityMode: reportWizardOptions.searchBoxVisibilityMode
    });
    _registerLegacyChooseDataMemberPage(factory, reportWizardOptions);
    _registerLegacySelectColumnsPage(factory, reportWizardOptions.callbacks.fieldListsCallback);
    _registerLegacyAddGroupingLevelPage(factory);
    _registerLegacyChooseSummaryOptionsPage(factory);
    _registerLegacyChooseReportLayoutPage(factory);
    _registerLegacyChooseReportStylePage(factory);
    return new LegacyReportWizard(factory, reportWizardOptions);
}

;// ./node_modules/devexpress-reporting/designer/wizard/_reportWizardCreating.js



function _reportWizardCreating_createReportWizard(reportWizardOptions) {
    if (reportWizardOptions.wizardSettings.useFullscreenWizard && reportWizardOptions.wizardSettings.useMasterDetailWizard)
        return _createFullscreenReportWizard(reportWizardOptions);
    else if (reportWizardOptions.wizardSettings.useMasterDetailWizard)
        return _createReportWizard(reportWizardOptions);
    else
        return _createLegacyReportWizard(reportWizardOptions);
}

;// ./node_modules/devexpress-reporting/designer/tools/dialogs/reportDialogBase.js



class ReportDialogBase extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this.tab(null);
    }
    show(tab) {
        if (tab) {
            this.tab(tab);
            this.model().setUrl(tab.context().url());
        }
        this.model().onShow(tab);
        this.visible(true);
    }
    customize(template, model) {
        this.template(template);
        this.model(model);
        this.buttons = model.popupButtons;
    }
    constructor() {
        super();
        this._visible = external_ko_namespaceObject.observable(false);
        this.width = external_ko_namespaceObject.observable(690);
        this.height = external_ko_namespaceObject.observable(420);
        this.template = external_ko_namespaceObject.observable('');
        this.model = external_ko_namespaceObject.observable(null);
        this.tab = external_ko_namespaceObject.observable(null);
        this.disabled = external_ko_namespaceObject.observable(false);
        this.visible = external_ko_namespaceObject.computed({
            read: () => {
                return this._visible();
            },
            write: (newVal) => {
                if (this.disabled())
                    return;
                this._visible(newVal);
                if (!newVal)
                    this.tab(null);
            }
        });
        this.container = (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(element);
        this._disposables.push(this.visible);
    }
    cancel() {
        this.visible(false);
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/dialogs/openReportDialog.js





class OpenReportDialogModelBase {
    constructor(popup, urls) {
        this.urls = urls;
        this.searchValue = external_ko_namespaceObject.observable('');
        this.searchPlaceholder = () => (0,external_DevExpress_Analytics_Internal_namespaceObject.searchPlaceholder)();
        this.reportUrl = external_ko_namespaceObject.observable('');
        this.noDataText = (0,external_DevExpress_Analytics_Internal_namespaceObject.noDataText)();
        const self = this;
        this.onDblClick = url => popup.open(url);
        this.popupButtons = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Open', 'ASPxReportsStringId.SidePanel_Open'), type: 'default', stylingMode: 'contained', disabled: popup.disabled, onClick: function () {
                        popup.open(self.reportUrl());
                    }
                }, disabled: external_ko_namespaceObject.pureComputed(() => !this.reportUrl())
            },
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), type: 'normal', stylingMode: 'contained', disabled: popup.disabled, onClick: function () {
                        popup.cancel();
                    }
                }
            }
        ];
    }
    onShow(tab) {
        const self = this;
        this.searchValue('');
        ReportStorageWeb.getUrls().done((result) => { self.urls(result); });
    }
    getUrl() {
        return this.reportUrl();
    }
    setUrl(url) {
        this.reportUrl(url);
    }
}
class OpenReportDialog extends ReportDialogBase {
    open(url) {
        this.disabled(true);
        this.navigateByReports.addTab(null, external_ko_namespaceObject.observable(url)).done((x) => {
            this.disabled(false);
            this.visible(false);
        }).fail(() => this.disabled(false));
    }
    constructor(subreports, navigateByReports, callbacks) {
        super();
        this.title = 'Open Report';
        this.onOpening = (e) => { callbacks.reportOpening && callbacks.reportOpening(e); };
        this.onOpened = (e) => { callbacks.reportOpened && callbacks.reportOpened(e); };
        this.navigateByReports = navigateByReports;
        this.customize('dxrd-openreport-dialog-content', new OpenReportDialogModelBase(this, subreports));
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Open Report', 'ReportStringId.RibbonXRDesign_OpenFile_STipTitle');
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/dialogs/saveAsReportDialog.js






class SaveAsReportDialogModelBase {
    onShow(tab) {
        const self = this;
        ReportStorageWeb.getUrls().done((result) => { self.urls(result); });
        const displayName = (this.urls() || []).filter((item) => { return item.Key === this.reportUrl(); })[0];
        this.reportName(displayName && displayName['Value'] || tab.displayName());
    }
    constructor(popup, urls) {
        this.noDataText = (0,external_DevExpress_Analytics_Internal_namespaceObject.noDataText)();
        this.reportNamePlaceholder = () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Enter a report name to save...', 'ASPxReportsStringId.ReportDesigner_SaveAs_NamePlaceholder');
        this.urls = urls;
        this.reportUrl = external_ko_namespaceObject.observable('');
        this.reportName = external_ko_namespaceObject.observable('');
        this.onDblClick = url => popup.save(url);
        const self = this;
        this.popupButtons = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Save', 'AnalyticsCoreStringId.MenuButtons_Save'), type: 'default', stylingMode: 'contained', disabled: external_ko_namespaceObject.computed(() => { return !self.reportName() || popup.disabled(); }), onClick: function () {
                        popup.save(self.reportName());
                    }
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { disabled: popup.disabled, text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), type: 'normal', stylingMode: 'contained', onClick: function () { popup.cancel(); } } }
        ];
    }
    getUrl() {
        return this.reportUrl();
    }
    setUrl(url) {
        this.reportUrl(url);
    }
}
class SaveAsReportDialog extends ReportDialogBase {
    show(tab) {
        this.closeAfterSave(false);
        super.show(tab);
    }
    constructor(subreports, callbacks) {
        super();
        this.closeAfterSave = external_ko_namespaceObject.observable(false);
        this.title = 'Save Report';
        this.onSaving = (e) => { callbacks.reportSaving && callbacks.reportSaving(e); };
        this.onSaved = (e) => { callbacks.reportSaved && callbacks.reportSaved(e); };
        this.template('dxrd-savereport-dialog-content');
        this.customize('dxrd-savereport-dialog-content', new SaveAsReportDialogModelBase(this, subreports));
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Save Report', 'ReportStringId.RibbonXRDesign_SaveFile_STipTitle');
    }
    save(url) {
        const self = this;
        if (reportStorageWebIsRegister()) {
            self.tab().context().report.displayNameObject(url);
            const data = self.tab().context().report.serialize();
            const args = { report: self.tab().context().report, url: url, cancel: false, dialog: this };
            self.onSaving(args);
            if (args.cancel) {
                return;
            }
            self.disabled(true);
            ReportStorageWeb.setNewData(data, url)
                .done(function (result) {
                self.onSaved({ report: self.tab().context().report, url: result });
                const url = result;
                self.tab().context().url(result);
                self.tab().isDirty(false);
                (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The report has been successfully saved.', 'ASPxReportsStringId.ReportDesigner_SaveReport_Message_OK'), external_DevExpress_Analytics_Internal_namespaceObject.NotifyType.success);
                if (self.closeAfterSave()) {
                    self.tab().close.resolve();
                }
                ReportStorageWeb.getUrls().done((result) => { self.model()['urls'] && self.model()['urls'](result); });
                self.disabled(false);
                self.visible(false);
            }).fail(() => {
                self.disabled(false);
            });
        }
        else {
            self.tab().context().report.save();
            if (self.closeAfterSave()) {
                self.tab().close.resolve();
            }
            else {
                self.tab().close && self.tab().close.reject();
            }
            this.visible(false);
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/dialogs/saveReportDialog.js





class SaveReportDialogModelBase {
    onShow(tab) {
        this.saveText((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('"{0}" has been changed. Do you want to save changes ?', 'ReportStringId.UD_Msg_MdiReportChanged').replace('{0}', tab.displayName()));
    }
    getUrl() {
        return this.reportUrl();
    }
    setUrl(url) {
        this.reportUrl(url);
    }
    constructor(popup) {
        this.reportUrl = external_ko_namespaceObject.observable('');
        this.saveText = external_ko_namespaceObject.observable('');
        const self = this;
        this.popupButtons = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    disabled: popup.disabled,
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Yes', 'AnalyticsCoreStringId.ParametersPanel_True'), type: 'default', stylingMode: 'contained', onClick: function () {
                        popup.save(self.reportUrl());
                    }
                }
            },
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', disabled: popup.disabled, options: {
                    disabled: popup.disabled,
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('No', 'AnalyticsCoreStringId.ParametersPanel_False'), type: 'normal', stylingMode: 'contained', onClick: function () {
                        popup.notSave();
                    }
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { disabled: popup.disabled, type: 'normal', stylingMode: 'contained', text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), onClick: function () { popup.cancel(); } } }
        ];
    }
}
class SaveReportDialog extends ReportDialogBase {
    constructor(saveReportDialog, callbacks) {
        super();
        this.title = 'Save Report';
        this.saveReportDialog = saveReportDialog;
        this.onSaving = (e) => { callbacks.reportSaving && callbacks.reportSaving(e); };
        this.onSaved = (e) => { callbacks.reportSaved && callbacks.reportSaved(e); };
        this.width('auto');
        this.height(260);
        this.customize('dxrd-savereport-dialog-content-light', new SaveReportDialogModelBase(this));
        this.title = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Save Report', 'ReportStringId.RibbonXRDesign_SaveFile_STipTitle');
    }
    save(url) {
        const self = this;
        if (reportStorageWebIsRegister()) {
            if (url) {
                const args = { report: self.tab().context().report, url: url, cancel: false };
                self.onSaving(args);
                if (args.cancel) {
                    self.tab().close && self.tab().close.reject();
                    return;
                }
                this.disabled(true);
                ReportStorageWeb.setData(self.tab().context().report.serialize(), url)
                    .done(function (jsonResult) {
                    self.onSaved({ report: self.tab().context().report, url: url });
                    self.tab().undoEngine.clearHistory();
                    self.tab().close && self.tab().close.resolve();
                    self.disabled(false);
                    self.visible(false);
                }).fail(() => {
                    self.disabled(false);
                });
            }
            else {
                self.saveReportDialog.show(self.tab());
                self.saveReportDialog.closeAfterSave(true);
                self.visible(false);
            }
        }
        else {
            self.tab().context().report.save();
            self.tab().close && self.tab().close.resolve();
        }
    }
    notSave() {
        this.tab().close.resolve();
        this.visible(false);
    }
    cancel() {
        this.tab().close && this.tab().close.reject();
        super.cancel();
    }
}

;// ./node_modules/devexpress-reporting/designer/tools/generator/_settings.js
























class WizardsInitializerSettings {
    _doFinishCallback(data, connections) {
        if (data.predefinedDataSourceName) {
            this.dataSourceActionProvider.addPredifinedDataSource(data.predefinedDataSourceName);
        }
        else if (data.dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Sql) {
            return this.sqlDataSourceEditor.applySqlDataSourceWizardChanges(data);
        }
        else if (data.dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Federation) {
            return this.federationDataSourceEditor.applyFederationDataSourceWizardChanges(data);
        }
        else if (data.dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Json) {
            const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            if (data.jsonDataSourceWizard.jsonSource && data.jsonDataSourceWizard.newConnectionName) {
                this.jsonDataSourceEditor.saveJsonSource(data, connections).
                    done((result) => { deferred.resolve(result); })
                    .fail(() => deferred.reject());
            }
            else {
                this.jsonDataSourceEditor.applyDataSourceWizardChanges(data)
                    .done((result) => { deferred.resolve(result); })
                    .fail(() => deferred.reject());
            }
            return deferred.promise();
        }
        else if (data.dataSourceType === external_DevExpress_Analytics_Wizard_namespaceObject.DataSourceType.Object) {
            const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
            this.objectDataSourceEditor.applyDataSourceWizardChanges(data)
                .done((result) => { deferred.resolve(result); })
                .fail(() => deferred.reject());
        }
        return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve(null).promise();
    }
    _getParameters(model) {
        if (model && model()) {
            return collectAvailableParameters(model().parameters()).map((x) => {
                const obj = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer().serialize(x);
                return { name: obj['@Name'], value: obj['@ValueInfo'], type: x.type() };
            });
        }
        return [];
    }
    _getItemsProviderCallBack(itemsProvider) {
        if (itemsProvider)
            return itemsProvider;
        return null;
    }
    createSqlDataSourceWizard(disableCustomSql, itemsProvider, model) {
        this.dataSourceWizardOptions.callbacks = {
            selectStatement: (connection, queryJSON) => QBRequestWrapper().getSelectStatement(connection, queryJSON),
            finishCallback: data => this._doFinishCallback(data, this.dataSourceWizardOptions.connectionStrings),
            customizeQBInitData: (data) => {
                data.parametersItemsProvider = itemsProvider;
                data.requestWrapper = QBRequestWrapper();
                return data;
            },
            getParameters: () => this._getParameters(model),
            getItemsProviderCallback: () => this._getItemsProviderCallBack(itemsProvider())
        };
        this.dataSourceWizardOptions.disableCustomSql = disableCustomSql;
        this.dataSourceWizard = (0,external_DevExpress_Analytics_Wizard_namespaceObject._createDataSourceWizard)(undefined, this.dataSourceWizardOptions);
        return this.dataSourceWizard;
    }
    createSqlDataSourceEditor(settings) {
        this.federationDataSourceEditor = new FederationDataSourceEditor(settings.dataSourceHelper, settings.dataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider, this.multipleQueriesWizardCallbacks, settings.rtl);
        this.sqlDataSourceEditor = new SqlDataSourceEditor(settings.dataSourceHelper, settings.dataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider, this.multipleQueriesWizardCallbacks);
        this.jsonDataSourceEditor = new JsonDataSourceEditor(settings.dataSourceHelper, settings.dataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider);
        this.objectDataSourceEditor = new ObjectDataSourceEditor(settings.dataSourceHelper, settings.dataSourceWizard, settings.model, settings.undoEngine, settings.fieldListProvider);
        this.dataSourceActionProvider = new DataSourceActions(settings.dataSourceHelper, settings.model, settings.undoEngine, settings.allowEditDataSource, settings.allowRemoveDataSource, settings.fieldListProvider);
    }
    createMultipleQueriesWizardCallbacks(itemsProvider, model, state) {
        const helper = new FieldListDataSourcesHelper();
        const fieldsCallback = (request, dataSource, useCache) => {
            return helper.wrapFieldsCallback(this.callbacks.fieldLists, state, external_ko_namespaceObject.observableArray(dataSource ? [dataSource] : this.multiQueryWizardOptions.dataSources()), useCache ?? true)(request);
        };
        this.multipleQueriesWizardCallbacks = {
            selectStatement: (connection, queryJSON) => QBRequestWrapper().getSelectStatement(connection, queryJSON),
            sqlDataSourceResultSchema: (dataSource) => QBRequestWrapper().rebuildResultSchema(dataSource),
            federationDataSourceResultSchema: (dataSource) => QBRequestWrapper().getFederationResultSchema(dataSource),
            finishCallback: data => this._doFinishCallback(data, this.multiQueryWizardOptions.connectionStrings),
            customQueriesPreset: ReportDataSourceService.getCustomQueriesPreset,
            customizeQBInitData: (data) => {
                data.parametersItemsProvider = itemsProvider;
                data.requestWrapper = QBRequestWrapper();
                return data;
            },
            getParameters: () => this._getParameters(model),
            getItemsProviderCallback: () => this._getItemsProviderCallBack(itemsProvider()),
            fieldListsCallback: fieldsCallback
        };
    }
    createMultiQueryDataSourceWizard(disableCustomSql, multipleQueriesWizardCallbacks = this.multipleQueriesWizardCallbacks, allowCreateNewJsonConnection = false) {
        this.multiQueryWizardOptions.callbacks = multipleQueriesWizardCallbacks;
        this.multiQueryWizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection;
        this.multiQueryWizardOptions.disableCustomSql = disableCustomSql;
        this.multiQueryWizardOptions.getSqlConnectionStrings = () => ReportDataSourceService.getWizardSqlDataConnections();
        this.multiQueryWizardOptions.getJsonConnectionStrings = () => ReportDataSourceService.getWizardJsonDataConnections();
        this.registerMultiQueryDataSourceWizardPages = (factory) => {
            (0,external_DevExpress_Analytics_Wizard_namespaceObject._registerMultiQueryDataSourcePages)(factory, this.multiQueryWizardOptions);
        };
        if (this.reportWizardOptions.wizardSettings.useFullscreenWizard) {
            this.multiQueryDataSourceWizard = (0,external_DevExpress_Analytics_Wizard_namespaceObject._createDataSourceFullscreenWizard)(this.multiQueryWizardOptions);
        }
        else
            this.multiQueryDataSourceWizard = (0,external_DevExpress_Analytics_Wizard_namespaceObject._createMultiQueryDataSourceWizard)(undefined, this.multiQueryWizardOptions);
    }
    createReportWizard(settings) {
        this.reportWizardOptions.searchBoxVisibilityMode = settings.data.wizardSettings.reportWizardTemplatesSearchBoxVisibility;
        this.reportWizardOptions.reportTemplates = settings.data.reportWizardTemplates;
        this.reportWizardOptions.allowCreateNewJsonConnection = settings.data.allowCreateNewJsonConnection;
        this.reportWizardOptions.hideDataMemberSubItems = settings.data.isReportServer;
        this.reportWizardOptions.disableCustomSql = settings.data.disableCustomSql;
        this.reportWizardOptions.dataSources = external_ko_namespaceObject.pureComputed(() => {
            let result;
            if (!settings.dataSourceHelper()) {
                result = (settings.data.availableDataSources || []).map(object => {
                    return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, object, { data: new ObjectStorageItem(object.data) });
                });
            }
            if (!result) {
                result = settings.data.isReportServer ? settings.dataSourceHelper().availableDataSources : settings.dataSourceHelper().mergedDataSources();
            }
            return result.filter(object => !(object.data instanceof DataFederationDataSource) && !object.hasErrors);
        });
        this.reportWizardOptions.callbacks = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this.multipleQueriesWizardCallbacks, {
            createSqlDataSourceInfo: SqlDataSourceEditor.createSqlDataSourceInfo,
            createJsonDataSourceInfo: JsonDataSourceEditor.createJsonDataSourceInfo,
            getItemsProviderCallback: () => this._getItemsProviderCallBack(this.reportWizard.itemsProvider()),
            finishCallback: (reportWizardModel) => {
                settings.isLoading(true);
                const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                ReportWizardService.generateReportFromWizardState(reportWizardModel, MasterDetailRequestModel, settings.state(), (wizardModel) => {
                    this.reportWizard.events.call('beforeFinish', { state: settings.state(), wizardModel: wizardModel });
                })
                    .done((result) => {
                    settings.navigation.currentTab().undoEngine.start();
                    settings.isDirty(true);
                    const newReport = createReportViewModel(result, settings.navigation.currentTab().context().report);
                    settings.navigation.currentTab().changeContext(newReport, '');
                    settings.navigation.currentTab.notifySubscribers();
                    settings.navigation.currentTab().undoEngine.end();
                    settings.isLoading(false);
                    deferred.resolve(newReport);
                })
                    .fail(() => { deferred.reject(); });
                return deferred.promise();
            }
        });
        this.registerReportWizardPages = (factory) => {
            _registerReportWizardPages(factory, this.reportWizardOptions);
        };
        this.reportWizard = _reportWizardCreating_createReportWizard(this.reportWizardOptions);
    }
    constructor(connectionStrings, wizardSettings, callbacks, rtl, dataSources, predefinedDataSources) {
        this.callbacks = callbacks;
        this.reportWizardOptions = new _ReportWizardOptions();
        this.multiQueryWizardOptions = new external_DevExpress_Analytics_Wizard_namespaceObject._MultiQueryDataSourceWizardOptions();
        this.dataSourceWizardOptions = new external_DevExpress_Analytics_Wizard_namespaceObject._DataSourceWizardOptions();
        [this.reportWizardOptions, this.multiQueryWizardOptions, this.dataSourceWizardOptions].forEach((wizardOptions) => {
            wizardOptions.connectionStrings = connectionStrings;
            wizardOptions.wizardSettings = wizardSettings;
            wizardOptions.requestWrapper = QBRequestWrapper();
            wizardOptions.rtl = rtl;
            wizardOptions.dataSources = dataSources;
            wizardOptions.predefinedDataSources = predefinedDataSources;
        });
    }
}
class ReportDialogSettings {
    constructor(_designerCallbacks) {
        this._designerCallbacks = _designerCallbacks;
    }
    createSaveReportDialog(reportUrls) {
        this.saveReportDialog = new SaveAsReportDialog(reportUrls, this._designerCallbacks);
        this._designerCallbacks.customizeSaveAsDialog && this._designerCallbacks.customizeSaveAsDialog(this.saveReportDialog);
    }
    createSaveReportDialogLight(saveReportDialog = this.saveReportDialog) {
        this.saveReportDialogLight = new SaveReportDialog(saveReportDialog, this._designerCallbacks);
        this._designerCallbacks.customizeSaveDialog && this._designerCallbacks.customizeSaveDialog(this.saveReportDialogLight);
    }
    createOpenReportDialog(reportUrls, navigation) {
        this.openReportDialog = new OpenReportDialog(reportUrls, navigation, this._designerCallbacks);
        this._designerCallbacks.customizeOpenDialog && this._designerCallbacks.customizeOpenDialog(this.openReportDialog);
    }
}

;// ./node_modules/devexpress-reporting/designer/actions/chartActions.js




class ChartActions extends external_DevExpress_Analytics_Internal_namespaceObject.BaseActionsProvider {
    constructor(_buildingModel) {
        super();
        this._buildingModel = _buildingModel;
        this.initActions([
            {
                text: 'Run Designer',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Run Designer', 'ReportStringId.Verb_RunDesigner'),
                disabled: external_ko_namespaceObject.observable(false),
                clickAction: () => { if (this._context.surface)
                    _buildingModel?.runChartDesigner(this._context.surface); },
                isContextMenuAction: true
            }
        ]);
    }
    condition(context) {
        if (context instanceof XRChartViewModel) {
            this._context = context;
            return true;
        }
        return false;
    }
}

;// ./node_modules/devexpress-reporting/designer/settings.js

const PropertyGrid = {
    QuickActionsVisible: (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(false),
    TaskGroupVisible: (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(true)
};
const SmartTagsEnabled = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(true);
const ContextMenusEnabled = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(true);

;// ./node_modules/devexpress-reporting/designer/tools/generator/_inititalizer.js































































































class ReportDesignerInitializer extends external_DevExpress_Analytics_Internal_namespaceObject.CommonDesignerGenerator {
    get reportContext() {
        return this._reportcontext;
    }
    get buildingModel() {
        return this.getModel();
    }
    get _designerCallbacks() {
        return this._callbacks && this._callbacks.designer;
    }
    getModel() {
        return super.getModel();
    }
    subscribeIncomeReport(report, reportUrl, dataSourceRefs, knownEnums, _parameterEditingSettings) {
        this._addDisposable(report.subscribe((newValue) => {
            const newModel = new ReportViewModel(newValue, undefined, knownEnums);
            updateDataSourceRefs(newModel, dataSourceRefs);
            if (this.buildingModel.navigateByReports.tabs().length === 0) {
                this.buildingModel.navigateByReports.addTab(newModel, reportUrl, () => newModel.dispose());
            }
            else {
                this.buildingModel.model(newModel);
            }
        }));
        return this;
    }
    _addDisposable(object) {
        this._disposables.push(object);
    }
    _tryAddScriptEditor(isScriptsDisabled) {
        isScriptsDisabled = isScriptsDisabled || !external_DevExpress_Analytics_Widgets_Internal_namespaceObject.aceAvailable;
        if (!isScriptsDisabled) {
            const scriptsEditor = new ScriptsEditor(this.buildingModel.model, this.buildingModel.controlsHelper.allControls);
            this._addDisposable(scriptsEditor.editorVisible.subscribe((newValue) => {
                if (newValue) {
                    const focusedControl = this.buildingModel.selection.focused();
                    if (focusedControl && focusedControl.getControlModel) {
                        const controlModel = focusedControl.getControlModel();
                        scriptsEditor.selectedControl(!!controlModel.scripts ? controlModel : controlModel.parentModel());
                    }
                    const resizeFunction = () => setTimeout(() => {
                        scriptsEditor.editorContainer().resize();
                    }, 1);
                    if (!scriptsEditor.editorContainer()) {
                        const innerSubscription = scriptsEditor.editorContainer.subscribe((newVal) => {
                            innerSubscription.dispose();
                            resizeFunction();
                        });
                    }
                    else
                        resizeFunction();
                }
                this.buildingModel.designMode(!newValue);
            }));
            this.addElement('scriptsEditor', () => scriptsEditor);
            this.addElement('events', () => external_ko_namespaceObject.pureComputed(() => { return this.buildingModel.scriptsEditor.allFunctionNames; }));
            this.addElement('gotoEvent', () => (functionName, eventName, model) => {
                scriptsEditor.editorVisible(true);
                scriptsEditor.ensureEvent(eventName.substring(2), functionName, model);
            });
            return true;
        }
        else {
            const controlTypes = Object.keys(controlsFactory().controlsMap);
            for (let index = 0; index < controlTypes.length; index++) {
                ['scripts', 'scriptReferencesString', 'scriptLanguage'].forEach((propertyDisplayName) => {
                    const propertyInfo = controlsFactory().getPropertyInfo(controlTypes[index], propertyDisplayName);
                    propertyInfo && (propertyInfo.visible = false);
                });
            }
            calculatedFieldScripts.visible = false;
        }
        return false;
    }
    _getControls(controls, filter, isNoneItemAdded = true) {
        return external_ko_namespaceObject.pureComputed(() => {
            let result = controls();
            if (filter) {
                result = result.filter(filter);
            }
            const allControls = result.map((item) => {
                return { displayName: external_ko_namespaceObject.unwrap(item.name), value: item };
            });
            if (isNoneItemAdded)
                allControls.splice(0, 0, { displayName: (0,external_DevExpress_Analytics_Internal_namespaceObject.localizeNoneString)('(none)'), value: null });
            return allControls;
        }).extend({ throttle: 1 });
    }
    _createEmptyReportItemsProvider() {
        const reportModel = new ReportViewModel({});
        const parameters = new ParametersViewModel(reportModel);
        const dataSourceHelper = new DataSourceHelper(reportModel.objectStorage, reportModel.dataSourceRefs, undefined);
        reportModel.dataSourceHelper(dataSourceHelper);
        const fieldListDataSourceHelper = new FieldListDataSourcesHelper();
        fieldListDataSourceHelper.updateDataSources(dataSourceHelper, reportModel, parameters.parameters);
        const wrappedCallback = fieldListDataSourceHelper.wrapFieldsCallback(ReportDataSourceService.fieldListCallback, () => undefined);
        return new external_DevExpress_Analytics_Internal_namespaceObject.FieldListProvider(wrappedCallback, fieldListDataSourceHelper.fieldListDataSources, [parameters]);
    }
    addReportDialogs(func) {
        const settings = new ReportDialogSettings(this._designerCallbacks);
        func(settings);
        settings.saveReportDialog && this.addElement('saveReportDialog', () => settings.saveReportDialog);
        if (settings.saveReportDialogLight) {
            this.addElement('saveReportDialogLight', () => settings.saveReportDialogLight);
            this.buildingModel.navigateByReports.save = (tab) => {
                this.buildingModel.saveReportDialogLight.show(tab);
            };
        }
        settings.openReportDialog && this.addElement('openReportDialog', () => settings.openReportDialog);
        return this;
    }
    addErrorPanelViewModel(element, options) {
        this.addElement('errorPanelViewModel', () => {
            const getRightPositionSize = () => {
                return this.buildingModel.designMode() ?
                    this.buildingModel.tabPanel.headerWidth :
                    this.buildingModel.reportPreviewModel && this.buildingModel.reportPreviewModel.tabPanel.headerWidth;
            };
            const rightPosition = external_ko_namespaceObject.observable(0);
            let dispose = null;
            const subscribeDesignMode = () => {
                dispose && dispose();
                if (this.buildingModel.designMode()) {
                    dispose = this.buildingModel.tabPanel.events.on('headerWidthChanged', (args) => {
                        rightPosition(getRightPositionSize());
                    });
                }
                else {
                    dispose = this.buildingModel.reportPreviewModel.tabPanel.events.on('headerWidthChanged', (args) => {
                        rightPosition(getRightPositionSize());
                    });
                }
                rightPosition(getRightPositionSize());
            };
            subscribeDesignMode();
            this._addDisposable(this.buildingModel.designMode.subscribe(() => subscribeDesignMode()));
            const leftPosition = external_ko_namespaceObject.computed(() => {
                return this.buildingModel.designMode() ? 96 : 0;
            });
            const errorPanel = new ErrorPanelViewModel({
                ...options,
                controlScrollingTool: this.buildingModel.controlScrollingTool,
                controlsHelper: this.buildingModel.controlsHelper,
                editableObject: this.buildingModel.editableObject,
                selection: this.buildingModel.selection,
                undoEngine: () => this.buildingModel.undoEngine(),
                onClick: () => {
                    if (!this.buildingModel.designMode()) {
                        this.buildingModel.reportPreviewModel.reportPreview.previewVisible = false;
                        this.buildingModel.reportPreviewModel.reportPreview.deactivate();
                    }
                    this.buildingModel.tabPanel.selectTab({
                        model: this.buildingModel.tabPanel.getTabByName('Properties')
                    });
                },
                position: {
                    left: leftPosition,
                    right: rightPosition
                },
                rtl: this.buildingModel.rtl
            });
            errorPanel._disposables.push({ dispose }, leftPosition);
            this._addDisposable(this._reportcontext.subscribe((newVal) => {
                errorPanel.clear();
                if (newVal != null) {
                    errorPanel.subscribeProvider(newVal.reportErrorProvider);
                    errorPanel.subscribeProvider(newVal.runtimeErrorProvider);
                    errorPanel._providers.forEach(provider => provider.collectErrors());
                }
            }));
            const $root = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
            const $progress = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).find('.dxrd-error-panel');
            const updateProgressBarPosition = (0,external_DevExpress_Reporting_Viewer_Internal_namespaceObject.getDockedElementCallback)($progress, $root, window, '.dxrd-error-panel', { bottom: true });
            this._addDisposable(errorPanel.collapsed.subscribe(() => {
                updateProgressBarPosition(element);
            }));
            const wrapped = () => updateProgressBarPosition(element);
            this._onAfterRenderCallbacks.push(() => updateProgressBarPosition(element));
            window.addEventListener('scroll', wrapped);
            this._addDisposable({
                dispose: () => {
                    window.removeEventListener('scroll', wrapped);
                }
            });
            return errorPanel;
        });
        return this;
    }
    addNavigateToControl(element) {
        this.addElement('controlScrollingTool', () => {
            return new ControlScrollingTool(element);
        });
        return this;
    }
    addFlagsAndInitProperties(element) {
        this.addElement('validationMode', () => external_ko_namespaceObject.computed({
            read: () => {
                return this.buildingModel.surface() && this.buildingModel.surface().validationMode();
            }, write: (newVal) => {
                this.buildingModel.surface().validationMode(newVal);
            }
        }));
        this.addElement('isDirty', () => external_ko_namespaceObject.computed({
            read: () => {
                return this.buildingModel.navigateByReports.currentTab() && this.buildingModel.navigateByReports.currentTab().isDirty();
            },
            write: (newVal) => {
                this.buildingModel.navigateByReports.currentTab() && this.buildingModel.navigateByReports.currentTab().isDirty(newVal);
            }
        }));
        this.addElement('designMode', () => external_ko_namespaceObject.observable(true));
        this.addIsLoading(() => {
            const isLoading = external_ko_namespaceObject.observable(true);
            this.buildingModel.navigateByReports.init(isLoading);
            return isLoading;
        });
        this.addElement('rootStyle', () => 'dxrd-designer dxd-back-primary-invariant');
        this.addElement('selectedPath', () => external_ko_namespaceObject.observable(null));
        this.addElement('actionsGroupTitle', () => () => (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} {1}', 'ReportStringId.STag_Capt_Format'), (0,external_DevExpress_Analytics_Internal_namespaceObject.getControlTypeName)(this.getModel().editableObject()), (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Tasks', 'ReportStringId.STag_Capt_Tasks')));
        this.addElement('updateFont', () => (values) => {
            (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts)({
                ...(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts)(),
                ...values
            });
        });
        this.addElement('afterRender', () => () => {
            this._onAfterRenderCallbacks.forEach(x => x());
            this._onAfterRenderCallbacks.splice(0);
            delete this.buildingModel.afterRender;
        });
        this.addElement('sortFont', () => () => {
            const sortedObj = {};
            const fonts = external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts.peek();
            Object.keys(fonts).sort((a, b) => { return a.localeCompare(b); }).forEach(key => sortedObj[key] = fonts[key]);
            (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts)(sortedObj);
        });
        this.addElement('zoomStep', () => external_ko_namespaceObject.observable(0.05));
        this.addElement('surfaceSize', () => external_ko_namespaceObject.observable(0));
        if (!element)
            return this;
        this.addElement('fullScreen', () => (0,external_DevExpress_Reporting_Internal_namespaceObject.createFullscreenComputed)(element, this));
        this.addElement('drawCrossbandContent', () => external_ko_namespaceObject.observable(true));
        return this;
    }
    addPreview(options) {
        const errorsAction = (response) => {
            if (!!response.errors)
                this.reportContext() && this.reportContext().runtimeErrorProvider.errors(response.errors);
        };
        (0,external_DevExpress_Reporting_Viewer_Internal_namespaceObject.createPreview)({
            model: {
                parametersInfo: options.parametersInfo,
                handlerUri: options.handlerUri,
                previewVisible: false,
                rtl: options.rtl,
                accessibilityCompliant: false,
                exportSettings: options.exportSettings,
                progressBarSettings: options.progressBarSettings,
                searchSettings: options.searchSettings
            },
            element: options.element,
            callbacks: {
                ...options.callbacks,
                _onGetBuildStatus: errorsAction,
                _onGetDocumentDetails: errorsAction
            }
        })
            .done((reportPreviewModel) => {
            this.addElement('reportPreviewModel', () => {
                this._addDisposable({
                    dispose: reportPreviewModel.reportPreview.events.on('previewVisibleChanged', (args) => {
                        const newValue = args.newValue;
                        this.buildingModel.designMode(!newValue);
                        if (!newValue && this._updateCallback)
                            this._updateCallback();
                    })
                });
                return reportPreviewModel;
            });
            this._addDisposable(reportPreviewModel);
        });
        return this;
    }
    addReportUrls(subreports) {
        this.addElement('reportUrls', () => {
            return external_ko_namespaceObject.observableArray((0,external_DevExpress_Reporting_namespaceObject.convertMapToKeyValuePair)(subreports));
        });
        return this;
    }
    _wrapActionProvider(actionsProvider) {
        return {
            getActions: (context) => {
                return actionsProvider() && actionsProvider().getActions(context) || [];
            }
        };
    }
    initializeFieldListActionProviders(func = () => {
        const providers = [];
        if (this._calculatedFieldsSource)
            providers.push(this._wrapActionProvider(this._calculatedFieldsSource));
        if (this._watermarks)
            providers.push(this._wrapActionProvider(this._watermarks));
        if (this._parameters)
            providers.push(this._wrapActionProvider(this._parameters));
        if (this._dataSourceActionProvider)
            providers.push(this._dataSourceActionProvider);
        if (this.options.data?.dataSourceSettings?.allowEditDataSource ?? true) {
            if (this._jsonDataSourceEditor)
                providers.push(this._jsonDataSourceEditor);
            if (this._sqlDataSourceEditor)
                providers.push(this._sqlDataSourceEditor);
            if (this._federationDataSourceEditor)
                providers.push(this._federationDataSourceEditor);
            if (this._objectDataSourceEditor)
                providers.push(this._objectDataSourceEditor);
        }
        return providers;
    }) {
        this.addElement('fieldListActionProviders', func);
        return this;
    }
    initializeCalculatedFieldsSource() {
        const calculatedFieldsSource = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().calcFieldsSource);
        this.addElement('calculatedFieldsSource', () => calculatedFieldsSource);
        this._calculatedFieldsSource = calculatedFieldsSource;
        return this;
    }
    initializeWatermarks() {
        const watermarks = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().watermarks);
        this.addElement('watermarks', () => watermarks);
        this._watermarks = watermarks;
        return this;
    }
    initializeFieldListItemsExtenders() {
        const fieldListItemsExtenders = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().fieldListItemsExtenders);
        this.addElement('fieldListItemsExtenders', () => fieldListItemsExtenders);
        return this;
    }
    initializeParameters(_parameterEditingSettings = defaultParameterEditingSettings) {
        const parameters = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().parameters);
        this.addElement('parameters', () => parameters);
        this._parameters = parameters;
        this.addElement('parameterEditingSettings', () => _parameterEditingSettings);
        return this;
    }
    initializeFieldListProvider() {
        const fieldListProvider = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().fieldListProvider);
        this.addElement('fieldListProvider', () => fieldListProvider);
        return this;
    }
    initializeReportItemsProvider() {
        const reportItemsProvider = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().reportItemsProvider);
        this.addElement('reportItemsProvider', () => reportItemsProvider);
        return this;
    }
    initializeDataBindingsProvider() {
        const dataBindingsProvider = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().dataBindingsProvider);
        this.addElement('dataBindingsProvider', () => dataBindingsProvider);
        return this;
    }
    initializeDisplayNameProvider() {
        const displayNameProvider = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().displayNameProvider);
        this.addElement('displayNameProvider', () => displayNameProvider);
        this.addElement('getDisplayNameByPath', () => (path, value) => { return displayNameProvider().getDisplayNameByPath(path, value); });
        return this;
    }
    initializeExpressionDisplayNameProvider() {
        const expressionDisplayNameProvider = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().expressionDisplayNameProvider);
        this.addElement('expressionDisplayNameProvider', () => expressionDisplayNameProvider);
        return this;
    }
    initializeDataSourceHelper() {
        const dataSourceHelper = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().dataSourceHelper);
        this.addElement('dataSourceHelper', () => dataSourceHelper);
        const fieldListDataSourceHelper = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().fieldListDataSourceHelper);
        this.addElement('fieldListDataSources', () => external_ko_namespaceObject.computed(() => fieldListDataSourceHelper() && fieldListDataSourceHelper().fieldListDataSources()));
        this._addDisposable(fieldListDataSourceHelper);
        return this;
    }
    addSelection(func = (settings) => {
        settings.selection = this._selection;
        const rtl = external_ko_namespaceObject.computed(() => { return this.buildingModel.surface() && this.buildingModel.surface().rtl(); });
        const snapLinesCollector = new ReportSnapLinesCollector(rtl);
        this._addDisposable(rtl);
        settings.snapHelper = new external_DevExpress_Analytics_Internal_namespaceObject.SnapLinesHelper(this.buildingModel.surface, external_DevExpress_Analytics_Internal_namespaceObject.SnapLinesHelper.snapTolerance, snapLinesCollector);
        settings.editableObject = external_DevExpress_Analytics_Internal_namespaceObject.CombinedObject.getEditableObject(settings.selection, this.buildingModel.undoEngine, (propertyName, controls, undoEngune) => this._customMergeEngine.customMerge(propertyName, controls, undoEngune)).extend({ throttle: 1 });
        settings.addDragDrop((dragDropSettings) => {
            dragDropSettings.dragHelperContent = new external_DevExpress_Analytics_Internal_namespaceObject.DragHelperContent(settings.selection);
            dragDropSettings.dragDropStarted = external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started;
            dragDropSettings.addDragDropHandler('dragHandler', new SelectionDragDropHandler(this.buildingModel.canAddItems, this.buildingModel.surface, settings.selection, this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent));
            dragDropSettings.addDragDropHandler('toolboxDragHandler', new ReportToolboxDragDropHandler(this.buildingModel.surface, this._selection, this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, controlsFactory(), this._designerCallbacks.componentAdded));
            dragDropSettings.addDragDropHandler('fieldDragHandler', new FieldListDragDropHandler(this.buildingModel.canAddItems, this.buildingModel.surface, this._selection, this.buildingModel.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, this.buildingModel.fieldListDataSources, this._designerCallbacks.componentAdded));
        });
        settings.addResize((resizeSettings) => {
            resizeSettings.handler = {
                starting: () => {
                    this.buildingModel.inlineTextEdit.visible() &&
                        this.buildingModel.inlineTextEdit['_showInline'](false);
                    this.buildingModel['richInlineControl'] &&
                        this.buildingModel['richInlineControl'].visible() &&
                        this.buildingModel['richInlineControl']['_showInline'](false);
                    this._selection.expectClick = true;
                    this.buildingModel.undoEngine().start();
                },
                stopped: () => {
                    this.buildingModel.undoEngine().end();
                    setTimeout(() => { this._selection.expectClick = false; }, 100);
                },
                disabled: external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler.started,
                snapHelper: settings.snapHelper
            };
        });
    }) {
        super.addSelection(func);
        return this;
    }
    addToolboxItems(items) {
        super.addToolboxItems(items);
        return this;
    }
    addGroupedToolboxItems() {
        super.addGroupedToolboxItems();
        return this;
    }
    addControlProperties(editors, groups, accessibilityProvider) {
        super.addControlProperties(editors, groups, this._accessibilityProvider);
        return this;
    }
    createControlProperties(editors, groups, accessibilityProvider) {
        const properties = super.createControlProperties(editors, groups, accessibilityProvider);
        properties.createEditorAddOn = (_editor) => {
            const editor = (0,external_DevExpress_Analytics_Widgets_namespaceObject.unwrapEditor)(_editor);
            const template = {
                templateName: 'dx-editor-addons',
                data: []
            };
            if (external_ko_namespaceObject.unwrap(editor._model) instanceof Parameter && external_ko_namespaceObject.unwrap(editor.disabled)) {
                return template;
            }
            const editorAddOn = new ValueEditorAddOn(editor, properties.popupService);
            const editorExression = new ExpressionEditorAddOn(editor, properties.popupService, 'dxrd-svg-properties-propertyexpression');
            template.data.push(editorAddOn, editorExression);
            editor._disposables.push(editorAddOn, editorExression);
            return template;
        };
        return properties;
    }
    addMenu(func = (settings) => void 0) {
        const settings = new ReportMenuSettings();
        func(settings);
        this._disposables.push(settings);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(this.getModel(), settings.generate());
        return this;
    }
    addControlsHelper(func = (settings) => {
        const helper = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().controlsHelper);
        this._addDisposable(helper);
        const controlHelper = new ReportDesignerControlsHelper(helper);
        settings
            .addControlsHelper(controlHelper)
            .addControlsStore();
    }) {
        super.addControlsHelper(func);
        return this;
    }
    addSmartTagModel() {
        let smartTagFactory = { ...settings_smartTagFactory() };
        (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(smartTagFactory, {
            'default': (reportElement) => {
                const result = [];
                if (SmartTagsEnabled())
                    result.push(new TasksSmartTag(reportElement, this.buildingModel.popularProperties));
                if (DataBindingMode() !== _dataBindingMode_DataBindingMode.Bindings)
                    result.push(new ExpressionSmartTag(reportElement, this.buildingModel.activatedExpressionEditor));
                return result;
            }
        });
        const smartTagHelper = new SmartTagModel(this._selection, this.buildingModel.surface, this.buildingModel['verticalScrollOffset'], smartTagFactory, this.buildingModel.rtl);
        this.addElement('smartTagModel', () => smartTagHelper);
        this._disposables.push({
            dispose: () => smartTagFactory = {},
        });
        return this;
    }
    setControlsHelperFilter(filter) {
        this.buildingModel.controlsStore.setFilter(filter);
        return this;
    }
    _createPropertiesTab() {
        const getVisible = () => { return !!this.buildingModel.model(); };
        const getDisabled = () => {
            return this.buildingModel.propertyGrid.focusedItem() instanceof Array ||
                (!(this.options.data?.dataSourceSettings?.allowEditDataSource ?? true) && this.buildingModel.propertyGrid.focusedItem() instanceof ComponentsModel);
        };
        const tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
            text: 'Properties',
            template: 'dxrd-propertiestab',
            model: this.buildingModel.propertyGrid,
            localizationId: 'AnalyticsCoreStringId.Cmd_Properties',
            visible: getVisible(),
            disabled: getDisabled()
        });
        this._addDisposable(this.buildingModel.model.subscribe((newVal) => {
            tabInfo.visible = getVisible();
        }));
        this._addDisposable(this.buildingModel.propertyGrid.focusedItem.subscribe((newVal) => {
            tabInfo.disabled = getDisabled();
        }));
        return tabInfo;
    }
    _createExpressionsTab(context) {
        const expressionGridModel = external_ko_namespaceObject.computed(() => {
            const editableObject = this.buildingModel.editableObject();
            return editableObject && editableObject.expressionObj;
        });
        let expressionGrid = null;
        this._addDisposable(context.subscribe((newVal) => {
            expressionGrid.cleanEditors();
        }));
        expressionGrid = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(expressionGridModel);
        this._addDisposable(expressionGrid);
        this._addDisposable(expressionGridModel);
        const getVisible = () => { return this.buildingModel.model() && this.buildingModel.model()._dataBindingMode() !== _dataBindingMode_DataBindingMode.Bindings; };
        const getDisabled = () => {
            return !expressionGridModel() || external_ko_namespaceObject.unwrap(this.buildingModel.editableObject().lockedInUserDesigner);
        };
        const expressionTab = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
            text: 'Expressions',
            template: 'dxrd-expressions-tab',
            model: expressionGrid,
            localizationId: 'DevExpress.XtraReports.UI.XRControl.Expressions',
            imageClassName: 'expressions',
            imageTemplateName: 'dxrd-svg-tabs-expressions',
            visible: getVisible(),
            disabled: getDisabled(),
        });
        this._addDisposable(this.buildingModel.model.subscribe((newVal) => {
            if (newVal)
                this._addDisposable(newVal._dataBindingMode.subscribe((newVal) => {
                    expressionTab.visible = getVisible();
                }));
            expressionTab.visible = getVisible();
        }));
        this._addDisposable(expressionGridModel.subscribe((newVal) => {
            expressionTab.disabled = getDisabled();
        }));
        let currentFilter = undefined;
        this._addDisposable({
            dispose: expressionTab.events.on('activeChanged', (args) => {
                if (expressionTab.active && expressionTab.visible) {
                    currentFilter = this.buildingModel.controlsStore.getFilter();
                    this.buildingModel.controlsStore.setFilter(isControl);
                }
                else if (currentFilter !== undefined)
                    this.buildingModel.controlsStore.setFilter(currentFilter);
            })
        });
        return expressionTab;
    }
    _createReportExplorerTab() {
        const reportExplorer = new ReportExplorerModel(this.buildingModel.model, this.buildingModel.editableObject, (targetObject) => {
            const propertiesTab = this.buildingModel.tabPanel.getTabByName('Properties');
            propertiesTab.model.focusedItem(targetObject);
            this.buildingModel.tabPanel.selectTab({ model: propertiesTab });
        }, new ReportExplorerDragDropHandler(this.buildingModel.canAddItems, this.buildingModel.surface, this.buildingModel.selection, this.buildingModel.undoEngine, this.buildingModel.dragHelperContent), this.buildingModel.selection, this.options.data?.dataSourceSettings);
        this._addDisposable(reportExplorer);
        const getVisible = () => { return !!this.buildingModel.model(); };
        const tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
            text: 'Report Explorer',
            template: 'dxrd-reportexplorerwrapper',
            model: reportExplorer,
            localizationId: 'ReportStringId.UD_Title_ReportExplorer',
            imageClassName: 'reportexplorer',
            imageTemplateName: 'dxrd-svg-tabs-reportexplorer',
            visible: getVisible()
        });
        this._addDisposable(this.buildingModel.model.subscribe(() => {
            tabInfo.visible = getVisible();
        }));
        return tabInfo;
    }
    _createFieldListTab(designerCallbacks, startDataSourceWizard) {
        const treeListOptions = {
            itemsProvider: this.buildingModel.fieldListProvider,
            factory: new FieldListItemFactory(),
            selectedPath: this.buildingModel.selectedPath,
            treeListController: new FieldListController(this.buildingModel.fieldListActionProviders, (0,external_DevExpress_Analytics_Internal_namespaceObject.createActionWrappingFunction)('WrapForFieldList', (model, handler) => {
                this.buildingModel.undoEngine().start();
                const result = handler(model);
                this.buildingModel.undoEngine().end();
                if (result && result.name) {
                    this.buildingModel.selectedPath(model.path + '.' + external_ko_namespaceObject.unwrap(result.name));
                }
            }), this.buildingModel.fieldDragHandler, designerCallbacks.customizeFieldListActions)
        };
        const useContextMenu = external_ko_namespaceObject.observable(true);
        const actions = external_ko_namespaceObject.observable([]);
        this.addDisposable(treeListOptions.treeListController.subscribeOnSelectedItemChange(() => {
            useContextMenu(this.getModel().parts?.some(part => part.id === ReportDesignerElements.ContextMenu) ?? true);
            if (useContextMenu() && treeListOptions.treeListController.selectedItem)
                actions(treeListOptions.treeListController.getActions(treeListOptions.treeListController.selectedItem));
            else
                actions([]);
        }));
        if (!this.getModel().ContextMenusEnabled)
            this.getModel().ContextMenusEnabled = external_ko_namespaceObject.observable(true);
        const fieldListContextMenu = new external_DevExpress_Analytics_Internal_namespaceObject.ContextMenuProvider({
            actions: actions,
            target: '.' + this.buildingModel.containerClass + ' .dxrd-fieldslist-context-menu-container',
            getClickActionParams: () => treeListOptions.treeListController.selectedItem && treeListOptions.treeListController.selectedItem.getViewModel(),
            contextMenusEnabled: this.getModel().ContextMenusEnabled,
            fullScreen: this.getModel().fullScreen
        });
        this.addContextMenu(fieldListContextMenu);
        this.addDisposable(fieldListContextMenu);
        const fieldListModel = {
            treeListOptions: treeListOptions,
            startWizard: () => {
                startDataSourceWizard();
            },
            visible: () => {
                const model = this.getModel();
                return model != null && model.multiQueryDataSourceWizard.canRunWizard();
            },
            addDataSourceButtonText: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add Data Source', 'ASPxReportsStringId.ReportDesigner_FieldList_AddDataSource'),
            allowAddDataSource: this.options.data?.dataSourceSettings?.allowAddDataSource ?? true,
            fieldListContextMenu: fieldListContextMenu,
            useContextMenu: useContextMenu
        };
        const getVisible = () => { return !!this.buildingModel.model(); };
        const tabInfo = new external_DevExpress_Analytics_Utils_namespaceObject.TabInfo({
            text: 'Fields',
            template: 'dxrd-fieldlistwrapper',
            model: fieldListModel,
            localizationId: 'ReportStringId.UD_Title_FieldList',
            imageClassName: 'fieldlist',
            imageTemplateName: 'dxrd-svg-tabs-fieldlist',
            visible: getVisible()
        });
        this._addDisposable(this.buildingModel.model.subscribe(() => {
            tabInfo.visible = getVisible();
        }));
        return tabInfo;
    }
    addTabPanel(panel, addTabInfo = () => {
        return [
            this._createPropertiesTab(),
            this._createExpressionsTab(this._reportcontext),
            this._createFieldListTab(this._designerCallbacks, () => {
                this.buildingModel._wizardRunner.run('DataSourceWizard');
            }),
            this._createReportExplorerTab()
        ];
    }) {
        super.addTabPanel(panel, addTabInfo);
        const contextSubscription = this._reportcontext.subscribe((newVal) => {
            if (!!newVal) {
                contextSubscription.dispose();
                this.buildingModel.tabPanel.collapsed = false;
            }
        });
        this._addDisposable(contextSubscription);
        return this;
    }
    _createActionsStorage(actions) {
        const object = {};
        for (let i = actions.length - 1; i > -1; i--) {
            object[actions[i].id] = actions[i].clickAction;
        }
        return object;
    }
    addOpenReportMethod() {
        this.addElement('openReport', () => (url) => {
            this.buildingModel.navigateByReports.addTab(null, external_ko_namespaceObject.observable(url));
        });
        return this;
    }
    addShowPreviewMethod() {
        this.addElement('showPreview', () => () => {
            const reportPreview = this.buildingModel.reportPreviewModel.reportPreview;
            reportPreview.previewVisible = true;
            if (!this.buildingModel.model()) {
                const subscription = this.buildingModel.model.subscribe((newVal) => {
                    subscription.dispose();
                    reportPreview.initialize(ReportPreviewService.initializePreview(this.buildingModel.model()));
                });
            }
            else {
                reportPreview.initialize(ReportPreviewService.initializePreview(this.buildingModel.model()));
            }
        });
        return this;
    }
    initializeUIEffects(applyBindings, element) {
        this._addDisposable(this.buildingModel.editableObject.subscribe(() => {
            const $scrollView = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dxrd-designer .dxrd-properties-wrapper').find('.dx-scrollview');
            if ($scrollView.length) {
                const scrollViewInstance = external_DevExpress_ui_dxScrollView_default().getInstance($scrollView.get(0));
                scrollViewInstance && scrollViewInstance['scrollTo'] && scrollViewInstance['scrollTo'](0);
            }
        }));
        const updateSurfaceContentSize__ = (0,external_DevExpress_Analytics_Internal_namespaceObject.updateSurfaceContentSize)(this.buildingModel.surfaceSize, element, this.rtl);
        const updateSurfaceContentSizeLocalizationMode__ = updateSurfaceContentSizeLocalizationMode(this.buildingModel.surfaceSize, element, this.rtl);
        const updateSurfaceContentSize_ = () => {
            if (!this.buildingModel)
                return;
            if (this.buildingModel.localizationMode()) {
                updateSurfaceContentSizeLocalizationMode__();
            }
            else {
                updateSurfaceContentSize__();
            }
            const $root = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).find('.dxrd-designer');
            const $contentPanel = $root.find('.dxrd-surface-wrapper .dxrd-content-panel-wrapper');
            areaHeight($contentPanel.height());
            areaWidth($contentPanel.width());
        };
        let updateContentSizeTimeout = null;
        const updateSurfaceContentSize_async = () => {
            updateContentSizeTimeout && clearTimeout(updateContentSizeTimeout);
            updateContentSizeTimeout = setTimeout(() => {
                updateSurfaceContentSize_();
            }, 1);
        };
        const reportHeight = external_ko_namespaceObject.computed(() => {
            if (this.buildingModel.surface()) {
                updateSurfaceContentSize_async();
                return this.buildingModel.surface().effectiveHeight();
            }
        });
        const reportWidth = external_ko_namespaceObject.computed(() => {
            if (this.buildingModel.surface()) {
                updateSurfaceContentSize_async();
                return this.buildingModel.surface().pageWidth();
            }
        });
        const areaHeight = external_ko_namespaceObject.observable(reportHeight());
        const areaWidth = external_ko_namespaceObject.observable(reportWidth());
        const verticalScrollOffset = external_ko_namespaceObject.observable(0);
        const horizontalScrollOffset = external_ko_namespaceObject.observable(0);
        this._addDisposable(external_ko_namespaceObject.computed(() => {
            let horizontalOffset = 0;
            let verticalOffset = 0;
            [0, 0].forEach(() => {
                verticalOffset = reportHeight() - (areaHeight() - horizontalOffset) > 0.5 ? 20 : 0;
                horizontalOffset = reportWidth() - (areaWidth() - verticalOffset) > 0.5 ? 20 : 0;
            });
            horizontalScrollOffset(horizontalOffset);
            verticalScrollOffset(verticalOffset);
        }));
        this._updateCallback = () => {
            if (!this.buildingModel.reportPreviewModel.reportPreview.previewVisible)
                updateSurfaceContentSize_();
        };
        window.addEventListener('resize', this._updateCallback);
        this.buildingModel.onViewPortScroll = (viewPort) => {
            const $viewPort = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(viewPort), $surface = $viewPort.closest('.dxrd-surface');
            $surface.find('.dxrd-bands-panel-wrapper').scrollTop($viewPort.scrollTop());
            $surface.find('.dxrd-hruler-wrapper').scrollLeft($viewPort.scrollLeft());
        };
        this.addElement('verticalScrollOffset', () => verticalScrollOffset);
        this.addElement('horizontalScrollOffset', () => horizontalScrollOffset);
        this._addDisposable(reportHeight);
        this._addDisposable(reportWidth);
        this._addDisposable({
            dispose: this.buildingModel.tabPanel.events.on('widthChanged', (args) => {
                updateSurfaceContentSize_async();
            })
        });
        this._addDisposable(this.buildingModel.localizationEditor.width.subscribe(() => {
            updateSurfaceContentSize_async();
        }));
        this._addDisposable(this.buildingModel.localizationMode.subscribe((newVal) => {
            updateSurfaceContentSize_async();
        }));
        this.buildingModel.updateSurfaceSize = () => {
            updateSurfaceContentSize_();
        };
        this._addDisposable(this.buildingModel.navigateByReports.height.subscribe(() => {
            updateSurfaceContentSize_async();
        }));
        if (applyBindings) {
            this.buildingModel.updateSurfaceSize();
        }
        return this;
    }
    _createNewReportFromWizardState(reportWizard, designerModel, wizardState, state, deferred) {
        ReportWizardService.generateReportFromWizardState(wizardState, reportWizard._requestModelType, state(), (wizardModel) => {
            reportWizard.events.call('beforeFinish', { state: wizardState, wizardModel: wizardModel });
        })
            .done((result) => {
            const modelJson = JSON.parse(result.reportModel);
            const newReport = new ReportViewModel(modelJson, undefined, result.knownEnums);
            newReport.dataSourceRefs = result.dataSourceRefs;
            designerModel.navigateByReports.addTab(newReport, external_ko_namespaceObject.observable(''), undefined, newReport.displayNameObject() || newReport.name());
            designerModel.isDirty(true);
            designerModel.isLoading(false);
            deferred.resolve(newReport);
        })
            .fail(() => { deferred.reject(); });
    }
    _createNewViaWizardAction(reportWizard, designerModel, state) {
        const menuAction = {
            id: actionId_ActionId.NewReportViaWizard,
            container: 'menu',
            text: 'New via Wizard...',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('New via Wizard...', StringId.NewViaWizard),
            imageClassName: 'dxrd-image-new-via-wizard',
            imageTemplateName: 'dxrd-svg-menu-new_via_wizard',
            disabled: external_ko_namespaceObject.observable(false),
            selected: external_ko_namespaceObject.observable(false),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 'W'.charCodeAt(0) },
            clickAction: () => designerModel._wizardRunner.run('NewViaReportWizard')
        };
        designerModel._wizardRunner.registerCommand('NewViaReportWizard', () => {
            if (reportWizard instanceof FullscreenReportWizard) {
                menuAction.selected(true);
                designerModel.appMenuVisible(true);
                designerModel.isMenuCollapsed(true);
                reportWizard['_onClose'] && reportWizard['_onClose'](() => {
                    menuAction.selected(false);
                    designerModel.isMenuCollapsed(false);
                });
            }
            reportWizard.itemsProvider(this._createEmptyReportItemsProvider());
            reportWizard.initialize();
            reportWizard.start((reportWizardState) => {
                designerModel.isLoading(true);
                const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
                if (reportWizardState.jsonDataSourceWizard.jsonSource && reportWizardState.newDataSource) {
                    ReportWizardService.createNewJsonDataSource(reportWizardState.jsonDataSourceWizard, JsonDataSourceEditor.createJsonDataSourceInfo)
                        .done((dataSource) => {
                        reportWizardState.dataSource = dataSource;
                        delete reportWizardState.newDataSource;
                        if (designerModel.connections.json().every(x => x.name !== reportWizardState.jsonDataSourceWizard.newConnectionName)) {
                            designerModel.connections.json.push({
                                description: reportWizardState.jsonDataSourceWizard.newConnectionName,
                                name: reportWizardState.jsonDataSourceWizard.newConnectionName
                            });
                        }
                        this._createNewReportFromWizardState(reportWizard, designerModel, reportWizardState, state, deferred);
                    }).fail(() => deferred.reject());
                }
                else {
                    this._createNewReportFromWizardState(reportWizard, designerModel, reportWizardState, state, deferred);
                }
                return deferred.promise();
            });
        }, () => {
            designerModel.appMenuVisible(false);
            reportWizard.isVisible(false);
        });
        return menuAction;
    }
    _createLocalizationModeAction(localizationEditor, report, designerModel) {
        const menuAction = {
            id: actionId_ActionId.Localization,
            container: 'menu',
            text: 'Localization...',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Localization...', 'ASPxReportsStringId.ReportDesigner_MenuItem_Localization'),
            imageClassName: 'dxrd-image-menu-localization',
            imageTemplateName: 'dxrd-svg-menu-localization',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !report(); }),
            visible: true,
            selected: external_ko_namespaceObject.observable(false),
            clickAction: () => {
                designerModel._wizardRunner.run('LocalizationCommand');
            }
        };
        const start = () => {
            designerModel.appMenuVisible(true);
            designerModel.isMenuCollapsed(true);
            menuAction.selected(true);
            designerModel.localizationMode(true);
            localizationEditor.start();
            (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dx-designer .dxrd-surface-wrapper').addClass('dxrd-surface-localization-mode');
            localizationEditor.translateHelper.move('dxrd-toolbar-wrapper');
            localizationEditor.translateHelper.move('dxrd-tab-panel-wrapper', '+', 'translateX');
            localizationEditor.translateHelper.move('dxrd-navigation-panel-wrapper', '+');
            localizationEditor.translateHelper.move('dxrd-error-panel', '+');
        };
        const end = () => {
            menuAction.selected(false);
            designerModel.isMenuCollapsed(false);
            designerModel.appMenuVisible(false);
            designerModel.localizationMode(false);
            localizationEditor.finish();
            (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)('.dx-designer .dxrd-surface-wrapper').removeClass('dxrd-surface-localization-mode');
            localizationEditor.translateHelper.reset('dxrd-toolbar-wrapper');
            localizationEditor.translateHelper.reset('dxrd-tab-panel-wrapper');
            localizationEditor.translateHelper.reset('dxrd-navigation-panel-wrapper');
            localizationEditor.translateHelper.reset('dxrd-error-panel');
        };
        designerModel._wizardRunner.registerCommand('LocalizationCommand', start, end);
        return menuAction;
    }
    _createDesignInReportWizardAction(reportWizard, designerModel, state) {
        const menuAction = {
            id: actionId_ActionId.ReportWizard,
            container: 'menu',
            text: 'Design in Report Wizard...',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Design in Report Wizard...', 'ReportStringId.Verb_ReportWizard'),
            imageClassName: 'dxrd-image-run-wizard',
            imageTemplateName: 'dxrd-svg-menu-run_wizard',
            disabled: external_ko_namespaceObject.pureComputed(() => { return !designerModel.model() || designerModel.model().language() !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture; }),
            visible: true,
            selected: external_ko_namespaceObject.observable(false),
            clickAction: () => {
                designerModel._wizardRunner.run('DesignInReportWizard');
            }
        };
        const start = () => {
            if (reportWizard instanceof FullscreenReportWizard) {
                designerModel.appMenuVisible(true);
                designerModel.isMenuCollapsed(true);
                menuAction.selected(true);
                reportWizard['_onClose'] && reportWizard['_onClose'](() => {
                    menuAction.selected(false);
                    designerModel.isMenuCollapsed(false);
                });
            }
            reportWizard.itemsProvider(designerModel.dataBindingsProvider());
            reportWizard.initialize(createReportWizardState(designerModel.model()));
            reportWizard.start((reportWizardState) => {
                const deferred = (0,external_DevExpress_Analytics_Internal_namespaceObject.createDeferred)();
                if (reportWizardState.newDataSource) {
                    const ds = _restoreDataSourceFromState(reportWizardState.newDataSource);
                    ds.name = designerModel.model().dataSourceHelper().getUniqueDataSourceName(ds.name);
                    reportWizardState.newDataSource = _convertToStateDataSource(ds);
                }
                const createReport = (wizardState) => {
                    designerModel.isLoading(true);
                    designerModel.navigateByReports.currentTab().undoEngine.start();
                    designerModel.isDirty(true);
                    const _patchedInfo = this._patchReportBeforeRedesign(designerModel.model(), wizardState);
                    ReportWizardService.generateReportFromWizardState(wizardState, reportWizard._requestModelType, state(), (wizardModel) => {
                        reportWizard.events.call('beforeFinish', { state: wizardState, wizardModel: wizardModel });
                    }, _patchedInfo)
                        .done((result) => {
                        const newReport = createReportViewModel(result, designerModel.model());
                        designerModel.model(newReport);
                        deferred.resolve(newReport);
                    })
                        .fail(() => {
                        deferred.reject();
                    }).always(() => {
                        designerModel.navigateByReports.currentTab().undoEngine.end();
                        designerModel.isLoading(false);
                    });
                };
                if (reportWizardState.jsonDataSourceWizard.jsonSource && reportWizardState.newDataSource) {
                    ReportWizardService.createNewJsonDataSource(reportWizardState.jsonDataSourceWizard, JsonDataSourceEditor.createJsonDataSourceInfo)
                        .done((dataSource) => {
                        reportWizardState.dataSource = dataSource;
                        delete reportWizardState.newDataSource;
                        createReport(reportWizardState);
                    }).fail(() => deferred.reject());
                }
                else {
                    createReport(reportWizardState);
                }
                return deferred.promise();
            });
        };
        const end = () => {
            designerModel.appMenuVisible(false);
            reportWizard.isVisible(false);
        };
        designerModel._wizardRunner.registerCommand('DesignInReportWizard', start, end);
        designerModel._wizardRunner.registerCommand('ReportWizard', start, end);
        return menuAction;
    }
    _createMultiQueryDataSourceWizardAction(multiQueryDataSourceWizard, designerModel) {
        const isDisabled = external_ko_namespaceObject.pureComputed(() => { return !designerModel.model(); });
        const isVisible = external_ko_namespaceObject.pureComputed(() => multiQueryDataSourceWizard.canRunWizard());
        const menuAction = {
            id: actionId_ActionId.AddMultiQuerySqlDataSource,
            container: 'menu',
            text: 'Add Data Source...',
            displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add Data Source...', 'ASPxReportsStringId.ReportDesigner_Wizard_AddDataSource'),
            imageClassName: 'dxrd-image-add-datasource',
            imageTemplateName: 'dxrd-svg-menu-add_datasource',
            disabled: isDisabled,
            visible: isVisible,
            selected: external_ko_namespaceObject.observable(false),
            clickAction: () => designerModel._wizardRunner.run('DataSourceWizard')
        };
        this._disposables.push(isDisabled, isVisible);
        const startWizard = () => {
            if (multiQueryDataSourceWizard instanceof external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenDataSourceWizard) {
                designerModel.appMenuVisible(true);
                designerModel.isMenuCollapsed(true);
                menuAction.selected(true);
                multiQueryDataSourceWizard._onClose && multiQueryDataSourceWizard._onClose(() => {
                    menuAction.selected(false);
                    designerModel.isMenuCollapsed(false);
                });
            }
            multiQueryDataSourceWizard.initialize((0,external_DevExpress_Analytics_Wizard_namespaceObject._createDefaultDataSourceWizardState)());
            multiQueryDataSourceWizard.start();
        };
        const closeWizard = () => {
            designerModel.appMenuVisible(false);
            multiQueryDataSourceWizard.isVisible(false);
        };
        designerModel._wizardRunner.registerCommand('DataSourceWizard', () => {
            startWizard();
        }, closeWizard);
        return menuAction;
    }
    _customizeDesignerActions(designerModel, nextCustomizer, exitDesigner, state, callbacks) {
        const report = designerModel.model, reportPreview = designerModel.reportPreviewModel.reportPreview, reportWizard = designerModel.wizard, dataSourceWizard = designerModel.dataSourceWizard, localizationEditor = designerModel.localizationEditor, multiQueryDataSourceWizard = designerModel.multiQueryDataSourceWizard, scriptsEditor = designerModel.scriptsEditor;
        return ((actions) => {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)((0,external_DevExpress_Analytics_Internal_namespaceObject.findFirstItemMatchesCondition)(actions, item => item.id === external_DevExpress_Analytics_Tools_namespaceObject.ActionId.Copy), { textId: StringId.Copy });
            if (reportStorageWebIsRegister()) {
                actions.push({
                    id: actionId_ActionId.NewReport,
                    container: 'menu',
                    text: 'New',
                    displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('New', 'ReportStringId.UD_Capt_NewReport'),
                    imageClassName: 'dxrd-image-newreport',
                    imageTemplateName: 'dxrd-svg-menu-newreport',
                    disabled: external_ko_namespaceObject.observable(false),
                    visible: true,
                    hotKey: { ctrlKey: true, keyCode: 'N'.charCodeAt(0) },
                    clickAction: () => {
                        designerModel.isLoading(true);
                        const wizardState = createReportWizardState();
                        wizardState.reportType = ReportType.Empty;
                        wizardState.reportTemplateID = ReportType[ReportType.Empty];
                        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                        this._createNewReportFromWizardState(reportWizard, designerModel, wizardState, state, deferred);
                        deferred.done(reportModel => {
                            reportWizard.events.call('afterFinish', { state: wizardState, wizardResult: reportModel });
                        }).fail(error => {
                            designerModel.isLoading(false);
                        });
                    }
                });
                actions.push(this._createNewViaWizardAction(reportWizard, designerModel, state));
                actions.push({
                    id: actionId_ActionId.OpenReport,
                    container: 'menu',
                    text: 'Open',
                    displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Open', StringId.Open),
                    imageClassName: 'dxrd-image-open',
                    imageTemplateName: 'dxrd-svg-menu-open',
                    disabled: external_ko_namespaceObject.observable(false),
                    visible: true,
                    hotKey: { ctrlKey: true, keyCode: 'O'.charCodeAt(0) },
                    clickAction: () => {
                        designerModel.openReportDialog.show(designerModel.navigateByReports.currentTab());
                    }
                });
            }
            if (reportWizard) {
                actions.push(this._createDesignInReportWizardAction(reportWizard, designerModel, state));
            }
            actions.push({
                id: actionId_ActionId.ValidateBindings,
                text: 'Validate Bindings',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Validate Bindings', 'ASPxReportsStringId.ReportDesigner_ToolBarItemText_ValidateBindings'),
                imageClassName: 'dxrd-image-validateBindingMode',
                imageTemplateName: 'dxrd-svg-toolbar-validateBindingMode',
                disabled: external_ko_namespaceObject.pureComputed(() => { return !report(); }),
                selected: designerModel.validationMode,
                visible: true,
                hasSeparator: true,
                isContextMenuAction: false,
                clickAction: () => {
                    designerModel.validationMode(!designerModel.validationMode());
                },
            });
            const fullScreenAction = new external_DevExpress_Reporting_Viewer_Internal_namespaceObject.FullScreenActionBase(designerModel.fullScreen, {
                id: actionId_ActionId.FullScreen,
                isContextMenuAction: false,
            });
            actions.push(fullScreenAction);
            this._addDisposable(fullScreenAction);
            if (scriptsEditor) {
                actions.push({
                    id: actionId_ActionId.Scripts,
                    text: 'Scripts',
                    displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Scripts', 'ReportStringId.RepTabCtl_Scripts'),
                    imageClassName: 'dxrd-image-scripts',
                    imageTemplateName: 'dxrd-svg-toolbar-scripts',
                    disabled: external_ko_namespaceObject.pureComputed(() => { return !report(); }),
                    visible: external_ko_namespaceObject.pureComputed(() => { return !scriptsEditor.editorVisible(); }),
                    hotKey: { ctrlKey: true, keyCode: 'R'.charCodeAt(0) },
                    clickAction: () => {
                        scriptsEditor.initialize();
                        scriptsEditor.editorVisible(true);
                    },
                    hasSeparator: true,
                    isContextMenuAction: false,
                });
            }
            if (reportPreview) {
                class PreviewAction extends external_DevExpress_Analytics_Internal_namespaceObject.BaseAction {
                    constructor(reportPreview, model) {
                        super(model);
                        this.visible = !reportPreview.previewVisible;
                        this.addDisposable(reportPreview.events.on('previewVisibleChanged', () => this.visible = !reportPreview.previewVisible));
                    }
                }
                const previewAction = new PreviewAction(reportPreview, {
                    id: actionId_ActionId.Preview,
                    text: 'Preview',
                    displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Preview', 'ASPxReportsStringId.ToolBarItemText_Preview'),
                    imageClassName: 'dxrd-image-preview',
                    imageTemplateName: 'dxrd-svg-preview-print_preview',
                    templateName: reportPreview.canSwitchToDesigner ? 'dxrd-toolbar-two-way-switch' : undefined,
                    disabled: external_ko_namespaceObject.pureComputed(() => { return !report(); }),
                    hotKey: { ctrlKey: true, keyCode: 'P'.charCodeAt(0) },
                    isContextMenuAction: false,
                    clickAction: () => {
                        reportPreview.previewVisible = true;
                        reportPreview._breadcrumb.reset();
                        reportPreview.initialize(ReportPreviewService.initializePreview(report()));
                    },
                    hasSeparator: true
                });
                previewAction.contentData = {
                    items: [
                        { getDisplayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Design', 'ASPxReportsStringId.ToolBarItemText_Design'), active: true },
                        { itemData: previewAction, active: false }
                    ]
                };
                actions.push(previewAction);
                this._addDisposable(previewAction);
            }
            if (dataSourceWizard && (this.options.data?.dataSourceSettings?.allowAddDataSource ?? true)) {
                actions.push({
                    id: actionId_ActionId.AddSqlDataSource,
                    container: 'menu',
                    text: 'Add Data Source...',
                    displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Add Data Source...', 'ASPxReportsStringId.ReportDesigner_Wizard_AddDataSource'),
                    imageClassName: 'dxrd-image-add-datasource',
                    imageTemplateName: 'dxrd-svg-menu-add_datasource',
                    disabled: external_ko_namespaceObject.pureComputed(() => { return !report(); }),
                    visible: false,
                    isContextMenuAction: false,
                    clickAction: () => {
                        dataSourceWizard.initialize((0,external_DevExpress_Analytics_Wizard_namespaceObject._createDefaultDataSourceWizardState)());
                        dataSourceWizard.start();
                        dataSourceWizard.isVisible(true);
                    }
                });
            }
            if (multiQueryDataSourceWizard && (this.options.data?.dataSourceSettings?.allowAddDataSource ?? true)) {
                actions.push(this._createMultiQueryDataSourceWizardAction(multiQueryDataSourceWizard, designerModel));
            }
            if (localizationEditor)
                actions.push(this._createLocalizationModeAction(localizationEditor, report, designerModel));
            const tab = designerModel.navigateByReports.currentTab;
            actions.push({
                id: actionId_ActionId.Save,
                container: 'menu',
                text: 'Save',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Save', StringId.Save),
                imageClassName: 'dxrd-image-save',
                imageTemplateName: 'dxrd-svg-menu-save',
                disabled: external_ko_namespaceObject.pureComputed(() => { return !report() || (tab() && !tab().isDirty()); }),
                visible: true,
                hotKey: { ctrlKey: true, keyCode: 'S'.charCodeAt(0) },
                clickAction: () => {
                    if (reportStorageWebIsRegister()) {
                        const currentTab = designerModel.navigateByReports.currentTab();
                        if (!currentTab.isDirty()) {
                            return;
                        }
                        if (!currentTab.context().url()) {
                            designerModel.saveReportDialog.show(currentTab);
                        }
                        else {
                            const args = { report: currentTab.context().report, url: currentTab.context().url(), cancel: false };
                            callbacks.reportSaving && callbacks.reportSaving(args);
                            if (args.cancel)
                                return;
                            ReportStorageWeb.setData(currentTab.context().report.serialize(), currentTab.context().url())
                                .done((result) => {
                                currentTab.isDirty(false);
                                callbacks.reportSaved && callbacks.reportSaved({ report: currentTab.context().report, url: currentTab.context().url() });
                                (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)((0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('The report has been successfully saved.', 'ASPxReportsStringId.ReportDesigner_SaveReport_Message_OK'), external_DevExpress_Analytics_Internal_namespaceObject.NotifyType.success);
                            }).fail(() => {
                                callbacks.onServerError && callbacks.onServerError({ state: 'save', model: { report: currentTab.context().report, url: currentTab.context().url() } });
                            });
                        }
                    }
                    else {
                        report().save();
                    }
                }
            });
            if (reportStorageWebIsRegister()) {
                actions.push({
                    id: actionId_ActionId.SaveAs,
                    container: 'menu',
                    text: 'Save As',
                    displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Save As', StringId.SaveAs),
                    imageClassName: 'dxrd-image-saveas',
                    imageTemplateName: 'dxrd-svg-menu-saveas',
                    disabled: external_ko_namespaceObject.pureComputed(() => { return !report(); }),
                    visible: true,
                    clickAction: () => {
                        designerModel.saveReportDialog.show(designerModel.navigateByReports.currentTab());
                    }
                });
            }
            actions.push({
                id: actionId_ActionId.Exit,
                container: 'menu',
                text: 'Exit',
                displayText: () => (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Exit', 'ReportStringId.UD_Capt_Exit'),
                imageClassName: 'dxrd-image-exit',
                imageTemplateName: 'dxrd-svg-menu-exit',
                disabled: external_ko_namespaceObject.observable(false),
                visible: true,
                clickAction: () => {
                    designerModel.navigateByReports.closeAll().done(() => {
                        exitDesigner && exitDesigner();
                    });
                }
            });
            nextCustomizer && nextCustomizer(actions);
        });
    }
    _patchReportBeforeRedesign(reportViewModel, state) {
        let useInitialDataSource = false;
        if (!state.newDataSource && state.dataSource) {
            const stateDsInfo = _restoreDataSourceFromState(state.dataSource);
            const dataSourceInfo = reportViewModel.dataSourceHelper().findDataSourceInfoByName(stateDsInfo.name);
            if (dataSourceInfo) {
                useInitialDataSource = true;
                if (reportViewModel.dataSource()?.name() !== stateDsInfo.name) {
                    reportViewModel.dataSource(dataSourceInfo.data);
                }
            }
        }
        const reportJson = reportViewModel.serialize();
        delete reportJson.LocalizationItems;
        return {
            json: JSON.stringify({ 'XtraReportsLayoutSerializer': reportJson }),
            useInitialDataSource: useInitialDataSource
        };
    }
    addContextActions(func = (settings) => {
        const isDisabled = () => this.buildingModel.model() && this.buildingModel.model().language() !== external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture;
        const disposableProviders = [
            new ReportElementActions(this.buildingModel.surface, this.buildingModel.selection),
            new ElementsGroupActions(this.buildingModel.surface, this.buildingModel.selection),
            new ReportActions(this._designerCallbacks.componentAdded, this.buildingModel),
            new TableRowActions(this.buildingModel.selection, this._designerCallbacks.componentAdded, isDisabled),
            new TableCellActions(this.buildingModel.selection, this._designerCallbacks.componentAdded, isDisabled),
            new TextElementAction(this.buildingModel.selection),
            new TableCellGroupActions(this.buildingModel.selection),
            new PdfContentActions(this.buildingModel.selection, isDisabled),
            new CrossTabActions(this._converters, isDisabled),
            new PivotGridActions(this._converters, isDisabled),
            new ChartActions(this.buildingModel),
        ];
        this._disposables.push(...disposableProviders);
        settings.actionProviders = disposableProviders;
        settings.createDefaultGroupAction(this.buildingModel.editableObject, this.buildingModel.undoEngine);
        settings.createDefaultContextMenuActions(this.buildingModel.editableObject, this.buildingModel.undoEngine);
    }) {
        super.addContextActions(func);
        return this;
    }
    addActionList(actionListFunc = () => {
        const designerShortcutsEnabled = external_ko_namespaceObject.computed(() => {
            const isDesignMode = this.buildingModel.designMode();
            const isWizardVisible = this.buildingModel.wizard && this.buildingModel.wizard.isVisible();
            const isDataSourceWizardVisible = this.buildingModel.dataSourceWizard && this.buildingModel.dataSourceWizard.isVisible();
            const isMultiQueryDataSourceWizardVisible = this.buildingModel.multiQueryDataSourceWizard && this.buildingModel.multiQueryDataSourceWizard.isVisible();
            const isLocalizationModeVisible = this.buildingModel.localizationMode && this.buildingModel.localizationMode();
            return isDesignMode && !isWizardVisible && !isDataSourceWizardVisible && !isMultiQueryDataSourceWizardVisible && !isLocalizationModeVisible;
        });
        this._addDisposable(designerShortcutsEnabled);
        const actions = new external_DevExpress_Analytics_Internal_namespaceObject.ActionLists(this.buildingModel.surface, this.buildingModel.selection, this.buildingModel.undoEngine, this._customizeDesignerActions(this.buildingModel, this._designerCallbacks.customizeActions, this._designerCallbacks.exitDesigner, () => this._reportcontext() && this._reportcontext().state() || this.buildingModel.state, this._designerCallbacks), designerShortcutsEnabled, reportCopyPasteStrategy(this._designerCallbacks.componentAdded), this.buildingModel.zoomStep, _ => !this.buildingModel.canAddItems());
        this.addElement('actionStorage', () => (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, this._createActionsStorage(actions.menuItems), this._createActionsStorage(actions.toolbarItems)));
        return actions;
    }) {
        super.addActionList(actionListFunc);
        return this;
    }
    _createChartDesignerPart(context) {
        const chartValueBindingProvider = external_ko_namespaceObject.computed(() => context() && context().chartValueBindingProvider);
        this._addDisposable(chartValueBindingProvider);
        const chartDesignerOptions = createChartDesignerOptions(this.buildingModel, this.buildingModel.dataSourceHelper, this.buildingModel.model, this.buildingModel.parameters, chartValueBindingProvider, this._accessibilityProvider);
        this.addElement('runChartDesigner', () => (chart) => {
            chartDesignerOptions.run(chart);
        });
        this.addElement('chartDataSources', () => external_ko_namespaceObject.computed(() => {
            const pivotGrids = this.buildingModel.controlsHelper.allControls().filter(item => { return item instanceof XRPivotGridViewModel; }).map(item => { return { displayName: item.name, value: item }; });
            const usedDataSources = this.buildingModel.dataSourceHelper() && this.buildingModel.dataSourceHelper().usedDataSources() && this.buildingModel.dataSourceHelper().usedDataSources().map(item => { return { displayName: item.name, value: item.data }; }), result = [].concat(pivotGrids, usedDataSources);
            return result;
        }));
        this._addDisposable(this.buildingModel.controlsHelper.allControls.subscribe((newArr) => {
            newArr.filter(item => { return item instanceof XRChartViewModel; }).forEach((chart) => {
                if (chart.isPivotGridDataSource() && newArr.indexOf(chart.dataSource()) === -1)
                    chart.dataSource(null);
            });
        }));
        this._addDisposable(chartDesignerOptions);
        return { id: null, templateName: ReportDesignerElements.ChartDialog, model: chartDesignerOptions };
    }
    _createWizardPart(wizardName, model) {
        if (model instanceof external_DevExpress_Analytics_Wizard_namespaceObject.FullscreenWizard) {
            return { id: ReportDesignerAddOns[wizardName + 'Fullscreen'], templateName: ReportDesignerAddOns[wizardName + 'Fullscreen'].split('#')[0], model: model };
        }
        return { id: ReportDesignerAddOns[wizardName], templateName: ReportDesignerAddOns[wizardName].split('#')[0], model: model };
    }
    addActivatedExpressionEditor() {
        const editor = external_ko_namespaceObject.observable(null);
        this.addElement('activatedExpressionEditor', () => editor);
        this.addElement('activateExpressionEditor', () => (action) => {
            action.action('');
            editor(action.innerTemplate.data);
        });
        this._addDisposable({ dispose: () => editor(null) });
        return this;
    }
    addParts(func = (parts) => {
        const reportConverter = new ReportConverter(this.buildingModel.controlsHelper, this.buildingModel.undoEngine, this._dataBiningMode);
        if (this._defaultCrossTabControl === 'XRCrossTab') {
            this._converters.push(new CrossTabConverter(this.buildingModel.selection, this._reportcontext), new PivotGridConverter(this.buildingModel.selection));
        }
        this._converters.push(reportConverter);
        this._addDisposable(this._reportcontext.subscribe((newVal) => {
            if (newVal)
                reportConverter.convert(newVal.report, this._convertBindingsToExpressions);
        }));
        [external_DevExpress_Analytics_Internal_namespaceObject.DesignerBaseElements.MenuButton, external_DevExpress_Analytics_Internal_namespaceObject.DesignerBaseElements.Toolbox].forEach((item) => {
            const oldItem = parts.filter(part => part.id === item)[0];
            const index = parts.indexOf(oldItem);
            parts.splice(index, 1);
        });
        parts.push({ id: external_DevExpress_Analytics_Internal_namespaceObject.DesignerBaseElements.GroupedToolbox, templateName: external_DevExpress_Analytics_Internal_namespaceObject.DesignerBaseElements.GroupedToolbox, model: this.buildingModel }, { id: ReportDesignerElements.NavigationPanel, templateName: ReportDesignerElements.NavigationPanel, model: this.buildingModel.navigateByReports }, { id: null, templateName: ReportDesignerElements.ReportDialog, model: this.buildingModel.saveReportDialog }, { id: null, templateName: ReportDesignerElements.ReportDialog, model: this.buildingModel.saveReportDialogLight }, { id: null, templateName: ReportDesignerElements.ReportDialog, model: this.buildingModel.openReportDialog }, { id: ReportDesignerElements.MenuButton, templateName: ReportDesignerElements.MenuButton, model: this.buildingModel }, this._createChartDesignerPart(this._reportcontext), { id: null, templateName: ReportDesignerElements.Parameters, model: this.buildingModel.parameters }, ...this._converters.map(model => { return { id: null, templateName: ReportDesignerElements.ReportConverterDialog, model: model }; }));
        parts.push({ id: ReportDesignerElements.ContextMenu, templateName: ReportDesignerElements.ContextMenu, model: this.buildingModel });
        ContextMenusEnabled.subscribe(newValue => {
            this.getModel().ContextMenusEnabled(newValue);
        });
        return parts;
    }) {
        if (!this.getModel().ContextMenusEnabled)
            this.getModel().ContextMenusEnabled = external_ko_namespaceObject.observable(ContextMenusEnabled());
        else
            this.getModel().ContextMenusEnabled(ContextMenusEnabled());
        super.addParts(func);
        this._designerCallbacks.customizeParts && this._designerCallbacks.customizeParts(this.buildingModel.parts);
        return this;
    }
    addDefaultAddons(addons = [
        { id: ReportDesignerAddOns.Preview, templateName: ReportDesignerAddOns.Preview, model: this.buildingModel.reportPreviewModel.getViewModel() },
        this._createWizardPart('ReportWizard', this.buildingModel.wizard),
        { id: ReportDesignerAddOns.DataSourceWizard, templateName: ReportDesignerAddOns.DataSourceWizard.split('#')[0], model: this.buildingModel.dataSourceWizard },
        this._createWizardPart('MultiQueryDataSourceWizard', this.buildingModel.multiQueryDataSourceWizard),
        { id: ReportDesignerAddOns.LocalizationEditor, templateName: ReportDesignerAddOns.LocalizationEditor.split('#')[0], model: this.buildingModel.localizationEditor },
        { id: ReportDesignerAddOns.ErrorPanel, templateName: ReportDesignerAddOns.ErrorPanel, model: this.buildingModel.errorPanelViewModel },
        { id: ReportDesignerAddOns.ExpressionEditor, templateName: ReportDesignerAddOns.ExpressionEditor, model: this.buildingModel.activatedExpressionEditor }
    ]) {
        this.addElement('addOns', () => external_ko_namespaceObject.observableArray(addons));
        return this;
    }
    tryAddSqlDataSourceEditorAddon(relationsEditor = this._sqlDataSourceEditor.relationsEditor) {
        if (relationsEditor)
            this.buildingModel.addOns.push({ id: ReportDesignerAddOns.MasterDetailEditor, templateName: ReportDesignerAddOns.MasterDetailEditor, model: relationsEditor });
        return this;
    }
    tryAddFederationDataSourceEditorAddon(relationsEditor = this._federationDataSourceEditor.relationsEditor, manageQueriesEditor = this._federationDataSourceEditor.manageQueriesEditor, queriesPopupHelper = this._federationDataSourceEditor.queriesPopupHelper) {
        if (relationsEditor)
            this.buildingModel.addOns.push({ id: ReportDesignerAddOns.MasterDetailEditor, templateName: ReportDesignerAddOns.MasterDetailEditor, model: relationsEditor });
        if (manageQueriesEditor)
            this.buildingModel.addOns.push({ id: ReportDesignerAddOns.FederatedManageQueriesEditor, templateName: ReportDesignerAddOns.FederatedManageQueriesEditor, model: manageQueriesEditor });
        if (queriesPopupHelper)
            this.buildingModel.addOns.push({ id: ReportDesignerAddOns.FederatedQueriesPopups, templateName: ReportDesignerAddOns.FederatedQueriesPopups, model: queriesPopupHelper });
        return this;
    }
    tryAddScriptEditorAddon(isScriptsDisabled) {
        if (this._tryAddScriptEditor(isScriptsDisabled))
            this.buildingModel.addOns.push({ id: ReportDesignerAddOns.ScriptEditor, templateName: ReportDesignerAddOns.ScriptEditor, model: this.buildingModel.scriptsEditor });
        return this;
    }
    tryAddInlineRichTextEdit() {
        const inlineRichEdit = registerRichEditInline()(this._selection);
        if (inlineRichEdit) {
            this.addElement('richInlineControl', () => inlineRichEdit);
        }
        return this;
    }
    onContextChanged(subreports, func = (context) => {
        if (context) {
            this.buildingModel.selectedPath(null);
            if (this.buildingModel.toolboxItems) {
                this.buildingModel.toolboxItems.forEach((item) => { item.disabled(!this.buildingModel.canAddItems()); });
            }
        }
        else {
            if (this.buildingModel.selection) {
                this.buildingModel.selection.clear();
                this.buildingModel.selection.focused(this.buildingModel.surface());
            }
            this.buildingModel.editableObject && this.buildingModel.editableObject(null);
            this.buildingModel.toolboxItems && this.buildingModel.toolboxItems.forEach((item) => { item.disabled(true); });
            this.buildingModel.popularProperties && this.buildingModel.popularProperties.cleanEditors();
        }
    }) {
        func(this._reportcontext());
        this._addDisposable(this._reportcontext.subscribe((newVal) => func(newVal)));
        return this;
    }
    configurateRtl(rtl) {
        this.rtl = !!rtl;
        external_DevExpress_config_default()({ rtlEnabled: !!this.rtl });
        return this;
    }
    configureReportStorageRegistration(reportStorageIsRegister, allowMDI) {
        reportStorageWebIsRegister(reportStorageIsRegister === undefined ? reportStorageWebIsRegister() : reportStorageIsRegister);
        this._allowMDI = reportStorageWebIsRegister() ? allowMDI : false;
        return this;
    }
    applyUri(uriSettings) {
        settings_HandlerUri(uriSettings.reportDesignerUri || settings_HandlerUri());
        HandlerUri(uriSettings.reportDesignerUri);
        this._previewUri = uriSettings.previewUri;
        return this;
    }
    initBindingMode(dataBiningMode, convertBindingsToExpressions) {
        this._dataBiningMode = dataBiningMode;
        this._convertBindingsToExpressions = convertBindingsToExpressions;
        return this;
    }
    initDefaultCrossTabControl(defaultCrossTabControl) {
        this._defaultCrossTabControl = defaultCrossTabControl;
        DefaultCrossTabControl(defaultCrossTabControl || 'XRCrossTab');
        return this;
    }
    registerControls(dataBindingMode, reportItemsProvider) {
        DataBindingMode(dataBindingMode || 'Expressions');
        _registerControls_registerControls(reportItemsProvider);
        return this;
    }
    registerCustomControls(controls) {
        registerCustomControls(controls);
        return this;
    }
    registerCustomExpressions(globalExpressions, reportExpressions) {
        registerCustomGlobalExpressions(globalExpressions);
        registerCustomReportExpressions(reportExpressions);
        return this;
    }
    addCallbacks(callbacks) {
        this._callbacks = callbacks;
        if (!this._callbacks.designer)
            this._callbacks.designer = {};
        if (!this._callbacks.preview)
            this._callbacks.preview = {};
        this._callbacks.designer.fieldLists = this._callbacks.designer.fieldLists || ReportDataSourceService.fieldListCallback;
        return this;
    }
    addProcessErrorCallback(processError = this._designerCallbacks && this._designerCallbacks.onServerError) {
        this._disposables.push((0,external_DevExpress_Analytics_Internal_namespaceObject.processErrorEvent)(processError));
        return this;
    }
    runCustomizeToolboxEvent(customizeToolbox = this._designerCallbacks && this._designerCallbacks.customizeToolbox) {
        customizeToolbox && customizeToolbox(controlsFactory());
        return this;
    }
    initCultureInfo(cultureInfoList) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, external_DevExpress_Reporting_Internal_namespaceObject.cultureInfo, cultureInfoList);
        return this;
    }
    updateFont(fontSet) {
        if (fontSet) {
            let fonts = {};
            if (fontSet instanceof Array)
                fontSet.forEach(fontName => fonts[fontName] = fontName);
            else
                fonts = fontSet;
            this.buildingModel.updateFont(fonts);
            this.buildingModel.sortFont();
        }
        return this;
    }
    initFormatStringPatterns(formatStringData) {
        if (formatStringData) {
            formatStringData.standardPatterns && Object.keys(formatStringData.standardPatterns).forEach((propName) => {
                if (!external_DevExpress_Analytics_Widgets_Internal_namespaceObject.formatStringStandardPatterns[propName])
                    external_DevExpress_Analytics_Widgets_Internal_namespaceObject.formatStringStandardPatterns[propName] = formatStringData.standardPatterns[propName];
                else
                    external_DevExpress_Analytics_Widgets_Internal_namespaceObject.formatStringStandardPatterns[propName].patterns = formatStringData.standardPatterns[propName].patterns;
            });
            formatStringData.customPatterns && Object.keys(formatStringData.customPatterns).forEach((propName) => {
                formatStringEditorCustomSet()[propName] = formatStringData.customPatterns[propName];
            });
        }
        return this;
    }
    addPopularProperties(controlsFactory, accessibilityProvider) {
        super.addPopularProperties(controlsFactory, this._accessibilityProvider);
        this.addElement('popularVisible', () => external_ko_namespaceObject.pureComputed(() => {
            if (!PropertyGrid.TaskGroupVisible())
                return false;
            return this.buildingModel.popularProperties._get('_editors').some((editor) => editor._get('visible')) ||
                this.buildingModel.contextActions && this.buildingModel.contextActions().length > 0
                    && this.buildingModel.contextActions().some(action => !action.isContextMenuAction);
        }));
        const groupActionsVisible = external_ko_namespaceObject.observable(PropertyGrid.QuickActionsVisible());
        PropertyGrid.QuickActionsVisible.subscribe((newValue) => groupActionsVisible(newValue ?? false));
        this.addElement('groupActionsVisible', () => groupActionsVisible);
        return this;
    }
    addInlineTextEdit(func) {
        this.addElement('inlineTextEdit', func ? func : () => new external_DevExpress_Analytics_Internal_namespaceObject.InlineTextEdit(this._selection));
        return this;
    }
    addStylesProjection(styles = external_ko_namespaceObject.pureComputed(() => { return this.buildingModel.model() && this.buildingModel.model().styles; })) {
        this.addElement('styles', () => styles);
        return this;
    }
    addFormattingRulesProjection(rules = external_ko_namespaceObject.pureComputed(() => { return this.buildingModel.model() && this.buildingModel.model().formattingRuleSheet; })) {
        this.addElement('formattingRuleSheet', () => rules);
        return this;
    }
    addReportExplorerProvider(reportExplorerProvider = new external_DevExpress_Analytics_Internal_namespaceObject.ObjectExplorerProvider([{ model: this.buildingModel.model, name: 'Report', className: 'master_report' }], ['bands', 'controls', 'rows', 'cells'], external_ko_namespaceObject.observable(null))) {
        this.addElement('reportExplorerProvider', () => reportExplorerProvider);
        return this;
    }
    addControlsProjection(controlsHelper = this.buildingModel.controlsHelper) {
        this.addElement('getControls', () => (target) => {
            return external_ko_namespaceObject.pureComputed(() => {
                return this._getControls(controlsHelper.getControls(external_ko_namespaceObject.unwrap(target)), (item) => {
                    return !(item instanceof BandViewModel || item instanceof ReportViewModel);
                });
            });
        });
        this.addElement('controls', () => this._getControls(controlsHelper.allControls, (item) => { return !(item instanceof BandViewModel || item instanceof ReportViewModel); }));
        return this;
    }
    addBandsProjection(controlsHelper = this.buildingModel.controlsHelper) {
        this.addElement('bands', () => (filter, IsNoneNeaded) => {
            return this._getControls(controlsHelper.allControls, (item) => {
                return item instanceof BandViewModel && (filter ? filter(item) : true);
            }, IsNoneNeaded);
        });
        return this;
    }
    addWizardRunner() {
        this.addElement('_wizardRunner', () => new WizardRunner({
            visible: this.getModel().appMenuVisible,
            collapsed: this.getModel().isMenuCollapsed
        }));
        return this;
    }
    addWizards(connectionStrings, wizardSettings, customizeSettingsFunc) {
        const usedDataSources = external_ko_namespaceObject.pureComputed(() => {
            const dataSources = this.buildingModel.dataSourceHelper() && this.buildingModel.dataSourceHelper().usedDataSources();
            return dataSources && dataSources.filter(x => !!x.data);
        });
        const predefinedDataSources = external_ko_namespaceObject.pureComputed(() => this.buildingModel.dataSourceHelper()?.availableDataSources || []);
        this._disposables.push(usedDataSources, predefinedDataSources);
        const initializerSettings = new WizardsInitializerSettings(connectionStrings, wizardSettings, this._designerCallbacks, this.rtl, usedDataSources, predefinedDataSources);
        this.addElement('connections', () => connectionStrings);
        customizeSettingsFunc(initializerSettings);
        if (initializerSettings.reportWizard) {
            this.addElement('registerReportWizardPages', () => initializerSettings.registerReportWizardPages);
            this.addElement('wizard', () => initializerSettings.reportWizard);
        }
        if (initializerSettings.dataSourceWizard) {
            this.addElement('dataSourceWizard', () => initializerSettings.dataSourceWizard);
        }
        if (initializerSettings.multiQueryDataSourceWizard) {
            this.addElement('registerMultiQueryDataSourceWizardPages', () => initializerSettings.registerMultiQueryDataSourceWizardPages);
            this.addElement('multiQueryDataSourceWizard', () => initializerSettings.multiQueryDataSourceWizard);
        }
        this._federationDataSourceEditor = initializerSettings.federationDataSourceEditor;
        this._sqlDataSourceEditor = initializerSettings.sqlDataSourceEditor;
        this._jsonDataSourceEditor = initializerSettings.jsonDataSourceEditor;
        this._objectDataSourceEditor = initializerSettings.objectDataSourceEditor;
        this._dataSourceActionProvider = initializerSettings.dataSourceActionProvider;
        return this;
    }
    addLocalizationEditor() {
        this.addElement('localizationEditor', () => new LocalizationEditor({
            controlScrollingTool: this.buildingModel.controlScrollingTool,
            report: () => this.buildingModel.model(),
            selection: this.buildingModel.selection
        }));
        this.addElement('localizationMode', () => external_ko_namespaceObject.observable(false));
        this.addElement('isLocalized', () => (item) => this.buildingModel.model() && this.buildingModel.model()._localization.hasCulture(item));
        return this;
    }
    addStaticContext() {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.appendStaticContextToRootViewModel)(this.buildingModel, {
            config: (external_DevExpress_config_default()),
            _static: {
                ...external_DevExpress_Analytics_Internal_namespaceObject.staticContext._static,
                PivotGridFieldViewModel: PivotGridFieldViewModel,
                SortBySummaryInfoCondition: SortBySummaryInfoCondition,
                LookUpValue: LookUpValue,
                DragDropHandler: external_DevExpress_Analytics_Internal_namespaceObject.DragDropHandler,
                getControlFullName: external_DevExpress_Analytics_Internal_namespaceObject.getControlFullName,
                editorTemplates: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates,
                formattingRuleSerializationsInfo: formattingRuleSerializationsInfo,
                StylesEditorHeaderModel: StylesEditorHeaderModel,
                TreeListController: external_DevExpress_Analytics_Widgets_Internal_namespaceObject.TreeListController,
                TableOfContentsLevel: TableOfContentsLevel,
                propertiesGridEditorsPaddingLeft: external_DevExpress_Analytics_Widgets_Internal_namespaceObject.propertiesGridEditorsPaddingLeft,
                CustomizeLabelPage: CustomizeLabelPage,
                formatSearchResult: external_DevExpress_Reporting_Viewer_Internal_namespaceObject.formatSearchResult
            }
        });
        return this;
    }
    tryApplyBindings(applyBindings, element) {
        if (applyBindings) {
            this._designerCallbacks.beforeRender && this._designerCallbacks.beforeRender(this);
            (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).children().remove();
            external_ko_namespaceObject.applyBindings(this.buildingModel, element);
            this.buildingModel.afterRender();
            const dispose = () => {
                this.buildingModel.dispose();
            };
            (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, dispose);
        }
        return this;
    }
    dispose() {
        window.removeEventListener('resize', this._updateCallback);
        window.removeEventListener('resize', this.buildingModel.reportPreviewModel.resizeCallback);
        super.dispose();
        controlsFactory().dispose();
        this.removeProperties();
    }
    constructor(options) {
        super();
        this.options = options;
        this._onAfterRenderCallbacks = [];
        this._converters = [];
        this._customMergeEngine = new CustomMergingEngine();
        this._updateCallback = null;
        this._selection = options.selection || new external_DevExpress_Analytics_Internal_namespaceObject.SurfaceSelection;
        const serializer = new external_DevExpress_Analytics_Utils_namespaceObject.ModelSerializer();
        this.configurateRtl(options.rtl)
            .configureReportStorageRegistration(options.reportStorageWebIsRegister, options.allowMDI)
            .addCallbacks(options.callbacks)
            .addElement('state', () => options.state)
            .addElement('availableDataSources', () => {
            return (options.availableDataSources || []).map((object) => {
                return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, object, { data: createNewObjectItem(object.data, undefined, serializer) });
            });
        });
        const navigation = new NavigateByReports({
            allowMDI: this._allowMDI,
            callbacks: this._designerCallbacks,
            knownEnums: options.knownEnums,
            reportUrl: options.reportUrl,
            initOptions: {
                availableDataSources: options.availableDataSources,
                state: options.state,
                parameterEditingSettings: options.data?.parameterEditingSettings
            },
            selection: this._selection
        });
        const undoEngine = external_ko_namespaceObject.computed(() => { return navigation.currentTab() && navigation.currentTab().undoEngine; });
        this._addDisposable(undoEngine);
        this._reportcontext = external_ko_namespaceObject.computed({
            read: () => {
                return navigation.currentTab() && navigation.currentTab().context();
            },
            write: (newVal) => {
                navigation.currentTab() && navigation.currentTab().context(newVal);
            }
        });
        const model = external_ko_namespaceObject.computed({
            read: () => {
                return this._reportcontext() && this._reportcontext().report;
            },
            write: (newVal) => {
                if (!this.isDisposing)
                    navigation.changeContext(newVal);
            }
        });
        const surface = external_ko_namespaceObject.computed(() => this._reportcontext() && this._reportcontext().surface);
        const canAddItems = external_ko_namespaceObject.computed(() => model() && model().language() === external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture);
        this._addDisposable(this._reportcontext);
        this._addDisposable(model);
        this._addDisposable(surface);
        this._addDisposable(canAddItems);
        this._addDisposable(canAddItems.subscribe((newVal) => {
            this.buildingModel.toolboxItems && this.buildingModel.toolboxItems.forEach(x => x.disabled(!newVal));
        }));
        this.initializeContext({ model, surface, undoEngine });
        this.mapOnContext();
        this.addElement('canAddItems', () => canAddItems);
        this.addElement('navigateByReports', () => navigation);
        this.addElement('getTabs', () => () => navigation.tabs());
        this.addElement('closeTab', () => (tab, force = false) => navigation.removeTab(tab, force));
        this._addDisposable(this._reportcontext.subscribe((newVal) => {
            if (this.buildingModel.propertyGrid) {
                this.buildingModel.propertyGrid.cleanEditors();
                this.buildingModel.propertyGrid.editorsRendered(!this.buildingModel.propertyGrid.isSortingByGroups());
            }
            this.buildingModel.popularProperties && this.buildingModel.popularProperties.cleanEditors();
        }));
        this._selection.focused(surface());
        this._addDisposable(surface.subscribe((newValue) => {
            if (!newValue)
                this._selection.reset();
            else
                this._selection.focused(newValue);
        }));
        const isDefaultLanguage = external_ko_namespaceObject.computed(() => {
            return this.buildingModel.model && this.buildingModel.model() ? this.buildingModel.model().language() == external_DevExpress_Reporting_Metadata_namespaceObject.defaultCulture : false;
        });
        this._addDisposable(isDefaultLanguage);
        this._accessibilityProvider = new LocaliziblePropertiesAccessibilityProvider(isDefaultLanguage);
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_initializer.js

















function _createReportDesigner(element, data, callbacks, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings = true) {
    const selection = new external_DevExpress_Analytics_Internal_namespaceObject.SurfaceSelection();
    const initializer = new ReportDesignerInitializer({
        allowMDI: data.allowMDI,
        reportStorageWebIsRegister: data.reportStorageWebIsRegister,
        callbacks: callbacks,
        rtl: rtl,
        selection: selection,
        availableDataSources: data.availableDataSources,
        knownEnums: knownEnums,
        reportUrl: data.reportUrl,
        state: data.state,
        reportPreviewSettings: data.reportPreviewSettings,
        data: data
    });
    data.wizardSettings = ReportWizardSettings.prototype.createDefault(data.wizardSettings);
    return initializer
        .applyUri({ reportDesignerUri: designerHandlerUri, previewUri: previewHandlerUri })
        .initBindingMode(data.dataBindingMode, data.convertBindingsToExpressions)
        .initDefaultCrossTabControl(data.defaultCrossTabControl)
        .subscribeIncomeReport(data.report, data.reportUrl, data.dataSourceRefs, knownEnums)
        .addFlagsAndInitProperties(element)
        .addReportUrls(data.subreports)
        .addPreview({
        callbacks: callbacks.preview,
        element: element,
        handlerUri: previewHandlerUri,
        parametersInfo: { knownEnums },
        rtl: rtl,
        progressBarSettings: data.reportPreviewSettings?.progressBarSettings,
        exportSettings: data.reportPreviewSettings?.exportSettings,
        searchSettings: data.reportPreviewSettings?.searchSettings
    })
        .initializeCalculatedFieldsSource()
        .initializeFieldListItemsExtenders()
        .initializeParameters(data.parameterEditingSettings)
        .initializeWatermarks()
        .initializeFieldListProvider()
        .initializeReportItemsProvider()
        .initializeDataBindingsProvider()
        .initializeDisplayNameProvider()
        .initializeExpressionDisplayNameProvider()
        .initializeDataSourceHelper()
        .registerCustomExpressions(data.customGlobalExpressions, data.customReportExpressions)
        .registerControls(data.dataBindingMode, initializer.buildingModel.reportItemsProvider)
        .registerCustomControls(data.customControls)
        .runCustomizeToolboxEvent()
        .addSelection()
        .addToolboxItems(() => (0,external_DevExpress_Analytics_Internal_namespaceObject.getToolboxItems)(controlsFactory().controlsMap, 'misc'))
        .addGroupedToolboxItems()
        .addControlProperties(Object.keys(groups).reduce((editors, groupName) => {
        if (groupName !== 'Styles')
            editors = editors.concat(groups[groupName].info);
        else
            editors.push(stylesObj);
        return editors;
    }, []), groups)
        .addStaticContext()
        .addContextActions()
        .addPopularProperties(controlsFactory())
        .addControlsHelper()
        .setControlsHelperFilter((control) => {
        if (!isNotParameter(control))
            return false;
        if (!(data?.dataSourceSettings?.allowEditDataSource ?? true)) {
            return !(control instanceof ComponentsModel);
        }
        return true;
    })
        .addProcessErrorCallback()
        .initCultureInfo(data.cultureInfoList)
        .updateFont(data.cultureInfoList && data.cultureInfoList.fontSet)
        .initFormatStringPatterns(data.formatStringData)
        .onContextChanged(data.subreports)
        .addMenu()
        .addInlineTextEdit()
        .addNavigateToControl(element)
        .addLocalizationEditor()
        .tryAddInlineRichTextEdit()
        .addReportDialogs((settings) => {
        const reportUrls = initializer.buildingModel.reportUrls;
        settings.createOpenReportDialog(reportUrls, initializer.buildingModel.navigateByReports);
        settings.createSaveReportDialog(reportUrls);
        settings.createSaveReportDialogLight();
    })
        .addWizardRunner()
        .addWizards({
        sql: external_ko_namespaceObject.observableArray(data.wizardConnections && data.wizardConnections.sql),
        json: external_ko_namespaceObject.observableArray(data.wizardConnections && data.wizardConnections.json)
    }, data.wizardSettings, (settings) => {
        const model = initializer.buildingModel;
        const state = () => initializer.reportContext() && initializer.reportContext().state() || initializer.buildingModel.state;
        settings.createMultipleQueriesWizardCallbacks(initializer.buildingModel.dataBindingsProvider, model.model, state);
        settings.createSqlDataSourceWizard(data.disableCustomSql, initializer.buildingModel.dataBindingsProvider, model.model);
        settings.createMultiQueryDataSourceWizard(data.disableCustomSql, undefined, data.allowCreateNewJsonConnection);
        settings.createSqlDataSourceEditor({
            dataSourceHelper: model.dataSourceHelper,
            fieldListProvider: model.fieldListProvider,
            model: model.model,
            dataSourceWizard: settings.dataSourceWizard,
            undoEngine: model.undoEngine,
            rtl: model.rtl,
            allowEditDataSource: data?.dataSourceSettings?.allowEditDataSource ?? true,
            allowRemoveDataSource: data?.dataSourceSettings?.allowRemoveDataSource ?? true
        });
        settings.createReportWizard({
            data: data,
            dataSourceHelper: model.dataSourceHelper,
            fieldListProvider: model.fieldListProvider,
            isDirty: model.isDirty,
            isLoading: model.isLoading,
            model: model.model,
            navigation: model.navigateByReports,
            state: state,
            undoEngine: model.undoEngine
        });
    })
        .initializeFieldListActionProviders()
        .addTabPanel()
        .addErrorPanelViewModel(element, data.errorPanelSettings || {})
        .addActivatedExpressionEditor()
        .addDefaultAddons()
        .tryAddSqlDataSourceEditorAddon()
        .tryAddFederationDataSourceEditorAddon()
        .tryAddScriptEditorAddon(data.isScriptsDisabled)
        .addActionList()
        .addStylesProjection()
        .addFormattingRulesProjection()
        .addReportExplorerProvider()
        .addControlsProjection()
        .addBandsProjection()
        .addParts()
        .tryApplyBindings(applyBindings, element)
        .initializeUIEffects(applyBindings, element)
        .addSmartTagModel()
        .addShowPreviewMethod()
        .addOpenReportMethod()
        .getModel();
}
function createReportDesigner(element, data, callbacks, localizationSettings, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings = true) {
    const localizationPromises = [];
    if (localizationSettings && localizationSettings.localization) {
        (0,external_DevExpress_Analytics_Utils_namespaceObject.addCultureInfo)({ messages: localizationSettings.localization });
    }
    callbacks && callbacks.designer && callbacks.designer.customizeLocalization && callbacks.designer.customizeLocalization(localizationPromises);
    return (0,external_DevExpress_Analytics_Internal_namespaceObject.resolveFromPromises)(localizationPromises, () => {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.troubleshootingPageWrapper)(() => {
            return _createReportDesigner(element, data, callbacks, knownEnums, designerHandlerUri, previewHandlerUri, rtl, applyBindings);
        }, data.developmentMode, element);
    }).done((designerModel) => {
        if (callbacks && callbacks.designer && callbacks.designer.customizeWizard) {
            callbacks.designer.customizeWizard('ReportWizard', designerModel.wizard);
            callbacks.designer.customizeWizard('SingleQueryDataSourceWizard', designerModel.dataSourceWizard);
            if (designerModel.multiQueryDataSourceWizard) {
                callbacks.designer.customizeWizard('DataSourceWizard', designerModel.multiQueryDataSourceWizard);
            }
        }
    });
}
function createReportDesignerFromModel(model, element, callbacks, applyBindings) {
    if (!model)
        return;
    limitation(!!model.limitation);
    (0,external_DevExpress_Analytics_Internal_namespaceObject._addLicenseTrigger)(model._licenseOptions);
    _setChartLimitation(limitation());
    if (model.availableCultures) {
        (0,external_DevExpress_Reporting_Metadata_namespaceObject.availableCultures)(model.availableCultures.reduce((result, val) => {
            return {
                ...result,
                [val.Name]: val.DisplayName
            };
        }, {}));
    }
    if (model.dataSources && model.dataSourcesData) {
        for (let i = 0; i < model.dataSources.length; i++) {
            const dataSource = model.dataSources[i];
            dataSource.data = model.dataSourcesData[i];
        }
    }
    if (!model.reportModel) {
        model.reportModel = SubreportViewModel.defaultReport;
    }
    else {
        model.reportModel = JSON.parse(model.reportModel);
    }
    const getRootKeyName = (obj) => {
        if (!obj['@ControlType']) {
            for (const prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    return prop;
                }
            }
        }
        return 'XtraReportsLayoutSerializer';
    };
    (0,external_DevExpress_Analytics_Internal_namespaceObject.initGlobalize)(model);
    model.reportModelRootName = getRootKeyName(model.reportModel);
    const formatStringData = { customPatterns: {}, standardPatterns: {} };
    if (model.formatStringData) {
        model.formatStringData.customPatterns.forEach(function (item) {
            formatStringData.customPatterns[item.Key] = item.Value;
        });
        model.formatStringData.standardPatterns.forEach(function (item) {
            formatStringData.standardPatterns[item.Key] = item.Value;
        });
    }
    if (!!model.fieldListMaxNestingLevelUpdate) {
        maxNestingLevelUpdate(model.fieldListMaxNestingLevelUpdate);
        (0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.maxSearchLevel)(model.fieldListMaxNestingLevelUpdate);
    }
    const data = {
        report: external_ko_namespaceObject.observable({}),
        errorPanelSettings: model.errorPanelSettings,
        reportUrl: external_ko_namespaceObject.observable(model.reportUrl),
        availableDataSources: model.dataSources,
        allowMDI: model.allowMDI,
        dataSourceRefs: model.dataSourceRefs,
        dataSourceSettings: model.dataSourceSettings,
        parameterEditingSettings: model.parameterEditingSettings,
        dataBindingMode: model.dataBindingMode || 'Expressions',
        defaultCrossTabControl: model.defaultCrossTabControl || 'XRCrossTab',
        convertBindingsToExpressions: model.convertBindingsToExpressions || PromptBoolean.Prompt,
        subreports: model.subreports,
        cultureInfoList: model.cultureInfoList,
        formatStringData: formatStringData,
        state: {
            reportExtensions: model.reportExtensions
        },
        isReportServer: model.internalSettings && model.internalSettings.isReportServer,
        wizardSettings: model.wizardSettings,
        wizardConnections: model.wizardConnections,
        disableCustomSql: model.disableCustomSql,
        isScriptsDisabled: !model.scriptsEnabled,
        allowCreateNewJsonConnection: model.allowCreateNewJsonConnection,
        reportStorageWebIsRegister: model.reportStorageWebIsRegister,
        reportPreviewSettings: model.reportPreviewSettings,
        reportWizardTemplates: model.reportWizardTemplates,
        customControls: model.customControls,
        customGlobalExpressions: model.customGlobalExpressions,
        customReportExpressions: model.customReportExpressions,
        developmentMode: model.developmentMode,
    };
    if (model.queryBuilderHandlerUri)
        (0,external_DevExpress_QueryBuilder_Utils_namespaceObject.HandlerUri)(model.queryBuilderHandlerUri);
    return createReportDesigner(element, data, callbacks || {}, model, model.knownEnums, model.handlerUri, model.viewerHandlerUri, model.rtl, applyBindings)
        .done((designerModel) => {
        setTimeout(() => {
            data.report(model.reportModel);
            designerModel.isLoading && designerModel.isLoading(false);
        }, 1);
    });
}

;// ./node_modules/devexpress-reporting/designer/jsReportDesignerBinding.js









(0,external_DevExpress_Analytics_Internal_namespaceObject.useKoIntegration)();
class JSReportDesignerBinding extends external_DevExpress_Analytics_Internal_namespaceObject.JSDesignerBindingCommon {
    _applyBindings(model, $element) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.troubleshootingPageWrapper)(() => {
            this.sender.designerModel = model;
            this._disposables.push(model);
            const childTemplate = !model ? document.createElement('div') : this._templateHtml;
            $element.empty();
            const child = $element.append(childTemplate).children()[0];
            if (!child)
                return;
            external_ko_namespaceObject.cleanNode(child);
            this._callbacks && this._callbacks.designer.beforeRender && this._callbacks.designer.beforeRender(model);
            external_ko_namespaceObject.applyBindings(model, child);
            model.afterRender();
            this._fireEvent('Init');
            this._updateSurfaceSizeTimeout && clearTimeout(this._updateSurfaceSizeTimeout);
            this._updateSurfaceSizeTimeout = setTimeout(() => {
                model?.updateSurfaceSize && model?.updateSurfaceSize();
            }, 1);
        }, this.developmentMode, $element);
    }
    _initializeCallbacks() {
        if (this._options.callbacks) {
            const previewEvents = external_DevExpress_Reporting_namespaceObject.EventGenerator.generatePreviewEvents((eventName, args) => { this._fireEvent(eventName, args); }, 'Preview');
            const designerEvents = external_DevExpress_Reporting_namespaceObject.EventGenerator.generateDesignerEvents((eventName, args) => { this._fireEvent(eventName, args); });
            this._checkCallbackName(previewEvents);
            this._checkCallbackName(designerEvents);
            const availablePreviewEvents = this._generateCallbackDictionary(previewEvents, 'preview');
            const availableDesignerEvents = this._generateCallbackDictionary(designerEvents, 'designer');
            const availableEvents = {
                preview: availablePreviewEvents,
                designer: availableDesignerEvents
            };
            return availableEvents;
        }
    }
    _createModel(initData, element) {
        return createReportDesignerFromModel(initData, element, this._callbacks, false);
    }
    _showErrorInfo(jqXHR, getRequestDetails, errorThrown, element) {
        const messages = [];
        if (jqXHR && jqXHR.status)
            messages.push(jqXHR.status);
        if (errorThrown)
            messages.push(errorThrown);
        const helpLink = 'https://go.devexpress.com/Web_Reporting_Diagnostics_Tips.aspx';
        const consoleMessage = `Review the following help topic to diagnose a problem: '${helpLink}'.`;
        const clientMessage = (0,external_DevExpress_Analytics_Internal_namespaceObject.getLocalization)(`The page is blank because the Report Designer failed to load the report. Consult the developer for assistance.
            Use development mode for detailed information.`, 'ASPxReportsStringId.ReportDesigner_GetReportDesignerModel_Error');
        if (this.developmentMode) {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.assignTroubleshootingPage)(element);
            console.log(consoleMessage);
            if (jqXHR && jqXHR.responseText)
                console.log(jqXHR.responseText);
        }
        else {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.ShowMessage)(clientMessage);
        }
    }
    _getDesignerModelRequest(reportUrl, element) {
        const requestOptions = this._options.requestOptions;
        const getDesignerModelActionUrl = this._getServerActionUrl(requestOptions.host, requestOptions.getDesignerModelAction);
        const onError = (data, textStatus, jqXHR, getRequestDetails, errorThrown) => {
            this._showErrorInfo(jqXHR, getRequestDetails, errorThrown, element);
            if (this._callbacks && this._callbacks.designer && this._callbacks.designer.onServerError)
                this._callbacks.designer.onServerError({ jqXHR: jqXHR, textStatus: textStatus, data: data, getRequestDetails: getRequestDetails });
            if (errorThrown)
                throw errorThrown;
        };
        const requestManagerSetup = {
            ajaxSetup: external_DevExpress_Analytics_Utils_namespaceObject.ajaxSetup,
            fetchSetup: external_DevExpress_Analytics_Utils_namespaceObject.fetchSetup
        };
        const getModel = external_DevExpress_Analytics_Utils_namespaceObject.requestManager.getInstance(requestManagerSetup).sendRequest({
            url: getDesignerModelActionUrl,
            type: 'POST',
            data: {
                reportUrl,
                designerModelSettings: this._options.designerModelSettings
            }
        });
        const _deferredModel = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        this._deferreds.push(_deferredModel);
        getModel.done(_deferredModel.resolve.bind(_deferredModel)).fail(_deferredModel.reject.bind(_deferredModel));
        _deferredModel.done((result, textStatus, jqXHR) => {
            if (result.error) {
                return onError(result, textStatus, jqXHR, () => ({ url: getDesignerModelActionUrl, data: { reportUrl } }), result.error);
            }
            result.handlerUri = this._getServerActionUrl(requestOptions.host, result.handlerUri);
            result.viewerHandlerUri = this._getServerActionUrl(requestOptions.host, result.viewerHandlerUri);
            result.queryBuilderHandlerUri = this._getServerActionUrl(requestOptions.host, result.queryBuilderHandlerUri);
            this._initializationData(result);
        }).fail((jqXHR, textStatus, errorThrown) => {
            if (!jqXHR && !errorThrown)
                return;
            const localizationPromises = [];
            this._callbacks && this._callbacks.designer && this._callbacks.designer.customizeLocalization && this._callbacks.designer.customizeLocalization(localizationPromises);
            (0,external_DevExpress_Analytics_Internal_namespaceObject.resolveFromPromises)(localizationPromises, () => {
                onError({ error: errorThrown }, textStatus, jqXHR, () => ({ url: getDesignerModelActionUrl, data: { reportUrl } }), errorThrown);
            });
        });
    }
    constructor(_options, customEventRaiser) {
        super(_options, customEventRaiser);
        this._model = null;
        this._deferreds = [];
        limitation(_options.limitation);
        _setChartLimitation(limitation());
        _options.designerModel = (0,external_DevExpress_Analytics_Internal_namespaceObject._wrapModelInObservable)(_options.designerModel);
        this.sender = new JSReportDesigner(_options.designerModel);
        this._initializationData = external_ko_namespaceObject.isObservable(_options.initializationData)
            ? _options.initializationData
            : external_ko_namespaceObject.observable(_options.initializationData);
        _options.callbacks && _options.callbacks._eventSenderCreated && _options.callbacks._eventSenderCreated(this.sender);
        this._callbacks = this._initializeCallbacks();
        this._callbacks && this._callbacks.designer.onInitializing && this._callbacks.designer.onInitializing();
    }
    dispose() {
        (this._deferreds || []).forEach((deferred) => {
            deferred.reject();
        });
        this._updateSurfaceSizeTimeout && clearTimeout(this._updateSurfaceSizeTimeout);
        super.dispose();
    }
    applyBindings(element) {
        const _$element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element);
        _$element.addClass('dx-designer');
        this._createDisposeFunction(element);
        if (this._options.undoEngine) {
            this._applyBindings(this._options, _$element);
            return;
        }
        const applyBindingsFunc = (newData) => {
            this.developmentMode = this.developmentMode || newData.developmentMode;
            newData.developmentMode = this.developmentMode;
            (0,external_DevExpress_Analytics_Internal_namespaceObject.troubleshootingPageWrapper)(() => {
                if (this._model) {
                    this._disposables.splice(this._disposables.indexOf(this._model), 1);
                    external_ko_namespaceObject.cleanNode(element.firstChild);
                    this._model.dispose();
                }
                this._createModel(newData, element).done((model) => {
                    this._model = model;
                    this._applyBindings(model, _$element);
                });
            }, this.developmentMode, _$element);
        };
        this._disposables.push(this._initializationData.subscribe((newVal) => {
            applyBindingsFunc(newVal);
        }));
        if (this._options.requestOptions) {
            this._getLocalizationRequest().done((localization) => {
                localization && (0,external_DevExpress_Analytics_Utils_namespaceObject.addCultureInfo)(localization);
            }).always(() => {
                if (this._options.requestOptions.getDesignerModelAction) {
                    if (external_ko_namespaceObject.isSubscribable(this._options.reportUrl)) {
                        this._disposables.push(this._options.reportUrl.subscribe((newVal) => this._getDesignerModelRequest(newVal, _$element)));
                    }
                    this._getDesignerModelRequest(external_ko_namespaceObject.unwrap(this._options.reportUrl), _$element);
                }
                else {
                    applyBindingsFunc(this._initializationData());
                }
            });
        }
        else {
            applyBindingsFunc(this._initializationData());
        }
    }
}
const dxReportDesignerBindingName = 'dxReportDesigner';
class DxReportDesigner extends external_DevExpress_Analytics_Internal_namespaceObject.DxAnalyticsComponentCommon {
    getBindingName() {
        return dxReportDesignerBindingName;
    }
}
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.registerBaseBinding)(dxReportDesignerBindingName, '$data');
external_ko_namespaceObject.bindingHandlers[dxReportDesignerBindingName] = {
    init: function (element, valueAccessor) {
        new JSReportDesignerBinding(external_ko_namespaceObject.unwrap(valueAccessor()) || {}).applyBindings(element);
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/scopes/reporting-designer.js











;// ./node_modules/devexpress-reporting/scopes/reporting-designer-actions.js

































;// ./node_modules/devexpress-reporting/scopes/reporting-designer-bands-internal.js













;// ./node_modules/devexpress-reporting/scopes/reporting-designer-bands.js

























;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-pivotGrid.js





;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-crossTab.js







;// ./node_modules/devexpress-reporting/scopes/reporting-designer-data.js





































;// ./node_modules/devexpress-reporting/designer/controls/utils/_bindings.js


const svgAttrs = external_ko_namespaceObject.bindingHandlers['svgAttrs'];
external_ko_namespaceObject.bindingHandlers['svgAttrs'] = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        svgAttrs.update(element, valueAccessor, allBindingsAccessor, viewModel);
        if (viewModel instanceof XRCheckBoxSurface) {
            element.setAttribute('preserveAspectRatio', 'none');
        }
    }
};

;// ./node_modules/devexpress-reporting/designer/controls/utils/_chartDataFilterModelReport.js



const dataFilterReportPropertiesSerializationsInfo = [{ propertyName: 'dataMember', modelName: '@DataMember' }, { propertyName: 'dataSource', modelName: '@DataSource', link: true }], valueDataBinding = { propertyName: 'value', displayName: 'Value Data Members', editor: designerEditorTemplates.getEditor('chartValueBinding'), localizationId: 'DevExpress.XtraCharts.SeriesBase.ValueDataMembers' };
const dataFilterReportSerializationFakeInfo = [
    { propertyName: 'misc', displayName: 'Misc', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: dataFilterSerializationsInfo, localizationId: 'ChartStringId.PropertyGridCategory_Misc' },
    { propertyName: 'report', displayName: 'Report Data', localizationId: 'ReportStringId.CatReportData', editor: external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('objecteditor'), info: [valueDataBinding] }
];
class DataFilterModelReport extends DataFilterModel {
    getInfo() {
        return [].concat([].concat(dataFilterSerializationsInfo, dataFilterReportPropertiesSerializationsInfo)
            .map(x => { return { propertyName: x.propertyName, modelName: x.modelName, link: x.link }; }), dataFilterReportSerializationFakeInfo);
    }
    _createReportDataProperty() {
        return {
            updateValue: (pathRequest, parameters) => {
                if (!!pathRequest.fullPath) {
                    if (pathRequest.fullPath.indexOf('Parameters') === 0) {
                        const parameterName = pathRequest.fullPath.split('.').pop();
                        this.dataSource(parameters.filter((x) => x.name === parameterName)[0]);
                        this.dataMember('Value');
                    }
                    else {
                        this.dataMember(pathRequest.path);
                        this.dataSource(null);
                    }
                }
                else {
                    this.dataMember(null);
                    this.dataSource(null);
                }
            },
            displayValue: (reportDataSource) => {
                if (this.dataSource()) {
                    return ['Parameters', this.dataSource().name].join(' - ');
                }
                else {
                    if (this.dataMember()) {
                        return [reportDataSource.name, this.dataMember()].join(' - ');
                    }
                    return '';
                }
            },
            calculatePath: (reportDataSource) => {
                if (this.dataSource()) {
                    return ['Parameters', this.dataSource().name].join('.');
                }
                else {
                    if (this.dataMember()) {
                        return [reportDataSource.ref || reportDataSource.id, this.dataMember()].join('.');
                    }
                    return '';
                }
            },
            getInfo: () => { return [valueDataBinding]; },
            value: this._mapObject(dataFilterReportPropertiesSerializationsInfo)
        };
    }
    _mapObject(info) {
        const obj = { getInfo: () => { return info; } };
        for (let i = 0; i < info.length; i++) {
            const propertyName = info[i].propertyName;
            obj[propertyName] = this[propertyName];
        }
        obj['getPath'] = (propertyName) => {
            return this['getPath'](propertyName);
        };
        return obj;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.misc = this._mapObject(dataFilterSerializationsInfo);
        this.misc.isPropertyDisabled = (propertyName) => {
            return propertyName === 'value' && this.dataMember() != null;
        };
        this.report = this._createReportDataProperty();
    }
}
DefaultDataFilterModel(DataFilterModelReport);

;// external "DevExpress.registerComponent"
const external_DevExpress_registerComponent_namespaceObject = DevExpress.registerComponent;
var external_DevExpress_registerComponent_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_registerComponent_namespaceObject);
;// ./node_modules/devexpress-reporting/designer/internal/scripting/_eventdropdowneditor.js







const EDITOR_CLASS = 'dx-eventdropdowneditor dx-selectbox', EDITOR_ELLIPSIS_BUTTON_CLASS = 'dx-button-normal dx-dropdowneditor-button dxrd-ellipsis-button', EDITOR_ELLIPSIS_BUTTON_ICON_CLASS = 'dx-dropdowneditor-icon dxrd-ellipsis-image', EDITOR_ELLIPSIS_BUTTON_ICON_TEMPLATE = 'dxrd-svg-ellipsis';
class dxEventDropDownEditor extends (external_DevExpress_ui_dxSelectBox_default()) {
    _getDefaultOptions() {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(super['_getDefaultOptions'].apply(this), {
            openOnFieldClick: false,
            secondAction: null
        });
    }
    _init() {
        super['_init'].apply(this);
        this._initSecondAction();
        const $element = external_jQuery_namespaceObject.fn.constructor(this['element']());
        this._koContext = external_ko_namespaceObject.contextFor($element[0]);
    }
    _initSecondAction() {
        this._secondAction = this['_createAction'](this.option('secondAction'));
    }
    _render() {
        const $element = external_jQuery_namespaceObject.fn.constructor(this['element']());
        $element.addClass(EDITOR_CLASS);
        super['_render'].apply(this);
    }
    _renderDropDownButton() {
        if (this._$ellipsisButton) {
            this._$ellipsisButton.remove();
            this._$ellipsisButton = null;
        }
        super['_renderDropDownButton'].apply(this);
        this._$ellipsisButton = this._createEllipsisButton();
        this._$ellipsisButton.prependTo(this['_buttonsContainer']());
        this._attachEllipsisButtonClickHandler();
    }
    _createEllipsisButton() {
        const $buttonIcon = external_jQuery_namespaceObject.fn.constructor('<div>').addClass(EDITOR_ELLIPSIS_BUTTON_ICON_CLASS).append(external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.templates[EDITOR_ELLIPSIS_BUTTON_ICON_TEMPLATE]);
        external_ko_namespaceObject.applyBindingsToDescendants(this._koContext, $buttonIcon[0]);
        const $button = external_jQuery_namespaceObject.fn.constructor('<div>')['dxButton']({
            focusStateEnabled: false,
            disabled: this.option('readOnly')
        })['removeClass']('dx-button');
        $button.addClass(EDITOR_ELLIPSIS_BUTTON_CLASS);
        $button.append($buttonIcon);
        $button.find('.dx-button-content').remove();
        return $button;
    }
    _attachEllipsisButtonClickHandler() {
        if (this._$ellipsisButton) {
            this._$ellipsisButton.dxButton('option', 'onClick', this._secondAction.bind(this));
        }
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'secondAction':
                this._initSecondAction();
                this._attachEllipsisButtonClickHandler();
                break;
            default:
                super['_optionChanged'].apply(this, [args]);
        }
    }
}
external_DevExpress_registerComponent_default()('dxEventDropDownEditor', dxEventDropDownEditor);

;// ./node_modules/devexpress-reporting/designer/internal/_autoScrolling.js




external_ko_namespaceObject.bindingHandlers['dxAutoScrolling'] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        const $element = external_jQuery_namespaceObject.fn.constructor(element);
        let rect = null;
        const values = valueAccessor();
        const scrollView = external_DevExpress_ui_dxScrollView_default().getInstance(element);
        if (scrollView) {
            let timeout = null, interval = null;
            const clearTimings = () => {
                timeout && clearTimeout(timeout);
                interval && clearInterval(interval);
                timeout = null;
                interval = null;
            }, scrolling = (inc) => {
                timeout = setTimeout(() => {
                    interval = setInterval(() => {
                        let newPosition = scrollView.scrollTop() + inc;
                        if (newPosition < 0) {
                            newPosition = 0;
                        }
                        scrollView['scrollTo'](newPosition);
                    }, 50);
                }, 500);
            }, move = (event) => {
                if (values.active()) {
                    if (!rect) {
                        rect = element.getBoundingClientRect();
                    }
                    if (event.clientY <= rect.top + 30) {
                        !timeout && scrolling(-30);
                    }
                    else if (event.clientY >= rect.bottom - 30) {
                        !timeout && scrolling(30);
                    }
                    else {
                        clearTimings();
                    }
                }
            }, subscription = values.active.subscribe((newVal) => {
                rect = null;
                clearTimings();
            });
            element.addEventListener('mousemove', move);
            (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, function () {
                element.removeEventListener('mousemove', move);
                subscription.dispose();
            });
        }
    }
};

;// ./node_modules/devexpress-reporting/designer/internal/_bandLevelEditor.js


class BandLevelEditor extends external_DevExpress_QueryBuilder_Widgets_Internal_namespaceObject.UndoEditor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.min = 0;
        this._disposables.push(this.max = external_ko_namespaceObject.pureComputed(() => {
            const model = this._get('_model');
            if (model && model.maxLevel)
                return model.maxLevel;
            return model && model.getModel && model.getModel() && model.getModel().maxLevel;
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_coordinateGrid.js





class CoordinateGridViewModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _initGrid(length, gridSize, gridLines, flip = false) {
        const lines = gridLines.peek();
        const arrayLength = Math.ceil(length / gridSize), currentLength = lines.length, diff = arrayLength - currentLength;
        if (diff > 0) {
            for (let index = currentLength; index < arrayLength; index++) {
                gridLines.push({ coordVal: external_ko_namespaceObject.observable((index + 1) * gridSize + 0.5), visible: external_ko_namespaceObject.observable(true) });
            }
        }
        if (flip) {
            for (let index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                gridLines.peek()[index].coordVal(coordVal - 0.5);
                gridLines.peek()[index].visible(index < arrayLength);
            }
        }
        else {
            for (let index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                gridLines.peek()[index].coordVal(coordVal + 0.5);
                gridLines.peek()[index].visible(index < arrayLength);
            }
        }
    }
    constructor(options) {
        super();
        this.width = external_ko_namespaceObject.observable(0);
        this.height = external_ko_namespaceObject.observable(0);
        this.verticalGridLines = external_ko_namespaceObject.observableArray().extend({ deferred: true });
        this.horizontalGridLines = external_ko_namespaceObject.observableArray().extend({ deferred: true });
        this.majorVerticalGridLines = external_ko_namespaceObject.observableArray().extend({ deferred: true });
        this.majorHorizontalGridLines = external_ko_namespaceObject.observableArray().extend({ deferred: true });
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const flip = !!external_ko_namespaceObject.unwrap(options.flip);
            const gridSize = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(options.snapGridSize(), options.measureUnit(), options.zoom());
            const width = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(options.width(), options.measureUnit(), options.zoom());
            this.width(width + 0.5);
            this._initGrid(width, gridSize, this.verticalGridLines, flip);
            this._initGrid(width, 4 * gridSize, this.majorVerticalGridLines, flip);
        }));
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const gridSize = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(options.snapGridSize(), options.measureUnit(), options.zoom());
            const height = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(options.height(), options.measureUnit(), options.zoom());
            this.height(height + 0.5);
            this._initGrid(height, gridSize, this.horizontalGridLines);
            this._initGrid(height, 4 * gridSize, this.majorHorizontalGridLines);
        }));
    }
    dispose() {
        super.dispose();
        this.horizontalGridLines([]);
        this.verticalGridLines([]);
        this.majorHorizontalGridLines([]);
        this.majorVerticalGridLines([]);
    }
}
external_ko_namespaceObject.bindingHandlers['coordinateGrid'] = {
    init: function (element, valueAccessor) {
        external_jQuery_namespaceObject.fn.constructor(element).children().remove();
        const values = valueAccessor(), gridViewModel = new CoordinateGridViewModel(values), templateHtml = (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)('dxrd-coordinategrid'), $element = external_jQuery_namespaceObject.fn.constructor(element).append(templateHtml);
        external_ko_namespaceObject.applyBindings(gridViewModel, $element.children()[0]);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)($element.children()[0], () => {
            gridViewModel.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/designer/internal/_htmlMarkUpConverter.js




class TextTag {
    constructor(node, inheritValues) {
        this.node = node;
        this.inheritValues = inheritValues;
        this.value = null;
        this.element = null;
        this.hasChildNodes = false;
        this.value = this.node.getAttribute && this.node.getAttribute(ValueConverter.ValueAttrName);
        if (this.value)
            this.value = this.value.trim();
    }
    createElement() {
        this.element = document.createTextNode(this.node.outerHTML || this.node.textContent || this.node['data']);
    }
    setProperties(parameters, inheritValues) { }
    appendTo(el) {
        el.appendChild(this.element);
    }
}
class SpanTag extends TextTag {
    constructor() {
        super(...arguments);
        this.hasChildNodes = true;
    }
    createElement() {
        this.element = document.createElement('span');
        if (this.inheritValues.backcolor) {
            this.element.style.backgroundColor = 'inherit';
        }
    }
}
class AnchorTag extends TextTag {
    constructor() {
        super(...arguments);
        this.hasChildNodes = true;
    }
    createElement() {
        this.element = document.createElement('a');
    }
    setProperties() {
        this.element.href = 'javascript:void(0);';
    }
}
class ImageTag extends TextTag {
    appendTo(el) { }
}
class SimpleTag extends SpanTag {
    createElement() {
        this.element = document.createElement(this.node.nodeName);
    }
}
class ColorTag extends SpanTag {
    setProperties() {
        this.element.style.color = external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap((0,external_DevExpress_Analytics_Utils_namespaceObject.colorFromString)(this.value));
    }
}
class BackColorTag extends SpanTag {
    setProperties() {
        this.element.style.backgroundColor = external_DevExpress_Analytics_Serializer_Native_namespaceObject.currentMultiPlatformEngine.unwrap((0,external_DevExpress_Analytics_Utils_namespaceObject.colorFromString)(this.value));
        this.inheritValues.backcolor = true;
    }
}
class SizeTag extends SpanTag {
    setProperties(parameters) {
        let sizeValue;
        const textValue = this.value;
        if (textValue && (textValue[0] === '+' || textValue[0] === '-')) {
            const _val = parseFloat(textValue.substr(1));
            sizeValue = this.inheritValues.fontSize + (textValue[0] === '+' ? _val : _val * (-1));
        }
        else {
            sizeValue = parseFloat(textValue);
        }
        if (!isNaN(sizeValue))
            this.element.style.fontSize = sizeValue + (parameters.fontUnit || 'pt');
        else
            sizeValue = this.inheritValues.fontSize;
        this.inheritValues.fontSize = sizeValue;
    }
}
class ValueConverter {
    _createTag(node, inheritValues) {
        if (!this._checkValidTag(node.nodeName) || node.nodeName === '#text') {
            return new TextTag(node, inheritValues);
        }
        else if (node.nodeName === 'COLOR') {
            return new ColorTag(node, inheritValues);
        }
        else if (node.nodeName === 'BACKCOLOR') {
            return new BackColorTag(node, inheritValues);
        }
        else if (node.nodeName === 'HREF') {
            return new AnchorTag(node, inheritValues);
        }
        else if (node.nodeName === 'SIZE') {
            return new SizeTag(node, inheritValues);
        }
        else if (node.nodeName === 'IMG') {
            return new ImageTag(node, inheritValues);
        }
        else if (node.nodeName !== '#text') {
            return new SimpleTag(node, inheritValues);
        }
    }
    _parceToXml(str) {
        let matches;
        while ((matches = this._regExp.exec(str)) !== null) {
            if (matches.index === this._regExp.lastIndex) {
                this._regExp.lastIndex++;
            }
            const fullmatch = matches[0];
            const escapeTag = matches[1];
            const closingTag = matches[2] === '/' ? '/' : '';
            const tag = matches[3];
            const value = matches[5];
            let replacedStr = '';
            if (this._checkValidTag(tag) && !escapeTag) {
                if (value) {
                    replacedStr = '<' + tag + ' ' + ValueConverter.ValueAttrName + "='" + value + "'>";
                }
                else {
                    replacedStr = '<' + closingTag + tag + '>';
                }
            }
            else {
                let _fullmatch = fullmatch;
                if (!!escapeTag) {
                    _fullmatch = _fullmatch.slice(escapeTag.length);
                }
                const $spanEscape = external_jQuery_namespaceObject.fn.constructor('<span>');
                replacedStr = $spanEscape.text(_fullmatch)[0].innerHTML;
            }
            str = str.replace(fullmatch, replacedStr);
        }
        str = str.replace(/<nbsp>/g, '&nbsp;');
        str = str.replace(/<br>/g, this._displayNameParameters.wordWrap ? '<br>' : '');
        return str;
    }
    _checkValidTag(tag) {
        switch (tag.toLocaleLowerCase()) {
            case 'href':
            case 'color':
            case 'backcolor':
            case 'size':
            case 'img':
            case 'image':
            case 'br':
            case 'b':
            case 'i':
            case 'u':
            case 'nbsp':
            case 's': return true;
        }
        return false;
    }
    _createTree(treeElement, writeTo, inheritValues = { fontSize: this._displayNameParameters.fontSize || 0 }) {
        if (treeElement.childNodes.length > 0) {
            const childNodes = Array.prototype.slice.call(treeElement.childNodes);
            childNodes.forEach((node) => {
                const tag = this._createTag(node, { fontSize: inheritValues.fontSize, backcolor: inheritValues.backcolor });
                tag.createElement();
                tag.setProperties(this._displayNameParameters);
                tag.appendTo(writeTo);
                if (tag.hasChildNodes)
                    this._createTree(node, tag.element, tag.inheritValues);
            });
        }
    }
    constructor(_displayNameParameters) {
        this._displayNameParameters = _displayNameParameters;
        this._regExp = /<(<*)(\/?)(\s*\w+\s*)(=(\s*.+?\s*)|\b[^>]*)?>/gm;
    }
    appendTo(element) {
        if (!element)
            return;
        const fragment = document.createDocumentFragment();
        const temp = document.createElement('div');
        fragment.appendChild(temp);
        external_ko_namespaceObject.utils.setHtml(element, '');
        external_ko_namespaceObject.utils.setHtml(temp, this._parceToXml(this._displayNameParameters.text));
        this._createTree(temp, element);
        fragment.removeChild(temp);
    }
}
ValueConverter.ValueAttrName = 'value';


;// ./node_modules/devexpress-reporting/designer/internal/_displayNameBindings.js




external_ko_namespaceObject.bindingHandlers['controlDisplayName'] = {
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const value = valueAccessor(), surface = external_ko_namespaceObject.unwrap(value);
        const parameters = surface.displayNameParameters();
        const setElementText = (value) => external_jQuery_namespaceObject.fn.constructor(element).text(value ? ('[' + value + ']') : '');
        if (parameters.isExpression) {
            external_jQuery_namespaceObject.fn.constructor(element).text(parameters.text);
            const expressionConverter = new external_DevExpress_Analytics_Internal_namespaceObject.DisplayExpressionConverter(bindingContext.$root.displayNameProvider());
            expressionConverter.toDisplayExpression(parameters.dataMember, parameters.text).done(result => {
                external_jQuery_namespaceObject.fn.constructor(element).text(result);
            });
        }
        else if (parameters.dataMember) {
            setElementText(parameters.dataMember);
            bindingContext.$root.displayNameProvider()
                .getDisplayName(parameters.dataSource, parameters.dataMember, parameters.dataMemberOffset, false)
                .done(data => setElementText(data))
                .fail(() => setElementText(parameters.dataMember));
        }
        else {
            if (!parameters.allowMarkupText) {
                external_jQuery_namespaceObject.fn.constructor(element).text(parameters.text || '');
            }
            else {
                new ValueConverter(parameters).appendTo(element);
            }
        }
    }
};
external_ko_namespaceObject.bindingHandlers['displayNameExtender'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        const value = external_ko_namespaceObject.unwrap(valueAccessor());
        const displayName = external_ko_namespaceObject.observable('');
        const displayNameLoader = external_ko_namespaceObject.computed(() => {
            const getDataMember = () => {
                return external_ko_namespaceObject.isSubscribable(value.dataMember) ? value.dataMember() : (value.getDataMember && value.getDataMember());
            };
            const getDataSource = () => {
                return external_ko_namespaceObject.isSubscribable(value.dataSource) ? value.dataSource() : (value.getDataSource && value.getDataSource() || undefined);
            };
            const getPath = () => {
                return external_ko_namespaceObject.isSubscribable(value.path) ? value.path() : (value.getPath && value.getPath());
            };
            const displayNameProvider = bindingContext.$root.displayNameProvider.peek();
            if (getDataMember() && displayNameProvider) {
                const promise = getPath() ? displayNameProvider.getDisplayNameByPath(getPath(), getDataMember()) :
                    displayNameProvider.getDisplayName(getDataSource(), getDataMember(), value.dataMemberOffset, value.includeDataSourceName);
                promise.done(data => displayName(data))
                    .fail(() => displayName(external_ko_namespaceObject.unwrap(value.dataMember)));
            }
            else {
                displayName('');
            }
        }).extend({ rateLimit: 0 });
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, function () {
            displayNameLoader.dispose();
        });
        bindingContext.$data.$displayName = displayName;
        external_ko_namespaceObject.applyBindingsToDescendants(bindingContext, element);
        return { controlsDescendantBindings: true };
    }
};
external_ko_namespaceObject.virtualElements.allowedBindings['displayNameExtender'] = true;

;// ./node_modules/devexpress-reporting/designer/internal/_expressionableFontModel.js



class ExpressionableFontModel extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel {
    constructor(value, _model) {
        super(value);
        this._model = _model;
        this.isPropertyHighlighted = (propertyName) => {
            const controlModel = this._model();
            if (!controlModel)
                return false;
            propertyName = propertyName === 'family' ? 'name' : propertyName;
            return controlModel.isPropertyHighlighted && controlModel.isPropertyHighlighted.apply(controlModel, [propertyName, 'font']);
        };
        (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(this.modificators, {
            boldHasExpression: external_ko_namespaceObject.computed(() => this.isPropertyHighlighted('bold')),
            italicHasExpression: external_ko_namespaceObject.computed(() => this.isPropertyHighlighted('italic')),
            strikeoutHasExpression: external_ko_namespaceObject.computed(() => this.isPropertyHighlighted('strikeout')),
            underlineHasExpression: external_ko_namespaceObject.computed(() => this.isPropertyHighlighted('underline'))
        });
        this._disposables.push(this.modificators.boldHasExpression);
        this._disposables.push(this.modificators.italicHasExpression);
        this._disposables.push(this.modificators.strikeoutHasExpression);
        this._disposables.push(this.modificators.underlineHasExpression);
    }
}

;// ./node_modules/devexpress-reporting/designer/internal/_ruler.js




class RulerViewModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _initGrid(length, gridSize, gridLines, flip = false) {
        const arrayLength = Math.round(length / gridSize) + 1, currentLength = gridLines.peek().length, diff = arrayLength - currentLength;
        if (diff > 0) {
            for (let index = 0; index < diff; index++) {
                gridLines.push({ coordVal: external_ko_namespaceObject.observable(0), text: external_ko_namespaceObject.observable(0), visible: external_ko_namespaceObject.observable(false) });
            }
        }
        if (flip) {
            for (let index = 0, coordVal = length; index < gridLines.peek().length; index++, coordVal -= gridSize) {
                gridLines.peek()[index].coordVal(coordVal - 0.5);
                gridLines.peek()[index].text(index);
                gridLines.peek()[index].visible(index < arrayLength);
            }
        }
        else {
            for (let index = 0, coordVal = 0; index < gridLines.peek().length; coordVal += gridSize, index++) {
                gridLines.peek()[index].coordVal(coordVal + 0.5);
                gridLines.peek()[index].text(index);
                gridLines.peek()[index].visible(index < arrayLength);
            }
        }
    }
    constructor(options) {
        super();
        this.height = external_ko_namespaceObject.observable(0);
        this.width = external_ko_namespaceObject.observable(0);
        this.gridLines = external_ko_namespaceObject.observableArray();
        this.majorGridLines = external_ko_namespaceObject.observableArray();
        this.disable = null;
        this.defaultGridLinesCoordinate = external_ko_namespaceObject.observable();
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const gridSize = (0,external_DevExpress_Analytics_Internal_namespaceObject.unitsToPixel)(25, options.units(), options.zoom());
            this.defaultGridLinesCoordinate({ x: 4, x1: '80%', x2: '100%', majorX1: '70%', majorX2: '100%' });
            let flip = !!external_ko_namespaceObject.unwrap(options.flip);
            if (options.direction === 'vertical') {
                this.height(options.length() + 0.5);
                this.width(20);
                if (flip) {
                    flip = false;
                    this.defaultGridLinesCoordinate({ x: 11, x1: '20%', x2: '0%', majorX1: '30%', majorX2: '0%' });
                }
            }
            else {
                this.width(options.length() + 0.5);
                this.height(20);
            }
            this._initGrid(options.length(), gridSize, this.gridLines, flip);
            this._initGrid(options.length(), 4 * gridSize, this.majorGridLines, flip);
        }));
        this.disable = options.disable;
    }
}
external_ko_namespaceObject.bindingHandlers['ruler'] = {
    init: function (element, valueAccessor) {
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).children().remove();
        const values = valueAccessor(), options_ = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, external_ko_namespaceObject.unwrap(values), {}), zoom = options_.zoom, options = {
            length: options_.length,
            units: options_.units,
            direction: options_.direction || '',
            zoom: zoom,
            flip: options_.flip,
            disable: options_.disable
        }, rulerViewModel = new RulerViewModel(options), templateHtml = (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)('dxrd-ruler' + options.direction), $element = (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).append(templateHtml);
        external_ko_namespaceObject.applyBindings(rulerViewModel, $element.children()[0]);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)($element.children()[0], () => {
            rulerViewModel.dispose();
            rulerViewModel.gridLines(null);
            rulerViewModel.majorGridLines(null);
        });
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/designer/internal/_watermarkBinding.js


external_ko_namespaceObject.bindingHandlers['dxWatermark'] = {
    update: (element, valueAccessor, allBindings, viewModel, bindingContext) => {
        const options = valueAccessor();
        const leftMargin = options.forLeftMargin;
        const band = options.band;
        const reportSurface = options.reportSurface;
        const backgroundRect = band.backgroundRect();
        const pxs = (x) => x === 0 ? '0' : (x + 'px');
        const url = (s) => s ? (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)('url("{0}")', s) : s;
        const size = (w, h) => pxs(w) + ' ' + pxs(h);
        const getOffset = (size, vertical) => {
            const noOffsetKey = vertical ? 'Top' : 'Left', fullOffsetKey = vertical ? 'Bottom' : 'Right', pageSize = vertical ? reportSurface.pageHeight() : reportSurface.pageWidth(), align = options.align;
            return (pageSize - size) * (align.indexOf(noOffsetKey) >= 0 ? 0 : align.indexOf(fullOffsetKey) >= 0 ? 1 : 0.5);
        };
        element.style['height'] = pxs(backgroundRect.height);
        element.style['width'] = pxs(leftMargin ? reportSurface.margins.left() : band._width());
        element.style['background-image'] = url(options.image);
        element.style['opacity'] = (255 - options.transparency) / 255 + '';
        element.style['background-repeat'] = options.tiling ? 'repeat' : 'no-repeat';
        let xOffset = 0, yOffset = 0, { width, height } = reportSurface._watermarkImageNaturalSize();
        switch (options.viewMode) {
            case 'Clip':
                width *= reportSurface.zoom();
                height *= reportSurface.zoom();
                xOffset = getOffset(width, false);
                yOffset = getOffset(height, true);
                element.style['background-size'] = size(width, height);
                break;
            case 'Stretch':
                xOffset = yOffset = 0;
                element.style['background-size'] = size(reportSurface.pageWidth(), reportSurface.pageHeight());
                break;
            case 'Zoom':
                const xRatio = reportSurface.pageWidth() / width, yRatio = reportSurface.pageHeight() / height;
                let ratio;
                if (xRatio < yRatio) {
                    ratio = xRatio;
                    xOffset = 0;
                    yOffset = getOffset(ratio * height, true);
                }
                else {
                    ratio = yRatio;
                    xOffset = getOffset(ratio * width, false);
                    yOffset = 0;
                }
                element.style['background-size'] = size(width * ratio, height * ratio);
                break;
        }
        element.style['background-position-y'] = pxs(yOffset - backgroundRect.top);
        element.style['background-position-x'] = pxs(xOffset - (backgroundRect.left || 0) - (leftMargin ? 0 : reportSurface.margins.left()));
    }
};

;// ./node_modules/devexpress-reporting/designer/services/_formatStringService.js


class FormatStringService {
    static saveCustomPattern(typeString, format) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'formatString', JSON.stringify({ action: 'save', typeString: typeString, customFormatString: format }));
    }
    static removeCustomPattern(typeString, format) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'formatString', JSON.stringify({ action: 'remove', typeString: typeString, customFormatString: format }));
    }
    static updatePreview(value, typeString, format) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.sendRequest)(settings_HandlerUri(), 'formatStringPreview', JSON.stringify({ value: value, typeString: typeString, formatString: format }));
    }
}
FormatStringService.actions = { updatePreview: FormatStringService.updatePreview, removeCustomPattern: FormatStringService.removeCustomPattern, saveCustomPattern: FormatStringService.saveCustomPattern };


;// ./node_modules/devexpress-reporting/dx-designer-bindings.js

(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: tabPanel.cssClasses()', function ($context, $element) { return { 'css': function () { return $context.$data.tabPanel.cssClasses(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: rightPanelHeader()', function ($context, $element) { return { 'text': function () { return $context.$data.rightPanelHeader(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treelist: chartStructure', function ($context, $element) { return { 'treelist': function () { return $context.$data.chartStructure; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { dataSource: actions, searchExpr: \'display\', searchEnabled: true, onItemClick: function(e) { e.itemData.clickAction(); }}', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.actions, 'searchExpr': 'display', 'searchEnabled': true, 'onItemClick': function (e) { e.itemData.clickAction(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: display, attr: { title: display }', function ($context, $element) { return { 'text': function () { return $context.$data.display; }, 'attr': function () { return { 'title': $context.$data.display }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLoadIndicator: { visible: isLoading() }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.isLoading() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': Math.min(width(), $root.surfaceSize()) }, click: function(_, e) { e.stopPropagation(); }', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.min($context.$data.width(), $context.$root.surfaceSize()) }; }, 'click': function () { return function (_, e) { e.stopPropagation(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { minWidth: Math.min(width() + 60, $root.surfaceSize()), maxWidth: width() + 60,  maxHeight: height() + 60 }', function ($context, $element) { return { 'styleunit': function () { return { 'minWidth': Math.min($context.$data.width() + 60, $context.$root.surfaceSize()), 'maxWidth': $context.$data.width() + 60, 'maxHeight': $context.$data.height() + 60 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: zoom, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }', function ($context, $element) { return { 'zoom': function () { return $context.$data.zoom; }, 'styleunit': function () { return { 'height': $context.$data.height() / $context.$data.zoom(), 'width': $context.$data.width() / $context.$data.zoom() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: {src: imageSrc }, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.imageSrc }; }, 'styleunit': function () { return { 'height': $context.$data.height() / $context.$data.zoom(), 'width': $context.$data.width() / $context.$data.zoom() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: chartStructure', function ($context, $element) { return { 'if': function () { return $context.$data.chartStructure; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: array, displayExpr: \'name\', value: selectedItem, disabled: disabled,  placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) , useItemTextAsTitle: true } }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.array, 'displayExpr': 'name', 'value': $context.$data.selectedItem, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'useItemTextAsTitle': true } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPropertyGrid: { target: selectedItem, editorsInfo: { editors: editors }, level: 1 }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$data.selectedItem, 'editorsInfo': { 'editors': $context.$data.editors }, 'level': 1 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: { path: path, value: value, onValueChanged: onValueChanged, acceptCustomValue: true, itemsProvider: $root.dataBindingsProvider(), treeListController: treeListController, disabled: disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'path': $context.$data.path, 'value': $context.$data.value, 'onValueChanged': $context.$data.onValueChanged, 'acceptCustomValue': true, 'itemsProvider': $context.$root.dataBindingsProvider(), 'treeListController': $context.$data.treeListController, 'disabled': $context.$data.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: $root.panes, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.panes, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: $root.legends, displayExpr: \'displayValue\', valueExpr: \'value\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.legends, 'displayExpr': 'displayValue', 'valueExpr': 'value', 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: $root.axisX, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.axisX, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: $root.axisY, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.axisY, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: $data', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: generateViewItems(), itemTemplate: \'stateItem\', valueExpr: \'value\', value: generateHeaderValue($root.undoEngine), displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.generateViewItems(), 'itemTemplate': 'stateItem', 'valueExpr': 'value', 'value': $context.$data.generateHeaderValue($context.$root.undoEngine), 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: className, template: {name: templateName, if: !!templateName }', function ($context, $element) { return { 'css': function () { return $context.$data.className; }, 'template': function () { return { 'name': $context.$data.templateName, 'if': !!$context.$data.templateName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayValue', function ($context, $element) { return { 'text': function () { return $context.$data.displayValue; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPropertyGrid: { target: contentValue, level: level + 1, parentDisabled: disabled }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$data.contentValue, 'level': $context.$data.level + 1, 'parentDisabled': $context.$data.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: options', function ($context, $element) { return { 'dxCollectionEditor': function () { return $context.$data.options; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: $parent.memberPadding', function ($context, $element) { return { 'styleunit': function () { return $context.$parent.memberPadding; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\'), attr: { \'title\': $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\') }', function ($context, $element) { return { 'text': function () { return $context.$parent.getLocalization('Function', 'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function'); }, 'attr': function () { return { 'title': $context.$parent.getLocalization('Function', 'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { value: functionName, dataSource: $parent.getAvailableItems(), acceptCustomValue: true, disabled: $parent.disabled, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'value': $context.$data.functionName, 'dataSource': $context.$parent.getAvailableItems(), 'acceptCustomValue': true, 'disabled': $context.$parent.disabled, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: $parents[1].actionsAreAvailable ? \'dxcd-summaryfunction-arg\' : \'\'', function ($context, $element) { return { 'css': function () { return $context.$parents[1].actionsAreAvailable ? 'dxcd-summaryfunction-arg' : ''; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: $parents[1].memberPadding', function ($context, $element) { return { 'styleunit': function () { return $context.$parents[1].memberPadding; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\'), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') }', function ($context, $element) { return { 'text': function () { return $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument'); }, 'attr': function () { return { 'title': $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1) }', function ($context, $element) { return { 'text': function () { return $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument') + ($context.$index() + 1); }, 'attr': function () { return { 'title': $context.$parents[1].getLocalization('Argument', 'DevExpress.XtraCharts.SeriesSelectionMode.Argument') + ($context.$index() + 1) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(){ $parents[1].remove($index()) }', function ($context, $element) { return { 'click': function () { return function () { $context.$parents[1].remove($context.$index()); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $parent.getLocalization(\'Add Argument\', \'ASPxReportsStringId.ReportDesigner_AddArgument\'), attr: { \'title\': $parent.getLocalization(\'Add New Item\', \'ASPxReportsStringId.ReportDesigner_AddNewItem\') }, click: function() { $parent.add(); }', function ($context, $element) { return { 'text': function () { return $context.$parent.getLocalization('Add Argument', 'ASPxReportsStringId.ReportDesigner_AddArgument'); }, 'attr': function () { return { 'title': $context.$parent.getLocalization('Add New Item', 'ASPxReportsStringId.ReportDesigner_AddNewItem') }; }, 'click': function () { return function () { $context.$parent.add(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return addPoint(_model()[\'owner\'] || _model()); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$data.addPoint($context.$data._model()['owner'] || $context.$data._model()); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'min\', \'minSize\'), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getDependencyOptions({ 'value': $context.$data.value, 'showSpinButtons': true, 'disabled': $context.$data.disabled }, 'min', 'minSize'); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'max\', \'maxSize\'), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getDependencyOptions({ 'value': $context.$data.value, 'showSpinButtons': true, 'disabled': $context.$data.disabled }, 'max', 'maxSize'); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getOptions({ dataSource: $root.groups, value: value, acceptCustomValue:true, onFocusOut: function() { $root.applyGroup($data.value()); }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$root.groups, 'value': $context.$data.value, 'acceptCustomValue': true, 'onFocusOut': function () { $context.$root.applyGroup($context.$data.value()); }, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxColorBox: getOptions({ value: generateValue($root.undoEngine), onValueChanged: onValueChanged, editAlphaChannel: true, popupPosition: { collision: \'flipfit flipfit\' }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } })', function ($context, $element) { return { 'dxColorBox': function () { return $context.$data.getOptions({ 'value': $context.$data.generateValue($context.$root.undoEngine), 'onValueChanged': $context.$data.onValueChanged, 'editAlphaChannel': true, 'popupPosition': { 'collision': 'flipfit flipfit' }, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: getOptions({ dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.generateValue($context.$root.undoEngine), 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: selectedItem', function ($context, $element) { return { 'if': function () { return $context.$data.selectedItem; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: model }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.model }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: generateOptions($root.chartDataSources, $root.getPopupContainer($element))', function ($context, $element) { return { 'with': function () { return $context.$data.generateOptions($context.$root.chartDataSources, $context.$root.getPopupContainer($element)); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: args', function ($context, $element) { return { 'foreach': function () { return $context.$data.args; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $parent.args().length === 1', function ($context, $element) { return { 'if': function () { return $context.$parent.args().length === 1; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $parent.args().length > 1', function ($context, $element) { return { 'if': function () { return $context.$parent.args().length > 1; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $parents[1].actionsAreAvailable()', function ($context, $element) { return { 'if': function () { return $context.$parents[1].actionsAreAvailable(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-operations-recycle_bin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-recycle_bin'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $parents[1].argumentTemplateName, data: { value: $data.value, path: $parents[1].path, treeListController: $parents[1].treeListController, disabled: $parents[1].disabled, visible: $parents[1].visible } }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parents[1].argumentTemplateName, 'data': { 'value': $context.$data.value, 'path': $context.$parents[1].path, 'treeListController': $context.$parents[1].treeListController, 'disabled': $context.$parents[1].disabled, 'visible': $context.$parents[1].visible } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $parent.actionsAreAvailable', function ($context, $element) { return { 'if': function () { return $context.$parent.actionsAreAvailable; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate:{ name:\'stateItem\' }', function () { return { dxTemplate: { name: 'stateItem' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, \'width\': $parent.width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$parent.width, 'top': $context.$data.absolutePosition.y }; }, 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: collapsed', function ($context, $element) { return { 'ifnot': function () { return $context.$data.collapsed; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width } } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginSelectionTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$parent.width }; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height(), top: absolutePosition.y }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height(), 'top': $context.$data.absolutePosition.y }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'top\': heightWithoutSubBands }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.heightWithoutSubBands }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, top: absolutePosition.y }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'top': $context.$data.absolutePosition.y }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height(), top: $data.absolutePosition.y() - $data.parent.heightWithoutSubBands() - $data.parent.absolutePosition.y() }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height(), 'top': $context.$data.absolutePosition.y() - $context.$data.parent.heightWithoutSubBands() - $context.$data.parent.absolutePosition.y() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data._context.drawWatermark()', function ($context, $element) { return { 'if': function () { return $context.$data._context.drawWatermark(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-watermark', 'data': { 'forLeftMargin': true, 'band': $context.$data, 'reportSurface': $context.$data._context } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$parent.width, 'snapGridSize': $context.$parent.snapGridSize }; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: collapsed', function ($context, $element) { return { 'if': function () { return $context.$data.collapsed; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, \'width\': rect().width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$data.rect().width, 'top': $context.$data.absolutePosition.y }; }, 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: contentSelectionTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.contentSelectionTemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: contentSelectionTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.contentSelectionTemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'selectionTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return item; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $data.selectiontemplate }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.selectiontemplate }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { title: name }, styleunit: { \'width\': $data.markerWidth() + 20, \'top\': absolutePosition.y, \'height\': height }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.name }; }, 'styleunit': function () { return { 'width': $context.$data.markerWidth() + 20, 'top': $context.$data.absolutePosition.y, 'height': $context.$data.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': rulerHeight, top: 0 }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); $root.selection.expectClick = false; }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resizeTheBand, zoom: $root.surface().zoom, minimumHeight: $data.heightFromControls && $data.heightFromControls() || 1 }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.rulerHeight, 'top': 0 }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); $context.$root.selection.initialize($context.$data); $context.$root.selection.expectClick = false; }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resizeTheBand, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.heightFromControls && $context.$data.heightFromControls() || 1 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }', function ($context, $element) { return { 'ruler': function () { return { 'zoom': $context.$data.zoom, 'length': $context.$data.height, 'units': $context.$parent.measureUnit, 'direction': 'vertical', 'flip': $context.$root.dx['config']()['rtlEnabled'] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: markerClass, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { markerClick($root.selection); e.stopPropagation(); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(_, e) { markerClick($root.selection, false);  }} : null, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed() || !hasOwnRuler() || locked, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }', function ($context, $element) { return { 'css': function () { return $context.$data.markerClass; }, 'styleunit': function () { return { 'height': $context.$data.height(), 'width': $context.$data.markerWidth }; }, 'click': function () { return function (_, e) { $context.$data.markerClick($context.$root.selection); e.stopPropagation(); }; }, 'event': function () { return $context.$root.ContextMenusEnabled && $context.$root.ContextMenusEnabled() ? { 'contextmenu': function (_, e) { $context.$data.markerClick($context.$root.selection, false); } } : null; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); $context.$root.selection.initialize($context.$data); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': $context.$data.collapsed() || !$context.$data.hasOwnRuler() || $context.$data.locked, 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: collapsed() ? \'\' : name', function ($context, $element) { return { 'text': function () { return $context.$data.collapsed() ? '' : $context.$data.name; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: hasOwnRuler', function ($context, $element) { return { 'if': function () { return $context.$data.hasOwnRuler; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: showMarker', function ($context, $element) { return { 'if': function () { return $context.$data.showMarker; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $parent.measureUnit }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'vrulerTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'measureUnit': $context.$parent.measureUnit }; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': heightWithoutSubBands, \'width\': _width(), \'top\': absolutePosition.y }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.heightWithoutSubBands, 'width': $context.$data._width(), 'top': $context.$data.absolutePosition.y }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'left\': coordinateGridOptions.left }, coordinateGrid: coordinateGridOptions', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.coordinateGridOptions.left }; }, 'coordinateGrid': function () { return $context.$data.coordinateGridOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'left\': columnSpacingLeft, \'width\': columnSpacing }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.columnSpacingLeft, 'width': $context.$data.columnSpacing }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'left\': grayAreaLeft, \'width\': grayAreaWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.grayAreaLeft, 'width': $context.$data.grayAreaWidth }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: $data.isVisible, styleunit: { \'top\': $data.absolutePositionY, \'height\': $data.height }', function ($context, $element) { return { 'visible': function () { return $context.$data.isVisible; }, 'styleunit': function () { return { 'top': $context.$data.absolutePositionY, 'height': $context.$data.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': heightWithoutSubBands, \'width\': _width() }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.heightWithoutSubBands, 'width': $context.$data._width() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, \'line-height\': height, \'top\': absolutePosition.y, width: rect().width }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'line-height': $context.$data.height, 'top': $context.$data.absolutePosition.y, 'width': $context.$data.rect().width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: (name() || \'\').toUpperCase(), styleunit: { \'right\': leftMargin }', function ($context, $element) { return { 'text': function () { return ($context.$data.name() || '').toUpperCase(); }, 'styleunit': function () { return { 'right': $context.$data.leftMargin }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: (name() || \'\').toUpperCase(), styleunit: { \'left\': leftMargin }', function ($context, $element) { return { 'text': function () { return ($context.$data.name() || '').toUpperCase(); }, 'styleunit': function () { return { 'left': $context.$data.leftMargin }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-watermark', 'data': { 'forLeftMargin': false, 'band': $context.$data, 'reportSurface': $context.$data._context } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.multiColumn() && $data.multiColumn().haveColumns()', function ($context, $element) { return { 'if': function () { return $context.$data.multiColumn() && $context.$data.multiColumn().haveColumns(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.multiColumn', function ($context, $element) { return { 'with': function () { return $context.$data.multiColumn; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $data.template }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'templateName', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return item; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-band-collapsed\'', function ($context, $element) { return { 'template': function () { return 'dxrd-band-collapsed'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $root.drawCrossbandContent() && $data._isHeaderBandTypeOrThemSubBands()', function ($context, $element) { return { 'if': function () { return $context.$root.drawCrossbandContent() && $context.$data._isHeaderBandTypeOrThemSubBands(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.printAcrossBandsPlaceHolder', function ($context, $element) { return { 'with': function () { return $context.$data.printAcrossBandsPlaceHolder; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.band', function ($context, $element) { return { 'with': function () { return $context.$data.band; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $root.surface().rtl()', function ($context, $element) { return { 'if': function () { return $context.$root.surface().rtl(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !$root.surface().rtl()', function ($context, $element) { return { 'if': function () { return !$context.$root.surface().rtl(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: holder.bands', function ($context, $element) { return { 'foreach': function () { return $context.$data.holder.bands; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $data[$parent.templateName], data: $parent.getData($data) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data[$context.$parent.templateName], 'data': $context.$parent.getData($context.$data) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: holder.verticalBandsContainer', function ($context, $element) { return { 'with': function () { return $context.$data.holder.verticalBandsContainer; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: visible && !!$data[$parent.templateName]', function ($context, $element) { return { 'if': function () { return $context.$data.visible && !!$context.$data[$context.$parent.templateName]; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, \'width\': _width, left: absolutePosition.x }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: resizeHandles(), disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumWidth: minimumWidth(), minimumHeight: minimumHeight() },  css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$data._width, 'left': $context.$data.absolutePosition.x }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': $context.$data.resizeHandles(), 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumWidth': $context.$data.minimumWidth(), 'minimumHeight': $context.$data.minimumHeight() }; }, 'css': function () { return { 'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor': $context.$data.selected() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-vertical-band-marker-focused\': focused }', function ($context, $element) { return { 'css': function () { return { 'dxrd-vertical-band-marker-focused': $context.$data.focused }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': _width(), \'left\': absolutePosition.x() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data._width(), 'left': $context.$data.absolutePosition.x() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('coordinateGrid: coordinateGridOptions', function ($context, $element) { return { 'coordinateGrid': function () { return $context.$data.coordinateGridOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, left: leftOffset, \'width\': width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'left': $context.$data.leftOffset, 'width': $context.$data.width, 'top': $context.$data.topOffset }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight || 1 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': width }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { transform: \'translateX(-\' + $data.scrollOffset() + \'px)\' }', function ($context, $element) { return { 'style': function () { return { 'transform': 'translateX(-' + $context.$data.scrollOffset() + 'px)' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: grayAreaWidth, height: height, left: !$root.surface().rtl() ? grayAreaLeft : 0  }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.grayAreaWidth, 'height': $context.$data.height, 'left': !$context.$root.surface().rtl() ? $context.$data.grayAreaLeft : 0 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, \'line-height\': height, \'top\': topOffset, width: width }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'line-height': $context.$data.height, 'top': $context.$data.topOffset, 'width': $context.$data.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: (name || \'\').toUpperCase(), styleunit: { \'right\': $root.surface().rtl() ? leftMargin : \'auto\', \'left\': !$root.surface().rtl() ? leftMargin: \'auto\' }', function ($context, $element) { return { 'text': function () { return ($context.$data.name || '').toUpperCase(); }, 'styleunit': function () { return { 'right': $context.$root.surface().rtl() ? $context.$data.leftMargin : 'auto', 'left': !$context.$root.surface().rtl() ? $context.$data.leftMargin : 'auto' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': width, top: topOffset, left: leftOffset, height: height() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'top': $context.$data.topOffset, 'left': $context.$data.leftOffset, 'height': $context.$data.height() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: $data.createScrollViewOptions($data, $root.selection)', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.createScrollViewOptions($context.$data, $context.$root.selection); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': markerWidth() + 20, \'top\': topOffset, \'height\': height }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.markerWidth() + 20, 'top': $context.$data.topOffset, 'height': $context.$data.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, top: $data.bandOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'top': $context.$data.bandOffset }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight || 1 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-band-marker-body\' : !$data.focused(), \'dxrd-band-marker-body-focused\' : $data.focused() }, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { $data.markerClick($root.selection); e.stopPropagation(); }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-band-marker-body': !$context.$data.focused(), 'dxrd-band-marker-body-focused': $context.$data.focused() }; }, 'styleunit': function () { return { 'height': $context.$data.height(), 'width': $context.$data.markerWidth }; }, 'click': function () { return function (_, e) { $context.$data.markerClick($context.$root.selection); e.stopPropagation(); }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': $context.$data.collapsed, 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': height, \'width\': $parent.width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height, 'width': $context.$parent.width, 'top': $context.$data.topOffset }; }, 'resizable': function () { return { 'starting': function () { $context.$root.resizeHandler.started = true; $context.$root.resizeHandler.starting(); }, 'stopped': function () { $context.$data.stopResize(); $context.$root.resizeHandler.stopped(); $context.$root.resizeHandler.started = false; }, 'handles': 's', 'disabled': !$context.$data.canResize(), 'forceResize': $context.$data.resize, 'zoom': $context.$root.surface().zoom, 'minimumHeight': $context.$data.minHeight() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-band-content\': !$data.collapsed(), \'dxrd-band-collapsed\': $data.collapsed() }, styleunit: { \'height\': height, top: topOffset }', function ($context, $element) { return { 'css': function () { return { 'dxrd-band-content': !$context.$data.collapsed(), 'dxrd-band-collapsed': $context.$data.collapsed() }; }, 'styleunit': function () { return { 'height': $context.$data.height, 'top': $context.$data.topOffset }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: verticalBands', function ($context, $element) { return { 'foreach': function () { return $context.$data.verticalBands; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: templateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: size.width, height: size.height, top: top, left: left }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.size.width, 'height': $context.$data.size.height, 'top': $context.$data.top, 'left': $context.$data.left }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: $parent.css, text: text, styleunit: { lineHeight: size.height(), width: size.width, height: size.height }', function ($context, $element) { return { 'style': function () { return $context.$parent.css; }, 'text': function () { return $context.$data.text; }, 'styleunit': function () { return { 'lineHeight': $context.$data.size.height(), 'width': $context.$data.size.width, 'height': $context.$data.size.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: $parent.borderCss, styleunit: { width: size.width, height: size.height }', function ($context, $element) { return { 'style': function () { return $context.$parent.borderCss; }, 'styleunit': function () { return { 'width': $context.$data.size.width, 'height': $context.$data.size.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return $context.$data.adorntemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { lineHeight: rect().height, height: rect().height, width: rect().width }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.rect().height, 'height': $context.$data.rect().height, 'width': $context.$data.rect().width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate, styleunit: { height: rect().height / _context.zoom(), width: rect().width / _context.zoom() }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.rect().height / $context.$data._context.zoom(), 'width': $context.$data.rect().width / $context.$data._context.zoom() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { showTitle: true, width: \'95%\', height: \'95%\', wrapperAttr: { class: \'dxrd-chartdesigner-popup\' }, title: $root.getLocalization(\'Chart Designer\', \'ChartDesignerStringIDs.ChartDesignerWindowTitle\'), visible: visible, toolbarItems: buttons, showCloseButton: true, container: container($element), position: { of: container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': '95%', 'height': '95%', 'wrapperAttr': { 'class': 'dxrd-chartdesigner-popup' }, 'title': $context.$root.getLocalization('Chart Designer', 'ChartDesignerStringIDs.ChartDesignerWindowTitle'), 'visible': $context.$data.visible, 'toolbarItems': $context.$data.buttons, 'showCloseButton': true, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: visible, dxChartDesigner: options', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'dxChartDesigner': function () { return $context.$data.options; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: function() { $root.runChartDesigner($data); }, text: runDesignerButtonText(), attr: { title: runDesignerButtonText() }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$root.runChartDesigner($context.$data); }; }, 'text': function () { return $context.$data.runDesignerButtonText(); }, 'attr': function () { return { 'title': $context.$data.runDesignerButtonText() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() && $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'overflow': $context.$data.isSelected() ? 'visible' : 'hidden' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { cssFloat: isGlyphAlignmentNear() ? \'left\': \'right\', width: checkStateWidthContainer() }, styleunit: { lineHeight: contentHeightWithoutZoom }', function ($context, $element) { return { 'style': function () { return { 'cssFloat': $context.$data.isGlyphAlignmentNear() ? 'left' : 'right', 'width': $context.$data.checkStateWidthContainer() }; }, 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit:{ width: checkStateWidth, height: checkStateHeight }, css: checkStateClass, template: {name: $data.checkStateStyleIcon, if: !!ko.unwrap($data.checkStateStyleIcon)}', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.checkStateWidth, 'height': $context.$data.checkStateHeight }; }, 'css': function () { return $context.$data.checkStateClass; }, 'template': function () { return { 'name': $context.$data.checkStateStyleIcon, 'if': !!$context.ko.unwrap($context.$data.checkStateStyleIcon) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: textWidth, lineHeight: contentHeightWithoutZoom }, visible: visibleText, style: { cssFloat: isGlyphAlignmentNear() ? \'right\': \'left\' }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.textWidth, 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.visibleText; }, 'style': function () { return { 'cssFloat': $context.$data.isGlyphAlignmentNear() ? 'right' : 'left' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('controlDisplayName: $data, style: contentCss, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { lineHeight: contentHeightWithoutZoom }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$root.inlineTextEdit.show($element); } }; }, 'style': function () { return { 'visibility': ($context.$data.selected() || $context.$data.focused()) ? 'inherit' : 'hidden' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.contentSizes().top + ($context.$data.isIntersect() ? 1 : 0), 'left': $context.$data.contentSizes().left + ($context.$data.isIntersect() ? 1 : 0), 'lineHeight': $context.$data.contentSizes().height, 'height': $context.$data.contentSizes().height, 'width': $context.$data.contentSizes().width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.controls', function ($context, $element) { return { 'if': function () { return $context.$data.controls; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.contentSizes().top, 'left': $context.$data.contentSizes().left, 'lineHeight': $context.$data.contentSizes().height, 'height': $context.$data.contentSizes().height, 'width': $context.$data.contentSizes().width }; }, 'style': function () { return $context.$data.css; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: borderCss', function ($context, $element) { return { 'style': function () { return $context.$data.borderCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dxrd-uiselected\': selected }, styleunit: position', function ($context, $element) { return { 'css': function () { return { 'dxrd-uiselected': $context.$data.selected }; }, 'styleunit': function () { return $context.$data.position; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'} , style: lineCss', function ($context, $element) { return { 'attr': function () { return { 'x1': '50%', 'x2': '50%', 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.lineCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'}, style: lineWidthCss', function ($context, $element) { return { 'attr': function () { return { 'x1': '50%', 'x2': '50%', 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.lineWidthCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: isIntersect', function ($context, $element) { return { 'if': function () { return $context.$data.isIntersect; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-uiselected\': selected }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return { 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-uiselected': $context.$data.selected }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: edgeUnderCursor', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.edgeUnderCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: borderWidth()/2, x2: borderWidth()/2, y1: 0, y2: \'100%\' }, style: rightCss', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.borderWidth() / 2, 'x2': $context.$data.borderWidth() / 2, 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.rightCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: 0, x2: \'100%\', y1: borderWidth()/2, y2: borderWidth()/2 }, style: topCss', function ($context, $element) { return { 'attr': function () { return { 'x1': 0, 'x2': '100%', 'y1': $context.$data.borderWidth() / 2, 'y2': $context.$data.borderWidth() / 2 }; }, 'style': function () { return $context.$data.topCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: rect().width-borderWidth()/2, x2: rect().width-borderWidth()/2, y1: 0, y2: \'100%\' }, style: leftCss', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.rect().width - $context.$data.borderWidth() / 2, 'x2': $context.$data.rect().width - $context.$data.borderWidth() / 2, 'y1': 0, 'y2': '100%' }; }, 'style': function () { return $context.$data.leftCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: 0, x2: \'100%\', y1: rect().height-borderWidth()/2, y2: rect().height-borderWidth()/2 }, style: bottomCss', function ($context, $element) { return { 'attr': function () { return { 'x1': 0, 'x2': '100%', 'y1': $context.$data.rect().height - $context.$data.borderWidth() / 2, 'y2': $context.$data.rect().height - $context.$data.borderWidth() / 2 }; }, 'style': function () { return $context.$data.bottomCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: function() { isEditable() && $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.isEditable() && $context.$root.inlineTextEdit.show($element); } }; }, 'style': function () { return { 'visibility': ($context.$data.selected() || $context.$data.focused()) ? 'inherit' : 'hidden' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: showDropSurface, css: dragCss, styleunit: { left: dropRect.left, top: dropRect.top, width: dropRect.width, height: dropRect.height }', function ($context, $element) { return { 'visible': function () { return $context.$data.showDropSurface; }, 'css': function () { return $context.$data.dragCss; }, 'styleunit': function () { return { 'left': $context.$data.dropRect.left, 'top': $context.$data.dropRect.top, 'width': $context.$data.dropRect.width, 'height': $context.$data.dropRect.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: \'visible\'}, event: { mousedown: function(e) { cellClick(); } }', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() && $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'overflow': 'visible' }; }, 'event': function () { return { 'mousedown': function (e) { $context.$data.cellClick(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectLine($context.$root.selection, e); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'width': $context.$data.position.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e, true); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started()', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectLine($context.$root.selection, e, true); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e); e.stopPropagation(); },visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectLine($context.$root.selection, e); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'width': $context.$data.position.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-crosstab-cell-selection\'', function ($context, $element) { return { 'template': function () { return 'dxrd-crosstab-cell-selection'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: _control._rowIndex() === 0', function ($context, $element) { return { 'if': function () { return $context.$data._control._rowIndex() === 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: _control._columnIndex() === 0', function ($context, $element) { return { 'if': function () { return $context.$data._control._columnIndex() === 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: _control.parent._rowDefinitions().length - 1 ===  _control._rowIndex()', function ($context, $element) { return { 'if': function () { return $context.$data._control.parent._rowDefinitions().length - 1 === $context.$data._control._rowIndex(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: _control.parent._columnDefinitions().length - 1 ===  _control._columnIndex()', function ($context, $element) { return { 'if': function () { return $context.$data._control.parent._columnDefinitions().length - 1 === $context.$data._control._columnIndex(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline, \'dxrd-disabled\': $data.getControlModel().isBindable() && !$data.getControlModel().fieldName() }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline, 'dxrd-disabled': $context.$data.getControlModel().isBindable() && !$context.$data.getControlModel().fieldName() }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: \'visible\'}', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() && $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'overflow': 'visible' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: linePosition().x1 / _context.zoom(), x2: linePosition().x2 / _context.zoom(), y1: linePosition().y1 / _context.zoom(), y2: linePosition().y2 / _context.zoom() }, style: contentCss', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.linePosition().x1 / $context.$data._context.zoom(), 'x2': $context.$data.linePosition().x2 / $context.$data._context.zoom(), 'y1': $context.$data.linePosition().y1 / $context.$data._context.zoom(), 'y2': $context.$data.linePosition().y2 / $context.$data._context.zoom() }; }, 'style': function () { return $context.$data.contentCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: isSelected(), trackCursor: underCursor, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected(); }, 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-locked': $context.$data.locked }; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return { 'width': $context.$data.position.width(), 'height': 3, 'top': $context.$data.position.top() - 1, 'left': $context.$data.position.left() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !isSelected(), trackCursor: underCursor, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSelected(); }, 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'width': $context.$data.position.width(), 'height': 3, 'top': $context.$data.position.top() - 1, 'left': $context.$data.position.left() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': lineHeight, \'height\': lineHeight, \'width\': position.width() / _context.zoom() }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'lineHeight': $context.$data.lineHeight, 'height': $context.$data.lineHeight, 'width': $context.$data.position.width() / $context.$data._context.zoom() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: contentCss, styleunit: { lineHeight: contentHeightWithoutZoom, height: contentHeightWithoutZoom, width: contentWidthWithoutZoom }', function ($context, $element) { return { 'style': function () { return $context.$data.contentCss; }, 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom, 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: controlTypeClass, template: controlTypeIconTemplate', function ($context, $element) { return { 'css': function () { return $context.$data.controlTypeClass; }, 'template': function () { return $context.$data.controlTypeIconTemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: getControlModel().textContent', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().textContent; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: generateOwnPages()', function ($context, $element) { return { 'if': function () { return $context.$data.generateOwnPages(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'style': function () { return { 'visibility': ($context.$data.selected() || $context.$data.focused()) ? 'inherit' : 'hidden' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$data.getResizableOptions($context.$root.resizeHandler); }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: $data.showSkeleton', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.showSkeleton; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('controlDisplayName: $data, style: contentCss', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !$data.showSkeleton()', function ($context, $element) { return { 'visible': function () { return !$context.$data.showSkeleton(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: $data.visibleImage', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.visibleImage; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-todo-pdfsignature\', css: {\'dxrd-pdf-signature-image-fill-container\' : !$data.visibleText()}', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pdfsignature'; }, 'css': function () { return { 'dxrd-pdf-signature-image-fill-container': !$context.$data.visibleText() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: !$data.visibleImage() && !$data.hideImage(), css: {\'dxrd-pdf-signature-info-certificate-name-fill-container\': !$data.visibleText() }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return !$context.$data.visibleImage() && !$context.$data.hideImage(); }, 'css': function () { return { 'dxrd-pdf-signature-info-certificate-name-fill-container': !$context.$data.visibleText() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.certificateName, style: contentCss, css: { \'dxrd-control-content-multiline\' : multiline }', function ($context, $element) { return { 'text': function () { return $context.$data.certificateName; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { lineHeight: contentHeightWithoutZoom }, visible: visibleText, css: {\'dxrd-pdf-signature-info-fill-container\': $data.hideImage }', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; }, 'visible': function () { return $context.$data.visibleText; }, 'css': function () { return { 'dxrd-pdf-signature-info-fill-container': $context.$data.hideImage }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('controlDisplayName: $data, style: contentCss, css: { \'dxrd-control-content-multiline\' : multiline }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizeOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$data.getResizeOptions($context.$root.resizeHandler); }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': Math.max(positionWidthWithoutZoom(), minWidth()), \'height\': position.height() / _context.zoom() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.max($context.$data.positionWidthWithoutZoom(), $context.$data.minWidth()), 'height': $context.$data.position.height() / $context.$data._context.zoom() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dxrd-pivot-field-selected\': selected }, zoom: 1/_context.zoom(), styleunit: { \'width\': Math.max(position.width(), minWidth() * _context.zoom()), \'height\': position.height }', function ($context, $element) { return { 'css': function () { return { 'dxrd-pivot-field-selected': $context.$data.selected }; }, 'zoom': function () { return 1 / $context.$data._context.zoom(); }, 'styleunit': function () { return { 'width': Math.max($context.$data.position.width(), $context.$data.minWidth() * $context.$data._context.zoom()), 'height': $context.$data.position.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, zoom: _context.zoom', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'zoom': function () { return $context.$data._context.zoom; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, addHandler: $root.dx._static.PivotGridFieldViewModel.createNew(_model), displayName: $root.getLocalization(displayName), level: level, info: info }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'addHandler': $context.$root.dx._static.PivotGridFieldViewModel.createNew($context.$data._model), 'displayName': $context.$root.getLocalization($context.$data.displayName), 'level': $context.$data.level, 'info': $context.$data.info }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function(){ return $root.dx._static.SortBySummaryInfoCondition.createNew($parents[1].value()) } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.dx._static.SortBySummaryInfoCondition.createNew($context.$parents[1].value()); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: contentCss', function ($context, $element) { return { 'style': function () { return $context.$data.contentCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-pivot-content-rtl': $context.$data.getControlModel().rtl() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': positionWidthWithoutZoom  }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.positionWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Filter Fields Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.totalsRowFieldWidth, 'height': $context.$data.rowHeaderHeight }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': positionWidthWithoutZoom }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.positionWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Row Fields Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Grand Total', 'PivotGridStringId.GrandTotal'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Column Fields Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: totalsDataFieldWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.totalsDataFieldWidth }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.totalsHeight }; }, 'text': function () { return $context.$root.getLocalization('Grand Total', 'PivotGridStringId.GrandTotal'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Add Data Items Here', 'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: filterFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.filterFields().length !== 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: filterFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.filterFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: filterFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.filterFields().length === 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: rowFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.rowFields().length !== 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: rowFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.rowFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: rowFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.rowFields().length === 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: columnFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.columnFields().length !== 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: columnFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.columnFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: columnFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.columnFields().length === 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: dataFields().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.dataFields().length !== 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: dataFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.dataFields; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: dataFields().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.dataFields().length === 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom(), css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom(); }, 'css': function () { return { 'dxrd-pivot-content-rtl': $context.$data.getControlModel().rtl() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !($data.selected() || $data.focused()), css: { \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !($context.$data.selected() || $context.$data.focused()); }, 'css': function () { return { 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-control-rtl': $context.$data.getControlModel().rtl() }; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: $data.selected() || $data.focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-control-rtl': $context.$data.getControlModel().rtl() }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-pivotgrid-selection-context\'', function ($context, $element) { return { 'template': function () { return 'dxrd-pivotgrid-selection-context'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': Math.min($data.pageWidth() + $data.maxMarkerWidth() + $root.verticalScrollOffset() , $root.surfaceSize()) }, css: { \'dxrd-surface-rtl\': rtl() }, click: function(surface, e) { !$root.selection.disabled() && $root.selection.clickHandler($root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(surface, e) { $data.surfaceContextMenuHandler && $data.surfaceContextMenuHandler($root.selection, surface, e); }} : null, keyDownActions: $root.actionLists.getViewModel()', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.min($context.$data.pageWidth() + $context.$data.maxMarkerWidth() + $context.$root.verticalScrollOffset(), $context.$root.surfaceSize()) }; }, 'css': function () { return { 'dxrd-surface-rtl': $context.$data.rtl() }; }, 'click': function () { return function (surface, e) { !$context.$root.selection.disabled() && $context.$root.selection.clickHandler($context.$root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }; }, 'event': function () { return $context.$root.ContextMenusEnabled && $context.$root.ContextMenusEnabled() ? { 'contextmenu': function (surface, e) { $context.$data.surfaceContextMenuHandler && $context.$data.surfaceContextMenuHandler($context.$root.selection, surface, e); } } : null; }, 'keyDownActions': function () { return $context.$root.actionLists.getViewModel(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: $root.dx[\'config\']()[\'rtlEnabled\'] ?  { right: maxMarkerWidth() } : { left: maxMarkerWidth() }, style: { bottom: (20 - $root.horizontalScrollOffset()) + \'px\' }', function ($context, $element) { return { 'styleunit': function () { return $context.$root.dx['config']()['rtlEnabled'] ? { 'right': $context.$data.maxMarkerWidth() } : { 'left': $context.$data.maxMarkerWidth() }; }, 'style': function () { return { 'bottom': (20 - $context.$root.horizontalScrollOffset()) + 'px' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: leftMarginOffset,\'width\': margins.left }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.leftMarginOffset, 'width': $context.$data.margins.left }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ruler: { \'zoom\': zoom, \'length\': margins.left, \'units\': measureUnit, flip: ko.computed(function(){ return !rtl(); }) }', function ($context, $element) { return { 'ruler': function () { return { 'zoom': $context.$data.zoom, 'length': $context.$data.margins.left, 'units': $context.$data.measureUnit, 'flip': $context.ko.computed(function () { return !$context.$data.rtl(); }) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: 0, \'width\': margins.left }', function ($context, $element) { return { 'styleunit': function () { return { 'left': 0, 'width': $context.$data.margins.left }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': (pageWidth() - margins.left()), left: ghostContainerOffset }', function ($context, $element) { return { 'styleunit': function () { return { 'width': ($context.$data.pageWidth() - $context.$data.margins.left()), 'left': $context.$data.ghostContainerOffset }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins, 'left': $context.$data.leftMarginResizableOffset }; }, 'resizable': function () { return $context.$data.leftMarginResizeOptions($context.$root.undoEngine, $element); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ruler: { \'zoom\': zoom, \'length\': function() { return pageWidth() - margins.left();}, \'units\': measureUnit, flip: rtl }', function ($context, $element) { return { 'ruler': function () { return { 'zoom': $context.$data.zoom, 'length': function () { return $context.$data.pageWidth() - $context.$data.margins.left(); }, 'units': $context.$data.measureUnit, 'flip': $context.$data.rtl }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: rightMarginOffset, width: margins.right }, resizable: rightMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.rightMarginOffset, 'width': $context.$data.margins.right }; }, 'resizable': function () { return $context.$data.rightMarginResizeOptions($context.$root.undoEngine, $element); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'left\': pageWidth() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.pageWidth() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { minWidth: Math.min($data.pageWidth() + $root.verticalScrollOffset(), $root.surfaceSize()) - $data.maxMarkerWidth(), maxWidth: $data.pageWidth() + $root.verticalScrollOffset(), maxHeight: $data.effectiveHeight() + $root.horizontalScrollOffset() }, event: { scroll: function() { $root.onViewPortScroll($element) } }, style: { \'overflow-x\': $root.horizontalScrollOffset() ? \'auto\' : \'hidden\', \'overflow-y\': $root.verticalScrollOffset() ? \'auto\' : \'hidden\' }', function ($context, $element) { return { 'styleunit': function () { return { 'minWidth': Math.min($context.$data.pageWidth() + $context.$root.verticalScrollOffset(), $context.$root.surfaceSize()) - $context.$data.maxMarkerWidth(), 'maxWidth': $context.$data.pageWidth() + $context.$root.verticalScrollOffset(), 'maxHeight': $context.$data.effectiveHeight() + $context.$root.horizontalScrollOffset() }; }, 'event': function () { return { 'scroll': function () { $context.$root.onViewPortScroll($element); } }; }, 'style': function () { return { 'overflow-x': $context.$root.horizontalScrollOffset() ? 'auto' : 'hidden', 'overflow-y': $context.$root.verticalScrollOffset() ? 'auto' : 'hidden' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: leftMarginOffset, width: margins.left() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.leftMarginOffset, 'width': $context.$data.margins.left() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: ghostContainerOffset }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.ghostContainerOffset }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': pageWidthWithoutMargins, \'height\': minHeight }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins, 'height': $context.$data.minHeight }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: leftMarginOffset() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.leftMarginOffset() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: 0, x2: 0 }', function ($context, $element) { return { 'attr': function () { return { 'x1': 0, 'x2': 0 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: rtl() ? margins.right() : rightMarginOffset() }, visible: margins.right() > 0', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.rtl() ? $context.$data.margins.right() : $context.$data.rightMarginOffset() }; }, 'visible': function () { return $context.$data.margins.right() > 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': pageWidthWithoutMargins }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizableReportMargins: leftMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidthWithoutMargins, 'left': $context.$data.leftMarginResizableOffset }; }, 'resizableReportMargins': function () { return $context.$data.leftMarginResizeOptions($context.$root.undoEngine, $element); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: isSelected() && !$root.dx._static.DragDropHandler.started(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected() && !$context.$root.dx._static.DragDropHandler.started(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: rightMarginResizableOffset }, resizableReportMargins: rightMarginResizeOptions($root.undoEngine, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.rightMarginResizableOffset }; }, 'resizableReportMargins': function () { return $context.$data.rightMarginResizeOptions($context.$root.undoEngine, $element); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: maxMarkerWidth() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.maxMarkerWidth() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginSelectionTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$data.margins.left }; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left, snapGridSize: $data.snapGridSize  }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'leftMarginTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'width': $context.$data.margins.left, 'snapGridSize': $context.$data.snapGridSize }; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: crossBandControls', function ($context, $element) { return { 'foreach': function () { return $context.$data.crossBandControls; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: template }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxd-snap-lines-holder\', data: $root.snapHelper }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxd-snap-lines-holder', 'data': $context.$root.snapHelper }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: focused', function ($context, $element) { return { 'ifnot': function () { return $context.$data.focused; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-smart-tags\', data: $root.smartTagModel, if: $root.smartTagModel.visible && $root.smartTagModel.smartTags().length > 0 }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-smart-tags', 'data': $context.$root.smartTagModel, 'if': $context.$root.smartTagModel.visible && $context.$root.smartTagModel.smartTags().length > 0 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: focused', function ($context, $element) { return { 'if': function () { return $context.$data.focused; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $data.measureUnit }; } } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-band-holder', 'data': { 'templateName': 'vrulerTemplate', 'holder': $context.$data.bandsHolder, 'getData': function (item) { return { 'surface': item, 'measureUnit': $context.$data.measureUnit }; } } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate, styleunit: { height: contentHeightWithoutZoom, width: contentWidthWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { src: imageSrc }, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.imageSrc }; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: error', function ($context, $element) { return { 'text': function () { return $context.$data.error; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.imageSrc', function ($context, $element) { return { 'if': function () { return $context.$data.imageSrc; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.isLoading', function ($context, $element) { return { 'if': function () { return $context.$data.isLoading; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.error', function ($context, $element) { return { 'if': function () { return $context.$data.error; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': contentHeightWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'lineHeight': $context.$data.contentHeightWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick:  function (control, e) { $root.navigateByReports.goToSubreport(control); } }, visible: isSelected, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function (control, e) { $context.$root.navigateByReports.goToSubreport(control); } }; }, 'visible': function () { return $context.$data.isSelected; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$data.getResizableOptions($context.$root.resizeHandler); }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !isSelected(), styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSelected(); }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayText(), style: contentCss', function ($context, $element) { return { 'text': function () { return $context.$data.displayText(); }, 'style': function () { return $context.$data.contentCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { visibility: !isSelected() ? \'visible\' : \'hidden\'}, styleunit: position', function ($context, $element) { return { 'style': function () { return { 'visibility': !$context.$data.isSelected() ? 'visible' : 'hidden' }; }, 'styleunit': function () { return $context.$data.position; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'top\': position.top, \'height\': position.height }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style:{ overflow: isSelected() ? \'visible\' : \'hidden\', \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'overflow': $context.$data.isSelected() ? 'visible' : 'hidden', 'z-index': $context.$data.offsetZIndex() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { visibility: \'inherit\' }, css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position', function ($context, $element) { return { 'style': function () { return { 'visibility': 'inherit' }; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectColumn($context.$root.selection); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, visible: !$root.dx._static.DragDropHandler.started()', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style: { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); },visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }', function ($context, $element) { return { 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectColumn($context.$root.selection); e.stopPropagation(); }; }, 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: isSelected() && !(selected() || focused()), styleunit: position', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected() && !($context.$data.selected() || $context.$data.focused()); }, 'styleunit': function () { return $context.$data.position; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: isSelected(), css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'n,s\', disabled: !(selected() || focused()), zoom: $root.surface().zoom }, styleunit: { \'top\': position.top, \'height\': position.height }', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return { 'starting': $context.$root.resizeHandler.starting, 'stopped': $context.$root.resizeHandler.stopped, 'handles': 'n,s', 'disabled': !($context.$data.selected() || $context.$data.focused()), 'zoom': $context.$root.surface().zoom }; }, 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !$root.dx._static.DragDropHandler.started(), trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-table-cell-over-rowSpan\': rowSpan() === 0  }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'e,w\', disabled: !(selected() || focused()), zoom: $root.surface().zoom, snapHelper: $root.resizeHandler.snapHelper }, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, style : { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'event': function () { return { 'dblclick': function () { $context.$root.inlineTextEdit.show($element); } }; }, 'visible': function () { return $context.$data.isSelected; }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked, 'dxrd-table-cell-over-rowSpan': $context.$data.rowSpan() === 0 }; }, 'resizable': function () { return { 'starting': $context.$root.resizeHandler.starting, 'stopped': $context.$root.resizeHandler.stopped, 'handles': 'e,w', 'disabled': !($context.$data.selected() || $context.$data.focused()), 'zoom': $context.$root.surface().zoom, 'snapHelper': $context.$root.resizeHandler.snapHelper }; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, visible: !isSelected(), styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'visible': function () { return !$context.$data.isSelected(); }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !isSelected(), styleunit: { \'top\': position.top, \'height\': position.height }', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSelected(); }, 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !$root.dx._static.DragDropHandler.started(),trackCursor: underCursor', function ($context, $element) { return { 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'style': function () { return { 'z-index': $context.$data.offsetZIndex() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !$root.dx._static.DragDropHandler.started(),click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, styleunit: { \'left\': position.left, \'width\': position.width }', function ($context, $element) { return { 'visible': function () { return !$context.$root.dx._static.DragDropHandler.started(); }, 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$data.selectColumn($context.$root.selection); e.stopPropagation(); }; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: rows().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.rows().length > 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: rows', function ($context, $element) { return { 'foreach': function () { return $context.$data.rows; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: (selected() || focused())', function ($context, $element) { return { 'if': function () { return ($context.$data.selected() || $context.$data.focused()); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: rows()[0].cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.rows()[0].cells; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: rows()[rows().length-1].cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.rows()[$context.$data.rows().length - 1].cells; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, trackCursor: underCursor, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return $context.$data.adorntemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: css', function ($context, $element) { return { 'style': function () { return $context.$data.css; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'top\': position.top, \'height\': position.height}, style: css, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.position.top, 'height': $context.$data.position.height }; }, 'style': function () { return $context.$data.css; }, 'css': function () { return $context.$data.adorntemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, trackCursor: underCursor, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.position.width, 'height': $context.$data.heightWithRowSpan }; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return $context.$data.adorntemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': position.lineHeight() / _context.zoom(), \'width\': contentWidthWithoutZoom, \'height\': contentHeightWithoutZoom }, style: css', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'lineHeight': $context.$data.position.lineHeight() / $context.$data._context.zoom(), 'width': $context.$data.contentWidthWithoutZoom, 'height': $context.$data.contentHeightWithoutZoom }; }, 'style': function () { return $context.$data.css; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight}, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.position.height, 'top': $context.$data.position.top, 'lineHeight': $context.$data.position.lineHeight }; }, 'css': function () { return $context.$data.adorntemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'height\': _context.zoom()}', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data._context.zoom() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: borderCss, styleunit: { left: position.left, width: contentSizes().width + (contentSizes().left + contentSizes().right)}', function ($context, $element) { return { 'style': function () { return $context.$data.borderCss; }, 'styleunit': function () { return { 'left': $context.$data.position.left, 'width': $context.$data.contentSizes().width + ($context.$data.contentSizes().left + $context.$data.contentSizes().right) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: borderCss, styleunit: { left: position.left}', function ($context, $element) { return { 'style': function () { return $context.$data.borderCss; }, 'styleunit': function () { return { 'left': $context.$data.position.left }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left + position.left(), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}, style: css', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.contentSizes().top, 'left': $context.$data.contentSizes().left + $context.$data.position.left(), 'lineHeight': $context.$data.contentSizes().height, 'height': $context.$data.contentSizes().height, 'width': $context.$data.contentSizes().width }; }, 'style': function () { return $context.$data.css; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.getControlModel().name', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().name; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: leaderSymbols', function ($context, $element) { return { 'text': function () { return $context.$data.leaderSymbols; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$root.inlineTextEdit.show($element); } }; }, 'visible': function () { return $context.$data.isSelected; }, 'css': function () { return { 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, resizable: resizable($root.resizeHandler, $element)', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'resizable': function () { return $context.$data.resizable($context.$root.resizeHandler, $element); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight }, resizable: resizable($root.resizeHandler, $element)', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.position.height, 'top': $context.$data.position.top, 'lineHeight': $context.$data.position.lineHeight }; }, 'resizable': function () { return $context.$data.resizable($context.$root.resizeHandler, $element); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: levelTitle.template, data: levelTitle }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.levelTitle.template, 'data': $context.$data.levelTitle }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: $data.levels()', function ($context, $element) { return { 'foreach': function () { return $context.$data.levels(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: levelDefault.template, data: levelDefault, isDefault: true }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.levelDefault.template, 'data': $context.$data.levelDefault, 'isDefault': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: getControlModel().rtl()', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().rtl(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !getControlModel().rtl()', function ($context, $element) { return { 'if': function () { return !$context.$data.getControlModel().rtl(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: getControlModel().isTitle', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().isTitle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: getControlModel().isTitle', function ($context, $element) { return { 'ifnot': function () { return $context.$data.getControlModel().isTitle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: levelTitle', function ($context, $element) { return { 'with': function () { return $context.$data.levelTitle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: levelDefault', function ($context, $element) { return { 'with': function () { return $context.$data.levelDefault; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'controlDisplayName': function () { return $context.$data; }, 'style': function () { return $context.$data.contentCss; }, 'css': function () { return { 'dxrd-control-content-multiline': $context.$data.multiline }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, trackCursor: underCursor, style: css, css: adorntemplate', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return $context.$data.css; }, 'css': function () { return $context.$data.adorntemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, style: contentCss', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'style': function () { return $context.$data.contentCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom, template: contenttemplate', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom; }, 'template': function () { return $context.$data.contenttemplate; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: propertyGrid', function ($context, $element) { return { 'with': function () { return $context.$data.propertyGrid; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: ko.observable(tableInfoItems), displayName: $root.getLocalization(\'Filter Criteria\', \'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle\'), hideButtons: true }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.ko.observable($context.$data.tableInfoItems), 'displayName': $context.$root.getLocalization('Filter Criteria', 'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle'), 'hideButtons': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: tableName', function ($context, $element) { return { 'text': function () { return $context.$data.tableName; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFilterEditor: { options: filterString, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.filterString, 'fieldListProvider': $context.$root.dataBindingsProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.filterString() !== null', function ($context, $element) { return { 'if': function () { return $context.$data.filterString() !== null; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { \'height\': height() + \'px\',  \'width\': width() + \'px\' }, attr: { viewBox: \'0 0 \' + width() + \' \' + height() }', function ($context, $element) { return { 'style': function () { return { 'height': $context.$data.height() + 'px', 'width': $context.$data.width() + 'px' }; }, 'attr': function () { return { 'viewBox': '0 0 ' + $context.$data.width() + ' ' + $context.$data.height() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: coordVal, x2: coordVal }, visible: visible', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.coordVal, 'x2': $context.$data.coordVal }; }, 'visible': function () { return $context.$data.visible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { y1: coordVal, y2: coordVal }, visible: visible', function ($context, $element) { return { 'attr': function () { return { 'y1': $context.$data.coordVal, 'y2': $context.$data.coordVal }; }, 'visible': function () { return $context.$data.visible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: verticalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.verticalGridLines; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: horizontalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.horizontalGridLines; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: majorVerticalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.majorVerticalGridLines; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: majorHorizontalGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.majorHorizontalGridLines; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: $root.editableObject, displayExpr: function(value) { var showValue = value || $root.editableObject(); return $root.dx._static.getControlFullName(showValue) }, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$root.controlsStore.dataSource, 'value': $context.$root.editableObject, 'displayExpr': function (value) { var showValue = value || $context.$root.editableObject(); return $context.$root.dx._static.getControlFullName(showValue); }, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dx-propertieseditor\'', function ($context, $element) { return { 'template': function () { return 'dx-propertieseditor'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: !inRenameMode && (isSelected || isHovered)', function ($context, $element) { return { 'visible': function () { return !$context.$data.inRenameMode && ($context.$data.isSelected || $context.$data.isHovered); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: createRenameEditorOptions(), dxValidator: createValidatorOptions()', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.createRenameEditorOptions(); }, 'dxValidator': function () { return $context.$data.createValidatorOptions(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !inRenameMode', function ($context, $element) { return { 'if': function () { return !$context.$data.inRenameMode; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: inRenameMode', function ($context, $element) { return { 'if': function () { return $context.$data.inRenameMode; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Field List\', \'ReportStringId.UD_Title_FieldList\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Field List', 'ReportStringId.UD_Title_FieldList'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: startWizard, visible: visible(), text: addDataSourceButtonText, icon: \'dxrd-svg-operations-add\', iconClass: \'dx-image-add\' }, attr: { title: addDataSourceButtonText }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.startWizard, 'visible': $context.$data.visible(), 'text': $context.$data.addDataSourceButtonText, 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dx-image-add' }; }, 'attr': function () { return { 'title': $context.$data.addDataSourceButtonText }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treeListSearchPanel: {controllers:treeListOptions.treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.treeListOptions.treeListController }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxContextMenu: fieldListContextMenu', function ($context, $element) { return { 'dxContextMenu': function () { return $context.$data.fieldListContextMenu; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.allowAddDataSource', function ($context, $element) { return { 'if': function () { return $context.$data.allowAddDataSource; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: useContextMenu', function ($context, $element) { return { 'if': function () { return $context.$data.useContextMenu; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('searchHighlighting: { text: displayName, textToSearch: $parent.textToSearch }, attr: { \'title\': displayName }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$parent.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: defaultText, readOnly: !$data.isDefaultLanguage() }, css: { \'dxrd-localization-panel-textbox-full\': $data.isDefaultLanguage() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.defaultText, 'readOnly': !$context.$data.isDefaultLanguage() }; }, 'css': function () { return { 'dxrd-localization-panel-textbox-full': $context.$data.isDefaultLanguage() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: localizedText, onFocusIn: function(e, s) { $parent.onItemGotFocus(e) }, visible: !$data.isDefaultLanguage()}', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.localizedText, 'onFocusIn': function (e, s) { $context.$parent.onItemGotFocus(e); }, 'visible': !$context.$data.isDefaultLanguage() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextArea: { value: defaultText, readOnly: !$data.isDefaultLanguage(), autoResizeEnabled: true, minHeight: \'26px\', maxHeight: \'58px\' }, css: { \'dxrd-localization-panel-textbox-full\': $data.isDefaultLanguage() }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.defaultText, 'readOnly': !$context.$data.isDefaultLanguage(), 'autoResizeEnabled': true, 'minHeight': '26px', 'maxHeight': '58px' }; }, 'css': function () { return { 'dxrd-localization-panel-textbox-full': $context.$data.isDefaultLanguage() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextArea: { value: localizedText, onFocusIn: function(e, s) { $parent.onItemGotFocus(e) }, autoResizeEnabled: true, minHeight: \'26px\', maxHeight: \'58px\' }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.localizedText, 'onFocusIn': function (e, s) { $context.$parent.onItemGotFocus(e); }, 'autoResizeEnabled': true, 'minHeight': '26px', 'maxHeight': '58px' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-rtl\': $root.rtl, \'dx-ltr\': !$root.rtl }, styleunit: { width: width }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$root.rtl, 'dx-ltr': !$context.$root.rtl }; }, 'styleunit': function () { return { 'width': $context.$data.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('resizable: getResizableOptions($element, 0, 500, $root.rtl ? \'Left\': \'Right\', \'Right\', width)', function ($context, $element) { return { 'resizable': function () { return $context.$data.getResizableOptions($element, 0, 500, $context.$root.rtl ? 'Left' : 'Right', 'Right', $context.$data.width); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Localization\', \'ASPxReportsStringId.ReportDesigner_LocalizationEditor_Title\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Localization', 'ASPxReportsStringId.ReportDesigner_LocalizationEditor_Title'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-property-grid-search-uncollapsed \': isSearching() }', function ($context, $element) { return { 'css': function () { return { 'dx-property-grid-search-uncollapsed ': $context.$data.isSearching() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Language\', \'DevExpress.XtraReports.UI.XtraReport.XRLanguage\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Language', 'DevExpress.XtraReports.UI.XtraReport.XRLanguage'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-field-value-shortened\': getRegisteredService() }', function ($context, $element) { return { 'css': function () { return { 'dx-field-value-shortened': $context.$data.getRegisteredService() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: function() { $data.applyLocalization($data.getRegisteredService()) }, disabled: isDefaultLanguage(), icon: \'dxrd-svg-actions-apply_localization_service\', iconClass: \'apply-localization-service\' }, attr: { title: $root.getLocalization(\'Translate\', \'ASPxReportsStringId.ReportDesigner_LocalizationEditorTranslate\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.applyLocalization($context.$data.getRegisteredService()); }, 'disabled': $context.$data.isDefaultLanguage(), 'icon': 'dxrd-svg-actions-apply_localization_service', 'iconClass': 'apply-localization-service' }; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Translate', 'ASPxReportsStringId.ReportDesigner_LocalizationEditorTranslate') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: clearLocalization, icon: \'dxrd-svg-actions-reset\', iconClass: \'reset-localization\', disabled: isDefaultLanguage() }, attr: { title: $root.getLocalization(\'Reset\', \'ASPxReportsStringId.ParametersPanel_Reset\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.clearLocalization, 'icon': 'dxrd-svg-actions-reset', 'iconClass': 'reset-localization', 'disabled': $context.$data.isDefaultLanguage() }; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Reset', 'ASPxReportsStringId.ParametersPanel_Reset') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.propertiesHeaderText()', function ($context, $element) { return { 'text': function () { return $context.$data.propertiesHeaderText(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.defaultLanguageText()', function ($context, $element) { return { 'text': function () { return $context.$data.defaultLanguageText(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.currentLanguageText(), visible: !$data.isDefaultLanguage()', function ($context, $element) { return { 'text': function () { return $context.$data.currentLanguageText(); }, 'visible': function () { return !$context.$data.isDefaultLanguage(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { dataSource: localizationItems, selectionMode: \'single\', height: \'calc(100% - 59px)\', onSelectionChanged: onSelectionChanged, focusStateEnabled: false, activeStateEnabled: false, pageLoadMode: \'scrollBottom\', noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.localizationItems, 'selectionMode': 'single', 'height': 'calc(100% - 59px)', 'onSelectionChanged': $context.$data.onSelectionChanged, 'focusStateEnabled': false, 'activeStateEnabled': false, 'pageLoadMode': 'scrollBottom', 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLoadPanel:{ visible: showLoadIndicator, shading: true, position: { of: getLoadPanelPosition($element) }, showIndicator: true, showPane: true, shadingColor: \'rgba(0,0,0,0.4)\'}', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'visible': $context.$data.showLoadIndicator, 'shading': true, 'position': { 'of': $context.$data.getLoadPanelPosition($element) }, 'showIndicator': true, 'showPane': true, 'shadingColor': 'rgba(0,0,0,0.4)' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !ko.unwrap($data.multiline)', function ($context, $element) { return { 'if': function () { return !$context.ko.unwrap($context.$data.multiline); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: ko.unwrap($data.multiline)', function ($context, $element) { return { 'if': function () { return $context.ko.unwrap($context.$data.multiline); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !$data.isDefaultLanguage()', function ($context, $element) { return { 'if': function () { return !$context.$data.isDefaultLanguage(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-localization-combobox\', data: { getValues: function() { return $data.availableCultures; }, value: language, disabled: false } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-localization-combobox', 'data': { 'getValues': function () { return $context.$data.availableCultures; }, 'value': $context.$data.language, 'disabled': false } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: getRegisteredService()', function ($context, $element) { return { 'if': function () { return $context.$data.getRegisteredService(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('lazy: { template: \'dxrd-localization-editor-item\' }', function ($context, $element) { return { 'lazy': function () { return { 'template': 'dxrd-localization-editor-item' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Report Explorer\', \'ReportStringId.UD_Title_ReportExplorer\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Report Explorer', 'ReportStringId.UD_Title_ReportExplorer'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treeListSearchPanel: {controllers:treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.treeListController }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }, dxAutoScrolling: { active: $root.dx._static.DragDropHandler.started }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true }; }, 'dxAutoScrolling': function () { return { 'active': $context.$root.dx._static.DragDropHandler.started }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treelist: { selectedPath: itemsProvider.selectedPath, itemsProvider: itemsProvider, treeListController: treeListController }', function ($context, $element) { return { 'treelist': function () { return { 'selectedPath': $context.$data.itemsProvider.selectedPath, 'itemsProvider': $context.$data.itemsProvider, 'treeListController': $context.$data.treeListController }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }', function ($context, $element) { return { 'attr': function () { return { 'width': $context.$data.width() + 'px', 'height': $context.$data.height() + 'px' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x: disable.start, width: disable.width }', function ($context, $element) { return { 'attr': function () { return { 'x': $context.$data.disable.start, 'width': $context.$data.disable.width }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: coordVal, x2: coordVal }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.coordVal, 'x2': $context.$data.coordVal }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: text, attr: {x: coordVal, y: 12 }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'x': $context.$data.coordVal, 'y': 12 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: disable', function ($context, $element) { return { 'if': function () { return $context.$data.disable; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: gridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.gridLines; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: majorGridLines', function ($context, $element) { return { 'foreach': function () { return $context.$data.majorGridLines; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { x1: $parent.defaultGridLinesCoordinate().x1, x2: $parent.defaultGridLinesCoordinate().x2, y1: coordVal, y2: coordVal }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$parent.defaultGridLinesCoordinate().x1, 'x2': $context.$parent.defaultGridLinesCoordinate().x2, 'y1': $context.$data.coordVal, 'y2': $context.$data.coordVal }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: {x1: $parent.defaultGridLinesCoordinate().majorX1, x2: $parent.defaultGridLinesCoordinate().majorX2, y1: coordVal, y2: coordVal }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$parent.defaultGridLinesCoordinate().majorX1, 'x2': $context.$parent.defaultGridLinesCoordinate().majorX2, 'y1': $context.$data.coordVal, 'y2': $context.$data.coordVal }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: text, attr: {x: $parent.defaultGridLinesCoordinate().x, y: coordVal }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'x': $context.$parent.defaultGridLinesCoordinate().x, 'y': $context.$data.coordVal }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface.watermark.imageSource().getDataUrl(), transparency: reportSurface.watermark.imageTransparency(), viewMode: reportSurface.watermark.imageViewMode(), align: reportSurface.watermark.imageAlign(), tiling: reportSurface.watermark.imageTiling() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-flip': $context.$data.forLeftMargin }; }, 'dxWatermark': function () { return { 'band': $context.$data.band, 'reportSurface': $context.$data.reportSurface, 'forLeftMargin': $context.$data.forLeftMargin, 'image': $context.$data.reportSurface.watermark.imageSource().getDataUrl(), 'transparency': $context.$data.reportSurface.watermark.imageTransparency(), 'viewMode': $context.$data.reportSurface.watermark.imageViewMode(), 'align': $context.$data.reportSurface.watermark.imageAlign(), 'tiling': $context.$data.reportSurface.watermark.imageTiling() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface._watermarkTextRenderingResult(), transparency: reportSurface.watermark.textTransparency(), viewMode: \'Stretch\', align: \'MiddleCenter\', tiling: false }', function ($context, $element) { return { 'css': function () { return { 'dxrd-flip': $context.$data.forLeftMargin }; }, 'dxWatermark': function () { return { 'band': $context.$data.band, 'reportSurface': $context.$data.reportSurface, 'forLeftMargin': $context.$data.forLeftMargin, 'image': $context.$data.reportSurface._watermarkTextRenderingResult(), 'transparency': $context.$data.reportSurface.watermark.textTransparency(), 'viewMode': 'Stretch', 'align': 'MiddleCenter', 'tiling': false }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.reportSurface.watermark && $data.reportSurface.watermark.shouldDrawWatermarkImage()', function ($context, $element) { return { 'if': function () { return $context.$data.reportSurface.watermark && $context.$data.reportSurface.watermark.shouldDrawWatermarkImage(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.reportSurface.watermark && $data.reportSurface.watermark.text()', function ($context, $element) { return { 'if': function () { return $context.$data.reportSurface.watermark && $context.$data.reportSurface.watermark.text(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-rtl\' : $root.rtl, \'dx-ltr\': !$root.rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$root.rtl, 'dx-ltr': !$context.$root.rtl }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-toolbar-tmplt\', data: getViewModel().toolbarItems }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-tmplt', 'data': $context.$data.getViewModel().toolbarItems }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxAceEditor: { value: scriptsText, editorContainer: editorContainer, options: aceOptions }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.scriptsText, 'editorContainer': $context.$data.editorContainer, 'options': $context.$data.aceOptions }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: widget.dataSource, onValueChanged: widget.onValueChanged, value: widget.value, displayExpr: widget.displayExpr, placeholder: widget.placeholder, width: widget.width, dropDownOptions: { container: getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.widget.dataSource, 'onValueChanged': $context.$data.widget.onValueChanged, 'value': $context.$data.widget.value, 'displayExpr': $context.$data.widget.displayExpr, 'placeholder': $context.$data.widget.placeholder, 'width': $context.$data.widget.width, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: editorVisible', function ($context, $element) { return { 'if': function () { return $context.$data.editorVisible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: editorVisible, template: \'dxrd-scripts-addon\'', function ($context, $element) { return { 'visible': function () { return $context.$data.editorVisible; }, 'template': function () { return 'dxrd-scripts-addon'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dx-context-menu-flex\': !($data.items) }', function ($context, $element) { return { 'css': function () { return { 'dx-context-menu-flex': !($context.$data.items) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.displayText ? $data.displayText() : $data.text', function ($context, $element) { return { 'text': function () { return $context.$data.displayText ? $context.$data.displayText() : $context.$data.text; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.imageTemplateName', function ($context, $element) { return { 'if': function () { return $context.$data.imageTemplateName; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $data.imageTemplateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.imageTemplateName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.items', function ($context, $element) { return { 'if': function () { return $context.$data.items; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-svg-preview-next_page\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-svg-preview-next_page' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: _position, css: { \'collapsed\': collapsed }, resizable: _resizableOptions', function ($context, $element) { return { 'style': function () { return $context.$data._position; }, 'css': function () { return { 'collapsed': $context.$data.collapsed }; }, 'resizable': function () { return $context.$data._resizableOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { display: $data.collapsed() ? \'none\' : \'block\' }', function ($context, $element) { return { 'style': function () { return { 'display': $context.$data.collapsed() ? 'none' : 'block' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.panelTitle', function ($context, $element) { return { 'text': function () { return $context.$data.panelTitle; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function() { $data.toggleCollapsed() }', function ($context, $element) { return { 'click': function () { return function () { $context.$data.toggleCollapsed(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxDataGrid: _dataGridOptions', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data._dataGridOptions; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-active\': data.pressed }, dxButton: { text: data.text, onClick: data.onClick }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.data.pressed }; }, 'dxButton': function () { return { 'text': $context.$data.data.text, 'onClick': $context.$data.data.onClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $parent.getIconTemplateName($data.value) }, attr: { title: $data.value }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parent.getIconTemplateName($context.$data.value) }; }, 'attr': function () { return { 'title': $context.$data.value }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.data.code, attr: { href: $data.data.link }', function ($context, $element) { return { 'text': function () { return $context.$data.data.code; }, 'attr': function () { return { 'href': $context.$data.data.link }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.value', function ($context, $element) { return { 'text': function () { return $context.$data.value; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: value, click: function() { $parent.navigateToItem($data.value); }', function ($context, $element) { return { 'text': function () { return $context.$data.value; }, 'click': function () { return function () { $context.$parent.navigateToItem($context.$data.value); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: data.description', function ($context, $element) { return { 'text': function () { return $context.$data.data.description; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTagBox: { maxDisplayedTags: 0, showSelectionControls: true, valueExpr: \'value\', displayExpr: \'displayValue\', value: data.value, dataSource: data.dataSource, useItemTextAsTitle: true, dropDownOptions: { container: data.getContainer($element), minWidth: 200 }, }', function ($context, $element) { return { 'dxTagBox': function () { return { 'maxDisplayedTags': 0, 'showSelectionControls': true, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'value': $context.$data.data.value, 'dataSource': $context.$data.data.dataSource, 'useItemTextAsTitle': true, 'dropDownOptions': { 'container': $context.$data.data.getContainer($element), 'minWidth': 200 } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonGroup: $data.data', function ($context, $element) { return { 'dxButtonGroup': function () { return $context.$data.data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $parents[1].getIconTemplateName(icon) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parents[1].getIconTemplateName($context.$data.icon) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.text()', function ($context, $element) { return { 'text': function () { return $context.$data.text(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { display: !$data.collapsed() ? \'none\' : \'block\' }', function ($context, $element) { return { 'style': function () { return { 'display': !$context.$data.collapsed() ? 'none' : 'block' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function() { $data.toggleCollapsed() }, template: { name: $data.getNotificationTemplate() }, attr: { title: $data.getTitleMessage() }', function ($context, $element) { return { 'click': function () { return function () { $context.$data.toggleCollapsed(); }; }, 'template': function () { return { 'name': $context.$data.getNotificationTemplate() }; }, 'attr': function () { return { 'title': $context.$data.getTitleMessage() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.data.showLink', function ($context, $element) { return { 'if': function () { return $context.$data.data.showLink; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !$data.data.showLink', function ($context, $element) { return { 'if': function () { return !$context.$data.data.showLink; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'dx-type-button\'}', function () { return { dxTemplate: { name: 'dx-type-button' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name:\'dxrd-errorType-column\' }', function () { return { dxTemplate: { name: 'dxrd-errorType-column' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name:\'dxrd-code-column\' }', function () { return { dxTemplate: { name: 'dxrd-code-column' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate:{ name:\'dxrd-source-column\' }', function () { return { dxTemplate: { name: 'dxrd-source-column' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'detail\' }', function () { return { dxTemplate: { name: 'detail' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'dxrd-error-source-filter\' }', function () { return { dxTemplate: { name: 'dxrd-error-source-filter' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'dxrd-error-type-filter\' }', function () { return { dxTemplate: { name: 'dxrd-error-type-filter' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'dxrd-error-type-filter-item\' }', function () { return { dxTemplate: { name: 'dxrd-error-type-filter-item' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { width: $root.surfaceSize() ? $root.surfaceSize() + \'px\' : \'auto\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$root.surfaceSize() ? $context.$root.surfaceSize() + 'px' : 'auto' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTabs: { dataSource: tabs, selectedIndex: selectedIndex, showNavButtons: false, scrollingEnabled: false }', function ($context, $element) { return { 'dxTabs': function () { return { 'dataSource': $context.$data.tabs, 'selectedIndex': $context.$data.selectedIndex, 'showNavButtons': false, 'scrollingEnabled': false }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: icon, event: { mousedown: function(e) { $parent.removeTab(e); } }', function ($context, $element) { return { 'css': function () { return $context.$data.icon; }, 'event': function () { return { 'mousedown': function (e) { $context.$parent.removeTab(e); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: isDirty() ? displayName() + \'*\' : displayName(), title: displayName, style: { \'font-weight\': isDirty() ? \'bold\' : \'normal\' }', function ($context, $element) { return { 'text': function () { return $context.$data.isDirty() ? $context.$data.displayName() + '*' : $context.$data.displayName(); }, 'title': function () { return $context.$data.displayName; }, 'style': function () { return { 'font-weight': $context.$data.isDirty() ? 'bold' : 'normal' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: $root.isLoading() && tabs().length === 1', function ($context, $element) { return { 'ifnot': function () { return $context.$root.isLoading() && $context.$data.tabs().length === 1; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: allowMDI', function ($context, $element) { return { 'if': function () { return $context.$data.allowMDI; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: tabs().length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.tabs().length > 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-navigation-panel-template-content\'', function ($context, $element) { return { 'template': function () { return 'dxrd-navigation-panel-template-content'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: allowMDI', function ($context, $element) { return { 'ifnot': function () { return $context.$data.allowMDI; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: tabs().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.tabs().length > 1; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: icon', function ($context, $element) { return { 'if': function () { return $context.$data.icon; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: \'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget \' + popupCss, dxPopup: { wrapperAttr: { class: \'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget \' + popupCss }, showTitle: true, width: width, height: height, title: $root.getLocalization(title), visible: visible, toolbarItems: buttons, showCloseButton: true, container: container($element), position: { of: container($element) }}', function ($context, $element) { return { 'css': function () { return 'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget ' + $context.$data.popupCss; }, 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget ' + $context.$data.popupCss }, 'showTitle': true, 'width': $context.$data.width, 'height': $context.$data.height, 'title': $context.$root.getLocalization($context.$data.title), 'visible': $context.$data.visible, 'toolbarItems': $context.$data.buttons, 'showCloseButton': true, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', height: 510 }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': 510 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: _propertiesGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data._propertiesGrid }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: _settingsGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data._settingsGrid }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: onClick, icon: icon, iconClass: iconClass }, attr: { title: title }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.onClick, 'icon': $context.$data.icon, 'iconClass': $context.$data.iconClass }; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: onClick, disabled: $parent.isDisabledButton(name), icon: icon, iconClass: iconClass }, attr: { title: title }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.onClick, 'disabled': $context.$parent.isDisabledButton($context.$data.name), 'icon': $context.$data.icon, 'iconClass': $context.$data.iconClass }; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true, direction: \'both\' }, dxAutoScrolling: { active: $root.dx._static.DragDropHandler.started }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true, 'direction': 'both' }; }, 'dxAutoScrolling': function () { return { 'active': $context.$root.dx._static.DragDropHandler.started }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: contentEmptyAreaPlaceHolder', function ($context, $element) { return { 'text': function () { return $context.$data.contentEmptyAreaPlaceHolder; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: contentNoPropertiesPlaceHolder', function ($context, $element) { return { 'text': function () { return $context.$data.contentNoPropertiesPlaceHolder; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.value().name', function ($context, $element) { return { 'text': function () { return $context.$data.value().name; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: getOptions({ value: value, text: displayName, disabled: disabled })', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'text': $context.$data.displayName, 'disabled': $context.$data.disabled }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) , showScroll: true, collapsed: false, alwaysShow: true }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'info': $context.$data.info, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'showScroll': true, 'collapsed': false, 'alwaysShow': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: getProperties({ level: level }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'level': $context.$data.level }) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, addHandler: $root.dx._static.LookUpValue.createNew, level: level, displayName: $root.getLocalization(displayName), info: info, collapsed: false, showScroll: true, alwaysShow: true, hideButtons: !ko.unwrap($root.canAddItems) }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'addHandler': $context.$root.dx._static.LookUpValue.createNew, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'info': $context.$data.info, 'collapsed': false, 'showScroll': true, 'alwaysShow': true, 'hideButtons': !$context.ko.unwrap($context.$root.canAddItems) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-parameters-dialog\', data: _addParametersDialog }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-parameters-dialog', 'data': $context.$data._addParametersDialog }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-parameters-dialog\', data: _editParametersDialog }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-parameters-dialog', 'data': $context.$data._editParametersDialog }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: _selectedParameterSettings', function ($context, $element) { return { 'if': function () { return $context.$data._selectedParameterSettings; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: addButtons', function ($context, $element) { return { 'foreach': function () { return $context.$data.addButtons; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: visible && ko.unwrap($root.canAddItems)', function ($context, $element) { return { 'if': function () { return $context.$data.visible && $context.ko.unwrap($context.$root.canAddItems); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: moveButtons', function ($context, $element) { return { 'foreach': function () { return $context.$data.moveButtons; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.contentVisible() && !$data.hasNoEditableProperties()', function ($context, $element) { return { 'if': function () { return $context.$data.contentVisible() && !$context.$data.hasNoEditableProperties(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-parameter-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-parameter-edit'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !$data.contentVisible()', function ($context, $element) { return { 'if': function () { return !$context.$data.contentVisible(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.hasNoEditableProperties()', function ($context, $element) { return { 'if': function () { return $context.$data.hasNoEditableProperties(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: editorCreated && visible', function ($context, $element) { return { 'if': function () { return $context.$data.editorCreated && $context.$data.visible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: ko.unwrap($data.value) && ko.unwrap($data.visible)', function ($context, $element) { return { 'if': function () { return $context.ko.unwrap($context.$data.value) && $context.ko.unwrap($context.$data.visible); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { showTitle: true, width: width, height: height, title: $root.getLocalization(title), visible: visible, disabled: disabled, toolbarItems: buttons, showCloseButton: true, container: container($element), wrapperAttr: { class: \'dxrd-reportdialog dx-editors dx-widget\' }, position: { of: container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': $context.$data.width, 'height': $context.$data.height, 'title': $context.$root.getLocalization($context.$data.title), 'visible': $context.$data.visible, 'disabled': $context.$data.disabled, 'toolbarItems': $context.$data.buttons, 'showCloseButton': true, 'container': $context.$data.container($element), 'wrapperAttr': { 'class': 'dxrd-reportdialog dx-editors dx-widget' }, 'position': { 'of': $context.$data.container($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLoadPanel: { visible:true, container: container($element), position: { of: container($element) } }', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'visible': true, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { showTitle: true, minWidth: 530, height: popupOptions.height, width: \'auto\', title: popupOptions.title, visible: popupOptions.visible, toolbarItems: popupOptions.buttons, showCloseButton: true, wrapperAttr: { class: \'dxrd-reportdialog dxrd-reportdialog-converter dx-editors dx-widget\' }, container: popupOptions.container($element), position: { of: popupOptions.container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'minWidth': 530, 'height': $context.$data.popupOptions.height, 'width': 'auto', 'title': $context.$data.popupOptions.title, 'visible': $context.$data.popupOptions.visible, 'toolbarItems': $context.$data.popupOptions.buttons, 'showCloseButton': true, 'wrapperAttr': { 'class': 'dxrd-reportdialog dxrd-reportdialog-converter dx-editors dx-widget' }, 'container': $context.$data.popupOptions.container($element), 'position': { 'of': $context.$data.popupOptions.container($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-wizard-warning\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-warning'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: popupOptions.confirmMessage', function ($context, $element) { return { 'text': function () { return $context.$data.popupOptions.confirmMessage; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: popupOptions.infoMessage', function ($context, $element) { return { 'text': function () { return $context.$data.popupOptions.infoMessage; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: popupOptions.linkText, attr: {href: popupOptions.linkUrl, target: \'_blank\' }', function ($context, $element) { return { 'text': function () { return $context.$data.popupOptions.linkText; }, 'attr': function () { return { 'href': $context.$data.popupOptions.linkUrl, 'target': '_blank' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: $data.reportName, height: 36, placeholder: reportNamePlaceholder(), valueChangeEvent: \'keyup\' }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.reportName, 'height': 36, 'placeholder': $context.$data.reportNamePlaceholder(), 'valueChangeEvent': 'keyup' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { dataSource: urls, selectedItems: [], editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportName(e.itemData.Value); }, activeStateEnabled: false, noDataText: $data.noDataText, encodeNoDataText: true, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\') }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.urls, 'selectedItems': [], 'editEnabled': true, 'height': 200, 'editConfig': { 'selectionEnabled': true }, 'selectionMode': 'single', 'onItemClick': function (e) { this.reportName(e.itemData.Value); }, 'activeStateEnabled': false, 'noDataText': $context.$data.noDataText, 'encodeNoDataText': true, 'nextButtonText': $context.$root.getLocalization('More', 'ASPxReportsStringId.List_More') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: function(e){ $parent.onDblClick(e.Key); } }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function (e) { $context.$parent.onDblClick(e.Key); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.Value', function ($context, $element) { return { 'text': function () { return $context.$data.Value; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: saveText', function ($context, $element) { return { 'text': function () { return $context.$data.saveText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { mode: \'search\', height: 36, value: searchValue, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }', function ($context, $element) { return { 'dxTextBox': function () { return { 'mode': 'search', 'height': 36, 'value': $context.$data.searchValue, 'valueChangeEvent': 'keyup', 'placeholder': $context.$data.searchPlaceholder(), 'showClearButton': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { dataSource: urls, selectedItems: [], searchExpr: [\'Value\'], searchValue: searchValue, editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportUrl(e.itemData.Key); }, activeStateEnabled: false, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\'), noDataText: $data.noDataText, encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.urls, 'selectedItems': [], 'searchExpr': ['Value'], 'searchValue': $context.$data.searchValue, 'editEnabled': true, 'height': 200, 'editConfig': { 'selectionEnabled': true }, 'selectionMode': 'single', 'onItemClick': function (e) { this.reportUrl(e.itemData.Key); }, 'activeStateEnabled': false, 'nextButtonText': $context.$root.getLocalization('More', 'ASPxReportsStringId.List_More'), 'noDataText': $context.$data.noDataText, 'encodeNoDataText': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: disabled', function ($context, $element) { return { 'if': function () { return $context.$data.disabled; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: popupOptions.infoMessage', function ($context, $element) { return { 'if': function () { return $context.$data.popupOptions.infoMessage; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: popupOptions.linkText', function ($context, $element) { return { 'if': function () { return $context.$data.popupOptions.linkText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('cacheElement: { action: function(element){ $data.setMenuElement(element) } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data.setMenuElement(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-menu-fullscreen-nav-collapsed\': isMenuCollapsed()}', function ($context, $element) { return { 'css': function () { return { 'dxrd-menu-fullscreen-nav-collapsed': $context.$data.isMenuCollapsed() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: $data.isMenuCollapsed() ? 50 : 300 }, visible: appMenuVisible', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.isMenuCollapsed() ? 50 : 300 }; }, 'visible': function () { return $context.$data.appMenuVisible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-toolbar-delete\', dxclick: function(e) { toggleAppMenu() }, dxpointerenter: function(_, e) {  e.target.classList &&  e.target.classList.add(\'dxd-state-active\') }, dxpointerleave: function(_, e) {  e.target.classList &&  e.target.classList.remove(\'dxd-state-active\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-delete'; }, 'dxclick': function () { return function (e) { $context.$data.toggleAppMenu(); }; }, 'dxpointerenter': function () { return function (_, e) { e.target.classList && e.target.classList.add('dxd-state-active'); }; }, 'dxpointerleave': function () { return function (_, e) { e.target.classList && e.target.classList.remove('dxd-state-active'); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Menu\', \'ASPxReportsStringId.ReportDesigner_Menu_Text\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Menu', 'ASPxReportsStringId.ReportDesigner_Menu_Text'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-menu-back\', dxclick: function(e) { isMenuCollapsed(false); }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-back'; }, 'dxclick': function () { return function (e) { $context.$data.isMenuCollapsed(false); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled, \'dxd-state-active\': $data.selected }, visible: visible', function ($context, $element) { return { 'dxclick': function () { return function (e) { if ($context.$data.disabled && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$root.toggleAppMenu();
        $context.$data.clickAction($context.$root.model(), e);
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled, 'dxd-state-active': $context.$data.selected }; }, 'visible': function () { return $context.$data.visible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !isMenuCollapsed()', function ($context, $element) { return { 'if': function () { return !$context.$data.isMenuCollapsed(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: isMenuCollapsed', function ($context, $element) { return { 'if': function () { return $context.$data.isMenuCollapsed; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !$root.isMenuCollapsed()', function ($context, $element) { return { 'if': function () { return !$context.$root.isMenuCollapsed(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dx-field-flex\': (templateName === \'dx-boolean\'), \'dx-field-block\': (templateName !== \'dx-boolean\') }', function ($context, $element) { return { 'css': function () { return { 'dx-field-flex': ($context.$data.templateName === 'dx-boolean'), 'dx-field-block': ($context.$data.templateName !== 'dx-boolean') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, attr: { \'title\': fullDisplayName, \'for\': editorInputId }, css: { \'dx-property-required\': isRequired }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.fullDisplayName, 'for': $context.$data.editorInputId }; }, 'css': function () { return { 'dx-property-required': $context.$data.isRequired }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: editorTemplate !== \'dx-commonCollection\'', function ($context, $element) { return { 'if': function () { return $context.$data.editorTemplate !== 'dx-commonCollection'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: templateName !== \'dx-boolean\'', function ($context, $element) { return { 'if': function () { return $context.$data.templateName !== 'dx-boolean'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: templateName === \'dx-boolean\'', function ($context, $element) { return { 'if': function () { return $context.$data.templateName === 'dx-boolean'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopover: { width: \'216px\', height: \'auto\', position: { my: \'left center\', at: \'right center\', boundary: \'.dxrd-designer-wrapper\', of: \'.dxrd-control-smart-tag\', collision: \'flip fit\', offset: \'-10 0\' }, container: getPopupContainer($element), hideOnOutsideClick: true, showTitle: false, showCloseButton: false, shading: false, visible: popoverVisible, animation: {} }', function ($context, $element) { return { 'dxPopover': function () { return { 'width': '216px', 'height': 'auto', 'position': { 'my': 'left center', 'at': 'right center', 'boundary': '.dxrd-designer-wrapper', 'of': '.dxrd-control-smart-tag', 'collision': 'flip fit', 'offset': '-10 0' }, 'container': $context.$data.getPopupContainer($element), 'hideOnOutsideClick': true, 'showTitle': false, 'showCloseButton': false, 'shading': false, 'visible': $context.$data.popoverVisible, 'animation': {} }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: separatorVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.separatorVisible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: getEditors(false)', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(false); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-smart-tag-editor\'', function ($context, $element) { return { 'template': function () { return 'dxrd-smart-tag-editor'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: getEditors(true)', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(true); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: $data.position.x, top: $data.position.y, width: width }, visible: visible', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.position.x, 'top': $context.$data.position.y, 'width': $context.$data.width }; }, 'visible': function () { return $context.$data.visible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { icon: $data.imageTemplateName, width: $parent.width, height: $parent.width, iconClass: $data.imageTemplateName }, event: { dblclick: function(_, event){ event.stopPropagation(); } }, click: function(_, event){ $data.onClick(); event.stopPropagation(); }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'icon': $context.$data.imageTemplateName, 'width': $context.$parent.width, 'height': $context.$parent.width, 'iconClass': $context.$data.imageTemplateName }; }, 'event': function () { return { 'dblclick': function (_, event) { event.stopPropagation(); } }; }, 'click': function () { return function (_, event) { $context.$data.onClick(); event.stopPropagation(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.expressionEditor', function ($context, $element) { return { 'with': function () { return $context.$data.expressionEditor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-expressioneditor-popup\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-expressioneditor-popup' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: $data.smartTags', function ($context, $element) { return { 'foreach': function () { return $context.$data.smartTags; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Select the report\', \'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Select the report', 'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $data.items, itemTemplate: \'stateItem\', valueExpr: \'path\', displayExpr: \'name\', value: $data.value, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.items, 'itemTemplate': 'stateItem', 'valueExpr': 'path', 'displayExpr': 'name', 'value': $context.$data.value, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: name, styleunit: {marginLeft: 30 * level}', function ($context, $element) { return { 'text': function () { return $context.$data.name; }, 'styleunit': function () { return { 'marginLeft': 30 * $context.$data.level }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: $parent.visible', function ($context, $element) { return { 'visible': function () { return $context.$parent.visible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.getDisplayText()', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: $data.visible, attr: { \'aria-label\': $data.displayText && $data.displayText() || $data.text, \'aria-disabled\': ko.unwrap($data.disabled) ? \'true\' : \'false\', \'aria-pressed\': $data.selected ? ($data.selected() ? \'true\' : \'false\') : null }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'attr': function () { return { 'aria-label': $context.$data.displayText && $context.$data.displayText() || $context.$data.text, 'aria-disabled': $context.ko.unwrap($context.$data.disabled) ? 'true' : 'false', 'aria-pressed': $context.$data.selected ? ($context.$data.selected() ? 'true' : 'false') : null }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.displayText && $data.displayText() || $data.text, attr: { title: $data.displayText && $data.displayText() || $data.text, class: \'dxd-text-primary dxd-back-highlighted \' + (ko.unwrap($data.imageClassName) || \'\') }, dxclick: function() { if((typeof $data.disabled === \'function\') && !$data.disabled() || !$data.disabled) { $data.clickAction($root.model && $root.model()); } }, css: {\'dxrd-disabled-button\': $data.disabled }', function ($context, $element) { return { 'text': function () { return $context.$data.displayText && $context.$data.displayText() || $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text, 'class': 'dxd-text-primary dxd-back-highlighted ' + ($context.ko.unwrap($context.$data.imageClassName) || '') }; }, 'dxclick': function () { return function () { if ((typeof $context.$data.disabled === 'function') && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$data.clickAction($context.$root.model && $context.$root.model());
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxContextMenu: $data.contextMenu', function ($context, $element) { return { 'dxContextMenu': function () { return $context.$data.contextMenu; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !!$root.surface()', function ($context, $element) { return { 'if': function () { return !!$context.$root.surface(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $root.dx._static.editorTemplates.getEditor("combobox").header, data: $root.surface().wrapRtlProperty($data, $root.undoEngine, $element) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$root.dx._static.editorTemplates.getEditor('combobox').header, 'data': $context.$root.surface().wrapRtlProperty($context.$data, $context.$root.undoEngine, $element) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: $data.items', function ($context, $element) { return { 'foreach': function () { return $context.$data.items; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-toolbar-two-way-switch-active\', if: $data.active }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-two-way-switch-active', 'if': $context.$data.active }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-toolbar-two-way-switch-clickable\', if: !$data.active, data: $data.itemData }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-two-way-switch-clickable', 'if': !$context.$data.active, 'data': $context.$data.itemData }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxclick: function() { $root.activateExpressionEditor($data); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$root.activateExpressionEditor($context.$data); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('cacheElement: { action: function() { $data.cacheFunction($root.activateExpressionEditor); } }, dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function () { $context.$data.cacheFunction($context.$root.activateExpressionEditor); } }; }, 'dxclick': function () { return function (_, element) { $context.$data.showPopup(_, element); }; }, 'attr': function () { return { 'title': $context.$data.hint }; }, 'css': function () { return $context.$data.editorMenuButtonCss; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dxrd-expressioneditor-complex dx-popup-general\' }, title: title, visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'645px\', maxHeight: \'95%\', width: \'862px\', maxWidth: \'95%\', minHeight: \'400px\', minWidth: \'600px\', resizeEnabled: true, onResize: function() { $data.resizeAceEditor() }, container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onShowing: function(e) { onShowing(e); }, onHiding: function(e) { onHiding(e); }, onShown: function(e) { editor().onShown(e) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'showTitle': true, 'wrapperAttr': { 'class': 'dx-expressioneditor dxrd-expressioneditor-complex dx-popup-general' }, 'title': $context.$data.title, 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'height': '645px', 'maxHeight': '95%', 'width': '862px', 'maxWidth': '95%', 'minHeight': '400px', 'minWidth': '600px', 'resizeEnabled': true, 'onResize': function () { $context.$data.resizeAceEditor(); }, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) }, 'onShowing': function (e) { $context.$data.onShowing(e); }, 'onHiding': function (e) { $context.$data.onHiding(e); }, 'onShown': function (e) { $context.$data.editor().onShown(e); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dxd-state-selected\': isSelected }, dxclick: function() { $data.click($data.content); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; }, 'dxclick': function () { return function () { $context.$data.click($context.$data.content); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, attr: { title: displayName }, css: { \'dxrd-expressioneditor-property-binded\': isBinded() }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dxrd-expressioneditor-property-binded': $context.$data.isBinded() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-properties-propertyexpression\', visible: isBinded()', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-propertyexpression'; }, 'visible': function () { return $context.$data.isBinded(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxExpressionEditor: { options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider(), editorTemplateName: \'dx-expressioneditor-main\', popupVisible: $data.popupVisible, wrapper: $parent }', function ($context, $element) { return { 'dxExpressionEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$root.reportItemsProvider, 'displayNameProvider': $context.$root.expressionDisplayNameProvider && $context.$root.expressionDisplayNameProvider(), 'editorTemplateName': 'dx-expressioneditor-main', 'popupVisible': $context.$data.popupVisible, 'wrapper': $context.$parent }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: {\'dxd-state-selected\': $data.isSelected }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, style: { fontWeight: isBinded() ? \'Bold\' : \'\'}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'style': function () { return { 'fontWeight': $context.$data.isBinded() ? 'Bold' : '' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-expressioneditor-popup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-expressioneditor-popup'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: properties', function ($context, $element) { return { 'foreach': function () { return $context.$data.properties; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.adapter', function ($context, $element) { return { 'with': function () { return $context.$data.adapter; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.patchOptions($root.reportExplorerProvider, $root.editableObject && $root.editableObject())', function ($context, $element) { return { 'if': function () { return $context.$data.patchOptions($context.$root.reportExplorerProvider, $context.$root.editableObject && $context.$root.editableObject()); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-expressioneditor-fields\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-expressioneditor-fields', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: { items: viewmodel.items, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$data.viewmodel.items, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $data.getValues($root.reportUrls, $root.navigateByReports.currentTab), onOpened: function() { $data.updateUrls(); }, searchEnabled: true, value: value, disabled: disabled, valueExpr: \'Key\', displayExpr: \'Value\', dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.getValues($context.$root.reportUrls, $context.$root.navigateByReports.currentTab), 'onOpened': function () { $context.$data.updateUrls(); }, 'searchEnabled': true, 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'valueExpr': 'Key', 'displayExpr': 'Value', 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: { items: $parent.values, value: type, valueExpr: \'value\', showClearButton: showClearButton, displayExpr: \'displayValue\', displayCustomValue: true, disabled: $parent.disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$parent.values, 'value': $context.$data.type, 'valueExpr': 'value', 'showClearButton': $context.$data.showClearButton, 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$parent.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: [\'Unchecked\',\'Checked\',\'Indeterminate\']', function ($context, $element) { return { 'foreach': function () { return ['Unchecked', 'Checked', 'Indeterminate']; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(displayValue, localizationId), attr: { title: $root.getLocalization(displayValue, localizationId) }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization($context.$data.displayValue, $context.$data.localizationId); }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.displayValue, $context.$data.localizationId) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: getEditorOptions($root.dataSourceHelper, $root.undoEngine, $root.getPopupContainer($element))', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getEditorOptions($context.$root.dataSourceHelper, $context.$root.undoEngine, $context.$root.getPopupContainer($element)); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: generateValue($root.bands), value: value, displayExpr: \'displayName\', valueExpr: \'value\', displayCustomValue: true, disabled: disabled, placeholder: $root.getLocalization(\'(none)\', \'ChartStringId.WizNoBackImage\'), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.generateValue($context.$root.bands), 'value': $context.$data.value, 'displayExpr': 'displayName', 'valueExpr': 'value', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'placeholder': $context.$root.getLocalization('(none)', 'ChartStringId.WizNoBackImage'), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: visible, styleunit: { \'marginLeft\' : padding }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'styleunit': function () { return { 'marginLeft': $context.$data.padding }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: value.selected, disabled: disabled }, dxclick: function(_, event) { event.stopPropagation(); }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.value.selected, 'disabled': $context.$data.disabled }; }, 'dxclick': function () { return function (_, event) { event.stopPropagation(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: value.name, attr: { title: value.name }', function ($context, $element) { return { 'text': function () { return $context.$data.value.name; }, 'attr': function () { return { 'title': $context.$data.value.name }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: getProperties({ editorsInfo: { editors: $root.dx._static.formattingRuleSerializationsInfo }, level: level + 1, disabled: disabled }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'editorsInfo': { 'editors': $context.$root.dx._static.formattingRuleSerializationsInfo }, 'level': $context.$data.level + 1, 'disabled': $context.$data.disabled }) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: wrapValues($root.displayNameProvider), value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }, dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.wrapValues($context.$root.displayNameProvider), 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: new $root.dx._static.StylesEditorHeaderModel(value, $root.model, disabled, $root.getPopupContainer($element))', function ($context, $element) { return { 'dxSelectBox': function () { return new $context.$root.dx._static.StylesEditorHeaderModel($context.$data.value, $context.$root.model, $context.$data.disabled, $context.$root.getPopupContainer($element)); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxStylesEditor: { styleName: value, styles: $root.styles() }', function ($context, $element) { return { 'dxStylesEditor': function () { return { 'styleName': $context.$data.value, 'styles': $context.$root.styles() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: { acceptCustomValue: true, displayValue: $displayName, onValueChanged: onValueChanged, itemsProvider: $root.dataBindingsProvider(), treeListController: $parent.treeListController, value: $data.generateValue($root.undoEngine(), $root.dataSourceHelper(), $root.fieldListDataSources(), $root.dataBindingsProvider()), disabled: $parent.disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'acceptCustomValue': true, 'displayValue': $context.$data.$displayName, 'onValueChanged': $context.$data.onValueChanged, 'itemsProvider': $context.$root.dataBindingsProvider(), 'treeListController': $context.$parent.treeListController, 'value': $context.$data.generateValue($context.$root.undoEngine(), $context.$root.dataSourceHelper(), $context.$root.fieldListDataSources(), $context.$root.dataBindingsProvider()), 'disabled': $context.$parent.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: { acceptCustomValue: true, onValueChanged: onValueChanged, displayValue: generateDisplayValue($root.reportDataSource), itemsProvider: $root.reportDataBindingsProvider, treeListController: treeListController, value: generateValue($root.undoEngine(), $root.reportParameters, $root.reportDataSource), disabled: disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'acceptCustomValue': true, 'onValueChanged': $context.$data.onValueChanged, 'displayValue': $context.$data.generateDisplayValue($context.$root.reportDataSource), 'itemsProvider': $context.$root.reportDataBindingsProvider, 'treeListController': $context.$data.treeListController, 'value': $context.$data.generateValue($context.$root.undoEngine(), $context.$root.reportParameters, $context.$root.reportDataSource), 'disabled': $context.$data.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: { acceptCustomValue: true, onValueChanged: onValueChanged, value: itemsProvider.selectedPath, displayValue: displayExpr, itemsProvider: itemsProvider, path: itemsProvider.path, disabled: disabled, treeListController: treeListController }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'acceptCustomValue': true, 'onValueChanged': $context.$data.onValueChanged, 'value': $context.$data.itemsProvider.selectedPath, 'displayValue': $context.$data.displayExpr, 'itemsProvider': $context.$data.itemsProvider, 'path': $context.$data.itemsProvider.path, 'disabled': $context.$data.disabled, 'treeListController': $context.$data.treeListController }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: padding', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Format String\', \'DevExpress.XtraReports.UI.XRBinding.FormatString\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Format String', 'DevExpress.XtraReports.UI.XRBinding.FormatString'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxEventDropDownEditor: { items: $root.events, value: value, editEnabled: true, disabled: disabled, secondAction: function() { $root.gotoEvent && $root.gotoEvent($data.value(), name, $parents[1]._model && $parents[1]._model()); }, placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxEventDropDownEditor': function () { return { 'items': $context.$root.events, 'value': $context.$data.value, 'editEnabled': true, 'disabled': $context.$data.disabled, 'secondAction': function () { $context.$root.gotoEvent && $context.$root.gotoEvent($context.$data.value(), $context.$data.name, $context.$parents[1]._model && $context.$parents[1]._model()); }, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { \'marginLeft\' : padding }', function ($context, $element) { return { 'styleunit': function () { return { 'marginLeft': $context.$data.padding }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $parents[1].info().getChildCaption(index) + \':\'', function ($context, $element) { return { 'text': function () { return $context.$parents[1].info().getChildCaption($context.$data.index) + ':'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: value.changeSortOrder, icon: value.sortOrderClass().template, iconClass: value.sortOrderClass().class, disabled: disabled }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.value.changeSortOrder, 'icon': $context.$data.value.sortOrderClass().template, 'iconClass': $context.$data.value.sortOrderClass().class, 'disabled': $context.$data.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: { displayValue: $displayName, value: value.fieldName, acceptCustomValue: true, path: $parents[1]._model() && $parents[1]._model().getPath(\'groupFields\') || \'\', itemsProvider: $root.dataBindingsProvider(), treeListController: new $root.dx._static.TreeListController(), disabled: disabled}', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'displayValue': $context.$data.$displayName, 'value': $context.$data.value.fieldName, 'acceptCustomValue': true, 'path': $context.$parents[1]._model() && $context.$parents[1]._model().getPath('groupFields') || '', 'itemsProvider': $context.$root.dataBindingsProvider(), 'treeListController': new $context.$root.dx._static.TreeListController(), 'disabled': $context.$data.disabled }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, addHandler: $root.dx._static.LookUpValue.createNew, undoEngine: $root.undoEngine, level: level, displayName: $root.getLocalization(displayName), info: info }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'addHandler': $context.$root.dx._static.LookUpValue.createNew, 'undoEngine': $context.$root.undoEngine, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'info': $context.$data.info }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.calculatedFieldsSource().createCalculatedField(\'\'); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.calculatedFieldsSource().createCalculatedField(''); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), allowEditItems: $root.canAddItems, level: level, info: info, _accessibilityProvider: ko.unwrap(_accessibilityProvider), addHandler: function() { return $root.watermarks().createWatermark(); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'allowEditItems': $context.$root.canAddItems, 'level': $context.$data.level, 'info': $context.$data.info, '_accessibilityProvider': $context.ko.unwrap($context.$data._accessibilityProvider), 'addHandler': function () { return $context.$root.watermarks().createWatermark(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return $root.parameters().add(); }, removeHandler: function(parameter) { return $root.parameters().remove(parameter); }, allowEditItems: $root.parameterEditingSettings.allowEditParameterCollection, allowReorderItems: $root.parameterEditingSettings.allowReorderParameters, undoEngine: $root.undoEngine }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.parameters().add(); }, 'removeHandler': function (parameter) { return $context.$root.parameters().remove(parameter); }, 'allowEditItems': $context.$root.parameterEditingSettings.allowEditParameterCollection, 'allowReorderItems': $context.$root.parameterEditingSettings.allowReorderParameters, 'undoEngine': $context.$root.undoEngine }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.dx._static.TableOfContentsLevel.createNew(_model()); } }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$root.getLocalization($context.$data.displayName), 'level': $context.$data.level, 'info': $context.$data.info, 'addHandler': function () { return $context.$root.dx._static.TableOfContentsLevel.createNew($context.$data._model()); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: {\'paddingLeft\': padding + $root.dx._static.propertiesGridEditorsPaddingLeft() }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingLeft': $context.$data.padding + $context.$root.dx._static.propertiesGridEditorsPaddingLeft() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: getProperties({ level: level + 2 }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'level': $context.$data.level + 2 }) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: getOptions({ value:generateValue($root.undoEngine), showSpinButtons:true, disabled:disabled, min:min, max:max }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getOptions({ 'value': $context.$data.generateValue($context.$root.undoEngine), 'showSpinButtons': true, 'disabled': $context.$data.disabled, 'min': $context.$data.min, 'max': $context.$data.max }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.boldHasExpression }, click: function() { if(!$parent.disabled()) { bold(!bold()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.bold(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.boldHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.bold(!$context.$data.bold());
    } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.italicHasExpression }, click: function() { if(!$parent.disabled()) { italic(!italic()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.italic(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.italicHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.italic(!$context.$data.italic());
    } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.underlineHasExpression }, click: function() { if(!$parent.disabled()) { underline(!underline()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.underline(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.underlineHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.underline(!$context.$data.underline());
    } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.strikeoutHasExpression }, click: function() { if(!$parent.disabled()) { strikeout(!strikeout()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.strikeout(), 'dx-disabled-button': $context.$parent.disabled, 'dxd-border-accented': $context.$data.strikeoutHasExpression }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.strikeout(!$context.$data.strikeout());
    } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: generateValue($root.undoEngine) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.generateValue($context.$root.undoEngine) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: $data', function ($context, $element) { return { 'dxFieldListPicker': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected': $context.$data.isSelected }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: text, attr: { title: data.title }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.data.title }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { id: editorInputId } }),  dxValidator: { validationRules: generateRules($root.controlsHelper.allControls) || [] }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.generateRules($context.$root.controlsHelper.allControls) || [] }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxEllipsisEditor: { value: displayValue, buttonAction: function() { $parent.showPopup($root.editableObject && $root.editableObject()); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning, inputAttr: { id: editorInputId } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.displayValue, 'buttonAction': function () { $context.$parent.showPopup($context.$root.editableObject && $context.$root.editableObject()); }, 'disabled': $context.$data.disabled, 'isValid': $context.$data.modelValueValid, 'warningMessage': $context.$data.modelValueWarning, 'inputAttr': { 'id': $context.$data.editorInputId } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider(), editorTemplateName: $data.editorTemplateName })', function ($context, $element) { return { 'dxExpressionEditor': function () { return $context.$data.getOptions({ 'options': $context.$data.value, 'fieldListProvider': $context.$root.reportItemsProvider, 'displayNameProvider': $context.$root.expressionDisplayNameProvider && $context.$root.expressionDisplayNameProvider(), 'editorTemplateName': $context.$data.editorTemplateName }); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFilterEditor: { options: value, fieldListProvider: itemsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: displayNameProvider }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$data.itemsProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath, 'displayNameProvider': $context.$data.displayNameProvider }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxRichTextFileEditor: { value: value, placeholderId: \'File\', disabled: disabled, accept:\'.rtf,.docx,.txt,.htm,.html\' }', function ($context, $element) { return { 'dxRichTextFileEditor': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'disabled': $context.$data.disabled, 'accept': '.rtf,.docx,.txt,.htm,.html' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxImageSourceEditor: { value: value, onValueChanged: onValueChanged, accept: \'image/*\', type: \'img\', disabled: disabled, inputAttr: { id: editorInputId}, showClearButton: true }', function ($context, $element) { return { 'dxImageSourceEditor': function () { return { 'value': $context.$data.value, 'onValueChanged': $context.$data.onValueChanged, 'accept': 'image/*', 'type': 'img', 'disabled': $context.$data.disabled, 'inputAttr': { 'id': $context.$data.editorInputId }, 'showClearButton': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled, accept:\'.pdf\', showClearButton: true }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'disabled': $context.$data.disabled, 'accept': '.pdf', 'showClearButton': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopup: { showTitle: true, width: \'550px\', height: \'400px\', wrapperAttr: { class: \'dxrd-summaryeditor-popup\' }, title: $root.getLocalization(\'Summary Editor\'), visible: $data.popup.visible, toolbarItems: $data.popup.buttons, showCloseButton: true, container: $data.popup.container($element), position: { of: $data.popup.container($element) }}', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': '550px', 'height': '400px', 'wrapperAttr': { 'class': 'dxrd-summaryeditor-popup' }, 'title': $context.$root.getLocalization('Summary Editor'), 'visible': $context.$data.popup.visible, 'toolbarItems': $context.$data.popup.buttons, 'showCloseButton': true, 'container': $context.$data.popup.container($element), 'position': { 'of': $context.$data.popup.container($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $data.getValues(), searchEnabled: true, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element)  }, inputAttr: { id: editorInputId }, popupPosition: { boundary: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.getValues(), 'searchEnabled': true, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'id': $context.$data.editorInputId }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayValue, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: displayValue }', function ($context, $element) { return { 'text': function () { return $context.$data.displayValue; }, 'style': function () { return { 'fontWeight': $context.$root.isLocalized($context.$data.value) ? 'bold' : 'normal' }; }, 'attr': function () { return { 'title': $context.$data.displayValue }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $data.getValues(), searchEnabled: true, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), width:  $root.calculateWithZoomFactor(357) }, inputAttr: { id: editorInputId }, popupPosition: { boundary: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.getValues(), 'searchEnabled': true, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'width': $context.$root.calculateWithZoomFactor(357) }, 'inputAttr': { 'id': $context.$data.editorInputId }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: value === \'Default\' ? \'\' : value, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: value }', function ($context, $element) { return { 'text': function () { return $context.$data.value === 'Default' ? '' : $context.$data.value; }, 'style': function () { return { 'fontWeight': $context.$root.isLocalized($context.$data.value) ? 'bold' : 'normal' }; }, 'attr': function () { return { 'title': $context.$data.value }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: $parent.templateBinding(\'dxrd-svg-checkboxglyphs-\' + $parent.value + \'_\' + $data)', function ($context, $element) { return { 'template': function () { return $context.$parent.templateBinding('dxrd-svg-checkboxglyphs-' + $context.$parent.value + '_' + $context.$data); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('displayNameExtender: { dataSource: dataSource, dataMember: displayExpr }', function ($context, $element) { return { 'displayNameExtender': function () { return { 'dataSource': $context.$data.dataSource, 'dataMember': $context.$data.displayExpr }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: value()', function ($context, $element) { return { 'if': function () { return $context.$data.value(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: value()', function ($context, $element) { return { 'with': function () { return $context.$data.value(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-formatstring\', data: { value: $data.formatString, disabled: $data.disabled, actions: $parent.actions, customPatterns: $parent.customPatterns } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-formatstring', 'data': { 'value': $context.$data.formatString, 'disabled': $context.$data.disabled, 'actions': $context.$parent.actions, 'customPatterns': $context.$parent.customPatterns } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('displayNameExtender: { path: function() { return $parents[1]._model() && $parents[1]._model().getPath(\'groupFields\') || \'\' }, dataMember: value.fieldName }', function ($context, $element) { return { 'displayNameExtender': function () { return { 'path': function () { return $context.$parents[1]._model() && $context.$parents[1]._model().getPath('groupFields') || ''; }, 'dataMember': $context.$data.value.fieldName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-reportexpression\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-reportexpression' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-expressioneditor-popup\', data: $data.wrapper }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-expressioneditor-popup', 'data': $context.$data.wrapper }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.wrapModel($root.fieldListProvider)', function ($context, $element) { return { 'with': function () { return $context.$data.wrapModel($context.$root.fieldListProvider); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dx-emptyHeader\'', function ($context, $element) { return { 'template': function () { return 'dx-emptyHeader'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dx-propertieseditor\', data: $data.popup.grid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.popup.grid }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: getListOptions()', function ($context, $element) { return { 'dxList': function () { return $context.$data.getListOptions(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': '100%' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: _icon', function ($context, $element) { return { 'template': function () { return $context.$data._icon; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _title', function ($context, $element) { return { 'text': function () { return $context.$data._title; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': 'auto' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treelist: _signleFieldMemberFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._signleFieldMemberFieldListModel; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('trackCursor: underCursor, css: {\'dxrd-wizard-crosstab-droppable-page\': isDroppable}', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return { 'dxrd-wizard-crosstab-droppable-page': $context.$data.isDroppable }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _fieldName', function ($context, $element) { return { 'text': function () { return $context.$data._fieldName; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _valueName', function ($context, $element) { return { 'text': function () { return $context.$data._valueName; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: fieldInfos', function ($context, $element) { return { 'foreach': function () { return $context.$data.fieldInfos; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $parent._crossTabFields, displayExpr: \'displayName\', value: field, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$parent._crossTabFields, 'displayExpr': 'displayName', 'value': $context.$data.field, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: value', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.value; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { icon: \'close\', onClick: function () { return $parent._removeInfo($data);  }}', function ($context, $element) { return { 'dxButton': function () { return { 'icon': 'close', 'onClick': function () { return $context.$parent._removeInfo($context.$data); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function () { $parent._applyScheme($data); }, style: { backgroundColor: color }', function ($context, $element) { return { 'click': function () { return function () { $context.$parent._applyScheme($context.$data); }; }, 'style': function () { return { 'backgroundColor': $context.$data.color }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('visible: $data.selected()', function ($context, $element) { return { 'visible': function () { return $context.$data.selected(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-page-color-scheme-tile-content-edit-active\': $data.popoverVisible() }, click: function() { $data.popoverVisible(!$data.popoverVisible()) }', function ($context, $element) { return { 'css': function () { return { 'dxrd-page-color-scheme-tile-content-edit-active': $context.$data.popoverVisible() }; }, 'click': function () { return function () { $context.$data.popoverVisible(!$context.$data.popoverVisible()); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template:\'dxrd-svg-color_gear\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-color_gear'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopover: { visible: $data.popoverVisible, width: \'auto\', height: \'auto\', wrapperAttr: { class: \'dxrd-page-color-scheme-colorpicker\' }, container: $root.getPopupContainer($element), target: \'.dxrd-page-color-scheme-tile-content-edit-icon\', position: { my: \'left center\', at: \'right center\', collision: \'fit\', of: \'.dxrd-page-color-scheme-tile-content-edit\', boundary: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopover': function () { return { 'visible': $context.$data.popoverVisible, 'width': 'auto', 'height': 'auto', 'wrapperAttr': { 'class': 'dxrd-page-color-scheme-colorpicker' }, 'container': $context.$root.getPopupContainer($element), 'target': '.dxrd-page-color-scheme-tile-content-edit-icon', 'position': { 'my': 'left center', 'at': 'right center', 'collision': 'fit', 'of': '.dxrd-page-color-scheme-tile-content-edit', 'boundary': $context.$root.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxColorView: { value: editorColor, editAlphaChannel: true }', function ($context, $element) { return { 'dxColorView': function () { return { 'value': $context.$data.editorColor, 'editAlphaChannel': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { text: \'Cancel\', onClick: function() { $data.resetColor() }}', function ($context, $element) { return { 'dxButton': function () { return { 'text': 'Cancel', 'onClick': function () { $context.$data.resetColor(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { text: \'Ok\', onClick: function() { $data.applyColor() }}', function ($context, $element) { return { 'dxButton': function () { return { 'text': 'Ok', 'onClick': function () { $context.$data.applyColor(); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: _lookupData.scheme', function ($context, $element) { return { 'foreach': function () { return $context.$data._lookupData.scheme; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('ifnot: $data.name === \'Custom\'', function ($context, $element) { return { 'ifnot': function () { return $context.$data.name === 'Custom'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.name === \'Custom\'', function ($context, $element) { return { 'if': function () { return $context.$data.name === 'Custom'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-page-colorScheme-content\'', function ($context, $element) { return { 'template': function () { return 'dxrd-page-colorScheme-content'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: availableFields.caption', function ($context, $element) { return { 'text': function () { return $context.$data.availableFields.caption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { items: availableFields.items, selectedItems: availableFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: availableFieldClick }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.availableFields.items, 'selectedItems': $context.$data.availableFields.activeItemArray, 'height': 257, 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data.availableFieldClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: $parent.availableFieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.availableFieldDblClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: select, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.select, 'disabled': !$context.$data.isSelectEnable(), 'icon': 'dxrd-svg-operations-moveright', 'iconClass': 'dxrd-image-moveright' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: selectAll, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright_all\', iconClass: \'dxrd-image-moveright-all\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.selectAll, 'disabled': !$context.$data.isSelectEnable(), 'icon': 'dxrd-svg-operations-moveright_all', 'iconClass': 'dxrd-image-moveright-all' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: unselect, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.unselect, 'disabled': !$context.$data.isUnselectEnable(), 'icon': 'dxrd-svg-operations-moveleft', 'iconClass': 'dxrd-image-moveleft' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: unselectAll, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft_all\', iconClass: \'dxrd-image-moveleft-all\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.unselectAll, 'disabled': !$context.$data.isUnselectEnable(), 'icon': 'dxrd-svg-operations-moveleft_all', 'iconClass': 'dxrd-image-moveleft-all' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: selectedFields.caption', function ($context, $element) { return { 'text': function () { return $context.$data.selectedFields.caption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { items: selectedFields.items, selectedItems: selectedFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: selectedFieldClick }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.selectedFields.items, 'selectedItems': $context.$data.selectedFields.activeItemArray, 'height': 257, 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data.selectedFieldClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: $parent.selectedFieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.selectedFieldDblClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\'), attr: { title: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Page Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSize'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Page Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSize') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: _labelData.paperKinds, displayExpr: \'name\', value: _selectedPaperSize, itemTemplate: \'PaperSizeText\', dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true , onOpened: function (e) { e.component._popup.option(\'width\', 300); }}, attr: { title: _selectedPaperSize().name + \' - \' + $root.dx._static.CustomizeLabelPage._getPageSizeText(_selectedPaperSize().width, _selectedPaperSize().height, _selectedPaperSize().unit)}', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data._labelData.paperKinds, 'displayExpr': 'name', 'value': $context.$data._selectedPaperSize, 'itemTemplate': 'PaperSizeText', 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true, 'onOpened': function (e) { e.component._popup.option('width', 300); } }; }, 'attr': function () { return { 'title': $context.$data._selectedPaperSize().name + ' - ' + $context.$root.dx._static.CustomizeLabelPage._getPageSizeText($context.$data._selectedPaperSize().width, $context.$data._selectedPaperSize().height, $context.$data._selectedPaperSize().unit) }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.dx._static.CustomizeLabelPage._getPageSizeText(width, height, unit)', function ($context, $element) { return { 'text': function () { return $context.$root.dx._static.CustomizeLabelPage._getPageSizeText($context.$data.width, $context.$data.height, $context.$data.unit); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxRadioGroup:{items: _units, valueExpr: \'value\', value: unit, layout: \'horizontal\' }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'items': $context.$data._units, 'valueExpr': 'value', 'value': $context.$data.unit, 'layout': 'horizontal' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _pageSizeText', function ($context, $element) { return { 'text': function () { return $context.$data._pageSizeText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\', attr: { title: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\' }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Measure Units', 'DevExpress.XtraReports.UI.XtraReport.ReportUnit') + ':'; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Measure Units', 'DevExpress.XtraReports.UI.XtraReport.ReportUnit') + ':' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: { items: _units, valueExpr: \'value\', displayExpr: \'text\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$data._units, 'valueExpr': 'value', 'displayExpr': 'text', 'value': $context.$data.unit, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\'), attr: { title: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Label Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Label Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelWidth }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.labelWidth }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\'), attr: { title: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Label Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Label Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelHeight }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.labelHeight }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\'), attr: { title: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Horizontal Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Horizontal Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: horizontalPitch }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.horizontalPitch }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\'), attr: { title: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Vertical Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Vertical Pitch:', 'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: verticalPitch }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.verticalPitch }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\'), attr: { title: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Top Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Top Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: topMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.topMargin }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\'), attr: { title: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Left Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Left Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: leftMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.leftMargin }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\'), attr: { title: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Right Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Right Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: rightMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.rightMargin }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\'), attr: { title: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Bottom Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Bottom Margin:', 'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: bottomMargin }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'min': 0, 'max': 999.9, 'showSpinButtons': true, 'step': $context.$data._stepUnit, 'value': $context.$data.bottomMargin }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _labelsCountText', function ($context, $element) { return { 'text': function () { return $context.$data._labelsCountText; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate: { name: \'PaperSizeText\' }', function () { return { dxTemplate: { name: 'PaperSizeText' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { showScrollbar: \'onHover\', height: scrollViewHeight }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': $context.$data.scrollViewHeight }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: fields.caption', function ($context, $element) { return { 'text': function () { return $context.$data.fields.caption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { dataSource: fields.items, selectedItems: fields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: fieldClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.fields.items, 'selectedItems': $context.$data.fields.activeItemArray, 'height': 257, 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data.fieldClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: $parent.fieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.fieldDblClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data', function ($context, $element) { return { 'text': function () { return $context.$data; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: addNewGroup, disabled: !isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\'  }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.addNewGroup, 'disabled': !$context.$data.isCreateGroupEnabled(), 'icon': 'dxrd-svg-operations-moveright', 'iconClass': 'dxrd-image-moveright' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: appendFieldsToGroup, disabled: !isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.appendFieldsToGroup, 'disabled': !$context.$data.isAppendToGroupEnabled(), 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dxrd-image-add' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: removeGroup, disabled: !isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.removeGroup, 'disabled': !$context.$data.isRemoveGroupEnabled(), 'icon': 'dxrd-svg-operations-moveleft', 'iconClass': 'dxrd-image-moveleft' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: moveUp, disabled: !isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.moveUp, 'disabled': !$context.$data.isMoveUpEnabled(), 'icon': 'dxrd-svg-operations-moveup', 'iconClass': 'dxrd-image-moveup' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: moveDown, disabled: !isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.moveDown, 'disabled': !$context.$data.isMoveDownEnabled(), 'icon': 'dxrd-svg-operations-movedown', 'iconClass': 'dxrd-image-movedown' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: groups.caption', function ($context, $element) { return { 'text': function () { return $context.$data.groups.caption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { items: groups.items, height: 257, selectionMode: \'single\', selectedItems: groups.activeItemArray, activeStateEnabled: false, onItemClick: groupClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.groups.items, 'height': 257, 'selectionMode': 'single', 'selectedItems': $context.$data.groups.activeItemArray, 'activeStateEnabled': false, 'onItemClick': $context.$data.groupClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: $parent.groupDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent.groupDblClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: fields().join(\', \')', function ($context, $element) { return { 'text': function () { return $context.$data.fields().join(', '); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: _groupInfos', function ($context, $element) { return { 'foreach': function () { return $context.$data._groupInfos; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: displayName, attr: { \'title\': displayName}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-disabled-button\': $parent.moveUpDisabled($index()) }, click: function(){ $parent.moveup($index()) }', function ($context, $element) { return { 'css': function () { return { 'dxrd-disabled-button': $context.$parent.moveUpDisabled($context.$index()) }; }, 'click': function () { return function () { $context.$parent.moveup($context.$index()); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-disabled-button\': $parent.moveDownDisabled($index()) }, click: function(){ $parent.movedown($index()) }', function ($context, $element) { return { 'css': function () { return { 'dxrd-disabled-button': $context.$parent.moveDownDisabled($context.$index()) }; }, 'click': function () { return function () { $context.$parent.movedown($context.$index()); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('click: function(){ $parent.remove($index()) }', function ($context, $element) { return { 'click': function () { return function () { $context.$parent.remove($context.$index()); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.addGroupText(), attr: { \'title\': $data.addGroupText() }, click: function() { $data.add() }', function ($context, $element) { return { 'text': function () { return $context.$data.addGroupText(); }, 'attr': function () { return { 'title': $context.$data.addGroupText() }; }, 'click': function () { return function () { $context.$data.add(); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-operations-moveup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveup'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: \'dxrd-svg-operations-movedown\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-movedown'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-multivalue", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-multivalue', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: isCreateGroupEnabled()', function ($context, $element) { return { 'if': function () { return $context.$data.isCreateGroupEnabled(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _fieldCaption', function ($context, $element) { return { 'text': function () { return $context.$data._fieldCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { items: _currentFields().items, selectedItems: _currentFields().activeItemArray, height: \'100%\', selectionMode: \'single\', activeStateEnabled: false, onItemClick: _fieldClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data._currentFields().items, 'selectedItems': $context.$data._currentFields().activeItemArray, 'height': '100%', 'selectionMode': 'single', 'activeStateEnabled': false, 'onItemClick': $context.$data._fieldClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: $parent._fieldDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent._fieldDblClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: _addNewGroup, disabled: !_isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._addNewGroup, 'disabled': !$context.$data._isCreateGroupEnabled(), 'icon': 'dxrd-svg-operations-moveright', 'iconClass': 'dxrd-image-moveright' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: _appendFieldsToGroup, disabled: !_isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._appendFieldsToGroup, 'disabled': !$context.$data._isAppendToGroupEnabled(), 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dxrd-image-add' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: _removeGroup, disabled: !_isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._removeGroup, 'disabled': !$context.$data._isRemoveGroupEnabled(), 'icon': 'dxrd-svg-operations-moveleft', 'iconClass': 'dxrd-image-moveleft' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: _moveUp, disabled: !_isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._moveUp, 'disabled': !$context.$data._isMoveUpEnabled(), 'icon': 'dxrd-svg-operations-moveup', 'iconClass': 'dxrd-image-moveup' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonWithTemplate: { onClick: _moveDown, disabled: !_isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data._moveDown, 'disabled': !$context.$data._isMoveDownEnabled(), 'icon': 'dxrd-svg-operations-movedown', 'iconClass': 'dxrd-image-movedown' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _groupCaption', function ($context, $element) { return { 'text': function () { return $context.$data._groupCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxList: { items: _currentGroups().items, height: \'100%\', selectionMode: \'single\', selectedItems: _currentGroups().activeItemArray, activeStateEnabled: false, onItemClick: _groupClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data._currentGroups().items, 'height': '100%', 'selectionMode': 'single', 'selectedItems': $context.$data._currentGroups().activeItemArray, 'activeStateEnabled': false, 'onItemClick': $context.$data._groupClick, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: $parent._groupDblClick }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$parent._groupDblClick }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-wizard-report-tree', 'data': { 'items': $context.$data._reportTree, 'value': $context.$data._currentPath } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data._currentFields()', function ($context, $element) { return { 'if': function () { return $context.$data._currentFields(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data._currentGroups()', function ($context, $element) { return { 'if': function () { return $context.$data._currentGroups(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _selectDataMembersCaption', function ($context, $element) { return { 'text': function () { return $context.$data._selectDataMembersCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treelist: _dataMemberFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._dataMemberFieldListModel; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _selectDataFieldsCaption', function ($context, $element) { return { 'text': function () { return $context.$data._selectDataFieldsCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('treelist: _fieldMemberFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._fieldMemberFieldListModel; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: {name: \'dxrd-page-masterdetail-select-reportdata-dataMembers\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-dataMembers', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: {name: \'dxrd-page-masterdetail-select-reportdata-fieldMembers\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-fieldMembers', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-masterdetail-select-reportdata-dataMembers", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-dataMembers', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-masterdetail-select-reportdata-fieldMembers", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-masterdetail-select-reportdata-fieldMembers', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _fieldsCaption, attr:{\'title\': _fieldsCaption }', function ($context, $element) { return { 'text': function () { return $context.$data._fieldsCaption; }, 'attr': function () { return { 'title': $context.$data._fieldsCaption }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _summaryFunctionCaption, attr:{\'title\': _summaryFunctionCaption }', function ($context, $element) { return { 'text': function () { return $context.$data._summaryFunctionCaption; }, 'attr': function () { return { 'title': $context.$data._summaryFunctionCaption }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: _summaryInfos', function ($context, $element) { return { 'foreach': function () { return $context.$data._summaryInfos; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxFieldListPicker: { itemsProvider: $parent._fieldListProvider, acceptCustomValue: false, onValueChanged: onValueChanged, value: selectedPath, displayValue: displayName, placeholder: $root.dx._static.selectPlaceholder() }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'itemsProvider': $context.$parent._fieldListProvider, 'acceptCustomValue': false, 'onValueChanged': $context.$data.onValueChanged, 'value': $context.$data.selectedPath, 'displayValue': $context.$data.displayName, 'placeholder': $context.$root.dx._static.selectPlaceholder() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { icon: \'close\', onClick: function () { return $parent._removeSummaryInfo($data);  }}', function ($context, $element) { return { 'dxButton': function () { return { 'icon': 'close', 'onClick': function () { return $context.$parent._removeSummaryInfo($context.$data); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: ignoreNullValues, text: _ignoreNullValuesCaption }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.ignoreNullValues, 'text': $context.$data._ignoreNullValuesCaption }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _selectFieldToSummaryCaption', function ($context, $element) { return { 'text': function () { return $context.$data._selectFieldToSummaryCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _fieldsCaption', function ($context, $element) { return { 'text': function () { return $context.$data._fieldsCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _summaryFunctionCaption', function ($context, $element) { return { 'text': function () { return $context.$data._summaryFunctionCaption; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: $parent._displayedFields[$parent._currentPath()], itemTemplate: \'visibleItems\', displayExpr: \'displayName\', value: field, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$parent._displayedFields[$context.$parent._currentPath()], 'itemTemplate': 'visibleItems', 'displayExpr': 'displayName', 'value': $context.$data.field, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath  } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-wizard-report-tree', 'data': { 'items': $context.$data._reportTree, 'value': $context.$data._currentPath } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate:{ name:\'visibleItems\' }', function () { return { dxTemplate: { name: 'visibleItems' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('cacheElement: { action: function(element) { $data.cachePagePreviewElement(element); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data.cachePagePreviewElement(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: $data.previewPageWidth(), height: $data.previewPageHeight() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.previewPageWidth(), 'height': $context.$data.previewPageHeight() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { top: $data.previewTopMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.previewTopMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { right: $data.previewRightMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'right': $context.$data.previewRightMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { bottom: $data.previewBottomMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'bottom': $context.$data.previewBottomMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: $data.previewLeftMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.previewLeftMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Paper\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Paper', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\'), attr: { \'title\': $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: lookupData.paperKind, valueExpr: \'value\', displayExpr: \'displayName\', value: paperKind, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.lookupData.paperKind, 'valueExpr': 'value', 'displayExpr': 'displayName', 'value': $context.$data.paperKind, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\'), attr: { \'title\': $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Unit:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Unit:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: lookupData.unit, valueExpr: \'value\', displayExpr: \'displayName\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.lookupData.unit, 'valueExpr': 'value', 'displayExpr': 'displayName', 'value': $context.$data.unit, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\'), attr: { \'title\': $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Orientation:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Orientation:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: { items: [ { value: true, displayName: \'Landscape\', localizationId: \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape\'}, { value: false, displayName: \'Portrait\', localizationId:\'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait\' }], valueExpr: \'value\', displayExpr: \'displayName\', value: $data.landscape, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': [{ 'value': true, 'displayName': 'Landscape', 'localizationId': 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape' }, { 'value': false, 'displayName': 'Portrait', 'localizationId': 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait' }], 'valueExpr': 'value', 'displayExpr': 'displayName', 'value': $context.$data.landscape, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\'), attr: { \'title\': $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_Width'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_Width') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { value: width, disabled: fixedSize, format: valueFormat, min: 0 }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.width, 'disabled': $context.$data.fixedSize, 'format': $context.$data.valueFormat, 'min': 0 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\'), attr: { \'title\': $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_Height'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_Height') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { value: height, disabled: fixedSize, format: valueFormat, min: 0 }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.height, 'disabled': $context.$data.fixedSize, 'format': $context.$data.valueFormat, 'min': 0 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-no-hover dxd-state-active\': !$data.landscape() }, click: function() { $data.landscape(false); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-no-hover dxd-state-active': !$context.$data.landscape() }; }, 'click': function () { return function () { $context.$data.landscape(false); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template:\'dxrd-svg-portrait\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-portrait'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxd-state-no-hover dxd-state-active\': $data.landscape() }, click: function() { $data.landscape(true); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-no-hover dxd-state-active': $context.$data.landscape() }; }, 'click': function () { return function () { $context.$data.landscape(true); }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template:\'dxrd-svg-landscape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-landscape'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Page Margins\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_PageMargins\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Page Margins', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_PageMargins'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\'), attr: { \'title\': $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Left:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Left:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { value: marginLeft, format: valueFormat, min: 0, max: width() - marginRight() }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginLeft, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.width() - $context.$data.marginRight() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\'), attr: { \'title\': $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Top:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Top:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { value: marginTop, format: valueFormat, min: 0, max: height() - marginBottom() }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginTop, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.height() - $context.$data.marginBottom() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\'), attr: { \'title\': $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Right:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Right:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { value: marginRight, format: valueFormat, min: 0, max: width() - marginLeft() }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginRight, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.width() - $context.$data.marginLeft() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\'), attr: { \'title\': $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\') }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Bottom:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin'); }, 'attr': function () { return { 'title': $context.$root.getLocalization('Bottom:', 'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxNumberBox: { value: marginBottom, format: valueFormat, min: 0, max: height() - marginTop()  }', function ($context, $element) { return { 'dxNumberBox': function () { return { 'value': $context.$data.marginBottom, 'format': $context.$data.valueFormat, 'min': 0, 'max': $context.$data.height() - $context.$data.marginTop() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Color Scheme\', \'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Color Scheme', 'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: reportTitle, placeholder: _reportTitlePlaceholder() }, styleunit: { width: $data._previewPageHelper.previewPageWidth() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.reportTitle, 'placeholder': $context.$data._reportTitlePlaceholder() }; }, 'styleunit': function () { return { 'width': $context.$data._previewPageHelper.previewPageWidth() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('cacheElement: { action: function(element) { $data._previewPageHelper.cachePagePreviewElement(element); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data._previewPageHelper.cachePagePreviewElement(element); } }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { width: $data._previewPageHelper.previewPageWidth(), height: $data._previewPageHelper.previewPageHeight() }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data._previewPageHelper.previewPageWidth(), 'height': $context.$data._previewPageHelper.previewPageHeight() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { top: $data._previewPageHelper.previewTopMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data._previewPageHelper.previewTopMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { right: $data._previewPageHelper.previewRightMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'right': $context.$data._previewPageHelper.previewRightMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { bottom: $data._previewPageHelper.previewBottomMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'bottom': $context.$data._previewPageHelper.previewBottomMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { left: $data._previewPageHelper.previewLeftMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data._previewPageHelper.previewLeftMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: { top: $data._previewPageHelper.previewTopMargin(),  right: $data._previewPageHelper.previewRightMargin(),  bottom: $data._previewPageHelper.previewBottomMargin(),  left: $data._previewPageHelper.previewLeftMargin() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data._previewPageHelper.previewTopMargin(), 'right': $context.$data._previewPageHelper.previewRightMargin(), 'bottom': $context.$data._previewPageHelper.previewBottomMargin(), 'left': $context.$data._previewPageHelper.previewLeftMargin() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: {  backgroundColor: $parents[1]._color, width: 100/$parent.fields.length + \'%\', color: $parents[1]._foreColor }, text: displayName', function ($context, $element) { return { 'style': function () { return { 'backgroundColor': $context.$parents[1]._color, 'width': 100 / $context.$parent.fields.length + '%', 'color': $context.$parents[1]._foreColor }; }, 'text': function () { return $context.$data.displayName; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { width: 100/$parent.fields.length + \'%\' }, text: \'[\' + name + \']\'', function ($context, $element) { return { 'style': function () { return { 'width': 100 / $context.$parent.fields.length + '%' }; }, 'text': function () { return '[' + $context.$data.name + ']'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-page-setup-page-preview\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-preview', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-page-setup-page-settings\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-settings', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: $data.previewPageHelper', function ($context, $element) { return { 'with': function () { return $context.$data.previewPageHelper; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-page-setup-groups\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-groups', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-page-setup-groups\', data: $data._configureReportPageSettingsPage }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-groups', 'data': $context.$data._configureReportPageSettingsPage }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data._colorSchemePageVisible', function ($context, $element) { return { 'if': function () { return $context.$data._colorSchemePageVisible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: \'dxrd-page-colorScheme-content\', data: $data._colorSchemePage }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-colorScheme-content', 'data': $context.$data._colorSchemePage }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-setup-page-settings", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-settings', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: "dxrd-page-setup-page-colored-preview", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-setup-page-colored-preview', 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data._reportTitleVisible', function ($context, $element) { return { 'if': function () { return $context.$data._reportTitleVisible; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: _masterDetailInfo', function ($context, $element) { return { 'foreach': function () { return $context.$data._masterDetailInfo; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: { \'dxrd-report-layout-type-five-items\': layoutTypeItems()[0].margin == 1 }', function ($context, $element) { return { 'css': function () { return { 'dxrd-report-layout-type-five-items': $context.$data.layoutTypeItems()[0].margin == 1 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxRadioGroup: { value: selectedPageOrientation, items: pageOrientationItems, layout: \'horizontal\' }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedPageOrientation, 'items': $context.$data.pageOrientationItems, 'layout': 'horizontal' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { click: $parent.layoutTypeItemClick }, css: { \'dxd-state-selected dxd-border-secondary dxd-back-secondary\': $parent.isSelected($data) }, style: { margin: \'0 \' + margin + \'px\' }', function ($context, $element) { return { 'event': function () { return { 'click': $context.$parent.layoutTypeItemClick }; }, 'css': function () { return { 'dxd-state-selected dxd-border-secondary dxd-back-secondary': $context.$parent.isSelected($context.$data) }; }, 'style': function () { return { 'margin': '0 ' + $context.$data.margin + 'px' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { class: imageClassName }', function ($context, $element) { return { 'attr': function () { return { 'class': $context.$data.imageClassName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: fitFieldsToPage, text: $root.getLocalization(\'Adjust the field width so all fields fit onto a page\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth\') }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.fitFieldsToPage, 'text': $context.$root.getLocalization('Adjust the field width so all fields fit onto a page', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: layoutTypeItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.layoutTypeItems; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTemplate : { name: \'text\' }', function () { return { dxTemplate: { name: 'text' } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('attr: { class: selectedReportStyle().className }', function ($context, $element) { return { 'attr': function () { return { 'class': $context.$data.selectedReportStyle().className }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Title\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Title', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Caption\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Caption', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Data\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Data', 'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxRadioGroup: { value: selectedReportStyle, items: reportStyleItems }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedReportStyle, 'items': $context.$data.reportStyleItems }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Specify the report\\\'s title\', \'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Specify the report\'s title', 'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxTextBox: { value: reportTitle, width: 270 }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.reportTitle, 'width': 270 }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Label Product:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Label Product:', 'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { items: _labelData.labelProducts, displayExpr: \'name\', value: _selectedLabelProduct, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data._labelData.labelProducts, 'displayExpr': 'name', 'value': $context.$data._selectedLabelProduct, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Product Number:\', \'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Product Number:', 'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxSelectBox: { dataSource: _labelDetails, displayExpr: \'name\', value: _selectedLabelDetails, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data._labelDetails, 'displayExpr': 'name', 'value': $context.$data._selectedLabelDetails, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Width:', 'ASPxReportsStringId.ReportDesigner_Wizard_Width'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _width', function ($context, $element) { return { 'text': function () { return $context.$data._width; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Height:', 'ASPxReportsStringId.ReportDesigner_Wizard_Height'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _height', function ($context, $element) { return { 'text': function () { return $context.$data._height; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Paper Type:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperType\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Paper Type:', 'ASPxReportsStringId.ReportDesigner_Wizard_PaperType'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: _paperType', function ($context, $element) { return { 'text': function () { return $context.$data._paperType; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Paper Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Paper Size:', 'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Average\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Average', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Count\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Count', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Max\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Max', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Min\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Min', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $root.getLocalization(\'Sum\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Sum', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum'); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxScrollView: { }', function ($context, $element) { return { 'dxScrollView': function () { return {}; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: columnName, attr: { title: columnName }', function ($context, $element) { return { 'text': function () { return $context.$data.columnName; }, 'attr': function () { return { 'title': $context.$data.columnName }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: avg }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.avg }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: count }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.count }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: max }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.max }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: min }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.min }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: sum }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.sum }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxCheckBox: { value: ignoreNullValues, text: $root.getLocalization(\'Ignore null values\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues\') }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.ignoreNullValues, 'text': $context.$root.getLocalization('Ignore null values', 'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues') }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: summaryOptions', function ($context, $element) { return { 'foreach': function () { return $context.$data.summaryOptions; } }; });

;// ./node_modules/devexpress-reporting/dx-designer-templates.js

external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.addTemplates({
    'dx-chart-leftPanel': '<div class="dx-chart-left-panel dxd-border-primary dxd-properties-panel-group-header-back-color dxd-back-primary"> <div class="dxrd-right-panel dxd-border-primary dxd-properties-panel-group-header-back-color" data-bind="css: tabPanel.cssClasses()"> <div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: rightPanelHeader()"></span> </div> <!-- ko if: chartStructure --> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }"> <div class="dxcd-chart-structure dxd-back-primary" data-bind="treelist: chartStructure"></div> </div> <!-- /ko --> </div> </div>',
    'dxcd-indicators-list': '<div class="dxcd-indicators-list" data-bind="dxList: { dataSource: actions, searchExpr: \'display\', searchEnabled: true, onItemClick: function(e) { e.itemData.clickAction(); }}"> <div data-options="dxTemplate : { name: \'item\' }"> <div class="dx-text-content" data-bind="text: display, attr: { title: display }"></div> </div> </div>',
    'dxcd-toolbar': '<div class="dxrd-toolbar-wrapper"> <div class="dxrd-toolbar" data-bind="template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.getViewModel().toolbarItems }"></div> </div>',
    'dx-chart-middlePart': '<!-- ko ifnot: isLoading --> <!-- ko with: surface --> <div class="dxrd-surface-wrapper dxrd-top-0"  data-bind="template: templateName"> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: isLoading --> <div class="dxrd-surface-wrapper"> <div class="dxrd-text-align-center dxrd-padding-top-49"> <div data-bind="dxLoadIndicator: { visible: isLoading() }"></div> </div> </div> <!-- /ko -->',
    'dx-chart-surface': '<div class="dxrd-surface" data-bind="styleunit: { \'width\': Math.min(width(), $root.surfaceSize()) }, click: function(_, e) { e.stopPropagation(); }"> <div class="dxrd-viewport" data-bind="styleunit: { minWidth: Math.min(width() + 60, $root.surfaceSize()), maxWidth: width() + 60,  maxHeight: height() + 60 }"> <div class="dxrd-control dxrd-border-none dxrd-background-none" > <div data-bind="zoom: zoom, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }"> <img data-bind="attr: {src: imageSrc }, styleunit: { \'height\': height() / zoom(), \'width\': width() / zoom() }" /> </div> </div> </div> </div>',
    'dxcd-collection-lookup-header': '<div data-bind="dxSelectBox: { items: array, displayExpr: \'name\', value: selectedItem, disabled: disabled,  placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) , useItemTextAsTitle: true } }"></div>',
    'dxcd-collection-item': '<!-- ko if: selectedItem --> <div data-bind="dxPropertyGrid: { target: selectedItem, editorsInfo: { editors: editors }, level: 1 }"></div> <!--/ko -->',
    'dxcd-field': '<!-- ko if: visible --> <div data-bind="dxFieldListPicker: { path: path, value: value, onValueChanged: onValueChanged, acceptCustomValue: true, itemsProvider: $root.dataBindingsProvider(), treeListController: treeListController, disabled: disabled }"></div> <!--/ko -->',
    'dxrd-propertygridtab': '<div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: text"></span> </div> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko template: { name: \'dx-propertieseditor\', data: model }--> <!-- /ko --> </div>',
    'dxcd-panes-editor': '<div data-bind="dxSelectBox: getOptions({ dataSource: $root.panes, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })"></div>',
    'dxcd-legends-editor': '<div data-bind="dxSelectBox: getOptions({ dataSource: $root.legends, displayExpr: \'displayValue\', valueExpr: \'value\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })"></div>',
    'dxcd-axisX-editor': '<div data-bind="dxSelectBox: getOptions({ dataSource: $root.axisX, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })"></div>',
    'dxcd-axisY-editor': '<div data-bind="dxSelectBox: getOptions({ dataSource: $root.axisY, value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })"></div>',
    'dxcd-datasource': '<!-- ko with: generateOptions($root.chartDataSources, $root.getPopupContainer($element)) --> <div data-bind="dxSelectBox: $data"></div> <!-- /ko -->',
    'dxcd-viewHeader': '<div data-bind="dxSelectBox: { dataSource: generateViewItems(), itemTemplate: \'stateItem\', valueExpr: \'value\', value: generateHeaderValue($root.undoEngine), displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"> <div class="lookupItem" data-options="dxTemplate:{ name:\'stateItem\' }"> <div class="dxrd-display-inline-block dxrd-width-24px dxrd-height-24px" data-bind="css: className, template: {name: templateName, if: !!templateName }"> </div> <div class="dxrd-display-inline-block dxrd-vertical-align-super dxrd-width-calc-100-30px dxrd-overflow-hidden dxrd-text-overflow-ellipsis" data-bind="text: displayValue"></div> </div> </div>',
    'dxcd-viewContent': '<div data-bind="dxPropertyGrid: { target: contentValue, level: level + 1, parentDisabled: disabled }"></div>',
    'dxcd-summaryfunction': '<div class="dx-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: options"> </div> </div>',
    'dxcd-summaryFunction-content': '<div class="dxcd-summary-function-content"> <!-- ko with: value --> <div class="dx-field dxd-back-primary"> <div class="dx-field-label dxd-text-primary" data-bind="styleunit: $parent.memberPadding"> <div class="propertygrid-editor-displayName" data-bind="text: $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\'), attr: { \'title\': $parent.getLocalization(\'Function\', \'DevExpress.XtraReports.UI.XRGroupSortingSummary.Function\') }"></div> </div> <div class="dx-field-value"> <div data-bind="dxSelectBox: { value: functionName, dataSource: $parent.getAvailableItems(), acceptCustomValue: true, disabled: $parent.disabled, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> </div> </div> <!-- ko foreach: args --> <div class="dx-field dxd-back-primary" data-bind="css: $parents[1].actionsAreAvailable ? \'dxcd-summaryfunction-arg\' : \'\'"> <div class="dx-field-label dxd-text-primary" data-bind="styleunit: $parents[1].memberPadding"> <!-- ko if: $parent.args().length === 1--> <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\'), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') }"></div> <!-- /ko --> <!-- ko if: $parent.args().length > 1--> <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1), attr: { \'title\': $parents[1].getLocalization(\'Argument\', \'DevExpress.XtraCharts.SeriesSelectionMode.Argument\') + ($index() + 1) }"></div> <!-- /ko --> </div> <div class="dx-field-value"> <!-- ko if: $parents[1].actionsAreAvailable() --> <div class="dxcd-summaryFunction-remove" data-bind="click: function(){ $parents[1].remove($index()) }"> <div class="dxcd-summaryFunction-remove-icon dx-icon-dxrd-image-recycle-bin"><!-- ko template: \'dxrd-svg-operations-recycle_bin\'--><!-- /ko --></div> </div> <!-- /ko --> <!-- ko template: { name: $parents[1].argumentTemplateName, data: { value: $data.value, path: $parents[1].path, treeListController: $parents[1].treeListController, disabled: $parents[1].disabled, visible: $parents[1].visible } } --> <!-- /ko --> </div> </div> <!-- /ko --> <!-- ko if: $parent.actionsAreAvailable --> <div class="dx-field dxd-back-primary"> <div class="dx-field-label dxd-text-primary dxrd-width-auto"  data-bind="styleunit: $parent.memberPadding"> <div class="propertygrid-editor-displayName dxrcd-summaryfunction-addnew dxd-hyperlink-color dxd-border-accented dxd-text-accented" data-bind="text: $parent.getLocalization(\'Add Argument\', \'ASPxReportsStringId.ReportDesigner_AddArgument\'), attr: { \'title\': $parent.getLocalization(\'Add New Item\', \'ASPxReportsStringId.ReportDesigner_AddNewItem\') }, click: function() { $parent.add(); }"></div> </div> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dxcd-pointscollection': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return addPoint(_model()[\'owner\'] || _model()); } }"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties() }"></div> </div> </div>',
    'dxcd-maxSize': '<div data-bind="dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'min\', \'minSize\'), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dxcd-minSize': '<div data-bind="dxNumberBox: getDependencyOptions({ value:value, showSpinButtons:true, disabled:disabled }, \'max\', \'maxSize\'), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dxcd-group': '<div data-bind="dxSelectBox: getOptions({ dataSource: $root.groups, value: value, acceptCustomValue:true, onFocusOut: function() { $root.applyGroup($data.value()); }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  })"></div>',
    'dxcd-color-undo': '<div data-bind="dxColorBox: getOptions({ value: generateValue($root.undoEngine), onValueChanged: onValueChanged, editAlphaChannel: true, popupPosition: { collision: \'flipfit flipfit\' }, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } })"></div>',
    'dx-selectbox-undo': '<div data-bind="dxLocalizedSelectBox: getOptions({ dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }), dxValidator: { validationRules: $data.validationRules || [] }"></div>',
    'dxrd-band-coordinate-grid-selection': '<!-- ko with: surface --><div data-bind="styleunit: { \'height\': height, \'width\': $parent.width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor" class="dxrd-position-absolute"></div><!-- ko ifnot: collapsed --><!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width } } } }--><!-- /ko --><!-- /ko --><!-- /ko -->',
    'dxrd-band-coordinate-grid': '<!-- ko with: surface --> <!-- ko ifnot: collapsed --> <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': height(), top: absolutePosition.y }"> <!-- ko if: $data._context.drawWatermark() --> <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } } --> <!-- /ko --> <!-- /ko --> <div class="dxrd-band-subbands-wrapper" data-bind="styleunit: { \'top\': heightWithoutSubBands } "> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }--> <!-- /ko --> </div> </div> <!-- /ko --> <!-- ko if: collapsed --> <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed"> <div data-bind="css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }" class="dxrd-position-absolute dxrd-height-100 dxrd-width-100"></div> </div> <!-- /ko --> <!-- /ko -->',
    'dxrd-detail-report-band-coordinate-grid': '<!-- ko with: surface --> <!-- ko ifnot: collapsed --> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $parent.width, \'snapGridSize\': $parent.snapGridSize }; } } }--> <!-- /ko --> <!-- /ko --> <!-- ko if: collapsed --> <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed"> <div data-bind="css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }" class="dxrd-position-absolute dxrd-height-100 dxrd-width-100"></div> </div> <!-- /ko --> <!-- /ko -->',
    'dxrd-sub-band-coordinate-grid': '<!-- ko with: surface --> <!-- ko ifnot: collapsed --> <div class="dxrd-band-content dxd-selectable" data-bind="styleunit: { \'height\': height(), top: $data.absolutePosition.y() - $data.parent.heightWithoutSubBands() - $data.parent.absolutePosition.y() }"> <!-- ko if: $data._context.drawWatermark() --> <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: true, band: $data, reportSurface: $data._context } } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: collapsed --> <div data-bind="styleunit: { \'height\': height, top: absolutePosition.y }" class="dxrd-band-collapsed"> <div data-bind="css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }" class="dxrd-position-absolute dxrd-height-100 dxrd-width-100"></div> </div> <!-- /ko --> <!-- /ko -->',
    'dxrd-band-selection': '<div data-bind="styleunit: { \'height\': height, \'width\': rect().width, top: absolutePosition.y }, css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }, trackCursor: underCursor" class="dxrd-position-absolute"> <!-- ko if: contentSelectionTemplate --> <!-- ko template: contentSelectionTemplate--> <!-- /ko --> <!-- /ko --> </div> <!-- ko ifnot: collapsed --> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }--> <!-- /ko --> <!-- /ko -->',
    'dxrd-detailreportband-selection': '<!-- ko ifnot: collapsed --> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }--> <!-- /ko --> <!-- /ko -->',
    'dxrd-bandselection-content': '<!-- ko ifnot: collapsed --> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dxrd-band-vruler': '<!-- ko with: surface --><div class="dxrd-band-marker-wrapper dxrd-position-absolute" data-bind="attr: { title: name }, styleunit: { \'width\': $data.markerWidth() + 20, \'top\': absolutePosition.y, \'height\': height }" > <!-- ko if: hasOwnRuler --> <div class="dxrd-band-vruler" data-bind="styleunit: { \'height\': rulerHeight, top: 0 }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); $root.selection.expectClick = false; }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resizeTheBand, zoom: $root.surface().zoom, minimumHeight: $data.heightFromControls && $data.heightFromControls() || 1 }"> <div data-bind="ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }"></div> </div> <!-- /ko --> <!-- ko if: showMarker --> <div class="dxrd-band-marker dxrd-context-menu-container" data-bind="css: markerClass, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { markerClick($root.selection); e.stopPropagation(); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(_, e) { markerClick($root.selection, false);  }} : null, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); $root.selection.initialize($data); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed() || !hasOwnRuler() || locked, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }"> <div class="dxrd-band-marker-content"> <div class="dxrd-width-1px dxrd-height-1px dxrd-margin-left-9px"></div> <div class="dxrd-band-marker-rotation"> <div class="dxrd-band-marker-rotation-text" data-bind="text: collapsed() ? \'\' : name"></div> </div> </div> </div> <!-- /ko --></div><!-- ko ifnot: collapsed --><!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $parent.measureUnit }; } } }--><!-- /ko --><!-- /ko --><!-- /ko -->',
    'dxrd-band': '<!-- ko ifnot: collapsed --> <div class="dxrd-band-content dxd-selectable dxrd-position-absolute" data-bind="styleunit: { \'height\': heightWithoutSubBands, \'width\': _width(), \'top\': absolutePosition.y }" > <!-- ko if: $data._context.drawWatermark() --> <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } } --> <!-- /ko --> <!-- /ko --> <div data-bind="styleunit: { \'left\': coordinateGridOptions.left }, coordinateGrid: coordinateGridOptions" class="dxrd-band-content-grid"></div> <!-- ko if: $data.multiColumn() && $data.multiColumn().haveColumns() --> <!-- ko with: $data.multiColumn --> <div data-bind="styleunit: { \'left\': columnSpacingLeft, \'width\': columnSpacing }" class="dxrd-band-content-spasing"></div> <div data-bind="styleunit: { \'left\': grayAreaLeft, \'width\': grayAreaWidth }" class="dxrd-band-content-greyarea"></div> <!-- /ko --> <!-- /ko --> <!-- ko foreach: controls --> <!-- ko template: { name: $data.template } --> <!-- /ko --> <!-- /ko --> </div> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }--> <!-- /ko --> <!-- /ko --> <!-- ko if: collapsed --> <!-- ko template: \'dxrd-band-collapsed\' --> <!-- /ko --> <!-- /ko --> <!-- ko if: $root.drawCrossbandContent() && $data._isHeaderBandTypeOrThemSubBands() --> <!-- ko with: $data.printAcrossBandsPlaceHolder --> <div class="dxrd-print-across-bands-placeholder" data-bind="visible: $data.isVisible, styleunit: { \'top\': $data.absolutePositionY, \'height\': $data.height }"> <!-- ko with: $data.band --> <div class="dxrd-band-content dxd-selectable dxrd-position-absolute" data-bind="styleunit: { \'height\': heightWithoutSubBands, \'width\': _width() }" > <!-- ko foreach: controls --> <!-- ko template: { name: $data.template } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- /ko -->',
    'dxrd-detailreportband': '<!-- ko ifnot: collapsed --> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }--> <!-- /ko --> <!-- /ko --> <!-- ko if: collapsed --> <!-- ko template: \'dxrd-band-collapsed\' --> <!-- /ko --> <!-- /ko -->',
    'dxrd-band-collapsed': '<!-- ko if: collapsed --> <div class="dxrd-band-collapsed dxd-selectable dxrd-position-absolute" data-bind="styleunit: { \'height\': height, \'line-height\': height, \'top\': absolutePosition.y, width: rect().width }" > <!-- ko if: $root.surface().rtl() --> <div class="dxrd-position-absolute" data-bind="text: (name() || \'\').toUpperCase(), styleunit: { \'right\': leftMargin }"></div> <!-- /ko --> <!-- ko if: !$root.surface().rtl() --> <div class="dxrd-position-absolute" data-bind="text: (name() || \'\').toUpperCase(), styleunit: { \'left\': leftMargin }"></div> <!-- /ko --> </div> <!-- /ko -->',
    'dxrd-band-holder': '<!-- ko foreach: holder.bands --> <!-- ko template: { name: $data[$parent.templateName], data: $parent.getData($data) } --> <!-- /ko --> <!-- /ko --> <!-- ko with: holder.verticalBandsContainer --> <!-- ko if: visible && !!$data[$parent.templateName] --> <!-- ko template: { name: $data[$parent.templateName], data: $parent.getData($data) } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dxrd-vertical-band-selection': '<div data-bind="styleunit: { \'height\': height, \'width\': _width, left: absolutePosition.x }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: resizeHandles(), disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumWidth: minimumWidth(), minimumHeight: minimumHeight() },  css: { \'dxrd-band-content-selected dxrd-context-menu-container dxd-border-accented dx-border-inheritor\': selected() }, trackCursor: underCursor" class="dxrd-position-absolute"> <div class="dxrd-vertical-band-marker" data-bind="css: { \'dxrd-vertical-band-marker-focused\': focused }"> <div class="dxrd-banding-marker-text" data-bind="text: name"></div> </div> <div class="dxrd-height-calc-100-29px dxrd-width-100 dxrd-position-absolute"> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrd-vertical-band': '<div class="dxrd-band-content dxrd-vertical-band" data-bind="styleunit: { \'width\': _width(), \'left\': absolutePosition.x() }"> <!-- ko if: $data._context.drawWatermark() --> <!-- ko template: { name: \'dxrd-watermark\', data: { forLeftMargin: false, band: $data, reportSurface: $data._context } } --> <!-- /ko --> <!-- /ko --> <div data-bind="coordinateGrid: coordinateGridOptions" class="dxrd-band-content-grid"></div> <!-- ko foreach: controls --> <!-- ko template: { name: $data.template } --> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-vertical-bands-container': '<!-- ko ifnot: collapsed --> <div class="dxrd-band-content dxrd-vertical-bands-container" data-bind="styleunit: { \'height\': height, left: leftOffset, \'width\': width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }"> <div data-bind="styleunit: { \'width\': width }" class="dxrd-height-100 dxrd-overflow-hidden dxrd-position-absolute"> <div data-bind="style: { transform: \'translateX(-\' + $data.scrollOffset() + \'px)\' }"> <!-- ko foreach: verticalBands --> <!-- ko template: { name: templateName } --> <!-- /ko --> <!-- /ko --> <div data-bind="styleunit: { width: grayAreaWidth, height: height, left: !$root.surface().rtl() ? grayAreaLeft : 0  }" class="dxrd-band-content-greyarea"></div> </div> </div> </div> <!-- /ko --> <!-- ko if: collapsed --> <div class="dxrd-band-collapsed dxrd-position-absolute" data-bind="styleunit: { \'height\': height, \'line-height\': height, \'top\': topOffset, width: width }" > <div class="dxrd-position-absolute" data-bind="text: (name || \'\').toUpperCase(), styleunit: { \'right\': $root.surface().rtl() ? leftMargin : \'auto\', \'left\': !$root.surface().rtl() ? leftMargin: \'auto\' }"></div> </div> <!-- /ko -->',
    'dxrd-vertical-bands-container-selection': '<!-- ko ifnot: collapsed --> <div data-bind="styleunit: { \'width\': width, top: topOffset, left: leftOffset, height: height() }" class="dxrd-overflow-hidden dxrd-position-absolute"> <div data-bind="dxScrollView: $data.createScrollViewOptions($data, $root.selection)"> <!-- ko foreach: verticalBands --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko -->',
    'dxrd-vertical-bands-container-vruler': '<!-- ko with: surface --> <div class="dxrd-band-marker-wrapper dxrd-position-absolute" data-bind="styleunit: { \'width\': markerWidth() + 20, \'top\': topOffset, \'height\': height }" > <div class="dxrd-band-vruler" data-bind="styleunit: { \'height\': height, top: $data.bandOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight || 1 }"> <div data-bind="ruler: { \'zoom\': zoom, \'length\': height, \'units\': $parent.measureUnit, \'direction\': \'vertical\', flip: $root.dx[\'config\']()[\'rtlEnabled\'] }"></div> </div> <div class="dxrd-band-marker dxrd-band-marker-body" data-bind=" css: { \'dxrd-band-marker-body\' : !$data.focused(), \'dxrd-band-marker-body-focused\' : $data.focused() }, styleunit: { \'height\': height(), \'width\': markerWidth }, click: function(_, e) { $data.markerClick($root.selection); e.stopPropagation(); }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting(); }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false; }, handles: \'s\', disabled: collapsed, forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }"> <div class="dxrd-band-marker-content"> <div class="dxrd-width-1px dxrd-height-1px dxrd-margin-left-9px"></div> <div class="dxrd-band-marker-rotation"> <div class="dxrd-band-marker-rotation-text" data-bind="text: collapsed() ? \'\' : name"></div> </div> </div> </div> </div> <!-- /ko -->',
    'dxrd-vertical-bands-leftMargin-selection': '<!-- ko with: surface --> <div data-bind="styleunit: { \'height\': height, \'width\': $parent.width, top: topOffset }, resizable: { starting: function() { $root.resizeHandler.started = true; $root.resizeHandler.starting() }, stopped: function() { $data.stopResize(); $root.resizeHandler.stopped(); $root.resizeHandler.started = false;}, handles: \'s\', disabled: !canResize(), forceResize: resize, zoom: $root.surface().zoom, minimumHeight: minHeight() }" class="dxrd-position-absolute"> </div> <!-- /ko -->',
    'dxrd-vertical-bands-leftMargin': '<!-- ko with: surface --> <div data-bind="css: { \'dxrd-band-content\': !$data.collapsed(), \'dxrd-band-collapsed\': $data.collapsed() }, styleunit: { \'height\': height, top: topOffset }"> </div> <!-- /ko -->',
    'dxrd-charactercomb-content': '<!-- ko foreach: cells --><div class="dxrd-charactercomb-cell dxrd-position-absolute"  data-bind="styleunit: { width: size.width, height: size.height, top: top, left: left }"> <div class="dxrd-position-absolute"> <div data-bind="style: $parent.css, text: text, styleunit: { lineHeight: size.height(), width: size.width, height: size.height }" class="dxrd-position-absolute dxrd-letter-spacing-1px"></div> <div data-bind="style: $parent.borderCss, styleunit: { width: size.width, height: size.height }" class="dxrd-position-absolute dxrd-box-sizing-border-box"></div> </div></div><!-- /ko -->',
    'dxrd-charactercomb': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate"> <div class="dxrd-control-content-main dxrd-border-1px-solid-silver dxrd-left-0 dxrd-top-0"  data-bind="styleunit: { lineHeight: rect().height, height: rect().height, width: rect().width }"> <div class="dxrd-position-relative dxrd-overflow-hidden dxrd-margin-top--1px dxrd-margin-left--1px" data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { height: rect().height / _context.zoom(), width: rect().width / _context.zoom() }"> </div> </div></div>',
    'dxrd-chart-designer-popup': '<div data-bind="dxPopup: { showTitle: true, width: \'95%\', height: \'95%\', wrapperAttr: { class: \'dxrd-chartdesigner-popup\' }, title: $root.getLocalization(\'Chart Designer\', \'ChartDesignerStringIDs.ChartDesignerWindowTitle\'), visible: visible, toolbarItems: buttons, showCloseButton: true, container: container($element), position: { of: container($element) }}"> <div class="dxrd-chartdesigner-popup-content"> <div class="dxrd-width-100 dxrd-height-100" data-bind="visible: visible, dxChartDesigner: options"></div> </div></div>',
    'dxrd-chart-selection': '<div class="dxrd-control" data-bind="visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div> <div class="dxrd-chart-panel"> <div class="dxrd-chart-panel-text" data-bind="dxclick: function() { $root.runChartDesigner($data); }, text: runDesignerButtonText(), attr: { title: runDesignerButtonText() }"></div> </div></div><div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"></div>',
    'dxrd-checkbox-content': '<div data-bind="style: { cssFloat: isGlyphAlignmentNear() ? \'left\': \'right\', width: checkStateWidthContainer() }, styleunit: { lineHeight: contentHeightWithoutZoom }" class="dxrd-text-align-center"> <div class="dxrd-checkbox-checkstate" data-bind="styleunit:{ width: checkStateWidth, height: checkStateHeight }, css: checkStateClass, template: {name: $data.checkStateStyleIcon, if: !!ko.unwrap($data.checkStateStyleIcon)}"> </div></div><div class="dxrd-display-inline-block dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-padding-left-3px" data-bind="styleunit: { width: textWidth, lineHeight: contentHeightWithoutZoom }, visible: visibleText, style: { cssFloat: isGlyphAlignmentNear() ? \'right\': \'left\' }"> <span class="dxrd-control-content dxrd-control-content-multiline" data-bind="controlDisplayName: $data, style: contentCss, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }"></span></div>',
    'dxrd-control-content': '<div class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }"> <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }"></div></div>',
    'dxrd-control-selection': '<div class="dxrd-control" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko if: $root.inlineTextEdit.visible() && selected() --> <!-- ko with: $root.inlineTextEdit--> <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: $data.controls--> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> <!-- /ko --></div><div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"> <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}"> <!-- ko if: $data.controls--> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div></div>',
    'dxrd-control': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate"> <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css"> <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }"> </div> <!-- ko if: $data.controls --> <!-- ko foreach: controls --> <!-- ko template: { name: $data.template } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> <div data-bind="style: borderCss" class="dxrd-width-100 dxrd-height-100 dxrd-position-absolute dxrd-box-sizing-border-box"></div></div>',
    'dxrd-crossband-line': '<div class="dxrd-cross-band dxrd-control dxd-selectable" data-bind="css: {\'dxrd-uiselected\': selected }, styleunit: position"> <svg width="100%" height="100%"> <line data-bind="attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'} , style: lineCss" /> <!-- ko if: isIntersect --> <line class="dxrd-cross-band-intersect" data-bind="attr: { x1: \'50%\', x2: \'50%\', y1: 0, y2: \'100%\'}, style: lineWidthCss  " /> <!-- /ko --> </svg></div>',
    'dxrd-crossband': '<div class="dxrd-cross-band dxrd-control" data-bind="styleunit: position, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-uiselected\': selected }"> <div class="dxrd-control dxd-selectable dxrd-width-100 dxrd-height-5px dxrd-position-absolute dxrd-top-0"  data-bind="trackCursor: edgeUnderCursor"></div> <div class="dxrd-control dxd-selectable dxrd-width-5px dxrd-height-100 dxrd-position-absolute dxrd-left-0"  data-bind="trackCursor: edgeUnderCursor"></div> <div class="dxrd-control dxd-selectable dxrd-width-5px dxrd-height-100 dxrd-position-absolute dxrd-right-0"  data-bind="trackCursor: edgeUnderCursor"></div> <div class="dxrd-control dxd-selectable dxrd-width-100 dxrd-height-5px dxrd-position-absolute dxrd-bottom-0"  data-bind="trackCursor: edgeUnderCursor"></div> <svg width="100%" height="100%"> <line data-bind="attr: { x1: borderWidth()/2, x2: borderWidth()/2, y1: 0, y2: \'100%\' }, style: rightCss" /> <line data-bind="attr: { x1: 0, x2: \'100%\', y1: borderWidth()/2, y2: borderWidth()/2 }, style: topCss" /> <line data-bind="attr: { x1: rect().width-borderWidth()/2, x2: rect().width-borderWidth()/2, y1: 0, y2: \'100%\' }, style: leftCss" /> <line data-bind="attr: { x1: 0, x2: \'100%\', y1: rect().height-borderWidth()/2, y2: rect().height-borderWidth()/2 }, style: bottomCss" /> </svg></div>',
    'dxrd-crosstab-cell': '<div class="dxrd-crosstab-cell dxrd-control" data-bind="event: { dblclick: function() { isEditable() && $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, styleunit: position, trackCursor: underCursor"> <!-- ko template: \'dxrd-crosstab-cell-selection\' --> <!-- /ko --> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko if: $root.inlineTextEdit.visible() && selected() --> <!-- ko with: $root.inlineTextEdit--> <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div> <!-- /ko --> <!-- /ko --> <div id="dxrd-crosstab-cell-drop" data-bind="visible: showDropSurface, css: dragCss, styleunit: { left: dropRect.left, top: dropRect.top, width: dropRect.width, height: dropRect.height }"></div> </div> <div class="dxrd-crosstab-cell dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: \'visible\'}, event: { mousedown: function(e) { cellClick(); } }"> <!-- ko template: \'dxrd-crosstab-cell-selection\' --> <!-- /ko --> <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}"> <div id="dxrd-crosstab-cell-drop" data-bind="visible: showDropSurface, css: dragCss, styleunit: { left: dropRect.left, top: dropRect.top, width: dropRect.width, height: dropRect.height }"></div> </div> </div>',
    'dxrd-crosstab-cell-selection': '<!-- ko if: _control._rowIndex() === 0 --> <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'width\': position.width }"></div> <!-- /ko --> <!-- ko if: _control._columnIndex() === 0 --> <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e, true); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started()"></div> <!-- /ko --> <!-- ko if: _control.parent._rowDefinitions().length - 1 ===  _control._rowIndex() --> <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e); e.stopPropagation(); },visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'width\': position.width }"></div> <!-- /ko --> <!-- ko if: _control.parent._columnDefinitions().length - 1 ===  _control._columnIndex() --> <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="click: function(_, e) { !$root.selection.disabled() && selectLine($root.selection, e, true); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started()"></div> <!-- /ko -->',
    'dxrd-crosstab-control-content': '<div class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }"> <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline, \'dxrd-disabled\': $data.getControlModel().isBindable() && !$data.getControlModel().fieldName() }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }"></div></div>',
    'dxrd-crosstab': '<div class="dxrd-crosstab dxrd-control" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko if: $root.inlineTextEdit.visible() && selected() --> <!-- ko with: $root.inlineTextEdit--> <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: $data.controls--> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> <!-- /ko --></div><div class="dxrd-crosstab dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: \'visible\'}"> <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}"> <!-- ko if: $data.controls--> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div></div>',
    'dxrd-line-content': '<svg class="dxrd-position-absolute dxrd-left-0 dxrd-width-100 dxrd-height-100"> <line data-bind="attr: { x1: linePosition().x1 / _context.zoom(), x2: linePosition().x2 / _context.zoom(), y1: linePosition().y1 / _context.zoom(), y2: linePosition().y2 / _context.zoom() }, style: contentCss" /></svg>',
    'dxrd-pagebreak-selection': '<div class="dxrd-control dxrd-pagebreak" data-bind="visible: isSelected(), trackCursor: underCursor, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }"> <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control dxrd-pagebreak dxrd-context-menu-container" data-bind="visible: !isSelected(), trackCursor: underCursor, styleunit: { \'width\': position.width(), \'height\': 3, \'top\': position.top() - 1, left: position.left() }"></div>',
    'dxrd-pagebreak': '<div class="dxrd-control dxd-selectable dxrd-border-none dxrd-background-none"  data-bind="styleunit: position"> <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': lineHeight, \'height\': lineHeight, \'width\': position.width() / _context.zoom() }"> </div></div>',
    'dxrd-pdfcontent-control-content': '<div class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }"> <div class="dxrd-control-content" data-bind="style: contentCss, styleunit: { lineHeight: contentHeightWithoutZoom, height: contentHeightWithoutZoom, width: contentWidthWithoutZoom }"> <div data-bind="css: controlTypeClass, template: controlTypeIconTemplate" class="dxrd-position-absolute dxrd-width-24px dxrd-height-24px dxrd-right-5px dxrd-top-5px"> </div> <!-- ko if: generateOwnPages() --> <div class="dxrd-text-nowrap-ellipsis" data-bind="text: getControlModel().textContent"></div> <!-- /ko --> </div></div>',
    'dxrd-pdfcontent-selection': '<div class="dxrd-control" data-bind="style: { visibility: (selected() || focused()) ? \'inherit\' : \'hidden\'}, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"> <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}"> </div></div>',
    'dxrd-pdfsignature-content': '<div class="dxrd-pdf-signature-skeleton" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }, visible: $data.showSkeleton"> <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss"> </div></div><div data-bind="visible: !$data.showSkeleton()"> <div data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }, visible: $data.visibleImage" class="dxrd-text-align-center"> <div class="dxrd-pdf-signature-image" data-bind="template: \'dxrd-svg-todo-pdfsignature\', css: {\'dxrd-pdf-signature-image-fill-container\' : !$data.visibleText()}"> </div> </div> <div class="dxrd-pdf-signature-info-certificate-name" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }, visible: !$data.visibleImage() && !$data.hideImage(), css: {\'dxrd-pdf-signature-info-certificate-name-fill-container\': !$data.visibleText() }"> <div class="dxrd-control-content" data-bind="text: $data.certificateName, style: contentCss, css: { \'dxrd-control-content-multiline\' : multiline }"></div> </div> <div class="dxrd-pdf-signature-info" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }, visible: visibleText, css: {\'dxrd-pdf-signature-info-fill-container\': $data.hideImage }"> <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: { \'dxrd-control-content-multiline\' : multiline }"></div> </div></div>',
    'dxrd-picturebox-selection': '<div class="dxrd-control" data-bind="visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizeOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"> <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}"> </div></div>',
    'dxrd-pivotgrid-field-selection': '<div class="dxrd-pivot-field" data-bind="styleunit: { \'width\': Math.max(positionWidthWithoutZoom(), minWidth()), \'height\': position.height() / _context.zoom() }, trackCursor: underCursor"></div>',
    'dxrd-pivotgrid-field': '<div class="dxrd-pivot-field" data-bind="css: {\'dxrd-pivot-field-selected\': selected }, zoom: 1/_context.zoom(), styleunit: { \'width\': Math.max(position.width(), minWidth() * _context.zoom()), \'height\': position.height }"> <div class="dxrd-pivot-field-content" data-bind="text: displayName, zoom: _context.zoom"></div></div>',
    'dxrd-pivotGridFields': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx._static.PivotGridFieldViewModel.createNew(_model), displayName: $root.getLocalization(displayName), level: level, info: info }"> </div> </div>',
    'dxrd-pivot-sortBySummaryInfo-conditions': '<div class="dx-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function(){ return $root.dx._static.SortBySummaryInfoCondition.createNew($parents[1].value()) } }"> </div> </div>',
    'dxrd-pivotgrid-content': '<div class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100 dxrd-height-100" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }"> <div class="dxrd-control-content dxrd-width-100 dxrd-height-100" data-bind="style: contentCss" > <div class="dxrd-pivot-content" data-bind="css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }"> <div class="dxrd-pivot-filter-area"> <!-- ko if: filterFields().length !== 0 --> <div class="dxrd-pivot-fields-wrapper"> <!-- ko foreach: filterFields --> <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }"> <!-- ko template: { name: $data.template } --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: filterFields().length === 0 --> <div class="dxrd-pivot-text-wrapper"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')"></div> </div> <!-- /ko --> </div> <div class="dxrd-pivot-grid-area"> <div class="dxrd-pivot-grid-area-left"> <div class="dxrd-pivot-rows-area"> <div class="dxrd-pivot-rows-header" data-bind="styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }"> <!-- ko if: rowFields().length !== 0 --> <div class="dxrd-pivot-fields-wrapper"> <!-- ko foreach: rowFields --> <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }"> <!-- ko template: { name: $data.template } --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: rowFields().length === 0 --> <div class="dxrd-pivot-text-wrapper"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')"></div> </div> <!-- /ko --> </div> <div class="dxrd-pivot-total" data-bind="text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div> </div> </div> <div class="dxrd-pivot-grid-area-right"> <div class="dxrd-pivot-columns-header"> <!-- ko if: columnFields().length !== 0 --> <div class="dxrd-pivot-fields-wrapper"> <!-- ko foreach: columnFields --> <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }"> <!-- ko template: { name: $data.template } --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: columnFields().length === 0 --> <div class="dxrd-pivot-text-wrapper"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')"></div> </div> <!-- /ko --> </div> <div class="dxrd-pivot-data-header" data-bind="styleunit: { width: totalsDataFieldWidth }"> <div class="dxrd-pivot-total-wrapper"> <div class="dxrd-pivot-total" data-bind="styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div> </div> <div class="dxrd-pivot-data-area"> <!-- ko if: dataFields().length !== 0 --> <!-- ko foreach: dataFields --> <div class="dxrd-pivot-data-field" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }"> <div class="dxrd-pivot-field-wrapper"> <!-- ko template: { name: $data.template } --> <!-- /ko --> </div> <div class="dxrd-pivot-field-empty"></div> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: dataFields().length === 0 --> <div class="dxrd-pivot-field-empty"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')"></div> </div> <!-- /ko --> </div> </div> </div> </div> </div> </div></div>',
    'dxrd-pivotgrid-selection-context': '<div class="dxrd-control-content dxrd-width-100 dxrd-height-100 dxrd-line-height-normal dxrd-overflow-hidden" > <div class="dxrd-pivot-content dxrd-width-100 dxrd-height-100 dxrd-overflow-hidden"  data-bind="zoom: _context.zoom(), css: { \'dxrd-pivot-content-rtl\': getControlModel().rtl() }"> <div class="dxrd-pivot-filter-area"> <!-- ko if: filterFields().length !== 0 --> <div class="dxrd-pivot-fields-wrapper"> <!-- ko foreach: filterFields --> <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }"> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: filterFields().length === 0 --> <div class="dxrd-pivot-text-wrapper"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Filter Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddFilterFields\')"></div> </div> <!-- /ko --> </div> <div class="dxrd-pivot-grid-area"> <div class="dxrd-pivot-grid-area-left"> <div class="dxrd-pivot-rows-area"> <div class="dxrd-pivot-rows-header" data-bind="styleunit: { width: totalsRowFieldWidth, height: rowHeaderHeight }"> <!-- ko if: rowFields().length !== 0 --> <div class="dxrd-pivot-fields-wrapper"> <!-- ko foreach: rowFields --> <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }"> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: rowFields().length === 0 --> <div class="dxrd-pivot-text-wrapper"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Row Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddRowFields\')"></div> </div> <!-- /ko --> </div> <div class="dxrd-pivot-total" data-bind="text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div> </div> </div> <div class="dxrd-pivot-grid-area-right"> <div class="dxrd-pivot-columns-header"> <!-- ko if: columnFields().length !== 0 --> <div class="dxrd-pivot-fields-wrapper"> <!-- ko foreach: columnFields --> <div class="dxrd-pivot-field-wrapper" data-bind="styleunit: { \'width\': positionWidthWithoutZoom  }"> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: columnFields().length === 0 --> <div class="dxrd-pivot-text-wrapper"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Column Fields Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddColumnFields\')"></div> </div> <!-- /ko --> </div> <div class="dxrd-pivot-data-header" data-bind="styleunit: { width: totalsDataFieldWidth }"> <div class="dxrd-pivot-total-wrapper"> <div class="dxrd-pivot-total" data-bind="styleunit: { height: totalsHeight }, text: $root.getLocalization(\'Grand Total\', \'PivotGridStringId.GrandTotal\')"></div> </div> <div class="dxrd-pivot-data-area"> <!-- ko if: dataFields().length !== 0 --> <!-- ko foreach: dataFields --> <div class="dxrd-pivot-data-field" data-bind="styleunit: { \'width\': positionWidthWithoutZoom }"> <div class="dxrd-pivot-field-wrapper"> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> </div> <div class="dxrd-pivot-field-empty"></div> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: dataFields().length === 0 --> <div class="dxrd-pivot-field-empty"> <div class="dxrd-pivot-text" data-bind="text: $root.getLocalization(\'Add Data Items Here\', \'ASPxReportsStringId.ReportDesigner_Pivot_AddDataItems\')"></div> </div> <!-- /ko --> </div> </div> </div> </div> </div> </div>',
    'dxrd-pivotgrid-selection': '<div class="dxrd-control dxrd-context-menu-container" data-bind=" visible: !($data.selected() || $data.focused()), css: { \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, styleunit: position, trackCursor: underCursor"> <!-- ko template: \'dxrd-pivotgrid-selection-context\' --> <!-- /ko --> </div> <div class="dxrd-control" data-bind="visible: $data.selected() || $data.focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-control-rtl\': getControlModel().rtl() }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko template: \'dxrd-pivotgrid-selection-context\' --> <!-- /ko --> </div>',
    'dxrd-report': '<div class="dxrd-surface" data-bind="styleunit: { \'width\': Math.min($data.pageWidth() + $data.maxMarkerWidth() + $root.verticalScrollOffset() , $root.surfaceSize()) }, css: { \'dxrd-surface-rtl\': rtl() }, click: function(surface, e) { !$root.selection.disabled() && $root.selection.clickHandler($root.selection.dropTarget ? null : surface, e); e.stopPropagation(); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(surface, e) { $data.surfaceContextMenuHandler && $data.surfaceContextMenuHandler($root.selection, surface, e); }} : null, keyDownActions: $root.actionLists.getViewModel()"> <div class="dxrd-content-panel-wrapper" data-bind="styleunit: $root.dx[\'config\']()[\'rtlEnabled\'] ?  { right: maxMarkerWidth() } : { left: maxMarkerWidth() }, style: { bottom: (20 - $root.horizontalScrollOffset()) + \'px\' }"> <div class="dxrd-content-panel"> <div class="dxrd-hruler-wrapper"> <div class="dxrd-hruler" data-bind="styleunit: { left: leftMarginOffset,\'width\': margins.left }"> <div data-bind="ruler: { \'zoom\': zoom, \'length\': margins.left, \'units\': measureUnit, flip: ko.computed(function(){ return !rtl(); }) }"></div> <div class="dxrd-ruler-shadow" data-bind="styleunit: { left: 0, \'width\': margins.left }"></div> </div> <div class="dxrd-hruler" data-bind="styleunit: { \'width\': (pageWidth() - margins.left()), left: ghostContainerOffset }"> <div class="dxrd-margin-resizable" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizable: leftMarginResizeOptions($root.undoEngine, $element)"></div> <div data-bind="ruler: { \'zoom\': zoom, \'length\': function() { return pageWidth() - margins.left();}, \'units\': measureUnit, flip: rtl }"></div> <div class="dxrd-ruler-shadow" data-bind="styleunit: { left: rightMarginOffset, width: margins.right }, resizable: rightMarginResizeOptions($root.undoEngine, $element)"></div> </div> <div class="dxrd-vscroller-space" data-bind="styleunit: { \'left\': pageWidth() }"></div> </div> <div class="dxrd-viewport" data-bind="styleunit: { minWidth: Math.min($data.pageWidth() + $root.verticalScrollOffset(), $root.surfaceSize()) - $data.maxMarkerWidth(), maxWidth: $data.pageWidth() + $root.verticalScrollOffset(), maxHeight: $data.effectiveHeight() + $root.horizontalScrollOffset() }, event: { scroll: function() { $root.onViewPortScroll($element) } }, style: { \'overflow-x\': $root.horizontalScrollOffset() ? \'auto\' : \'hidden\', \'overflow-y\': $root.verticalScrollOffset() ? \'auto\' : \'hidden\' }"> <div data-bind="selectable: { selection: $root.selection, zoom: zoom }"> <div class="dxrd-leftMargin" data-bind="styleunit: { left: leftMarginOffset, width: margins.left() }"> <div class="dxrd-selection dxrd-position-absolute" > <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginSelectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left }; } } }--> <!-- /ko --> </div> <div class="dxrd-flip"> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'leftMarginTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, width: $data.margins.left, snapGridSize: $data.snapGridSize  }; } } }--> <!-- /ko --> </div> </div> <div class="dxrd-ghost-containment" data-bind="styleunit: { left: ghostContainerOffset }"> <div class="dxrd-ghost-container" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'height\': minHeight }"> <div class="dxrd-bands-content dxrd-main"> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'templateName\', holder: $data.bandsHolder, getData: function(item) { return item; } } }--> <!-- /ko --> <!-- ko foreach: crossBandControls --> <!-- ko if: visible --> <!-- ko template: { name: template } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> <svg class="dxrd-height-100 dxrd-position-absolute dxrd-top-0 dxrd-width-1px dxrd-z-index--1" data-bind="styleunit: { left: leftMarginOffset() }"> <line data-bind="attr: { x1: 0, x2: 0 }" y1="0" y2="100%" class="dxrd-stroke-rgb-128 dxrd-stroke-width-05px dxrd-stroke-dasharray-5px" /> </svg> <svg class="dxrd-rightMargin-border" data-bind="styleunit: { left: rtl() ? margins.right() : rightMarginOffset() }, visible: margins.right() > 0"> <line data-bind="attr: { x1: 0, x2: 0 }" y1="0" y2="100%" class="dxrd-stroke-rgb-220 dxrd-stroke-width-3px dxrd-stroke-dasharray-5px" /> </svg> <!-- ko template: { name: \'dxd-snap-lines-holder\', data: $root.snapHelper } --> <!-- /ko --> </div> <div class="dxrd-bands-content dxrd-selection" data-bind="styleunit: { \'width\': pageWidthWithoutMargins }"> <div class="dxrd-bands-content-offset"> <div class="dxrd-leftMargin-resizable" data-bind="styleunit: { \'width\': pageWidthWithoutMargins, \'left\': leftMarginResizableOffset }, resizableReportMargins: leftMarginResizeOptions($root.undoEngine, $element)"></div> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'selectionTemplate\', holder: $data.bandsHolder, getData: function(item) { return item; } } }--> <!-- /ko --> <!-- ko foreach: crossBandControls --> <!-- ko if: visible --> <div class="dxrd-cross-band" data-bind="visible: isSelected() && !$root.dx._static.DragDropHandler.started(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> </div> <!-- /ko --> <!-- /ko --> <div class="dxrd-rightMargin-resizable" data-bind="styleunit: { left: rightMarginResizableOffset }, resizableReportMargins: rightMarginResizeOptions($root.undoEngine, $element)"></div> </div> </div> </div> </div> </div> <!-- ko ifnot: focused --> <!-- ko template: { name: \'dxrd-smart-tags\', data: $root.smartTagModel, if: $root.smartTagModel.visible && $root.smartTagModel.smartTags().length > 0 } --> <!-- /ko --> <!-- /ko --> </div> <!-- ko if: focused --> <!-- ko template: { name: \'dxrd-smart-tags\', data: $root.smartTagModel, if: $root.smartTagModel.visible && $root.smartTagModel.smartTags().length > 0 } --> <!-- /ko --> <!-- /ko --> </div> </div> <div class="dxrd-bands-panel-wrapper" data-bind="styleunit: { width: maxMarkerWidth() }"> <div class="dxrd-bands-panel"> <div class="dxrd-band-headers"> <!-- ko template: { name: \'dxrd-band-holder\', data: { templateName: \'vrulerTemplate\', holder: $data.bandsHolder, getData: function(item) { return { surface: item, measureUnit: $data.measureUnit }; } } }--> <!-- /ko --> </div> </div> <div class="dxrd-hscroller-space"></div> </div></div>',
    'dxrd-richedit': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate"> <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css"> <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { height: contentHeightWithoutZoom, width: contentWidthWithoutZoom }" class="dxrd-position-absolute"> </div> </div> <div data-bind="style: borderCss" class="dxrd-width-100 dxrd-height-100 dxrd-position-absolute dxrd-box-sizing-border-box"></div></div>',
    'dxrd-server-rendered-control-content': '<!-- ko if: $data.imageSrc --><img data-bind="attr: { src: imageSrc }, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }" /><!-- /ko --><!-- ko if: $data.isLoading --><div class="dx-content-loading-panel"> <div data-bind="dxLoadIndicator: { visible: isLoading() }"></div></div><!-- /ko --><!-- ko if: $data.error --><p class="dxrd-internal-error" data-bind="text: error"></p><!-- /ko -->',
    'dxrd-shape': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate"> <div class="dxrd-control-content-main" data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left, lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width }, style: css"> <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': contentHeightWithoutZoom }" class="dxrd-position-absolute"> </div> </div> <div data-bind="style: borderCss" class="dxrd-width-100 dxrd-height-100 dxrd-position-absolute dxrd-box-sizing-border-box"></div></div>',
    'dxrd-subreport-selection': '<div class="dxrd-control" data-bind="event: { dblclick:  function (control, e) { $root.navigateByReports.goToSubreport(control); } }, visible: isSelected, css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $data.getResizableOptions($root.resizeHandler), draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div></div><div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !isSelected(), styleunit: position, trackCursor: underCursor"></div>',
    'dxrd-subreport': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate"> <div data-bind="style: borderCss" class="dxrd-width-100 dxrd-height-100 dxrd-position-absolute dxrd-box-sizing-border-box"></div> <div class="dxrd-control-content" data-bind="text: displayText(), style: contentCss"></div></div>',
    'dxrd-table-selection': '<div class="dxrd-table-control dxrd-context-menu-container" data-bind="style: { visibility: !isSelected() ? \'visible\' : \'hidden\'}, styleunit: position"> <!-- ko if: rows().length > 0 --> <!-- ko foreach: rows --> <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height }"> <!-- ko foreach: cells --> <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style:{ overflow: isSelected() ? \'visible\' : \'hidden\', \'z-index\': offsetZIndex() }"> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> <!-- /ko --></div><!-- ko if: (selected() || focused()) --><div class="dxrd-table-control" data-bind="style: { visibility: \'inherit\' }, css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position"> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko if: rows().length > 0 --> <!-- ko foreach: rows()[0].cells --> <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div> <!-- /ko --> <!-- ko foreach: rows --> <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height }"> <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="trackCursor: underCursor, visible: !$root.dx._static.DragDropHandler.started()"></div> <!-- ko foreach: cells --> <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style: { \'z-index\': offsetZIndex() }"> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <div class="dxrd-table-row-selection dxrd-table-row-selection-right dxrd-visibility-visible"  data-bind="trackCursor: underCursor, visible: !$root.dx._static.DragDropHandler.started()"></div> </div> <!-- /ko --> <!-- ko foreach: rows()[rows().length-1].cells --> <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); },visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div> <!-- /ko --> <!-- /ko --></div><!-- /ko --><div class="dxrd-table-control dxrd-context-menu-container" data-bind="visible: isSelected() && !(selected() || focused()), styleunit: position"> <!-- ko if: rows().length > 0 --> <!-- ko foreach: rows()[0].cells --> <div class="dxrd-table-column-selection dxrd-table-column-selection-top" data-bind="click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, visible: !$root.dx._static.DragDropHandler.started(), styleunit: { \'left\': position.left, \'width\': position.width }"></div> <!-- /ko --> <!-- ko foreach: rows --> <div class="dxrd-table-row-control" data-bind="visible: isSelected(), css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-locked\': locked }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'n,s\', disabled: !(selected() || focused()), zoom: $root.surface().zoom }, styleunit: { \'top\': position.top, \'height\': position.height }"> <div class="dxd-border-accented dxrd-control-border-box"></div> <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="visible: !$root.dx._static.DragDropHandler.started(), trackCursor: underCursor"></div> <!-- ko foreach: cells --> <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: { \'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked, \'dxrd-table-cell-over-rowSpan\': rowSpan() === 0  }, resizable: { starting: $root.resizeHandler.starting, stopped: $root.resizeHandler.stopped, handles: \'e,w\', disabled: !(selected() || focused()), zoom: $root.surface().zoom, snapHelper: $root.resizeHandler.snapHelper }, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, style : { \'z-index\': offsetZIndex() }"> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko if: $root.inlineTextEdit.visible() && selected() --> <!-- ko with: $root.inlineTextEdit--> <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div> <!-- /ko --> <!-- /ko --> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, visible: !isSelected(), styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }"> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="visible: !$root.dx._static.DragDropHandler.started(), trackCursor: underCursor"></div> </div> <div class="dxrd-table-row-control dxrd-context-menu-container" data-bind="visible: !isSelected(), styleunit: { \'top\': position.top, \'height\': position.height }"> <div class="dxrd-table-row-selection dxrd-table-row-selection-left" data-bind="visible: !$root.dx._static.DragDropHandler.started(),trackCursor: underCursor"></div> <!-- ko foreach: cells --> <div class="dxrd-table-cell-control" data-bind="trackCursor: underCursor, styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan  }, style : { \'z-index\': offsetZIndex() }"> <!-- ko foreach: controls --> <!-- ko template: { name: $data.selectiontemplate } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <div class="dxrd-table-row-selection dxrd-table-row-selection-right" data-bind="visible: !$root.dx._static.DragDropHandler.started(),trackCursor: underCursor"></div> </div> <!-- /ko --> <!-- ko foreach: rows()[rows().length-1].cells --> <div class="dxrd-table-column-selection dxrd-table-column-selection-bottom" data-bind="visible: !$root.dx._static.DragDropHandler.started(),click: function(_, e) { !$root.selection.disabled() && selectColumn($root.selection); e.stopPropagation(); }, styleunit: { \'left\': position.left, \'width\': position.width }"></div> <!-- /ko --> <!-- /ko --></div>',
    'dxrd-table': '<div class="dxrd-table-control dxrd-control dxd-selectable" data-bind="styleunit: position, trackCursor: underCursor, css: adorntemplate"> <div data-bind="style: css" class="dxrd-width-100 dxrd-height-100"> <!-- ko foreach: rows --> <div class="dxrd-table-row-control" data-bind="styleunit: { \'top\': position.top, \'height\': position.height}, style: css, css: adorntemplate"> <!-- ko foreach: cells --> <div class="dxrd-table-cell-control dxrd-control" data-bind="styleunit: { \'left\': position.left, \'width\': position.width, \'height\': heightWithRowSpan }, trackCursor: underCursor, css: adorntemplate"> <div data-bind="zoom: _context.zoom, template: contenttemplate, styleunit: { \'lineHeight\': position.lineHeight() / _context.zoom(), \'width\': contentWidthWithoutZoom, \'height\': contentHeightWithoutZoom }, style: css"> </div> <!-- ko foreach: controls --> <!-- ko template: { name: $data.template } --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> <!-- /ko --> </div></div>',
    'dxrd-table-of-contents': '<div class="dxrd-control dxd-selectable dxrd-control-table-of-content" data-bind="styleunit: position, trackCursor: underCursor, css: adorntemplate"> <div data-bind="style: css" class="dxrd-width-100 dxrd-height-100"> <!-- ko template: { name: levelTitle.template, data: levelTitle } --> <!-- /ko --> <div class="dxrd-control-table-of-content-levelsElements"> <!-- ko foreach: $data.levels() --> <!-- ko template: { name: $data.template } --> <!-- /ko --> <!-- /ko --> <!-- ko template: { name: levelDefault.template, data: levelDefault, isDefault: true } --> <!-- /ko --> </div> </div> </div>',
    'dxrd-table-of-contents-level': '<div class="dxrd-control dxrd-left-0 dxrd-width-100" data-bind="styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight}, css: adorntemplate" > <div class="dxrd-tocLevel-border" data-bind="styleunit: { \'height\': _context.zoom()}"></div> <!-- ko if: getControlModel().rtl() --> <div data-bind="style: borderCss, styleunit: { left: position.left, width: contentSizes().width + (contentSizes().left + contentSizes().right)} " class="dxrd-height-100 dxrd-position-absolute dxrd-box-sizing-border-box"></div> <!-- /ko --> <!-- ko if: !getControlModel().rtl() --> <div data-bind="style: borderCss, styleunit: { left: position.left} " class="dxrd-height-100 dxrd-right-0 dxrd-position-absolute dxrd-box-sizing-border-box"></div> <!-- /ko --> <div class="dxrd-control-content-main dxrd-overflow-hidden"  data-bind="styleunit: { \'top\': contentSizes().top, \'left\': contentSizes().left + position.left(), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}, style: css"> <div class="dxrd-tocLevel-zoomer" data-bind="zoom: _context.zoom, styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }"> <div class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100 dxrd-height-100" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }"> <!-- ko if: getControlModel().isTitle --> <div class="dxrd-control-content dxrd-control-content-multiline" data-bind="controlDisplayName: $data, style: contentCss"></div> <!-- /ko --> <!-- ko ifnot: getControlModel().isTitle --> <div class="dxrd-control-content dxrd-width-100 dxrd-height-100 dxrd-line-height-inherit" data-bind="style: contentCss" > <div class="dxrd-control-content-level-text"> <table border="0" cellspacing="0" cellpadding="0"> <tr> <td> <div class="dxrd-control-content-line-text"><span data-bind="text: $data.getControlModel().name"></span></div> </td> <td class="middle"> <table border="0" cellspacing="0" cellpadding="0" class="dxrd-table-layout-fixed dxrd-width-100"> <tr> <td data-bind="text: leaderSymbols" class="dxrd-word-wrap-break-word"></td> </tr> </table> </td> <td> <div class="dxrd-control-content-number">&nbsp;&nbsp;#&nbsp;&nbsp;</div> </td> </tr> </table> </div> </div> <!-- /ko --> </div> </div> </div> </div>',
    'dxrd-table-of-contents-selected': '<div class="dxrd-control dxrd-table-of-contents-selected dxrd-context-menu-container" data-bind="event: { dblclick: function() { $root.inlineTextEdit.show($element) } }, visible: isSelected, css: {\'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <div class="dxd-border-accented dxrd-control-border-box"></div> <!-- ko with: levelTitle --> <div class="dxrd-control dxrd-control-line-ui-resizeble" data-bind="styleunit: position, resizable: resizable($root.resizeHandler, $element)"> <!-- ko with: $root.inlineTextEdit--> <!-- ko if: visible --> <div class="inline-text-edit" data-bind="dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }"></div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <!-- ko foreach: $data.levels() --> <div class="dxrd-control dxrd-control-line-ui-resizeble" data-bind="styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight }, resizable: resizable($root.resizeHandler, $element)" class="dxrd-left-0 dxrd-width-100"></div> <!-- /ko --> <!-- ko with: levelDefault --> <div class="dxrd-control" data-bind="styleunit: { height: position.height, top: position.top, lineHeight: position.lineHeight }, resizable: resizable($root.resizeHandler, $element)" class="dxrd-left-0 dxrd-width-100"></div> <!-- /ko --> </div> <div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !isSelected(), styleunit: position, trackCursor: underCursor"> </div>',
    'dxrd-textcontrol-content': '<div class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100" data-bind="styleunit: { lineHeight: contentHeightWithoutZoom }"> <div class="dxrd-control-content" data-bind="controlDisplayName: $data, style: contentCss, css: {\'dxrd-control-content-multiline\' : multiline }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } } "></div></div>',
    'dxrd-todocontrol': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, trackCursor: underCursor, style: css, css: adorntemplate"> <div data-bind="style: borderCss" class="dxrd-control-border-box"></div> <div data-bind="css: controlTypeClass, template: controlTypeIconTemplate" class="dxrd-position-absolute dxrd-width-24px dxrd-height-24px dxrd-right-5px dxrd-top-5px"> </div> <span class="dxrd-control-content" data-bind="text: displayName, style: contentCss"></span></div>',
    'dxrd-unknown-control': '<div class="dxrd-control dxd-selectable" data-bind="styleunit: position, css: adorntemplate"> <div class="dxrd-control-content-main"> <div data-bind="zoom: _context.zoom, template: contenttemplate" class="dxrd-position-absolute"> </div> </div></div>',
    'dxrd-calculatedfield-content': '<div data-bind="with: propertyGrid"> <!-- ko foreach: getEditors() --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- /ko --></div>',
    'dxrd-datasource-item': '<div class="dx-fieldset"> <div data-bind="dxCollectionEditor: { values: ko.observable(tableInfoItems), displayName: $root.getLocalization(\'Filter Criteria\', \'ASPxReportsStringId.ReportDesigner_DataSource_FilterCriteriaTitle\'), hideButtons: true }"> <div class="dx-field dxd-back-primary"> <!-- ko with: value --> <div class="dx-field-label dxd-text-primary" data-bind="text: tableName"></div> <!-- ko if: $data.filterString() !== null --> <div class="dx-field-value dxrd-margin-right-5px"  data-bind="dxFilterEditor: { options: filterString, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath }"></div> <!-- /ko --> <!-- /ko --> </div> </div></div>',
    'dxrd-coordinategrid': '<svg data-bind="style: { \'height\': height() + \'px\',  \'width\': width() + \'px\' }, attr: { viewBox: \'0 0 \' + width() + \' \' + height() }"> <g transform="translate(0, 0)"> <!-- ko foreach: verticalGridLines --> <line y1="0" y2="100%" class="minor-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }, visible: visible"></line> <!-- /ko --> </g> <g transform="translate(0, 0)"> <!-- ko foreach: horizontalGridLines --> <line x1="0" x2="100%" class="minor-graduation" data-bind="attr: { y1: coordVal, y2: coordVal }, visible: visible"></line> <!-- /ko --> </g> <g transform="translate(0, 0)"> <!-- ko foreach: majorVerticalGridLines --> <line y1="0" y2="100%" class="major-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }, visible: visible"></line> <!-- /ko --> </g> <g transform="translate(0, 0)"> <!-- ko foreach: majorHorizontalGridLines --> <line x1="0" x2="100%" class="major-graduation" data-bind="attr: { y1: coordVal, y2: coordVal }, visible: visible"></line> <!-- /ko --> </g></svg>',
    'dxrd-expressions-tab': '<div class="dxrd-properties-wrapper dxrd-expressions-tab" data-bind="visible: active && visible"> <div class="dxrd-properties-sub-wrapper"> <div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: text"></span> </div> <!-- ko with: model --> <!-- ko if: $root.controlsStore.visible() --> <div class="dx-property-grid-header"> <div class="dx-property-grid-header-content"> <div class="dx-property-grid-selected-component"> <div class="dxrd-properties-focused-item dxrd-margin-0"  data-bind="dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: $root.editableObject, displayExpr: function(value) { var showValue = value || $root.editableObject(); return $root.dx._static.getControlFullName(showValue) }, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }"> </div> </div> </div> </div> <!-- /ko --> <div class="dxrd-properties-grid dxd-border-primary dxrd-top-80px" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }" > <!-- ko template: \'dx-propertieseditor\' --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-treelist-action-container-with-rename': '<div class="dx-treelist-action-container" data-bind="visible: !inRenameMode && (isSelected || isHovered)"> <!-- ko template: actionsTemplate --> <!-- /ko --> </div>',
    'dx-treelist-item-text-content-with-rename': '<div class="dx-treelist-text-wrapper"> <!-- ko if: !inRenameMode --> <!-- ko if: searchModel.searchEnabled --> <div class="dx-treelist-text dx-highlighted-search-text" data-bind="searchHighlighting: { text: text, textToSearch: searchModel.textToSearch, searchOptions: searchModel.searchOptions }, attr: { title: text }"></div> <!-- /ko  --> <!-- ko ifnot: searchModel.searchEnabled --> <div class="dx-treelist-text" data-bind="text: text, attr: { title: text }"></div> <!-- /ko  --> <!-- /ko  --> <!-- ko if: inRenameMode --> <div class="dx-treelist-rename-node" data-bind="dxTextBox: createRenameEditorOptions(), dxValidator: createValidatorOptions()"></div> <!-- /ko --> </div>',
    'dxrd-fieldlistwrapper': '<div class="dxrd-fieldslist-wrapper dxrd-height-100 dxrd-overflow-hidden" data-bind="visible: active && visible" > <!-- ko with: model --> <div class="dxrd-right-panel-header dxd-text-primary"> <div class="dxrd-fieldslist-wrapper-header" data-bind="text: $root.getLocalization(\'Field List\', \'ReportStringId.UD_Title_FieldList\')"></div> <!-- ko if: $data.allowAddDataSource --> <div id="btn-add-dataSource" data-bind="dxButtonWithTemplate: { onClick: startWizard, visible: visible(), text: addDataSourceButtonText, icon: \'dxrd-svg-operations-add\', iconClass: \'dx-image-add\' }, attr: { title: addDataSourceButtonText }"> </div> <!-- /ko --> </div> <div data-bind="treeListSearchPanel: {controllers:treeListOptions.treeListController}"></div> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }"> <div class="dx-editors"> <div id="tree" data-bind="treelist: treeListOptions" class="dxrd-width-100 dxrd-height-100"></div> </div> </div> <!-- ko if: useContextMenu --> <div data-bind="dxContextMenu: fieldListContextMenu"></div> <!-- /ko --> <!-- /ko --></div>',
    'dxrd-localization-editor-item': '<div class="dx-fieldset"> <div class="dx-field"> <div class="dx-field-label dx-accordion-header dxd-text-primary"> <label class="propertygrid-editor-displayName" data-bind="searchHighlighting: { text: displayName, textToSearch: $parent.textToSearch }, attr: { \'title\': displayName }"></label> </div> <div class="dx-field-value"> <!-- ko if: !ko.unwrap($data.multiline) --> <div class="dxrd-localization-panel-default" data-bind="dxTextBox: { value: defaultText, readOnly: !$data.isDefaultLanguage() }, css: { \'dxrd-localization-panel-textbox-full\': $data.isDefaultLanguage() }"></div> <div class="dxrd-localization-panel-current" data-bind="dxTextBox: { value: localizedText, onFocusIn: function(e, s) { $parent.onItemGotFocus(e) }, visible: !$data.isDefaultLanguage()}"></div> <!-- /ko --> <!-- ko if: ko.unwrap($data.multiline)--> <div class="dxrd-multi-area-container"> <div class="dxrd-localization-panel-default" data-bind="dxTextArea: { value: defaultText, readOnly: !$data.isDefaultLanguage(), autoResizeEnabled: true, minHeight: \'26px\', maxHeight: \'58px\' }, css: { \'dxrd-localization-panel-textbox-full\': $data.isDefaultLanguage() }"> </div> <!-- ko if: !$data.isDefaultLanguage() --> <div class="dxrd-localization-panel-current" data-bind="dxTextArea: { value: localizedText, onFocusIn: function(e, s) { $parent.onItemGotFocus(e) }, autoResizeEnabled: true, minHeight: \'26px\', maxHeight: \'58px\' }"> </div> <!-- /ko --> </div> <!-- /ko --> </div> </div> </div>',
    'dxrd-localization-editor': '<!-- ko if: $data && $data.isVisible() --> <div class="dxrd-localization-editor dx-editors" data-bind="css: { \'dx-rtl\': $root.rtl, \'dx-ltr\': !$root.rtl }, styleunit: { width: width }"> <div class="dxrd-left-localization-panel dx-editors dxd-text-primary dxd-back-primary" data-bind="resizable: getResizableOptions($element, 0, 500, $root.rtl ? \'Left\': \'Right\', \'Right\', width)"> <div class="dxrd-localization-panel-header dxd-back-primary2 dxd-border-secondary"> <div class="dxrd-localization-panel-title" data-bind="text: $root.getLocalization(\'Localization\', \'ASPxReportsStringId.ReportDesigner_LocalizationEditor_Title\')"></div> <div class="dx-fieldset"> <div class="dx-field"> <div class="dxrd-localization-language" data-bind="css: { \'dx-property-grid-search-uncollapsed \': isSearching() }"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Language\', \'DevExpress.XtraReports.UI.XtraReport.XRLanguage\')"></div> <div class="dx-field-value" data-bind="css: { \'dx-field-value-shortened\': getRegisteredService() }"> <!-- ko template: { name: \'dxrd-localization-combobox\', data: { getValues: function() { return $data.availableCultures; }, value: language, disabled: false } } --> <!-- /ko --> </div> <!-- ko if: getRegisteredService() --> <div class="dxrd-localization-panel-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxd-back-primary2 dx-button-has-text" data-bind="dxButtonWithTemplate: { onClick: function() { $data.applyLocalization($data.getRegisteredService()) }, disabled: isDefaultLanguage(), icon: \'dxrd-svg-actions-apply_localization_service\', iconClass: \'apply-localization-service\' }, attr: { title: $root.getLocalization(\'Translate\', \'ASPxReportsStringId.ReportDesigner_LocalizationEditorTranslate\') }"></div> <!-- /ko --> <div class="dxrd-localization-panel-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxd-back-primary2 dx-button-has-text" data-bind="dxButtonWithTemplate: { onClick: clearLocalization, icon: \'dxrd-svg-actions-reset\', iconClass: \'reset-localization\', disabled: isDefaultLanguage() }, attr: { title: $root.getLocalization(\'Reset\', \'ASPxReportsStringId.ParametersPanel_Reset\') }"></div> </div> <!-- ko template: \'dx-propertygrid-searchbox\'--> <!-- /ko --> </div> </div> </div> <div class="dxrd-localization-panel-content"> <div class="dxrd-localization-panel-content-header"> <div class="dx-fieldset"> <div class="dx-field"> <div class="dx-field-label"> <div class="dxrd-localization-language dxrd-localization-panel-default dxd-text-secondary" data-bind="text: $data.propertiesHeaderText()"></div> </div> <div class="dx-field-value"> <div class="dxrd-localization-language dxrd-localization-panel-default dxd-text-secondary" data-bind="text: $data.defaultLanguageText()"></div> <div class="dxrd-localization-language dxrd-localization-panel-current dxd-text-secondary" data-bind="text: $data.currentLanguageText(), visible: !$data.isDefaultLanguage()"></div> </div> </div> </div> </div> <div data-bind="dxList: { dataSource: localizationItems, selectionMode: \'single\', height: \'calc(100% - 59px)\', onSelectionChanged: onSelectionChanged, focusStateEnabled: false, activeStateEnabled: false, pageLoadMode: \'scrollBottom\', noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }"> <!-- ko lazy: { template: \'dxrd-localization-editor-item\' } --> <!-- /ko --> </div> </div> <div data-bind="dxLoadPanel:{ visible: showLoadIndicator, shading: true, position: { of: getLoadPanelPosition($element) }, showIndicator: true, showPane: true, shadingColor: \'rgba(0,0,0,0.4)\'}"></div> </div> </div> <!-- /ko -->',
    'dxrd-reportexplorerwrapper': '<div class="dxrd-fieldslist-wrapper dxrd-height-100 dxrd-overflow-hidden" data-bind="visible: active && visible" > <div class="dxrd-right-panel-header dxd-text-primary"> <div class="dxrd-fieldslist-wrapper-header" data-bind="text: $root.getLocalization(\'Report Explorer\', \'ReportStringId.UD_Title_ReportExplorer\')"></div> </div> <!-- ko with: model--> <div data-bind="treeListSearchPanel: {controllers:treeListController}"></div> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }, dxAutoScrolling: { active: $root.dx._static.DragDropHandler.started }"> <div id="tree" data-bind="treelist: { selectedPath: itemsProvider.selectedPath, itemsProvider: itemsProvider, treeListController: treeListController }" class="dxrd-width-100 dxrd-height-100"></div> </div> <!-- /ko --> </div>',
    'dxrd-ruler': '<svg data-bind="attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }"> <rect width="100%" height="100%" stroke-width="1px" stroke="gray" class="ruler"></rect> <!-- ko if: disable --> <rect data-bind="attr: { x: disable.start, width: disable.width }" height="100%" fill="grey" fill-opacity="0.5"></rect> <!-- /ko --> <!-- ko foreach: gridLines --> <line y1="80%" y2="100%" class="ruler-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }"></line> <!-- /ko --> <!-- ko foreach: majorGridLines --> <line y1="70%" y2="100%" class="ruler-graduation" data-bind="attr: { x1: coordVal, x2: coordVal }"></line> <!-- /ko --> <g transform="translate(-3, 0)"> <!-- ko foreach: majorGridLines --> <text class="ruler-mark" data-bind="text: text, attr: {x: coordVal, y: 12 }"></text> <!-- /ko --> </g> <!--<text class="ruler-mark" transform="translate(4, 14)">0</text>--></svg>',
    'dxrd-rulervertical': '<svg data-bind="attr: { \'width\': width() + \'px\', \'height\': height() + \'px\' }"> <rect width="100%" height="100%" stroke-width="1px" stroke="gray" class="ruler"></rect> <!-- ko foreach: gridLines --> <line class="ruler-graduation" data-bind="attr: { x1: $parent.defaultGridLinesCoordinate().x1, x2: $parent.defaultGridLinesCoordinate().x2, y1: coordVal, y2: coordVal }"></line> <!-- /ko --> <!-- ko foreach: majorGridLines --> <line class="ruler-graduation" data-bind="attr: {x1: $parent.defaultGridLinesCoordinate().majorX1, x2: $parent.defaultGridLinesCoordinate().majorX2, y1: coordVal, y2: coordVal }"></line> <!-- /ko --> <g transform="translate(0, 3)"> <!-- ko foreach: majorGridLines --> <text class="ruler-mark" data-bind="text: text, attr: {x: $parent.defaultGridLinesCoordinate().x, y: coordVal }"></text> <!-- /ko --> </g> <!--<text class="ruler-mark" transform="translate(4, 14)">0</text>--></svg>',
    'dxrd-watermark': '<!-- ko if: $data.reportSurface.watermark && $data.reportSurface.watermark.shouldDrawWatermarkImage() --><div class="dxrd-band-content-watermark" data-bind="css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface.watermark.imageSource().getDataUrl(), transparency: reportSurface.watermark.imageTransparency(), viewMode: reportSurface.watermark.imageViewMode(), align: reportSurface.watermark.imageAlign(), tiling: reportSurface.watermark.imageTiling() }"></div><!-- /ko --><!-- ko if: $data.reportSurface.watermark && $data.reportSurface.watermark.text() --><div class="dxrd-band-content-watermark" data-bind="css: {\'dxrd-flip\': forLeftMargin }, dxWatermark: { band: band, reportSurface: reportSurface, forLeftMargin: forLeftMargin, image: reportSurface._watermarkTextRenderingResult(), transparency: reportSurface.watermark.textTransparency(), viewMode: \'Stretch\', align: \'MiddleCenter\', tiling: false }"></div><!-- /ko -->',
    'dxrd-scripts-addon': '<!-- ko if: editorVisible --> <div class="dxrd-designer-wrapper dx-editors dxd-surface-back-color dxd-back-primary" data-bind="css: { \'dx-rtl\' : $root.rtl, \'dx-ltr\': !$root.rtl }"> <div class="dxrd-toolbar-wrapper"> <div class="dxrd-toolbar" data-bind="template: { name: \'dxrd-toolbar-tmplt\', data: getViewModel().toolbarItems }"></div> </div> <div class="dxrd-scripts-wrapper"> <div class="dxrd-scripts-editor dxd-back-primary2" data-bind="dxAceEditor: { value: scriptsText, editorContainer: editorContainer, options: aceOptions }"> </div> </div> </div> <!-- /ko -->',
    'dxrd-scripting-selectboxaction': '<div class="dxrd-toolbar-item dxrd-toolbar-selectbox"> <div data-bind="dxSelectBox: { items: widget.dataSource, onValueChanged: widget.onValueChanged, value: widget.value, displayExpr: widget.displayExpr, placeholder: widget.placeholder, width: widget.width, dropDownOptions: { container: getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div> </div>',
    'dxrd-scripts': '<div class="dxrd-scripts" data-bind="visible: editorVisible, template: \'dxrd-scripts-addon\'"></div>',
    'dxrd-context-menu-item': '<div class="dx-context-menu" data-bind="css: {\'dx-context-menu-flex\': !($data.items) }"> <!-- ko if: $data.imageTemplateName --> <div class="dx-context-menu-icon"> <!-- ko template: { name: $data.imageTemplateName }  --> <!-- /ko --> </div> <!-- /ko --> <div class="dx-context-menu-text" data-bind="text: $data.displayText ? $data.displayText() : $data.text"> </div> <!-- ko if: $data.items --> <div class="dx-context-menu-group-icon"> <!-- ko template: { name: \'dxrd-svg-preview-next_page\' }  --> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dxrd-error-panel': '<div class="dxrd-error-panel dxd-text-primary dxd-back-primary2" data-bind="style: _position, css: { \'collapsed\': collapsed }, resizable: _resizableOptions"> <div class="dxrd-width-100 dxrd-height-100" data-bind="style: { display: $data.collapsed() ? \'none\' : \'block\' }"> <div class="dxrd-error-panel-header dxd-border-primary dxd-back-primary2"> <div class="dxrd-error-panel-header-title" data-bind="text: $data.panelTitle"></div> <div class="dxrd-error-panel-header-collapse dx-accordion-item-title"  data-bind="click: function() { $data.toggleCollapsed() }"></div> </div> <div class="dxrd-error-panel-content"> <div class="dxrd-error-grid" data-bind="dxDataGrid: _dataGridOptions"> <div data-options="dxTemplate: { name: \'dx-type-button\'}"> <div class="dxd-back-highlighted" data-bind="css: { \'dxd-state-active\': data.pressed }, dxButton: { text: data.text, onClick: data.onClick }"> </div> </div> <div data-options="dxTemplate: { name:\'dxrd-errorType-column\' }"> <div class="dxrd-errorType-column" data-bind="template: { name: $parent.getIconTemplateName($data.value) }, attr: { title: $data.value }"> </div> </div> <div data-options="dxTemplate: { name:\'dxrd-code-column\' }"> <!-- ko if: $data.data.showLink--> <a class="dx-link" target="_blank" rel="noreferer noopener" data-bind="text: $data.data.code, attr: { href: $data.data.link }"></a> <!-- /ko --> <!-- ko if: !$data.data.showLink--> <div data-bind="text: $data.value"></div> <!-- /ko --> </div> <div data-options="dxTemplate:{ name:\'dxrd-source-column\' }"> <a class="dx-link" href="javascript:void(0)" data-bind="text: value, click: function() { $parent.navigateToItem($data.value); }"></a> </div> <div data-options="dxTemplate: { name: \'detail\' }"> <div class="dxrd-error-panel-description" data-bind="text: data.description"></div> </div> <div data-options="dxTemplate: { name: \'dxrd-error-source-filter\' }"> <div data-bind="dxTagBox: { maxDisplayedTags: 0, showSelectionControls: true, valueExpr: \'value\', displayExpr: \'displayValue\', value: data.value, dataSource: data.dataSource, useItemTextAsTitle: true, dropDownOptions: { container: data.getContainer($element), minWidth: 200 }, }"></div> </div> <div data-options="dxTemplate: { name: \'dxrd-error-type-filter\' }"> <div data-bind="dxButtonGroup: $data.data"> <div data-options="dxTemplate: { name: \'dxrd-error-type-filter-item\' }"> <div class="dxrd-errorType-column" data-bind="template: { name: $parents[1].getIconTemplateName(icon) } "> </div> <div class="dxrd-errorType-text" data-bind="text: $data.text()"></div> </div> </div> </div> </div> </div></div><div data-bind="style: { display: !$data.collapsed() ? \'none\' : \'block\' }"> <div class="dxrd-error-panel-notification" data-bind="click: function() { $data.toggleCollapsed() }, template: { name: $data.getNotificationTemplate() }, attr: { title: $data.getTitleMessage() }"></div></div></div>',
    'dxrd-navigation-panel-template': '<!-- ko ifnot: $root.isLoading() && tabs().length === 1--> <!-- ko if: allowMDI --> <!-- ko if: tabs().length > 0 --> <!-- ko template: \'dxrd-navigation-panel-template-content\' --> <!-- /ko --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: allowMDI --> <!-- ko if: tabs().length > 1 --> <!-- ko template: \'dxrd-navigation-panel-template-content\' --> <!-- /ko --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dxrd-navigation-panel-template-content': '<div class="dxrd-navigation-panel-wrapper" data-bind="style: { width: $root.surfaceSize() ? $root.surfaceSize() + \'px\' : \'auto\' }"> <div data-bind="dxTabs: { dataSource: tabs, selectedIndex: selectedIndex, showNavButtons: false, scrollingEnabled: false }"> <div data-options="dxTemplate: { name: \'item\' }"> <!-- ko if: icon --> <div class="dx-icon" data-bind="css: icon, event: { mousedown: function(e) { $parent.removeTab(e); } }"></div> <!-- /ko --> <div class="dx-tab-title-wrapper"> <div class="dx-tab-title" data-bind="text: isDirty() ? displayName() + \'*\' : displayName(), title: displayName, style: { \'font-weight\': isDirty() ? \'bold\' : \'normal\' }"></div> </div> </div> </div> </div>',
    'dxrd-parameters-dialog': '<div data-bind="css: \'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget \' + popupCss, dxPopup: { wrapperAttr: { class: \'dxrd-reportdialog dxrd-parameters-dialog dx-editors dx-widget \' + popupCss }, showTitle: true, width: width, height: height, title: $root.getLocalization(title), visible: visible, toolbarItems: buttons, showCloseButton: true, container: container($element), position: { of: container($element) }}"> <div class="dxrd-parameters-popup-content"> <!-- ko template: contentTemplate --> <!-- /ko --> </div> </div>',
    'dxrd-report-parameters-dialogs': '<!-- ko if: $data --> <!-- ko template: { name: \'dxrd-parameters-dialog\', data: _addParametersDialog } --> <!-- /ko --> <!-- ko template: { name: \'dxrd-parameters-dialog\', data: _editParametersDialog } --> <!-- /ko --> <!-- /ko -->',
    'dxrd-parameter-edit': '<div class="dxrd-parameter-edit-content"> <div data-bind="dxScrollView: { showScrollbar: \'onHover\', height: 510 }"> <div class="dxrd-parameter-edit-content-grid dxrd-parameters-properties" data-bind="template: { name: \'dx-propertieseditor\', data: _propertiesGrid }"></div> <!-- ko if: _selectedParameterSettings --> <div class="dxrd-parameter-edit-content-grid dxrd-parameters-settings" data-bind="template: { name: \'dx-propertieseditor\', data: _settingsGrid }"></div> <!-- /ko --> </div> </div>',
    'dxrd-parameters-content': '<div class="dxrd-parameters-content"> <div class="dxrd-parameters-content-list-wrapper"> <div class="dx-collectioneditor-actions-wrapper"> <!-- ko foreach: addButtons --> <!-- ko if: visible && ko.unwrap($root.canAddItems) --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: onClick, icon: icon, iconClass: iconClass }, attr: { title: title }"></div> <!-- /ko --> <!-- /ko --> <div class="dx-collectioneditor-action-separator"></div> <!-- ko foreach: moveButtons --> <!-- ko if: visible && ko.unwrap($root.canAddItems) --> <div class="dx-collectioneditor-action dx-collectioneditor-action-right dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: onClick, disabled: $parent.isDisabledButton(name), icon: icon, iconClass: iconClass }, attr: { title: title }"></div> <!-- /ko --> <!-- /ko --> </div> <div class="dxrd-parameters-content-list dxd-border-primary" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true, direction: \'both\' }, dxAutoScrolling: { active: $root.dx._static.DragDropHandler.started }"> <!-- ko if: $data.visible --> <div data-bind="treelist: fieldListModel" class="dxrd-width-100 dxrd-height-100"></div> <!-- /ko --> </div> </div> <!-- ko if: $data.contentVisible() && !$data.hasNoEditableProperties() --> <!-- ko template: \'dxrd-parameter-edit\' --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.contentVisible() --> <div class="dxrd-parameter-edit-content dx-empty"> <div class="dxrd-parameters-content-empty" data-bind="text: contentEmptyAreaPlaceHolder"></div> </div> <!-- /ko --> <!-- ko if: $data.hasNoEditableProperties() --> <div class="dxrd-parameter-edit-content dx-empty"> <div class="dxrd-parameters-content-empty" data-bind="text: contentNoPropertiesPlaceHolder"></div> </div> <!-- /ko --> </div>',
    'dxrd-parameter-editing-collection-item': '<div class="dxrd-parameter-editing-collection-item" data-bind="text: $data.value().name"></div>',
    'dxrd-parameters-checkbox': '<!-- ko if: $data.visible --> <div class="dx-field dxrd-parameters-checkbox"> <div class="dx-field-value"> <div class="propertygrid-editor-checkbox" data-bind="dxCheckBox: getOptions({ value: value, text: displayName, disabled: disabled })"></div> </div> </div> <!-- /ko -->',
    'dxrd-parameters-range-grid': '<div class="dx-editor dxrd-parameter-group-editor dxrd-parameters-group-offset" data-bind="visible: visible"> <div class="dx-group"> <div class="dx-editor-header"> <div class="dx-field"> <div class="dx-field-label dx-accordion-header dxd-text-primary" data-bind="styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\' }"> <div class="dx-group-header-font" data-bind="text: displayName, attr: { \'title\': displayName }"></div> </div> <div class="dx-field-value" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div data-bind="service: { name: \'createEditorAddOn\' }"></div> </div> </div> </div> <div class="dx-editor-content dx-accordion-content"> <!-- ko if: editorCreated && visible --> <div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div> <!-- /ko --> </div> </div> </div>',
    'dxrd-multivalue-editing': '<!-- ko if: ko.unwrap($data.value) && ko.unwrap($data.visible) --> <div class="dxrd-editor dxrd-parameter-group-editor"> <div class="dxrd-parameter-values-collectioneditor" data-bind="dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) , showScroll: true, collapsed: false, alwaysShow: true }"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties({ level: level }) }"></div> </div> </div> <!-- /ko -->',
    'dxrd-lookUpValues-editing': '<div class="dxrd-editor dxrd-parameter-group-editor dxrd-parameters-group-offset" data-bind="visible: visible"> <div class="dxrd-lookup-values-collectioneditor" data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx._static.LookUpValue.createNew, level: level, displayName: $root.getLocalization(displayName), info: info, collapsed: false, showScroll: true, alwaysShow: true, hideButtons: !ko.unwrap($root.canAddItems) }"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties({ level: level }) }"></div> </div> </div>',
    'dxrd-report-dialog-template': '<div data-bind="dxPopup: { showTitle: true, width: width, height: height, title: $root.getLocalization(title), visible: visible, disabled: disabled, toolbarItems: buttons, showCloseButton: true, container: container($element), wrapperAttr: { class: \'dxrd-reportdialog dx-editors dx-widget\' }, position: { of: container($element) }}"> <!-- ko template: { name: template, data: model } --> <!-- /ko --> <!-- ko if: disabled --> <div data-bind="dxLoadPanel: { visible:true, container: container($element), position: { of: container($element) } }"></div> <!-- /ko --> </div>',
    'dxrd-report-dialog-converter-template': '<div data-bind="dxPopup: { showTitle: true, minWidth: 530, height: popupOptions.height, width: \'auto\', title: popupOptions.title, visible: popupOptions.visible, toolbarItems: popupOptions.buttons, showCloseButton: true, wrapperAttr: { class: \'dxrd-reportdialog dxrd-reportdialog-converter dx-editors dx-widget\' }, container: popupOptions.container($element), position: { of: popupOptions.container($element) }}"> <div class="dxrd-reportdialog-converter-content"> <div class="dxrd-image-exlamation-icons" data-bind="template: \'dxrd-svg-wizard-warning\'"></div> <div class="dxrd-reportdialog-content-text"> <div class="dxrd-reportdialog-content-confirm-message" data-bind="text: popupOptions.confirmMessage"></div> <!-- ko if: popupOptions.infoMessage --> <div class="dxrd-reportdialog-content-info-message" data-bind="text: popupOptions.infoMessage"></div> <!-- /ko --> <!-- ko if: popupOptions.linkText --> <a class="dxrd-reportdialog-toggle-link dxd-hyperlink-color dxd-text-accented" data-bind="text: popupOptions.linkText, attr: {href: popupOptions.linkUrl, target: \'_blank\' }"></a> <!-- /ko --> </div> </div> </div>',
    'dxrd-savereport-dialog-content': '<div class="dxrd-reportdialog-content"> <div class="dx-fieldset"> <div class="dx-field dxd-back-primary"> <div data-bind="dxTextBox: { value: $data.reportName, height: 36, placeholder: reportNamePlaceholder(), valueChangeEvent: \'keyup\' }"></div> </div> </div> <div class="dx-default-border-style dxd-border-secondary"> <div class="dxrd-reportdialog-urls" data-bind="dxList: { dataSource: urls, selectedItems: [], editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportName(e.itemData.Value); }, activeStateEnabled: false, noDataText: $data.noDataText, encodeNoDataText: true, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\') }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: function(e){ $parent.onDblClick(e.Key); } }"> <div data-bind="text: $data.Value"></div> </div> </div> </div> </div>',
    'dxrd-savereport-dialog-content-light': '<div class="dxrd-reportdialog-easy-content" data-bind="text: saveText"></div>',
    'dxrd-openreport-dialog-content': '<div class="dxrd-reportdialog-content"> <div class="dx-fieldset"> <div class="dx-field dxd-back-primary"> <div class="dx-property-grid-search-box" data-bind="dxTextBox: { mode: \'search\', height: 36, value: searchValue, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }"></div> </div> </div> <div class="dx-default-border-style dxd-border-secondary"> <div class="dxrd-reportdialog-urls" data-bind="dxList: { dataSource: urls, selectedItems: [], searchExpr: [\'Value\'], searchValue: searchValue, editEnabled: true, height: 200, editConfig: { selectionEnabled: true }, selectionMode: \'single\', onItemClick: function(e) { this.reportUrl(e.itemData.Key); }, activeStateEnabled: false, nextButtonText: $root.getLocalization(\'More\', \'ASPxReportsStringId.List_More\'), noDataText: $data.noDataText, encodeNoDataText: true }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: function(e){ $parent.onDblClick(e.Key); } }"> <div data-bind="text: $data.Value"></div> </div> </div> </div> </div>',
    'dxrd-menubutton-template': '<div class="dxrd-menubutton-part dxrd-outline-inherit" tabindex="1"  data-bind="cacheElement: { action: function(element){ $data.setMenuElement(element) } }"> <div class="dxrd-menu-container dxrd-menu-fullscreen-nav" data-bind="css: { \'dxrd-menu-fullscreen-nav-collapsed\': isMenuCollapsed()}"> <div class="dx-overlay-wrapper dxd-menu-back-color dxd-back-contrast dxrd-z-index-1002"  data-bind="styleunit: { width: $data.isMenuCollapsed() ? 50 : 300 }, visible: appMenuVisible"> <div class="dx-overlay-content"> <div class="dxrd-report-menu-title dxd-border-primary"> <!-- ko if: !isMenuCollapsed()--> <div class="dxrd-report-menu-button dxrd-report-menu-close-button" data-bind="template: \'dxrd-svg-toolbar-delete\', dxclick: function(e) { toggleAppMenu() }, dxpointerenter: function(_, e) {  e.target.classList &&  e.target.classList.add(\'dxd-state-active\') }, dxpointerleave: function(_, e) {  e.target.classList &&  e.target.classList.remove(\'dxd-state-active\') }"></div> <div class="dxrd-report-menu-title-text dxd-text-primary" data-bind="text: $root.getLocalization(\'Menu\', \'ASPxReportsStringId.ReportDesigner_Menu_Text\')"></div> <!-- /ko --> <!-- ko if: isMenuCollapsed--> <div class="dxrd-report-menu-button dxd-back-highlighted dxrd-report-menu-back-button" data-bind="template: \'dxrd-svg-menu-back\', dxclick: function(e) { isMenuCollapsed(false); }"></div> <!-- /ko --> </div> <!-- ko foreach: actionLists.menuItems --> <div class="dxrd-menu-item dxd-text-primary dxd-list-item-back-color dxd-icon-highlighted" data-bind="dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled, \'dxd-state-active\': $data.selected }, visible: visible"> <div class="dxrd-menu-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> <!-- ko if: !$root.isMenuCollapsed() --> <div class="dxrd-menu-item-text" data-bind="text: $data.displayText && $data.displayText() || text, attr: { title: $data.displayText && $data.displayText() || text}"></div> <div class="dxrd-menu-item-separator" data-bind="visible: $data.hasSeparator"></div> <!-- /ko --> </div> <!-- /ko --> </div> </div> </div> <div class="dxrd-menu-button dxd-toolbox-back-color dxd-border-primary dxd-back-secondary-invariant"> <div class="dxrd-menu-button-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="dxclick: function(e) { if(stopPropagation) { stopPropagation = false; } else { toggleAppMenu() } }, template: \'dxrd-svg-menu-menu\', css: {\'dxd-state-active\': appMenuVisible }"></div> <div class="dxrd-menu-place dxrd-width-54px" ></div> </div> </div>',
    'dxrd-smart-tag-editor': '<!-- ko if: editorTemplate !== \'dx-commonCollection\' --><div class="dx-editor" data-bind="visible: visible"> <div class="dx-field" data-bind="css: { \'dx-field-flex\': (templateName === \'dx-boolean\'), \'dx-field-block\': (templateName !== \'dx-boolean\') }"> <!-- ko if: templateName !== \'dx-boolean\'--> <label class="dxa-smarttag-editor-displayName" data-bind="text: displayName, attr: { \'title\': fullDisplayName, \'for\': editorInputId }, css: { \'dx-property-required\': isRequired }"></label> <!-- /ko --> <div class="dx-field-value" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <!-- ko if: templateName !== \'dx-emptyHeader\' --> <!-- ko lazy: { innerBindings: { template: templateName }, isResolved: function(val) { $data.setIsRendered(val) } } --> <!-- /ko --> <!-- /ko --> </div> <!-- ko if: templateName === \'dx-boolean\'--> <label class="dxa-smarttag-editor-displayName" data-bind="text: displayName, attr: { \'title\': fullDisplayName, \'for\': editorInputId }, css: { \'dx-property-required\': isRequired }"></label> <!-- /ko --> </div> </div><!-- /ko -->',
    'dxrd-smart-tag': '<div class="dxrd-z-index-0 dxrd-position-absolute" data-bind="dxPopover: { width: \'216px\', height: \'auto\', position: { my: \'left center\', at: \'right center\', boundary: \'.dxrd-designer-wrapper\', of: \'.dxrd-control-smart-tag\', collision: \'flip fit\', offset: \'-10 0\' }, container: getPopupContainer($element), hideOnOutsideClick: true, showTitle: false, showCloseButton: false, shading: false, visible: popoverVisible, animation: {} }"> <div class="dxa-tasks-smart-tag-content" data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <div data-bind="css: { \'dx-rtl\' : rtl }"> <div class="dx-editors"> <div class="dx-fieldset"> <!-- ko foreach: getEditors(false) --> <!-- ko if: visible --> <!-- ko template: \'dxrd-smart-tag-editor\' --> <!-- /ko --> <!-- /ko --> <!-- /ko --> <div class="dxa-smart-tag-separator" data-bind="visible: separatorVisible"></div> <!-- ko foreach: getEditors(true) --> <!-- ko if: visible --> <!-- ko template: \'dxrd-smart-tag-editor\' --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div> </div> </div></div>',
    'dxrd-smart-tags': '<div class="dxrd-control-smart-tags" data-bind="styleunit: { left: $data.position.x, top: $data.position.y, width: width }, visible: visible"> <!-- ko foreach: $data.smartTags --> <!-- ko if: visible --> <div class="dxrd-control-smart-tag dxd-icon-accented" data-bind="dxButtonWithTemplate: { icon: $data.imageTemplateName, width: $parent.width, height: $parent.width, iconClass: $data.imageTemplateName }, event: { dblclick: function(_, event){ event.stopPropagation(); } }, click: function(_, event){ $data.onClick(); event.stopPropagation(); }"> </div> <!--ko if: $data.templateName --> <!--ko template: $data.templateName --> <!--/ko--> <!--/ko--> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-smart-tag-exressions': '<!--ko with: $data.expressionEditor --> <!--ko template: { name: \'dxrd-expressioneditor-popup\' } --> <!--/ko--> <!--/ko-->',
    'dxrd-reportRtlProperty': '<!-- ko if: !!$root.surface() --> <!-- ko template: { name: $root.dx._static.editorTemplates.getEditor("combobox").header, data: $root.surface().wrapRtlProperty($data, $root.undoEngine, $element) } --> <!-- /ko --> <!-- /ko -->',
    'dxrd-wizard-report-tree': '<div class="dxrd-wizard-report-tree"> <div class="dxrd-wizard-report-tree-title" data-bind="text: $root.getLocalization(\'Select the report\', \'ASPxReportsStringId.ReportDesigner_MasterDetailWizard_SelectReport\')"></div> <div class="dxrd-wizard-report-tree-selectbox" data-bind="dxSelectBox: { dataSource: $data.items, itemTemplate: \'stateItem\', valueExpr: \'path\', displayExpr: \'name\', value: $data.value, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"> <div data-options="dxTemplate:{ name:\'stateItem\' }" class="dxrd-text-align-left"> <div data-bind="text: name, styleunit: {marginLeft: 30 * level}"></div> </div> </div> </div>',
    'dxrd-toolbar-two-way-switch': '<div class="dxrd-toolbar-item dxrd-toolbar-two-way-switch dxd-back-contrast" data-bind="visible: $parent.visible"> <!-- ko foreach: $data.items --> <!-- ko template: { name: \'dxrd-toolbar-two-way-switch-active\', if: $data.active } --> <!-- /ko --> <!-- ko template: { name: \'dxrd-toolbar-two-way-switch-clickable\', if: !$data.active, data: $data.itemData } --> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-toolbar-two-way-switch-active': '<div class="dxd-text-primary dxd-back-highlighted dxd-state-active dxd-state-no-hover" data-bind="text: $data.getDisplayText()"></div>',
    'dxrd-toolbar-two-way-switch-clickable': '<div role="button" class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" data-bind="visible: $data.visible, attr: { \'aria-label\': $data.displayText && $data.displayText() || $data.text, \'aria-disabled\': ko.unwrap($data.disabled) ? \'true\' : \'false\', \'aria-pressed\': $data.selected ? ($data.selected() ? \'true\' : \'false\') : null }" > <div data-bind="text: $data.displayText && $data.displayText() || $data.text, attr: { title: $data.displayText && $data.displayText() || $data.text, class: \'dxd-text-primary dxd-back-highlighted \' + (ko.unwrap($data.imageClassName) || \'\') }, dxclick: function() { if((typeof $data.disabled === \'function\') && !$data.disabled() || !$data.disabled) { $data.clickAction($root.model && $root.model()); } }, css: {\'dxrd-disabled-button\': $data.disabled }"></div> </div>',
    'dxrd-context-menu': '<div data-bind="dxContextMenu: $data.contextMenu"></div>',
    'dxrd-expression-action': '<div data-bind="dxclick: function() { $root.activateExpressionEditor($data); }"> <span class="dxd-text-primary dx-menu-item-text" data-bind="attr: { title: title }, text: title"></span> <div class="dx-menu-item-popout-container" data-bind="visible: $data.items && $data.items.length"> <div class="dx-menu-item-popout"></div> </div> </div>',
    'dxrd-expression-editor-addon': '<div class="dxrd-editormenu-box dxd-property-grid-menu-box-color dxrd-editor-box-image" data-bind=" cacheElement: { action: function() { $data.cacheFunction($root.activateExpressionEditor); } }, dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss" > <div class="dxrd-editor-box-image-content" data-bind="template: { name: $data.imageTemplateName, if: ko.unwrap($data.imageTemplateName) }"></div> </div>',
    'dxrd-activated-expressioneditor': '<!-- ko if: !!$data --> <!-- ko template: \'dxrd-expressioneditor-popup\' --> <!-- /ko --> <!-- /ko -->',
    'dxrd-expressioneditor-popup': '<div data-bind="dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dxrd-expressioneditor-complex dx-popup-general\' }, title: title, visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'645px\', maxHeight: \'95%\', width: \'862px\', maxWidth: \'95%\', minHeight: \'400px\', minWidth: \'600px\', resizeEnabled: true, onResize: function() { $data.resizeAceEditor() }, container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onShowing: function(e) { onShowing(e); }, onHiding: function(e) { onHiding(e); }, onShown: function(e) { editor().onShown(e) } }"> <div class="dxrd-expressioneditor-popup-content"> <div class="dxrd-expressioneditor-properties dx-expressioneditor-properties dxd-back-primary2" data-bind="resizable: resizeHelper.resizable($root.resizeHandler, \'e\')"> <div class="dxrd-expressioneditor-properties-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko foreach: properties --> <!-- ko if: $data.templateName --> <!-- ko template: $data.templateName--> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.templateName --> <div class="dxrd-expressioneditor-property dxd-text-primary dxd-list-item-back-color dxd-back-highlighted dxrd-padding-left-17px" data-bind="css: {\'dxd-state-selected\': isSelected }, dxclick: function() { $data.click($data.content); }" > <div class="dxrd-expressioneditor-property-text" data-bind="text: displayName, attr: { title: displayName }, css: { \'dxrd-expressioneditor-property-binded\': isBinded() }"></div> <div class="dxrd-expression-image dxd-icon-accented" data-bind="template: \'dxrd-svg-properties-propertyexpression\', visible: isBinded()"></div> </div> <!-- /ko --> <!-- /ko --> </div> </div> <!-- ko with: $data.adapter --> <!-- ko if: $data.patchOptions($root.reportExplorerProvider, $root.editableObject && $root.editableObject()) --> <div data-bind="dxExpressionEditor: { options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider(), editorTemplateName: \'dx-expressioneditor-main\', popupVisible: $data.popupVisible, wrapper: $parent }"></div> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-expressioneditor-report-items': '<!-- ko template: { name: \'dx-expressioneditor-fields\', data: $data } --> <!-- /ko -->',
    'dxrd-expressioneditor-property-accordion': '<div class="dx-fieldset dxrd-margin-0" > <div data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dx-accordion-header dx-expressioneditor-property-accordion-header dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': $data.isSelected }"> <div class="dx-collapsing-image dxrd-display-inline-block" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" ></div> <span class="dxrd-expressioneditor-property-header" data-bind="text: displayName, style: { fontWeight: isBinded() ? \'Bold\' : \'\'}"></span> </div> <div class="dx-accordion-content"> <!-- ko foreach: items--> <!-- ko if: $data.templateName --> <!-- ko template: $data.templateName--> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.templateName --> <div class="dxrd-expressioneditor-property dxd-text-primary dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': isSelected }, dxclick: function() { $data.click($data.content); }"> <div class="dxrd-expressioneditor-property-text" data-bind="text: displayName, attr: { title: displayName }, css: { \'dxrd-expressioneditor-property-binded\': isBinded() }"></div> <div class="dxrd-expression-image dxd-icon-accented" data-bind="template: \'dxrd-svg-properties-propertyexpression\', visible: isBinded()"></div> </div> <!-- /ko --> <!-- /ko --> </div> </div> </div>',
    'dxrd-viewStyle': '<div data-bind="dxLocalizedSelectBox: { items: viewmodel.items, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxrd-reportSourceUrl': '<div data-bind="dxSelectBox: { dataSource: $data.getValues($root.reportUrls, $root.navigateByReports.currentTab), onOpened: function() { $data.updateUrls(); }, searchEnabled: true, value: value, disabled: disabled, valueExpr: \'Key\', displayExpr: \'Value\', dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div>',
    'dxrd-content-type': '<!-- ko if: value --> <!-- ko with: value --> <div data-bind="dxLocalizedSelectBox: { items: $parent.values, value: type, valueExpr: \'value\', showClearButton: showClearButton, displayExpr: \'displayValue\', displayCustomValue: true, disabled: $parent.disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div> <!-- /ko --> <!-- /ko -->',
    'dxrd-checkbox-style-combobox': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: $data.validationRules || [] }"> <div class="dxrd-checkbox-style-combobox-item" data-options="dxTemplate: { name: \'item\' }"> <div class="dxrd-checkbox-style-combobox-item-icons" data-bind="foreach: [\'Unchecked\',\'Checked\',\'Indeterminate\']"> <!-- ko template: $parent.templateBinding(\'dxrd-svg-checkboxglyphs-\' + $parent.value + \'_\' + $data) --> <!-- /ko --> </div> <span data-bind="text: $root.getLocalization(displayValue, localizationId), attr: { title: $root.getLocalization(displayValue, localizationId) }"></span> </div> </div>',
    'dxrd-datasource': '<div data-bind="dxSelectBox: getEditorOptions($root.dataSourceHelper, $root.undoEngine, $root.getPopupContainer($element))"></div>',
    'dxrd-bands': '<div data-bind="dxSelectBox: { items: generateValue($root.bands), value: value, displayExpr: \'displayName\', valueExpr: \'value\', displayCustomValue: true, disabled: disabled, placeholder: $root.getLocalization(\'(none)\', \'ChartStringId.WizNoBackImage\'), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div>',
    'dxrd-formattingRuleCollection': '<div class="dxrd-editor dxrd-formatting-rule-collection-editor" data-bind="visible: visible, styleunit: { \'marginLeft\' : padding }"> <div data-bind="dxCollectionEditor: options"> <div data-bind="dxdAccordion: { collapsed: collapsed, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent }"> <div class="dxrd-group-header dx-accordion-header dxd-text-primary"> <div class="dxrd-formatting-rule-checkbox" data-bind="dxCheckBox: { value: value.selected, disabled: disabled }, dxclick: function(_, event) { event.stopPropagation(); }"></div> <div class="dxrd-formatting-rule-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed }"></div> <div class="dxrd-formatting-rule-displayName"> <div class="propertygrid-editor-displayName" data-bind="text: value.name, attr: { title: value.name }"></div> </div> </div> <div class="dx-accordion-content dxd-back-primary"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties({ editorsInfo: { editors: $root.dx._static.formattingRuleSerializationsInfo }, level: level + 1, disabled: disabled }) }"></div> </div> </div> </div> </div>',
    'dxrd-fields-combobox': '<div data-bind="dxSelectBox: { dataSource: wrapValues($root.displayNameProvider), value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }, dxValidator: { validationRules: $data.validationRules || [] }"></div>',
    'dxrd-style': '<div data-bind="dxSelectBox: new $root.dx._static.StylesEditorHeaderModel(value, $root.model, disabled, $root.getPopupContainer($element))"></div>',
    'dxrd-styleContent': '<!-- ko if: value--> <div data-bind="dxStylesEditor: { styleName: value, styles: $root.styles() }"></div> <!--/ko -->',
    'dxrd-dataBindings': '',
    'dxrd-dataBinding': '<!-- ko with: value --> <!-- ko if: visible --> <!-- ko displayNameExtender: { dataSource: dataSource, dataMember: displayExpr } --> <div data-bind="dxFieldListPicker: { acceptCustomValue: true, displayValue: $displayName, onValueChanged: onValueChanged, itemsProvider: $root.dataBindingsProvider(), treeListController: $parent.treeListController, value: $data.generateValue($root.undoEngine(), $root.dataSourceHelper(), $root.fieldListDataSources(), $root.dataBindingsProvider()), disabled: $parent.disabled }"></div> <!--/ko --> <!--/ko --> <!--/ko -->',
    'dxrd-chartValueBinding': '<div data-bind="dxFieldListPicker: { acceptCustomValue: true, onValueChanged: onValueChanged, displayValue: generateDisplayValue($root.reportDataSource), itemsProvider: $root.reportDataBindingsProvider, treeListController: treeListController, value: generateValue($root.undoEngine(), $root.reportParameters, $root.reportDataSource), disabled: disabled }"></div>',
    'dxrd-reportexplorer-editor': '<div data-bind="dxFieldListPicker: { acceptCustomValue: true, onValueChanged: onValueChanged, value: itemsProvider.selectedPath, displayValue: displayExpr, itemsProvider: itemsProvider, path: itemsProvider.path, disabled: disabled, treeListController: treeListController }"></div>',
    'dxrd-dataBindingsContent': '<div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div>',
    'dxrd-dataBindingContent': '<div class="dx-field dxd-back-primary"> <div class="dx-field-label dx-accordion-header dxd-text-primary" data-bind="styleunit: padding"> <div class="propertygrid-editor-displayName" data-bind="text: $root.getLocalization(\'Format String\', \'DevExpress.XtraReports.UI.XRBinding.FormatString\')"></div> </div> <div class="dx-field-value"> <!-- ko if: value() --> <!-- ko with: value() --> <!-- ko template: { name: \'dxrd-formatstring\', data: { value: $data.formatString, disabled: $data.disabled, actions: $parent.actions, customPatterns: $parent.customPatterns } } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrd-scriptsbox': '<div data-bind="dxEventDropDownEditor: { items: $root.events, value: value, editEnabled: true, disabled: disabled, secondAction: function() { $root.gotoEvent && $root.gotoEvent($data.value(), name, $parents[1]._model && $parents[1]._model()); }, placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div>',
    'dxrd-collection-item-group': '<div class="dx-field dxd-back-primary" data-bind="styleunit: { \'marginLeft\' : padding }"> <div class="dx-field-label dxd-text-primary"> <div class="propertygrid-editor-displayName" data-bind="text: $parents[1].info().getChildCaption(index) + \':\'"></div> </div> <div class="dx-field-value"> <div class="dxrd-collectioneditor-action" data-bind="dxButtonWithTemplate: { onClick: value.changeSortOrder, icon: value.sortOrderClass().template, iconClass: value.sortOrderClass().class, disabled: disabled }"></div> <!-- ko displayNameExtender: { path: function() { return $parents[1]._model() && $parents[1]._model().getPath(\'groupFields\') || \'\' }, dataMember: value.fieldName } --> <div class="dxrd-collectioneditor-picker" data-bind="dxFieldListPicker: { displayValue: $displayName, value: value.fieldName, acceptCustomValue: true, path: $parents[1]._model() && $parents[1]._model().getPath(\'groupFields\') || \'\', itemsProvider: $root.dataBindingsProvider(), treeListController: new $root.dx._static.TreeListController(), disabled: disabled}"></div> <!--/ko --> </div> </div>',
    'dxrd-lookUpValues': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, addHandler: $root.dx._static.LookUpValue.createNew, undoEngine: $root.undoEngine, level: level, displayName: $root.getLocalization(displayName), info: info }"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties() }"></div> </div> </div>',
    'dxrd-parameterContent': '<div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div>',
    'dxrd-calculatedFields': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.calculatedFieldsSource().createCalculatedField(\'\'); } }"> </div> </div>',
    'dxrd-watermarks': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), allowEditItems: $root.canAddItems, level: level, info: info, _accessibilityProvider: ko.unwrap(_accessibilityProvider), addHandler: function() { return $root.watermarks().createWatermark(); } }"> </div> </div>',
    'dxrd-parameters': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info, addHandler: function() { return $root.parameters().add(); }, removeHandler: function(parameter) { return $root.parameters().remove(parameter); }, allowEditItems: $root.parameterEditingSettings.allowEditParameterCollection, allowReorderItems: $root.parameterEditingSettings.allowReorderParameters, undoEngine: $root.undoEngine }"> </div> </div>',
    'dxrd-levelCollection': '<div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: $root.getLocalization(displayName), level: level, info: info, addHandler: function() { return $root.dx._static.TableOfContentsLevel.createNew(_model()); } }"> </div> </div>',
    'dxrd-collectionItemWithAccordion': '<div class="dxrd-accordion-collection-item" data-bind="dxdAccordion: { collapsed: collapsed, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent }"> <div class="dxrd-group-header dx-accordion-header dxd-text-primary"> <div data-bind="styleunit: {\'paddingLeft\': padding + $root.dx._static.propertiesGridEditorsPaddingLeft() }"> <div class="dx-collapsing-image dxrd-display-inline-block" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed }"></div> <div class="dx-group-header-font dxd-text-primary dxrd-display-inline-block" data-bind="text: $root.getLocalization(value.name), attr: { title: $root.getLocalization(value.name) }"></div> </div> </div> <div class="dx-accordion-content dxd-back-primary"> <div data-bind="template: { name: \'dx-propertieseditor\', data: getProperties({ level: level + 2 }) }"></div> </div> </div>',
    'dx-numeric-undo': '<div data-bind="dxNumberBox: getOptions({ value:generateValue($root.undoEngine), showSpinButtons:true, disabled:disabled, min:min, max:max }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-modificators-highlightable': '<div class="dx-font-content"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="styleunit: { \'paddingLeft\': padding }"></div> <!-- ko with: value --> <div class="dx-field-value"> <div class="dx-font-styles-content"> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-bold" data-bind="css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.boldHasExpression }, click: function() { if(!$parent.disabled()) { bold(!bold()); } }"><!-- ko template: \'dxrd-svg-fontstyle-bold\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-italic" data-bind="css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.italicHasExpression }, click: function() { if(!$parent.disabled()) { italic(!italic()); } }"><!-- ko template: \'dxrd-svg-fontstyle-italic\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-underline" data-bind="css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.underlineHasExpression }, click: function() { if(!$parent.disabled()) { underline(!underline()); } }"><!-- ko template: \'dxrd-svg-fontstyle-underline\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-strikeout" data-bind="css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled, \'dxd-border-accented\': $data.strikeoutHasExpression }, click: function() { if(!$parent.disabled()) { strikeout(!strikeout()); } }"><!-- ko template: \'dxrd-svg-fontstyle-strikeout\'--><!-- /ko --></div> </div> </div> <!-- /ko --> </div> </div>',
    'dx-objectEditorContentUndo': '<!-- ko if: visible --> <div data-bind="template: { name: \'dx-propertieseditor\', data: generateValue($root.undoEngine) }"></div> <!-- /ko -->',
    'dxrd-editOptionsEditorName': '<div data-bind="dxFieldListPicker: $data"></div>',
    'dxrd-editingField-editor-treelist-item': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }"> <div class="dx-treelist-caption"> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected"> <div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> <div class="dx-treelist-text-wrapper"> <div class="dx-treelist-text" data-bind="text: text, attr: { title: data.title }"></div> </div> </div> </div> </div>',
    'dxrd-name': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { id: editorInputId } }),  dxValidator: { validationRules: generateRules($root.controlsHelper.allControls) || [] }"></div>',
    'dxrd-reportexpression-ellipsis': '<div class="no-margin-right" data-bind="dxEllipsisEditor: { value: displayValue, buttonAction: function() { $parent.showPopup($root.editableObject && $root.editableObject()); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning, inputAttr: { id: editorInputId } }"></div>',
    'dxrd-reportexpression-complex': '<!-- ko if: visible --> <div> <!-- ko template: { name: \'dxrd-reportexpression\' }--> <!-- /ko --> <!-- ko template: { name: \'dxrd-expressioneditor-popup\', data: $data.wrapper }--> <!-- /ko --> </div> <!-- /ko -->',
    'dxrd-reportexpression': '<!-- ko if: visible --> <!-- ko if: $data.patchOptions($root.reportExplorerProvider, $root.editableObject && $root.editableObject()) --> <div data-bind="dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.reportItemsProvider, displayNameProvider: $root.expressionDisplayNameProvider && $root.expressionDisplayNameProvider(), editorTemplateName: $data.editorTemplateName })"></div> <!-- /ko --> <!-- /ko -->',
    'dxrd-pivotcriteria': '<!-- ko with: $data.wrapModel($root.fieldListProvider) --> <div data-bind="dxFilterEditor: { options: value, fieldListProvider: itemsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: displayNameProvider }"></div> <!-- /ko -->',
    'dxrd-richtext-loadfile': '<div data-bind="dxRichTextFileEditor: { value: value, placeholderId: \'File\', disabled: disabled, accept:\'.rtf,.docx,.txt,.htm,.html\' }"></div>',
    'dxrd-image-loadfile': '<div data-bind="dxImageSourceEditor: { value: value, onValueChanged: onValueChanged, accept: \'image/*\', type: \'img\', disabled: disabled, inputAttr: { id: editorInputId}, showClearButton: true }"></div>',
    'dxrd-pdfcontent-loadfile': '<div data-bind="dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled, accept:\'.pdf\', showClearButton: true }"></div>',
    'dxrd-summaryeditor-header': '<!-- ko template: \'dx-emptyHeader\' --> <!-- /ko --> <div data-bind="dxPopup: { showTitle: true, width: \'550px\', height: \'400px\', wrapperAttr: { class: \'dxrd-summaryeditor-popup\' }, title: $root.getLocalization(\'Summary Editor\'), visible: $data.popup.visible, toolbarItems: $data.popup.buttons, showCloseButton: true, container: $data.popup.container($element), position: { of: $data.popup.container($element) }}"> <!-- ko template: { name: \'dx-propertieseditor\', data: $data.popup.grid } --> <!-- /ko --> </div>',
    'dxrd-datasource-combobox': '<div data-bind="dxSelectBox: { dataSource: $data.getValues(), searchEnabled: true, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element)  }, inputAttr: { id: editorInputId }, popupPosition: { boundary: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"> <div data-options="dxTemplate: { name: \'item\' }" data-bind="text: displayValue, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: displayValue }"> </div> </div>',
    'dxrd-localization-combobox': '<div data-bind="dxSelectBox: { dataSource: $data.getValues(), searchEnabled: true, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), width:  $root.calculateWithZoomFactor(357) }, inputAttr: { id: editorInputId }, popupPosition: { boundary: $root.getPopupContainer($element) }, useItemTextAsTitle: true }"> <div class="dx-localization-combobox-content" data-options="dxTemplate: { name: \'item\' }"> <div class="dx-culture dx-culture-code dxd-text-info" data-bind="text: value === \'Default\' ? \'\' : value, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: value }"></div> <div class="dx-culture" data-bind="text: displayValue, style: { \'fontWeight\': $root.isLocalized($data.value) ? \'bold\' : \'normal\' }, attr: { title: displayValue }"></div> </div> </div>',
    'dxrd-page-choose-report-type': '<div class="dxrd-wizard-type-page" data-bind="css: $data._extendCssClass(\'type-page\')"> <div class="dxrd-wizard-report-gallery" data-bind="dxList: getListOptions()"></div> </div>',
    'dxrd-page-crosstab-dataMembers': '<div class="dxrd-wizard-page dxrd-wizard-crosstab-select-dataMembers-page dxrd-wizard-page-treelist-accordion-style"> <div class="dxrd-wizard-list-container"> <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }"> <div class="dxrd-wizard-field-infos dxrd-wizard-field-infos-title dxd-border-secondary dxd-back-contrast"> <div class="dxrd-wizard-field-infos-title-image" data-bind="template: _icon"></div> <div class="dxrd-wizard-field-infos-title-content dxd-text-primary" data-bind="text: _title"></div> </div> <div data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }"> <div data-bind="treelist: _signleFieldMemberFieldListModel" class="dxrd-width-100 dxrd-height-100"></div> </div> </div> </div> </div>',
    'dxrd-page-crosstab-setlayout': '<div class="dxrd-wizard-page dxrd-wizard-crosstab-setlayout-page" data-bind="trackCursor: underCursor, css: {\'dxrd-wizard-crosstab-droppable-page\': isDroppable}"> <div class="dxrd-wizard-list-container"> <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }"> <div class="dxrd-wizard-field-infos dxrd-wizard-field-infos-title dxd-border-secondary dxd-back-contrast"> <div class="dxrd-wizard-field-infos-title-image" data-bind="template: _icon"></div> <div class="dxrd-wizard-field-infos-title-content dxd-text-primary" data-bind="text: _title"></div> </div> <div class="dxrd-wizard-field-infos dxrd-wizard-field-infos-paragraf dxd-border-secondary"> <div class="dxrd-wizard-field-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _fieldName"></div> <div class="dxrd-wizard-field-infos-values dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _valueName"></div> <div class="dxrd-wizard-field-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"></div> </div> <div data-bind="foreach: fieldInfos"> <div class="dxrd-wizard-field-infos dxd-border-secondary"> <div class="dxrd-wizard-field-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <div data-bind="dxSelectBox: { dataSource: $parent._crossTabFields, displayExpr: \'displayName\', value: field, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> </div> <div class="dxrd-wizard-field-infos-values dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <div data-bind="dxSelectBox: value"></div> </div> <div class="dxrd-wizard-field-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"> <div data-bind="dxButton: { icon: \'close\', onClick: function () { return $parent._removeInfo($data);  }}"></div> </div> </div> </div> </div> </div> </div>',
    'dxrd-page-colorScheme-content': '<div class="dxrd-page-color-scheme"> <!-- ko foreach: _lookupData.scheme --> <div class="dxrd-page-color-scheme-tile" data-bind="click: function () { $parent._applyScheme($data); }, style: { backgroundColor: color }"> <div class="dxrd-page-color-scheme-tile-content"> <div class="dxrd-page-color-scheme-tile-selected dxd-border-accented" data-bind="visible: $data.selected()"></div> <!-- ko ifnot: $data.name === \'Custom\' --> <div class="dxrd-page-color-scheme-tile-content-title" data-bind="text: displayName"></div> <!-- /ko --> <!-- ko if: $data.name === \'Custom\' --> <div class="dxrd-page-color-scheme-tile-content-custom"> <div class="dxrd-page-color-scheme-tile-content-title" data-bind="text: displayName"></div> <div class="dxrd-page-color-scheme-tile-content-edit" data-bind="css: { \'dxrd-page-color-scheme-tile-content-edit-active\': $data.popoverVisible() }, click: function() { $data.popoverVisible(!$data.popoverVisible()) }"> <div class="dxrd-page-color-scheme-tile-content-edit-icon" data-bind="template:\'dxrd-svg-color_gear\'"></div> </div> </div> <div class="dxrd-page-color-scheme-colorpicker" data-bind="dxPopover: { visible: $data.popoverVisible, width: \'auto\', height: \'auto\', wrapperAttr: { class: \'dxrd-page-color-scheme-colorpicker\' }, container: $root.getPopupContainer($element), target: \'.dxrd-page-color-scheme-tile-content-edit-icon\', position: { my: \'left center\', at: \'right center\', collision: \'fit\', of: \'.dxrd-page-color-scheme-tile-content-edit\', boundary: $root.getPopupContainer($element) } }"> <div class="dxrd-page-color-scheme-colorpicker-editor-container dxd-border-secondary"> <div data-bind="dxColorView: { value: editorColor, editAlphaChannel: true }"></div> </div> <div class="dxrd-page-color-scheme-colorpicker-buttons"> <div class="dxrd-page-color-scheme-colorpicker-button" data-bind="dxButton: { text: \'Cancel\', onClick: function() { $data.resetColor() }}"></div> <div class="dxrd-page-color-scheme-colorpicker-button" data-bind="dxButton: { text: \'Ok\', onClick: function() { $data.applyColor() }}"></div> </div> </div> <!-- /ko --> </div> </div> <!-- /ko --> </div>',
    'dxrd-page-colorScheme': '<div class="dxrd-wizard-page"> <!-- ko template: \'dxrd-page-colorScheme-content\' --> <!-- /ko --> </div>',
    'dxrd-page-columns': '<div class="dxrd-wizard-page dxrd-wizard-columns-page"> <div class="dxrd-wizard-left-panel"> <div class="dxrd-wizard-list-title" data-bind="text: availableFields.caption"></div> <div class="dx-default-border-style dxd-border-secondary"> <div class="dxrd-wizard-list" data-bind="dxList: { items: availableFields.items, selectedItems: availableFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: availableFieldClick }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.availableFieldDblClick }"> <div data-bind="text: displayName"></div> </div> </div> </div> </div> <div class="dxrd-wizard-splitter"> <div class="dxrd-wizard-splitter-action dxrd-margin-top-40px" data-bind="dxButtonWithTemplate: { onClick: select, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }" ></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: selectAll, disabled: !isSelectEnable(), icon: \'dxrd-svg-operations-moveright_all\', iconClass: \'dxrd-image-moveright-all\' }"></div> <div class="dxrd-wizard-splitter-action dxrd-margin-top-44px" data-bind="dxButtonWithTemplate: { onClick: unselect, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }" ></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: unselectAll, disabled: !isUnselectEnable(), icon: \'dxrd-svg-operations-moveleft_all\', iconClass: \'dxrd-image-moveleft-all\' }"></div> </div> <div class="dxrd-wizard-right-panel"> <div class="dxrd-wizard-list-title" data-bind="text: selectedFields.caption"></div> <div class="dx-default-border-style dxd-border-secondary"> <div class="dxrd-wizard-list" data-bind="dxList: { items: selectedFields.items, selectedItems: selectedFields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: selectedFieldClick }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.selectedFieldDblClick }"> <div data-bind="text: displayName"></div> </div> </div> </div> </div></div>',
    'dxrd-page-customizeLabel': '<div class="dxrd-wizard-page"> <div class="dxrd-wizard-customizelabel-page dxd-border-secondary"> <div class="dxrd-wizard-customizelabel-list"> <div class="dxrd-wizard-customizelabel-head-props"> <div class="dxrd-wizard-customizelabel-select-papersize"> <span data-bind="text: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\'), attr: { title: $root.getLocalization(\'Page Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSize\') }"></span> <div data-bind="dxSelectBox: { items: _labelData.paperKinds, displayExpr: \'name\', value: _selectedPaperSize, itemTemplate: \'PaperSizeText\', dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true , onOpened: function (e) { e.component._popup.option(\'width\', 300); }}, attr: { title: _selectedPaperSize().name + \' - \' + $root.dx._static.CustomizeLabelPage._getPageSizeText(_selectedPaperSize().width, _selectedPaperSize().height, _selectedPaperSize().unit)}"> <div data-options="dxTemplate: { name: \'PaperSizeText\' }" class="dxrd-wizard-customizelabel-select-customtemplate"> <p class="dxrd-wizard-customizelabel-select-template"> <span data-bind="text: name"></span> <span data-bind="text: $root.dx._static.CustomizeLabelPage._getPageSizeText(width, height, unit)"></span> </p> </div> </div> </div> <div class="dxrd-wizard-customizelabel-radiounit"> <div data-bind="dxRadioGroup:{items: _units, valueExpr: \'value\', value: unit, layout: \'horizontal\' }"></div> </div> <div class="dxrd-wizard-customizelabel-pagesizetext"><span data-bind="text: _pageSizeText"></span></div> </div> <div class="dxrd-wizard-customizelabel-props-container"> <div class="dxrd-wizard-customizelabel-props"> <div class="dxrd-wizard-customizelabel-pagesizetext-inline"> <span data-bind="text: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\', attr: { title: $root.getLocalization(\'Measure Units\', \'DevExpress.XtraReports.UI.XtraReport.ReportUnit\') + \':\' }"></span> <div data-bind="dxLocalizedSelectBox: { items: _units, valueExpr: \'value\', displayExpr: \'text\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div> </div> <div> <span data-bind="text: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\'), attr: { title: $root.getLocalization(\'Label Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelWidth\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelWidth }"></div> </div> <div> <span data-bind="text: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\'), attr: { title: $root.getLocalization(\'Label Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelHeight\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: labelHeight }"></div> </div> <div class="dxrd-wizard-customizelabel-prop-whis-top-margin"> <span data-bind="text: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\'), attr: { title: $root.getLocalization(\'Horizontal Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_HorizontalPitch\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: horizontalPitch }"></div> </div> <div> <span data-bind="text: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\'), attr: { title: $root.getLocalization(\'Vertical Pitch:\', \'ASPxReportsStringId.ReportDesigner_Wizard_VerticalPitch\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: verticalPitch }"></div> </div> <div class="dxrd-wizard-customizelabel-prop-whis-top-margin"> <span data-bind="text: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\'), attr: { title: $root.getLocalization(\'Top Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_TopMargin\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: topMargin }"></div> </div> <div> <span data-bind="text: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\'), attr: { title: $root.getLocalization(\'Left Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LeftMargin\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: leftMargin }"></div> </div> <div> <span data-bind="text: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\'), attr: { title: $root.getLocalization(\'Right Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_RightMargin\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: rightMargin }"></div> </div> <div> <span data-bind="text: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\'), attr: { title: $root.getLocalization(\'Bottom Margin:\', \'ASPxReportsStringId.ReportDesigner_Wizard_BottomMargin\') }"></span> <div data-bind="dxNumberBox: { min: 0.0, max: 999.9, showSpinButtons: true, step: _stepUnit, value: bottomMargin }"></div> </div> </div> <div class="dxrd-wizard-customizelabel-pic dxd-border-secondary"> <div class="dxrd-wizard-customizelabel-pic-element"></div> </div> <div class="dxrd-wizard-customizelabel-labelscounttext"><span data-bind="text: _labelsCountText"></span></div> </div> </div> </div></div>',
    'dxrd-page-dataMember': '<div class="dxrd-wizard-page"> <div class="dxrd-wizard-dataMember dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: scrollViewHeight }"> <div data-bind="treelist: fieldListModel" class="dxrd-width-100 dxrd-height-100"></div> </div></div>',
    'dxrd-page-groups': '<div class="dxrd-wizard-page dxrd-wizard-groups-page"> <div class="dxrd-wizard-left-panel"> <div class="dxrd-wizard-list-title" data-bind="text: fields.caption"></div> <div class="dx-default-border-style dxd-border-secondary"> <div class="dxrd-wizard-list" data-bind="dxList: { dataSource: fields.items, selectedItems: fields.activeItemArray, height: 257, selectionMode: \'single\', activeStateEnabled: false, onItemClick: fieldClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.fieldDblClick }"> <div data-bind="text: $data"></div> </div> </div> </div> </div> <div class="dxrd-wizard-splitter"> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: addNewGroup, disabled: !isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\'  }"></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: appendFieldsToGroup, disabled: !isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }"></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: removeGroup, disabled: !isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }"></div> <div class="dxrd-wizard-splitter-action dxrd-margin-top-95px"  data-bind="dxButtonWithTemplate: { onClick: moveUp, disabled: !isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }"></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: moveDown, disabled: !isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }"></div> </div> <div class="dxrd-wizard-right-panel"> <div class="dxrd-wizard-list-title" data-bind="text: groups.caption"></div> <div class="dx-default-border-style dxd-border-secondary"> <div class="dxrd-wizard-list" data-bind="dxList: { items: groups.items, height: 257, selectionMode: \'single\', selectedItems: groups.activeItemArray, activeStateEnabled: false, onItemClick: groupClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent.groupDblClick }"> <div data-bind="text: fields().join(\', \')"></div> </div> </div> </div> </div></div>',
    'dxrd-page-masterdetail-groups-section': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-groups-page dxd-border-secondary"> <div class="dxrd-wizard-masterdetail-groups-page-section-content" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }"> <div class="dx-fieldset" data-bind="foreach: _groupInfos"> <div class="dx-field dxd-back-primary"> <div class="dx-field-label" data-bind="text: displayName, attr: { \'title\': displayName}"></div> </div> <!-- ko foreach: groups --> <div class="dxrd-wizard-groups-item dx-field"> <div class="dxrd-wizard-groups-actions"> <div class="dxd-back-highlighted" data-bind="css: { \'dxrd-disabled-button\': $parent.moveUpDisabled($index()) }, click: function(){ $parent.moveup($index()) }"> <!-- ko template: \'dxrd-svg-operations-moveup\'--><!-- /ko --> </div> <div class="dxd-back-highlighted" data-bind="css: { \'dxrd-disabled-button\': $parent.moveDownDisabled($index()) }, click: function(){ $parent.movedown($index()) }"> <!-- ko template: \'dxrd-svg-operations-movedown\'--><!-- /ko --> </div> <div class="dxd-back-highlighted" data-bind="click: function(){ $parent.remove($index()) }"> <!-- ko template: \'dxrd-svg-operations-recycle_bin\'--><!-- /ko --> </div> </div> <div class="dxrd-wizard-groups-choozer"> <!-- ko template: { name: "dxrd-multivalue", data: $data } --> <!--/ko--> </div> </div> <!-- /ko --> <!-- ko if: isCreateGroupEnabled() --> <div class="dxrd-wizard-groups-item dx-field"> <div class="dx-field-label dxd-text-primary dxrd-width-auto" > <div class="dxrd-wizard-groups-addgroup dxd-hyperlink-color dxd-border-accented dxd-text-accented" data-bind="text: $data.addGroupText(), attr: { \'title\': $data.addGroupText() }, click: function() { $data.add() }"></div> </div> </div> <!-- /ko --> </div> </div> </div>',
    'dxrd-page-masterdetail-groups': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-groups-page"> <div class="dxrd-wizard-masterdetail-groups-page-title"> <!-- ko template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath } }--> <!-- /ko --> </div> <div class="dxrd-wizard-masterdetail-groups-page-content"> <div class="dxrd-wizard-left-panel"> <div class="dxrd-wizard-list-title" data-bind="text: _fieldCaption"></div> <div class="dx-default-border-style dxd-border-secondary dxrd-wizard-panel-content"> <!-- ko if: $data._currentFields() --> <div class="dxrd-wizard-list" data-bind="dxList: { items: _currentFields().items, selectedItems: _currentFields().activeItemArray, height: \'100%\', selectionMode: \'single\', activeStateEnabled: false, onItemClick: _fieldClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent._fieldDblClick }"> <div data-bind="text: $data"></div> </div> </div> <!-- /ko --> </div> </div> <div class="dxrd-wizard-splitter"> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _addNewGroup, disabled: !_isCreateGroupEnabled(), icon: \'dxrd-svg-operations-moveright\', iconClass: \'dxrd-image-moveright\' }"></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _appendFieldsToGroup, disabled: !_isAppendToGroupEnabled(), icon: \'dxrd-svg-operations-add\', iconClass: \'dxrd-image-add\' }"></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _removeGroup, disabled: !_isRemoveGroupEnabled(), icon: \'dxrd-svg-operations-moveleft\', iconClass: \'dxrd-image-moveleft\' }"></div> <div class="dxrd-wizard-splitter-action dxrd-margin-top-83px"  data-bind="dxButtonWithTemplate: { onClick: _moveUp, disabled: !_isMoveUpEnabled(), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dxrd-image-moveup\' }"></div> <div class="dxrd-wizard-splitter-action" data-bind="dxButtonWithTemplate: { onClick: _moveDown, disabled: !_isMoveDownEnabled(), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dxrd-image-movedown\' }"></div> </div> <div class="dxrd-wizard-right-panel"> <div class="dxrd-wizard-list-title" data-bind="text: _groupCaption"></div> <div class="dx-default-border-style dxd-border-secondary dxrd-wizard-panel-content"> <!-- ko if: $data._currentGroups() --> <div class="dxrd-wizard-list" data-bind="dxList: { items: _currentGroups().items, height: \'100%\', selectionMode: \'single\', selectedItems: _currentGroups().activeItemArray, activeStateEnabled: false, onItemClick: _groupClick, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }"> <div data-options="dxTemplate : { name: \'item\' }" data-bind="event: { dblclick: $parent._groupDblClick }"> <div data-bind="text: fields().join(\', \')"></div> </div> </div> <!-- /ko --> </div> </div> </div></div>',
    'dxrd-page-masterdetail-select-reportdata': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page"> <!-- ko template: {name: \'dxrd-page-masterdetail-select-reportdata-dataMembers\', data: $data } --> <!-- /ko --> <!-- ko template: {name: \'dxrd-page-masterdetail-select-reportdata-fieldMembers\', data: $data } --> <!-- /ko --> </div>',
    'dxrd-page-masterdetail-select-reportdata-dataMembers': '<div class="dxrd-wizard-reportdata-column dx-first-column"> <div class="dxrd-wizard-reportdata-title" data-bind="text: _selectDataMembersCaption"></div> <div class="dxrd-wizard-add-queries-page dxrd-wizard-masterdetail-dataMember dxrd-wizard-page-treelist-accordion-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }"> <div data-bind="treelist: _dataMemberFieldListModel" class="dxrd-width-100 dxrd-height-100"></div> </div> </div>',
    'dxrd-page-masterdetail-select-reportdata-fieldMembers': '<div class="dxrd-wizard-reportdata-column"> <div class="dxrd-wizard-reportdata-title" data-bind="text: _selectDataFieldsCaption"></div> <div class="dxrd-wizard-add-queries-page dxrd-wizard-masterdetail-fields dxrd-wizard-page-treelist-accordion-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'auto\' }"> <div data-bind="treelist: _fieldMemberFieldListModel" class="dxrd-width-100 dxrd-height-100"></div> </div> </div>',
    'dxrd-page-masterdetail-select-dataMembers': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page"> <!-- ko template: { name: "dxrd-page-masterdetail-select-reportdata-dataMembers", data: $data }--> <!-- /ko --> </div>',
    'dxrd-page-masterdetail-select-fieldMembers': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-select-reportdata-page"> <!-- ko template: { name: "dxrd-page-masterdetail-select-reportdata-fieldMembers", data: $data }--> <!-- /ko --> </div>',
    'dxrd-page-masterdetail-summary-section': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-summary-options-page"> <div class="dxrd-wizard-masterdetail-summary-options-content"> <div class="dxrd-wizard-list-container"> <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }"> <div class="dxrd-wizard-field-infos dxrd-wizard-field-infos-paragraf dxd-border-secondary"> <div class="dxrd-wizard-field-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _fieldsCaption, attr:{\'title\': _fieldsCaption }"></div> <div class="dxrd-wizard-field-infos-values dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _summaryFunctionCaption, attr:{\'title\': _summaryFunctionCaption }"></div> <div class="dxrd-wizard-field-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"></div> </div> <div data-bind="foreach: _summaryInfos"> <div class="dxrd-wizard-field-infos dxd-border-secondary"> <div class="dxrd-wizard-field-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <div data-bind="dxFieldListPicker: { itemsProvider: $parent._fieldListProvider, acceptCustomValue: false, onValueChanged: onValueChanged, value: selectedPath, displayValue: displayName, placeholder: $root.dx._static.selectPlaceholder() }"> </div> </div> <div class="dxrd-wizard-field-infos-values dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <!-- ko template: { name: "dxrd-multivalue", data: $data } --> <!--/ko--> </div> <div class="dxrd-wizard-field-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"> <div data-bind="dxButton: { icon: \'close\', onClick: function () { return $parent._removeSummaryInfo($data);  }}"></div> </div> </div> </div> </div> </div> </div> <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: _ignoreNullValuesCaption }"></div> </div>',
    'dxrd-page-masterdetail-summary': '<div class="dxrd-wizard-page dxrd-wizard-masterdetail-summary-options-page"> <div class="dxrd-wizard-masterdetail-summary-options-title"> <!-- ko template: { name: \'dxrd-wizard-report-tree\', data: { items: $data._reportTree, value: $data._currentPath  } }--> <!-- /ko --> </div> <div class="dxrd-wizard-masterdetail-summary-options-content"> <div class="dxrd-wizard-list-title" data-bind="text: _selectFieldToSummaryCaption"></div> <div class="dxrd-wizard-list-container"> <div class="dxrd-wizard-list dx-default-border-style dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', height: \'100%\' }"> <div class="dxrd-wizard-field-infos dxrd-wizard-field-infos-paragraf dxd-border-secondary"> <div class="dxrd-wizard-field-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _fieldsCaption"></div> <div class="dxrd-wizard-field-infos-values dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary" data-bind="text: _summaryFunctionCaption"></div> <div class="dxrd-wizard-field-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"></div> </div> <div data-bind="foreach: _summaryInfos"> <div class="dxrd-wizard-field-infos dxd-border-secondary"> <div class="dxrd-wizard-field-infos-fields dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <div data-bind="dxSelectBox: { dataSource: $parent._displayedFields[$parent._currentPath()], itemTemplate: \'visibleItems\', displayExpr: \'displayName\', value: field, placeholder: $root.dx._static.selectPlaceholder(), dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"> <div data-options="dxTemplate:{ name:\'visibleItems\' }" class="dxrd-text-align-left"> <!-- ko if: visible--> <div data-bind="text: name"></div> <!--/ko--> </div> </div> </div> <div class="dxrd-wizard-field-infos-values dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <!-- ko template: { name: "dxrd-multivalue", data: $data } --> <!--/ko--> </div> <div class="dxrd-wizard-field-infos-removebtn dxd-wizard-title-back-color dxd-back-secondary"> <div data-bind="dxButton: { icon: \'close\', onClick: function () { return $parent._removeSummaryInfo($data);  }}"></div> </div> </div> </div> </div> </div> </div> <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: _ignoreNullValuesCaption }"></div></div>',
    'dxrd-page-pageSetup': '<div class="dxrd-wizard-page dxrd-page-setup-page"> <!-- ko template: { name: \'dxrd-page-setup-page-preview\', data: $data }--> <!-- /ko --> <!-- ko template: { name: \'dxrd-page-setup-page-settings\', data: $data }--> <!-- /ko --> </div>',
    'dxrd-page-setup-page-preview': '<div class="dxrd-wizard-preview dxd-back-secondary"> <!-- ko with: $data.previewPageHelper --> <div class="dxrd-width-100 dxrd-height-100 dxrd-position-relative" data-bind="cacheElement: { action: function(element) { $data.cachePagePreviewElement(element); } }"> <div class="dxrd-wizard-preview-page" data-bind="styleunit: { width: $data.previewPageWidth(), height: $data.previewPageHeight() }"> <div class="dxrd-wizard-preview-margin-top" data-bind="styleunit: { top: $data.previewTopMargin() }"></div> <div class="dxrd-wizard-preview-margin-right" data-bind="styleunit: { right: $data.previewRightMargin() }"></div> <div class="dxrd-wizard-preview-margin-bottom" data-bind="styleunit: { bottom: $data.previewBottomMargin() }"></div> <div class="dxrd-wizard-preview-margin-left" data-bind="styleunit: { left: $data.previewLeftMargin() }"></div> </div> </div> <!-- /ko --> </div>',
    'dxrd-page-setup-groups': '<div class="dxrd-page-setup-group"> <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: $root.getLocalization(\'Paper\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Paper\')"></div> <div class="dx-fieldset dxrd-page-setup-long-group"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\'), attr: { \'title\': $root.getLocalization(\'Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Size\') }"></div> <div class="dx-field-value" data-bind="dxSelectBox: { items: lookupData.paperKind, valueExpr: \'value\', displayExpr: \'displayName\', value: paperKind, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> </div> </div> <div class="dxrd-page-setup-setting"> <div class="dx-fieldset dxrd-group-fieldset dxrd-page-setup-short-group"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\'), attr: { \'title\': $root.getLocalization(\'Unit:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Unit\') }"></div> <div class="dx-field-value" data-bind="dxSelectBox: { items: lookupData.unit, valueExpr: \'value\', displayExpr: \'displayName\', value: unit, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> </div> <div class="dx-field dxrd-page-setup-pagemode-compact"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\'), attr: { \'title\': $root.getLocalization(\'Orientation:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_Orientation\') }"></div> <div class="dx-field-value" data-bind="dxLocalizedSelectBox: { items: [ { value: true, displayName: \'Landscape\', localizationId: \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Landscape\'}, { value: false, displayName: \'Portrait\', localizationId:\'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_Portrait\' }], valueExpr: \'value\', displayExpr: \'displayName\', value: $data.landscape, dropDownOptions: { container: $root.getPopupContainer($element) } }"></div> </div> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\'), attr: { \'title\': $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\') }"></div> <div class="dx-field-value" data-bind="dxNumberBox: { value: width, disabled: fixedSize, format: valueFormat, min: 0 }"></div> </div> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\'), attr: { \'title\': $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\') }"></div> <div class="dx-field-value" data-bind="dxNumberBox: { value: height, disabled: fixedSize, format: valueFormat, min: 0 }"></div> </div> </div> <div class="dxrd-group-fieldset dxrd-page-setup-pagemode"> <div class="dxrd-page-setup-landscape-item dxd-back-primary dxd-state-normal dxd-back-highlighted dxrd-margin-left-0px"  data-bind="css: { \'dxd-state-no-hover dxd-state-active\': !$data.landscape() }, click: function() { $data.landscape(false); }"> <div class="dxrd-page-setup-landscape-item-icon" data-bind="template:\'dxrd-svg-portrait\'"></div> </div> <div class="dxrd-page-setup-landscape-item dxd-back-primary dxd-state-normal dxd-back-highlighted" data-bind="css: { \'dxd-state-no-hover dxd-state-active\': $data.landscape() }, click: function() { $data.landscape(true); }"> <div class="dxrd-page-setup-landscape-item-icon" data-bind="template:\'dxrd-svg-landscape\'"></div> </div> </div> </div> </div> <div class="dxrd-page-setup-group dxrd-margin-top-16px" > <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: $root.getLocalization(\'Page Margins\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_PageMargins\')"></div> <div class="dxrd-page-setup-setting dxrd-page-setup-setting-page-margins"> <div class="dx-fieldset dxrd-group-fieldset dxrd-group-fieldset-left"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\'), attr: { \'title\': $root.getLocalization(\'Left:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_LeftMargin\') }"></div> <div class="dx-field-value" data-bind="dxNumberBox: { value: marginLeft, format: valueFormat, min: 0, max: width() - marginRight() }"></div> </div> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\'), attr: { \'title\': $root.getLocalization(\'Top:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_TopMargin\') }"></div> <div class="dx-field-value" data-bind="dxNumberBox: { value: marginTop, format: valueFormat, min: 0, max: height() - marginBottom() }"></div> </div> </div> <div class="dx-fieldset dxrd-group-fieldset dxrd-group-fieldset-right"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\'), attr: { \'title\': $root.getLocalization(\'Right:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_RightMargin\') }"></div> <div class="dx-field-value" data-bind="dxNumberBox: { value: marginRight, format: valueFormat, min: 0, max: width() - marginLeft() }"></div> </div> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="text: $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\'), attr: { \'title\': $root.getLocalization(\'Bottom:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PageSetup_BottomMargin\') }"></div> <div class="dx-field-value" data-bind="dxNumberBox: { value: marginBottom, format: valueFormat, min: 0, max: height() - marginTop()  }"></div> </div> </div> </div> </div>',
    'dxrd-page-setup-page-settings': '<div class="dxrd-page-setup-content"> <!-- ko template: { name: \'dxrd-page-setup-groups\', data: $data }--> <!-- /ko --> </div>',
    'dxrd-page-pageSetupAndColorScheme': '<div class="dxrd-wizard-page dxrd-page-setup-page"> <div class="dxrd-page-setup-content"> <!-- ko template: { name: \'dxrd-page-setup-groups\', data: $data._configureReportPageSettingsPage }--> <!-- /ko --> <!-- ko if: $data._colorSchemePageVisible --> <div class="dxrd-page-setup-group dxrd-page-color-setup-group"> <div class="dxrd-page-setup-group-caption dxd-back-primary" data-bind="text: $root.getLocalization(\'Color Scheme\', \'ASPxReportsStringId.ReportDesigner_Wizard_ColorScheme\')"></div> <div class="dxrd-page-setup-setting"> <!-- ko template: { name: \'dxrd-page-colorScheme-content\', data: $data._colorSchemePage } --> <!-- /ko --> </div> </div> <!-- /ko --> </div> </div>',
    'dxrd-page-pageSetup-settings': '<div class="dxrd-wizard-page dxrd-page-setup-page"> <!-- ko template: { name: "dxrd-page-setup-page-settings", data: $data }--> <!-- /ko --> </div>',
    'dxrd-page-pageSetup-preview': '<div class="dxrd-wizard-page dxrd-page-setup-page"> <!-- ko template: { name: "dxrd-page-setup-page-colored-preview", data: $data }--> <!-- /ko --> </div>',
    'dxrd-page-setup-page-colored-preview': '<div class="dxrd-wizard-preview dxd-back-secondary"> <!-- ko if: $data._reportTitleVisible --> <div class="dxrd-wizard-preview-reporttitle" data-bind="dxTextBox: { value: reportTitle, placeholder: _reportTitlePlaceholder() }, styleunit: { width: $data._previewPageHelper.previewPageWidth() }"></div> <!-- /ko --> <div class="dxrd-wizard-preview-pagecontainer" data-bind="cacheElement: { action: function(element) { $data._previewPageHelper.cachePagePreviewElement(element); } }"> <div class="dxrd-wizard-preview-page" data-bind="styleunit: { width: $data._previewPageHelper.previewPageWidth(), height: $data._previewPageHelper.previewPageHeight() }"> <div class="dxrd-wizard-preview-margin-top" data-bind="styleunit: { top: $data._previewPageHelper.previewTopMargin() }"></div> <div class="dxrd-wizard-preview-margin-right" data-bind="styleunit: { right: $data._previewPageHelper.previewRightMargin() }"></div> <div class="dxrd-wizard-preview-margin-bottom" data-bind="styleunit: { bottom: $data._previewPageHelper.previewBottomMargin() }"></div> <div class="dxrd-wizard-preview-margin-left" data-bind="styleunit: { left: $data._previewPageHelper.previewLeftMargin() }"></div> <div data-bind="styleunit: { top: $data._previewPageHelper.previewTopMargin(),  right: $data._previewPageHelper.previewRightMargin(),  bottom: $data._previewPageHelper.previewBottomMargin(),  left: $data._previewPageHelper.previewLeftMargin() }"> <div class="dxrd-wizard-rows-container"> <!-- ko foreach: _masterDetailInfo --> <div class="dxrd-wizard-preview-row"> <!-- ko foreach: fields --> <div class="dxrd-wizard-preview-column" data-bind="style: {  backgroundColor: $parents[1]._color, width: 100/$parent.fields.length + \'%\', color: $parents[1]._foreColor }, text: displayName"></div> <!-- /ko --> </div> <div class="dxrd-wizard-preview-row"> <!-- ko foreach: fields --> <div class="dxrd-wizard-preview-column" data-bind="style: { width: 100/$parent.fields.length + \'%\' }, text: \'[\' + name + \']\'"></div> <!-- /ko --> </div> <!-- /ko --> </div> </div> </div> </div> </div>',
    'dxrd-page-reportLayoutType': '<div class="dxrd-wizard-page dxrd-report-layout-type-page"> <div class="dxrd-text-align-center"> <div class="dxrd-report-layout-type-items" data-bind="css: { \'dxrd-report-layout-type-five-items\': layoutTypeItems()[0].margin == 1 }"> <div> <div data-bind="dxRadioGroup: { value: selectedPageOrientation, items: pageOrientationItems, layout: \'horizontal\' }"> <div data-options="dxTemplate : { name: \'text\' }"> <div data-bind="text: $data"></div> </div> </div> </div> <!-- ko foreach: layoutTypeItems --> <div class="dx-background-inheritor dxd-back-highlighted dxd-state-selected"> <div class="dxrd-report-layout-type-item dx-fontsize-reestablished dxd-list-item-back-color" data-bind="event: { click: $parent.layoutTypeItemClick }, css: { \'dxd-state-selected dxd-border-secondary dxd-back-secondary\': $parent.isSelected($data) }, style: { margin: \'0 \' + margin + \'px\' }"> <div data-bind="attr: { class: imageClassName }"></div> <div data-bind="text: text" class="dxrd-report-layout-type-text"></div> </div> </div> <!-- /ko --> <div class="dxrd-clear-both"></div> <div data-bind="dxCheckBox: { value: fitFieldsToPage, text: $root.getLocalization(\'Adjust the field width so all fields fit onto a page\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportLayout_AdjustFieldWidth\') }"></div> </div> </div></div>',
    'dxrd-page-reportStyle': '<div class="dxrd-wizard-page dxrd-wizard-report-style-page"> <div class="dxrd-wizard-report-style-image-container"> <div data-bind="attr: { class: selectedReportStyle().className }"> <div class="title dxrd-margin-bottom-18px"  data-bind="text: $root.getLocalization(\'Title\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Title\')"></div> <div class="caption dxrd-margin-bottom-4px"  data-bind="text: $root.getLocalization(\'Caption\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Caption\')"></div> <div class="data" data-bind="text: $root.getLocalization(\'Data\', \'ASPxReportsStringId.ReportDesigner_Wizard_ReportStyle_Data\')"></div> </div> </div> <div class="dxrd-wizard-report-style-items" data-bind="dxRadioGroup: { value: selectedReportStyle, items: reportStyleItems }"> <div data-options="dxTemplate : { name: \'item\' }"> <div data-bind="text: text"></div> </div> </div></div>',
    'dxrd-page-reportTitle': '<div class="dxrd-width-272px dxrd-position-relative dxrd-top-38 dxrd-margin-0-auto"> <div class="dxrd-margin-bottom-5px" data-bind="text: $root.getLocalization(\'Specify the report\\\'s title\', \'ASPxReportsStringId.ReportDesigner_Wizard_SpecifyReportTitle\')"></div> <div data-bind="dxTextBox: { value: reportTitle, width: 270 }"></div></div>',
    'dxrd-page-selectPredefinedLabels': '<div class="dxrd-wizard-page"> <div class="dxrd-wizard-selectlabelproduct-page dxd-border-secondary"> <div class="dxrd-wizard-selectlabelproduct-list"> <div class="dxrd-wizard-selectlabelproduct-list-label" data-bind="text: $root.getLocalization(\'Label Product:\', \'ASPxReportsStringId.ReportDesigner_Wizard_LabelProduct\')"></div> <div data-bind="dxSelectBox: { items: _labelData.labelProducts, displayExpr: \'name\', value: _selectedLabelProduct, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> <div class="dxrd-wizard-selectlabelproduct-list-label" data-bind="text: $root.getLocalization(\'Product Number:\', \'ASPxReportsStringId.ReportDesigner_Wizard_ProductNumber\')"></div> <div data-bind="dxSelectBox: { dataSource: _labelDetails, displayExpr: \'name\', value: _selectedLabelDetails, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true  }"></div> </div> <div class="dxrd-wizard-selectproduct-props"> <div> <span data-bind="text: $root.getLocalization(\'Width:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Width\')"></span> <span data-bind="text: _width"></span> </div> <div> <span data-bind="text: $root.getLocalization(\'Height:\', \'ASPxReportsStringId.ReportDesigner_Wizard_Height\')"></span> <span data-bind="text: _height"></span> </div> <div> <span data-bind="text: $root.getLocalization(\'Paper Type:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperType\')"></span> <span data-bind="text: _paperType"></span> </div> <div> <span data-bind="text: $root.getLocalization(\'Paper Size:\', \'ASPxReportsStringId.ReportDesigner_Wizard_PaperSize\')"></span> <span data-bind="text: _pageSizeText"></span> </div> </div> </div></div>',
    'dxrd-page-summaryOptions': '<div class="dxrd-wizard-summary-options-page"> <div class="dxrd-wizard-summary-options-titles dxrd-wizard-dataMember dxd-wizard-title-back-color dxd-back-secondary dxd-border-secondary"> <div data-bind="text: $root.getLocalization(\'Average\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Average\')"></div> <div data-bind="text: $root.getLocalization(\'Count\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Count\')"></div> <div data-bind="text: $root.getLocalization(\'Max\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Max\')"></div> <div data-bind="text: $root.getLocalization(\'Min\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Min\')"></div> <div data-bind="text: $root.getLocalization(\'Sum\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_Sum\')"></div> </div> <div class="dxrd-wizard-summary-content dxrd-wizard-dataMember dxd-border-secondary" data-bind="dxScrollView: { }"> <div class="dxrd-wizard-summary-columns dxd-border-secondary"> <!-- ko foreach: summaryOptions --> <div class="dxrd-wizard-summary-column-name" data-bind="text: columnName, attr: { title: columnName }"></div> <!-- /ko --> </div> <div class="dxrd-wizard-summary-options"> <!-- ko foreach: summaryOptions --> <div class="dxrd-wizard-summary-options-values"> <div data-bind="dxCheckBox: { value: avg }"></div> <div data-bind="dxCheckBox: { value: count }"></div> <div data-bind="dxCheckBox: { value: max }"></div> <div data-bind="dxCheckBox: { value: min }"></div> <div data-bind="dxCheckBox: { value: sum }"></div> </div> <!-- /ko --> </div> </div> <div class="dxrd-wizard-ignore-null-values" data-bind="dxCheckBox: { value: ignoreNullValues, text: $root.getLocalization(\'Ignore null values\', \'ASPxReportsStringId.ReportDesigner_Wizard_SummaryOptions_IgnoreNullValues\') }"></div></div>'
});

;// ./node_modules/devexpress-reporting/scopes/reporting-designer-internal.js






































































































































































































































































;// ./node_modules/devexpress-reporting/scopes/reporting-designer-internal-htmlMarkUp.js



;// ./node_modules/devexpress-reporting/scopes/reporting-designer-localization.js



;// ./node_modules/devexpress-reporting/scopes/reporting-designer-tools.js





















;// ./node_modules/devexpress-reporting/scopes/reporting-designer-utils.js

















;// ./node_modules/devexpress-reporting/scopes/reporting-designer-settings.js



;// ./node_modules/devexpress-reporting/designer/controls/metadata/properties/dataBindings.js

const dataBindingsSerializationInfo = [
    { propertyName: 'ActualValue', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Actual Value', localizationId: 'DevExpress.XtraReports.UI.XRGauge.ActualValue' },
    { propertyName: 'Bookmark', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Bookmark', localizationId: 'DevExpress.XtraReports.UI.XRControl.Bookmark' },
    { propertyName: 'CheckBoxState', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Check Box State', localizationId: 'DevExpress.XtraReports.UI.XRCheckBox.CheckBoxState' },
    { propertyName: 'Html', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'HTML', localizationId: 'ASPxReportsStringId.ExportName_html' },
    { propertyName: 'Image', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Image', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.Image' },
    { propertyName: 'ImageSource', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Image Source', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageSource' },
    { propertyName: 'ImageUrl', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Image URL', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.ImageUrl' },
    { propertyName: 'Maximum', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Maximum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Maximum' },
    { propertyName: 'Minimum', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Minimum', localizationId: 'DevExpress.XtraReports.UI.XRGauge.Minimum' },
    { propertyName: 'NavigateUrl', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Navigation URL', localizationId: 'DevExpress.XtraReports.UI.XRControl.NavigateUrl' },
    { propertyName: 'Rtf', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'RTF', localizationId: 'ASPxReportsStringId.ExportName_rtf' },
    { propertyName: 'Tag', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Tag', localizationId: 'DevExpress.XtraReports.UI.XRControl.Tag' },
    { propertyName: 'TargetValue', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Target Value', localizationId: 'DevExpress.XtraReports.UI.XRGauge.TargetValue' },
    { propertyName: 'Text', editor: designerEditorTemplates.getEditor('dataBinding'), displayName: 'Text', localizationId: 'DevExpress.XtraReports.UI.XRControl.Text' }
];

;// ./node_modules/devexpress-reporting/designer/widgets/bandEditors.js






class BandEditorBase extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor() {
        super(...arguments);
        this.generateValue = (bands) => {
            if (!this.bands) {
                this.bands = bands(this.filter, this.noneNeaded);
            }
            return this.bands;
        };
        this.bands = null;
    }
}
class RunningBandEditor extends BandEditorBase {
    constructor() {
        super(...arguments);
        this.filter = (item) => {
            return item.controlType === 'GroupHeaderBand' || item.controlType === 'DetailReportBand';
        };
        this.noneNeaded = true;
    }
}
class BandsEditor extends BandEditorBase {
    constructor() {
        super(...arguments);
        this.filter = (item) => {
            return !(item instanceof DetailReportBand);
        };
        this.noneNeaded = false;
    }
}
class SortingBandEditor extends BandEditorBase {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.filter = (item) => {
            return item.controlType === 'GroupHeaderBand' || item.controlType === 'DetailBand';
        };
        this.noneNeaded = true;
        const value = external_ko_namespaceObject.computed(() => { return this.value() || {}; });
        this._disposables.push(value);
        this.viewmodel = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(value, { editors: [sortFields, groupFields] }, level + 1, this._get('disabled', 'wrapped'), false, textToSearch);
        this._disposables.push(this.viewmodel);
    }
}
class PageBreakBandEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this._disposables.push(this.values = external_ko_namespaceObject.pureComputed(() => {
            const model = this._get('_model');
            if (model && model[printAcrossBands.propertyName] && !!model[printAcrossBands.propertyName]())
                return pageBreakWithoutAfterValues;
            else
                return pageBreakValues;
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/chartValueBindingEditor.js




class ChartValueBindingEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.treeListController = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.TreeListController();
    }
    generateDisplayValue(reportDataSource) {
        if (!this.displayBinding) {
            this._disposables.push(this.displayBinding = external_ko_namespaceObject.computed(() => {
                const model = this._get('_model');
                return model && model['displayValue'](reportDataSource());
            }));
        }
        return this.displayBinding();
    }
    generateValue(undoEngine, reportParameters, reportDataSource) {
        if (!this.binding) {
            this._disposables.push(this.binding = external_ko_namespaceObject.computed({
                read: () => {
                    const model = this._get('_model');
                    return model && model['calculatePath'](reportDataSource()) || '';
                },
                write: (path) => {
                    const pathRequest = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest(path);
                    undoEngine.start();
                    this._get('_model')['updateValue'](pathRequest, reportParameters());
                    undoEngine.end();
                }
            }));
        }
        return this.binding;
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/dataSourceEditor.js



class DataSourceEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('getEditorOptions', (dataSourceHelper, undoEngine, popupContaner) => this.getEditorOptions(dataSourceHelper, undoEngine, popupContaner))
            .getViewModel();
    }
    dispose() {
        super.dispose();
        this._getEditorOptions = null;
    }
    getEditorOptions(dataSourceHelper, undoEngine, popupContainer) {
        if (!this._getEditorOptions) {
            const _dataSourceHelper = external_ko_namespaceObject.unwrap(dataSourceHelper);
            const items = external_ko_namespaceObject.computed(() => _dataSourceHelper && _dataSourceHelper.usedDataSources());
            this._disposables.push(items);
            this._getEditorOptions = {
                items: items,
                value: _dataSourceHelper && _dataSourceHelper.dataSourceValue(this.value, undoEngine),
                valueExpr: 'name',
                displayExpr: _dataSourceHelper && _dataSourceHelper.dataSourceDisplayExpr,
                displayCustomValue: true,
                disabled: this.disabled,
                dropDownOptions: { container: popupContainer },
                popupPosition: { boundary: popupContainer },
                useItemTextAsTitle: true,
                inputAttr: { id: this.editorInputId }
            };
        }
        return this._getEditorOptions;
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/explorerEditors.js






class ExplorerEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this._collectionNames = ['controls', 'bands'];
        this._disposables.push(this.displayExpr = external_ko_namespaceObject.computed(() => {
            const value = external_ko_namespaceObject.unwrap(this.value);
            return value && external_ko_namespaceObject.unwrap(value.displayName || value.name) || '';
        }));
        const model = external_ko_namespaceObject.computed(() => {
            const model = this._get('_model');
            return model && model['root'];
        });
        this._disposables.push(model);
        this._disposables.push(this.itemsProvider = new external_DevExpress_Analytics_Internal_namespaceObject.ObjectExplorerProvider([{ model: model, name: 'Report', displayName: 'Report', className: 'master_report' }], ['bands', 'controls', 'rows', 'cells'], this.value, ReportExplorerModel.getPathByMember));
        this.itemsProvider.path('Report');
        this.treeListController = new external_DevExpress_Analytics_Internal_namespaceObject.ObjectStructureTreeListController(['bands', 'controls', 'rows', 'cells', 'Report']);
        this.treeListController.canSelect = (item) => {
            return !item.hasItems && !(item.data && (item.data['data'] instanceof BandViewModel));
        };
        this.treeListController.itemsFilter = (item) => {
            return item && item['data'] && this._isVisible(item['data']);
        };
    }
    _isEqualModel(item) {
        const model = this._get('_model');
        return item === model || (model && model['isSame'] && model['isSame'](item));
    }
    _isVisible(item) {
        if (item instanceof BandViewModel) {
            for (let i = 0; i < this._collectionNames.length; i++) {
                const collection = item[this._collectionNames[i]] && item[this._collectionNames[i]]();
                if (collection) {
                    for (let j = 0; j < collection.length; j++) {
                        if (this._isVisible(collection[j]))
                            return true;
                    }
                }
            }
            return false;
        }
        else {
            return !this._isEqualModel(item) &&
                item.controlType !== 'XRTableOfContents' &&
                item.controlType !== 'XRPivotGrid' &&
                item.controlType !== 'XRPageBreak' &&
                item.controlType !== 'XRSubreport' &&
                item.controlType !== 'PivotGridField';
        }
    }
}
class DrillDownEditor extends ExplorerEditor {
    _setDisabled(value) {
        const info = this._get('info');
        if (info.disabled) {
            if (external_ko_namespaceObject.isObservable(info.disabled)) {
                info.disabled(value);
            }
            else {
                info.disabled = value;
            }
        }
        else {
            info.disabled = external_ko_namespaceObject.observable(value);
        }
    }
    _findFistAvailableBand(bands, position) {
        if (position === -1) {
            return null;
        }
        const target = bands[position];
        if (target && (target.controlType === 'GroupHeaderBand' || target.controlType === 'DetailBand')) {
            return target;
        }
        else if (target) {
            return this._findFistAvailableBand(bands, position - 1);
        }
        else {
            return null;
        }
    }
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.path = external_ko_namespaceObject.observable(null);
        this._disposables.push(external_ko_namespaceObject.computed(() => {
            const model = this._get('_model');
            if (model && model instanceof BandViewModel) {
                let target = null;
                if (model instanceof DetailBand && model.hasHierarchyPrintOptions()) {
                    target = model;
                }
                else {
                    const bands = model.parentModel()['bands']();
                    const position = bands.indexOf(model);
                    target = this._findFistAvailableBand(bands, position - 1);
                }
                if (target) {
                    this._setDisabled(false);
                    this.itemsProvider.path(ReportExplorerModel.getPathByMember(target));
                }
                else {
                    this.itemsProvider.path('');
                    this._setDisabled(true);
                }
            }
        }));
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/expressioneditor/reportExpressionEditor.js



class ReportExpressionEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this.popupVisible = external_ko_namespaceObject.observable(false);
    }
    patchOptions(reportExplorerProvider, editableObject) {
        if (!this._adapter) {
            this._adapter = new ReportExpressionEditorAdapter(this._get('values', 'wrapped'), this.value);
            this._disposables.push(this._adapter);
        }
        return this._adapter.patchOptions(reportExplorerProvider, editableObject);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/expressioneditor/reportComplexExpressionEditor.js



class ReportComplexExpressionEditor extends ReportExpressionEditor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this.editorTemplateName = 'dxrd-reportexpression-ellipsis';
        this.wrapper = new ReportExpressionEditorWrapper(external_ko_namespaceObject.observable(), this.value);
        this.popupVisible = this.wrapper.popupVisible;
        this._disposables.push(this.wrapper);
    }
    showPopup(editableObject) {
        this.wrapper.control(editableObject);
        this.popupVisible(true);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/expressionableFontEditor.js




class ExpressionableFontEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.FontEditor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    createObjectProperties() {
        const model = new ExpressionableFontModel(this.value, this._get('_model', 'wrapped'));
        this._disposables.push(model);
        return new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(external_ko_namespaceObject.observable(model), {
            editors: expressionableFontInfo
        }, this.level + 1, this._get('disabled', 'wrapped'), undefined, this.textToSearch);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/fieldsComboboxEditor.js



class FieldsComboboxEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor {
    constructor() {
        super(...arguments);
        this.wrappedValues = null;
    }
    _createItem(displayNameProvider, item) {
        const deferred = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        displayNameProvider.getDisplayNameByPath(this.path(), item).done((result) => {
            deferred.resolve({ value: item, displayValue: result });
        }).fail(() => {
            deferred.resolve({ value: item, displayValue: item });
        });
        return deferred;
    }
    _updateValues(values, displayNameProvider) {
        this.wrappedValues(values);
        external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred.when(values.map(x => this._createItem(displayNameProvider, x.value))).done((results) => {
            this.wrappedValues(results);
        });
    }
    wrapValues(displayNameProvider) {
        if (!this.wrappedValues) {
            this.wrappedValues = external_ko_namespaceObject.observableArray();
            this.addDisposable(this.subscribeProperty('values', (newVal) => {
                this._updateValues(newVal, displayNameProvider());
            }));
            this._updateValues(this._get('values'), displayNameProvider());
        }
        return this.wrappedValues;
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/formatStringEditor.js



class FormatStringEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    get actions() { return FormatStringService.actions; }
    get customPatterns() { return formatStringEditorCustomSet(); }
}

;// ./node_modules/devexpress-reporting/designer/widgets/formattingRuleEditor.js



class FormattingRuleEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        const rules = external_ko_namespaceObject.pureComputed(() => {
            const model = this._get('_model');
            const formattingRuleSheet = model && model['root'] && model['root'].formattingRuleSheet || external_ko_namespaceObject.observableArray();
            formattingRuleSheet().forEach((rule) => {
                this._disposables.push(rule.selected = external_ko_namespaceObject.pureComputed({
                    read: () => {
                        return this.value()().filter((link) => { return link.value() === rule; }).length > 0;
                    },
                    write: (val) => {
                        if (val) {
                            this.value().push(FormattingRuleLink.createNew(rule));
                        }
                        else {
                            const link = this.value()().filter((itemLink) => { return itemLink.value() === rule; })[0];
                            this.value().remove(link);
                        }
                    }
                }));
            });
            return formattingRuleSheet;
        });
        this._disposables.push(rules);
        this.options = {
            addHandler: () => { return FormattingRule.createNew(this._get('_model')['root']); },
            values: rules,
            displayName: this._get('displayName'),
            level: this.level,
            info: this._get('info', 'wrapped')
        };
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/gaugeStyleEditor.js



class GaugeStyleEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, 0, parentDisabled, textToSearch);
        this._viewModel = external_ko_namespaceObject.observable();
        this.viewmodel = {
            items: external_ko_namespaceObject.pureComputed(() => {
                if (this._viewModel() && this._viewModel().viewType) {
                    return this._viewModel().viewType() === 'Circular' ? circularValues : linearValues;
                }
                else {
                    return [];
                }
            })
        };
        this._disposables.push(this.viewmodel.items);
    }
    update(viewModel) {
        super.update(viewModel);
        this._viewModel(viewModel);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/imageSourceEditor.js




class dxImageSourceEditor extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.dxFileImagePicker {
    constructor(element, options) {
        options.placeholderId = options.placeholderId || 'Image';
        super(element, options);
    }
    _toggleReadOnlyState() {
        super['_toggleReadOnlyState'].apply(this);
        (0,external_DevExpress_Analytics_Internal_namespaceObject.$unwrap)(this['_input']()).setAttribute('readonly', 'true');
    }
    _handleResult(result) {
        let format = result.format.toLowerCase();
        if (format !== 'svg' && format !== 'png' && format !== 'jpg' && format !== 'jpeg')
            format = 'img';
        this.option('value', new external_DevExpress_Reporting_namespaceObject.ImageSource(format, result.content));
    }
}
external_DevExpress_registerComponent_default()('dxImageSourceEditor', dxImageSourceEditor);

;// ./node_modules/devexpress-reporting/designer/widgets/nameEditor.js







class NameEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    createViewModel() {
        return (0,external_DevExpress_Analytics_Serializer_Native_namespaceObject.createViewModelGenerator)(super.createViewModel())
            .generateProperty('generateRules', (controls) => this.generateRules(controls))
            .getViewModel();
    }
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.currentValidationRules = external_ko_namespaceObject.observable(super._getEditorValidationRules());
    }
    _getEditorValidationRules() {
        return this.currentValidationRules();
    }
    _filterControls(controls) {
        return controls.filter(x => !(x instanceof WatermarkModel));
    }
    generateRules(allControls) {
        const self = this;
        if (self._get('disabled'))
            return [];
        const notUniqueMessageTemplate = (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('{0} is not unique', 'ASPxReportsStringId.ReportDesigner_NameUniqueError');
        const validationMessage = (0,external_DevExpress_Analytics_Internal_namespaceObject.formatUnicorn)(notUniqueMessageTemplate, external_ko_namespaceObject.unwrap(self.displayName));
        this.currentValidationRules([
            {
                type: 'custom',
                message: validationMessage,
                validationCallback: (options) => {
                    if (options.value == null)
                        return false;
                    const model = self._get('_model');
                    const controls = this._filterControls(allControls());
                    return controls.filter(x => {
                        if (external_ko_namespaceObject.unwrap(x.name).toLowerCase() !== options.value.toLowerCase())
                            return false;
                        if (!model || x === model)
                            return false;
                        const same = model['isSame'];
                        if (same && (0,external_DevExpress_Analytics_Internal_namespaceObject.isFunction)(same) && same(x))
                            return false;
                        return true;
                    }).length === 0;
                }
            },
            ...super._getEditorValidationRules(),
            ...external_DevExpress_Analytics_Widgets_Internal_namespaceObject.requiredValidationRules
        ]);
        return this.currentValidationRules();
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/watermarkIdEditor.js


class WatermarkIdEditor extends NameEditor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    _filterControls(allControls) {
        return allControls.filter(x => x instanceof WatermarkModel);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/pivotGridCriteriaEditor.js





class PivotGridCriteriaEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    _createItemsProvider(fieldListProvider) {
        return {
            getItems: (pathRequest) => {
                const model = this._get('_model', 'peek');
                if (!model || pathRequest.fullPath.indexOf(Parameter.ParametersRefString) === 0)
                    return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve().promise();
                const pivot = model['parent'];
                const result = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
                const fullPath = new external_DevExpress_Analytics_Utils_namespaceObject.PathRequest((0,external_DevExpress_Analytics_Internal_namespaceObject.getFullPath)(pivot.getPath(''), pivot.dataMember()));
                external_ko_namespaceObject.unwrap(fieldListProvider).getItems(fullPath).done((dataSourceItems) => {
                    const items = [], fields = pivot.fields();
                    for (let i = 0; i < fields.length; i++) {
                        const field = fields[i];
                        if (field.area() === 'DataArea') {
                            continue;
                        }
                        const dataMemberInfo = dataSourceItems.filter((item) => { return item.name === field.fieldName(); })[0];
                        items.push({
                            displayName: field.getDisplayName(),
                            isList: false,
                            name: field.name(),
                            specifics: dataMemberInfo && dataMemberInfo.specifics.toLowerCase() || 'integer'
                        });
                    }
                    result.resolve(items);
                });
                return result.promise();
            }
        };
    }
    _getFieldName(name, isRealName = false) {
        const model = this._get('_model', 'peek');
        if (!model)
            return new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred().resolve().promise();
        const pivot = model['parent'];
        const field = (0,external_DevExpress_Analytics_Internal_namespaceObject.find)(pivot.fields.peek(), f => (isRealName ? (f.getDisplayName() || name) : f.name()) === name);
        const def = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        if (!field)
            def.reject();
        else
            def.resolve(isRealName ? field.name() : field.getDisplayName());
        return def.promise();
    }
    _createDisplayNameProvider() {
        return {
            getDisplayNameByPath: (path, name) => {
                return this._getFieldName(name);
            },
            getRealName: (path, name) => {
                return this._getFieldName(name, true);
            }
        };
    }
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    wrapModel(fieldListProvider) {
        if (!this.itemsProvider) {
            this.itemsProvider = this._createItemsProvider(fieldListProvider);
            this.displayNameProvider = this._createDisplayNameProvider();
        }
        return this;
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/propertyGridEditors.js









class ContentByTypeEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.PropertyGridEditor {
    createObjectProperties() {
        return new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(this._getViewModel(), undefined, this.level + 1, this._get('disabled', 'wrapped'), undefined, this.textToSearch);
    }
    _getViewModel() {
        this.hideCollapsingButton = external_ko_namespaceObject.observable();
        const value = external_ko_namespaceObject.computed(() => {
            const content = this.value() && this.value().content();
            const visibleItems = content?.getInfo && content?.getInfo().filter(x => !!x.editor);
            this.hideCollapsingButton(!visibleItems?.length);
            return this.value() && this.value().content();
        });
        this._disposables.push(value);
        return value;
    }
}
class DataBindingsEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.PropertyGridEditor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    createObjectProperties() {
        const model = external_ko_namespaceObject.pureComputed(() => {
            const obj = {};
            obj.isPropertyModified = (name) => {
                return !obj[name].isEmpty();
            };
            obj.actions = [{
                    action: (propertyName) => { obj[propertyName].resetValue(); },
                    title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Reset', 'AnalyticsCoreStringId.PropertyGrid_PopupMenu_Reset'),
                    visible: () => { return true; }
                }];
            const databindings = this.value()();
            (databindings || []).map((value) => { obj[value.propertyName()] = value; });
            return obj;
        });
        this._disposables.push(model);
        return new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(model, { editors: dataBindingsSerializationInfo }, this.level + 1, this._get('disabled', 'wrapped'), undefined, this.textToSearch);
    }
}
class DataBindingEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.FieldListEditor {
    get actions() { return FormatStringService.actions; }
    get customPatterns() { return formatStringEditorCustomSet(); }
}
class FontEditorUndo extends external_DevExpress_Analytics_Widgets_namespaceObject.PropertyGridEditor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    generateValue(undoEngine) {
        this.undoEngine = undoEngine;
        return this.viewmodel;
    }
    createObjectProperties() {
        const undoValue = external_ko_namespaceObject.computed({
            read: () => {
                return this.value();
            },
            write: (val) => {
                this.undoEngine && this.undoEngine().start();
                this.value(val);
                this.undoEngine && this.undoEngine().end();
            }
        });
        this._disposables.push(undoValue);
        const model = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel(undoValue);
        this._disposables.push(model);
        return new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(external_ko_namespaceObject.observable(model), { editors: external_DevExpress_Analytics_Widgets_Metadata_namespaceObject.fontInfo }, this.level + 1, this._get('disabled', 'wrapped'), undefined, this.textToSearch);
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/reportUrlEditor.js





class ReportUrlEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    _initUrls(urls, tab) {
        if (!this.urls) {
            if (reportStorageWebIsRegister()) {
                this.urls = urls;
                this.updateUrls();
            }
            else {
                this.urls = external_ko_namespaceObject.computed(() => {
                    return tab() ? (urls() || []).filter(x => x.Key !== tab().url()) : urls();
                });
                this._disposables.push(this.urls);
            }
        }
    }
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    getValues(urls, tab) {
        if (!this.dataSource) {
            this._initUrls(urls, tab);
            this._disposables.push(this.dataSource = external_ko_namespaceObject.computed(() => {
                const dataSource = new (external_DevExpress_data_DataSource_default())({
                    store: this.urls(),
                    paginate: true,
                    filter: (url) => { return url.Key !== tab().url(); },
                    pageSize: 100
                });
                return dataSource;
            }));
        }
        return this.dataSource;
    }
    updateUrls() {
        if (reportStorageWebIsRegister()) {
            ReportStorageWeb.getUrls().done((result) => { this.urls(result); });
        }
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/richTextFileEditor.js


class dxRichTextFileEditor extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.dxFileImagePicker {
    constructor(element, options) {
        super(element, options);
    }
    _handleResult(result) {
        this.option('value', result);
    }
}
external_DevExpress_registerComponent_default()('dxRichTextFileEditor', dxRichTextFileEditor);

;// ./node_modules/devexpress-reporting/designer/widgets/_summaryEditor.js










class SummaryEditorPopup {
    constructor() {
        this.model = external_ko_namespaceObject.observable(null);
        this.grid = new external_DevExpress_Analytics_Widgets_namespaceObject.ObjectProperties(this.model);
        this.visible = external_ko_namespaceObject.observable(false);
        this.isValid = external_ko_namespaceObject.computed(() => this.model() && (!this.model().calculate.isValid() || !this.model().weight.isValid()));
        this.container = (element) => (0,external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer)(element);
        this.buttons = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Apply', ''), type: 'default', stylingMode: 'contained', onClick: () => {
                        this.model().applyChanges();
                        this.visible(false);
                    },
                    disabled: this.isValid
                }
            },
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), type: 'normal', stylingMode: 'contained', onClick: () => {
                        this.visible(false);
                    }
                }
            }
        ];
    }
    dispose() {
        this.buttons = [];
        this.grid.dispose();
        this.model(null);
        this.isValid.dispose();
    }
}
class SummaryEditorModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    dispose() {
        super.dispose();
        this._control = null;
        this._summary = null;
    }
    _initExpressionValues() {
        const textBinding = this._control.getExpressionBinding('Text');
        if (!textBinding)
            return;
        let leftPart = textBinding;
        try {
            const expression = external_DevExpress_Analytics_Criteria_Utils_namespaceObject.CriteriaOperatorStateMachine.parse(textBinding);
            if (expression instanceof external_DevExpress_Analytics_Criteria_namespaceObject.FunctionOperator && this._summaryFunctionValues.some(x => x.value === expression.displayType)) {
                const serializer = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FilterEditorSerializer();
                this.Func(expression.displayType);
                leftPart = expression.leftPart && serializer.serialize(expression.leftPart);
                this.weight.value(this.Func() === 'sumWAvg' ? expression.rightPart[0] && serializer.serialize(expression.rightPart[0]) : '');
            }
        }
        catch (e) {
            (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)(e.message);
        }
        this.calculate.value(leftPart);
    }
    getInfo() {
        return this._info;
    }
    constructor(_control) {
        super();
        this._control = _control;
        this._order = ['Running', 'Func', 'calculate', 'weight', 'ignoreNullValues', 'treatStringsAsNumerics'];
        this._summaryFunctionValues = getSummaryFunctionValues().map(x => {
            return {
                value: 'sum' + x.value,
                displayValue: x.displayValue,
                localizationId: x.localizationId
            };
        }).concat([{ value: 'sumWAvg', displayValue: 'Weighted average', localizationId: 'ReportStringId.WAvgDisplayName' }]);
        this._info = createSummarySerializationInfo(this._summaryFunctionValues).concat([
            { propertyName: 'calculate', editor: designerEditorTemplates.getEditor('reportexpression'), displayName: 'Argument Expression', localizationId: 'ASPxReportsStringId.ReportDesigner_SummaryEditor_ArgumentExpression' },
            { propertyName: 'weight', editor: designerEditorTemplates.getEditor('reportexpression'), displayName: 'Weight', localizationId: 'ASPxReportsStringId.ReportDesigner_SummaryEditor_Weight' }
        ]).sort((a, b) => this._order.indexOf(a.propertyName) - this._order.indexOf(b.propertyName));
        this.Func = external_ko_namespaceObject.observable('sumSum');
        this._disposables.push(this.calculate = new WrappedExpressionOptions({ value: external_ko_namespaceObject.observable('') }));
        this._disposables.push(this.weight = new WrappedExpressionOptions({ value: external_ko_namespaceObject.observable('') }));
        this._summary = this._control['Summary'];
        const ignoreNullValues = this._info.filter(info => info.propertyName === 'ignoreNullValues')[0];
        this.patchSerializationInfo(ignoreNullValues);
        ignoreNullValues.editorOptions.elementAttr = { class: 'dxrd-first-checkbox' };
        this.patchSerializationInfo(this._info.filter(info => info.propertyName === 'treatStringsAsNumerics')[0]);
        this._initExpressionValues();
        this.ignoreNullValues = external_ko_namespaceObject.observable(this._summary.ignoreNullValues());
        this.treatStringsAsNumerics = external_ko_namespaceObject.observable(this._summary.treatStringsAsNumerics());
        this.Running = external_ko_namespaceObject.observable(this._summary.Running());
        this._disposables.push(this.calculate.path = external_ko_namespaceObject.computed(() => this._control.getPath('expression')));
        this._disposables.push(this.weight.path = external_ko_namespaceObject.computed(() => this._control.getPath('expression')));
    }
    patchSerializationInfo(info) {
        const displayName = info.displayName;
        const localizationId = info.localizationId;
        info.editorOptions = {
            text: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)(displayName, localizationId)
        };
        info.displayName = undefined;
        info.localizationId = undefined;
    }
    applyChanges() {
        const undoEngine = external_DevExpress_Analytics_Utils_namespaceObject.UndoEngine.tryGetUndoEngine(this._control);
        undoEngine && undoEngine.start();
        let result = '';
        this._summary.Running(this.Running());
        if (this.isDisabled()) {
            result = this.calculate.value();
        }
        else {
            this._summary.ignoreNullValues(this.ignoreNullValues());
            this._summary.treatStringsAsNumerics(this.treatStringsAsNumerics());
            result = this.Func() + '(' + this.calculate.value() + (this.weight.value() ? ', ' + this.weight.value() : '') + ')';
        }
        this._control.getDefaultBinding().value(result);
        undoEngine && undoEngine.end();
    }
    isPropertyDisabled(propertyName) {
        if (this.isDisabled()) {
            return propertyName !== 'Running';
        }
        return propertyName === 'weight' && this.Func() !== 'sumWAvg';
    }
    isDisabled() { return this.Running() === 'None'; }
}

;// ./node_modules/devexpress-reporting/designer/widgets/summaryEditor.js



class SummaryEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.PropertyGridEditor {
    constructor() {
        super(...arguments);
        this.popup = new SummaryEditorPopup();
    }
    dispose() {
        super.dispose();
        this.popup.dispose();
        this.summaryModel && this.summaryModel.dispose();
    }
    getPopupServiceActions() {
        let actions = super.getPopupServiceActions();
        actions = actions && actions.length > 0 ? [].concat([{
                action: () => {
                    this.summaryModel && this.summaryModel.dispose();
                    const model = this._get('_model');
                    this.summaryModel = new SummaryEditorModel(model['getModel'] && model['getModel']() || model);
                    this.popup.model(this.summaryModel);
                    this.popup.visible(true);
                },
                title: 'Run Editor',
                visible: (propertyName) => {
                    const _model = this._get('_model');
                    const model = _model && _model['getModel'] && _model['getModel']() || _model;
                    return this._get('visible') && model && model['dataBindingMode'] !== _dataBindingMode_DataBindingMode.Bindings;
                }
            }], actions) : [];
        return actions;
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/undoEditors.js


class ComboboxUndoEditor extends external_DevExpress_Analytics_Widgets_namespaceObject.Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    generateValue(undoEngine) {
        if (!this.undoValue) {
            this._disposables.push(this.undoValue = external_ko_namespaceObject.computed({
                read: () => {
                    return this.value();
                },
                write: (val) => {
                    undoEngine().start();
                    this.value(val);
                    undoEngine().end();
                }
            }));
        }
        return this.undoValue;
    }
}

;// ./node_modules/devexpress-reporting/designer/widgets/registerEditors.js























function registerEditors() {
    designerEditorTemplates.registerEditors({
        formatEditor: { header: 'dxrd-formatstring', editorType: FormatStringEditor },
        dataSource: { header: 'dxrd-datasource', editorType: DataSourceEditor },
        dataBindings: { header: 'dxrd-dataBindings', content: 'dxrd-dataBindingsContent', editorType: DataBindingsEditor },
        dataBinding: { header: 'dxrd-dataBinding', content: 'dxrd-dataBindingContent', editorType: DataBindingEditor },
        reportExplorer: { header: 'dxrd-reportexplorer-editor', editorType: ExplorerEditor },
        reportSourceUrl: { header: 'dxrd-reportSourceUrl', editorType: ReportUrlEditor },
        bands: { header: 'dxrd-bands', editorType: BandsEditor },
        runningBand: { header: 'dxrd-bands', editorType: RunningBandEditor },
        sortingBand: { header: 'dxrd-bands', content: 'dx-objectEditorContent', editorType: SortingBandEditor },
        style: { header: 'dxrd-style', content: 'dxrd-styleContent' },
        stylePriority: { header: 'dxrd-stylePriority' },
        contentByType: { header: 'dxrd-content-type', content: 'dx-objectEditorContent', editorType: ContentByTypeEditor },
        lookUpValues: { custom: 'dxrd-lookUpValues' },
        reportexpression: { header: 'dxrd-reportexpression', editorType: ReportExpressionEditor },
        reportexpressionComplex: { header: 'dxrd-reportexpression-complex', editorType: ReportComplexExpressionEditor },
        drillDownControls: { header: 'dxrd-reportexplorer-editor', editorType: DrillDownEditor },
        pivotGridFields: { custom: 'dxrd-pivotGridFields' },
        scriptsBox: { header: 'dxrd-scriptsbox' },
        formattingRule: { custom: 'dxrd-formattingRuleCollection', editorType: FormattingRuleEditor },
        toclevel: { custom: 'dxrd-levelCollection' },
        calculatedFields: { custom: 'dxrd-calculatedFields' },
        watermarks: { custom: 'dxrd-watermarks' },
        parameters: { custom: 'dxrd-parameters' },
        reportRtlProperty: { header: 'dxrd-reportRtlProperty' },
        comboboxUndo: { header: 'dx-combobox-undo', editorType: ComboboxUndoEditor },
        comboboxPageBreak: { header: 'dx-combobox', editorType: PageBreakBandEditor },
        fontUndo: { header: 'dx-emptyHeader', content: 'dx-objectEditorContentUndo', editorType: FontEditorUndo },
        chartValueBinding: { header: 'dxrd-chartValueBinding', editorType: ChartValueBindingEditor },
        name: { header: 'dxrd-name', editorType: NameEditor },
        watermarkId: { header: 'dxrd-name', editorType: WatermarkIdEditor },
        bandLevel: { header: 'dx-numeric-undo', editorType: BandLevelEditor },
        pivotCriteria: { header: 'dxrd-pivotcriteria', editorType: PivotGridCriteriaEditor },
        fieldsCombobox: { header: 'dxrd-fields-combobox', editorType: FieldsComboboxEditor },
        richTextLoad: { header: 'dxrd-richtext-loadfile', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.Editor },
        summaryEditor: { header: 'dxrd-summaryeditor-header', content: 'dxrd-objectEditorContent', editorType: SummaryEditor },
        expressionableFont: { header: 'dx-emptyHeader', content: 'dx-objectEditorContent', editorType: ExpressionableFontEditor },
        fontModificatorsHighlightable: { custom: 'dx-modificators-highlightable' },
        parametersCheckbox: { custom: 'dxrd-parameters-checkbox' },
        dataSourceSelectBox: { header: 'dxrd-datasource-combobox', editorType: DataSourceSelectBox },
        localizationSelectBox: { header: 'dxrd-localization-combobox', editorType: DataSourceSelectBox },
        pdfContentLoad: { header: 'dxrd-pdfcontent-loadfile', editorType: external_DevExpress_Analytics_Widgets_namespaceObject.Editor },
        viewStyle: { header: 'dxrd-viewStyle', editorType: GaugeStyleEditor }
    });
    editorTemplates.getEditor('dataMemberChart').header = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('dataMember').header;
    editorTemplates.getEditor('fieldChart').header = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field').header;
    editorTemplates.getEditor('valueDataMember').header = external_DevExpress_Analytics_Widgets_namespaceObject.editorTemplates.getEditor('field').header;
}

;// ./node_modules/devexpress-reporting/scopes/reporting-designer-widgets.js
































registerEditors();
































;// ./node_modules/devexpress-reporting/scopes/reporting-designer-widgets-internal.js



;// ./node_modules/devexpress-reporting/scopes/reporting-designer-wizard.js



























































































;// ./node_modules/devexpress-reporting/bundle/_add-designer-to-bundle.js





























function _addDesignerToBundle(bundle) {
    bundle.Reporting = bundle.Reporting || {};
    bundle.Reporting.Designer = reporting_designer_namespaceObject;
    bundle.Reporting.Chart = {};
    bundle.Reporting.Chart.Internal = reporting_chart_internal_namespaceObject;
    bundle.Reporting.Chart.Internal.Axis = reporting_chart_internal_axis_namespaceObject;
    bundle.Reporting.Chart.Internal.DataMembers = reporting_chart_internal_dataMembers_namespaceObject;
    bundle.Reporting.Chart.Internal.Models = reporting_chart_internal_models_namespaceObject;
    bundle.Reporting.Chart.Internal.Series = reporting_chart_internal_series_namespaceObject;
    bundle.Reporting.Chart.Internal.Series.Metadata = reporting_chart_internal_series_metadata_namespaceObject;
    bundle.Reporting.Chart.Internal.Widgets = reporting_chart_internal_widgets_namespaceObject;
    bundle.Reporting.Designer.Actions = reporting_designer_actions_namespaceObject;
    bundle.Reporting.Designer.Bands = reporting_designer_bands_namespaceObject;
    bundle.Reporting.Designer.Bands.Internal = reporting_designer_bands_internal_namespaceObject;
    bundle.Reporting.Designer.Bands.Metadata = reporting_designer_bands_metadata_namespaceObject;
    bundle.Reporting.Designer.Controls = reporting_designer_controls_namespaceObject;
    bundle.Reporting.Designer.Controls.Metadata = reporting_designer_controls_metadata_namespaceObject;
    bundle.Reporting.Designer.Controls.PivotGrid = reporting_designer_controls_pivotGrid_namespaceObject;
    bundle.Reporting.Designer.Controls.PivotGrid.Metadata = reporting_designer_controls_pivotGrid_metadata_namespaceObject;
    bundle.Reporting.Designer.Controls.CrossTab = reporting_designer_controls_crossTab_namespaceObject;
    bundle.Reporting.Designer.Controls.CrossTabMetaData = reporting_designer_controls_crossTab_metadata_namespaceObject;
    bundle.Reporting.Designer.Data = reporting_designer_data_namespaceObject;
    bundle.Reporting.Designer.Data.Metadata = reporting_designer_data_metadata_namespaceObject;
    bundle.Reporting.Designer.Internal = reporting_designer_internal_namespaceObject;
    bundle.Reporting.Designer.Internal.HtmlMarkUp = reporting_designer_internal_htmlMarkUp_namespaceObject;
    bundle.Reporting.Designer.Localization = reporting_designer_localization_namespaceObject;
    bundle.Reporting.Designer.Tools = reporting_designer_tools_namespaceObject;
    bundle.Reporting.Designer.Utils = reporting_designer_utils_namespaceObject;
    bundle.Reporting.Designer.Widgets = reporting_designer_widgets_namespaceObject;
    bundle.Reporting.Designer.Widgets.Internal = reporting_designer_widgets_internal_namespaceObject;
    bundle.Reporting.Designer.Wizard = reporting_designer_wizard_namespaceObject;
    bundle.Reporting.Designer.Settings = reporting_designer_settings_namespaceObject;
    return bundle;
}

;// ./node_modules/devexpress-reporting/dx-rich-edit-bindings.js

(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css: className', function ($context, $element) { return { 'css': function () { return $context.$data.className; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxPopover: { width: \'auto\', height: \'auto\', position: { my: \'right center\', at: \'left center\', boundary: \'.dxrd-designer-wrapper\', of: getPositionTarget($element), collision: \'flip fit\', offset: \'-10 0\' }, container: getPopupContainer($element), onContentReady: onContentReady, hideOnOutsideClick: hideOnOutsideClick, closeOnTargetScroll: false, showTitle: false, target: getPositionTarget($element), showCloseButton: false, shading: false, visible: visible, animation: {} }', function ($context, $element) { return { 'dxPopover': function () { return { 'width': 'auto', 'height': 'auto', 'position': { 'my': 'right center', 'at': 'left center', 'boundary': '.dxrd-designer-wrapper', 'of': $context.$data.getPositionTarget($element), 'collision': 'flip fit', 'offset': '-10 0' }, 'container': $context.$data.getPopupContainer($element), 'onContentReady': $context.$data.onContentReady, 'hideOnOutsideClick': $context.$data.hideOnOutsideClick, 'closeOnTargetScroll': false, 'showTitle': false, 'target': $context.$data.getPositionTarget($element), 'showCloseButton': false, 'shading': false, 'visible': $context.$data.visible, 'animation': {} }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: $data.showTitle();', function ($context, $element) { return { 'text': function () { return $context.$data.showTitle(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButtonGroup:{ items: items, keyExpr: itemKey, selectedItems: selectedItems, selectionMode: selectionMode, stylingMode: \'text\', focusStateEnabled: false}', function ($context, $element) { return { 'dxButtonGroup': function () { return { 'items': $context.$data.items, 'keyExpr': $context.$data.itemKey, 'selectedItems': $context.$data.selectedItems, 'selectionMode': $context.$data.selectionMode, 'stylingMode': 'text', 'focusStateEnabled': false }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxButton: { onClick: $data.clickAction, icon: $data.icon, hint: $data.hint, stylingMode: \'text\', focusStateEnabled: false }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.clickAction, 'icon': $context.$data.icon, 'hint': $context.$data.hint, 'stylingMode': 'text', 'focusStateEnabled': false }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxColorBox: { value: value, popupPosition: { collision: \'flipfit flipfit\' }, focusStateEnabled: false }', function ($context, $element) { return { 'dxColorBox': function () { return { 'value': $context.$data.value, 'popupPosition': { 'collision': 'flipfit flipfit' }, 'focusStateEnabled': false }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('dxLocalizedSelectBox: { dataSource: items, value: value, focusStateEnabled: false, searchEnabled: !supportCustomValue, displayCustomValue: true,  acceptCustomValue: supportCustomValue, openOnFieldClick: !supportCustomValue }, dxValidator: { validationRules: validationRules }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.items, 'value': $context.$data.value, 'focusStateEnabled': false, 'searchEnabled': !$context.$data.supportCustomValue, 'displayCustomValue': true, 'acceptCustomValue': $context.$data.supportCustomValue, 'openOnFieldClick': !$context.$data.supportCustomValue }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('with: getToolbar()', function ($context, $element) { return { 'with': function () { return $context.$data.getToolbar(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: template, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: componentCollection', function ($context, $element) { return { 'foreach': function () { return $context.$data.componentCollection; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('template: { name: $data.template, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $index() !== 0', function ($context, $element) { return { 'if': function () { return $context.$index() !== 0; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: $data.showTitle()', function ($context, $element) { return { 'if': function () { return $context.$data.showTitle(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('foreach: { data: $data.items }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.items }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('css:{ \'dxrd-intersect\': !isValid() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-intersect': !$context.$data.isValid() }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { display: isValid()? \'inline\' : \'none\' }', function ($context, $element) { return { 'style': function () { return { 'display': $context.$data.isValid() ? 'inline' : 'none' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('text: \'Document is not valid\'', function ($context, $element) { return { 'text': function () { return 'Document is not valid'; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: !isValid()', function ($context, $element) { return { 'if': function () { return !$context.$data.isValid(); } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('event: { dblclick: function() { $root.richInlineControl.show($element) } }, visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$root.richInlineControl.show($element); } }; }, 'visible': function () { return $context.$data.selected() || $context.$data.focused(); }, 'css': function () { return { 'dxrd-selected dxrd-context-menu-container': $context.$data.selected, 'dxrd-focused': $context.$data.focused, 'dxrd-intersect': $context.$data.isIntersect, 'dxrd-locked': $context.$data.locked }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('style: { \'backgroundColor\': $root.richInlineControl.visible() && selected() ? \'#FFF\' : \'transparent\' }', function ($context, $element) { return { 'style': function () { return { 'backgroundColor': $context.$root.richInlineControl.visible() && $context.$data.selected() ? '#FFF' : 'transparent' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: position, trackCursor: underCursor, style:{ pointerEvents: $root.richInlineControl.visible() && selected() ? \'auto\' : \'none\'  }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'pointerEvents': $context.$root.richInlineControl.visible() && $context.$data.selected() ? 'auto' : 'none' }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('styleunit: defaultStyleunit', function ($context, $element) { return { 'styleunit': function () { return $context.$data.defaultStyleunit; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('zoom: _context.zoom(), styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }, dxRichSurface: { inlineEdit: $root.richInlineControl }', function ($context, $element) { return { 'zoom': function () { return $context.$data._context.zoom(); }, 'styleunit': function () { return { 'height': $context.$data.contentHeightWithoutZoom, 'width': $context.$data.contentWidthWithoutZoom }; }, 'dxRichSurface': function () { return { 'inlineEdit': $context.$root.richInlineControl }; } }; });
(0,external_DevExpress_Analytics_Widgets_Internal_namespaceObject.addToBindingsCache)('if: selected()', function ($context, $element) { return { 'if': function () { return $context.$data.selected(); } }; });

;// ./node_modules/devexpress-reporting/dx-rich-edit-templates.js

external_DevExpress_Analytics_Widgets_Internal_namespaceObject.SvgTemplatesEngine.addTemplates({
    'dxrd-rich-edit': '<div class="dxrd-width-100 dxrd-height-100" data-bind="css: className"> <div data-bind="visible: visible"> <!-- ko with: getToolbar() --> <!-- ko template: { name: template, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrd-richedit-toolbar': '<div class="dxrd-z-index-0 dxrd-position-absolute" data-bind="dxPopover: { width: \'auto\', height: \'auto\', position: { my: \'right center\', at: \'left center\', boundary: \'.dxrd-designer-wrapper\', of: getPositionTarget($element), collision: \'flip fit\', offset: \'-10 0\' }, container: getPopupContainer($element), onContentReady: onContentReady, hideOnOutsideClick: hideOnOutsideClick, closeOnTargetScroll: false, showTitle: false, target: getPositionTarget($element), showCloseButton: false, shading: false, visible: visible, animation: {} }"> <div class="dxrd-rich-toolbar-popover-content"> <!-- ko foreach: componentCollection --> <!-- ko if: $data.visible --> <!-- ko template: { name: $data.template, data: $data } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrd-rich-edit-toolbar-component-collection': '<div class="dxrd-toolbar-elements-line"> <!-- ko if: $index() !== 0 --> <div class="dxrd-toolbar-elements-line-bottom dxd-border-secondary"></div> <!-- /ko --> <!-- ko if: $data.showTitle() --> <div class="dxrd-rich-toolbar-header" data-bind="text: $data.showTitle();"></div> <!-- /ko --> <div class="dxrd-rich-toolbar-value"> <!-- ko foreach: { data: $data.items } --> <!-- ko if: $data.visible --> <!-- ko template: { name: $data.template, data: $data } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrd-rich-edit-toolbar-button-group': '<div data-bind="dxButtonGroup:{ items: items, keyExpr: itemKey, selectedItems: selectedItems, selectionMode: selectionMode, stylingMode: \'text\', focusStateEnabled: false}"></div>',
    'dxrd-button-with-template': '<div data-bind="dxButton: { onClick: $data.clickAction, icon: $data.icon, hint: $data.hint, stylingMode: \'text\', focusStateEnabled: false }"></div>',
    'dxrd-richEdit-toolbar-colorpicker': '<div data-bind="dxColorBox: { value: value, popupPosition: { collision: \'flipfit flipfit\' }, focusStateEnabled: false }"></div>',
    'dxrd-rich-toolbar-combobox': '<div data-bind="dxLocalizedSelectBox: { dataSource: items, value: value, focusStateEnabled: false, searchEnabled: !supportCustomValue, displayCustomValue: true,  acceptCustomValue: supportCustomValue, openOnFieldClick: !supportCustomValue }, dxValidator: { validationRules: validationRules }"></div>',
    'dxrd-richedit-content': '<div data-bind="css:{ \'dxrd-intersect\': !isValid() }" class="dxrd-box-sizing-border-box dxrd-letter-spacing-normal dxrd-width-100 dxrd-height-100"> <div data-bind="style: { display: isValid()? \'inline\' : \'none\' }"> <div  class="dxrd-control-content dxrd-richedit-readonly dxrd-width-100 dxrd-height-100 dxrd-vertical-align-top" data-bind="style: contentCss"></div> </div> <!-- ko if: !isValid() --> <div data-bind="text: \'Document is not valid\'"></div> <!-- /ko --></div>',
    'dxrd-richedit-selection': '<div class="dxrd-control" data-bind="event: { dblclick: function() { $root.richInlineControl.show($element) } }, visible: selected() || focused(), css: {\'dxrd-selected dxrd-context-menu-container\': selected, \'dxrd-focused\': focused, \'dxrd-intersect\': isIntersect, \'dxrd-locked\': locked }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor"> <!-- ko if: selected() --> <div class="dxd-border-accented dxrd-control-border-box" data-bind="style: { \'backgroundColor\': $root.richInlineControl.visible() && selected() ? \'#FFF\' : \'transparent\' }"></div> <!-- /ko --></div><div class="dxrd-control dxrd-context-menu-container" data-bind="visible: !(selected() && focused()), styleunit: position, trackCursor: underCursor, style:{ overflow: isSelected() ? \'visible\' : \'hidden\'}"> <div class="dxrd-control-content-select-main" data-bind="styleunit: { \'top\': contentSizes().top + (isIntersect() ? 1 : 0), \'left\': contentSizes().left + (isIntersect()? 1 : 0), lineHeight: contentSizes().height, height: contentSizes().height, width: contentSizes().width}"> </div></div><div class="dxrd-control dxrd-richedit-selected" data-bind="styleunit: position, trackCursor: underCursor, style:{ pointerEvents: $root.richInlineControl.visible() && selected() ? \'auto\' : \'none\'  }"> <div class="dxrd-control-content-main" data-bind="styleunit: defaultStyleunit"> <div class="dxrd-richedit-selected-content" data-bind="zoom: _context.zoom(), styleunit: { \'height\': contentHeightWithoutZoom, \'width\': contentWidthWithoutZoom }, dxRichSurface: { inlineEdit: $root.richInlineControl }"> </div> </div></div>'
});

;// ./node_modules/devexpress-reporting/rich-edit/customizeToolbarActions.js


const ToolbarActionId = {
    ParagraphAlignmentButtonGroup: 'dxxrta-buttongroup-paragraph-alignment',
    HyperlinkButton: 'dxxrta-button-hyperlink',
    ClearFormattingButton: 'dxxrta-button-clear-formatting',
    FontStyleButtonGroup: 'dxxrta-buttongroup-toggle-font',
    ToggleCaseButton: 'dxxrta-button-text-case',
    FontSizeComboBox: 'dxxrta-combobox-text-size',
    FontComboBox: 'dxxrta-combobox-font',
    FontColorBox: 'dxxrta-colorbox-font',
    BackgroundColorBox: 'dxxrta-colorbox-background',
};
const ToolbarGroupId = {
    AlignmentAndFormatting: 'dxxrtg-buttons-first',
    FontStyleAndCase: 'dxxrtg-buttons-second',
    FontSize: 'dxxrtg-font-size',
    Font: 'dxxrtg-font-family',
    FontColor: 'dxxrtg-text-color',
    BackgroundColor: 'dxxrtg-back-color',
};
const events = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(new external_DevExpress_Analytics_Utils_namespaceObject.EventManager());

;// external "DevExpress.RichEdit"
const external_DevExpress_RichEdit_namespaceObject = DevExpress.RichEdit;
;// ./node_modules/devexpress-reporting/rich-edit/instance.js


let richEditInstance = external_DevExpress_RichEdit_namespaceObject;
const getRichEditInstance = () => richEditInstance;
function setRichEditInstance(instance) {
    richEditInstance = instance;
}
const createRichEdit = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)((element, options) => getRichEditInstance().create(element, options));
const createRichEditOptions = (0,external_DevExpress_Analytics_Internal_namespaceObject.createGlobalModuleVariableFunc)(() => getRichEditInstance().createOptions());

;// ./node_modules/devexpress-reporting/rich-edit/utils/_utils.js
var RichAction;
(function (RichAction) {
    RichAction[RichAction["OpenDocument"] = 0] = "OpenDocument";
    RichAction[RichAction["SaveDocument"] = 1] = "SaveDocument";
    RichAction[RichAction["NewDocument"] = 2] = "NewDocument";
})(RichAction || (RichAction = {}));

;// ./node_modules/devexpress-reporting/rich-edit/utils/_loaddispatcher.js


class RichEditLoadDispatcher extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor(richEdit) {
        super();
        this.richEdit = richEdit;
    }
    process(element) {
        if (element.queueAction === RichAction.OpenDocument) {
            this.richEdit.openDocumentNative(element.base64, element.documentFormat, () => {
                element.ready();
            }, () => {
                if (element.errorCallBack)
                    element.errorCallBack();
            });
        }
        if (element.queueAction == RichAction.NewDocument) {
            this.richEdit.newDocumentNative(() => {
                element.ready();
            });
        }
        if (element.queueAction == RichAction.SaveDocument) {
            this.richEdit.saveDocumentNative(element.documentFormat, (result) => {
                if (element.documentConverted)
                    element.documentConverted(result);
            });
        }
    }
}

;// ./node_modules/devexpress-reporting/rich-edit/utils/_toolbar.js







class ComponentCommon extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _updateStateInternal(commandIdMap) {
        if (!commandIdMap || this.needUpdateState(commandIdMap))
            this.locker.lock(() => this.updateState());
    }
    _executeCommand(value, command) {
        if (this.locker.isUpdate)
            return;
        if (this.action)
            this.action(this.options.richEditPublic, value);
        else
            this.options.executeCommand(command, this.hasCustomValue() ? this.getConverter().toModel(value) : undefined, true);
        this._updateStateInternal();
    }
    executeCommand(value, command) {
        this._executeCommand(value, command);
    }
    constructor(options, info) {
        super();
        this.itemKey = 'value';
        this.locker = new external_DevExpress_Reporting_Internal_namespaceObject.Locker();
        this.options = options;
        this.value = external_ko_namespaceObject.observable();
        if (info.template)
            this.template = info.template;
        this.init(info);
    }
    unwrapItem(item) {
        return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)({}, item, { command: item.command });
    }
    getConverter() {
        return {
            toModel: (newValue) => newValue,
            fromModel: (newValue) => newValue,
        };
    }
    init(info) {
        if (info) {
            this.id = info.id;
            this.text = info.text;
            this.visible = info.visible === false ? false : true;
            if (info.action)
                this.action = info.action;
        }
    }
    hasCustomValue() {
        return false;
    }
}
class CustomComponent extends ComponentCommon {
    updateState() { }
    needUpdateState(_commandIdMap) {
        return true;
    }
}
class Component extends ComponentCommon {
    needUpdateState(commandIdMap) {
        return !!commandIdMap[this._command];
    }
    init(info) {
        super.init(info);
        this.item = this.unwrapItem(info);
        this._command = this.item.command;
        if (this._command && !this.options.richEditPublic.isDisposed) {
            const state = this.options.richEditPublic.getCommandState(this._command);
            if (state.enabled) {
                this.value(this.getConverter().fromModel(state.value));
                this.locker.lock(() => this._updateStateInternal());
            }
        }
        this._disposables.push(this.value.subscribe((value) => this._executeCommand(value, this.item.command)));
    }
    updateState() {
        if (this._command && this.hasCustomValue()) {
            const state = this.options.richEditPublic.getCommandState(this._command);
            if (state.enabled)
                this.value(this.getConverter().fromModel(state.value));
        }
    }
}
class ComponentButtonGroup extends ComponentCommon {
    constructor(options, info) {
        super(options, info);
        this.itemKey = 'command';
        this.template = this.template || 'dxrd-rich-edit-toolbar-button-group';
    }
    needUpdateState(commandIdMap) {
        return this.items.some(item => !!commandIdMap[this.getCommand(item)]);
    }
    init(info) {
        super.init(info);
        this.selectionMode = info.selectionMode || 'single';
        this.selectedItems = external_ko_namespaceObject.observableArray([]);
        this.items = info.items.map(item => this.unwrapItem(item));
        this._disposables.push(this.selectedItems.subscribe((changes) => {
            this.onSelectItems(changes);
        }, null, 'arrayChange'));
    }
    onSelectItems(changes) {
        changes.forEach((change) => {
            if (this.selectionMode === 'multiple' && change.status === 'deleted' || change.status === 'added') {
                this._executeCommand(change.value.value, change.value.command);
            }
        });
    }
    getCommand(item) {
        return item.command;
    }
    updateState() {
        const selected = [];
        this.items.forEach(item => {
            const command = this.getCommand(item);
            if (item.command === command) {
                const commandState = this.options.richEditPublic.getCommandState(command);
                if (commandState.enabled) {
                    const value = commandState.value;
                    if (!!value)
                        selected.push(item);
                }
            }
        });
        this.selectedItems(selected);
    }
}
class ComponentButton extends Component {
    constructor(options, info) {
        super(options, info);
        this.icon = info.icon;
        this.hint = info.hint;
        this.template = this.template || 'dxrd-button-with-template';
    }
    clickAction() {
        this._executeCommand(undefined, this.item.command);
    }
}
class ComponentComboBox extends Component {
    constructor(options, info) {
        super(options, info);
        this.validationRules = [];
        this.supportCustomValue = false;
        this.items = info.items;
        this.template = this.template || 'dxrd-rich-toolbar-combobox';
    }
    hasCustomValue() { return true; }
}
class ComponentFontSizeComboBox extends ComponentComboBox {
    constructor() {
        super(...arguments);
        this.validationRules = [{ type: 'numeric' }];
        this.supportCustomValue = true;
    }
}
class ComponentColorPicker extends Component {
    constructor(options, info) {
        super(options, info);
        this.template = this.template || 'dxrd-richEdit-toolbar-colorpicker';
    }
    getConverter() {
        return {
            fromModel: (newValue) => {
                switch (newValue) {
                    case 'Auto':
                    case 'NoColor':
                    case undefined:
                        return this.item.defaultValue;
                    default: {
                        const color = newValue;
                        return `rgb(${[
                            parseInt(color.substr(1, 2), 16),
                            parseInt(color.substr(3, 2), 16),
                            parseInt(color.substr(5, 2), 16)
                        ].join(', ')})`;
                    }
                }
            },
            toModel: (newValue) => newValue
        };
    }
    hasCustomValue() { return true; }
}
class ComponentCollection {
    constructor(id, title = '', visible = true, template = 'dxrd-rich-edit-toolbar-component-collection') {
        this.id = id;
        this.title = title;
        this.visible = visible;
        this.template = template;
        this.showTitle = () => this.title;
    }
}
class ToolbarSurface extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _initComponentCollection(items, options) {
        return items.map((item) => {
            const component = new ComponentCollection(item.id, item.title, item.visible, item.template);
            component.items = this._initComponents(item.items, options);
            return this._extendTemplateOptions(item, component);
        });
    }
    _initComponents(items, options) {
        return items.map((item) => {
            let component;
            switch (item.actionType) {
                case 'ButtonGroup':
                    component = new ComponentButtonGroup(options, item);
                    break;
                case 'Button':
                    component = new ComponentButton(options, item);
                    break;
                case 'ComboBox':
                    component = item.id === ToolbarActionId.FontSizeComboBox ? new ComponentFontSizeComboBox(options, item) : new ComponentComboBox(options, item);
                    break;
                case 'ColorBox':
                    component = new ComponentColorPicker(options, item);
                    break;
                default:
                    component = new CustomComponent(options, item);
            }
            return this._extendTemplateOptions(item, component);
        });
    }
    _extendTemplateOptions(item, el) {
        if (item.template)
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, {}, el, item);
        return el;
    }
    constructor(options) {
        super();
        this._popover = new external_DevExpress_Analytics_Widgets_Internal_namespaceObject.PopupComponentBase();
        this._getDefaultItems = (fonts) => {
            return [
                {
                    id: ToolbarGroupId.AlignmentAndFormatting,
                    items: [
                        {
                            id: ToolbarActionId.ParagraphAlignmentButtonGroup,
                            actionType: 'ButtonGroup',
                            selectionMode: 'single',
                            _customComponent: 'alignmentButtonGroup',
                            items: [
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleParagraphAlignmentLeft, icon: ' dxre-icon-AlignLeft', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Text Left', 'XtraRichEditStringId.MenuCmd_ParagraphAlignmentLeft') },
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleParagraphAlignmentCenter, icon: ' dxre-icon-AlignCenter', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Center', 'XtraRichEditStringId.MenuCmd_ParagraphAlignmentCenter') },
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleParagraphAlignmentRight, icon: ' dxre-icon-AlignRight', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Align Text Right', 'XtraRichEditStringId.MenuCmd_ParagraphAlignmentRight') }
                            ]
                        },
                        {
                            id: ToolbarActionId.HyperlinkButton, actionType: 'Button', command: getRichEditInstance().InsertTabCommandId.ShowHyperlinkDialog, icon: ' dxre-icon-Hyperlink', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Hyperlink...', 'XtraRichEditStringId.MenuCmd_Hyperlink'),
                        },
                        {
                            id: ToolbarActionId.ClearFormattingButton, actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ClearFormatting, icon: ' dxre-icon-ClearFormatting', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Clear Formatting', 'XtraRichEditStringId.MenuCmd_ClearFormatting')
                        }
                    ],
                },
                {
                    id: ToolbarGroupId.FontStyleAndCase,
                    items: [
                        {
                            id: ToolbarActionId.FontStyleButtonGroup,
                            actionType: 'ButtonGroup',
                            selectionMode: 'multiple',
                            items: [
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleFontBold, icon: ' dxre-icon-Bold', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Bold', 'System.Drawing.Font.Bold') },
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleFontItalic, icon: ' dxre-icon-Italic', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Italic', 'System.Drawing.Font.Italic') },
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleFontUnderline, icon: ' dxre-icon-Underline', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Underline', 'System.Drawing.Font.Underline') },
                                { actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.ToggleFontStrikeout, icon: ' dxre-icon-Strikeout', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Strikeout', 'System.Drawing.Font.Strikeout') }
                            ]
                        },
                        { id: ToolbarActionId.ToggleCaseButton, actionType: 'Button', command: getRichEditInstance().HomeTabCommandId.CapitalizationToggleCase, icon: ' dxre-icon-ChangeTextCase', hint: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('tOGGLE cASE', 'XtraRichEditStringId.MenuCmd_ToggleTextCase') }
                    ]
                },
                {
                    id: ToolbarGroupId.FontSize,
                    title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Font Size', 'XtraRichEditStringId.MenuCmd_ChangeFontSize'),
                    items: [{ id: ToolbarActionId.FontSizeComboBox, actionType: 'ComboBox', command: getRichEditInstance().HomeTabCommandId.ChangeFontSize, items: [8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 26, 28, 36, 48, 72] }],
                },
                {
                    id: ToolbarGroupId.Font,
                    title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Font', 'XtraRichEditStringId.MenuCmd_ChangeFontName'),
                    items: [{ id: ToolbarActionId.FontComboBox, actionType: 'ComboBox', command: getRichEditInstance().HomeTabCommandId.ChangeFontName, items: fonts }],
                },
                {
                    id: ToolbarGroupId.FontColor,
                    title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Font Color', 'XtraRichEditStringId.MenuCmd_ChangeFontColor'),
                    items: [{ id: ToolbarActionId.FontColorBox, actionType: 'ColorBox', command: getRichEditInstance().HomeTabCommandId.ChangeFontForeColor, defaultValue: 'rgb(0, 0, 0)' }],
                },
                {
                    id: ToolbarGroupId.BackgroundColor,
                    title: (0,external_DevExpress_Analytics_Utils_namespaceObject.getLocalization)('Background Color', 'DevExpress.XtraReports.UI.XRRichTextBoxBase.BackColor'),
                    items: [{ id: ToolbarActionId.BackgroundColorBox, actionType: 'ColorBox', command: getRichEditInstance().HomeTabCommandId.ChangeFontHighlightColor, defaultValue: 'rgb(255, 255, 255)' }]
                }
            ];
        };
        this.onContentReady = this._popover.onContentReady;
        this.getPositionTarget = (element) => {
            return (0,external_DevExpress_Analytics_Internal_namespaceObject.$dx)(element).closest('.' + this.parentClass).closest('.dxrd-control')[0];
        };
        this.hideOnOutsideClick = (e) => {
            if (this._popover.hideOnOutsideClick(e)) {
                this.visible(false);
                return false;
            }
            return true;
        };
        this.template = 'dxrd-richedit-toolbar';
        this.parentClass = 'dxrd-rich-surface';
        this.getPopupContainer = external_DevExpress_Analytics_Internal_namespaceObject.getParentContainer;
        this.componentCollection = [];
        this.visible = options.visible;
        const toolbarItems = (0,external_DevExpress_Analytics_Internal_namespaceObject.extend)(true, [], this._getDefaultItems(options.fonts));
        const getById = (itemId) => {
            let matchedItem;
            const group = toolbarItems.filter(item => {
                if (matchedItem)
                    return false;
                if (item.id === itemId)
                    return true;
                matchedItem = item.items.filter(x => x.id === itemId)[0];
            })[0];
            return matchedItem || group;
        };
        events().call('customizeToolbarActions', { actions: toolbarItems, getById: getById });
        this.componentCollection = this._initComponentCollection(toolbarItems, options);
        if ((this.componentCollection || []).every(component => !component.visible))
            this.visible = external_ko_namespaceObject.observable(false);
    }
    onCommandStateChanged(sender, args) {
        if (args.commands) {
            const commandIdMap = {};
            args.commands.forEach(commandId => commandIdMap[commandId] = true);
            for (const group of this.componentCollection) {
                if (group.items) {
                    for (const item of group.items) {
                        if (item._updateStateInternal) {
                            item._updateStateInternal(commandIdMap);
                        }
                    }
                }
            }
        }
        else
            this.componentCollection.forEach(group => (group.items || []).forEach(item => item._updateStateInternal && item._updateStateInternal()));
    }
}

;// ./node_modules/devexpress-reporting/rich-edit/utils/_model.js











class XRRichEditControlModel extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    setRichHeight(value) {
        this._richHeight = value;
    }
    _elementExists() {
        return !!document.getElementById(this._element.id);
    }
    getToolbar() { return this._toolbar; }
    getRealControl() {
        return this._richEdit;
    }
    getRealControlNative() {
        return this._richEdit['_native'];
    }
    updateCanvasScroll() {
        this.getRealControlNative().core.viewManager.canvasListener.onCanvasScroll();
    }
    dispose() {
        super.dispose();
        this._toolbar.dispose();
        this._dispatcher.dispose();
        this._richEdit.dispose();
    }
    constructor(element, inlineControl, selected) {
        super();
        this.disableCommands = [
            getRichEditInstance().HomeTabCommandId.Find,
            getRichEditInstance().HomeTabCommandId.Replace,
        ];
        this._verticalScrollOffset = 0;
        this._richHeight = null;
        this._disposables.push(this.visible = external_ko_namespaceObject.pureComputed({
            read: () => { return inlineControl.visible() && selected(); },
            write: (value) => { inlineControl.visible(value); }
        }));
        this._disposables.push(this.className = external_ko_namespaceObject.computed(() => {
            return ['dxrd-rich-surface', this.visible() ? '' : 'dxrd-richedit-readonly'].join(' ');
        }));
        this._element = element;
        this._element.id = 'rich' + (0,external_DevExpress_Analytics_Internal_namespaceObject.guid)().replace(/-/g, '');
        this._richEdit = createRichEdit()(element, this.createOptions());
        for (const commandId of this.disableCommands)
            this._richEdit.setCommandEnabled(commandId, false);
        this._dispatcher = new RichEditLoadDispatcher(this);
        this.createToolbar();
    }
    executeCommand(commandId, parameter, setFocus = false) {
        if (!this._richEdit.isDisposed) {
            this._richEdit.executeCommand(commandId, parameter);
            if (setFocus)
                this._richEdit.focus();
        }
    }
    insertHtml(html) {
        if (!this._richEdit.isDisposed)
            this.getRealControlNative().core.commandManager.getCommand(376).execute(false, html);
    }
    createOptions() {
        const options = createRichEditOptions()();
        options.ribbon.visible = false;
        options.view.viewType = getRichEditInstance().ViewType.Simple;
        options.autoCorrect.correctTwoInitialCapitals = true;
        options.confirmOnLosingChanges.enabled = false;
        options.width = '100%';
        options.height = '100%';
        options.contextMenu.enabled = false;
        options.view.simpleViewSettings.paddings = { left: 1.92, right: 1.92, top: 0.01, bottom: 0.01 };
        options.events.commandStateChanged = (s, e) => this._toolbar && this._toolbar.onCommandStateChanged(s, e);
        options.fonts = this.getRichEditFonts();
        const _self = this;
        options['internalApi'] = {
            getVerticalScrollOffset: () => {
                return this._verticalScrollOffset;
            },
            get getVisibleAreaHeight() {
                return _self._richHeight === null ? 0 : () => _self._richHeight;
            }
        };
        return options;
    }
    getFonts() {
        return Object.keys(external_ko_namespaceObject.unwrap(external_DevExpress_Analytics_Widgets_Internal_namespaceObject.availableFonts)).sort((a, b) => a < b ? -1 : 1);
    }
    getRichEditFonts() {
        const rdFonts = this.getFonts();
        const resultFonts = [];
        for (const fontName of rdFonts)
            resultFonts.push({ name: fontName, fontFamily: fontName });
        return {
            fonts: resultFonts,
            mappings: {
                defaultFontName: rdFonts[0],
            },
        };
    }
    createToolbar() {
        this._toolbar = new ToolbarSurface({
            executeCommand: this.executeCommand.bind(this),
            commandManager: this.getRealControlNative().core.commandManager,
            richEditPublic: this._richEdit,
            visible: this.visible,
            fonts: this.getFonts(),
        });
    }
    saveDocumentNative(documentFormat, onResultReady) {
        if (this._richEdit.hasUnsavedChanges) {
            if (onResultReady) {
                const handler = function (sender, arg2) {
                    onResultReady(arg2.base64);
                    sender.events.saving.removeHandler(handler, sender);
                };
                this._richEdit.events.saving.addHandler(handler, this._richEdit);
            }
            this._richEdit.saveDocument(documentFormat);
        }
        else {
            this._richEdit.exportToBase64((base64) => {
                if (onResultReady) {
                    onResultReady(base64);
                }
            }, documentFormat);
        }
    }
    newDocumentNative(onResultReady) {
        if (onResultReady) {
            const handler = function (sender, arg2) {
                onResultReady();
                sender.events.documentLoaded.removeHandler(handler, sender);
            };
            this._richEdit.events.documentLoaded.addHandler(handler, this._richEdit);
        }
        this.executeCommand(getRichEditInstance().FileTabCommandId.CreateDocument);
    }
    openDocumentNative(base64, documentFormat, onResultReady, onError) {
        const handler = function (sender, arg2) {
            onResultReady();
            sender.events.documentLoaded.removeHandler(handler, sender);
        };
        if (onResultReady) {
            this._richEdit.events.documentLoaded.addHandler(handler, this._richEdit);
        }
        this._richEdit.openDocument(base64, '', documentFormat, (result) => {
            if (!result && onError) {
                this._richEdit.events.documentLoaded.removeHandler(handler, this._richEdit);
                onError();
            }
        });
    }
    saveDocument(documentFormat, onResultReady) {
        this._dispatcher.process({ documentConverted: onResultReady, queueAction: RichAction.SaveDocument, documentFormat: documentFormat, base64: undefined, ready: undefined, errorCallBack: undefined });
    }
    newDocument(onResultReady) {
        this._dispatcher.process({ documentConverted: undefined, queueAction: RichAction.NewDocument, documentFormat: undefined, base64: undefined, ready: onResultReady, errorCallBack: undefined });
    }
    openDocument(base64, documentFormat, onResultReady, onError) {
        this._dispatcher.process({ documentConverted: undefined, queueAction: RichAction.OpenDocument, documentFormat: documentFormat, base64: base64, ready: onResultReady, errorCallBack: onError });
    }
    changeSize() {
        this._richEdit.adjust();
    }
    focusChanged(inFocus) {
        if (!inFocus) {
            this._richEdit.selection.setSelection(0);
        }
        this.changeSize();
    }
    getText(interval) {
        return this._richEdit.document.getText(interval);
    }
    documentIsEmpty() {
        return this._richEdit.document.length == 1;
    }
}
class RichLoader extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    set textConverted(textConverted) {
        this._textConverted = textConverted;
    }
    constructor(richEdit) {
        super();
        this.richEdit = richEdit;
    }
    load(loadData) {
        if (!loadData.data || loadData.dataFormat === XRRichTextStreamType.HtmlText) {
            this.richEdit.newDocument(() => {
                this.richEdit.insertHtml(loadData.data || '');
                this.richEdit.saveDocument(2, (result) => {
                    this._textConverted(result);
                });
            });
            return;
        }
        let formatKey;
        if (loadData.dataFormat === XRRichTextStreamType.PlainText) {
            formatKey = getRichEditInstance().DocumentFormat.PlainText;
        }
        else if (loadData.dataFormat === XRRichTextStreamType.RtfText) {
            formatKey = 2;
        }
        else if (loadData.dataFormat === XRRichTextStreamType.XmlText) {
            formatKey = getRichEditInstance().DocumentFormat.OpenXml;
        }
        this.richEdit.openDocument(loadData.data, formatKey, () => {
            this.richEdit.saveDocument(2, (result) => {
                this._textConverted(result);
            });
        }, () => {
            this.richEdit.openDocument(loadData.oldText, 2, () => {
                this.richEdit.saveDocument(2, (result) => {
                    this._textConverted(result);
                    (0,external_DevExpress_Analytics_Internal_namespaceObject.NotifyAboutWarning)('The document is corrupted and cannot be opened', true);
                });
            });
        });
    }
}
class RichEditPaddingModelWrapper extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    _setPaddings() {
        const rich = this._richEdit.getRealControl();
        const paddings = rich.simpleViewSettings.paddings;
        ['left', 'right', 'top', 'bottom'].forEach(side => paddings[side] = recalculateUnit(this._paddingModel[side]() || 0.01, this._paddingModel._get('dpi')));
        rich.simpleViewSettings.paddings = paddings;
    }
    constructor(padding, _richEdit) {
        super();
        this._richEdit = _richEdit;
        this._paddingModel = new external_DevExpress_Analytics_Elements_namespaceObject.PaddingModel();
        this._disposables.push(padding.subscribe((newVal) => {
            this._paddingModel.applyFromString(newVal);
            this._setPaddings();
        }));
        this._disposables.push(this._paddingModel);
    }
}
class RichEditFontModel extends external_DevExpress_Analytics_Widgets_Internal_namespaceObject.FontModel {
    constructor(value, richEdit, foreColor, controller) {
        super(value);
        this.richEdit = richEdit;
        this.controller = controller;
        for (const data of [
            [this.family, fontName => this.applyCommand(getRichEditInstance().HomeTabCommandId.ChangeFontName, fontName)],
            [this.size, size => this.applyCommand(getRichEditInstance().HomeTabCommandId.ChangeFontSize, size)],
            [foreColor, foreColor => this.applyCommand(getRichEditInstance().HomeTabCommandId.ChangeFontForeColor, foreColor)],
            [this.modificators.bold, bold => this.applyCommand(getRichEditInstance().HomeTabCommandId.ToggleFontBold, bold)],
            [this.modificators.italic, italic => this.applyCommand(getRichEditInstance().HomeTabCommandId.ToggleFontItalic, italic)],
            [this.modificators.strikeout, strikeout => this.applyCommand(getRichEditInstance().HomeTabCommandId.ToggleFontStrikeout, strikeout)],
            [this.modificators.underline, underline => this.applyCommand(getRichEditInstance().HomeTabCommandId.ToggleFontUnderline, underline)],
        ])
            this._disposables.push(data[0].subscribe(data[1]));
    }
    applyCommand(commandId, parameter) {
        this.richEdit.getRealControl().executeCommand(commandId, parameter);
        if (!this.richEdit.visible())
            this.richEdit.saveDocument(2, newRtf => this.controller.setRtfString(newRtf));
    }
}

;// ./node_modules/devexpress-reporting/rich-edit/utils/_controller.js




class XRRichController extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    get controlModel() {
        return this.surface._control;
    }
    createSubscribtions() {
        this._disposables.push(this.controlModel._newDocumentData.subscribe((newData) => {
            this.onDocumentDataChanged(newData && newData.content);
        }));
        this._disposables.push(this.controlModel.serializableRtfString.subscribe((value) => this.rtfStringChanged(value)));
        this._disposables.push(this.richEdit.visible.subscribe(newValue => this.onVisibilityChanged(newValue)));
        this._disposables.push(this.surface._height.subscribe(val => {
            if (!this.richEdit.visible() && this.richEdit._richHeight != null) {
                this.richEdit.setRichHeight(val);
                this.richEdit.updateCanvasScroll();
                setTimeout(() => {
                    this.richEdit.changeSize();
                }, 1);
            }
        }));
    }
    dispose() {
        super.dispose();
        this.richEdit.dispose();
        this.fontModel.dispose();
        this.paddingModel.dispose();
        this.richLoader.dispose();
    }
    init() {
        this.locker = new external_DevExpress_Reporting_Internal_namespaceObject.Locker();
        this.fontModel = new RichEditFontModel(this.controlModel.font, this.richEdit, this.controlModel.foreColor, this);
        this.paddingModel = new RichEditPaddingModelWrapper(this.controlModel.padding, this.richEdit);
        this.richLoader = new RichLoader(this.richEdit);
        this.createSubscribtions();
        if (this.surface.serializedRtf()) {
            this.richEdit.openDocument(this.surface.serializedRtf(), 2, () => void (0), () => {
                this.surface.isValid(false);
            });
        }
        else {
            this.rtfStringChanged(this.surface.serializedRtf());
        }
    }
    constructor(richEdit, xrRichSurfaceModel) {
        super();
        this.richEdit = richEdit;
        this.surface = xrRichSurfaceModel;
        this.init();
    }
    setRtfString(newRtf) {
        this.locker.lock(() => {
            this.surface.serializedRtf(newRtf);
        });
    }
    rtfStringChanged(newRtfString) {
        if (newRtfString === undefined) {
            const openSaveAction = () => {
                this.richEdit.openDocument(btoa(this.surface._control.name()), getRichEditInstance().DocumentFormat.PlainText, () => {
                    const fontName = this.fontModel.family.peek();
                    const fontSize = this.fontModel.size.peek();
                    const rich = this.richEdit.getRealControl();
                    rich.document.setDefaultCharacterProperties({ fontName, size: fontSize });
                    rich.executeCommand(getRichEditInstance().HomeTabCommandId.ChangeFontName, fontName);
                    rich.executeCommand(getRichEditInstance().HomeTabCommandId.ChangeFontSize, fontSize);
                    rich.history.clear();
                    this.richEdit.saveDocument(2, (result) => this.setRtfString(result));
                });
            };
            if (this.surface._control.name()) {
                openSaveAction();
            }
            else {
                const subcription = this.surface._control.name.subscribe(name => {
                    openSaveAction();
                    subcription.dispose();
                });
            }
        }
        else {
            if (this.locker.isUpdate)
                return;
            this.richEdit.openDocument(newRtfString, 2, () => void (0), () => {
                this.surface.isValid(false);
            });
        }
    }
    checkValidationState() {
        if (this.richEdit.documentIsEmpty() && this._oldValidState == false) {
            this.surface.isValid(false);
            return false;
        }
        return true;
    }
    onVisibilityChanged(newVisibility) {
        if (!newVisibility) {
            if (this.checkValidationState())
                this.richEdit.saveDocument(2, (newRtfString) => {
                    this.setRtfString(newRtfString);
                });
        }
        else {
            this._oldValidState = this.surface.isValid();
            this.surface.isValid(true);
            this.richEdit.getRealControl().focus();
        }
        if (this.richEdit)
            this.richEdit.focusChanged(newVisibility);
    }
    onDocumentDataChanged(newDocument) {
        this.richLoader.textConverted = (newText) => {
            if (this.checkValidationState()) {
                this.surface.isValid(true);
                this.setRtfString(newText);
            }
        };
        this.richLoader.load({ data: newDocument, dataFormat: this.controlModel.format(), oldText: this.surface.serializedRtf() });
    }
}

;// ./node_modules/devexpress-reporting/rich-edit/surface.js





class XRRichModernSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.isValid = external_ko_namespaceObject.observable(true);
        this.serializedRtf = external_ko_namespaceObject.observable('');
        this.template = 'dxrd-richedit';
        this.contenttemplate = 'dxrd-richedit-content';
        this.selectiontemplate = 'dxrd-richedit-selection';
        this._convertReady = new external_DevExpress_Analytics_Internal_namespaceObject.DxDeferred();
        base64UTF16LEtobase64UTF8(control.serializableRtfString(), (val) => {
            this.serializedRtf(val);
            this._convertReady.resolve(true);
        });
        this._disposables.push(this.serializedRtf.subscribe((newValue) => {
            control.serializableRtfString(newValue);
        }));
        this.defaultStyleunit = external_ko_namespaceObject.computed(() => ({
            top: this.contentSizes().top + (this.isIntersect() ? 1 : 0),
            left: this.contentSizes().left + (this.isIntersect() ? 1 : 0),
            lineHeight: this.contentSizes().height,
            height: this.contentSizes().height,
            width: this.contentSizes().width
        })).extend({ deferred: true });
        this._disposables.push(this.defaultStyleunit);
    }
    createController(richEdit) {
        this._convertReady.done(() => {
            this.controller = new XRRichController(richEdit, this);
            this._disposables.push(this.controller);
        });
    }
}

;// ./node_modules/devexpress-reporting/rich-edit/utils/_inlineControl.js

class InlineRichEditControl extends external_DevExpress_Analytics_Internal_namespaceObject.InlineTextEdit {
}

;// ./node_modules/devexpress-reporting/rich-edit/registrator.js





getRichEditSurface(() => {
    const RichEdit = getRichEditInstance();
    return !!RichEdit ? XRRichModernSurface : XRRichSurface;
});
registerRichEditInline((selection) => {
    const RichEdit = getRichEditInstance();
    return !!RichEdit && new InlineRichEditControl(selection);
});

;// ./node_modules/devexpress-reporting/rich-edit/utils/_bindings.js






class RichEditVirtualScroll extends external_DevExpress_Analytics_Utils_namespaceObject.Disposable {
    constructor() {
        super(...arguments);
        this.items = [];
    }
    dispose() {
        super.dispose();
        this._viewPort = null;
        this.items = [];
    }
    registerViewPort(viewPort) {
        this._viewPort = viewPort;
        const updateRich = () => this.updateRichPosition();
        this._viewPort.addEventListener('scroll', updateRich, true);
        this._disposables.push({
            dispose: () => this._viewPort.removeEventListener('scroll', updateRich, true)
        });
    }
    registerRichEditControl(element, model) {
        this.isDisposing = false;
        if (!this._viewPort) {
            this.registerViewPort(external_jQuery_namespaceObject.fn.constructor(element).closest('.dxrd-viewport')[0]);
        }
        const richItem = { element, model };
        this.updateRich(richItem, this._viewPort.getBoundingClientRect());
        this.items.push(richItem);
        this._disposables.push(model.visible.subscribe((newVal) => this.updateRich(richItem, this._viewPort.getBoundingClientRect())));
    }
    unregisterRichEditControl(element) {
        let currentIndex = -1;
        this.items.some((x, index) => {
            if (x.element === element) {
                currentIndex = index;
                return true;
            }
            return false;
        });
        if (currentIndex !== -1)
            this.items.splice(currentIndex, 1);
        if (this.items.length === 0)
            this.dispose();
    }
    updateRich(item, viewPortRect) {
        let currentHeight = Math.min(item.element.clientHeight, this._viewPort.clientHeight);
        if (!item.model.visible()) {
            const elementRect = item.element.getBoundingClientRect();
            let newVerticalScrollOffset = viewPortRect.top - elementRect.top;
            if (elementRect.bottom - viewPortRect.top < 0 || elementRect.top > viewPortRect.bottom) {
                currentHeight = 0;
                newVerticalScrollOffset = 0;
            }
            if (item.model._richHeight != currentHeight || item.model._verticalScrollOffset != newVerticalScrollOffset) {
                item.model.setRichHeight(currentHeight);
                item.model._verticalScrollOffset = newVerticalScrollOffset;
                item.model.updateCanvasScroll();
            }
        }
        else {
            item.model.setRichHeight(null);
            item.model._verticalScrollOffset = 0;
            item.model.updateCanvasScroll();
        }
    }
    updateRichPosition() {
        const viewPortRect = this._viewPort.getBoundingClientRect();
        this.items.forEach(x => this.updateRich(x, viewPortRect));
    }
}
const virtualScroll = new RichEditVirtualScroll();
external_ko_namespaceObject.bindingHandlers['dxRichSurface'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        external_jQuery_namespaceObject.fn.constructor(element).children().remove();
        const model = viewModel;
        if (model.controller && model.controller.richEdit) {
            const _richElement = model.controller.richEdit._element;
            if (external_ko_namespaceObject.dataFor(_richElement) && document.getElementById(_richElement.id)) {
                external_jQuery_namespaceObject.fn.constructor(element).closest('.dxrd-control').css('display', 'none');
            }
            else {
                external_jQuery_namespaceObject.fn.constructor(element).append(_richElement);
                external_ko_namespaceObject.applyBindings(model.controller.richEdit, _richElement);
                virtualScroll.registerRichEditControl(_richElement, model.controller.richEdit);
                (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => {
                    virtualScroll.unregisterRichEditControl(_richElement);
                });
            }
        }
        else {
            const editorOptions = valueAccessor();
            const templateHtml = (0,external_DevExpress_Analytics_Widgets_namespaceObject.getTemplate)('dxrd-rich-edit');
            const inlineControl = editorOptions.inlineEdit;
            const richElement = external_jQuery_namespaceObject.fn.constructor(element).append(templateHtml).children()[0];
            const richEditModel = new XRRichEditControlModel(richElement, inlineControl, model.selected);
            model.createController(richEditModel);
            external_ko_namespaceObject.applyBindings(richEditModel, richElement);
            virtualScroll.registerRichEditControl(richElement, richEditModel);
            (0,external_DevExpress_Analytics_Internal_namespaceObject.addDisposeCallback)(element, () => {
                virtualScroll.unregisterRichEditControl(richElement);
            });
        }
        return { controlsDescendantBindings: true };
    }
};

;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-richEdit.js














;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-richEdit-internal.js













;// ./node_modules/devexpress-reporting/scopes/reporting-designer-controls-richEdit-internal-toolbar.js



;// ./node_modules/devexpress-reporting/bundle/_add-rich-edit-to-bundle.js



function _addRichToBundle(bundle) {
    bundle.Reporting.Designer.Controls.RichEdit = reporting_designer_controls_richEdit_namespaceObject;
    bundle.Reporting.Designer.Controls.RichEdit.Internal = reporting_designer_controls_richEdit_internal_namespaceObject;
    bundle.Reporting.Designer.Controls.RichEdit.Internal.Toolbar = reporting_designer_controls_richEdit_internal_toolbar_namespaceObject;
    return bundle;
}

;// ./node_modules/devexpress-reporting/bundle/designer-bundle.js


const designer_bundle_DevExpress = window.DevExpress || {};
_addDesignerToBundle(designer_bundle_DevExpress);
_addRichToBundle(designer_bundle_DevExpress);
/* harmony default export */ const designer_bundle = (designer_bundle_DevExpress['Reporting']);

/******/ })()
;