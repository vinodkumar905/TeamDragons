/**
* DevExpress HTML/JS Reporting (dx-viewer-bindings.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addToBindingsCache } from '@devexpress/analytics-core/analytics-widgets-internal';
addToBindingsCache('style: $data.customGlyphStyleCss', function ($context, $element) { return { 'style': function () { return $context.$data.customGlyphStyleCss; } }; });
addToBindingsCache('dxSelectBox: { dataSource: items, displayExpr: \'displayName\', onValueChanged: popupModel.onTextChanged, useItemTextAsTitle: true , placeholder: popupModel.selectPeriodPlaceholder }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.items, 'displayExpr': 'displayName', 'onValueChanged': $context.$data.popupModel.onTextChanged, 'useItemTextAsTitle': true, 'placeholder': $context.$data.popupModel.selectPeriodPlaceholder }; } }; });
addToBindingsCache('text: popupModel.fromText', function ($context, $element) { return { 'text': function () { return $context.$data.popupModel.fromText; } }; });
addToBindingsCache('css: { \'dx-button-default\': popupModel.startButton.focused }, dxButton: popupModel.startButton', function ($context, $element) { return { 'css': function () { return { 'dx-button-default': $context.$data.popupModel.startButton.focused }; }, 'dxButton': function () { return $context.$data.popupModel.startButton; } }; });
addToBindingsCache('text: popupModel.untilText', function ($context, $element) { return { 'text': function () { return $context.$data.popupModel.untilText; } }; });
addToBindingsCache('css: { \'dx-button-default\': popupModel.endButton.focused }, dxButton: popupModel.endButton', function ($context, $element) { return { 'css': function () { return { 'dx-button-default': $context.$data.popupModel.endButton.focused }; }, 'dxButton': function () { return $context.$data.popupModel.endButton; } }; });
addToBindingsCache('if: popupModel.startButton.focused', function ($context, $element) { return { 'if': function () { return $context.$data.popupModel.startButton.focused; } }; });
addToBindingsCache('template: { name: \'dxrv-daterange-calendar\', data: startRange }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-daterange-calendar', 'data': $context.$data.startRange }; } }; });
addToBindingsCache('if: popupModel.endButton.focused', function ($context, $element) { return { 'if': function () { return $context.$data.popupModel.endButton.focused; } }; });
addToBindingsCache('template: { name: \'dxrv-daterange-calendar\', data: endRange }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-daterange-calendar', 'data': $context.$data.endRange }; } }; });
addToBindingsCache('dxclick: clickToBrick, styleunit: { width: width, height: height }, autoFit: autoFitOptions', function ($context, $element) { return { 'dxclick': function () { return $context.$data.clickToBrick; }, 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'autoFit': function () { return $context.$data.autoFitOptions; } }; });
addToBindingsCache('styleunit: { width: width, height: height, lineHeight: height }, style: { \'background-color\': color }, visible: pageLoading, text: loadingText', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height, 'lineHeight': $context.$data.height }; }, 'style': function () { return { 'background-color': $context.$data.color }; }, 'visible': function () { return $context.$data.pageLoading; }, 'text': function () { return $context.$data.loadingText; } }; });
addToBindingsCache('attr: { src: displayImageSrc }, style:{ \'background-color\': color }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.displayImageSrc }; }, 'style': function () { return { 'background-color': $context.$data.color }; } }; });
addToBindingsCache('css: { \'dxrdp-active\': active && hasBricks }, visible: !readerMode', function ($context, $element) { return { 'css': function () { return { 'dxrdp-active': $context.$data.active && $context.$data.hasBricks }; }, 'visible': function () { return !$context.$data.readerMode; } }; });
addToBindingsCache('style: { top: topP, left: leftP, right: rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': active }', function ($context, $element) { return { 'style': function () { return { 'top': $context.$data.topP, 'left': $context.$data.leftP, 'right': $context.$data.rightP, 'height': $context.$data.heightP, 'width': $context.$data.widthP }; }, 'css': function () { return { 'dxrd-report-preview-brick-selected': $context.$data.active }; } }; });
addToBindingsCache('foreach: activeBricks', function ($context, $element) { return { 'foreach': function () { return $context.$data.activeBricks; } }; });
addToBindingsCache('template: { name: "dxrd-page-brick-mobile" }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-mobile' }; } }; });
addToBindingsCache('if: !brickLoading && editingFields', function ($context, $element) { return { 'if': function () { return !$context.$data.brickLoading && $context.$data.editingFields; } }; });
addToBindingsCache('foreach: editingFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.editingFields; } }; });
addToBindingsCache('styleunit:{ height: height }, dxrdSearchBar: $data', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height }; }, 'dxrdSearchBar': function () { return $context.$data; } }; });
addToBindingsCache('visible: !editorVisible, dxclick: focusEditor', function ($context, $element) { return { 'visible': function () { return !$context.$data.editorVisible; }, 'dxclick': function () { return $context.$data.focusEditor; } }; });
addToBindingsCache('text: tapToSearchText', function ($context, $element) { return { 'text': function () { return $context.$data.tapToSearchText; } }; });
addToBindingsCache('visible: editorVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.editorVisible; } }; });
addToBindingsCache('dxTextBox: { value: searchText, onValueChanged: onSearchTextChanged, onEnterKey: startSearch }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.searchText, 'onValueChanged': $context.$data.onSearchTextChanged, 'onEnterKey': $context.$data.startSearch }; } }; });
addToBindingsCache('dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to\' }, items: items, onItemClick: clickAction }, attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'dxMenu': function () { return { 'wrapperAttr': { 'class': 'dxrd-preview-export-to' }, 'items': $context.$data.items, 'onItemClick': $context.$data.clickAction }; }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
addToBindingsCache('attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
addToBindingsCache('text: $root.getLocalization($data.text, $data.textId)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization($context.$data.text, $context.$data.textId); } }; });
addToBindingsCache('css: ko.unwrap($data.imageClassName), template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}', function ($context, $element) { return { 'css': function () { return $context.ko.unwrap($context.$data.imageClassName); }, 'template': function () { return { 'name': $context.ko.unwrap($context.$data.imageTemplateName), 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
addToBindingsCache('visible: visible, css: $data.imageClassName, template: { name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, dxclick: clickAction', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'dxclick': function () { return $context.$data.clickAction; } }; });
addToBindingsCache('dxrdMobilePaginator: $data', function ($context, $element) { return { 'dxrdMobilePaginator': function () { return $context.$data; } }; });
addToBindingsCache('text : text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('dxPopover: { wrapperAttr: { class: \'dxrd-menu-export-popover\' }, width: \'266px\', height: \'266px\', visible: visible, target: \'.dxrdp-mobile-action.dxrd-image-export-to\', container: $root.getPopupContainer($element), }', function ($context, $element) { return { 'dxPopover': function () { return { 'wrapperAttr': { 'class': 'dxrd-menu-export-popover' }, 'width': '266px', 'height': '266px', 'visible': $context.$data.visible, 'target': '.dxrdp-mobile-action.dxrd-image-export-to', 'container': $context.$root.getPopupContainer($element) }; } }; });
addToBindingsCache('dxclick: action, text: text', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; }, 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('dxPopup: { wrapperAttr: { class: \'dxrd-menu-parameters-popup\' }, showTitle: false, onHidden: onHidden, width: \'100vw\', height: \'100vh\', visible: visible, container: $root.getPopupContainer($element), }', function ($context, $element) { return { 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dxrd-menu-parameters-popup' }, 'showTitle': false, 'onHidden': $context.$data.onHidden, 'width': '100vw', 'height': '100vh', 'visible': $context.$data.visible, 'container': $context.$root.getPopupContainer($element) }; } }; });
addToBindingsCache('dxValidationGroup: {}, css: className', function ($context, $element) { return { 'dxValidationGroup': function () { return {}; }, 'css': function () { return $context.$data.className; } }; });
addToBindingsCache('text: $data.title', function ($context, $element) { return { 'text': function () { return $context.$data.title; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, bounceEnabled: false }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'bounceEnabled': false }; } }; });
addToBindingsCache('foreach: { data: $data.actionButtons }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.actionButtons }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
addToBindingsCache('dxButton: { text: text, onClick: function(params){ $data.action(params) }, disabled: disabled, visible: visible }, css: className', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.text, 'onClick': function (params) { $context.$data.action(params); }, 'disabled': $context.$data.disabled, 'visible': $context.$data.visible }; }, 'css': function () { return $context.$data.className; } }; });
addToBindingsCache('visible: showIcons, foreach: { data: $data.actionIcons }', function ($context, $element) { return { 'visible': function () { return $context.$data.showIcons; }, 'foreach': function () { return { 'data': $context.$data.actionIcons }; } }; });
addToBindingsCache('dxButton: { onClick: function(params){ $data.action(params)}, disabled: disabled }, css: className', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': function (params) { $context.$data.action(params); }, 'disabled': $context.$data.disabled }; }, 'css': function () { return $context.$data.className; } }; });
addToBindingsCache('dxrvDateRangeEditor: {value: value, isMobile: true }', function ($context, $element) { return { 'dxrvDateRangeEditor': function () { return { 'value': $context.$data.value, 'isMobile': true }; } }; });
addToBindingsCache('if: $data.format', function ($context, $element) { return { 'if': function () { return $context.$data.format; } }; });
addToBindingsCache('ifnot: $data.format', function ($context, $element) { return { 'ifnot': function () { return $context.$data.format; } }; });
addToBindingsCache('if: $data.enabled', function ($context, $element) { return { 'if': function () { return $context.$data.enabled; } }; });
addToBindingsCache('if: $data.content', function ($context, $element) { return { 'if': function () { return $context.$data.content; } }; });
addToBindingsCache('template: $data.content', function ($context, $element) { return { 'template': function () { return $context.$data.content; } }; });
addToBindingsCache('template: { name: \'dxrv-preview-parameters-mobile\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-preview-parameters-mobile', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: $data.contentTemplate, data: model.getViewModel() }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.model.getViewModel() }; } }; });
addToBindingsCache('style: { pointerEvents: surfaceEvents, touchEvents: surfaceEvents }, styleunit: { top: topOffset, height: previewWrapperSizeHeight, width: previewWrapperSizeWidth }, slide: slideOptions, mobileZoom: mobileZoomOptions, dxclick: click, css: { \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.surfaceEvents, 'touchEvents': $context.$data.surfaceEvents }; }, 'styleunit': function () { return { 'top': $context.$data.topOffset, 'height': $context.$data.previewWrapperSizeHeight, 'width': $context.$data.previewWrapperSizeWidth }; }, 'slide': function () { return $context.$data.slideOptions; }, 'mobileZoom': function () { return $context.$data.mobileZoomOptions; }, 'dxclick': function () { return $context.$data.click; }, 'css': function () { return { 'dxrp-editing-fields-hightlighted': $context.$data.editingFieldsHighlighted }; } }; });
addToBindingsCache('style: { pointerEvents: galleryEvents, touchEvents: galleryEvents }, dxGalleryReportPreview: { dataSource: gallery.items, gallery: gallery, slideOptions: slideOptions, animationEnabled: gallery.animationEnabled, disabled: zoomUpdating, width:\'100%\', height: \'100%\', showIndicator: false, loop: true, onSelectionChanged: onSlide, onOptionChanged: gallery.onOptionChanged }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.galleryEvents, 'touchEvents': $context.$data.galleryEvents }; }, 'dxGalleryReportPreview': function () { return { 'dataSource': $context.$data.gallery.items, 'gallery': $context.$data.gallery, 'slideOptions': $context.$data.slideOptions, 'animationEnabled': $context.$data.gallery.animationEnabled, 'disabled': $context.$data.zoomUpdating, 'width': '100%', 'height': '100%', 'showIndicator': false, 'loop': true, 'onSelectionChanged': $context.$data.onSlide, 'onOptionChanged': $context.$data.gallery.onOptionChanged }; } }; });
addToBindingsCache('dxScrollView: reportPreview.scrollViewOptions', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.reportPreview.scrollViewOptions; } }; });
addToBindingsCache('style: gallery.contentSize', function ($context, $element) { return { 'style': function () { return $context.$data.gallery.contentSize; } }; });
addToBindingsCache('styleunit: position, css: classSet', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return $context.$data.classSet; } }; });
addToBindingsCache('styleunit: { width: Math.max(page.width, position.width), height: Math.max(page.height, position.height) }, style: { \'background-color\': page.color }', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.max($context.$data.page.width, $context.$data.position.width), 'height': Math.max($context.$data.page.height, $context.$data.position.height) }; }, 'style': function () { return { 'background-color': $context.$data.page.color }; } }; });
addToBindingsCache('css: { \'dxrdp-active\': page.active && active, \'dxrdp-page-padding\': page.active && active }, visible: reportPreview.slideOptions.readerMode', function ($context, $element) { return { 'css': function () { return { 'dxrdp-active': $context.$data.page.active && $context.$data.active, 'dxrdp-page-padding': $context.$data.page.active && $context.$data.active }; }, 'visible': function () { return $context.$data.reportPreview.slideOptions.readerMode; } }; });
addToBindingsCache('styleunit: { width: page.width, height: page.height }, style: { pointerEvents: reportPreview.pageEvents, touchEvents: reportPreview.pageEvents }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.page.width, 'height': $context.$data.page.height }; }, 'style': function () { return { 'pointerEvents': $context.$data.reportPreview.pageEvents, 'touchEvents': $context.$data.reportPreview.pageEvents }; } }; });
addToBindingsCache('template: {name: \'dxrd-preview-progress-bar\', data: progressBar }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-progress-bar', 'data': $context.$data.progressBar }; } }; });
addToBindingsCache('foreach: blocks', function ($context, $element) { return { 'foreach': function () { return $context.$data.blocks; } }; });
addToBindingsCache('if: page', function ($context, $element) { return { 'if': function () { return $context.$data.page; } }; });
addToBindingsCache('template: { name :\'dxrd-preview-page-mobile\', data: page }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-page-mobile', 'data': $context.$data.page }; } }; });
addToBindingsCache('style: containerStyle, zoom: zoom, css: { active: active, readonly: field.readOnly }', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; }, 'zoom': function () { return $context.$data.zoom; }, 'css': function () { return { 'active': $context.$data.active, 'readonly': $context.$data.field.readOnly }; } }; });
addToBindingsCache('style: borderStyle', function ($context, $element) { return { 'style': function () { return $context.$data.borderStyle; } }; });
addToBindingsCache('dxclick: activateEditor', function ($context, $element) { return { 'dxclick': function () { return $context.$data.activateEditor; } }; });
addToBindingsCache('style: textStyle, css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}', function ($context, $element) { return { 'style': function () { return $context.$data.textStyle; }, 'css': function () { return { 'dxrp-editing-field-text-wordwrap': !$context.$data.wordWrap }; } }; });
addToBindingsCache('style: breakOffsetStyle, html: field.htmlValue', function ($context, $element) { return { 'style': function () { return $context.$data.breakOffsetStyle; }, 'html': function () { return $context.$data.field.htmlValue; } }; });
addToBindingsCache('style: textStyle, css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}, text: field.editValue', function ($context, $element) { return { 'style': function () { return $context.$data.textStyle; }, 'css': function () { return { 'dxrp-editing-field-text-wordwrap': !$context.$data.wordWrap }; }, 'text': function () { return $context.$data.field.editValue; } }; });
addToBindingsCache('value: value, valueUpdate: \'keypress\', style: textStyle, event: { blur: hideEditor, keyup: keypressAction }', function ($context, $element) { return { 'value': function () { return $context.$data.value; }, 'valueUpdate': function () { return 'keypress'; }, 'style': function () { return $context.$data.textStyle; }, 'event': function () { return { 'blur': $context.$data.hideEditor, 'keyup': $context.$data.keypressAction }; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.value = _z; } }; } }; });
addToBindingsCache('dxTextBox: options, childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.options; }, 'childStyle': function () { return { 'style': $context.$data.textStyle, 'selector': '.dx-texteditor-input' }; } }; });
addToBindingsCache('dxNumberBox: options, childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.options; }, 'childStyle': function () { return { 'style': $context.$data.textStyle, 'selector': '.dx-texteditor-input' }; } }; });
addToBindingsCache('dxDateBox: $data.getOptions({ dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), childStyle: { style: textStyle, selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.getOptions({ 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flip', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } } }); }, 'childStyle': function () { return { 'style': $context.$data.textStyle, 'selector': '.dx-texteditor-input' }; } }; });
addToBindingsCache('style: containerStyle', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; } }; });
addToBindingsCache('dxPictureEditor: $data', function ($context, $element) { return { 'dxPictureEditor': function () { return $context.$data; } }; });
addToBindingsCache('style: containerStyle, zoom: zoom, click: onClick', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; }, 'zoom': function () { return $context.$data.zoom; }, 'click': function () { return $context.$data.onClick; } }; });
addToBindingsCache('style: checkStyle, template: { name: checkStateStyleIcon, if: !!checkStateStyleIcon }', function ($context, $element) { return { 'style': function () { return $context.$data.checkStyle; }, 'template': function () { return { 'name': $context.$data.checkStateStyleIcon, 'if': !!$context.$data.checkStateStyleIcon }; } }; });
addToBindingsCache('style: checkStyle', function ($context, $element) { return { 'style': function () { return $context.$data.checkStyle; } }; });
addToBindingsCache('style: { fill: checked ? \'black\' : \'transparent\' }', function ($context, $element) { return { 'style': function () { return { 'fill': $context.$data.checked ? 'black' : 'transparent' }; } }; });
addToBindingsCache('style: containerStyle, dxclick: activateEditor, zoom: zoom, css: { active: active, readonly: field.readOnly }', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle; }, 'dxclick': function () { return $context.$data.activateEditor; }, 'zoom': function () { return $context.$data.zoom; }, 'css': function () { return { 'active': $context.$data.active, 'readonly': $context.$data.field.readOnly }; } }; });
addToBindingsCache('style: style, text: text', function ($context, $element) { return { 'style': function () { return $context.$data.style; }, 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('value: field.editorValue, valueUpdate: \'keypress\', style: textStyle, event: { blur: hideEditor, keyup: keypressAction }', function ($context, $element) { return { 'value': function () { return $context.$data.field.editorValue; }, 'valueUpdate': function () { return 'keypress'; }, 'style': function () { return $context.$data.textStyle; }, 'event': function () { return { 'blur': $context.$data.hideEditor, 'keyup': $context.$data.keypressAction }; }, '_ko_property_writers': function () { return { 'value': function (_z) { Object($context.$data.field).editorValue = _z; } }; } }; });
addToBindingsCache('if: !active || field.readOnly', function ($context, $element) { return { 'if': function () { return !$context.$data.active || $context.$data.field.readOnly; } }; });
addToBindingsCache('if: field.htmlValue', function ($context, $element) { return { 'if': function () { return $context.$data.field.htmlValue; } }; });
addToBindingsCache('ifnot: field.htmlValue', function ($context, $element) { return { 'ifnot': function () { return $context.$data.field.htmlValue; } }; });
addToBindingsCache('if: active && !field.readOnly', function ($context, $element) { return { 'if': function () { return $context.$data.active && !$context.$data.field.readOnly; } }; });
addToBindingsCache('template: { name: editorTemplate, data: data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.editorTemplate, 'data': $context.$data.data }; } }; });
addToBindingsCache('template: \'dxrp-editing-field-image-editor\'', function ($context, $element) { return { 'template': function () { return 'dxrp-editing-field-image-editor'; } }; });
addToBindingsCache('foreach: cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.cells; } }; });
addToBindingsCache('attr: { \'action\': exportActionUri }, foreach: exportFormData', function ($context, $element) { return { 'attr': function () { return { 'action': $context.$data.exportActionUri }; }, 'foreach': function () { return $context.$data.exportFormData; } }; });
addToBindingsCache('attr: {\'name\': name, \'value\': value}', function ($context, $element) { return { 'attr': function () { return { 'name': $context.$data.name, 'value': $context.$data.value }; } }; });
addToBindingsCache('dxPopup: { width: popupOptions.width, height: popupOptions.height, title: popupOptions.title, visible: popupOptions.visible, showCloseButton: true, onHidden: popupOptions.onHidden, toolbarItems: popupOptions.toolbarItems, wrapperAttr: popupOptions.wrapperAttr, container: popupOptions.getPopupContainer($element), position: { of: popupOptions.getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': $context.$data.popupOptions.width, 'height': $context.$data.popupOptions.height, 'title': $context.$data.popupOptions.title, 'visible': $context.$data.popupOptions.visible, 'showCloseButton': true, 'onHidden': $context.$data.popupOptions.onHidden, 'toolbarItems': $context.$data.popupOptions.toolbarItems, 'wrapperAttr': $context.$data.popupOptions.wrapperAttr, 'container': $context.$data.popupOptions.getPopupContainer($element), 'position': { 'of': $context.$data.popupOptions.getPopupContainer($element) } }; } }; });
addToBindingsCache('text: printingTexts.caption', function ($context, $element) { return { 'text': function () { return $context.$data.printingTexts.caption; } }; });
addToBindingsCache('text: printingTexts.prefix', function ($context, $element) { return { 'text': function () { return $context.$data.printingTexts.prefix; } }; });
addToBindingsCache('click: printingLinkCallback, text: printingTexts.link', function ($context, $element) { return { 'click': function () { return $context.$data.printingLinkCallback; }, 'text': function () { return $context.$data.printingTexts.link; } }; });
addToBindingsCache('text: printingTexts.postfix', function ($context, $element) { return { 'text': function () { return $context.$data.printingTexts.postfix; } }; });
addToBindingsCache('if: printingTexts.prefix', function ($context, $element) { return { 'if': function () { return $context.$data.printingTexts.prefix; } }; });
addToBindingsCache('if: printingTexts.postfix', function ($context, $element) { return { 'if': function () { return $context.$data.printingTexts.postfix; } }; });
addToBindingsCache('text: $root.getLocalization(\'Export Options\', \'DevExpress.XtraReports.UI.XtraReport.ExportOptions\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Export Options', 'DevExpress.XtraReports.UI.XtraReport.ExportOptions'); } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); }  }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
addToBindingsCache('dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('dxMenu: { elementAttr: { class: \'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted\' }, disabled: disabled, items: widget.items, cssClass: \'dxrdp-export-to-menu\', onItemClick: click, onSubmenuShowing: widget.onSubmenuShowing(getPopupContainer($element), $element), onSubmenuShown: widget.onSubmenuShown, onSubmenuHiding: widget.onSubmenuHiding, onItemRendered: widget.onItemRendered, tabIndex: \'-1\', }', function ($context, $element) { return { 'dxMenu': function () { return { 'elementAttr': { 'class': 'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted' }, 'disabled': $context.$data.disabled, 'items': $context.$data.widget.items, 'cssClass': 'dxrdp-export-to-menu', 'onItemClick': $context.$data.click, 'onSubmenuShowing': $context.$data.widget.onSubmenuShowing($context.$data.getPopupContainer($element), $element), 'onSubmenuShown': $context.$data.widget.onSubmenuShown, 'onSubmenuHiding': $context.$data.widget.onSubmenuHiding, 'onItemRendered': $context.$data.widget.onItemRendered, 'tabIndex': '-1' }; } }; });
addToBindingsCache('attr: { title: text }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('css: imageClassName, template: imageTemplateName', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return $context.$data.imageTemplateName; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: propertyGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.propertyGrid }; } }; });
addToBindingsCache('template: { name: \'dx-propertygrid-popoverservice\', if: propertyGrid.popover, data: propertyGrid.popover }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertygrid-popoverservice', 'if': $context.$data.propertyGrid.popover, 'data': $context.$data.propertyGrid.popover }; } }; });
addToBindingsCache('dxclick: function(_, event){ onClick(event); event.stopPropagation(); }, style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active, \'dxrd-report-preview-brick-selectable\': !($data.bricks) }', function ($context, $element) { return { 'dxclick': function () { return function (_, event) { $context.$data.onClick(event); event.stopPropagation(); }; }, 'style': function () { return { 'top': $context.$data.topP, 'left': $context.$data.leftP, 'right': $context.$data.rightP, 'height': $context.$data.heightP, 'width': $context.$data.widthP }; }, 'css': function () { return { 'dxrd-report-preview-brick-selected': $context.$data.active, 'dxrd-report-preview-brick-selectable': !($context.$data.bricks) }; } }; });
addToBindingsCache('css: { \'dxrdp-navigation-brick-drill-down\' : !!navigation.drillDownKey, \'dxrdp-navigation-brick-sorting\' : !!navigation.sortData, \'dxrdp-navigation-brick-sorting-desc\': navigation.sortData && navigation.sortData.order === 1, \'dxrdp-navigation-brick-sorting-asc\': navigation.sortData && navigation.sortData.order === 2 }', function ($context, $element) { return { 'css': function () { return { 'dxrdp-navigation-brick-drill-down': !!$context.$data.navigation.drillDownKey, 'dxrdp-navigation-brick-sorting': !!$context.$data.navigation.sortData, 'dxrdp-navigation-brick-sorting-desc': $context.$data.navigation.sortData && $context.$data.navigation.sortData.order === 1, 'dxrdp-navigation-brick-sorting-asc': $context.$data.navigation.sortData && $context.$data.navigation.sortData.order === 2 }; } }; });
addToBindingsCache('attr: {\'aria-label\': currentPageAriaLabelImgAlt }, dxclick: clickToBrick, \'brick-selection-prog\': brickSelectionProg', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$data.currentPageAriaLabelImgAlt }; }, 'dxclick': function () { return $context.$data.clickToBrick; }, 'brick-selection-prog': function () { return $context.$data.brickSelectionProg; } }; });
addToBindingsCache('styleunit: { \'width\': width + 2, \'height\': height + 2 }, visible: pageLoading', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width + 2, 'height': $context.$data.height + 2 }; }, 'visible': function () { return $context.$data.pageLoading; } }; });
addToBindingsCache('styleunit: { \'paddingTop\': height / 2.3 }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingTop': $context.$data.height / 2.3 }; } }; });
addToBindingsCache('text: loadingText', function ($context, $element) { return { 'text': function () { return $context.$data.loadingText; } }; });
addToBindingsCache('attr: { src: displayImageSrc, \'alt\': currentPageAriaLabelImgAlt }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.displayImageSrc, 'alt': $context.$data.currentPageAriaLabelImgAlt }; } }; });
addToBindingsCache('dxMutationObserver: editingFieldsKeyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.editingFieldsKeyboardHelper; } }; });
addToBindingsCache('if: $data.navigation', function ($context, $element) { return { 'if': function () { return $context.$data.navigation; } }; });
addToBindingsCache('template: { name: "dxrd-page-brick-mobile", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-mobile', 'data': $context.$data }; } }; });
addToBindingsCache('foreach: clickableBricks', function ($context, $element) { return { 'foreach': function () { return $context.$data.clickableBricks; } }; });
addToBindingsCache('template: { name: "dxrd-page-brick-clickable", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-clickable', 'data': $context.$data }; } }; });
addToBindingsCache('if: !brickLoading && $data.editingFields', function ($context, $element) { return { 'if': function () { return !$context.$data.brickLoading && $context.$data.editingFields; } }; });
addToBindingsCache('dxclick: activateEditor, css: parentPopupClass', function ($context, $element) { return { 'dxclick': function () { return $context.$data.activateEditor; }, 'css': function () { return $context.$data.parentPopupClass; } }; });
addToBindingsCache('dxPainter: getPainterOptions()', function ($context, $element) { return { 'dxPainter': function () { return $context.$data.getPainterOptions(); } }; });
addToBindingsCache('dxPopup: { width: containerStyle.width, height: containerStyle.height, position: { boundary: popupData.getPopupContainer($element), of: popupData.getPositionTarget($element), collision: \'flipfit flipfit\' }, container: popupData.getPopupContainer($element), showTitle: false, target: popupData.getPopupContainer($element), deferRendering: false, hideOnOutsideClick: true, showCloseButton: false, onContentReady: popupData.onContentReady, onHiding: popupData.onHiding, onShown: popupData.onShown, shading: popupData.shading, wrapperAttr: { class: \'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen\' }, animation: { show: { type: \'slide\', duration: 0, to: { opacity: 1 }, from: { opacity: 0 } }, hide: { type: \'fade\', duration: 100, to: { opacity: 0 }, from: { opacity: 1 } } }, visible: popupData.visible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': $context.$data.containerStyle.width, 'height': $context.$data.containerStyle.height, 'position': { 'boundary': $context.$data.popupData.getPopupContainer($element), 'of': $context.$data.popupData.getPositionTarget($element), 'collision': 'flipfit flipfit' }, 'container': $context.$data.popupData.getPopupContainer($element), 'showTitle': false, 'target': $context.$data.popupData.getPopupContainer($element), 'deferRendering': false, 'hideOnOutsideClick': true, 'showCloseButton': false, 'onContentReady': $context.$data.popupData.onContentReady, 'onHiding': $context.$data.popupData.onHiding, 'onShown': $context.$data.popupData.onShown, 'shading': $context.$data.popupData.shading, 'wrapperAttr': { 'class': 'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen' }, 'animation': { 'show': { 'type': 'slide', 'duration': 0, 'to': { 'opacity': 1 }, 'from': { 'opacity': 0 } }, 'hide': { 'type': 'fade', 'duration': 100, 'to': { 'opacity': 0 }, 'from': { 'opacity': 1 } } }, 'visible': $context.$data.popupData.visible }; } }; });
addToBindingsCache('template: { name: \'dx-picture-editing-popup\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-picture-editing-popup' }; } }; });
addToBindingsCache('if: popupData.showContent', function ($context, $element) { return { 'if': function () { return $context.$data.popupData.showContent; } }; });
addToBindingsCache('template: { name: popupData.contentTemplate, afterRender: popupData.renderedHandler }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.popupData.contentTemplate, 'afterRender': $context.$data.popupData.renderedHandler }; } }; });
addToBindingsCache('dxSelectBox: { items: widget.dataSource, value: widget.value, onValueChanged: widget.onValueChanged, displayExpr: widget.displayExpr, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: widget.onCustomItemCreating, useItemTextAsTitle: true, width: 140, dropDownOptions: { container: getPopupContainer($element), position: { my: \'left top\', at: \'left bottom\', of: $element }, wrapperAttr: { class: \'dx-zoom-selectbox-popup-wrapper\' } }, tabIndex: \'-1\', inputAttr: widget.inputAttr }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.widget.dataSource, 'value': $context.$data.widget.value, 'onValueChanged': $context.$data.widget.onValueChanged, 'displayExpr': $context.$data.widget.displayExpr, 'displayCustomValue': true, 'acceptCustomValue': true, 'onCustomItemCreating': $context.$data.widget.onCustomItemCreating, 'useItemTextAsTitle': true, 'width': 140, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element), 'position': { 'my': 'left top', 'at': 'left bottom', 'of': $element }, 'wrapperAttr': { 'class': 'dx-zoom-selectbox-popup-wrapper' } }, 'tabIndex': '-1', 'inputAttr': $context.$data.widget.inputAttr }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', direction: \'horizontal\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'direction': 'horizontal', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
addToBindingsCache('keyDownActions: actionLists, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'keyDownActions': function () { return $context.$data.actionLists; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('click: function(s, e) { $parent.onClick($data.position); }', function ($context, $element) { return { 'click': function () { return function (s, e) { $context.$parent.onClick($context.$data.position); }; } }; });
addToBindingsCache('text: $data.displayText', function ($context, $element) { return { 'text': function () { return $context.$data.displayText; } }; });
addToBindingsCache('template: { name: \'dxrd-svg-preview-breadcrumbs_seperator\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-svg-preview-breadcrumbs_seperator' }; } }; });
addToBindingsCache('visible: active && visible, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'visible': function () { return $context.$data.active && $context.$data.visible; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('text: headerText', function ($context, $element) { return { 'text': function () { return $context.$data.headerText; } }; });
addToBindingsCache('dxTextBox: searchEditor', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.searchEditor; } }; });
addToBindingsCache('dxButton: buttons.searchButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.buttons.searchButton; } }; });
addToBindingsCache('dxCheckBox: matchCaseEditor', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.matchCaseEditor; } }; });
addToBindingsCache('dxCheckBox: matchWholeWordEditor', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.matchWholeWordEditor; } }; });
addToBindingsCache('attr: { id: searchResultHeaderId, \'aria-busy\': loading ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'id': $context.$data.searchResultHeaderId, 'aria-busy': $context.$data.loading ? 'true' : 'false' }; } }; });
addToBindingsCache('text: searchResultCount', function ($context, $element) { return { 'text': function () { return $context.$data.searchResultCount; } }; });
addToBindingsCache('text: resultsInText', function ($context, $element) { return { 'text': function () { return $context.$data.resultsInText; } }; });
addToBindingsCache('text: searchResultPageCount', function ($context, $element) { return { 'text': function () { return $context.$data.searchResultPageCount; } }; });
addToBindingsCache('text: resultsPagesText', function ($context, $element) { return { 'text': function () { return $context.$data.resultsPagesText; } }; });
addToBindingsCache('dxLoadIndicator: { visible: loading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.loading }; } }; });
addToBindingsCache('dxButton: buttons.upButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.buttons.upButton; } }; });
addToBindingsCache('dxButton: buttons.downButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.buttons.downButton; } }; });
addToBindingsCache('dxList: { dataSource: searchResultDataSource, pageLoadMode: \'scrollBottom\', focusStateEnabled:false, hoverStateEnabled:false, onItemRendered: onItemRendered, noDataText: \'\', encodeNoDataText: true }, attr: { \'aria-labelledby\': searchResultHeaderId }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.searchResultDataSource, 'pageLoadMode': 'scrollBottom', 'focusStateEnabled': false, 'hoverStateEnabled': false, 'onItemRendered': $context.$data.onItemRendered, 'noDataText': '', 'encodeNoDataText': true }; }, 'attr': function () { return { 'aria-labelledby': $context.$data.searchResultHeaderId }; } }; });
addToBindingsCache('dxAction: { model: data, action: itemClickAction }, attr: attr', function ($context, $element) { return { 'dxAction': function () { return { 'model': $context.$data.data, 'action': $context.$data.itemClickAction }; }, 'attr': function () { return $context.$data.attr; } }; });
addToBindingsCache('text: data.text', function ($context, $element) { return { 'text': function () { return $context.$data.data.text; } }; });
addToBindingsCache('text: info', function ($context, $element) { return { 'text': function () { return $context.$data.info; } }; });
addToBindingsCache('text: noResultText', function ($context, $element) { return { 'text': function () { return $context.$data.noResultText; } }; });
addToBindingsCache('visible: visible, css: cssClasses, dxMutationObserver: progressBarAccessibilityKeyboardHelper', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.cssClasses; }, 'dxMutationObserver': function () { return $context.$data.progressBarAccessibilityKeyboardHelper; } }; });
addToBindingsCache('style : { width: progress  + \'%\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$data.progress + '%' }; } }; });
addToBindingsCache('text: cancelButton.text, visible: cancelButton.visible, click: function() { cancelButton.action && cancelButton.action(); }', function ($context, $element) { return { 'text': function () { return $context.$data.cancelButton.text; }, 'visible': function () { return $context.$data.cancelButton.visible; }, 'click': function () { return function () { $context.$data.cancelButton.action && $context.$data.cancelButton.action(); }; } }; });
addToBindingsCache('text: model.headerText, visible: model.showHeader', function ($context, $element) { return { 'text': function () { return $context.$data.model.headerText; }, 'visible': function () { return $context.$data.model.showHeader; } }; });
addToBindingsCache('text: model.emptyText', function ($context, $element) { return { 'text': function () { return $context.$data.model.emptyText; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxValidationGroup: {}, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; }, 'dxValidationGroup': function () { return {}; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('visible: model.showButtons', function ($context, $element) { return { 'visible': function () { return $context.$data.model.showButtons; } }; });
addToBindingsCache('dxLoadIndicator: { visible: model.parametersLoading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.model.parametersLoading }; } }; });
addToBindingsCache('dxButton: $data', function ($context, $element) { return { 'dxButton': function () { return $context.$data; } }; });
addToBindingsCache('dxSelectBox: { dataSource: widget.dataSource, onValueChanged: widget.onValueChanged, value: widget.value, displayExpr: widget.displayExpr, useItemTextAsTitle: true, itemTemplate: widget.itemTemplate, searchMode: widget.searchMode, searchEnabled: widget.searchEnabled, searchTimeout: widget.searchTimeout, disabled: widget.disabled, dropDownOptions: { container: getPopupContainer($element), wrapperAttr: widget.wrapperAttr, }, tabIndex: \'-1\', inputAttr: widget.inputAttr }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.widget.dataSource, 'onValueChanged': $context.$data.widget.onValueChanged, 'value': $context.$data.widget.value, 'displayExpr': $context.$data.widget.displayExpr, 'useItemTextAsTitle': true, 'itemTemplate': $context.$data.widget.itemTemplate, 'searchMode': $context.$data.widget.searchMode, 'searchEnabled': $context.$data.widget.searchEnabled, 'searchTimeout': $context.$data.widget.searchTimeout, 'disabled': $context.$data.widget.disabled, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element), 'wrapperAttr': $context.$data.widget.wrapperAttr }, 'tabIndex': '-1', 'inputAttr': $context.$data.widget.inputAttr }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Document Map\', \'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Document Map', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap'); } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('treelist: treeListOptions', function ($context, $element) { return { 'treelist': function () { return $context.$data.treeListOptions; } }; });
addToBindingsCache('template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-tmplt', 'data': $context.$data.actionLists.toolbarItems }; } }; });
addToBindingsCache('if: listItems.length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.listItems.length > 1; } }; });
addToBindingsCache('foreach: listItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.listItems; } }; });
addToBindingsCache('if: $index() !== ($parent.listItems.length - 1)', function ($context, $element) { return { 'if': function () { return $context.$index() !== ($context.$parent.listItems.length - 1); } }; });
addToBindingsCache('if: $index() === ($parent.listItems.length - 1)', function ($context, $element) { return { 'if': function () { return $context.$index() === ($context.$parent.listItems.length - 1); } }; });
addToBindingsCache('with: model.getViewModel()', function ($context, $element) { return { 'with': function () { return $context.$data.model.getViewModel(); } }; });
addToBindingsCache('if: (searchResultCount > 0 || loading)', function ($context, $element) { return { 'if': function () { return ($context.$data.searchResultCount > 0 || $context.$data.loading); } }; });
addToBindingsCache('if: (searchCompleted && searchResultCount == 0)', function ($context, $element) { return { 'if': function () { return ($context.$data.searchCompleted && $context.$data.searchResultCount == 0); } }; });
addToBindingsCache('if: (model && !model.isEmpty)', function ($context, $element) { return { 'if': function () { return ($context.$data.model && !$context.$data.model.isEmpty); } }; });
addToBindingsCache('if: (!model || model.isEmpty)', function ($context, $element) { return { 'if': function () { return (!$context.$data.model || $context.$data.model.isEmpty); } }; });
addToBindingsCache('foreach: model.buttons', function ($context, $element) { return { 'foreach': function () { return $context.$data.model.buttons; } }; });
addToBindingsCache('if: model', function ($context, $element) { return { 'if': function () { return $context.$data.model; } }; });
addToBindingsCache('dxTemplate : { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('visible: reportPreview.previewVisible, cssArray: [ $data.rootStyle , { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl } ]', function ($context, $element) { return { 'visible': function () { return $context.$data.reportPreview.previewVisible; }, 'cssArray': function () { return [$context.$data.rootStyle, { 'dx-rtl': $context.$data.rtl, 'dx-ltr': !$context.$data.rtl }]; } }; });
addToBindingsCache('textCopier, css: { \'dx-rtl\': rtlReport, \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }', function ($context, $element) { return { 'textCopier': function () { return undefined; }, 'css': function () { return { 'dx-rtl': $context.$data.rtlReport, 'dxrp-editing-fields-hightlighted': $context.$data.editingFieldsHighlighted }; } }; });
addToBindingsCache('dxMutationObserver: previewBrickKeyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.previewBrickKeyboardHelper; } }; });
addToBindingsCache('autoFit: autoFitOptions, styleunit: { width: width, height: height }', function ($context, $element) { return { 'autoFit': function () { return $context.$data.autoFitOptions; }, 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; } }; });
addToBindingsCache('lazyImages: lazyImagesOptions', function ($context, $element) { return { 'lazyImages': function () { return $context.$data.lazyImagesOptions; } }; });
addToBindingsCache('styleunit: { \'width\': width, \'height\': height }, toView: { setPageActiveChangedEvent: setPageActiveChangedEvent }, css : { \'dxrd-report-preview-active\': active }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'toView': function () { return { 'setPageActiveChangedEvent': $context.$data.setPageActiveChangedEvent }; }, 'css': function () { return { 'dxrd-report-preview-active': $context.$data.active }; } }; });
addToBindingsCache('css: { \'dxrd-visually-hidden\': !!currentPage }', function ($context, $element) { return { 'css': function () { return { 'dxrd-visually-hidden': !!$context.$data.currentPage }; } }; });
addToBindingsCache('text: emptyDocumentCaption', function ($context, $element) { return { 'text': function () { return $context.$data.emptyDocumentCaption; } }; });
addToBindingsCache('attr: { \'aria-label\': $root.getLocalization(\'Clipboard\', \'ASPxReportsStringId.WebDocumentViewer_AriaClipboard\') }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$root.getLocalization('Clipboard', 'ASPxReportsStringId.WebDocumentViewer_AriaClipboard') }; } }; });
addToBindingsCache('dxViewerExport: $data', function ($context, $element) { return { 'dxViewerExport': function () { return $context.$data; } }; });
addToBindingsCache('with: progressBar', function ($context, $element) { return { 'with': function () { return $context.$data.progressBar; } }; });
addToBindingsCache('template: \'dxrd-preview-progress-bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-preview-progress-bar'; } }; });
addToBindingsCache('if: !showMultipagePreview', function ($context, $element) { return { 'if': function () { return !$context.$data.showMultipagePreview; } }; });
addToBindingsCache('with: currentPage', function ($context, $element) { return { 'with': function () { return $context.$data.currentPage; } }; });
addToBindingsCache('if: pageLoading || (!pageLoading && displayImageSrc)', function ($context, $element) { return { 'if': function () { return $context.$data.pageLoading || (!$context.$data.pageLoading && $context.$data.displayImageSrc); } }; });
addToBindingsCache('template: { name: \'dxrd-preview-page\', afterRender: function() { delayedInit() } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-page', 'afterRender': function () { $context.$data.delayedInit(); } }; } }; });
addToBindingsCache('if: showMultipagePreview && !!currentPage', function ($context, $element) { return { 'if': function () { return $context.$data.showMultipagePreview && !!$context.$data.currentPage; } }; });
addToBindingsCache('foreach: {data: pages, afterRender: function() { delayedInit() } }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.pages, 'afterRender': function () { $context.$data.delayedInit(); } }; } }; });
addToBindingsCache('lazy: { if: pageLoading || (!pageLoading && displayImageSrc) }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$data.pageLoading || (!$context.$data.pageLoading && $context.$data.displayImageSrc) }; } }; });
addToBindingsCache('template: \'dxrd-preview-page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-preview-page'; } }; });
addToBindingsCache('cacheElement: { action: cacheElement }, dxEllipsisEditor: { value: displayValue, readOnly: true, inputAttr: { \'aria-label\': _displayName, id: _editorInputId }, openOnFieldClick: true, buttonAction: function() { showPopup(); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': $context.$data.cacheElement }; }, 'dxEllipsisEditor': function () { return { 'value': $context.$data.displayValue, 'readOnly': true, 'inputAttr': { 'aria-label': $context.$data._displayName, 'id': $context.$data._editorInputId }, 'openOnFieldClick': true, 'buttonAction': function () { $context.$data.showPopup(); } }; } }; });
addToBindingsCache('dxPopup: getPopupSettings()', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.getPopupSettings(); } }; });
addToBindingsCache('dxScrollView: scrollViewOptions', function ($context, $element) { return { 'dxScrollView': function () { return $context.$data.scrollViewOptions; } }; });
addToBindingsCache('dxMutationObserver: dialogKeyboardHelper', function ($context, $element) { return { 'dxMutationObserver': function () { return $context.$data.dialogKeyboardHelper; } }; });
addToBindingsCache('attr: predefinedRanges.attr, dxScrollView: predefinedRanges.scrollViewOptions, dxMutationObserver: predefinedRanges.accessibilityKeyboardHelper', function ($context, $element) { return { 'attr': function () { return $context.$data.predefinedRanges.attr; }, 'dxScrollView': function () { return $context.$data.predefinedRanges.scrollViewOptions; }, 'dxMutationObserver': function () { return $context.$data.predefinedRanges.accessibilityKeyboardHelper; } }; });
addToBindingsCache('attr: { \'aria-selected\': selected }, css: { \'dxd-state-selected\': selected }, dxAction: { action: click }', function ($context, $element) { return { 'attr': function () { return { 'aria-selected': $context.$data.selected }; }, 'css': function () { return { 'dxd-state-selected': $context.$data.selected }; }, 'dxAction': function () { return { 'action': $context.$data.click }; } }; });
addToBindingsCache('dxCalendar: { value: value, onValueChanged: onValueChanged, cellTemplate: \'select_cell\', height: height, min: min }', function ($context, $element) { return { 'dxCalendar': function () { return { 'value': $context.$data.value, 'onValueChanged': $context.$data.onValueChanged, 'cellTemplate': 'select_cell', 'height': $context.$data.height, 'min': $context.$data.min }; } }; });
addToBindingsCache('css: { \'dxd-back-accented\': $parent.inRange(date) }', function ($context, $element) { return { 'css': function () { return { 'dxd-back-accented': $context.$parent.inRange($context.$data.date) }; } }; });
addToBindingsCache('dxrvDateRangeEditor: {value: value }', function ($context, $element) { return { 'dxrvDateRangeEditor': function () { return { 'value': $context.$data.value }; } }; });
addToBindingsCache('template: { name: popupTemplate, data: popupModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.popupTemplate, 'data': $context.$data.popupModel }; } }; });
addToBindingsCache('foreach: predefinedRanges.items', function ($context, $element) { return { 'foreach': function () { return $context.$data.predefinedRanges.items; } }; });
addToBindingsCache('dxTemplate:{ name:\'select_cell\' }', function () { return { dxTemplate: { name: 'select_cell' } }; });
addToBindingsCache('css: { \'dx-rtl\' : viewmodel.rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$data.viewmodel.rtl }; } }; });
addToBindingsCache('style: { \'display\': showHorizontally ? \'flex\' : \'block\' }', function ($context, $element) { return { 'style': function () { return { 'display': $context.$data.showHorizontally ? 'flex' : 'block' }; } }; });
addToBindingsCache('template: { name: \'dxrd-propertieseditor\', data: $data }, css: { \'dxrd-parameters-border\' : !$data.hideBorder, \'dxrd-parameters-horizontal\' : $data.showHorizontally, }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-propertieseditor', 'data': $context.$data }; }, 'css': function () { return { 'dxrd-parameters-border': !$context.$data.hideBorder, 'dxrd-parameters-horizontal': $context.$data.showHorizontally }; } }; });
addToBindingsCache('foreach: viewmodel.editors', function ($context, $element) { return { 'foreach': function () { return $context.$data.viewmodel.editors; } }; });
addToBindingsCache('dxTagBox: getOptions({ dataSource: dataSource, searchEnabled: true, useItemTextAsTitle: true, searchExpr: searchExpr || [\'displayValue\'], value: value, displayExpr: displayExpr || \'displayValue\', valueExpr: valueExpr || \'value\', multiline: false, showSelectionControls: true, showDropDownButton: !!showDropDownButton, selectAllMode: \'allPages\', selectedItems: selectedItems, inputAttr: { \'aria-label\': displayName, id: editorInputId }, disabled: disabled, selectAllText: selectAllText, placeholder: placeholder, maxDisplayedTags: maxDisplayedTags, showMultiTagOnly: true, dropDownOptions: { container: getPopupContainer($element), position: { boundary: getPopupContainer($element), collision: \'flipfit flipfit\', of: $element, at: \'bottom\', my: \'top\' } } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxTagBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.dataSource, 'searchEnabled': true, 'useItemTextAsTitle': true, 'searchExpr': $context.$data.searchExpr || ['displayValue'], 'value': $context.$data.value, 'displayExpr': $context.$data.displayExpr || 'displayValue', 'valueExpr': $context.$data.valueExpr || 'value', 'multiline': false, 'showSelectionControls': true, 'showDropDownButton': !!$context.$data.showDropDownButton, 'selectAllMode': 'allPages', 'selectedItems': $context.$data.selectedItems, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId }, 'disabled': $context.$data.disabled, 'selectAllText': $context.$data.selectAllText, 'placeholder': $context.$data.placeholder, 'maxDisplayedTags': $context.$data.maxDisplayedTags, 'showMultiTagOnly': true, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element), 'position': { 'boundary': $context.$data.getPopupContainer($element), 'collision': 'flipfit flipfit', 'of': $element, 'at': 'bottom', 'my': 'top' } } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'info': $context.$data.info, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName) }; } }; });
addToBindingsCache('dxdAccordion: { collapsed: collapsed, alwaysShow: alwaysShow, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed, 'alwaysShow': $context.$data.alwaysShow, 'setCollapsed': $context.$data.setCollapsed, 'getCollapsed': $context.$data.getCollapsed, 'setCollapsedChangedEvent': $context.$data.setCollapsedChangedEvent }; } }; });
addToBindingsCache('css: { \'dxrd-empty-header\': hideEditorHeader }', function ($context, $element) { return { 'css': function () { return { 'dxrd-empty-header': $context.$data.hideEditorHeader }; } }; });
addToBindingsCache('attr: { role: \'treeitem\', \'id\': isComplexEditor && headerId, \'aria-owns\': isComplexEditor && contentId, \'aria-expanded\': isComplexEditor && (alwaysShow || !collapsed ? \'true\' : \'false\') }, css: { \'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor, \'dxrd-vertical-label\': editorOptions && editorOptions.hasVerticalLabel }', function ($context, $element) { return { 'attr': function () { return { 'role': 'treeitem', 'id': $context.$data.isComplexEditor && $context.$data.headerId, 'aria-owns': $context.$data.isComplexEditor && $context.$data.contentId, 'aria-expanded': $context.$data.isComplexEditor && ($context.$data.alwaysShow || !$context.$data.collapsed ? 'true' : 'false') }; }, 'css': function () { return { 'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented': $context.$data.isComplexEditor, 'dxrd-vertical-label': $context.$data.editorOptions && $context.$data.editorOptions.hasVerticalLabel }; } }; });
addToBindingsCache('styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\', \'dxd-back-secondary\': isGroupLabel, \'dx-accordion-hide-collapsing-image\': alwaysShow }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-accordion-empty': $context.$data.templateName === 'dx-emptyHeader', 'dxd-back-secondary': $context.$data.isGroupLabel, 'dx-accordion-hide-collapsing-image': $context.$data.alwaysShow }; } }; });
addToBindingsCache('searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$data.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName, for: editorInputId }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: ko.unwrap(isPropertyModified) ? \'Bold\' : \'\'}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName, 'for': $context.$data.editorInputId }; }, 'css': function () { return { 'dx-property-required': $context.$data.isRequired }; }, 'style': function () { return { 'fontWeight': $context.ko.unwrap($context.$data.isPropertyModified) ? 'Bold' : '' }; } }; });
addToBindingsCache('ifnot: $data.hideEditorHeader', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hideEditorHeader; } }; });
addToBindingsCache('ifnot: $data.alwaysShow', function ($context, $element) { return { 'ifnot': function () { return $context.$data.alwaysShow; } }; });
addToBindingsCache('zoom: painter.scale', function ($context, $element) { return { 'zoom': function () { return $context.$data.painter.scale; } }; });
addToBindingsCache('dxPopup: { width: 48, height: \'auto\', wrapperAttr: { class: \'dx-picture-editing-active\' }, position:{ my: \'left top\', at: \'right top\', boundary: getPopupContainer($element), of: element, collision: \'fit fit\', offset: \'1 -1\' }, container: shadingEnabled ? \'.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen\' : getPopupContainer($element), target: getPopupContainer($element), showTitle: false, onContentReady: onContentReady, showCloseButton: false, animation: {}, shading: false, visible: true }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 48, 'height': 'auto', 'wrapperAttr': { 'class': 'dx-picture-editing-active' }, 'position': { 'my': 'left top', 'at': 'right top', 'boundary': $context.$data.getPopupContainer($element), 'of': $context.$data.element, 'collision': 'fit fit', 'offset': '1 -1' }, 'container': $context.$data.shadingEnabled ? '.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen' : $context.$data.getPopupContainer($element), 'target': $context.$data.getPopupContainer($element), 'showTitle': false, 'onContentReady': $context.$data.onContentReady, 'showCloseButton': false, 'animation': {}, 'shading': false, 'visible': true }; } }; });
addToBindingsCache('dxclick: action, attr: { title: title }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
addToBindingsCache('template: { name: icon }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.icon }; } }; });
addToBindingsCache('zoom: scale', function ($context, $element) { return { 'zoom': function () { return $context.$data.scale; } }; });
addToBindingsCache('dxPopover: { width: width, height: height, wrapperAttr: { class: \'dx-picture-edit-popup-content\' }, hideOnOutsideClick: hideOnOutsideClick, onShown: onShown, onHidden: onHidden, onContentReady: onContentReady, position: { my: \'left top\', at: \'right top\', boundary: $root.getPopupContainer($element), of: getPositionTarget($element), collision: \'flipfit fit\', offset: \'-10 0\' }, container: getPositionTarget($element), showTitle: false, target: getPositionTarget($element), showCloseButton: false, shading: false, animation: {}, visible: visible }', function ($context, $element) { return { 'dxPopover': function () { return { 'width': $context.$data.width, 'height': $context.$data.height, 'wrapperAttr': { 'class': 'dx-picture-edit-popup-content' }, 'hideOnOutsideClick': $context.$data.hideOnOutsideClick, 'onShown': $context.$data.onShown, 'onHidden': $context.$data.onHidden, 'onContentReady': $context.$data.onContentReady, 'position': { 'my': 'left top', 'at': 'right top', 'boundary': $context.$root.getPopupContainer($element), 'of': $context.$data.getPositionTarget($element), 'collision': 'flipfit fit', 'offset': '-10 0' }, 'container': $context.$data.getPositionTarget($element), 'showTitle': false, 'target': $context.$data.getPositionTarget($element), 'showCloseButton': false, 'shading': false, 'animation': {}, 'visible': $context.$data.visible }; } }; });
addToBindingsCache('text: brushWidthText', function ($context, $element) { return { 'text': function () { return $context.$data.brushWidthText; } }; });
addToBindingsCache('dxSlider: { min: 1, max: 9, value: lineWidth, onValueChanged: onLineWidthChanged, label: { visible: true }, tooltip: { enabled: true, showMode: \'always\', position: \'bottom\' } }', function ($context, $element) { return { 'dxSlider': function () { return { 'min': 1, 'max': 9, 'value': $context.$data.lineWidth, 'onValueChanged': $context.$data.onLineWidthChanged, 'label': { 'visible': true }, 'tooltip': { 'enabled': true, 'showMode': 'always', 'position': 'bottom' } }; } }; });
addToBindingsCache('text: brushColorText', function ($context, $element) { return { 'text': function () { return $context.$data.brushColorText; } }; });
addToBindingsCache('foreach: colors', function ($context, $element) { return { 'foreach': function () { return $context.$data.colors; } }; });
addToBindingsCache('css: { selected: isSelected }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; } }; });
addToBindingsCache('style: { background: value }, dxclick: action', function ($context, $element) { return { 'style': function () { return { 'background': $context.$data.value }; }, 'dxclick': function () { return $context.$data.action; } }; });
addToBindingsCache('text: sizeModeText', function ($context, $element) { return { 'text': function () { return $context.$data.sizeModeText; } }; });
addToBindingsCache('foreach: { data: sizeModeValues }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.sizeModeValues }; } }; });
addToBindingsCache('css: { selected: isSelected }, template: iconTemplate, dxclick: action, attr: { title: attrTitle }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; }, 'template': function () { return $context.$data.iconTemplate; }, 'dxclick': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.attrTitle }; } }; });
addToBindingsCache('text: alignmentText', function ($context, $element) { return { 'text': function () { return $context.$data.alignmentText; } }; });
addToBindingsCache('foreach: { data: alignmentValues }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.alignmentValues }; } }; });
addToBindingsCache('css: { selected: isSelected }, template: iconTemplate, dxclick: action, , attr: { title: attrTitle }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; }, 'template': function () { return $context.$data.iconTemplate; }, 'dxclick': function () { return $context.$data.action; }, '': function () { return undefined; }, 'attr': function () { return { 'title': $context.$data.attrTitle }; } }; });
addToBindingsCache('styleunit: { width: contentWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentWidth }; } }; });
addToBindingsCache('dxTextBox: { value: filter, valueChangeEvent: \'keyup\', onValueChanged: onFilterChanged, placeholder: searchPlaceholder, showClearButton: true  }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.filter, 'valueChangeEvent': 'keyup', 'onValueChanged': $context.$data.onFilterChanged, 'placeholder': $context.$data.searchPlaceholder, 'showClearButton': true }; } }; });
addToBindingsCache('styleunit: { width: contentWidth }, dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentWidth }; }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; } }; });
addToBindingsCache('styleunit: { width: width + 10 }, visible: visible, click: action', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width + 10 }; }, 'visible': function () { return $context.$data.visible; }, 'click': function () { return $context.$data.action; } }; });
addToBindingsCache('styleunit: { width: width, height: height }, style: { backgroundImage: \'url(\' + (url || data) + \')\' }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'style': function () { return { 'backgroundImage': 'url(' + ($context.$data.url || $context.$data.data) + ')' }; } }; });
addToBindingsCache('searchHighlighting: { text: text, textToSearch: filter }, attr: { title: text }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.text, 'textToSearch': $context.$data.filter }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('template: { if: $data.template, name: $data.template, data: $data.templateOptions }', function ($context, $element) { return { 'template': function () { return { 'if': $context.$data.template, 'name': $context.$data.template, 'data': $context.$data.templateOptions }; } }; });
addToBindingsCache('template: { name: contentTemplate, data: contentData }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.contentData }; } }; });
addToBindingsCache('template: \'dx-picture-editing-imagespicker\'', function ($context, $element) { return { 'template': function () { return 'dx-picture-editing-imagespicker'; } }; });
addToBindingsCache('foreach: images', function ($context, $element) { return { 'foreach': function () { return $context.$data.images; } }; });
addToBindingsCache('if: $data.text', function ($context, $element) { return { 'if': function () { return $context.$data.text; } }; });
addToBindingsCache('if: $parent.filterEnabled', function ($context, $element) { return { 'if': function () { return $context.$parent.filterEnabled; } }; });
addToBindingsCache('ifnot: $parent.filterEnabled', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.filterEnabled; } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, useItemTextAsTitle: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'useItemTextAsTitle': true, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxSelectBox: getOptions({ dataSource: values, value: value, itemTemplate: \'signature\', displayExpr: \'displayName\', valueExpr: \'key\', showClearButton: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { minWidth: \'300px\', container: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.value, 'itemTemplate': 'signature', 'displayExpr': 'displayName', 'valueExpr': 'key', 'showClearButton': true, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'minWidth': '300px', 'container': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('attr: { src: image }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.image }; } }; });
addToBindingsCache('attr: { title: value }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.value }; } }; });
addToBindingsCache('text: label', function ($context, $element) { return { 'text': function () { return $context.$data.label; } }; });
addToBindingsCache('text: value', function ($context, $element) { return { 'text': function () { return $context.$data.value; } }; });
addToBindingsCache('if: image', function ($context, $element) { return { 'if': function () { return $context.$data.image; } }; });
addToBindingsCache('ifnot: image', function ($context, $element) { return { 'ifnot': function () { return $context.$data.image; } }; });
addToBindingsCache('template: \'dxrd-svg-preview-signature_img_placeholder\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-signature_img_placeholder'; } }; });
addToBindingsCache('foreach: fields', function ($context, $element) { return { 'foreach': function () { return $context.$data.fields; } }; });
addToBindingsCache('dxTemplate: { name: \'signature\' }', function () { return { dxTemplate: { name: 'signature' } }; });
