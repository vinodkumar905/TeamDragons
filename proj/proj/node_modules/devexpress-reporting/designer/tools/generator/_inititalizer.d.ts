/**
* DevExpress HTML/JS Reporting (designer\tools\generator\_inititalizer.d.ts)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ActionLists, CommonDesignerGenerator, ContextActionsSettings, ControlProperties, ControlsHelperSettings, GroupObject, IActionsProvider, IDesignerPart, InlineTextEdit, IPropertiesAccessibilityProvider, ObjectExplorerProvider, SelectionSettings } from '@devexpress/analytics-core/analytics-internal';
import { ControlsFactory, ISerializationInfoArray, TabInfo, TabPanel, ToolboxItem } from '@devexpress/analytics-core/analytics-utils';
import { IStandardPattern } from '@devexpress/analytics-core/analytics-widgets-internal';
import { IDataSourceWizardConnectionStrings } from '@devexpress/analytics-core/analytics-wizard';
import { FederatedQueriesHelper, ManageFederatedQueriesEditor, MasterDetailEditor } from '@devexpress/analytics-core/queryBuilder-widgets-internal';
import * as ko from 'knockout';
import { IEnumType } from '../../../common/customTypes';
import { IPreviewCustomizationHandler } from '../../../viewer/utils/initializer';
import { ReportItemsProvider } from '../../internal/reportExplorer/_reportItemsProvider';
import { ICultureInfoList, ICustomControlTypeInfo, ICustomExpressionInfo, IReportDesignerCustomizationHandler, IReportDesignerErrorPanelSettings, IReportDesignerParameterEditingSettings, IReportWizardSettings } from '../../utils/inititalizer';
import { DataBindingModeValue, DefaultCrossTabControlValue } from '../../utils/settings';
import { IReportDesignerContext, IReportDesignerRootContext } from './reportDesignerContext';
import { ReportMenuSettings } from './_reportMenuSettings';
import { IReportDesignerGeneratorSettings, IReportUriSettings, PreviewOptions, ReportDialogSettings, WizardsInitializerSettings } from './_settings';
export declare class ReportDesignerInitializer extends CommonDesignerGenerator<IReportDesignerRootContext> {
    options: IReportDesignerGeneratorSettings;
    private _navigation;
    private _selection;
    private _onAfterRenderCallbacks;
    private _sqlDataSourceEditor;
    private _federationDataSourceEditor;
    private _jsonDataSourceEditor;
    private _objectDataSourceEditor;
    private _dataSourceActionProvider;
    private _previewUri;
    private _dataBiningMode;
    private _defaultCrossTabControl;
    private _converters;
    private _parameters;
    private _calculatedFieldsSource;
    private _watermarks;
    private _convertBindingsToExpressions;
    private _reportcontext;
    get reportContext(): ko.Computed<IReportDesignerContext>;
    private _allowMDI;
    private _callbacks;
    private _customMergeEngine;
    private _accessibilityProvider;
    get buildingModel(): IReportDesignerRootContext;
    private get _designerCallbacks();
    getModel(): IReportDesignerRootContext;
    subscribeIncomeReport(report: ko.Observable | ko.Computed, reportUrl?: ko.Observable<string> | ko.Computed<string>, dataSourceRefs?: any[], knownEnums?: Array<IEnumType>, _parameterEditingSettings?: IReportDesignerParameterEditingSettings): ReportDesignerInitializer;
    private _addDisposable;
    private _tryAddScriptEditor;
    private _getControls;
    private _createEmptyReportItemsProvider;
    addReportDialogs(func: (settings: ReportDialogSettings) => void): ReportDesignerInitializer;
    addErrorPanelViewModel(element: HTMLElement, options: IReportDesignerErrorPanelSettings): ReportDesignerInitializer;
    addNavigateToControl(element?: Element): ReportDesignerInitializer;
    addFlagsAndInitProperties(element?: Element): ReportDesignerInitializer;
    addPreview(options: PreviewOptions): ReportDesignerInitializer;
    addReportUrls(subreports: object): ReportDesignerInitializer;
    private _wrapActionProvider;
    initializeFieldListActionProviders(func?: () => IActionsProvider[]): ReportDesignerInitializer;
    initializeCalculatedFieldsSource(): ReportDesignerInitializer;
    initializeWatermarks(): ReportDesignerInitializer;
    initializeFieldListItemsExtenders(): ReportDesignerInitializer;
    initializeParameters(_parameterEditingSettings?: IReportDesignerParameterEditingSettings): ReportDesignerInitializer;
    initializeFieldListProvider(): ReportDesignerInitializer;
    initializeReportItemsProvider(): ReportDesignerInitializer;
    initializeDataBindingsProvider(): ReportDesignerInitializer;
    initializeDisplayNameProvider(): ReportDesignerInitializer;
    initializeExpressionDisplayNameProvider(): ReportDesignerInitializer;
    initializeDataSourceHelper(): ReportDesignerInitializer;
    addSelection(func?: (settings: SelectionSettings) => void): ReportDesignerInitializer;
    addToolboxItems(items?: () => ToolboxItem[]): ReportDesignerInitializer;
    addGroupedToolboxItems(): ReportDesignerInitializer;
    addControlProperties(editors: ISerializationInfoArray, groups: GroupObject, accessibilityProvider?: IPropertiesAccessibilityProvider): ReportDesignerInitializer;
    createControlProperties(editors: ISerializationInfoArray, groups: GroupObject, accessibilityProvider?: IPropertiesAccessibilityProvider): ControlProperties;
    addMenu(func?: (settings: ReportMenuSettings) => void): ReportDesignerInitializer;
    addControlsHelper(func?: (settings: ControlsHelperSettings) => void): ReportDesignerInitializer;
    addSmartTagModel(): ReportDesignerInitializer;
    setControlsHelperFilter(filter: (control: any) => boolean): ReportDesignerInitializer;
    private _createPropertiesTab;
    private _createExpressionsTab;
    private _createReportExplorerTab;
    private _createFieldListTab;
    addTabPanel(panel?: () => TabPanel, addTabInfo?: () => TabInfo[]): ReportDesignerInitializer;
    private _createActionsStorage;
    private _updateCallback;
    addOpenReportMethod(): ReportDesignerInitializer;
    addShowPreviewMethod(): ReportDesignerInitializer;
    initializeUIEffects(applyBindings: boolean, element: HTMLElement): ReportDesignerInitializer;
    private _createNewReportFromWizardState;
    private _createNewViaWizardAction;
    private _createLocalizationModeAction;
    private _createDesignInReportWizardAction;
    private _createMultiQueryDataSourceWizardAction;
    private _customizeDesignerActions;
    private _patchReportBeforeRedesign;
    addContextActions(func?: (contextActions: ContextActionsSettings) => void): ReportDesignerInitializer;
    addActionList(actionListFunc?: () => ActionLists): ReportDesignerInitializer;
    private _createChartDesignerPart;
    private _createWizardPart;
    addActivatedExpressionEditor(): ReportDesignerInitializer;
    addParts(func?: (parts: any) => IDesignerPart[]): ReportDesignerInitializer;
    addDefaultAddons(addons?: IDesignerPart[]): ReportDesignerInitializer;
    tryAddSqlDataSourceEditorAddon(relationsEditor?: ko.Observable<MasterDetailEditor>): ReportDesignerInitializer;
    tryAddFederationDataSourceEditorAddon(relationsEditor?: ko.Observable<MasterDetailEditor>, manageQueriesEditor?: ko.Observable<ManageFederatedQueriesEditor>, queriesPopupHelper?: ko.Observable<FederatedQueriesHelper>): ReportDesignerInitializer;
    tryAddScriptEditorAddon(isScriptsDisabled: boolean): ReportDesignerInitializer;
    tryAddInlineRichTextEdit(): ReportDesignerInitializer;
    onContextChanged(subreports?: object, func?: (context: IReportDesignerContext) => void): ReportDesignerInitializer;
    configurateRtl(rtl: boolean): ReportDesignerInitializer;
    configureReportStorageRegistration(reportStorageIsRegister: boolean, allowMDI: boolean): ReportDesignerInitializer;
    applyUri(uriSettings: IReportUriSettings): ReportDesignerInitializer;
    initBindingMode(dataBiningMode: string, convertBindingsToExpressions: string): ReportDesignerInitializer;
    initDefaultCrossTabControl(defaultCrossTabControl: DefaultCrossTabControlValue): ReportDesignerInitializer;
    registerControls(dataBindingMode: DataBindingModeValue, reportItemsProvider: ko.Observable<ReportItemsProvider> | ko.Computed<ReportItemsProvider>): ReportDesignerInitializer;
    registerCustomControls(controls: ICustomControlTypeInfo[]): ReportDesignerInitializer;
    registerCustomExpressions(globalExpressions: ICustomExpressionInfo[], reportExpressions: ICustomExpressionInfo[]): ReportDesignerInitializer;
    addCallbacks(callbacks: {
        designer?: IReportDesignerCustomizationHandler;
        preview?: IPreviewCustomizationHandler;
    }): ReportDesignerInitializer;
    addProcessErrorCallback(processError?: (e: any) => void): ReportDesignerInitializer;
    runCustomizeToolboxEvent(customizeToolbox?: (controlsStore: import("../../../dx-reportdesigner").ControlsFactory) => void): ReportDesignerInitializer;
    initCultureInfo(cultureInfoList: ICultureInfoList): ReportDesignerInitializer;
    updateFont(fontSet: string[] | {
        [key: string]: string;
    }): ReportDesignerInitializer;
    initFormatStringPatterns(formatStringData: {
        standardPatterns: {
            [key: string]: IStandardPattern;
        };
        customPatterns: {
            [key: string]: Array<string>;
        };
    }): ReportDesignerInitializer;
    addPopularProperties(controlsFactory: ControlsFactory, accessibilityProvider?: IPropertiesAccessibilityProvider): ReportDesignerInitializer;
    addInlineTextEdit(func?: () => InlineTextEdit): ReportDesignerInitializer;
    addStylesProjection(styles?: ko.PureComputed<ko.ObservableArray<import("../../../dx-reportdesigner").StyleModel>>): ReportDesignerInitializer;
    addFormattingRulesProjection(rules?: ko.PureComputed<ko.ObservableArray<import("../../../dx-reportdesigner").FormattingRule>>): ReportDesignerInitializer;
    addReportExplorerProvider(reportExplorerProvider?: ObjectExplorerProvider): ReportDesignerInitializer;
    addControlsProjection(controlsHelper?: import("@devexpress/analytics-core/analytics-internal").DesignControlsHelper): ReportDesignerInitializer;
    addBandsProjection(controlsHelper?: import("@devexpress/analytics-core/analytics-internal").DesignControlsHelper): ReportDesignerInitializer;
    addWizardRunner(): ReportDesignerInitializer;
    addWizards(connectionStrings: IDataSourceWizardConnectionStrings, wizardSettings: IReportWizardSettings, customizeSettingsFunc: (settings: WizardsInitializerSettings) => void): ReportDesignerInitializer;
    addLocalizationEditor(): ReportDesignerInitializer;
    addStaticContext(): ReportDesignerInitializer;
    tryApplyBindings(applyBindings: boolean, element: HTMLElement): ReportDesignerInitializer;
    dispose(): void;
    constructor(options: IReportDesignerGeneratorSettings);
}
