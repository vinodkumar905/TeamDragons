/**
* DevExpress Analytics (core\widgets\booleanEditor.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Editor } from '../../property-grid/widgets/editor';
import { addDisposeCallback } from '../../serializer/_internal';
import { extend } from '../../serializer/_utils';
export class BooleanEditor extends Editor {
    constructor(info, level, parentDisabled, textToSearch, popupService, popover, engineType) {
        super(info, level, parentDisabled, textToSearch, popupService, popover, engineType);
    }
    _checkBoxInitializedHandler(element) {
        const checkBoxElement = (element.jquery || element.dxRenderer) ? element[0] : element;
        const labels = checkBoxElement?.closest('.dx-field')?.getElementsByTagName('label');
        const labelElement = Array.from(labels).filter(elt => elt.getAttribute('for') === this.editorInputId)[0];
        if (labelElement) {
            this._disposeLabelSubscription && this._disposeLabelSubscription();
            const eventType = 'click';
            const eventListener = () => checkBoxElement.dispatchEvent(new Event(eventType));
            labelElement.addEventListener(eventType, eventListener);
            this._disposeLabelSubscription = () => {
                labelElement.removeEventListener(eventType, eventListener);
                this._disposeLabelSubscription = undefined;
            };
            addDisposeCallback(labelElement, () => this._disposeLabelSubscription && this._disposeLabelSubscription());
        }
    }
    getOptions(templateOptions) {
        const extendedOptions = this._get('info', 'peek').editor.extendedOptions;
        const editorCustomization = { onInitialized: e => this._checkBoxInitializedHandler(e.element) };
        return extend(true, {}, templateOptions, this.editorOptions, extendedOptions, editorCustomization);
    }
}
