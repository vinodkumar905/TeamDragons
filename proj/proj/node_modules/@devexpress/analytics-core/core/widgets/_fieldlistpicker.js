/**
* DevExpress Analytics (core\widgets\_fieldlistpicker.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import registerComponent from 'devextreme/core/component_registrator';
import 'devextreme/ui/drop_down_box';
import dxDropDownBox from 'devextreme/ui/drop_down_box';
import * as ko from 'knockout';
import { extend } from '../../serializer/_utils';
import { $dx, $unwrap } from '../utils/_jqueryUtils';
export class dxFieldListPicker extends dxDropDownBox {
    updateOptions(options) {
        options.showClearButton = true;
    }
    constructor($element, options) {
        super($element, extend(options, { showClearButton: true, dropDownOptions: { resizeEnabled: true } }));
        this._path = ko.observable('');
        this._value = ko.observable('');
        this._parentViewport = null;
        this._itemsProvider = ko.observable(null);
        this._hasDisplayNameOption = false;
        this._defaultPosition = null;
        const _$element = $dx($element);
        _$element.addClass('dx-fieldlistpicker');
        this.option('path') && this._path(this.option('path')?.toString());
        this.option('value') && this._value(this.option('value'));
        this.option('itemsProvider') && this._itemsProvider(this.option('itemsProvider'));
        this.option('valueChangeEvent', 'change');
        this.option('openOnFieldClick', this.option('acceptCustomValue') === false);
        this._parentViewport = _$element.parents('.dx-designer-viewport')[0];
        if ('displayValue' in options) {
            this._hasDisplayNameOption = true;
            this.option('displayValue', options.displayValue);
            this._setTitle(this.option('displayValue')?.toString());
        }
    }
    _showDropDown() {
        if (this['_popup']) {
            const $element = $dx(this.element());
            this['_popup'].option('width', $element.width());
            const popupPosition = extend(true, {}, this._defaultPosition, { boundary: this._parentViewport, boundaryOffset: '0 20', collision: 'none flip' });
            this['_popup'].option('position', popupPosition);
            this['_popup'].option('height', 'auto');
            this['_popup'].option('maxHeight', this._getMaxHeight());
            this['_popup'].repaint();
            $unwrap(this['_popup'].content()).style.height = 'auto';
            this['_popup'].option('onResize', (e) => {
                setTimeout(() => {
                    const content = $unwrap(e.component.content());
                    const scrollView = content?.querySelector('.dx-scrollable-container');
                    scrollView && (scrollView.style.maxHeight = content.style.height);
                }, 300);
            });
            this['_popup']._renderPosition();
        }
    }
    _getMaxHeight() {
        const $element = $dx(this.element()), offset = $element.offset(), windowHeight = window.innerHeight, maxHeight = Math.max(offset.top, windowHeight - offset.top - $element.outerHeight());
        return Math.min(.5 * windowHeight, maxHeight);
    }
    _closeOutsideDropDownHandler(e, ignoreContainerClicks) { super['_closeOutsideDropDownHandler'].apply(this, [e, true]); }
    _hideOnBlur() { return false; }
    _popupConfig() {
        const dxPolymorphWidget = this.option('integrationOptions')['templates']['dx-polymorph-widget'];
        const popuConfig = super['_popupConfig'].apply(this);
        this._defaultPosition = popuConfig.position;
        return extend(popuConfig, {
            container: this._parentViewport,
            contentTemplate: dxPolymorphWidget && dxPolymorphWidget._template,
            hideOnOutsideClick: true
        });
    }
    _setTitle(text) {
        if (this.option('openOnFieldClick')) {
            $dx(this.element()).attr('title', text);
        }
    }
    _renderDisplayText(newValue) { super['_renderDisplayText'].apply(this, [newValue]); }
    _optionChanged(args) {
        const name = args.name, newValue = args.value;
        switch (name) {
            case 'value':
                this._value(newValue);
                if (!this._hasDisplayNameOption)
                    this._renderDisplayText(newValue);
                setTimeout(() => {
                    this.option('opened', false);
                }, 50);
                if (!!this.option('onValueChanged'))
                    this.option('onValueChanged')({
                        value: newValue
                    });
                break;
            case 'path':
                this._path(newValue);
                break;
            case 'itemsProvider':
                this._itemsProvider(newValue);
                break;
            case 'displayValue':
                this._renderDisplayText(newValue);
                this._setTitle(newValue);
                break;
            default:
                super['_optionChanged'].apply(this, arguments);
                if (name === 'opened' && newValue) {
                    this['_showDropDown']();
                }
        }
    }
    _clearValueHandler() {
        $unwrap(this['_input']()).value = null;
        super['_clearValueHandler'].apply(this, arguments);
    }
    _renderPopupContent() {
        super['_renderPopupContent'].apply(this, arguments);
        const selectedPath = ko.pureComputed({
            read: () => {
                return this._path() ? this._path() + '.' + this._value() : this._value();
            },
            write: (newVal) => {
                if (this._path() && this._path().length > 0) {
                    this._value(newVal.substr(this._path().length + 1));
                    this.option('value', this._value());
                }
                else {
                    this._value(newVal);
                    this.option('value', this._value());
                }
            }
        });
        const element = document.createElement('div');
        element.classList.add('dx-treelist-wrapper');
        const scroll = this['_createComponent'](element, 'dxScrollView', { scrollByThumb: true });
        const self = this;
        const $scrollContent = $dx(scroll['content']());
        const currentElement = $unwrap(this.element());
        $scrollContent.append('<div data-bind="treelist: options"></div>');
        const context = ko.contextFor(currentElement);
        const treeListController = this.option('treeListController');
        const options = ko.computed(() => {
            return {
                itemsProvider: this._itemsProvider(), onItemsVisibilityChanged: () => {
                    if (self['_popup']) {
                        self['_popup']._renderPosition();
                    }
                }, selectedPath: selectedPath, treeListController: treeListController, path: this._path
            };
        });
        const childContext = context.createChildContext({ options });
        ko.applyBindingsToDescendants(childContext, $scrollContent.get(0));
        $dx(this['_popup'].content()).append(element);
    }
}
registerComponent('dxFieldListPicker', dxFieldListPicker);
