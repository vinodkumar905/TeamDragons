/**
* DevExpress Analytics (core\tools\contextMenuProvider.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Disposable } from '../../serializer/disposable';
import { $dx } from '../utils/_jqueryUtils';
import { getTemplate } from '../../property-grid/widgets/templateUtils';
export class ContextMenuProvider extends Disposable {
    constructor({ actions, target, getClickActionParams, contextMenusEnabled, fullScreen }) {
        super();
        this.hideOnOutsideClick = true;
        this.actions = actions;
        this.target = target;
        const getDataSource = () => {
            return this.actions().reduce((result, item) => {
                if (item.group) {
                    return [...result, {
                            text: item.group,
                            items: item.items.filter(item => (item.isContextMenuAction ?? true))
                        }];
                }
                else if (item.isContextMenuAction ?? true) {
                    return [...result, item];
                }
                return result;
            }, []);
        };
        this.dataSource = ko.observable(getDataSource());
        this.addDisposable(this.actions.subscribe((newVal) => {
            this.dataSource(getDataSource());
        }));
        const updateOverlayContainer = (isFullScreen) => {
            if (isFullScreen)
                this.overlayContainer = document.getElementsByClassName('dx-designer-viewport')[0];
            else
                this.overlayContainer = document.getElementsByClassName('dx-blazor-reporting')[0] ?? document.body;
            if (this.component?._overlay?._positionController?.$container[0])
                this.component._overlay._positionController.$container[0] = this.overlayContainer;
        };
        if (fullScreen) {
            updateOverlayContainer(fullScreen());
            this.addDisposable(fullScreen.subscribe((isFullScreen) => {
                updateOverlayContainer(isFullScreen);
            }));
        }
        this.itemTemplate = (itemData, index, element) => {
            if (itemData.hasSeparator) {
                const seperator = document.createElement('div');
                seperator.style.borderBottomWidth = '1px';
                seperator.style.borderBottomStyle = 'solid';
                seperator.style.color = '#E6E6E6';
                seperator.style.width = '100%';
                $dx(element).parent().prepend(seperator);
            }
            $dx(element).css({ padding: '3px 5px 5px' });
            return getTemplate('dxrd-context-menu-item');
        };
        this.onItemClick = (e) => {
            if ((!('disabled' in e.itemData) || !ko.unwrap(e.itemData.disabled)) && e.itemData.clickAction) {
                const params = getClickActionParams && getClickActionParams();
                e.itemData.clickAction(params);
                e.component.hide();
            }
        };
        this.onInitialized = (e) => {
            this.component = e.component;
        };
        this.onOptionChanged = (e) => {
            if (e.name === 'visible' && e.value)
                if (e.component._overlay?._positionController?.$container[0]) {
                    const container = document.getElementsByClassName('dx-designer-viewport')[0];
                    e.component._overlay._positionController.$container[0] = this.overlayContainer ?? container;
                }
        };
        this.disabled = ko.observable(!contextMenusEnabled());
        this._disposables.push(contextMenusEnabled.subscribe((newValue => {
            this.disabled(!newValue);
        })));
    }
    hide() {
        this.component && this.component.hide();
    }
    dispose() {
        super.dispose();
        this.overlayContainer = null;
    }
}
