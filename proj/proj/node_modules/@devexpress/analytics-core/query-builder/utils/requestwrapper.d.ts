/**
* DevExpress Analytics (query-builder\utils\requestwrapper.d.ts)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { IAjaxSettings } from '../../core/utils/_utils.ajax';
import { SqlDataConnection } from '../dataSource/sql/sqlDataConnection';
import { DBTable } from '../dataSource/dbTable';
import { SqlDataSource } from '../dataSource/sql/sqlDataSource';
import { JsonDataSource } from '../dataSource/json/jsonDataSource';
import { IParameter } from '../wizard/internal/_utils';
import { FederationDataSource } from '../dataSource/federation/federationDataSource';
import { DxPromise } from '../../core/utils/_jqueryUtils';
export interface ISelectStatementResponse {
    sqlSelectStatement: string;
    errorMessage: string;
}
export interface IUriJsonSourceValidationResult {
    isUriValid: boolean;
    faultMessage?: string;
}
export interface IRebuildSchemaResponse {
    resultSchemaJSON: string;
    connectionParameters?: string;
}
export declare class RequestWrapper {
    sendRequest<T = any>(action: string, arg: string): DxPromise<T>;
    _sendRequest<T = any>(settings: IAjaxSettings): DxPromise<T>;
    getDbSchema({ connection, tables, getViews, getTables }: {
        connection: SqlDataConnection;
        tables?: DBTable[];
        getViews?: boolean;
        getTables?: boolean;
    }): DxPromise<{
        dbSchemaJSON: string;
    }>;
    getDbStoredProcedures(connection: SqlDataConnection): DxPromise<{
        dbSchemaJSON: string;
    }>;
    getSelectStatement(connection: SqlDataConnection, queryJSON: string): DxPromise<ISelectStatementResponse>;
    getDataPreview(connection: SqlDataConnection, queryJSON: string): DxPromise<{
        dataPreviewJSON: string;
    }>;
    rebuildResultSchema(dataSource: SqlDataSource, queryName?: string, relationsEditing?: boolean, parameters?: IParameter[], dataSerializationExtension?: string): DxPromise<IRebuildSchemaResponse>;
    getFederationResultSchema(dataSource: FederationDataSource): DxPromise<{
        resultSchemaJSON: string;
    }>;
    validateJsonUri(jsonDataSource: JsonDataSource): DxPromise<IUriJsonSourceValidationResult>;
    saveJsonSource(connectionName: string, jsonDataSource: JsonDataSource): DxPromise<string>;
    getJsonSchema(jsonDataSource: JsonDataSource, parameters: IParameter[]): DxPromise<{
        jsonSchemaJSON: string;
    }>;
    getObjectTypeDescriptions(context: string): DxPromise<{
        objectDataSourceInfoJson: string;
    }>;
}
