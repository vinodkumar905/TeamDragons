/**
* DevExpress Analytics (query-builder\wizard\pages\chooseSqlConnectionPage.d.ts)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/// <reference types="jquery" />
import * as ko from 'knockout';
import { DxPromise } from '../../../core/utils/_jqueryUtils';
import { ISqlDataSourceWizardState } from '../dataSourceWizardState';
import { IConnectionStringDefinition } from '../internal/initializer';
import { PageFactory } from '../pageFactory';
import { WizardPageBase } from './wizardPageBase';
export declare class ChooseSqlConnectionPage extends WizardPageBase<ISqlDataSourceWizardState, ISqlDataSourceWizardState> {
    private _getSqlConnectionsCallback?;
    constructor(connectionStrings: ko.ObservableArray<IConnectionStringDefinition>, _getSqlConnectionsCallback?: () => DxPromise<IConnectionStringDefinition[]>);
    initialize(state: ISqlDataSourceWizardState): JQuery.Promise<any, any, any>;
    canNext(): boolean;
    commit(): JQuery.Promise<ISqlDataSourceWizardState, any, any>;
    _connectionStrings: ko.ObservableArray<IConnectionStringDefinition>;
    _selectedConnectionString: ko.ObservableArray<IConnectionStringDefinition>;
}
export declare function _registerChooseSqlConnectionPage(factory: PageFactory, connectionStrings: ko.ObservableArray<IConnectionStringDefinition>, getSqlConnectionsCallback?: () => DxPromise<IConnectionStringDefinition[]>): void;
