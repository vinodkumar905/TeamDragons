/**
* DevExpress Analytics (query-builder\wizard\popupWizard.d.ts)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { BaseWizard } from './wizard';
import { IItemsProvider } from '../../widgets/utils';
export declare class PopupWizard extends BaseWizard {
    static _getLoadPanelViewModel(element: HTMLElement, observableVisible: ko.Observable<boolean>): {
        animation: {
            show: {
                type: string;
                from: number;
                to: number;
                duration: number;
            };
            hide: {
                type: string;
                from: number;
                to: number;
                duration: number;
            };
        };
        deferRendering: boolean;
        message: any;
        visible: ko.Observable<boolean>;
        shading: boolean;
        shadingColor: string;
        position: {
            of: Element;
        };
        container: Element;
    };
    constructor(pageFactory: any, finishCallback?: any);
    start(): void;
    height: ko.Observable<number>;
    width: ko.Observable<number>;
    _extendCssClass: string;
    _container: (el: HTMLElement) => HTMLElement;
    itemsProvider: ko.Observable<IItemsProvider>;
    nextButton: {
        text: any;
        disabled: ko.Computed<boolean>;
        onClick: () => void;
    };
    cancelButton: {
        text: any;
        onClick: () => void;
    };
    previousButton: {
        text: any;
        disabled: ko.Computed<boolean>;
        onClick: () => void;
    };
    finishButton: {
        text: any;
        type: string;
        disabled: ko.Computed<boolean>;
        onClick: () => void;
    };
    _wizardPopupPosition(element: HTMLElement): {
        of: HTMLElement;
    };
    _loadPanelViewModel(element: HTMLElement): {
        animation: {
            show: {
                type: string;
                from: number;
                to: number;
                duration: number;
            };
            hide: {
                type: string;
                from: number;
                to: number;
                duration: number;
            };
        };
        deferRendering: boolean;
        message: any;
        visible: ko.Observable<boolean>;
        shading: boolean;
        shadingColor: string;
        position: {
            of: Element;
        };
        container: Element;
    };
    _getLoadPanelViewModel(element: HTMLElement, observableVisible: ko.Observable<boolean>): {
        animation: {
            show: {
                type: string;
                from: number;
                to: number;
                duration: number;
            };
            hide: {
                type: string;
                from: number;
                to: number;
                duration: number;
            };
        };
        deferRendering: boolean;
        message: any;
        visible: ko.Observable<boolean>;
        shading: boolean;
        shadingColor: string;
        position: {
            of: Element;
        };
        container: Element;
    };
    _titleTemplate: string;
    title: string;
}
