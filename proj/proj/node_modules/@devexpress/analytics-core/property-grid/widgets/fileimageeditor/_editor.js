/**
* DevExpress Analytics (property-grid\widgets\fileimageeditor\_editor.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import registerComponent from 'devextreme/core/component_registrator';
import * as $ from 'jquery';
import { getLocalization } from '../../localization/localization_utils';
import { dxEllipsisEditor } from '../ellipsiseditor/_editor';
import { uploadFile } from '../internal/_utils';
const editor_prefix = 'dx-fileimage', EDITOR_INPUT_WRAPPER_CLASS = editor_prefix + '-input-wrapper';
export class dxFileImagePicker extends dxEllipsisEditor {
    constructor(element, options) {
        options.placeholder = options.placeholder || getLocalization('(none)', 'DxDesignerStringId.None');
        super(element, options);
    }
    _getDisplayValue() {
        const knownPlaceholders = {
            'Image': 'AnalyticsCoreStringId.ImagePicker_Placeholder',
            'File': 'AnalyticsCoreStringId.FilePicker_Placeholder'
        };
        const placeholderId = this.option('placeholderId');
        if (this.option('value') && placeholderId)
            return getLocalization(placeholderId, knownPlaceholders[placeholderId]);
        else
            return this.option('value');
    }
    _handleResult(result) {
        if (this.option('useFormat')) {
            this.option('format', result.format);
        }
        this.option('value', result.content);
    }
    _renderInput(inputContainer) {
        const $inputContainer = inputContainer && $.fn.constructor(inputContainer) || $.fn.constructor('<div />');
        $inputContainer.addClass(EDITOR_INPUT_WRAPPER_CLASS);
        this['_inputContainer'] = $inputContainer.get(0);
        $.fn.constructor(this.element()).append(this['_inputContainer']);
        super['_renderInput'].apply(this, [inputContainer]);
    }
    _attachButtonEvents() {
        if (!this._onClick) {
            this._onClick = (e) => {
                e.stopPropagation();
                e.preventDefault();
                uploadFile({
                    accept: this.option('accept')?.toString() || 'image/*',
                    readMode: this.option('readMode')?.toString()
                }).done((result) => {
                    this._handleResult(result);
                });
            };
        }
        this._$button.off('click', this._onClick);
        if (!this.option('disabled')) {
            this._$button.on('click', this._onClick);
        }
    }
    _renderValue() {
        this.option('text', this._getDisplayValue());
        super['_renderValue'].apply(this);
    }
}
registerComponent('dxFileImagePicker', dxFileImagePicker);
