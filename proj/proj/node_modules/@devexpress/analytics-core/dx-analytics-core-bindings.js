/**
* DevExpress Analytics (dx-analytics-core-bindings.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addToBindingsCache } from './property-grid/widgets/internal/_bindingsCache';
addToBindingsCache('template: \'dxrd-svg-properties-borders-none\', css: { \'dxd-state-active\': (!bottom() && !left() && !top() && !right()), \'dxrd-disabled-button\': disabled }, click: function() { setNone() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-none'; }, 'css': function () { return { 'dxd-state-active': (!$context.$data.bottom() && !$context.$data.left() && !$context.$data.top() && !$context.$data.right()), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setNone(); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-all\', css: { \'dxd-state-active\': (bottom() && left() && top() && right()), \'dxrd-disabled-button\': disabled  }, click: function() { setAll() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-all'; }, 'css': function () { return { 'dxd-state-active': ($context.$data.bottom() && $context.$data.left() && $context.$data.top() && $context.$data.right()), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setAll(); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-left'; }, 'css': function () { return { 'dxd-state-active': $context.$data.left(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('left'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-top'; }, 'css': function () { return { 'dxd-state-active': $context.$data.top(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('top'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-right'; }, 'css': function () { return { 'dxd-state-active': $context.$data.right(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('right'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-bottom'; }, 'css': function () { return { 'dxd-state-active': $context.$data.bottom(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('bottom'); }; } }; });
addToBindingsCache('with: value', function ($context, $element) { return { 'with': function () { return $context.$data.value; } }; });
addToBindingsCache('dxBorderEditor: $data', function ($context, $element) { return { 'dxBorderEditor': function () { return $context.$data; } }; });
addToBindingsCache('dxColorBox: { value: displayValue, onValueChanged: onValueChanged, placeholder: $root.getLocalization(\'(Not set)\', \'ReportStringId.UD_PropertyGrid_NotSetText\'), editAlphaChannel: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flipfit\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } }, inputAttr: { \'aria-label\': displayName, id: editorInputId } }', function ($context, $element) { return { 'dxColorBox': function () { return { 'value': $context.$data.displayValue, 'onValueChanged': $context.$data.onValueChanged, 'placeholder': $context.$root.getLocalization('(Not set)', 'ReportStringId.UD_PropertyGrid_NotSetText'), 'editAlphaChannel': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flipfit', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }; } }; });
addToBindingsCache('dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.dataBindingsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() })', function ($context, $element) { return { 'dxExpressionEditor': function () { return $context.$data.getOptions({ 'options': $context.$data.value, 'fieldListProvider': $context.$root.dataBindingsProvider, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }); } }; });
addToBindingsCache('if: value', function ($context, $element) { return { 'if': function () { return $context.$data.value; } }; });
addToBindingsCache('dxFieldListPicker: { path: path, onValueChanged: onValueChanged, acceptCustomValue: true, value: value, displayValue: $displayName, itemsProvider: $root.dataBindingsProvider, treeListController: treeListController, disabled: disabled, inputAttr: {id: editorInputId} }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'path': $context.$data.path, 'onValueChanged': $context.$data.onValueChanged, 'acceptCustomValue': true, 'value': $context.$data.value, 'displayValue': $context.$data.$displayName, 'itemsProvider': $context.$root.dataBindingsProvider, 'treeListController': $context.$data.treeListController, 'disabled': $context.$data.disabled, 'inputAttr': { 'id': $context.$data.editorInputId } }; } }; });
addToBindingsCache('displayNameExtender: { path: path, dataMember: value, getPath: getPath, getDataMember: getDataMember }', function ($context, $element) { return { 'displayNameExtender': function () { return { 'path': $context.$data.path, 'dataMember': $context.$data.value, 'getPath': $context.$data.getPath, 'getDataMember': $context.$data.getDataMember }; } }; });
addToBindingsCache('if: visible', function ($context, $element) { return { 'if': function () { return $context.$data.visible; } }; });
addToBindingsCache('dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$root.dataBindingsProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }; } }; });
addToBindingsCache('dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsGroupProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$root.dataBindingsGroupProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }; } }; });
addToBindingsCache('dxFormatEditor: { value: value, disabled: disabled, actions: $data.actions, customPatterns: $data.customPatterns }', function ($context, $element) { return { 'dxFormatEditor': function () { return { 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'actions': $context.$data.actions, 'customPatterns': $context.$data.customPatterns }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: (validationRules || []) }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': ($context.$data.validationRules || []) }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: viewmodel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.viewmodel }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: getProperties() }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties() }; } }; });
addToBindingsCache('if: $data.visible() && editorCreated', function ($context, $element) { return { 'if': function () { return $context.$data.visible() && $context.$data.editorCreated; } }; });
addToBindingsCache('dxTextAlignmentEditor: $data', function ($context, $element) { return { 'dxTextAlignmentEditor': function () { return $context.$data; } }; });
addToBindingsCache('treelist: options', function ($context, $element) { return { 'treelist': function () { return $context.$data.options; } }; });
addToBindingsCache('if: options', function ($context, $element) { return { 'if': function () { return $context.$data.options; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[0].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[0].transform() }; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[1].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[1].transform() }; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[2].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[2].transform() }; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[3].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[3].transform() }; } }; });
addToBindingsCache('css: { \'dxrd-context-menu-container\': selected() }, template: templateName, click: function(_, e) { $data.clickHandler($root.selection, e); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: function(_, e) { $data.reportContextMenuHandler && $data.reportContextMenuHandler($root.selection, e); }} : null', function ($context, $element) { return { 'css': function () { return { 'dxrd-context-menu-container': $context.$data.selected() }; }, 'template': function () { return $context.$data.templateName; }, 'click': function () { return function (_, e) { $context.$data.clickHandler($context.$root.selection, e); }; }, 'event': function () { return $context.$root.ContextMenusEnabled && $context.$root.ContextMenusEnabled() ? { 'contextmenu': function (_, e) { $context.$data.reportContextMenuHandler && $context.$data.reportContextMenuHandler($context.$root.selection, e); } } : null; } }; });
addToBindingsCache('cssArray: [surfaceClass($element), { \'dx-accessibility\': $data.accessibilityCompliant, \'dx-rtl\': $data.rtl } ]', function ($context, $element) { return { 'cssArray': function () { return [$context.$data.surfaceClass($element), { 'dx-accessibility': $context.$data.accessibilityCompliant, 'dx-rtl': $context.$data.rtl }]; } }; });
addToBindingsCache('visible: (!designMode || designMode()), cssArray: [rootStyle, { \'dx-rtl\' : rtl, \'dx-ltr\': !rtl }]', function ($context, $element) { return { 'visible': function () { return (!$context.$data.designMode || $context.$data.designMode()); }, 'cssArray': function () { return [$context.$data.rootStyle, { 'dx-rtl': $context.$data.rtl, 'dx-ltr': !$context.$data.rtl }]; } }; });
addToBindingsCache('ifnot: isLoading', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isLoading; } }; });
addToBindingsCache('with: surface', function ($context, $element) { return { 'with': function () { return $context.$data.surface; } }; });
addToBindingsCache('if: isLoading', function ($context, $element) { return { 'if': function () { return $context.$data.isLoading; } }; });
addToBindingsCache('foreach: parts', function ($context, $element) { return { 'foreach': function () { return $context.$data.parts; } }; });
addToBindingsCache('template: { name: templateName, data: viewModel || model }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data.viewModel || $context.$data.model }; } }; });
addToBindingsCache('if: ($data.addOns)', function ($context, $element) { return { 'if': function () { return ($context.$data.addOns); } }; });
addToBindingsCache('foreach: addOns', function ($context, $element) { return { 'foreach': function () { return $context.$data.addOns; } }; });
addToBindingsCache('template: { name: templateName, data: model }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data.model }; } }; });
addToBindingsCache('text: verticalString', function ($context, $element) { return { 'text': function () { return $context.$data.verticalString; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\', \'Vertical\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-top'; }, 'css': function () { return { 'dxd-state-active': $context.$data.top(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('top', 'Vertical'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-middle\', css: { \'dxd-state-active\': middle(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'middle\', \'Vertical\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-middle'; }, 'css': function () { return { 'dxd-state-active': $context.$data.middle(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('middle', 'Vertical'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\', \'Vertical\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-bottom'; }, 'css': function () { return { 'dxd-state-active': $context.$data.bottom(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('bottom', 'Vertical'); }; } }; });
addToBindingsCache('text: horizontalString', function ($context, $element) { return { 'text': function () { return $context.$data.horizontalString; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-left'; }, 'css': function () { return { 'dxd-state-active': $context.$data.left(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('left', 'Horizontal'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-center\', css: { \'dxd-state-active\': center(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'center\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-center'; }, 'css': function () { return { 'dxd-state-active': $context.$data.center(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('center', 'Horizontal'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-right'; }, 'css': function () { return { 'dxd-state-active': $context.$data.right(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('right', 'Horizontal'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-justify\', css: { \'dxd-state-active\': justify(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'justify\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-justify'; }, 'css': function () { return { 'dxd-state-active': $context.$data.justify(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('justify', 'Horizontal'); }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: togglePopoverVisible, disabled: disabled, icon: ko.unwrap($data.imageTemplateName), iconClass: ko.unwrap($data.imageClassName) }, attr: { id: id, title: text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.togglePopoverVisible, 'disabled': $context.$data.disabled, 'icon': $context.ko.unwrap($context.$data.imageTemplateName), 'iconClass': $context.ko.unwrap($context.$data.imageClassName) }; }, 'attr': function () { return { 'id': $context.$data.id, 'title': $context.$data.text }; } }; });
addToBindingsCache('dxPopup: { width: 235, height: \'auto\', position: { my: $root.rtl ? \'left top\': \'right top\', at: \'bottom\', of: (\'#\' + id) }, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, container: ($data.getContainer || function(_e, selector) { return selector; })($element, \'.dxrd-action-items-container\'), shading: false, visible: popoverVisible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 235, 'height': 'auto', 'position': { 'my': $context.$root.rtl ? 'left top' : 'right top', 'at': 'bottom', 'of': ('#' + $context.$data.id) }, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'container': ($context.$data.getContainer || function (_e, selector) { return selector; })($element, '.dxrd-action-items-container'), 'shading': false, 'visible': $context.$data.popoverVisible }; } }; });
addToBindingsCache('dxclick: clickAction, css: { \'dxrd-disabled-button\': disabled }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.clickAction; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled }; } }; });
addToBindingsCache('css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }', function ($context, $element) { return { 'css': function () { return $context.ko.unwrap($context.$data.imageClassName); }, 'template': function () { return { 'name': $context.ko.unwrap($context.$data.imageTemplateName), 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('if: $data.contentTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.contentTemplate; } }; });
addToBindingsCache('template: contentTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.contentTemplate; } }; });
addToBindingsCache('if: !$data.contentTemplate', function ($context, $element) { return { 'if': function () { return !$context.$data.contentTemplate; } }; });
addToBindingsCache('foreach: actions', function ($context, $element) { return { 'foreach': function () { return $context.$data.actions; } }; });
addToBindingsCache('styleunit: { top: $data.top, left: $data.left, width: $data.width, height: $data.height }, css: { \'dxrd-locked\': $data.isLocked }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.top, 'left': $context.$data.left, 'width': $context.$data.width, 'height': $context.$data.height }; }, 'css': function () { return { 'dxrd-locked': $context.$data.isLocked }; } }; });
addToBindingsCache('styleunit: { left: $data.left, top: $data.top, width: $data.width, height: $data.height }, css: $data.className', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.left, 'top': $context.$data.top, 'width': $context.$data.width, 'height': $context.$data.height }; }, 'css': function () { return $context.$data.className; } }; });
addToBindingsCache('template: { name: $data.template, data: $data.data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data.data }; } }; });
addToBindingsCache('css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
addToBindingsCache('text: text, attr: { title: text }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('foreach: $data.controls()', function ($context, $element) { return { 'foreach': function () { return $context.$data.controls(); } }; });
addToBindingsCache('with: $parent.customData()', function ($context, $element) { return { 'with': function () { return $context.$parent.customData(); } }; });
addToBindingsCache('dxclick: function(e) { if(stopPropagation) { stopPropagation = false; } else { toggleAppMenu() } }, template: \'dxrd-svg-menu-menu\', css: {\'dxd-state-active\': appMenuVisible }', function ($context, $element) { return { 'dxclick': function () { return function (e) { if ($context.$data.stopPropagation) {
        $context.$data.stopPropagation = false;
    }
    else {
        $context.$data.toggleAppMenu();
    } }; }, 'template': function () { return 'dxrd-svg-menu-menu'; }, 'css': function () { return { 'dxd-state-active': $context.$data.appMenuVisible }; } }; });
addToBindingsCache('dxPopup: { width: 250, wrapperAttr: { class: \'dxd-menu-back-color dxd-back-primary2\' }, height: \'100%\' , position: $data.rtl ? { my: \'right top\' , at: \'left top\' , offset: \'-10 0\' } : { my: \'left top\' , at: \'right top\' , offset: \'10 0\' }, showTitle: false, showCloseButton: false, container: getMenuPopupContainer($element), target: getMenuPopupTarget($element), animation: {}, hideOnOutsideClick: function(e) { var buttonClassName = \'dxrd-menu-button-image\'; var parentClassList = e.target.parentNode && e.target.parentNode.parentNode && e.target.parentNode.parentNode.classList; stopPropagation = (e.target.classList && e.target.classList.contains(buttonClassName)) || (parentClassList && parentClassList.contains(buttonClassName)); return true; }, shading: false, focusStateEnabled: false, visible: appMenuVisible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 250, 'wrapperAttr': { 'class': 'dxd-menu-back-color dxd-back-primary2' }, 'height': '100%', 'position': $context.$data.rtl ? { 'my': 'right top', 'at': 'left top', 'offset': '-10 0' } : { 'my': 'left top', 'at': 'right top', 'offset': '10 0' }, 'showTitle': false, 'showCloseButton': false, 'container': $context.$data.getMenuPopupContainer($element), 'target': $context.$data.getMenuPopupTarget($element), 'animation': {}, 'hideOnOutsideClick': function (e) { var buttonClassName = 'dxrd-menu-button-image'; var parentClassList = e.target.parentNode && e.target.parentNode.parentNode && e.target.parentNode.parentNode.classList; $context.$data.stopPropagation = (e.target.classList && e.target.classList.contains(buttonClassName)) || (parentClassList && parentClassList.contains(buttonClassName)); return true; }, 'shading': false, 'focusStateEnabled': false, 'visible': $context.$data.appMenuVisible }; } }; });
addToBindingsCache('dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled }, visible: visible', function ($context, $element) { return { 'dxclick': function () { return function (e) { if ($context.$data.disabled && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$root.toggleAppMenu();
        $context.$data.clickAction($context.$root.model(), e);
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('text: $data.displayText && $data.displayText() || text, attr: { title: $data.displayText && $data.displayText() || text}', function ($context, $element) { return { 'text': function () { return $context.$data.displayText && $context.$data.displayText() || $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('visible: $data.hasSeparator', function ($context, $element) { return { 'visible': function () { return $context.$data.hasSeparator; } }; });
addToBindingsCache('foreach: actionLists.menuItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.actionLists.menuItems; } }; });
addToBindingsCache('dxdAccordion: { collapsed: collapsed }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed }; } }; });
addToBindingsCache('css: { \'dxrd-group-header-collapsed\': collapsed() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-group-header-collapsed': $context.$data.collapsed() }; } }; });
addToBindingsCache('template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; }, 'css': function () { return { 'dx-image-expanded': !$context.$data.collapsed() }; } }; });
addToBindingsCache('text: $root.actionsGroupTitle()', function ($context, $element) { return { 'text': function () { return $context.$root.actionsGroupTitle(); } }; });
addToBindingsCache('dxclick: function() { if($data.disabled && !$data.disabled() || !$data.disabled) { clickAction($root.editableObject()); } }, css: { \'dxrd-disabled-button\': $data.disabled && $data.disabled() }, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible)', function ($context, $element) { return { 'dxclick': function () { return function () { if ($context.$data.disabled && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$data.clickAction($context.$root.editableObject());
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled && $context.$data.disabled() }; }, 'visible': function () { return ($context.ko.unwrap($context.$data.visible) == undefined) || $context.ko.unwrap($context.$data.visible); } }; });
addToBindingsCache('css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data }; } }; });
addToBindingsCache('visible: items.some(x => !x.visible || ko.unwrap(x.visible))', function ($context, $element) { return { 'visible': function () { return $context.$data.items.some(x => !x.visible || $context.ko.unwrap(x.visible)); } }; });
addToBindingsCache('text: group', function ($context, $element) { return { 'text': function () { return $context.$data.group; } }; });
addToBindingsCache('if: popularVisible', function ($context, $element) { return { 'if': function () { return $context.$data.popularVisible; } }; });
addToBindingsCache('foreach: (contextActions || [])', function ($context, $element) { return { 'foreach': function () { return ($context.$data.contextActions || []); } }; });
addToBindingsCache('if: $data.templateName && !isContextMenuAction', function ($context, $element) { return { 'if': function () { return $context.$data.templateName && !$context.$data.isContextMenuAction; } }; });
addToBindingsCache('template: templateName', function ($context, $element) { return { 'template': function () { return $context.$data.templateName; } }; });
addToBindingsCache('if: !$data.templateName && !isContextMenuAction', function ($context, $element) { return { 'if': function () { return !$context.$data.templateName && !$context.$data.isContextMenuAction; } }; });
addToBindingsCache('with: popularProperties', function ($context, $element) { return { 'with': function () { return $context.$data.popularProperties; } }; });
addToBindingsCache('if: groupActionsVisible', function ($context, $element) { return { 'if': function () { return $context.$data.groupActionsVisible; } }; });
addToBindingsCache('foreach: (groupActions || [])', function ($context, $element) { return { 'foreach': function () { return ($context.$data.groupActions || []); } }; });
addToBindingsCache('foreach: (items || [])', function ($context, $element) { return { 'foreach': function () { return ($context.$data.items || []); } }; });
addToBindingsCache('template: { name: $data.templateName, if: $data.templateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'if': $context.$data.templateName }; } }; });
addToBindingsCache('if: !$data.templateName', function ($context, $element) { return { 'if': function () { return !$context.$data.templateName; } }; });
addToBindingsCache('css: { \'dx-property-grid-search-collapsed\': !isSearching() }', function ($context, $element) { return { 'css': function () { return { 'dx-property-grid-search-collapsed': !$context.$data.isSearching() }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': isSearching }, dxButtonWithTemplate: { onClick: switchSearchBox, icon: \'dxrd-svg-properties-search\', iconClass: \'image-search\' }, attr: { title: $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\') }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.isSearching }; }, 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.switchSearchBox, 'icon': 'dxrd-svg-properties-search', 'iconClass': 'image-search' }; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Search', 'ASPxReportsStringId.SearchDialog_Header') }; } }; });
addToBindingsCache('dxTextBox: { value: textToSearch, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }, cacheElement: { action: function(element) { searchBox(element); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.textToSearch, 'valueChangeEvent': 'keyup', 'placeholder': $context.$data.searchPlaceholder(), 'showClearButton': true }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.searchBox(element); } }; } }; });
addToBindingsCache('visible: active && visible', function ($context, $element) { return { 'visible': function () { return $context.$data.active && $context.$data.visible; } }; });
addToBindingsCache('text: text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('css: { \'dx-property-grid-search-collapsed\': isSearching }', function ($context, $element) { return { 'css': function () { return { 'dx-property-grid-search-collapsed': $context.$data.isSearching }; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: focusedItem, displayExpr: displayExpr, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$root.controlsStore.dataSource, 'value': $context.$data.focusedItem, 'displayExpr': $context.$data.displayExpr, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('css: { \'dxd-state-active dxd-state-no-hover\': !isSortingByGroups() }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(false); }, icon: \'dxrd-svg-properties-sortingbyalphabet\', iconClass: \'image-sortingbyalphabet\' }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active dxd-state-no-hover': !$context.$data.isSortingByGroups() }; }, 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.isSortingByGroups(false); }, 'icon': 'dxrd-svg-properties-sortingbyalphabet', 'iconClass': 'image-sortingbyalphabet' }; } }; });
addToBindingsCache('css: { \'dxd-state-active dxd-state-no-hover\': isSortingByGroups }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(true); }, icon: \'dxrd-svg-properties-sortingbygroups\', iconClass: \'image-sortingbygroups\' }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active dxd-state-no-hover': $context.$data.isSortingByGroups }; }, 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.isSortingByGroups(true); }, 'icon': 'dxrd-svg-properties-sortingbygroups', 'iconClass': 'image-sortingbygroups' }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; } }; });
addToBindingsCache('visible: isSortingByGroups', function ($context, $element) { return { 'visible': function () { return $context.$data.isSortingByGroups; } }; });
addToBindingsCache('visible: visible', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('text: displayName()', function ($context, $element) { return { 'text': function () { return $context.$data.displayName(); } }; });
addToBindingsCache('dxLoadIndicator: { visible: !editorsCreated() }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': !$context.$data.editorsCreated() }; } }; });
addToBindingsCache('visible: editorsCreated', function ($context, $element) { return { 'visible': function () { return $context.$data.editorsCreated; } }; });
addToBindingsCache('visible: !isSortingByGroups()', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSortingByGroups(); } }; });
addToBindingsCache('dxLoadIndicator: { visible: !allEditorsCreated() }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': !$context.$data.allEditorsCreated() }; } }; });
addToBindingsCache('visible: allEditorsCreated', function ($context, $element) { return { 'visible': function () { return $context.$data.allEditorsCreated; } }; });
addToBindingsCache('dxPopup: { width: 250, height: \'auto\', position: $data.rtl ? { my: \'left top\', at: \'right top\', of: popupService.target, collision: \'flipfit\' } : { my: \'right top\', at: \'left top\', of: popupService.target, collision: \'flipfit\' }, container: $root.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, visible: popupService.visible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 250, 'height': 'auto', 'position': $context.$data.rtl ? { 'my': 'left top', 'at': 'right top', 'of': $context.$data.popupService.target, 'collision': 'flipfit' } : { 'my': 'right top', 'at': 'left top', 'of': $context.$data.popupService.target, 'collision': 'flipfit' }, 'container': $context.$root.getPopupContainer($element), 'target': $context.$data.popupService.target, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'shading': false, 'visible': $context.$data.popupService.visible }; } }; });
addToBindingsCache('text: popupService.title, visible: popupService.title', function ($context, $element) { return { 'text': function () { return $context.$data.popupService.title; }, 'visible': function () { return $context.$data.popupService.title; } }; });
addToBindingsCache('dxMenu: { wrapperAttr: { class: \'dxd-button-back-color\' }, disabled: popupService.disabled, dataSource: popupService.actions, displayExpr: \'title\', cssClass: \'dxrd-editor-menu\', orientation: \'vertical\', showFirstSubmenuMode: \'onHover\', onSubmenuShowing: function(e) { e.submenu._overlay.option(\'container\', $root.getPopupContainer($element)) } }', function ($context, $element) { return { 'dxMenu': function () { return { 'wrapperAttr': { 'class': 'dxd-button-back-color' }, 'disabled': $context.$data.popupService.disabled, 'dataSource': $context.$data.popupService.actions, 'displayExpr': 'title', 'cssClass': 'dxrd-editor-menu', 'orientation': 'vertical', 'showFirstSubmenuMode': 'onHover', 'onSubmenuShowing': function (e) { e.submenu._overlay.option('container', $context.$root.getPopupContainer($element)); } }; } }; });
addToBindingsCache('dxclick: action', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; } }; });
addToBindingsCache('attr: { title: title }, text: title', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.title }; }, 'text': function () { return $context.$data.title; } }; });
addToBindingsCache('visible: $data.items && $data.items.length', function ($context, $element) { return { 'visible': function () { return $context.$data.items && $context.$data.items.length; } }; });
addToBindingsCache('dxPopover: { container: getPopupContainer($element), target: target, position: \'bottom\', showCloseButton: false, onHiding: onHiding, hideOnOutsideClick: true, hideOnParentScroll: true, width: \'350px\', visible: visible }', function ($context, $element) { return { 'dxPopover': function () { return { 'container': $context.$data.getPopupContainer($element), 'target': $context.$data.target, 'position': 'bottom', 'showCloseButton': false, 'onHiding': $context.$data.onHiding, 'hideOnOutsideClick': true, 'hideOnParentScroll': true, 'width': '350px', 'visible': $context.$data.visible }; } }; });
addToBindingsCache('text: data', function ($context, $element) { return { 'text': function () { return $context.$data.data; } }; });
addToBindingsCache('if: $data.innerTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.innerTemplate; } }; });
addToBindingsCache('template: $data.innerTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.innerTemplate; } }; });
addToBindingsCache('with: model', function ($context, $element) { return { 'with': function () { return $context.$data.model; } }; });
addToBindingsCache('if: $root.controlsStore.visible()', function ($context, $element) { return { 'if': function () { return $context.$root.controlsStore.visible(); } }; });
addToBindingsCache('template: \'dx-propertygrid-searchbox\'', function ($context, $element) { return { 'template': function () { return 'dx-propertygrid-searchbox'; } }; });
addToBindingsCache('template: { name: \'dxrd-group-actions\', data: { groupActions: $root.contextGroupActions, groupActionsVisible: $root.groupActionsVisible() } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-group-actions', 'data': { 'groupActions': $context.$root.contextGroupActions, 'groupActionsVisible': $context.$root.groupActionsVisible() } }; } }; });
addToBindingsCache('template: { name: \'dxrd-top-grid\', data: { contextActions: $root.contextActions, popularProperties: $root.popularProperties, collapsed: ko.observable(false), popularVisible: $root.popularVisible() && isSortingByGroups(), actionsGroupTitle: $root.actionsGroupTitle } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-top-grid', 'data': { 'contextActions': $context.$root.contextActions, 'popularProperties': $context.$root.popularProperties, 'collapsed': $context.ko.observable(false), 'popularVisible': $context.$root.popularVisible() && $context.$data.isSortingByGroups(), 'actionsGroupTitle': $context.$root.actionsGroupTitle } }; } }; });
addToBindingsCache('foreach: groups', function ($context, $element) { return { 'foreach': function () { return $context.$data.groups; } }; });
addToBindingsCache('ifnot: editorsCreated', function ($context, $element) { return { 'ifnot': function () { return $context.$data.editorsCreated; } }; });
addToBindingsCache('if: $data.editorsRendered()', function ($context, $element) { return { 'if': function () { return $context.$data.editorsRendered(); } }; });
addToBindingsCache('foreach: editors', function ($context, $element) { return { 'foreach': function () { return $context.$data.editors; } }; });
addToBindingsCache('template: editorTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.editorTemplate; } }; });
addToBindingsCache('if: ($index() === $parent.editors().length - 1 && $parent.editorsCreated(true))', function ($context, $element) { return { 'if': function () { return ($context.$index() === $context.$parent.editors().length - 1 && $context.$parent.editorsCreated(true)); } }; });
addToBindingsCache('foreach: $data.getEditors()', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(); } }; });
addToBindingsCache('if: ($index() === $parent._editors().length - 1 && $parent.allEditorsCreated(true))', function ($context, $element) { return { 'if': function () { return ($context.$index() === $context.$parent._editors().length - 1 && $context.$parent.allEditorsCreated(true)); } }; });
addToBindingsCache('template: \'dx-propertygrid-popupservice\'', function ($context, $element) { return { 'template': function () { return 'dx-propertygrid-popupservice'; } }; });
addToBindingsCache('template: { name: \'dx-propertygrid-popoverservice\', if: popover, data: popover.getViewModel() }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertygrid-popoverservice', 'if': $context.$data.popover, 'data': $context.$data.popover.getViewModel() }; } }; });
addToBindingsCache('if: $data.itemTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.itemTemplate; } }; });
addToBindingsCache('template: $data.itemTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.itemTemplate; } }; });
addToBindingsCache('ifnot: $data.itemTemplate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.itemTemplate; } }; });
addToBindingsCache('dxTemplate: { name: \'content\' }', function () { return { dxTemplate: { name: 'content' } }; });
addToBindingsCache('dxTemplate: { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('styleunit: { width: contentElement.width }, css: class, resizable: getResizableOptions($element, 1, $root.calculateWithZoomFactor(325))', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentElement.width }; }, 'css': function () { return $context.$data.class; }, 'resizable': function () { return $context.$data.getResizableOptions($element, 1, $context.$root.calculateWithZoomFactor(325)); } }; });
addToBindingsCache('styleunit: { width: width }, css: class, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width }; }, 'css': function () { return $context.$data.class; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('css: tabsElement.class', function ($context, $element) { return { 'css': function () { return $context.$data.tabsElement.class; } }; });
addToBindingsCache('dxAction: { action: function(s) { $data.click(); }}, css: css.class, attr: { title: text, \'aria-label\': text, \'aria-expanded\': !collapsed && active ? \'true\' : \'false\' }, visible: visible', function ($context, $element) { return { 'dxAction': function () { return { 'action': function (s) { $context.$data.click(); } }; }, 'css': function () { return $context.$data.css.class; }, 'attr': function () { return { 'title': $context.$data.text, 'aria-label': $context.$data.text, 'aria-expanded': !$context.$data.collapsed && $context.$data.active ? 'true' : 'false' }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('css: image.class, template: {name: image.templateName, if: !!ko.unwrap($data.image.templateName)}', function ($context, $element) { return { 'css': function () { return $context.$data.image.class; }, 'template': function () { return { 'name': $context.$data.image.templateName, 'if': !!$context.ko.unwrap($context.$data.image.templateName) }; } }; });
addToBindingsCache('styleunit: { width: contentElement.width }, css: contentElement.class, resizable: getResizableOptions($element, 50, 396)', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentElement.width }; }, 'css': function () { return $context.$data.contentElement.class; }, 'resizable': function () { return $context.$data.getResizableOptions($element, 50, 396); } }; });
addToBindingsCache('with: tabPanel.getViewModel()', function ($context, $element) { return { 'with': function () { return $context.$data.tabPanel.getViewModel(); } }; });
addToBindingsCache('foreach: tabs', function ($context, $element) { return { 'foreach': function () { return $context.$data.tabs; } }; });
addToBindingsCache('lazy: { template: $data.template }', function ($context, $element) { return { 'lazy': function () { return { 'template': $context.$data.template }; } }; });
addToBindingsCache('foreach: $data.tabs', function ($context, $element) { return { 'foreach': function () { return $context.$data.tabs; } }; });
addToBindingsCache('dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\', disabled: disabled, onClick: toogle, hint: title }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'icon': 'dxrd-svg-operations-edit', 'iconClass': 'dx-image-edit', 'disabled': $context.$data.disabled, 'onClick': $context.$data.toogle, 'hint': $context.$data.title }; } }; });
addToBindingsCache('template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.getViewModel().toolbarItems }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-tmplt', 'data': $context.$data.actionLists.getViewModel().toolbarItems }; } }; });
addToBindingsCache('visible: visible, css: actionClass', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.actionClass; } }; });
addToBindingsCache('attr: block.attr', function ($context, $element) { return { 'attr': function () { return $context.$data.block.attr; } }; });
addToBindingsCache('template: { name: image.templateName, if: !!image.templateName }, attr: { class: image.class, title: displayText }, dxclick: click', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.image.templateName, 'if': !!$context.$data.image.templateName }; }, 'attr': function () { return { 'class': $context.$data.image.class, 'title': $context.$data.displayText }; }, 'dxclick': function () { return $context.$data.click; } }; });
addToBindingsCache('visible: hasSeparator', function ($context, $element) { return { 'visible': function () { return $context.$data.hasSeparator; } }; });
addToBindingsCache('foreach: $data', function ($context, $element) { return { 'foreach': function () { return $context.$data; } }; });
addToBindingsCache('if: templateName', function ($context, $element) { return { 'if': function () { return $context.$data.templateName; } }; });
addToBindingsCache('template: { name: templateName, data: contentData || $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data.contentData || $context.$data }; } }; });
addToBindingsCache('if: !templateName', function ($context, $element) { return { 'if': function () { return !$context.$data.templateName; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true }; } }; });
addToBindingsCache('attr: { title: displayName }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, css: $data.imageClassName, draggable: $root.toolboxDragHandler', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'css': function () { return $context.$data.imageClassName; }, 'draggable': function () { return $context.$root.toolboxDragHandler; } }; });
addToBindingsCache('foreach: toolboxItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolboxItems; } }; });
addToBindingsCache('foreach: groupedToolboxItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.groupedToolboxItems; } }; });
addToBindingsCache('foreach: items', function ($context, $element) { return { 'foreach': function () { return $context.$data.items; } }; });
addToBindingsCache('dxSelectBox: { items: widget.dataSource, value: widget.value, onValueChanged: widget.onValueChanged, displayExpr: widget.displayExpr, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: widget.onCustomItemCreating, disabled: disabled, dropDownOptions: { container: getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.widget.dataSource, 'value': $context.$data.widget.value, 'onValueChanged': $context.$data.widget.onValueChanged, 'displayExpr': $context.$data.widget.displayExpr, 'displayCustomValue': true, 'acceptCustomValue': true, 'onCustomItemCreating': $context.$data.widget.onCustomItemCreating, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$data.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('dxclick: function(_, element) { showPopup(_, element) }, css: editorMenuButtonCss, attr: { title: hint }', function ($context, $element) { return { 'dxclick': function () { return function (_, element) { $context.$data.showPopup(_, element); }; }, 'css': function () { return $context.$data.editorMenuButtonCss; }, 'attr': function () { return { 'title': $context.$data.hint }; } }; });
addToBindingsCache('dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss', function ($context, $element) { return { 'dxclick': function () { return function (_, element) { $context.$data.showPopup(_, element); }; }, 'attr': function () { return { 'title': $context.$data.hint }; }, 'css': function () { return $context.$data.editorMenuButtonCss; } }; });
addToBindingsCache('template: { name: $data.imageTemplateName, if: ko.unwrap($data.imageTemplateName) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': $context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
addToBindingsCache('if: $data.visible', function ($context, $element) { return { 'if': function () { return $context.$data.visible; } }; });
addToBindingsCache('if: $data.templateName', function ($context, $element) { return { 'if': function () { return $context.$data.templateName; } }; });
addToBindingsCache('template: $data.templateName', function ($context, $element) { return { 'template': function () { return $context.$data.templateName; } }; });
addToBindingsCache('ifnot: $data.templateName', function ($context, $element) { return { 'ifnot': function () { return $context.$data.templateName; } }; });
addToBindingsCache('if: !ko.unwrap($data.imageTemplateName)', function ($context, $element) { return { 'if': function () { return !$context.ko.unwrap($context.$data.imageTemplateName); } }; });
addToBindingsCache('if: ko.unwrap($data.imageTemplateName)', function ($context, $element) { return { 'if': function () { return $context.ko.unwrap($context.$data.imageTemplateName); } }; });
addToBindingsCache('dxdAccordion: { collapsed: collapsed, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent, alwaysShow: alwaysShow }, dxMutationObserver: keyboardHelper', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed, 'setCollapsed': $context.$data.setCollapsed, 'getCollapsed': $context.$data.getCollapsed, 'setCollapsedChangedEvent': $context.$data.setCollapsedChangedEvent, 'alwaysShow': $context.$data.alwaysShow }; }, 'dxMutationObserver': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('attr: { \'aria-expanded\': alwaysShow || !collapsed ? \'true\' : \'false\', \'aria-owns\': contentId, \'id\': headerId, }', function ($context, $element) { return { 'attr': function () { return { 'aria-expanded': $context.$data.alwaysShow || !$context.$data.collapsed ? 'true' : 'false', 'aria-owns': $context.$data.contentId, 'id': $context.$data.headerId }; } }; });
addToBindingsCache('dxButton: { onClick: up.action, disabled: up.disabled, icon: \'dxrd-svg-operations-moveup\', template: up.template }, attr: { title: up.text }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.up.action, 'disabled': $context.$data.up.disabled, 'icon': 'dxrd-svg-operations-moveup', 'template': $context.$data.up.template }; }, 'attr': function () { return { 'title': $context.$data.up.text }; } }; });
addToBindingsCache('dxButton: { onClick: down.action, disabled: down.disabled, icon: \'dxrd-svg-operations-movedown\', template: down.template }, attr: { title: down.text }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.down.action, 'disabled': $context.$data.down.disabled, 'icon': 'dxrd-svg-operations-movedown', 'template': $context.$data.down.template }; }, 'attr': function () { return { 'title': $context.$data.down.text }; } }; });
addToBindingsCache('dxButton: { onClick: add.action, disabled: add.disabled, icon: \'dxrd-svg-operations-add\', template: add.template }, attr: { title: add.text }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.add.action, 'disabled': $context.$data.add.disabled, 'icon': 'dxrd-svg-operations-add', 'template': $context.$data.add.template }; }, 'attr': function () { return { 'title': $context.$data.add.text }; } }; });
addToBindingsCache('dxButton: { onClick: delete.action, disabled: delete.disabled, icon: \'dxrd-svg-operations-remove\', template: delete.template }, attr: { title: delete.text }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.delete.action, 'disabled': $context.$data.delete.disabled, 'icon': 'dxrd-svg-operations-remove', 'template': $context.$data.delete.template }; }, 'attr': function () { return { 'title': $context.$data.delete.text }; } }; });
addToBindingsCache('styleunit: { \'paddingLeft\': padding }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingLeft': $context.$data.padding }; } }; });
addToBindingsCache('template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; }, 'css': function () { return { 'dx-image-expanded': !$context.$data.collapsed }; } }; });
addToBindingsCache('text: displayName, attr: { title: displayName }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('attr: { \'aria-hidden\': !alwaysShow && collapsed ? \'true\' : \'false\', \'aria-labelledby\': headerId, \'id\': contentId }', function ($context, $element) { return { 'attr': function () { return { 'aria-hidden': !$context.$data.alwaysShow && $context.$data.collapsed ? 'true' : 'false', 'aria-labelledby': $context.$data.headerId, 'id': $context.$data.contentId }; } }; });
addToBindingsCache('visible: !disabled, dxScrollView: { showScrollbar: \'onHover\', disabled: !showScroll, useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'visible': function () { return !$context.$data.disabled; }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'disabled': !$context.$data.showScroll, 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
addToBindingsCache('text: emptyAreaText', function ($context, $element) { return { 'text': function () { return $context.$data.emptyAreaText; } }; });
addToBindingsCache('foreach: values', function ($context, $element) { return { 'foreach': function () { return $context.$data.values; } }; });
addToBindingsCache('attr: { \'aria-selected\': selected }, dxAction: { model: $data, action: select }, css: { \'dxd-state-selected\' : selected }', function ($context, $element) { return { 'attr': function () { return { 'aria-selected': $context.$data.selected }; }, 'dxAction': function () { return { 'model': $context.$data, 'action': $context.$data.select }; }, 'css': function () { return { 'dxd-state-selected': $context.$data.selected }; } }; });
addToBindingsCache('if: showButtons', function ($context, $element) { return { 'if': function () { return $context.$data.showButtons; } }; });
addToBindingsCache('with: buttons', function ($context, $element) { return { 'with': function () { return $context.$data.buttons; } }; });
addToBindingsCache('if: up.visible', function ($context, $element) { return { 'if': function () { return $context.$data.up.visible; } }; });
addToBindingsCache('if: down.visible', function ($context, $element) { return { 'if': function () { return $context.$data.down.visible; } }; });
addToBindingsCache('if: add.visible', function ($context, $element) { return { 'if': function () { return $context.$data.add.visible; } }; });
addToBindingsCache('if: delete.visible', function ($context, $element) { return { 'if': function () { return $context.$data.delete.visible; } }; });
addToBindingsCache('if: displayName', function ($context, $element) { return { 'if': function () { return $context.$data.displayName; } }; });
addToBindingsCache('if: values.length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.values.length === 0; } }; });
addToBindingsCache('if: values.length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.values.length !== 0; } }; });
addToBindingsCache('dxCheckBox: getOptions({ value: value, disabled: disabled, elementAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'elementAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: [ { val: true, text: $root.getLocalization(\'Yes\', \'AnalyticsCoreStringId.ParametersPanel_True\') }, { val: false, text: $root.getLocalization(\'No\', \'AnalyticsCoreStringId.ParametersPanel_False\') }], inputAttr: { \'aria-label\': displayName, id: editorInputId }, valueExpr: \'val\', displayExpr: \'text\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': [{ 'val': true, 'text': $context.$root.getLocalization('Yes', 'AnalyticsCoreStringId.ParametersPanel_True') }, { 'val': false, 'text': $context.$root.getLocalization('No', 'AnalyticsCoreStringId.ParametersPanel_False') }], 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId }, 'valueExpr': 'val', 'displayExpr': 'text', 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info }; } }; });
addToBindingsCache('text: $data.display, attr: { title: $data.display }', function ($context, $element) { return { 'text': function () { return $context.$data.display; }, 'attr': function () { return { 'title': $context.$data.display }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId }}, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: $data.validationRules || [] })', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }; }, 'dxValidator': function () { return $context.$data.getValidatorOptions($context.$data.validatorOptions || { 'validationRules': $context.$data.validationRules || [] }); } }; });
addToBindingsCache('dxLocalizedSelectBox: { items: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, acceptCustomValue: true, onCustomItemCreating: function(arg) { return { value: arg.text, displayValue: arg.text }; }, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName, id: editorInputId }, useLocalizedTextAsValue: true }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'items': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'acceptCustomValue': true, 'onCustomItemCreating': function (arg) { return { 'value': arg.text, 'displayValue': arg.text }; }, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId }, 'useLocalizedTextAsValue': true }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, inputAttr: { id: editorInputId } }, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.values, 'value': $context.$data.generateValue($context.$root.undoEngine), 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'id': $context.$data.editorInputId } }; }, 'dxValidator': function () { return $context.$data.getValidatorOptions($context.$data.validatorOptions || { 'validationRules': $context.$data.validationRules || [] }); } }; });
addToBindingsCache('dxdAccordion: { collapsed: collapsed, setCollapsed: setCollapsed, getCollapsed: getCollapsed, setCollapsedChangedEvent: setCollapsedChangedEvent }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed, 'setCollapsed': $context.$data.setCollapsed, 'getCollapsed': $context.$data.getCollapsed, 'setCollapsedChangedEvent': $context.$data.setCollapsedChangedEvent }; } }; });
addToBindingsCache('attr: { role: \'treeitem\', \'id\': isComplexEditor && headerId, \'aria-owns\': isComplexEditor && contentId, \'aria-expanded\': isComplexEditor && (alwaysShow || !collapsed ? \'true\' : \'false\') }, css: {\'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor}', function ($context, $element) { return { 'attr': function () { return { 'role': 'treeitem', 'id': $context.$data.isComplexEditor && $context.$data.headerId, 'aria-owns': $context.$data.isComplexEditor && $context.$data.contentId, 'aria-expanded': $context.$data.isComplexEditor && ($context.$data.alwaysShow || !$context.$data.collapsed ? 'true' : 'false') }; }, 'css': function () { return { 'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented': $context.$data.isComplexEditor }; } }; });
addToBindingsCache('styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\' }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-accordion-empty': $context.$data.templateName === 'dx-emptyHeader' }; } }; });
addToBindingsCache('enable: templateName === \'dx-emptyHeader\'', function ($context, $element) { return { 'enable': function () { return $context.$data.templateName === 'dx-emptyHeader'; } }; });
addToBindingsCache('template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !ko.unwrap(collapsed) }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; }, 'css': function () { return { 'dx-image-expanded': !$context.ko.unwrap($context.$data.collapsed) }; } }; });
addToBindingsCache('searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }, css: { \'dx-collapsing-image-hidden\': $data.hideCollapsingButton }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$data.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dx-collapsing-image-hidden': $context.$data.hideCollapsingButton }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName }, css: { \'dx-collapsing-image-hidden\': $data.hideCollapsingButton }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dx-collapsing-image-hidden': $context.$data.hideCollapsingButton }; } }; });
addToBindingsCache('searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName, \'for\': editorInputId }, css: { \'dx-field-label-required\': isRequired }, style: { fontWeight: ko.unwrap(isPropertyModified) ? \'Bold\' : \'\'}', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$data.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName, 'for': $context.$data.editorInputId }; }, 'css': function () { return { 'dx-field-label-required': $context.$data.isRequired }; }, 'style': function () { return { 'fontWeight': $context.ko.unwrap($context.$data.isPropertyModified) ? 'Bold' : '' }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName, \'for\': editorInputId }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: ko.unwrap(isPropertyModified) ? \'Bold\' : \'\'}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName, 'for': $context.$data.editorInputId }; }, 'css': function () { return { 'dx-property-required': $context.$data.isRequired }; }, 'style': function () { return { 'fontWeight': $context.ko.unwrap($context.$data.isPropertyModified) ? 'Bold' : '' }; } }; });
addToBindingsCache('service: { name: \'createEditorDescriptionAddOn\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createEditorDescriptionAddOn' }; } }; });
addToBindingsCache('css: { \'dxd-border-accented\': $data.isPropertyHighlighted }', function ($context, $element) { return { 'css': function () { return { 'dxd-border-accented': $context.$data.isPropertyHighlighted }; } }; });
addToBindingsCache('service: { name: \'createEditorAddOn\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createEditorAddOn' }; } }; });
addToBindingsCache('attr: { \'aria-labelledby\': headerId, \'id\': contentId, \'aria-hidden\': !alwaysShow && collapsed ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'aria-labelledby': $context.$data.headerId, 'id': $context.$data.contentId, 'aria-hidden': !$context.$data.alwaysShow && $context.$data.collapsed ? 'true' : 'false' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: onClick, icon: \'dxrd-svg-tabs-description_info\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.onClick, 'icon': 'dxrd-svg-tabs-description_info' }; } }; });
addToBindingsCache('if: isComplexEditor', function ($context, $element) { return { 'if': function () { return $context.$data.isComplexEditor; } }; });
addToBindingsCache('ifnot: $data.hideCollapsingButton', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hideCollapsingButton; } }; });
addToBindingsCache('if: !!$data.textToSearch', function ($context, $element) { return { 'if': function () { return !!$context.$data.textToSearch; } }; });
addToBindingsCache('ifnot: !!$data.textToSearch', function ($context, $element) { return { 'ifnot': function () { return !!$context.$data.textToSearch; } }; });
addToBindingsCache('if: !isComplexEditor', function ($context, $element) { return { 'if': function () { return !$context.$data.isComplexEditor; } }; });
addToBindingsCache('if: !$data.editorDescriptionAddon && $data.description', function ($context, $element) { return { 'if': function () { return !$context.$data.editorDescriptionAddon && $context.$data.description; } }; });
addToBindingsCache('if: $data.editorDescriptionAddon', function ($context, $element) { return { 'if': function () { return $context.$data.editorDescriptionAddon; } }; });
addToBindingsCache('template: { name: $data.editorDescriptionAddon.templateName, data: $data.editorDescriptionAddon.data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.editorDescriptionAddon.templateName, 'data': $context.$data.editorDescriptionAddon.data }; } }; });
addToBindingsCache('if: templateName !== \'dx-emptyHeader\'', function ($context, $element) { return { 'if': function () { return $context.$data.templateName !== 'dx-emptyHeader'; } }; });
addToBindingsCache('lazy: { innerBindings: { template: templateName }, isResolved: function(val) { $data.setIsRendered(val) } }', function ($context, $element) { return { 'lazy': function () { return { 'innerBindings': { 'template': $context.$data.templateName }, 'isResolved': function (val) { $context.$data.setIsRendered(val); } }; } }; });
addToBindingsCache('if: editorCreated', function ($context, $element) { return { 'if': function () { return $context.$data.editorCreated; } }; });
addToBindingsCache('template: contentTemplateName', function ($context, $element) { return { 'template': function () { return $context.$data.contentTemplateName; } }; });
addToBindingsCache('dxDateBox: getOptions({ value: value, closeOnValueChange: true, type: \'datetime\', disabled: disabled, inputAttr: { \'aria-label\': displayName, id: editorInputId }, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'closeOnValueChange': true, 'type': 'datetime', 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId }, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flip', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!ko.unwrap($parent.disabled)) { bold(!bold()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.bold(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.ko.unwrap($context.$parent.disabled)) {
        $context.$data.bold(!$context.$data.bold());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!ko.unwrap($parent.disabled)) { italic(!italic()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.italic(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.ko.unwrap($context.$parent.disabled)) {
        $context.$data.italic(!$context.$data.italic());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!ko.unwrap($parent.disabled)) { underline(!underline()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.underline(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.ko.unwrap($context.$parent.disabled)) {
        $context.$data.underline(!$context.$data.underline());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!ko.unwrap($parent.disabled)) { strikeout(!strikeout()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.strikeout(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.ko.unwrap($context.$parent.disabled)) {
        $context.$data.strikeout(!$context.$data.strikeout());
    } }; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-bold\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-bold'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-italic\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-italic'; } }; });
addToBindingsCache('ifnot: $parents[2].editorOptions && $parents[2].editorOptions.hideUnderline', function ($context, $element) { return { 'ifnot': function () { return $context.$parents[2].editorOptions && $context.$parents[2].editorOptions.hideUnderline; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-underline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-underline'; } }; });
addToBindingsCache('ifnot: $parents[2].editorOptions && $parents[2].editorOptions.hideStrikeout', function ($context, $element) { return { 'ifnot': function () { return $context.$parents[2].editorOptions && $context.$parents[2].editorOptions.hideStrikeout; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-strikeout\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-strikeout'; } }; });
addToBindingsCache('dxFileImagePicker: { value: value, placeholderId: \'Image\', accept: \'image/*\', type: \'img\', disabled: disabled }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'Image', 'accept': 'image/*', 'type': 'img', 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxNumberBox: getOptions({ value:value, showSpinButtons:true, disabled:disabled, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'showSpinButtons': true, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName, id: editorInputId } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName, \'id\': editorInputId }}), dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); }, 'dxValidator': function () { return $context.$data.getValidatorOptions($context.$data.validatorOptions || { 'validationRules': $context.$data.validationRules || [] }); } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName, \'id\': editorInputId }})', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName, 'id': $context.$data.editorInputId } }); } }; });
addToBindingsCache('value: value, disable: disabled', function ($context, $element) { return { 'value': function () { return $context.$data.value; }, 'disable': function () { return $context.$data.disabled; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.value = _z; } }; } }; });
addToBindingsCache('if: $data.validationRules', function ($context, $element) { return { 'if': function () { return $context.$data.validationRules; } }; });
addToBindingsCache('if: !$data.validationRules', function ($context, $element) { return { 'if': function () { return !$context.$data.validationRules; } }; });
addToBindingsCache('css: { \'dx-rtl\' : rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$data.rtl }; } }; });
addToBindingsCache('dxPopup: { showTitle: true, width: \'750px\', height: \'475px\', title: title(), rtlEnabled: rtl, visible: popupVisible, wrapperAttr: { class: className }, toolbarItems: buttonItems, showCloseButton: true, container: $root.getPopupContainer($element), position: { of: $root.getPopupContainer($element) }, }', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': '750px', 'height': '475px', 'title': $context.$data.title(), 'rtlEnabled': $context.$data.rtl, 'visible': $context.$data.popupVisible, 'wrapperAttr': { 'class': $context.$data.className }, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$root.getPopupContainer($element), 'position': { 'of': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxDataGrid: queriesGrid', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.queriesGrid; } }; });
addToBindingsCache('dxDropDownButton: $data', function ($context, $element) { return { 'dxDropDownButton': function () { return $context.$data; } }; });
addToBindingsCache('if: $data', function ($context, $element) { return { 'if': function () { return $context.$data; } }; });
addToBindingsCache('template: { name: $data._queriesPopupHelper.template, data: _queriesPopupHelper }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data._queriesPopupHelper.template, 'data': $context.$data._queriesPopupHelper }; } }; });
addToBindingsCache('foreach: $data.popupItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.popupItems; } }; });
addToBindingsCache('template: { name: template, data: model }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data.model }; } }; });
addToBindingsCache('with: options', function ($context, $element) { return { 'with': function () { return $context.$data.options; } }; });
addToBindingsCache('dxTextArea: { value: textAreaValue, isValid: isValid, spellcheck: false, onKeyUp: function() { isValid(true); } }, resizable: resizeHelper.resizable($root.resizeHandler, \'s\', $element)', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.textAreaValue, 'isValid': $context.$data.isValid, 'spellcheck': false, 'onKeyUp': function () { $context.$data.isValid(true); } }; }, 'resizable': function () { return $context.$data.resizeHelper.resizable($context.$root.resizeHandler, 's', $element); } }; });
addToBindingsCache('dxAceEditor: { value: textAreaValue, editorContainer: editorContainer, theme: theme, options: aceOptions, additionalOptions: additionalOptions, callbacks: callbacks }, resizable: resizeHelper.resizable($root.resizeHandler, \'s\', $element)', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.textAreaValue, 'editorContainer': $context.$data.editorContainer, 'theme': $context.$data.theme, 'options': $context.$data.aceOptions, 'additionalOptions': $context.$data.additionalOptions, 'callbacks': $context.$data.callbacks }; }, 'resizable': function () { return $context.$data.resizeHelper.resizable($context.$root.resizeHandler, 's', $element); } }; });
addToBindingsCache('visible: visible,  attr: { class: \'dx-expressioneditor-tools-tab dxd-back-primary2 \'+ ($data.templateName ? $data.templateName : \'\')}', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'attr': function () { return { 'class': 'dx-expressioneditor-tools-tab dxd-back-primary2 ' + ($context.$data.templateName ? $context.$data.templateName : '') }; } }; });
addToBindingsCache('dxEllipsisEditor: { value: displayValue, buttonAction: function() { popupVisible(true); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning, inputAttr: { id: editorInputId } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.displayValue, 'buttonAction': function () { $context.$data.popupVisible(true); }, 'disabled': $context.$data.disabled, 'isValid': $context.$data.modelValueValid, 'warningMessage': $context.$data.modelValueWarning, 'inputAttr': { 'id': $context.$data.editorInputId } }; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dx-popup-general\' }, title: title(), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'615px\', maxHeight: \'90%\', maxWidth: \'90%\', minHeight: 400, minWidth: 500, width: \'645px\', container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onContentReady: onContentReady, onShowing: onShowing, onHiding: onHiding, onShown: onShown, resizeEnabled: true, onResize: function() { $data.resizeAceEditor() } }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'showTitle': true, 'wrapperAttr': { 'class': 'dx-expressioneditor dx-popup-general' }, 'title': $context.$data.title(), 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'height': '615px', 'maxHeight': '90%', 'maxWidth': '90%', 'minHeight': 400, 'minWidth': 500, 'width': '645px', 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) }, 'onContentReady': $context.$data.onContentReady, 'onShowing': $context.$data.onShowing, 'onHiding': $context.$data.onHiding, 'onShown': $context.$data.onShown, 'resizeEnabled': true, 'onResize': function () { $context.$data.resizeAceEditor(); } }; } }; });
addToBindingsCache('if: !aceAvailable', function ($context, $element) { return { 'if': function () { return !$context.$data.aceAvailable; } }; });
addToBindingsCache('if: aceAvailable', function ($context, $element) { return { 'if': function () { return $context.$data.aceAvailable; } }; });
addToBindingsCache('with: tools', function ($context, $element) { return { 'with': function () { return $context.$data.tools; } }; });
addToBindingsCache('foreach: toolBox', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolBox; } }; });
addToBindingsCache('template: { name: $data.templateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName }; } }; });
addToBindingsCache('template: \'dx-expressioneditor-popup\'', function ($context, $element) { return { 'template': function () { return 'dx-expressioneditor-popup'; } }; });
addToBindingsCache('if: popupVisible', function ($context, $element) { return { 'if': function () { return $context.$data.popupVisible; } }; });
addToBindingsCache('template: "dx-expressioneditor-main"', function ($context, $element) { return { 'template': function () { return 'dx-expressioneditor-main'; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }, resizable: $parents[1].resizeHelper.resizable($root.resizeHandler, \'e\')', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; }, 'resizable': function () { return $context.$parents[1].resizeHelper.resizable($context.$root.resizeHandler, 'e'); } }; });
addToBindingsCache('css: {\'dxd-state-selected\': content.isSelected }, text: displayName, dxclick: function() { $parent.click($data.content) }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.content.isSelected }; }, 'text': function () { return $context.$data.displayName; }, 'dxclick': function () { return function () { $context.$parent.click($context.$data.content); }; } }; });
addToBindingsCache('css: {\'dxd-state-selected\': $data.isSelected }, dxclick: function() { $data.updateContent($data.allItems(), $data.isSelected); $parent.click($data.content) }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; }, 'dxclick': function () { return function () { $context.$data.updateContent($context.$data.allItems(), $context.$data.isSelected); $context.$parent.click($context.$data.content); }; } }; });
addToBindingsCache('text: displayName', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; } }; });
addToBindingsCache('css: {\'dxd-state-selected\': isSelected }, text: $data.display, dxclick: function() { $parent.updateContent($data.data, $data.isSelected); $parents[1].click($parent.content); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; }, 'text': function () { return $context.$data.display; }, 'dxclick': function () { return function () { $context.$parent.updateContent($context.$data.data, $context.$data.isSelected); $context.$parents[1].click($context.$parent.content); }; } }; });
addToBindingsCache('foreach: content', function ($context, $element) { return { 'foreach': function () { return $context.$data.content; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; } }; });
addToBindingsCache('text: content', function ($context, $element) { return { 'text': function () { return $context.$data.content; } }; });
addToBindingsCache('treeListSearchPanel: { controllers: [ ko.unwrap($data.parameters) ? ko.unwrap($data.parameters).treeListController : ko.unwrap($data.parameters), ko.unwrap($data.fields) ? ko.unwrap($data.fields).treeListController : ko.unwrap($data.fields) ] }', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': [$context.ko.unwrap($context.$data.parameters) ? $context.ko.unwrap($context.$data.parameters).treeListController : $context.ko.unwrap($context.$data.parameters), $context.ko.unwrap($context.$data.fields) ? $context.ko.unwrap($context.$data.fields).treeListController : $context.ko.unwrap($context.$data.fields)] }; } }; });
addToBindingsCache('treelist: fields', function ($context, $element) { return { 'treelist': function () { return $context.$data.fields; } }; });
addToBindingsCache('treelist: parameters', function ($context, $element) { return { 'treelist': function () { return $context.$data.parameters; } }; });
addToBindingsCache('visible: visible, event: { dblclick: function() { actions[0].clickAction($element); }}, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'event': function () { return { 'dblclick': function () { $context.$data.actions[0].clickAction($element); } }; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected': $context.$data.isSelected }; } }; });
addToBindingsCache('css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'template': function () { return 'dxrd-svg-collapsed'; }, 'click': function () { return $context.$data.toggleCollapsed; } }; });
addToBindingsCache('css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('click: toggleSelected', function ($context, $element) { return { 'click': function () { return $context.$data.toggleSelected; } }; });
addToBindingsCache('if: fields', function ($context, $element) { return { 'if': function () { return $context.$data.fields; } }; });
addToBindingsCache('if: $data.parameters', function ($context, $element) { return { 'if': function () { return $context.$data.parameters; } }; });
addToBindingsCache('if: hasItems', function ($context, $element) { return { 'if': function () { return $context.$data.hasItems; } }; });
addToBindingsCache('ifnot: hasItems', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hasItems; } }; });
addToBindingsCache('template: { name: \'dx-treelist-item-text-content\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-treelist-item-text-content' }; } }; });
addToBindingsCache('attr: { class: \'dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted \' + ($data.class ? $data.class : \'\') }, text: $data.displayName || $data.text, css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }', function ($context, $element) { return { 'attr': function () { return { 'class': 'dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted ' + ($context.$data.class ? $context.$data.class : '') }; }, 'text': function () { return $context.$data.displayName || $context.$data.text; }, 'css': function () { return { 'dx-expressioneditor-state-selected dxd-state-selected': $context.$parent.selectedItem() === $context.$data }; }, 'dxclick': function () { return function () { $context.$parent.selectedItem($context.$data); $context.$parents[2].click($context.$data); }; }, 'event': function () { return { 'dblclick': function () { $context.$parents[2].dblclick($context.$data, $element); } }; } }; });
addToBindingsCache('dxTextBox: { value: textToSearch, showClearButton: true, valueChangeEvent: \'keyup\', placeholder: $parents[2].searchPlaceholder() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.textToSearch, 'showClearButton': true, 'valueChangeEvent': 'keyup', 'placeholder': $context.$parents[2].searchPlaceholder() }; } }; });
addToBindingsCache('css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }, searchHighlighting: { text: $data.displayName || $data.text, textToSearch: $parent.textToSearch }', function ($context, $element) { return { 'css': function () { return { 'dx-expressioneditor-state-selected dxd-state-selected': $context.$parent.selectedItem() === $context.$data }; }, 'dxclick': function () { return function () { $context.$parent.selectedItem($context.$data); $context.$parents[2].click($context.$data); }; }, 'event': function () { return { 'dblclick': function () { $context.$parents[2].dblclick($context.$data, $element); } }; }, 'searchHighlighting': function () { return { 'text': $context.$data.displayName || $context.$data.text, 'textToSearch': $context.$parent.textToSearch }; } }; });
addToBindingsCache('with: content', function ($context, $element) { return { 'with': function () { return $context.$data.content; } }; });
addToBindingsCache('template: $data', function ($context, $element) { return { 'template': function () { return $context.$data; } }; });
addToBindingsCache('foreach: availableItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.availableItems; } }; });
addToBindingsCache('css: { \'advanced\': advancedMode }', function ($context, $element) { return { 'css': function () { return { 'advanced': $context.$data.advancedMode }; } }; });
addToBindingsCache('css: { \'advanced\': advancedMode }, visible: textVisible', function ($context, $element) { return { 'css': function () { return { 'advanced': $context.$data.advancedMode }; }, 'visible': function () { return $context.$data.textVisible; } }; });
addToBindingsCache('css: $data.getTextCssClasses(), style: { height: textContentHeightPerc }', function ($context, $element) { return { 'css': function () { return $context.$data.getTextCssClasses(); }, 'style': function () { return { 'height': $context.$data.textContentHeightPerc }; } }; });
addToBindingsCache('dxCheckBox: { value: advancedMode, text: advancedModeText }, style: $data.getCheckBoxStyles()', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.advancedMode, 'text': $context.$data.advancedModeText }; }, 'style': function () { return $context.$data.getCheckBoxStyles(); } }; });
addToBindingsCache('style: $data.getContentStyles()', function ($context, $element) { return { 'style': function () { return $context.$data.getContentStyles(); } }; });
addToBindingsCache('visible: $data.options().disabled()', function ($context, $element) { return { 'visible': function () { return $context.$data.options().disabled(); } }; });
addToBindingsCache('dxTextArea: { value: displayValue, isValid: isValid, onInput: onInput, spellcheck: false }, cacheElement: { action: function(element) { cacheElement(element) } }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.displayValue, 'isValid': $context.$data.isValid, 'onInput': $context.$data.onInput, 'spellcheck': false }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElement(element); } }; } }; });
addToBindingsCache('css: {\'dx-invalid\': !$data.isValid(), \'dx-state-focused\': textFocused }', function ($context, $element) { return { 'css': function () { return { 'dx-invalid': !$context.$data.isValid(), 'dx-state-focused': $context.$data.textFocused }; } }; });
addToBindingsCache('dxAceEditor: { value: $data.displayValue, theme: helper.aceTheme, editorContainer: editorContainer, options: aceOptions, additionalOptions: additionalOptions }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.displayValue, 'theme': $context.$data.helper.aceTheme, 'editorContainer': $context.$data.editorContainer, 'options': $context.$data.aceOptions, 'additionalOptions': $context.$data.additionalOptions }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', direction: \'both\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'direction': 'both' }; } }; });
addToBindingsCache('dxclick: function() { $data.advancedMode(true); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$data.advancedMode(true); }; } }; });
addToBindingsCache('text: invalidMessage()', function ($context, $element) { return { 'text': function () { return $context.$data.invalidMessage(); } }; });
addToBindingsCache('template: \'dx-filtereditor-content-tree\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-tree'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content-text\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-text'; } }; });
addToBindingsCache('if: $data.advancedModeTop()', function ($context, $element) { return { 'if': function () { return $context.$data.advancedModeTop(); } }; });
addToBindingsCache('template: \'dx-filtereditor-plain-content-text\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-plain-content-text'; } }; });
addToBindingsCache('ifnot: $data.advancedModeTop()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.advancedModeTop(); } }; });
addToBindingsCache('with: operandSurface', function ($context, $element) { return { 'with': function () { return $context.$data.operandSurface; } }; });
addToBindingsCache('template: { name: $data.templateName, data: $data, if: $parent.isSurfaceValid }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data, 'if': $context.$parent.isSurfaceValid }; } }; });
addToBindingsCache('ifnot: isSurfaceValid', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isSurfaceValid; } }; });
addToBindingsCache('dxEllipsisEditor: { value: modelDisplayValue, isValid: modelValueIsValid, disabled: disabled, buttonAction: function() { popupVisible(true); }, inputAttr: { id: editorInputId } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.modelDisplayValue, 'isValid': $context.$data.modelValueIsValid, 'disabled': $context.$data.disabled, 'buttonAction': function () { $context.$data.popupVisible(true); }, 'inputAttr': { 'id': $context.$data.editorInputId } }; } }; });
addToBindingsCache('style: { pointerEvents: $data.options().disabled() ? \'none\' : \'\' }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.options().disabled() ? 'none' : '' }; } }; });
addToBindingsCache('template: \'dx-filtereditor-popup\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-popup'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content-popups\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-popups'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content-plain\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-plain'; } }; });
addToBindingsCache('service: { name: \'createChangeType\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeType' }; } }; });
addToBindingsCache('dxclick: function() {  $data.remove && $data.remove(); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$data.remove && $context.$data.remove(); }; } }; });
addToBindingsCache('visible: !!$data.canRemove', function ($context, $element) { return { 'visible': function () { return !!$context.$data.canRemove; } }; });
addToBindingsCache('with: property', function ($context, $element) { return { 'with': function () { return $context.$data.property; } }; });
addToBindingsCache('template: { name: templateName, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data }; } }; });
addToBindingsCache('if: $data.aggregatedExpression()', function ($context, $element) { return { 'if': function () { return $context.$data.aggregatedExpression(); } }; });
addToBindingsCache('with: aggregatedExpression', function ($context, $element) { return { 'with': function () { return $context.$data.aggregatedExpression; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-remove\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-remove'; } }; });
addToBindingsCache('template: { name: \'dx-filtereditor-aggregate-common\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-filtereditor-aggregate-common' }; } }; });
addToBindingsCache('with: condition', function ($context, $element) { return { 'with': function () { return $context.$data.condition; } }; });
addToBindingsCache('with: begin', function ($context, $element) { return { 'with': function () { return $context.$data.begin; } }; });
addToBindingsCache('with: end', function ($context, $element) { return { 'with': function () { return $context.$data.end; } }; });
addToBindingsCache('with: leftOperand', function ($context, $element) { return { 'with': function () { return $context.$data.leftOperand; } }; });
addToBindingsCache('with: rightOperand', function ($context, $element) { return { 'with': function () { return $context.$data.rightOperand; } }; });
addToBindingsCache('if: $data.leftPart && $data.leftPart.condition', function ($context, $element) { return { 'if': function () { return $context.$data.leftPart && $context.$data.leftPart.condition; } }; });
addToBindingsCache('with: leftPart', function ($context, $element) { return { 'with': function () { return $context.$data.leftPart; } }; });
addToBindingsCache('css: css', function ($context, $element) { return { 'css': function () { return $context.$data.css; } }; });
addToBindingsCache('text: displayType', function ($context, $element) { return { 'text': function () { return $context.$data.displayType; } }; });
addToBindingsCache('service: { name: \'createChangeValueType\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeValueType' }; } }; });
addToBindingsCache('template: { name: $data.leftPart.templateName, data: $data.leftPart }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.leftPart.templateName, 'data': $context.$data.leftPart }; } }; });
addToBindingsCache('foreach: rightPart', function ($context, $element) { return { 'foreach': function () { return $context.$data.rightPart; } }; });
addToBindingsCache('template: { name: $data.templateName, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data }; } }; });
addToBindingsCache('service: { name: \'createAddButton\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createAddButton' }; } }; });
addToBindingsCache('foreach: operands', function ($context, $element) { return { 'foreach': function () { return $context.$data.operands; } }; });
addToBindingsCache('dxclick: addValue', function ($context, $element) { return { 'dxclick': function () { return $context.$data.addValue; } }; });
addToBindingsCache('with: criteriaOperator', function ($context, $element) { return { 'with': function () { return $context.$data.criteriaOperator; } }; });
addToBindingsCache('if: $data.operands().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.operands().length > 1; } }; });
addToBindingsCache('foreach: $data.operands()', function ($context, $element) { return { 'foreach': function () { return $context.$data.operands(); } }; });
addToBindingsCache('if: $data.operands().length == 1', function ($context, $element) { return { 'if': function () { return $context.$data.operands().length == 1; } }; });
addToBindingsCache('template: { name: $data.operands()[0].templateName, data: $data.operands()[0] }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.operands()[0].templateName, 'data': $context.$data.operands()[0] }; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-add\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-add'; } }; });
addToBindingsCache('service: { name: \'createChangeParameter\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeParameter' }; } }; });
addToBindingsCache('if: $data.canChange', function ($context, $element) { return { 'if': function () { return $context.$data.canChange; } }; });
addToBindingsCache('service: { name: \'createChangeProperty\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeProperty' }; } }; });
addToBindingsCache('if: $data.operand().reverse', function ($context, $element) { return { 'if': function () { return $context.$data.operand().reverse; } }; });
addToBindingsCache('template: {name: $data.operand().templateName, data: $data.operand() }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.operand().templateName, 'data': $context.$data.operand() }; } }; });
addToBindingsCache('ifnot: $data.operand().reverse', function ($context, $element) { return { 'ifnot': function () { return $context.$data.operand().reverse; } }; });
addToBindingsCache('with: operand', function ($context, $element) { return { 'with': function () { return $context.$data.operand; } }; });
addToBindingsCache('visible: isEditable', function ($context, $element) { return { 'visible': function () { return $context.$data.isEditable; } }; });
addToBindingsCache('dxTextBox: getStringEditorOptions($element), focus: { on: isEditable }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getStringEditorOptions($element); }, 'focus': function () { return { 'on': $context.$data.isEditable }; } }; });
addToBindingsCache('focus: isEditable, dxLocalizedSelectBox: getBoolEditorOptions($element, $root)', function ($context, $element) { return { 'focus': function () { return $context.$data.isEditable; }, 'dxLocalizedSelectBox': function () { return $context.$data.getBoolEditorOptions($element, $context.$root); } }; });
addToBindingsCache('focus: isEditable, dxDateBox: getDateEditorOptions($element, $root)', function ($context, $element) { return { 'focus': function () { return $context.$data.isEditable; }, 'dxDateBox': function () { return $context.$data.getDateEditorOptions($element, $context.$root); } }; });
addToBindingsCache('dxTextBox: getNumberEditorOptions($element), focus: { on: isEditable }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getNumberEditorOptions($element); }, 'focus': function () { return { 'on': $context.$data.isEditable }; } }; });
addToBindingsCache('focus: isEditable, dxSelectBox: getListEditOptions($element, $root)', function ($context, $element) { return { 'focus': function () { return $context.$data.isEditable; }, 'dxSelectBox': function () { return $context.$data.getListEditOptions($element, $context.$root); } }; });
addToBindingsCache('visible: !isEditable()', function ($context, $element) { return { 'visible': function () { return !$context.$data.isEditable(); } }; });
addToBindingsCache('text: value, click: function() { isEditable(true); }, css: { \'default\': $data.isDefaultDisplay() }', function ($context, $element) { return { 'text': function () { return $context.$data.value; }, 'click': function () { return function () { $context.$data.isEditable(true); }; }, 'css': function () { return { 'default': $context.$data.isDefaultDisplay() }; } }; });
addToBindingsCache('if: $data.items.length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.items.length === 0; } }; });
addToBindingsCache('if: $data.specifics() === "string" || $data.specifics() === "guid"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() === 'string' || $context.$data.specifics() === 'guid'; } }; });
addToBindingsCache('if: $data.specifics() === "bool"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() === 'bool'; } }; });
addToBindingsCache('if: $data.specifics() === "date"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() === 'date'; } }; });
addToBindingsCache('if: $data.specifics() !== "string" && $data.specifics() !== "bool" && $data.specifics() !== "date" && $data.specifics() !== "guid"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() !== 'string' && $context.$data.specifics() !== 'bool' && $context.$data.specifics() !== 'date' && $context.$data.specifics() !== 'guid'; } }; });
addToBindingsCache('if: $data.items.length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.items.length > 0; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-filtereditor dx-popup-general\' }, resizeEnabled: true, onResize: function() { $data.resizeAceEditor() }, width: 700, height: 500, maxHeight: \'95%\', maxWidth: \'95%\', minHeight: 300, minWidth: 400, title: options() && options().title(), visible: popupVisible, onShown: function() { $data.focusText() }, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'showTitle': true, 'wrapperAttr': { 'class': 'dx-filtereditor dx-popup-general' }, 'resizeEnabled': true, 'onResize': function () { $context.$data.resizeAceEditor(); }, 'width': 700, 'height': 500, 'maxHeight': '95%', 'maxWidth': '95%', 'minHeight': 300, 'minWidth': 400, 'title': $context.$data.options() && $context.$data.options().title(), 'visible': $context.$data.popupVisible, 'onShown': function () { $context.$data.focusText(); }, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxclick: showPopup', function ($context, $element) { return { 'dxclick': function () { return $context.$data.showPopup; } }; });
addToBindingsCache('text: target.displayType, dxclick: showPopup, css: target.css', function ($context, $element) { return { 'text': function () { return $context.$data.target.displayType; }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return $context.$data.target.css; } }; });
addToBindingsCache('text: target.parameterName(), dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }', function ($context, $element) { return { 'text': function () { return $context.$data.target.parameterName(); }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return { 'dxd-state-selected': $context.$data.target.isSelected }; } }; });
addToBindingsCache('text: target.displayName, dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }', function ($context, $element) { return { 'text': function () { return $context.$data.target.displayName; }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return { 'dxd-state-selected': $context.$data.target.isSelected }; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-edit'; } }; });
addToBindingsCache('dxPopupWithAutoHeight: { minWidth:\'170px\', maxWidth:\'500px\', width: \'auto\', height: \'300px\', wrapperAttr: { class: \'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay\' }, focusStateEnabled: false, position: $data.rtl ? { my: \'right top\', at: \'right bottom\', of: popupService.target} : { my: \'left top\', at: \'left bottom\', of: popupService.target }, container: $data.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, visible: popupService.visible }', function ($context, $element) { return { 'dxPopupWithAutoHeight': function () { return { 'minWidth': '170px', 'maxWidth': '500px', 'width': 'auto', 'height': '300px', 'wrapperAttr': { 'class': 'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay' }, 'focusStateEnabled': false, 'position': $context.$data.rtl ? { 'my': 'right top', 'at': 'right bottom', 'of': $context.$data.popupService.target } : { 'my': 'left top', 'at': 'left bottom', 'of': $context.$data.popupService.target }, 'container': $context.$data.getPopupContainer($element), 'target': $context.$data.popupService.target, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'shading': false, 'visible': $context.$data.popupService.visible }; } }; });
addToBindingsCache('dxTextBox: { placeholder: searchPlaceholder(), value: ($data.value || $data.filterString), height: \'100%\', width: \'100%\', stylingMode: \'underlined\', valueChangeEvent: \'keyup\' }', function ($context, $element) { return { 'dxTextBox': function () { return { 'placeholder': $context.$data.searchPlaceholder(), 'value': ($context.$data.value || $context.$data.filterString), 'height': '100%', 'width': '100%', 'stylingMode': 'underlined', 'valueChangeEvent': 'keyup' }; } }; });
addToBindingsCache('template: { name: \'dx-filtereditor-search-panel\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-filtereditor-search-panel', 'data': $context.$data }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }, css: { \'dx-filtereditor-filtered\': isFiltered }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; }, 'css': function () { return { 'dx-filtereditor-filtered': $context.$data.isFiltered }; } }; });
addToBindingsCache('text: $data.displayText || $data.name, click: function() { $parent.click($data); }, attr: {\'title\': $data.displayText || $data.name }', function ($context, $element) { return { 'text': function () { return $context.$data.displayText || $context.$data.name; }, 'click': function () { return function () { $context.$parent.click($context.$data); }; }, 'attr': function () { return { 'title': $context.$data.displayText || $context.$data.name }; } }; });
addToBindingsCache('searchHighlighting: { text: $data.displayText || $data.name, textToSearch: $parent.filterString }, click: function() { $parent.click($data); }, attr: {\'title\': $data.displayText || $data.name }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayText || $context.$data.name, 'textToSearch': $context.$parent.filterString }; }, 'click': function () { return function () { $context.$parent.click($context.$data); }; }, 'attr': function () { return { 'title': $context.$data.displayText || $context.$data.name }; } }; });
addToBindingsCache('treeListSearchPanel: { controllers: data().treeListController, template: \'dx-filtereditor-search-panel\' }', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.data().treeListController, 'template': 'dx-filtereditor-search-panel' }; } }; });
addToBindingsCache('treelist: data', function ($context, $element) { return { 'treelist': function () { return $context.$data.data; } }; });
addToBindingsCache('with: popupService', function ($context, $element) { return { 'with': function () { return $context.$data.popupService; } }; });
addToBindingsCache('with: data', function ($context, $element) { return { 'with': function () { return $context.$data.data; } }; });
addToBindingsCache('template: template', function ($context, $element) { return { 'template': function () { return $context.$data.template; } }; });
addToBindingsCache('if: $data.isFiltered', function ($context, $element) { return { 'if': function () { return $context.$data.isFiltered; } }; });
addToBindingsCache('foreach: data', function ($context, $element) { return { 'foreach': function () { return $context.$data.data; } }; });
addToBindingsCache('if: !$data.hidden', function ($context, $element) { return { 'if': function () { return !$context.$data.hidden; } }; });
addToBindingsCache('ifnot: $parent.isFiltered', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.isFiltered; } }; });
addToBindingsCache('if: $parent.isFiltered', function ($context, $element) { return { 'if': function () { return $context.$parent.isFiltered; } }; });
addToBindingsCache('dxList: { items: $data.items, selectedItems: $data.selectedItems, onItemClick: $data.action, selectionMode: \'single\', activeStateEnabled: false }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.items, 'selectedItems': $context.$data.selectedItems, 'onItemClick': $context.$data.action, 'selectionMode': 'single', 'activeStateEnabled': false }; } }; });
addToBindingsCache('click: $parent.removeItem, visible: $data.canRemove', function ($context, $element) { return { 'click': function () { return $context.$parent.removeItem; }, 'visible': function () { return $context.$data.canRemove; } }; });
addToBindingsCache('text: $data.displayName', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; } }; });
addToBindingsCache('text: getDisplayText(\'types\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('types'); } }; });
addToBindingsCache('dxButton:{ onClick: addCustomFormat, text: getDisplayText(\'add\'), disabled: !canAddCustomFormat() }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.addCustomFormat, 'text': $context.$data.getDisplayText('add'), 'disabled': !$context.$data.canAddCustomFormat() }; } }; });
addToBindingsCache('dxTextBox: { value: formatResult, onInput: function(e) { updateInputText(\'formatResult\', e.component); }  }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.formatResult, 'onInput': function (e) { $context.$data.updateInputText('formatResult', e.component); } }; } }; });
addToBindingsCache('text: getDisplayText(\'prefix\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('prefix'); } }; });
addToBindingsCache('dxTextBox: { value: formatPrefix, onInput: function(e) { updateInputText(\'formatPrefix\', e.component); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.formatPrefix, 'onInput': function (e) { $context.$data.updateInputText('formatPrefix', e.component); } }; } }; });
addToBindingsCache('text: getDisplayText(\'suffix\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('suffix'); } }; });
addToBindingsCache('dxTextBox: { value: formatSuffix, onInput: function(e) { updateInputText(\'formatSuffix\', e.component); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.formatSuffix, 'onInput': function (e) { $context.$data.updateInputText('formatSuffix', e.component); } }; } }; });
addToBindingsCache('template: { name: \'dx-format-string-list\', data: { items: patternList, action: setFormat, removeItem: removeCustomFormat, selectedItems: selectedFormats } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-format-string-list', 'data': { 'items': $context.$data.patternList, 'action': $context.$data.setFormat, 'removeItem': $context.$data.removeCustomFormat, 'selectedItems': $context.$data.selectedFormats } }; } }; });
addToBindingsCache('dxEllipsisEditor: { value: value, disabled: disabled, buttonAction: function() { popupVisible(true); } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'buttonAction': function () { $context.$data.popupVisible(true); } }; } }; });
addToBindingsCache('dxPopup: { wrapperAttr: { class: \'dx-format-string dx-popup-general\' }, showTitle: true, width: \'95%\', height: \'95%\', minWidth: 650, title: getDisplayText(\'title\'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dx-format-string dx-popup-general' }, 'showTitle': true, 'width': '95%', 'height': '95%', 'minWidth': 650, 'title': $context.$data.getDisplayText('title'), 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) } }; } }; });
addToBindingsCache('text: getDisplayText(\'category\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('category'); } }; });
addToBindingsCache('css: { \'dx-format-general\': isGeneralType }', function ($context, $element) { return { 'css': function () { return { 'dx-format-general': $context.$data.isGeneralType }; } }; });
addToBindingsCache('text: getDisplayText(\'preview\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('preview'); } }; });
addToBindingsCache('text: previewString', function ($context, $element) { return { 'text': function () { return $context.$data.previewString; } }; });
addToBindingsCache('template: { name: \'dx-format-string-list\', data: { items: types, action: setType, selectedItems: selectedTypes } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-format-string-list', 'data': { 'items': $context.$data.types, 'action': $context.$data.setType, 'selectedItems': $context.$data.selectedTypes } }; } }; });
addToBindingsCache('if: !isGeneralType', function ($context, $element) { return { 'if': function () { return !$context.$data.isGeneralType; } }; });
addToBindingsCache('template: \'dx-format-string-edit-area\'', function ($context, $element) { return { 'template': function () { return 'dx-format-string-edit-area'; } }; });
addToBindingsCache('if: isGeneralType', function ($context, $element) { return { 'if': function () { return $context.$data.isGeneralType; } }; });
addToBindingsCache('template: \'dx-format-string-edit-area-general\'', function ($context, $element) { return { 'template': function () { return 'dx-format-string-edit-area-general'; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: ko.unwrap($data.imageTemplateName), iconClass: $data.imageClassName, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible), disabled: $data.disabled && $data.disabled() }, attr: { title: $data.displayText && $data.displayText() || text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.clickAction($context.$parent); }, 'icon': $context.ko.unwrap($context.$data.imageTemplateName), 'iconClass': $context.$data.imageClassName, 'visible': ($context.ko.unwrap($context.$data.visible) == undefined) || $context.ko.unwrap($context.$data.visible), 'disabled': $context.$data.disabled && $context.$data.disabled() }; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\',  onClick: $parent.reverseCollapsed }, visible: $parent.hasContent, attr: { title: $data.displayText() }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'icon': 'dxrd-svg-operations-edit', 'iconClass': 'dx-image-edit', 'onClick': $context.$parent.reverseCollapsed }; }, 'visible': function () { return $context.$parent.hasContent; }, 'attr': function () { return { 'title': $context.$data.displayText() }; } }; });
addToBindingsCache('if: $data.templateName && (ko.unwrap($root.canAddItems) || $root.canAddItems === undefined)', function ($context, $element) { return { 'if': function () { return $context.$data.templateName && ($context.ko.unwrap($context.$root.canAddItems) || $context.$root.canAddItems === undefined); } }; });
addToBindingsCache('if: !$data.templateName && (ko.unwrap($root.canAddItems) || canAddItems)', function ($context, $element) { return { 'if': function () { return !$context.$data.templateName && ($context.ko.unwrap($context.$root.canAddItems) || $context.$data.canAddItems); } }; });
addToBindingsCache('template: { name: \'dx-treelist-edit-action\', data: treeListEditAction }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-treelist-edit-action', 'data': $context.$data.treeListEditAction }; } }; });
addToBindingsCache('template: \'dx-treelist-item-actions\'', function ($context, $element) { return { 'template': function () { return 'dx-treelist-item-actions'; } }; });
addToBindingsCache('styleunit: padding, click: events.click', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'click': function () { return $context.$data.events.click; } }; });
addToBindingsCache('dxdAccordionExt: { collapsed: collapsed, lazyContentRendering: true, setCollapsedChangedEvent: setCollapsedChangedEvent }', function ($context, $element) { return { 'dxdAccordionExt': function () { return { 'collapsed': $context.$data.collapsed, 'lazyContentRendering': true, 'setCollapsedChangedEvent': $context.$data.setCollapsedChangedEvent }; } }; });
addToBindingsCache('visible: isSelected || isHovered', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected || $context.$data.isHovered; } }; });
addToBindingsCache('event: events, styleunit: padding, css: cssRules, attr: attr', function ($context, $element) { return { 'event': function () { return $context.$data.events; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return $context.$data.cssRules; }, 'attr': function () { return $context.$data.attr; } }; });
addToBindingsCache('style: { \'padding-left\': hasItems ? \'0px\': \'18px\' }', function ($context, $element) { return { 'style': function () { return { 'padding-left': $context.$data.hasItems ? '0px' : '18px' }; } }; });
addToBindingsCache('click: function(s, e) { $root.hideContextMenu && $root.hideContextMenu(); toggleSelected(s, e); }, event: $root.ContextMenusEnabled && $root.ContextMenusEnabled() ? { contextmenu: toggleSelected } : null, draggable: isDraggable ? dragDropHandler : null', function ($context, $element) { return { 'click': function () { return function (s, e) { $context.$root.hideContextMenu && $context.$root.hideContextMenu(); $context.$data.toggleSelected(s, e); }; }, 'event': function () { return $context.$root.ContextMenusEnabled && $context.$root.ContextMenusEnabled() ? { 'contextmenu': $context.$data.toggleSelected } : null; }, 'draggable': function () { return $context.$data.isDraggable ? $context.$data.dragDropHandler : null; } }; });
addToBindingsCache('searchHighlighting: { text: text, textToSearch: searchModel.textToSearch, searchOptions: searchModel.searchOptions }, attr: { title: text }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.text, 'textToSearch': $context.$data.searchModel.textToSearch, 'searchOptions': $context.$data.searchModel.searchOptions }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('css: imageClassName, template: { name: imageTemplateName, if: !!imageTemplateName }, attr: { title: text }', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.$data.imageTemplateName }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('if: searchModel.searchEnabled', function ($context, $element) { return { 'if': function () { return $context.$data.searchModel.searchEnabled; } }; });
addToBindingsCache('ifnot: searchModel.searchEnabled', function ($context, $element) { return { 'ifnot': function () { return $context.$data.searchModel.searchEnabled; } }; });
addToBindingsCache('if: hasContent', function ($context, $element) { return { 'if': function () { return $context.$data.hasContent; } }; });
addToBindingsCache('template: templates.accordionItem', function ($context, $element) { return { 'template': function () { return $context.$data.templates.accordionItem; } }; });
addToBindingsCache('ifnot: hasContent', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hasContent; } }; });
addToBindingsCache('template: templates.headerItem', function ($context, $element) { return { 'template': function () { return $context.$data.templates.headerItem; } }; });
addToBindingsCache('template: { name: contenttemplate }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contenttemplate }; } }; });
addToBindingsCache('template: actionsTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.actionsTemplate; } }; });
addToBindingsCache('if: actions && actions.length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.actions && $context.$data.actions.length > 0; } }; });
addToBindingsCache('template: templates.actionsContainer', function ($context, $element) { return { 'template': function () { return $context.$data.templates.actionsContainer; } }; });
addToBindingsCache('template: templates.headerItemContent', function ($context, $element) { return { 'template': function () { return $context.$data.templates.headerItemContent; } }; });
addToBindingsCache('template: templates.itemTextContent', function ($context, $element) { return { 'template': function () { return $context.$data.templates.itemTextContent; } }; });
addToBindingsCache('event: events, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected dxd-back-secondary\': isSelected || isMultiSelected }', function ($context, $element) { return { 'event': function () { return $context.$data.events; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected dxd-back-secondary': $context.$data.isSelected || $context.$data.isMultiSelected }; } }; });
addToBindingsCache('css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed, style: { \'visibility\': hasItems ? \'visible\' : \'hidden\' }', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'template': function () { return 'dxrd-svg-collapsed'; }, 'click': function () { return $context.$data.toggleCollapsed; }, 'style': function () { return { 'visibility': $context.$data.hasItems ? 'visible' : 'hidden' }; } }; });
addToBindingsCache('click: toggleSelected,  draggable: isDraggable ? dragDropHandler : null', function ($context, $element) { return { 'click': function () { return $context.$data.toggleSelected; }, 'draggable': function () { return $context.$data.isDraggable ? $context.$data.dragDropHandler : null; } }; });
addToBindingsCache('template: "dx-treelist-accordion-item-with-hover"', function ($context, $element) { return { 'template': function () { return 'dx-treelist-accordion-item-with-hover'; } }; });
addToBindingsCache('template: "dx-treelist-header-item-with-hover"', function ($context, $element) { return { 'template': function () { return 'dx-treelist-header-item-with-hover'; } }; });
addToBindingsCache('dxTextBox: { mode: \'search\',  value:value, valueChangeEvent: \'keyup\', showClearButton: true, placeholder: searchPlaceholder()}', function ($context, $element) { return { 'dxTextBox': function () { return { 'mode': 'search', 'value': $context.$data.value, 'valueChangeEvent': 'keyup', 'showClearButton': true, 'placeholder': $context.$data.searchPlaceholder() }; } }; });
addToBindingsCache('lazy: { resolver: resolver, innerBindings: { template: templateName } }', function ($context, $element) { return { 'lazy': function () { return { 'resolver': $context.$data.resolver, 'innerBindings': { 'template': $context.$data.templateName } }; } }; });
addToBindingsCache('if: !collapsed', function ($context, $element) { return { 'if': function () { return !$context.$data.collapsed; } }; });
addToBindingsCache('template: { name: \'dx-treelist\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-treelist' }; } }; });
