/**
* DevExpress Analytics (dx-query-builder-bindings.js)
* Version:  24.1.7
* Build date: Oct 28, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { addToBindingsCache } from './property-grid/widgets/internal/_bindingsCache';
addToBindingsCache('attr: { x1: startPoint().relativeX, y1: startPoint().relativeY, x2: endPoint().relativeX, y2: endPoint().relativeY }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.startPoint().relativeX, 'y1': $context.$data.startPoint().relativeY, 'x2': $context.$data.endPoint().relativeX, 'y2': $context.$data.endPoint().relativeY }; } }; });
addToBindingsCache('styleunit: position, trackCursor: underCursor, style: { \'marginLeft\': -3 * _context.zoom() + \'px\', \'marginTop\': -3 * _context.zoom() + \'px\' }, draggable: $root.connectingPointDragHandler', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'style': function () { return { 'marginLeft': -3 * $context.$data._context.zoom() + 'px', 'marginTop': -3 * $context.$data._context.zoom() + 'px' }; }, 'draggable': function () { return $context.$root.connectingPointDragHandler; } }; });
addToBindingsCache('draggable: $root.connectionPointDragHandler, styleunit: { top: relativeY, left: relativeX }', function ($context, $element) { return { 'draggable': function () { return $context.$root.connectionPointDragHandler; }, 'styleunit': function () { return { 'top': $context.$data.relativeY, 'left': $context.$data.relativeX }; } }; });
addToBindingsCache('styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('styleunit: position, dxclick: function() {}, draggable: $root.dragHandler', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'dxclick': function () { return function () { }; }, 'draggable': function () { return $context.$root.dragHandler; } }; });
addToBindingsCache('template: { name: \'dxdd-connection-line\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxdd-connection-line' }; } }; });
addToBindingsCache('with: startPoint', function ($context, $element) { return { 'with': function () { return $context.$data.startPoint; } }; });
addToBindingsCache('template: { name: \'dxdd-connection-point-selection\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxdd-connection-point-selection' }; } }; });
addToBindingsCache('with: endPoint', function ($context, $element) { return { 'with': function () { return $context.$data.endPoint; } }; });
addToBindingsCache('attr: { id: \'dxqb-arrow_end\' + connectorID() }', function ($context, $element) { return { 'attr': function () { return { 'id': 'dxqb-arrow_end' + $context.$data.connectorID() }; } }; });
addToBindingsCache('attr: { id: \'dxqb-arrow_start\' + connectorID() }', function ($context, $element) { return { 'attr': function () { return { 'id': 'dxqb-arrow_start' + $context.$data.connectorID() }; } }; });
addToBindingsCache('attr: { points: routePointsSet, \'marker-end\': showArrow() ? \'url(#dxqb-arrow_end\' + connectorID() + \')\' : \'\', \'marker-start\': showRightArrow() ? \'url(#dxqb-arrow_start\' + connectorID() + \')\' : \'\' }', function ($context, $element) { return { 'attr': function () { return { 'points': $context.$data.routePointsSet, 'marker-end': $context.$data.showArrow() ? 'url(#dxqb-arrow_end' + $context.$data.connectorID() + ')' : '', 'marker-start': $context.$data.showRightArrow() ? 'url(#dxqb-arrow_start' + $context.$data.connectorID() + ')' : '' }; } }; });
addToBindingsCache('if: showArrow', function ($context, $element) { return { 'if': function () { return $context.$data.showArrow; } }; });
addToBindingsCache('if: showRightArrow', function ($context, $element) { return { 'if': function () { return $context.$data.showRightArrow; } }; });
addToBindingsCache('styleunit: position, visible: isVisible', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'visible': function () { return $context.$data.isVisible; } }; });
addToBindingsCache('styleunit: position', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; } }; });
addToBindingsCache('trackCursor: underCursor, click: $root.selectItemProperties', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'click': function () { return $context.$root.selectItemProperties; } }; });
addToBindingsCache('styleunit: position, dxclick: function() {}, visible: isVisible', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'dxclick': function () { return function () { }; }, 'visible': function () { return $context.$data.isVisible; } }; });
addToBindingsCache('styleunit: position, style: { cursor: isVerticalLine ? \'ew-resize\' : \'ns-resize\' }, routeLineDraggable: { starting: $root.resizeHandler.starting, stopped: function() { resizeStopped(); $root.resizeHandler.stopped(); }, forceResize: resizeHandler }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'style': function () { return { 'cursor': $context.$data.isVerticalLine ? 'ew-resize' : 'ns-resize' }; }, 'routeLineDraggable': function () { return { 'starting': $context.$root.resizeHandler.starting, 'stopped': function () { $context.$data.resizeStopped(); $context.$root.resizeHandler.stopped(); }, 'forceResize': $context.$data.resizeHandler }; } }; });
addToBindingsCache('template: { name: \'dxdd-routed-connection-line\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxdd-routed-connection-line' }; } }; });
addToBindingsCache('foreach: routeLineWrappers', function ($context, $element) { return { 'foreach': function () { return $context.$data.routeLineWrappers; } }; });
addToBindingsCache('with: $parent', function ($context, $element) { return { 'with': function () { return $context.$parent; } }; });
addToBindingsCache('ifnot: isLocked', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isLocked; } }; });
addToBindingsCache('if: isLocked', function ($context, $element) { return { 'if': function () { return $context.$data.isLocked; } }; });
addToBindingsCache('styleunit: { lineHeight: positionLineHeightWithoutMargins }, style: css', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.positionLineHeightWithoutMargins }; }, 'style': function () { return $context.$data.css; } }; });
addToBindingsCache('template: contenttemplate, styleunit: { \'height\': positionLineHeightWithoutMargins, \'width\': positionWidthWithoutMargins }', function ($context, $element) { return { 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.positionLineHeightWithoutMargins, 'width': $context.$data.positionWidthWithoutMargins }; } }; });
addToBindingsCache('event: { dblclick: $root.inlineTextEdit.show($element) }, css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused }, resizable: $root.resizeHandler, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$root.inlineTextEdit.show($element) }; }, 'css': function () { return { 'dxrd-selected': $context.$data.selected, 'dxrd-focused': $context.$data.focused }; }, 'resizable': function () { return $context.$root.resizeHandler; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('template: contenttemplate, styleunit: { \'height\': positionLineHeightWithoutMargins, \'width\': positionWidthWithoutMargins}', function ($context, $element) { return { 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.positionLineHeightWithoutMargins, 'width': $context.$data.positionWidthWithoutMargins }; } }; });
addToBindingsCache('dxTextArea: { value: text, onKeyUp: keypressAction, valueChangeEvent: \'keyup\' }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.text, 'onKeyUp': $context.$data.keypressAction, 'valueChangeEvent': 'keyup' }; } }; });
addToBindingsCache('text: getControlModel().text', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().text; } }; });
addToBindingsCache('if: !$root.inlineTextEdit.visible()', function ($context, $element) { return { 'if': function () { return !$context.$root.inlineTextEdit.visible(); } }; });
addToBindingsCache('if: $root.inlineTextEdit.visible', function ($context, $element) { return { 'if': function () { return $context.$root.inlineTextEdit.visible; } }; });
addToBindingsCache('with: $root.inlineTextEdit', function ($context, $element) { return { 'with': function () { return $context.$root.inlineTextEdit; } }; });
addToBindingsCache('if: getControlModel().type() === \'Ellipse\'', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().type() === 'Ellipse'; } }; });
addToBindingsCache('if: getControlModel().type() === \'Condition\'', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().type() === 'Condition'; } }; });
addToBindingsCache('if: !getControlModel().type()', function ($context, $element) { return { 'if': function () { return !$context.$data.getControlModel().type(); } }; });
addToBindingsCache('foreach: connectingPoints', function ($context, $element) { return { 'foreach': function () { return $context.$data.connectingPoints; } }; });
addToBindingsCache('template: \'dxdd-connecting-point\'', function ($context, $element) { return { 'template': function () { return 'dxdd-connecting-point'; } }; });
addToBindingsCache('styleunit: { \'width\': Math.min(pageWidth(), $root.surfaceSize()) }, click: function(_, e) { $root.selection.clickHandler(null, e); e.stopPropagation(); }, keyDownActions: $root.actionLists.getViewModel()', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.min($context.$data.pageWidth(), $context.$root.surfaceSize()) }; }, 'click': function () { return function (_, e) { $context.$root.selection.clickHandler(null, e); e.stopPropagation(); }; }, 'keyDownActions': function () { return $context.$root.actionLists.getViewModel(); } }; });
addToBindingsCache('styleunit: { minWidth: Math.min(pageWidth(), $root.surfaceSize()), maxWidth: pageWidth(),  maxHeight: pageHeight() + 20 }', function ($context, $element) { return { 'styleunit': function () { return { 'minWidth': Math.min($context.$data.pageWidth(), $context.$root.surfaceSize()), 'maxWidth': $context.$data.pageWidth(), 'maxHeight': $context.$data.pageHeight() + 20 }; } }; });
addToBindingsCache('selectable: { selection: $root.selection, zoom: zoom }', function ($context, $element) { return { 'selectable': function () { return { 'selection': $context.$root.selection, 'zoom': $context.$data.zoom }; } }; });
addToBindingsCache('styleunit: { \'width\': pageWidth(), \'height\': pageHeight() }, trackCursor: underCursor', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.pageWidth(), 'height': $context.$data.pageHeight() }; }, 'trackCursor': function () { return $context.$data.underCursor; } }; });
addToBindingsCache('foreach: controls', function ($context, $element) { return { 'foreach': function () { return $context.$data.controls; } }; });
addToBindingsCache('template: { name: isSelected() ? selectiontemplate : template }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.isSelected() ? $context.$data.selectiontemplate : $context.$data.template }; } }; });
addToBindingsCache('attr: { x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.startPoint.x, 'y1': $context.$data.startPoint.y, 'x2': $context.$data.endPoint.x, 'y2': $context.$data.endPoint.y }; } }; });
addToBindingsCache('styleunit: { \'width\': $root.surfaceSize }, click: function(_, e) { $root.selection.clickHandler(null, e); e.stopPropagation(); }, keyDownActions: $root.actionLists.getViewModel()', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$root.surfaceSize }; }, 'click': function () { return function (_, e) { $context.$root.selection.clickHandler(null, e); e.stopPropagation(); }; }, 'keyDownActions': function () { return $context.$root.actionLists.getViewModel(); } }; });
addToBindingsCache('dxScrollView: { direction: \'both\', showScrollbar: \'always\', scrollByContent: false, scrollByThumb: true, bounceEnabled: false, useNative: true, height: \'100%\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'both', 'showScrollbar': 'always', 'scrollByContent': false, 'scrollByThumb': true, 'bounceEnabled': false, 'useNative': true, 'height': '100%' }; } }; });
addToBindingsCache('styleunit: { \'minWidth\': pageWidth, \'minHeight\': pageHeight }, trackCursor: { recalculateBounds: true, underCursor: underCursor }', function ($context, $element) { return { 'styleunit': function () { return { 'minWidth': $context.$data.pageWidth, 'minHeight': $context.$data.pageHeight }; }, 'trackCursor': function () { return { 'recalculateBounds': true, 'underCursor': $context.$data.underCursor }; } }; });
addToBindingsCache('trackCursor: { recalculateBounds: true, underCursor: underCursor }, style: { \'z-index\' : $parent.dragDropStarted() ? 2 : null }', function ($context, $element) { return { 'trackCursor': function () { return { 'recalculateBounds': true, 'underCursor': $context.$data.underCursor }; }, 'style': function () { return { 'z-index': $context.$parent.dragDropStarted() ? 2 : null }; } }; });
addToBindingsCache('text: placeholder()', function ($context, $element) { return { 'text': function () { return $context.$data.placeholder(); } }; });
addToBindingsCache('styleunit: { top: position.top(), left: position.left() }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.position.top(), 'left': $context.$data.position.left() }; } }; });
addToBindingsCache('attr: {x1 : $data.x, y1: $data.y, x2: $parent.routePoints()[$index()+1].x, y2: $parent.routePoints()[$index()+1].y }', function ($context, $element) { return { 'attr': function () { return { 'x1': $context.$data.x, 'y1': $context.$data.y, 'x2': $context.$parent.routePoints()[$context.$index() + 1].x, 'y2': $context.$parent.routePoints()[$context.$index() + 1].y }; } }; });
addToBindingsCache('if: tables().length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.tables().length === 0; } }; });
addToBindingsCache('foreach: relations', function ($context, $element) { return { 'foreach': function () { return $context.$data.relations; } }; });
addToBindingsCache('foreach: conditions', function ($context, $element) { return { 'foreach': function () { return $context.$data.conditions; } }; });
addToBindingsCache('if: !isSelected()', function ($context, $element) { return { 'if': function () { return !$context.$data.isSelected(); } }; });
addToBindingsCache('foreach: tables', function ($context, $element) { return { 'foreach': function () { return $context.$data.tables; } }; });
addToBindingsCache('if: isSelected()', function ($context, $element) { return { 'if': function () { return $context.$data.isSelected(); } }; });
addToBindingsCache('template: selectiontemplate', function ($context, $element) { return { 'template': function () { return $context.$data.selectiontemplate; } }; });
addToBindingsCache('with: $root.columnDragHandler.dragDropConnector', function ($context, $element) { return { 'with': function () { return $context.$root.columnDragHandler.dragDropConnector; } }; });
addToBindingsCache('foreach: routePoints', function ($context, $element) { return { 'foreach': function () { return $context.$data.routePoints; } }; });
addToBindingsCache('if: $index() < ($parent.routePoints().length - 1)', function ($context, $element) { return { 'if': function () { return $context.$index() < ($context.$parent.routePoints().length - 1); } }; });
addToBindingsCache('trackCursor: { recalculateBounds: true, underCursor: underCursor }, draggable: $root.columnDragHandler, css: cssClasses($root.surface(), $root.columnDragHandler, $parent), click: $root.selectItemProperties', function ($context, $element) { return { 'trackCursor': function () { return { 'recalculateBounds': true, 'underCursor': $context.$data.underCursor }; }, 'draggable': function () { return $context.$root.columnDragHandler; }, 'css': function () { return $context.$data.cssClasses($context.$root.surface(), $context.$root.columnDragHandler, $context.$parent); }, 'click': function () { return $context.$root.selectItemProperties; } }; });
addToBindingsCache('dxCheckBox: { value: selectedWrapper }, click: function(surface, e) { surface.toggleSelected(); e.stopPropagation(); return true;  }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.selectedWrapper }; }, 'click': function () { return function (surface, e) { surface.toggleSelected(); e.stopPropagation(); return true; }; } }; });
addToBindingsCache('attr: { title: getControlModel().actualName }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.getControlModel().actualName }; } }; });
addToBindingsCache('text: getControlModel().actualName', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().actualName; } }; });
addToBindingsCache('trackCursor: underCursor, css: cssClasses(), click: $root.selectItemProperties', function ($context, $element) { return { 'trackCursor': function () { return $context.$data.underCursor; }, 'css': function () { return $context.$data.cssClasses(); }, 'click': function () { return $context.$root.selectItemProperties; } }; });
addToBindingsCache('attr: { title: getControlModel().name }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.getControlModel().name }; } }; });
addToBindingsCache('text: getControlModel().name', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().name; } }; });
addToBindingsCache('if:  $data.isAscending()', function ($context, $element) { return { 'if': function () { return $context.$data.isAscending(); } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-sorting_asc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-sorting_asc'; } }; });
addToBindingsCache('if:  $data.isDescending()', function ($context, $element) { return { 'if': function () { return $context.$data.isDescending(); } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-sorting_desc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-sorting_desc'; } }; });
addToBindingsCache('if: $data.getControlModel().groupBy', function ($context, $element) { return { 'if': function () { return $context.$data.getControlModel().groupBy; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-group_by\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-group_by'; } }; });
addToBindingsCache('if: $data.isAggregate()', function ($context, $element) { return { 'if': function () { return $context.$data.isAggregate(); } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-aggregate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-aggregate'; } }; });
addToBindingsCache('resizable: resizable($root.resizeHandler, $element), styleunit: position', function ($context, $element) { return { 'resizable': function () { return $context.$data.resizable($context.$root.resizeHandler, $element); }, 'styleunit': function () { return $context.$data.position; } }; });
addToBindingsCache('css: {\'dxrd-selected\': selected, \'dxrd-focused\': focused }, draggable: $root.dragHandler, styleunit: position, trackCursor: underCursor, click: $root.selectItemProperties', function ($context, $element) { return { 'css': function () { return { 'dxrd-selected': $context.$data.selected, 'dxrd-focused': $context.$data.focused }; }, 'draggable': function () { return $context.$root.dragHandler; }, 'styleunit': function () { return $context.$data.position; }, 'trackCursor': function () { return $context.$data.underCursor; }, 'click': function () { return $context.$root.selectItemProperties; } }; });
addToBindingsCache('styleunit: { lineHeight: position.lineHeight }, style: css', function ($context, $element) { return { 'styleunit': function () { return { 'lineHeight': $context.$data.position.lineHeight }; }, 'style': function () { return $context.$data.css; } }; });
addToBindingsCache('template: contenttemplate, styleunit: { \'height\': position.lineHeight, \'width\': position.width }', function ($context, $element) { return { 'template': function () { return $context.$data.contenttemplate; }, 'styleunit': function () { return { 'height': $context.$data.position.lineHeight, 'width': $context.$data.position.width }; } }; });
addToBindingsCache('dxCheckBox: { value: selectedWrapper }, click: function(surface, e) { $root.undoEngine().start(); surface.toggleSelected(); $root.undoEngine().end(); e.stopPropagation(); return true; }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.selectedWrapper }; }, 'click': function () { return function (surface, e) { $context.$root.undoEngine().start(); surface.toggleSelected(); $context.$root.undoEngine().end(); e.stopPropagation(); return true; }; } }; });
addToBindingsCache('text: $root.columnsLoadingMsg()', function ($context, $element) { return { 'text': function () { return $context.$root.columnsLoadingMsg(); } }; });
addToBindingsCache('style: { cursor: selected() ? \'move\' : \'default\' }', function ($context, $element) { return { 'style': function () { return { 'cursor': $context.$data.selected() ? 'move' : 'default' }; } }; });
addToBindingsCache('event: { dblclick: $root.inlineTextEdit.show($element) }, style: { cursor: selected() ? \'move\' : \'default\' }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$root.inlineTextEdit.show($element) }; }, 'style': function () { return { 'cursor': $context.$data.selected() ? 'move' : 'default' }; } }; });
addToBindingsCache('text: getControlModel().displaySourceName', function ($context, $element) { return { 'text': function () { return $context.$data.getControlModel().displaySourceName; } }; });
addToBindingsCache('if: $data.isSelected()', function ($context, $element) { return { 'if': function () { return $context.$data.isSelected(); } }; });
addToBindingsCache('template: titletemplate', function ($context, $element) { return { 'template': function () { return $context.$data.titletemplate; } }; });
addToBindingsCache('ifnot: $data.isInitialized()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isInitialized(); } }; });
addToBindingsCache('if: $data.isInitialized()', function ($context, $element) { return { 'if': function () { return $context.$data.isInitialized(); } }; });
addToBindingsCache('template: { name: asterisk.template, data: asterisk }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.asterisk.template, 'data': $context.$data.asterisk }; } }; });
addToBindingsCache('foreach: columns', function ($context, $element) { return { 'foreach': function () { return $context.$data.columns; } }; });
addToBindingsCache('lazy: { template: $data.template  }', function ($context, $element) { return { 'lazy': function () { return { 'template': $context.$data.template }; } }; });
addToBindingsCache('if: !$root.inlineTextEdit.visible() || !selected()', function ($context, $element) { return { 'if': function () { return !$context.$root.inlineTextEdit.visible() || !$context.$data.selected(); } }; });
addToBindingsCache('if: $root.inlineTextEdit.visible() && selected()', function ($context, $element) { return { 'if': function () { return $context.$root.inlineTextEdit.visible() && $context.$data.selected(); } }; });
addToBindingsCache('dxPopup: { showTitle: true, resizeEnabled: true, width: 700, height: 500, maxHeight: \'95%\', maxWidth: \'95%\', minHeight: 300, minWidth: 400, title: title(), visible: popupVisible, wrapperAttr: { class: \'dx-filtereditor\' }, toolbarItems: buttonItems, showCloseButton: true, container: $root.getPopupContainer($element), position: { of: $root.getPopupContainer($element) }, }', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'resizeEnabled': true, 'width': 700, 'height': 500, 'maxHeight': '95%', 'maxWidth': '95%', 'minHeight': 300, 'minWidth': 400, 'title': $context.$data.title(), 'visible': $context.$data.popupVisible, 'wrapperAttr': { 'class': 'dx-filtereditor' }, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$root.getPopupContainer($element), 'position': { 'of': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('text: queryName', function ($context, $element) { return { 'text': function () { return $context.$data.queryName; } }; });
addToBindingsCache('service: { name: \'createRelation\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createRelation' }; } }; });
addToBindingsCache('dxPopupWithAutoHeight: { height: \'300px\', focusStateEnabled: false, wrapperAttr: { class: \'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay\' }, position: $root.rtl ? { my: \'right top\', at: \'right bottom\', of: popupService.target } : { my: \'left top\', at: \'left bottom\', of: popupService.target }, container: $root.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, minWidth:\'170px\', maxWidth:\'500px\', width: \'auto\', visible: popupService.visible }', function ($context, $element) { return { 'dxPopupWithAutoHeight': function () { return { 'height': '300px', 'focusStateEnabled': false, 'wrapperAttr': { 'class': 'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay' }, 'position': $context.$root.rtl ? { 'my': 'right top', 'at': 'right bottom', 'of': $context.$data.popupService.target } : { 'my': 'left top', 'at': 'left bottom', 'of': $context.$data.popupService.target }, 'container': $context.$root.getPopupContainer($element), 'target': $context.$data.popupService.target, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'shading': false, 'minWidth': '170px', 'maxWidth': '500px', 'width': 'auto', 'visible': $context.$data.popupService.visible }; } }; });
addToBindingsCache('foreach: masterQueries', function ($context, $element) { return { 'foreach': function () { return $context.$data.masterQueries; } }; });
addToBindingsCache('template: { name: \'dx-masterDetail-editor-relation\', foreach: relations }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-masterDetail-editor-relation', 'foreach': $context.$data.relations }; } }; });
addToBindingsCache('attr: { title: $data.getTitle() }, text: queryName', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.getTitle() }; }, 'text': function () { return $context.$data.queryName; } }; });
addToBindingsCache('service: { name: \'setColumn\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'setColumn' }; } }; });
addToBindingsCache('dxclick: function() {  $parent.remove($data); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$parent.remove($context.$data); }; } }; });
addToBindingsCache('dxTextBox: { value: relationName, onFocusOut: function() { isEditable(false); } }, focus: { on: isEditable }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.relationName, 'onFocusOut': function () { $context.$data.isEditable(false); } }; }, 'focus': function () { return { 'on': $context.$data.isEditable }; } }; });
addToBindingsCache('text: relationName, click: function() { isEditable(true); }', function ($context, $element) { return { 'text': function () { return $context.$data.relationName; }, 'click': function () { return function () { $context.$data.isEditable(true); }; } }; });
addToBindingsCache('dxclick: create', function ($context, $element) { return { 'dxclick': function () { return $context.$data.create; } }; });
addToBindingsCache('foreach: keyColumns', function ($context, $element) { return { 'foreach': function () { return $context.$data.keyColumns; } }; });
addToBindingsCache('template: { name: \'dx-masterDetail-editor-keyColumn\', data: master }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-masterDetail-editor-keyColumn', 'data': $context.$data.master }; } }; });
addToBindingsCache('template: { name: \'dx-masterDetail-editor-keyColumn\', data: detail }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-masterDetail-editor-keyColumn', 'data': $context.$data.detail }; } }; });
addToBindingsCache('text: target.column() || target.selectColumnText(), dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected, \'default\': !target.column() }', function ($context, $element) { return { 'text': function () { return $context.$data.target.column() || $context.$data.target.selectColumnText(); }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return { 'dxd-state-selected': $context.$data.target.isSelected, 'default': !$context.$data.target.column() }; } }; });
addToBindingsCache('dxdTableView: $data.value', function ($context, $element) { return { 'dxdTableView': function () { return $context.$data.value; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fade\', from: 0, to: 1, duration: 700 }, hide: { type: \'fade\', from: 1, to: 0, duration: 700 } }, wrapperAttr: { class: \'dxqb-preview\' }, visible: isVisible, title: title(), showTitle: true, resizeEnabled: true, shading: true, shadingColor: \'transparent\', fullScreen: false, width: 800, height: 544, container: container($element), position: { of: container($element) }, onHidden: function() { $data.data.value(null) }, focusStateEnabled: false }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fade', 'from': 0, 'to': 1, 'duration': 700 }, 'hide': { 'type': 'fade', 'from': 1, 'to': 0, 'duration': 700 } }, 'wrapperAttr': { 'class': 'dxqb-preview' }, 'visible': $context.$data.isVisible, 'title': $context.$data.title(), 'showTitle': true, 'resizeEnabled': true, 'shading': true, 'shadingColor': 'transparent', 'fullScreen': false, 'width': 800, 'height': 544, 'container': $context.$data.container($element), 'position': { 'of': $context.$data.container($element) }, 'onHidden': function () { $context.$data.data.value(null); }, 'focusStateEnabled': false }; } }; });
addToBindingsCache('dxLoadIndicator: { visible: true }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': true }; } }; });
addToBindingsCache('dxButton: { text: okButtonText(), onClick: okButtonHandler, disabled: isLoading }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.okButtonText(), 'onClick': $context.$data.okButtonHandler, 'disabled': $context.$data.isLoading }; } }; });
addToBindingsCache('dxTextArea: { value: value, valueChangeEvent: \'keyup\', readOnly: true }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.value, 'valueChangeEvent': 'keyup', 'readOnly': true }; } }; });
addToBindingsCache('dxAceEditor: { value: value, options: aceOptions, additionalOptions: additionalOptions }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.value, 'options': $context.$data.aceOptions, 'additionalOptions': $context.$data.additionalOptions }; } }; });
addToBindingsCache('if: data && !isLoading()', function ($context, $element) { return { 'if': function () { return $context.$data.data && !$context.$data.isLoading(); } }; });
addToBindingsCache('template: { name: template, data: data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data.data }; } }; });
addToBindingsCache('attr: { class: \'dxd-tableview-title-cell dxd-border-secondary dxd-tableview-resizable\' }', function ($context, $element) { return { 'attr': function () { return { 'class': 'dxd-tableview-title-cell dxd-border-secondary dxd-tableview-resizable' }; } }; });
addToBindingsCache('text: name', function ($context, $element) { return { 'text': function () { return $context.$data.name; } }; });
addToBindingsCache('dxScrollView: { direction: \'both\', scrollByContent: false, showScrollbar: \'always\', scrollByThumb: true, bounceEnabled: false, useNative: false, onScroll: $data.onDataScroll, onInitialized: $data.onDataScrollInitialized }', function ($context, $element) { return { 'dxScrollView': function () { return { 'direction': 'both', 'scrollByContent': false, 'showScrollbar': 'always', 'scrollByThumb': true, 'bounceEnabled': false, 'useNative': false, 'onScroll': $context.$data.onDataScroll, 'onInitialized': $context.$data.onDataScrollInitialized }; } }; });
addToBindingsCache('text: $data, attr: { class: \'dxd-tableview-cell-text dxd-text-primary dxd-tableview-resizable\' + $index() }', function ($context, $element) { return { 'text': function () { return $context.$data; }, 'attr': function () { return { 'class': 'dxd-tableview-cell-text dxd-text-primary dxd-tableview-resizable' + $context.$index() }; } }; });
addToBindingsCache('text: $parents[1].getImageTooLargeText($data), attr: { class: \'dxd-tableview-cell-text dxd-text-primary dxd-tableview-resizable\' + $index() }', function ($context, $element) { return { 'text': function () { return $context.$parents[1].getImageTooLargeText($context.$data); }, 'attr': function () { return { 'class': 'dxd-tableview-cell-text dxd-text-primary dxd-tableview-resizable' + $context.$index() }; } }; });
addToBindingsCache('attr: { class: \'dxd-tableview-cell-text dxd-text-primary dxd-tableview-resizable\' + $index() }', function ($context, $element) { return { 'attr': function () { return { 'class': 'dxd-tableview-cell-text dxd-text-primary dxd-tableview-resizable' + $context.$index() }; } }; });
addToBindingsCache('attr: { src: \'data:image/bmp;base64,\' + $data }', function ($context, $element) { return { 'attr': function () { return { 'src': 'data:image/bmp;base64,' + $context.$data }; } }; });
addToBindingsCache('text: noDataText()', function ($context, $element) { return { 'text': function () { return $context.$data.noDataText(); } }; });
addToBindingsCache('foreach: rtl ? data.schema.reverse() : data.schema', function ($context, $element) { return { 'foreach': function () { return $context.$data.rtl ? $context.$data.data.schema.reverse() : $context.$data.data.schema; } }; });
addToBindingsCache('if: data.values', function ($context, $element) { return { 'if': function () { return $context.$data.data.values; } }; });
addToBindingsCache('foreach: data.values', function ($context, $element) { return { 'foreach': function () { return $context.$data.data.values; } }; });
addToBindingsCache('foreach: $parent.rtl ? $data.reverse() : $data', function ($context, $element) { return { 'foreach': function () { return $context.$parent.rtl ? $context.$data.reverse() : $context.$data; } }; });
addToBindingsCache('ifnot: $parents[1].isImage($index())', function ($context, $element) { return { 'ifnot': function () { return $context.$parents[1].isImage($context.$index()); } }; });
addToBindingsCache('if: $parents[1].isImage($index())', function ($context, $element) { return { 'if': function () { return $context.$parents[1].isImage($context.$index()); } }; });
addToBindingsCache('if: $parents[1].isImageTooLarge($data)', function ($context, $element) { return { 'if': function () { return $context.$parents[1].isImageTooLarge($context.$data); } }; });
addToBindingsCache('ifnot: $parents[1].isImageTooLarge($data)', function ($context, $element) { return { 'ifnot': function () { return $context.$parents[1].isImageTooLarge($context.$data); } }; });
addToBindingsCache('foreach: data.values[0]', function ($context, $element) { return { 'foreach': function () { return $context.$data.data.values[0]; } }; });
addToBindingsCache('ifnot: data.values', function ($context, $element) { return { 'ifnot': function () { return $context.$data.data.values; } }; });
addToBindingsCache('treelist: treeListOptions', function ($context, $element) { return { 'treelist': function () { return $context.$data.treeListOptions; } }; });
addToBindingsCache('treeListSearchPanel: { controllers: $data.fieldListModel.treeListOptions().treeListController }', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.fieldListModel.treeListOptions().treeListController }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, scrollByThumb: true, bounceEnabled: false, useNative: false }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'scrollByThumb': true, 'bounceEnabled': false, 'useNative': false }; } }; });
addToBindingsCache('dxCollectionEditor: $data', function ($context, $element) { return { 'dxCollectionEditor': function () { return $context.$data; } }; });
addToBindingsCache('css: { \'dx-image-expanded\': !collapsed }, template: \'dxrd-svg-collapsed\'', function ($context, $element) { return { 'css': function () { return { 'dx-image-expanded': !$context.$data.collapsed }; }, 'template': function () { return 'dxrd-svg-collapsed'; } }; });
addToBindingsCache('text: $root.getLocalization(value.name), attr: { title: $root.getLocalization(value.name) }', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization($context.$data.value.name); }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.value.name) }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: getProperties({ level: 1 }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.getProperties({ 'level': 1 }) }; } }; });
addToBindingsCache('foreach: properties.getEditors()', function ($context, $element) { return { 'foreach': function () { return $context.$data.properties.getEditors(); } }; });
addToBindingsCache('template: { name: "dxqb-fieldlist-wrapper", data: fieldListModel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxqb-fieldlist-wrapper', 'data': $context.$data.fieldListModel }; } }; });
addToBindingsCache('foreach: getEditors()', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(); } }; });
addToBindingsCache('click: $root.findControl', function ($context, $element) { return { 'click': function () { return $context.$root.findControl; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('lazy: { template: templateName }', function ($context, $element) { return { 'lazy': function () { return { 'template': $context.$data.templateName }; } }; });
addToBindingsCache('dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.parametersBindingsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() })', function ($context, $element) { return { 'dxExpressionEditor': function () { return $context.$data.getOptions({ 'options': $context.$data.value, 'fieldListProvider': $context.$root.parametersBindingsProvider, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }); } }; });
addToBindingsCache('if: $data.value', function ($context, $element) { return { 'if': function () { return $context.$data.value; } }; });
addToBindingsCache('visible: target.isEditable', function ($context, $element) { return { 'visible': function () { return $context.$data.target.isEditable; } }; });
addToBindingsCache('dxTextBox: { value: target._parameterName, onFocusOut: function() { target.createParameter(); target.isEditable(false); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.target._parameterName, 'onFocusOut': function () { $context.$data.target.createParameter(); $context.$data.target.isEditable(false); } }; } }; });
addToBindingsCache('text: target.parameterName, dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected, \'default\': target.isDefaultTextDisplayed() }, visible: $data.target.isEditable() === false', function ($context, $element) { return { 'text': function () { return $context.$data.target.parameterName; }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return { 'dxd-state-selected': $context.$data.target.isSelected, 'default': $context.$data.target.isDefaultTextDisplayed() }; }, 'visible': function () { return $context.$data.target.isEditable() === false; } }; });
addToBindingsCache('text: name, attr: { \'title\': name }, click: function() { $parents[1].click($data); }', function ($context, $element) { return { 'text': function () { return $context.$data.name; }, 'attr': function () { return { 'title': $context.$data.name }; }, 'click': function () { return function () { $context.$parents[1].click($context.$data); }; } }; });
addToBindingsCache('text: $parent.viewModel.defaultDisplay(), click: function() { $parent.viewModel.isEditable(true); $parent.viewModel._parameterName(\'\'); $parent.visible(false); }', function ($context, $element) { return { 'text': function () { return $context.$parent.viewModel.defaultDisplay(); }, 'click': function () { return function () { $context.$parent.viewModel.isEditable(true); $context.$parent.viewModel._parameterName(''); $context.$parent.visible(false); }; } }; });
addToBindingsCache('text: name, click: function() { $parent.click($data); }', function ($context, $element) { return { 'text': function () { return $context.$data.name; }, 'click': function () { return function () { $context.$parent.click($context.$data); }; } }; });
addToBindingsCache('if: $parent.viewModel.canCreateParameters', function ($context, $element) { return { 'if': function () { return $context.$parent.viewModel.canCreateParameters; } }; });
addToBindingsCache('event: { dblclick: events.dblclick }, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected || isMultiSelected }', function ($context, $element) { return { 'event': function () { return { 'dblclick': $context.$data.events.dblclick }; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected': $context.$data.isSelected || $context.$data.isMultiSelected }; } }; });
addToBindingsCache('template: "dxqb-treelist-header-item-with-search"', function ($context, $element) { return { 'template': function () { return 'dxqb-treelist-header-item-with-search'; } }; });
addToBindingsCache('css: $data._extendCssClass(\'type-page\')', function ($context, $element) { return { 'css': function () { return $context.$data._extendCssClass('type-page'); } }; });
addToBindingsCache('event: { click: $parent._itemClick, dblclick: function() { $parent._goToNextPage() } }, attr: { class: \'dxd-back-highlighted dxd-state-normal dxrd-wizard-type-item dx-fontsize-reestablished dxrd-wizard-type-item-border-color dxd-list-item-back-color \' + $parent._extendCssClass(\'type-item\')}, css: { \'dxd-border-secondary dxd-back-secondary\': $parent._IsSelected($data) }', function ($context, $element) { return { 'event': function () { return { 'click': $context.$parent._itemClick, 'dblclick': function () { $context.$parent._goToNextPage(); } }; }, 'attr': function () { return { 'class': 'dxd-back-highlighted dxd-state-normal dxrd-wizard-type-item dx-fontsize-reestablished dxrd-wizard-type-item-border-color dxd-list-item-back-color ' + $context.$parent._extendCssClass('type-item') }; }, 'css': function () { return { 'dxd-border-secondary dxd-back-secondary': $context.$parent._IsSelected($context.$data) }; } }; });
addToBindingsCache('attr: { class: \'dxrd-wizard-type-image \' + $parent._extendCssClass(\'type-image\') }, css: imageClassName, template: { name: imageTemplateName }', function ($context, $element) { return { 'attr': function () { return { 'class': 'dxrd-wizard-type-image ' + $context.$parent._extendCssClass('type-image') }; }, 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName }; } }; });
addToBindingsCache('searchHighlighting: { text: text, textToSearch: $parent._textToSearch }, attr: { title: text }, css: $parent._extendCssClass(\'type-text\')', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.text, 'textToSearch': $context.$parent._textToSearch }; }, 'attr': function () { return { 'title': $context.$data.text }; }, 'css': function () { return $context.$parent._extendCssClass('type-text'); } }; });
addToBindingsCache('text: text, attr: { title: text }, css: $parent._extendCssClass(\'type-text\')', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; }, 'css': function () { return $context.$parent._extendCssClass('type-text'); } }; });
addToBindingsCache('foreach: typeItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.typeItems; } }; });
addToBindingsCache('template: \'dxrd-page-choose-type-item\'', function ($context, $element) { return { 'template': function () { return 'dxrd-page-choose-type-item'; } }; });
addToBindingsCache('if: !!$parent._textToSearch', function ($context, $element) { return { 'if': function () { return !!$context.$parent._textToSearch; } }; });
addToBindingsCache('ifnot: !!$parent._textToSearch', function ($context, $element) { return { 'ifnot': function () { return !!$context.$parent._textToSearch; } }; });
addToBindingsCache('treeListSearchPanel: {controllers: ko.unwrap(_fieldListModel).treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.ko.unwrap($context.$data._fieldListModel).treeListController }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: _scrollViewHeight }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': $context.$data._scrollViewHeight }; } }; });
addToBindingsCache('treelist: _fieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._fieldListModel; } }; });
addToBindingsCache('dxLoadPanel: _loadPanelViewModel($element)', function ($context, $element) { return { 'dxLoadPanel': function () { return $context.$data._loadPanelViewModel($element); } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: $data.imageTemplateName, iconClass: $data.imageClassName , disabled: $data.disabled && $data.disabled() }, attr: { title: text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.clickAction($context.$parent); }, 'icon': $context.$data.imageTemplateName, 'iconClass': $context.$data.imageClassName, 'disabled': $context.$data.disabled && $context.$data.disabled() }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('template: { name: \'dx-popover-list-items\', data: ko.utils.extend($parent.data, { className: \'dxrd-federation-addqueries-popover\', position: $root.rtl ? \'right\' : \'left\', popupContainer: $root.getPopupContainer, width: 150 }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-popover-list-items', 'data': $context.ko.utils.extend($context.$parent.data, { 'className': 'dxrd-federation-addqueries-popover', 'position': $context.$root.rtl ? 'right' : 'left', 'popupContainer': $context.$root.getPopupContainer, 'width': 150 }) }; } }; });
addToBindingsCache('resizable: gridResizeHelper.resizable($root.resizeHandler, \'s\')', function ($context, $element) { return { 'resizable': function () { return $context.$data.gridResizeHelper.resizable($context.$root.resizeHandler, 's'); } }; });
addToBindingsCache('dxQueryBuilderSurface: queryBuilderSurfaceCreator', function ($context, $element) { return { 'dxQueryBuilderSurface': function () { return $context.$data.queryBuilderSurfaceCreator; } }; });
addToBindingsCache('dxdAccordion: { collapsed: joinResultCollapsed }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.joinResultCollapsed }; } }; });
addToBindingsCache('template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !joinResultCollapsed() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; }, 'css': function () { return { 'dx-image-expanded': !$context.$data.joinResultCollapsed() }; } }; });
addToBindingsCache('text: $root.getLocalization(\'Join result\', \'DataAccessUIStringId.FederationDataSourceQueryBuilder_SelectResult\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Join result', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_SelectResult'); } }; });
addToBindingsCache('style: { height: resultGridHeight }', function ($context, $element) { return { 'style': function () { return { 'height': $context.$data.resultGridHeight }; } }; });
addToBindingsCache('dxButton: { icon: \'add\', disabled: addRowDisabled, onClick:addRow }', function ($context, $element) { return { 'dxButton': function () { return { 'icon': 'add', 'disabled': $context.$data.addRowDisabled, 'onClick': $context.$data.addRow }; } }; });
addToBindingsCache('dxDataGrid: columnsGrid', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.columnsGrid; } }; });
addToBindingsCache('text: cellInfo.column', function ($context, $element) { return { 'text': function () { return $context.$data.cellInfo.column; } }; });
addToBindingsCache('dxDropDownBox: { dataSource: $data.allColumns, dropDownOptions: { container: $root.getPopupContainer($element), width:  $root.calculateWithZoomFactor(357)  }, popupPosition: { boundary: $root.getPopupContainer($element) }, value: cellInfo.key, valueExpr: \'key\', displayExpr: \'column\' }, visible: !$data.isExpression()', function ($context, $element) { return { 'dxDropDownBox': function () { return { 'dataSource': $context.$data.allColumns, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'width': $context.$root.calculateWithZoomFactor(357) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'value': $context.$data.cellInfo.key, 'valueExpr': 'key', 'displayExpr': 'column' }; }, 'visible': function () { return !$context.$data.isExpression(); } }; });
addToBindingsCache('dxDataGrid: { dataSource: $data.allColumns, keyExpr: \'key\', remoteOperations: true, height: $root.calculateWithZoomFactor(250), columns: [{ dataField: \'column\', sortOrder: \'asc\' } , { dataField: \'table\'}], hoverStateEnabled: true, selection: { mode: \'single\' }, selectedRowKeys: [cellInfo.key], focusedRowEnabled: true, focusedRowKey: cellInfo.key, onSelectionChanged: $data.changeColumn }', function ($context, $element) { return { 'dxDataGrid': function () { return { 'dataSource': $context.$data.allColumns, 'keyExpr': 'key', 'remoteOperations': true, 'height': $context.$root.calculateWithZoomFactor(250), 'columns': [{ 'dataField': 'column', 'sortOrder': 'asc' }, { 'dataField': 'table' }], 'hoverStateEnabled': true, 'selection': { 'mode': 'single' }, 'selectedRowKeys': [$context.$data.cellInfo.key], 'focusedRowEnabled': true, 'focusedRowKey': $context.$data.cellInfo.key, 'onSelectionChanged': $context.$data.changeColumn }; } }; });
addToBindingsCache('dxExpressionEditor: { options: expression, fieldListProvider: itemsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }, visible: $data.isExpression', function ($context, $element) { return { 'dxExpressionEditor': function () { return { 'options': $context.$data.expression, 'fieldListProvider': $context.$data.itemsProvider, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }; }, 'visible': function () { return $context.$data.isExpression; } }; });
addToBindingsCache('template: { name: \'dx-wizard-menu-box-editorswitch\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-wizard-menu-box-editorswitch', 'data': $context.$data }; } }; });
addToBindingsCache('text: $data.transformGridTitle', function ($context, $element) { return { 'text': function () { return $context.$data.transformGridTitle; } }; });
addToBindingsCache('dxDataGrid: transformGrid', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.transformGrid; } }; });
addToBindingsCache('dxdAccordion: { collapsed: transformResultCollapsed }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.transformResultCollapsed }; } }; });
addToBindingsCache('template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !transformResultCollapsed() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; }, 'css': function () { return { 'dx-image-expanded': !$context.$data.transformResultCollapsed() }; } }; });
addToBindingsCache('text: $data.transformResultGridTitle', function ($context, $element) { return { 'text': function () { return $context.$data.transformResultGridTitle; } }; });
addToBindingsCache('treelist: resultFieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data.resultFieldListModel; } }; });
addToBindingsCache('dxCheckBox: transform', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.transform; } }; });
addToBindingsCache('dxPopup: { showTitle: true, title: title(), wrapperAttr: { class: cssClass }, visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, maxHeight: maxHeight, height: height, width: width, onShowing: function(e) { $data.loaded(true); }, rtlEnabled: rtl, onHiding: onHiding, container: getPopupContainer($element), position: { of: getPopupContainer($element)}, resizeEnabled: true, minHeight: 450, minWidth: 650 }', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'title': $context.$data.title(), 'wrapperAttr': { 'class': $context.$data.cssClass }, 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'maxHeight': $context.$data.maxHeight, 'height': $context.$data.height, 'width': $context.$data.width, 'onShowing': function (e) { $context.$data.loaded(true); }, 'rtlEnabled': $context.$data.rtl, 'onHiding': $context.$data.onHiding, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) }, 'resizeEnabled': true, 'minHeight': 450, 'minWidth': 650 }; } }; });
addToBindingsCache('resizable: resizeHelper.resizable($root.resizeHandler, \'e\')', function ($context, $element) { return { 'resizable': function () { return $context.$data.resizeHelper.resizable($context.$root.resizeHandler, 'e'); } }; });
addToBindingsCache('treelist: fieldListModel', function ($context, $element) { return { 'treelist': function () { return $context.$data.fieldListModel; } }; });
addToBindingsCache('dxDataGrid: sourcesGrid', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.sourcesGrid; } }; });
addToBindingsCache('dxDataGrid: aliasGrid', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.aliasGrid; } }; });
addToBindingsCache('if: loaded', function ($context, $element) { return { 'if': function () { return $context.$data.loaded; } }; });
addToBindingsCache('template: { name: popupContentTemplate }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.popupContentTemplate }; } }; });
addToBindingsCache('css: { \'dx-rtl\': $root.rtl, \'dx-ltr\': !$root.rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$root.rtl, 'dx-ltr': !$context.$root.rtl }; } }; });
addToBindingsCache('css: _extendCssClass', function ($context, $element) { return { 'css': function () { return $context.$data._extendCssClass; } }; });
addToBindingsCache('visible: $data.navigationPanel().isVisible', function ($context, $element) { return { 'visible': function () { return $context.$data.navigationPanel().isVisible; } }; });
addToBindingsCache('text: _description(), attr: {\'title\': _description() }', function ($context, $element) { return { 'text': function () { return $context.$data._description(); }, 'attr': function () { return { 'title': $context.$data._description() }; } }; });
addToBindingsCache('foreach: _steps', function ($context, $element) { return { 'foreach': function () { return $context.$data._steps; } }; });
addToBindingsCache('visible: $data.visible', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('click: $data.clickAction, text: $data.text, attr: {\'title\': $data.text }, css: { \'dxrd-disabled\': $data.disabled, \'dxd-back-secondary\': $data.isActive() }', function ($context, $element) { return { 'click': function () { return $context.$data.clickAction; }, 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; }, 'css': function () { return { 'dxrd-disabled': $context.$data.disabled, 'dxd-back-secondary': $context.$data.isActive() }; } }; });
addToBindingsCache('visible: $data.isActive', function ($context, $element) { return { 'visible': function () { return $context.$data.isActive; } }; });
addToBindingsCache('css: { \'withoutPanel\': !$data.navigationPanel().isVisible() }', function ($context, $element) { return { 'css': function () { return { 'withoutPanel': !$context.$data.navigationPanel().isVisible() }; } }; });
addToBindingsCache('text: _pageDescription()', function ($context, $element) { return { 'text': function () { return $context.$data._pageDescription(); } }; });
addToBindingsCache('template: { name: template, data: page }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data.page }; } }; });
addToBindingsCache('dxButton: cancelButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.cancelButton; } }; });
addToBindingsCache('dxButton: finishButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.finishButton; } }; });
addToBindingsCache('dxButton: nextButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.nextButton; } }; });
addToBindingsCache('dxButton: previousButton', function ($context, $element) { return { 'dxButton': function () { return $context.$data.previousButton; } }; });
addToBindingsCache('foreach: _sections, css: _className, styleunit: { top: _parentMarginOffset, left: _parentMarginOffset, right: _parentMarginOffset, bottom: _parentMarginOffset }', function ($context, $element) { return { 'foreach': function () { return $context.$data._sections; }, 'css': function () { return $context.$data._className; }, 'styleunit': function () { return { 'top': $context.$data._parentMarginOffset, 'left': $context.$data._parentMarginOffset, 'right': $context.$data._parentMarginOffset, 'bottom': $context.$data._parentMarginOffset }; } }; });
addToBindingsCache('css: { \'dxrd-disabled\': !$data.page() }, style: $parent._pageCss[$data.pageId]', function ($context, $element) { return { 'css': function () { return { 'dxrd-disabled': !$context.$data.page() }; }, 'style': function () { return $context.$parent._pageCss[$context.$data.pageId]; } }; });
addToBindingsCache('visible: $parent._showPageDescription($data), text: $parent._getPageDescription($index(), $data), attr: { title: $parent._getPageDescription($index(), $data) }', function ($context, $element) { return { 'visible': function () { return $context.$parent._showPageDescription($context.$data); }, 'text': function () { return $context.$parent._getPageDescription($context.$index(), $context.$data); }, 'attr': function () { return { 'title': $context.$parent._getPageDescription($context.$index(), $context.$data) }; } }; });
addToBindingsCache('template: { name: $parent.metadata.template, data: page }, dxScrollView: { showScrollbar: \'onHover\'}', function ($context, $element) { return { 'template': function () { return { 'name': $context.$parent.metadata.template, 'data': $context.$data.page }; }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; } }; });
addToBindingsCache('text: metadata.disabledText', function ($context, $element) { return { 'text': function () { return $context.$data.metadata.disabledText; } }; });
addToBindingsCache('if: $data && $data.isVisible()', function ($context, $element) { return { 'if': function () { return $context.$data && $context.$data.isVisible(); } }; });
addToBindingsCache('with: navigationPanel', function ($context, $element) { return { 'with': function () { return $context.$data.navigationPanel; } }; });
addToBindingsCache('with: _currentPage', function ($context, $element) { return { 'with': function () { return $context.$data._currentPage; } }; });
addToBindingsCache('if: $data._sections.length > 0', function ($context, $element) { return { 'if': function () { return $context.$data._sections.length > 0; } }; });
addToBindingsCache('if: $data.page() !== null', function ($context, $element) { return { 'if': function () { return $context.$data.page() !== null; } }; });
addToBindingsCache('with: page', function ($context, $element) { return { 'with': function () { return $context.$data.page; } }; });
addToBindingsCache('if: $data.page() === null', function ($context, $element) { return { 'if': function () { return $context.$data.page() === null; } }; });
addToBindingsCache('text: _rootElementTitle', function ($context, $element) { return { 'text': function () { return $context.$data._rootElementTitle; } }; });
addToBindingsCache('dxSelectBox: { dataSource: _rootElementList, value: _selectedRootElement, displayExpr: \'fullPath\', displayCustomValue: true, useItemTextAsTitle: true, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data._rootElementList, 'value': $context.$data._selectedRootElement, 'displayExpr': 'fullPath', 'displayCustomValue': true, 'useItemTextAsTitle': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }, dxValidationGroup: $data._validationGroup || {}', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; }, 'dxValidationGroup': function () { return $context.$data._validationGroup || {}; } }; });
addToBindingsCache('text: _jsonConnectionTitle, attr: { \'title\': _jsonConnectionTitle }', function ($context, $element) { return { 'text': function () { return $context.$data._jsonConnectionTitle; }, 'attr': function () { return { 'title': $context.$data._jsonConnectionTitle }; } }; });
addToBindingsCache('dxTextBox: { value: _connectionName }, dxValidator: { validationRules: $data._connectionNameValidationRules || [] }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data._connectionName }; }, 'dxValidator': function () { return { 'validationRules': $context.$data._connectionNameValidationRules || [] }; } }; });
addToBindingsCache('text: _jsonSourceTitle, attr: { \'title\': _jsonSourceTitle }', function ($context, $element) { return { 'text': function () { return $context.$data._jsonSourceTitle; }, 'attr': function () { return { 'title': $context.$data._jsonSourceTitle }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: _sources, value: _selectedSource, valueExpr:\'value\', displayExpr: \'displayValue\', displayCustomValue: true, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data._sources, 'value': $context.$data._selectedSource, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxValidationGroup: $data.validationGroup || {}', function ($context, $element) { return { 'dxValidationGroup': function () { return $context.$data.validationGroup || {}; } }; });
addToBindingsCache('css: $data.cssClass', function ($context, $element) { return { 'css': function () { return $context.$data.cssClass; } }; });
addToBindingsCache('dxValidationSummary: $data.validationSummary || {}, visible: $data.validationSummary && !isValid()', function ($context, $element) { return { 'dxValidationSummary': function () { return $context.$data.validationSummary || {}; }, 'visible': function () { return $context.$data.validationSummary && !$context.$data.isValid(); } }; });
addToBindingsCache('dxValidationSummary: $data._validationSummary || {}, visible: $data._validationSummary && _selectedSource().validationSummary && !canNext()', function ($context, $element) { return { 'dxValidationSummary': function () { return $context.$data._validationSummary || {}; }, 'visible': function () { return $context.$data._validationSummary && $context.$data._selectedSource().validationSummary && !$context.$data.canNext(); } }; });
addToBindingsCache('with: _selectedSource', function ($context, $element) { return { 'with': function () { return $context.$data._selectedSource; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: grid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.grid }; } }; });
addToBindingsCache('dxRadioGroup: { value: selectedDataSourceOperation, items: dataSourceOperations, layout: \'vertical\' }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedDataSourceOperation, 'items': $context.$data.dataSourceOperations, 'layout': 'vertical' }; } }; });
addToBindingsCache('text: text, attr: { \'title\': text }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('dxList: { dataSource: availableDataSources, selectedItems: selectedDataSource, focusStateEnabled:false, editEnabled: true, height: dataSourcesListHeight, editConfig: { selectionEnabled: false }, selectionMode: \'single\', activeStateEnabled: false, disabled: createNewDataSource, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.availableDataSources, 'selectedItems': $context.$data.selectedDataSource, 'focusStateEnabled': false, 'editEnabled': true, 'height': $context.$data.dataSourcesListHeight, 'editConfig': { 'selectionEnabled': false }, 'selectionMode': 'single', 'activeStateEnabled': false, 'disabled': $context.$data.createNewDataSource, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('if: isDataSourceCreationAvailable', function ($context, $element) { return { 'if': function () { return $context.$data.isDataSourceCreationAvailable; } }; });
addToBindingsCache('dxTemplate : { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('dxRadioGroup: { value: selectedOperation, items: operations, layout: \'vertical\' }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedOperation, 'items': $context.$data.operations, 'layout': 'vertical' }; } }; });
addToBindingsCache('styleunit: { top: $data.canCreateNew() ? 65 : 0 }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.canCreateNew() ? 65 : 0 }; } }; });
addToBindingsCache('dxList: { dataSource: items, onSelectionChanged: function(e) { selectedItems(e.addedItems) }, selectedItems: selectedItems.peek(), hoverStateEnabled:false, editEnabled: true, height: \'100%\', editConfig: { selectionEnabled: false }, searchExpr: \'name\', searchEnabled: true, selectionMode: \'single\', activeStateEnabled: false, disabled: _createNew, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.dx._static.searchPlaceholder() } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.items, 'onSelectionChanged': function (e) { $context.$data.selectedItems(e.addedItems); }, 'selectedItems': $context.$data.selectedItems.peek(), 'hoverStateEnabled': false, 'editEnabled': true, 'height': '100%', 'editConfig': { 'selectionEnabled': false }, 'searchExpr': 'name', 'searchEnabled': true, 'selectionMode': 'single', 'activeStateEnabled': false, 'disabled': $context.$data._createNew, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'searchEditorOptions': { 'placeholder': $context.$root.dx._static.searchPlaceholder() } }; } }; });
addToBindingsCache('event: { dblclick: function(e){ $parent.onDblClick() } }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function (e) { $context.$parent.onDblClick(); } }; } }; });
addToBindingsCache('text: $parent._displayExpr($data)', function ($context, $element) { return { 'text': function () { return $context.$parent._displayExpr($context.$data); } }; });
addToBindingsCache('template: { name: \'dxrd-page-selectitems-radio-group\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-selectitems-radio-group', 'data': $context.$data }; } }; });
addToBindingsCache('template: { name: \'dxrd-page-selectitems-list\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-selectitems-list', 'data': $context.$data }; } }; });
addToBindingsCache('if: canCreateNew', function ($context, $element) { return { 'if': function () { return $context.$data.canCreateNew; } }; });
addToBindingsCache('if: !_createNew()', function ($context, $element) { return { 'if': function () { return !$context.$data._createNew(); } }; });
addToBindingsCache('if: _createNew', function ($context, $element) { return { 'if': function () { return $context.$data._createNew; } }; });
addToBindingsCache('template: { name: \'dxrd-page-jsonsource\', data: _specifySourceData }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-jsonsource', 'data': $context.$data._specifySourceData }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: _parameterTypes, value: itemType, valueExpr:\'value\', displayExpr: \'displayValue\', displayCustomValue: true, dropDownOptions: { container: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data._parameterTypes, 'value': $context.$data.itemType, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxTextBox: { value: name, placeholder: $data.namePlaceholder() }, dxValidator: { validationRules: nameValidationRules || [] }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.name, 'placeholder': $context.$data.namePlaceholder() }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.nameValidationRules || [] }; } }; });
addToBindingsCache('dxTextBox: { value: _editingValue, placeholder: $data.valuePlaceholder() }, visible: !$data.isExpression()', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data._editingValue, 'placeholder': $context.$data.valuePlaceholder() }; }, 'visible': function () { return !$context.$data.isExpression(); } }; });
addToBindingsCache('dxExpressionEditor: { options: _expression, fieldListProvider: itemsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }, visible: $data.isExpression', function ($context, $element) { return { 'dxExpressionEditor': function () { return { 'options': $context.$data._expression, 'fieldListProvider': $context.$data.itemsProvider, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }; }, 'visible': function () { return $context.$data.isExpression; } }; });
addToBindingsCache('dxFileImagePicker: { value: value, placeholderId: \'File\', accept:\'.json,.txt\' }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'accept': '.json,.txt' }; } }; });
addToBindingsCache('dxTextArea: { value: value, spellcheck: false, isValid: isValid }, dxValidator: $data.validator || { validationRules: jsonStringValidationRules || [] }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.value, 'spellcheck': false, 'isValid': $context.$data.isValid }; }, 'dxValidator': function () { return $context.$data.validator || { 'validationRules': $context.$data.jsonStringValidationRules || [] }; } }; });
addToBindingsCache('dxAceEditor: { value: value, editorContainer: editorContainer, options: aceOptions, additionalOptions: additionalOptions }, css: { \'dx-invalid\' : !value() || !isValid() }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.value, 'editorContainer': $context.$data.editorContainer, 'options': $context.$data.aceOptions, 'additionalOptions': $context.$data.additionalOptions }; }, 'css': function () { return { 'dx-invalid': !$context.$data.value() || !$context.$data.isValid() }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: uploadFile, hint: $data.getUploadTitle(), icon: \'dxrd-svg-wizard-Download\' }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.uploadFile, 'hint': $context.$data.getUploadTitle(), 'icon': 'dxrd-svg-wizard-Download' }; } }; });
addToBindingsCache('styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected dxd-back-secondary\': isSelected }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected dxd-back-secondary': $context.$data.isSelected }; } }; });
addToBindingsCache('css: nodeImageClass', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: imageTemplateName, iconClass: imageClassName, disabled: ko.unwrap(disabled) }, attr: { title: text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.clickAction($context.$parent); }, 'icon': $context.$data.imageTemplateName, 'iconClass': $context.$data.imageClassName, 'disabled': $context.ko.unwrap($context.$data.disabled) }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('dxCheckBox: { value: data.checked }, click: function(treeNode, e) { treeNode.data.toggleChecked(); e.stopPropagation(); return true; }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.data.checked }; }, 'click': function () { return function (treeNode, e) { treeNode.data.toggleChecked(); e.stopPropagation(); return true; }; } }; });
addToBindingsCache('dxTextBox: { value: queryName, onValueChanged: queryNameHasChanged }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.queryName, 'onValueChanged': $context.$data.queryNameHasChanged }; } }; });
addToBindingsCache('ifnot: $data.disableCustomSql', function ($context, $element) { return { 'ifnot': function () { return $context.$data.disableCustomSql; } }; });
addToBindingsCache('template: { name: \'dxqb-popup-selectStatment\', data: _popupSelectStatement }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxqb-popup-selectStatment', 'data': $context.$data._popupSelectStatement }; } }; });
addToBindingsCache('template: { name: \'dxrd-querybuilder-popup\', data: _popupQueryBuilder }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-querybuilder-popup', 'data': $context.$data._popupQueryBuilder }; } }; });
addToBindingsCache('if: !!$data._fieldListModel()', function ($context, $element) { return { 'if': function () { return !!$context.$data._fieldListModel(); } }; });
addToBindingsCache('if: $data._relationsEditor()', function ($context, $element) { return { 'if': function () { return $context.$data._relationsEditor(); } }; });
addToBindingsCache('template: { name: \'dxrd-masterDetail-editor-complete-wizard\', data: $data._relationsEditor }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-masterDetail-editor-complete-wizard', 'data': $context.$data._relationsEditor }; } }; });
addToBindingsCache('dxPopupWithAutoHeight: { height: \'235px\', focusStateEnabled: false, position: $root.rtl ? { my: \'right top\', at: \'right bottom\', of: popupService.target, collision: \'flipfit\' } : { my: \'left top\', at: \'left bottom\', of: popupService.target, collision: \'flipfit\' }, wrapperAttr: { class: \'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay\' }, container: $root.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, minWidth:\'170px\', maxWidth:\'500px\', width: \'auto\', visible: popupService.visible }', function ($context, $element) { return { 'dxPopupWithAutoHeight': function () { return { 'height': '235px', 'focusStateEnabled': false, 'position': $context.$root.rtl ? { 'my': 'right top', 'at': 'right bottom', 'of': $context.$data.popupService.target, 'collision': 'flipfit' } : { 'my': 'left top', 'at': 'left bottom', 'of': $context.$data.popupService.target, 'collision': 'flipfit' }, 'wrapperAttr': { 'class': 'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay' }, 'container': $context.$root.getPopupContainer($element), 'target': $context.$data.popupService.target, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'shading': false, 'minWidth': '170px', 'maxWidth': '500px', 'width': 'auto', 'visible': $context.$data.popupService.visible }; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fade\', from: 0, to: 1, duration: 700 }, hide: { type: \'fade\', from: 1, to: 0, duration: 700 } }, wrapperAttr: { class: \'dxqb-preview\' }, visible: isVisible, title: title(), showTitle: true, resizeEnabled: true, shading: true, shadingColor: \'transparent\', fullScreen: false, width: 800, height: 544, container: closest($element, \'.dxrd-wizard\'), position: { of: closest($element, \'.dx-designer-viewport\') }, onHidden: function() { $data.data(null) }, focusStateEnabled: false }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fade', 'from': 0, 'to': 1, 'duration': 700 }, 'hide': { 'type': 'fade', 'from': 1, 'to': 0, 'duration': 700 } }, 'wrapperAttr': { 'class': 'dxqb-preview' }, 'visible': $context.$data.isVisible, 'title': $context.$data.title(), 'showTitle': true, 'resizeEnabled': true, 'shading': true, 'shadingColor': 'transparent', 'fullScreen': false, 'width': 800, 'height': 544, 'container': $context.$data.closest($element, '.dxrd-wizard'), 'position': { 'of': $context.$data.closest($element, '.dx-designer-viewport') }, 'onHidden': function () { $context.$data.data(null); }, 'focusStateEnabled': false }; } }; });
addToBindingsCache('dxTextArea: { value: data, valueChangeEvent: \'keyup\', disabled: false }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.data, 'valueChangeEvent': 'keyup', 'disabled': false }; } }; });
addToBindingsCache('dxAceEditor: { value: data, additionalOptions: additionalOptions, options: aceOptions }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.data, 'additionalOptions': $context.$data.additionalOptions, 'options': $context.$data.aceOptions }; } }; });
addToBindingsCache('dxButton: { text: okButtonText(), onClick: okButtonHandler }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.okButtonText(), 'onClick': $context.$data.okButtonHandler }; } }; });
addToBindingsCache('event: events, attr: { class: \'dx-treeview-item dx-treelist-item dx-fontsize-reestablished dxd-list-item-back-color \' + (hasItems ? \'dx-treelist-list-item-content \' : \'dx-treelist-field-item-content \') + (isSelected ? \'dx-treelist-item-selected dxd-state-selected dxd-back-secondary\' : \'\') }, styleunit: padding, css: { \'dx-state-hover\': isHovered }', function ($context, $element) { return { 'event': function () { return $context.$data.events; }, 'attr': function () { return { 'class': 'dx-treeview-item dx-treelist-item dx-fontsize-reestablished dxd-list-item-back-color ' + ($context.$data.hasItems ? 'dx-treelist-list-item-content ' : 'dx-treelist-field-item-content ') + ($context.$data.isSelected ? 'dx-treelist-item-selected dxd-state-selected dxd-back-secondary' : '') }; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-state-hover': $context.$data.isHovered }; } }; });
addToBindingsCache('css: imageClassName, template: { name: imageTemplateName, if: !!imageTemplateName  }, attr: { title: text }', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.$data.imageTemplateName }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('css: nodeImageClass, visible: hasItems, template: \'dxrd-svg-collapsed\', click: toggleCollapsed', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'visible': function () { return $context.$data.hasItems; }, 'template': function () { return 'dxrd-svg-collapsed'; }, 'click': function () { return $context.$data.toggleCollapsed; } }; });
addToBindingsCache('click: toggleSelected,  draggable: isDraggable ? dragDropHandler : null, css: { \'dxrd-disabled\': data.disabled }', function ($context, $element) { return { 'click': function () { return $context.$data.toggleSelected; }, 'draggable': function () { return $context.$data.isDraggable ? $context.$data.dragDropHandler : null; }, 'css': function () { return { 'dxrd-disabled': $context.$data.data.disabled }; } }; });
addToBindingsCache('dxCheckBox: { value: data.checked, disabled: data.selectionDisabled }, click: function(treeNode, e) { treeNode.data.toggleChecked(); e.stopPropagation(); return true; }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.data.checked, 'disabled': $context.$data.data.selectionDisabled }; }, 'click': function () { return function (treeNode, e) { treeNode.data.toggleChecked(); e.stopPropagation(); return true; }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: imageTemplateName, iconClass: imageClassName , disabled: ko.unwrap(disabled) }, attr: { title: text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.clickAction($context.$parent); }, 'icon': $context.$data.imageTemplateName, 'iconClass': $context.$data.imageClassName, 'disabled': $context.ko.unwrap($context.$data.disabled) }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('dxPropertyGrid: { target: $parent.data.dataSourceParameter, level: $parent.data.editor.level + 1 }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$parent.data.dataSourceParameter, 'level': $context.$parent.data.editor.level + 1 }; } }; });
addToBindingsCache('template: "dx-treelist-accordion-item-with-checkbox"', function ($context, $element) { return { 'template': function () { return 'dx-treelist-accordion-item-with-checkbox'; } }; });
addToBindingsCache('template: "dx-treelist-header-item-with-checkbox"', function ($context, $element) { return { 'template': function () { return 'dx-treelist-header-item-with-checkbox'; } }; });
addToBindingsCache('if: showIcon', function ($context, $element) { return { 'if': function () { return $context.$data.showIcon; } }; });
addToBindingsCache('ifnot: showIcon', function ($context, $element) { return { 'ifnot': function () { return $context.$data.showIcon; } }; });
addToBindingsCache('template: { name: \'dx-popover-list-items\', data: ko.utils.extend($parent.data, { position: $root.rtl ? \'left\' : \'right\', popupContainer: $root.getPopupContainer }) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-popover-list-items', 'data': $context.ko.utils.extend($context.$parent.data, { 'position': $context.$root.rtl ? 'left' : 'right', 'popupContainer': $context.$root.getPopupContainer }) }; } }; });
addToBindingsCache('dxList: { dataSource: _chooseObjectDataMember.dataMembers, selectedItems: _chooseObjectDataMember.selectedDataMembers, selectionMode: \'single\', activeStateEnabled: false, focusStateEnabled: false, searchExpr: \'displayName\', searchEnabled: true, noDataText: $dx._static.noDataText(), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.dx._static.searchPlaceholder() } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data._chooseObjectDataMember.dataMembers, 'selectedItems': $context.$data._chooseObjectDataMember.selectedDataMembers, 'selectionMode': 'single', 'activeStateEnabled': false, 'focusStateEnabled': false, 'searchExpr': 'displayName', 'searchEnabled': true, 'noDataText': $context.$data.$dx._static.noDataText(), 'encodeNoDataText': true, 'searchEditorOptions': { 'placeholder': $context.$root.dx._static.searchPlaceholder() } }; } }; });
addToBindingsCache('treeListSearchPanel: {controllers: _chooseObjectType.availableTypesTreelistModel.treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data._chooseObjectType.availableTypesTreelistModel.treeListController }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: _chooseObjectType._scrollViewHeight}', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': $context.$data._chooseObjectType._scrollViewHeight }; } }; });
addToBindingsCache('treelist: _chooseObjectType.availableTypesTreelistModel', function ($context, $element) { return { 'treelist': function () { return $context.$data._chooseObjectType.availableTypesTreelistModel; } }; });
addToBindingsCache('text: $root.dx._static.noDataText()', function ($context, $element) { return { 'text': function () { return $context.$root.dx._static.noDataText(); } }; });
addToBindingsCache('if: _chooseObjectType.types && !_chooseObjectType.types().length', function ($context, $element) { return { 'if': function () { return $context.$data._chooseObjectType.types && !$context.$data._chooseObjectType.types().length; } }; });
addToBindingsCache('style: position, css: { \'dxrd-disabled\': $data.disabled() }', function ($context, $element) { return { 'style': function () { return $context.$data.position; }, 'css': function () { return { 'dxrd-disabled': $context.$data.disabled() }; } }; });
addToBindingsCache('text: $parent.showDescription($index(), description), attr: { title: $parent.showDescription($index(), description) }', function ($context, $element) { return { 'text': function () { return $context.$parent.showDescription($context.$index(), $context.$data.description); }, 'attr': function () { return { 'title': $context.$parent.showDescription($context.$index(), $context.$data.description) }; } }; });
addToBindingsCache('text: disabledText', function ($context, $element) { return { 'text': function () { return $context.$data.disabledText; } }; });
addToBindingsCache('treeListSearchPanel: {controllers: availableTypesTreelistModel.treeListController}', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.availableTypesTreelistModel.treeListController }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', height: _scrollViewHeight}', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'height': $context.$data._scrollViewHeight }; } }; });
addToBindingsCache('treelist: availableTypesTreelistModel', function ($context, $element) { return { 'treelist': function () { return $context.$data.availableTypesTreelistModel; } }; });
addToBindingsCache('dxList: { dataSource: dataMembers, selectedItems: selectedDataMembers, selectionMode: \'single\', activeStateEnabled: false, focusStateEnabled: false, searchExpr: \'displayName\', searchEnabled: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.dx._static.searchPlaceholder() } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.dataMembers, 'selectedItems': $context.$data.selectedDataMembers, 'selectionMode': 'single', 'activeStateEnabled': false, 'focusStateEnabled': false, 'searchExpr': 'displayName', 'searchEnabled': true, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'searchEditorOptions': { 'placeholder': $context.$root.dx._static.searchPlaceholder() } }; } }; });
addToBindingsCache('text: $data.displayName, attr: { \'title\': $data.displayName}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('dxExpressionEditor: getOptions({ options: value, fieldListProvider: value().itemsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() })', function ($context, $element) { return { 'dxExpressionEditor': function () { return $context.$data.getOptions({ 'options': $context.$data.value, 'fieldListProvider': $context.$data.value().itemsProvider, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }); } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\'}', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; } }; });
addToBindingsCache('foreach: _sections', function ($context, $element) { return { 'foreach': function () { return $context.$data._sections; } }; });
addToBindingsCache('if: !$data.disabled()', function ($context, $element) { return { 'if': function () { return !$context.$data.disabled(); } }; });
addToBindingsCache('if: $data.disabled()', function ($context, $element) { return { 'if': function () { return $context.$data.disabled(); } }; });
addToBindingsCache('if: !!$data', function ($context, $element) { return { 'if': function () { return !!$context.$data; } }; });
addToBindingsCache('foreach: _grids', function ($context, $element) { return { 'foreach': function () { return $context.$data._grids; } }; });
addToBindingsCache('template: { name: \'dx-objectdatasource-parameters-grid\', data: _ctorParametersObject }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-objectdatasource-parameters-grid', 'data': $context.$data._ctorParametersObject }; } }; });
addToBindingsCache('template: { name: \'dx-objectdatasource-parameters-grid\', data: _dataMemberParametersObject }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-objectdatasource-parameters-grid', 'data': $context.$data._dataMemberParametersObject }; } }; });
addToBindingsCache('template: { name: \'dx-objectdatasource-parameters-section\', data: _chooseObjectParameters }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-objectdatasource-parameters-section', 'data': $context.$data._chooseObjectParameters }; } }; });
addToBindingsCache('dxCollectionEditor: parametersEditorOptions', function ($context, $element) { return { 'dxCollectionEditor': function () { return $context.$data.parametersEditorOptions; } }; });
addToBindingsCache('dxdAccordion: $data', function ($context, $element) { return { 'dxdAccordion': function () { return $context.$data; } }; });
addToBindingsCache('styleunit: { \'marginLeft\' : padding }, css: { \'dxrd-group-header-collapsed\': collapsed }', function ($context, $element) { return { 'styleunit': function () { return { 'marginLeft': $context.$data.padding }; }, 'css': function () { return { 'dxrd-group-header-collapsed': $context.$data.collapsed }; } }; });
addToBindingsCache('text: value.name', function ($context, $element) { return { 'text': function () { return $context.$data.value.name; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true  }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; } }; });
addToBindingsCache('dxclick: select, css: { \'dxd-state-selected dxd-back-secondary\' : selected }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.select; }, 'css': function () { return { 'dxd-state-selected dxd-back-secondary': $context.$data.selected }; } }; });
addToBindingsCache('visible: showButtons', function ($context, $element) { return { 'visible': function () { return $context.$data.showButtons; } }; });
addToBindingsCache('dxButton: { onClick: buttons.add.action, text: buttons.add.text }, attr: { title: buttons.add.text }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.buttons.add.action, 'text': $context.$data.buttons.add.text }; }, 'attr': function () { return { 'title': $context.$data.buttons.add.text }; } }; });
addToBindingsCache('dxButton: { onClick: buttons.delete.action, disabled: selectedIndex === null, text: $parent.removeButtonTitle }, attr: { title: $parent.removeButtonTitle }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.buttons.delete.action, 'disabled': $context.$data.selectedIndex === null, 'text': $context.$parent.removeButtonTitle }; }, 'attr': function () { return { 'title': $context.$parent.removeButtonTitle }; } }; });
addToBindingsCache('dxList: { dataSource: _connectionStrings, onSelectionChanged: function(e) { _selectedConnectionString(e.addedItems) },  selectedItems: _selectedConnectionString.peek(), focusStateEnabled: false, searchEnabled: true, searchExpr: \'description\', editEnabled: true, editConfig: { selectionEnabled: true }, selectionMode: \'single\', activeStateEnabled: false, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, searchEditorOptions: { placeholder: $root.dx._static.searchPlaceholder() } }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data._connectionStrings, 'onSelectionChanged': function (e) { $context.$data._selectedConnectionString(e.addedItems); }, 'selectedItems': $context.$data._selectedConnectionString.peek(), 'focusStateEnabled': false, 'searchEnabled': true, 'searchExpr': 'description', 'editEnabled': true, 'editConfig': { 'selectionEnabled': true }, 'selectionMode': 'single', 'activeStateEnabled': false, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'searchEditorOptions': { 'placeholder': $context.$root.dx._static.searchPlaceholder() } }; } }; });
addToBindingsCache('text: $data[\'description\'] || $data[\'name\']', function ($context, $element) { return { 'text': function () { return $context.$data['description'] || $context.$data['name']; } }; });
addToBindingsCache('text: caption()', function ($context, $element) { return { 'text': function () { return $context.$data.caption(); } }; });
addToBindingsCache('visible: !runQueryBuilderDisabled, text: $parent.runQueryBuilderBtnText, click: function() { $parent.runQueryBuilder() }', function ($context, $element) { return { 'visible': function () { return !$context.$data.runQueryBuilderDisabled; }, 'text': function () { return $context.$parent.runQueryBuilderBtnText; }, 'click': function () { return function () { $context.$parent.runQueryBuilder(); }; } }; });
addToBindingsCache('dxTextArea: { value: sqlString, valueChangeEvent: \'keyup input blur\', readOnly: disableCustomSql() }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.sqlString, 'valueChangeEvent': 'keyup input blur', 'readOnly': $context.$data.disableCustomSql() }; } }; });
addToBindingsCache('dxAceEditor: { value: sqlString, additionalOptions: additionalOptions, options: aceOptions }, css: { \'dx-disabled-ace\': disableCustomSql() }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.sqlString, 'additionalOptions': $context.$data.additionalOptions, 'options': $context.$data.aceOptions }; }, 'css': function () { return { 'dx-disabled-ace': $context.$data.disableCustomSql() }; } }; });
addToBindingsCache('dxList: { dataSource: storedProcedures, searchEnabled: true, searchExpr: \'name\', onContentReady: scrollActiveItem, selectedItems: selectedProcedure, editEnabled: true, editConfig: { selectionEnabled: true }, selectionMode: \'single\', activeStateEnabled: false, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.storedProcedures, 'searchEnabled': true, 'searchExpr': 'name', 'onContentReady': $context.$data.scrollActiveItem, 'selectedItems': $context.$data.selectedProcedure, 'editEnabled': true, 'editConfig': { 'selectionEnabled': true }, 'selectionMode': 'single', 'activeStateEnabled': false, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true }; } }; });
addToBindingsCache('text: $parent.generateStoredProcedureDisplayName($data)', function ($context, $element) { return { 'text': function () { return $context.$parent.generateStoredProcedureDisplayName($context.$data); } }; });
addToBindingsCache('text: queryNameCaption()', function ($context, $element) { return { 'text': function () { return $context.$data.queryNameCaption(); } }; });
addToBindingsCache('dxTextBox: { value: queryName, placeholder: $data.placeholder() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.queryName, 'placeholder': $context.$data.placeholder() }; } }; });
addToBindingsCache('dxRadioGroup: { value: selectedQueryType, layout: \'horizontal\', items: queryTypeItems }', function ($context, $element) { return { 'dxRadioGroup': function () { return { 'value': $context.$data.selectedQueryType, 'layout': 'horizontal', 'items': $context.$data.queryTypeItems }; } }; });
addToBindingsCache('text: $parent.localizeQueryType($data), attr: { \'title\': $parent.localizeQueryType($data) }', function ($context, $element) { return { 'text': function () { return $context.$parent.localizeQueryType($context.$data); }, 'attr': function () { return { 'title': $context.$parent.localizeQueryType($context.$data) }; } }; });
addToBindingsCache('template: { name: queryControl().template, data: queryControl() }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.queryControl().template, 'data': $context.$data.queryControl() }; } }; });
addToBindingsCache('template: { name: \'dxrd-querybuilder-popup\', data: popupQueryBuilder }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-querybuilder-popup', 'data': $context.$data.popupQueryBuilder }; } }; });
addToBindingsCache('dxPopup: popupViewModel($element)', function ($context, $element) { return { 'dxPopup': function () { return $context.$data.popupViewModel($element); } }; });
addToBindingsCache('dxQueryBuilder: qbOptions', function ($context, $element) { return { 'dxQueryBuilder': function () { return $context.$data.qbOptions; } }; });
addToBindingsCache('dxButton: { text: getDisplayText(\'previewResults\'), onClick: previewHandler, disabled: okButtonDisabled }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.getDisplayText('previewResults'), 'onClick': $context.$data.previewHandler, 'disabled': $context.$data.okButtonDisabled }; } }; });
addToBindingsCache('dxButton: { text: getDisplayText(\'cancel\'), onClick: cancelHandler }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.getDisplayText('cancel'), 'onClick': $context.$data.cancelHandler }; } }; });
addToBindingsCache('dxButton: { text: getDisplayText(\'ok\'), type: \'default\', onClick: okHandler, disabled: okButtonDisabled }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.getDisplayText('ok'), 'type': 'default', 'onClick': $context.$data.okHandler, 'disabled': $context.$data.okButtonDisabled }; } }; });
addToBindingsCache('dxLoadPanel:{ animation: { show: { type: \'fade\', from: 0, to: 1, duration: 700 }, hide: { type: \'fade\', from: 1, to: 0, duration: 700 } }, deferRendering: false, message: getDisplayText(\'loading\'), visible: showLoadIndicator, shading: true, shadingColor: \'transparent\'}', function ($context, $element) { return { 'dxLoadPanel': function () { return { 'animation': { 'show': { 'type': 'fade', 'from': 0, 'to': 1, 'duration': 700 }, 'hide': { 'type': 'fade', 'from': 1, 'to': 0, 'duration': 700 } }, 'deferRendering': false, 'message': $context.$data.getDisplayText('loading'), 'visible': $context.$data.showLoadIndicator, 'shading': true, 'shadingColor': 'transparent' }; } }; });
addToBindingsCache('template: \'dxrd-designer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-designer'; } }; });
addToBindingsCache('if: qbOptions', function ($context, $element) { return { 'if': function () { return $context.$data.qbOptions; } }; });
addToBindingsCache('if: isVisible', function ($context, $element) { return { 'if': function () { return $context.$data.isVisible; } }; });
addToBindingsCache('css: { \'dxd-state-active\': $data.isExpression() }, dxButtonWithTemplate: { onClick: switchEditors, icon: \'dxrd-svg-wizard-expressions\', disabled: disabled }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.isExpression() }; }, 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.switchEditors, 'icon': 'dxrd-svg-wizard-expressions', 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxPopover: { wrapperAttr: { class: $data.className }, width: $data.width || 200, position: position, visible: popoverVisible, target: target, container: popupContainer($element)}', function ($context, $element) { return { 'dxPopover': function () { return { 'wrapperAttr': { 'class': $context.$data.className }, 'width': $context.$data.width || 200, 'position': $context.$data.position, 'visible': $context.$data.popoverVisible, 'target': $context.$data.target, 'container': $context.$data.popupContainer($element) }; } }; });
addToBindingsCache('attr: { class: $data.className + \'-list\'}, dxList: { dataSource: popoverListItems(), onItemClick: itemClickAction }', function ($context, $element) { return { 'attr': function () { return { 'class': $context.$data.className + '-list' }; }, 'dxList': function () { return { 'dataSource': $context.$data.popoverListItems(), 'onItemClick': $context.$data.itemClickAction }; } }; });
addToBindingsCache('attr: { class: $data.className + \'-list-item\'}', function ($context, $element) { return { 'attr': function () { return { 'class': $context.$data.className + '-list-item' }; } }; });
addToBindingsCache('text: name, attr: { title: name }', function ($context, $element) { return { 'text': function () { return $context.$data.name; }, 'attr': function () { return { 'title': $context.$data.name }; } }; });
addToBindingsCache('text: $data.title || $parent.title', function ($context, $element) { return { 'text': function () { return $context.$data.title || $context.$parent.title; } }; });
addToBindingsCache('text: description, attr: { title: description }', function ($context, $element) { return { 'text': function () { return $context.$data.description; }, 'attr': function () { return { 'title': $context.$data.description }; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, visible: isVisible, wrapperAttr: { class: \'dxrd-wizard dx-editors dxd-text-primary\' }, title: isVisible() ? title : \'\', showTitle: true, fullScreen: false, width: width, height: height, container: $element, visualContainer: _container($element), titleTemplate: _titleTemplate, position: _wizardPopupPosition($element) }, cssArray: [ $data._extendCssClass, { \'dx-rtl\': $root.rtl, \'dx-ltr\': !$root.rtl }]', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'visible': $context.$data.isVisible, 'wrapperAttr': { 'class': 'dxrd-wizard dx-editors dxd-text-primary' }, 'title': $context.$data.isVisible() ? $context.$data.title : '', 'showTitle': true, 'fullScreen': false, 'width': $context.$data.width, 'height': $context.$data.height, 'container': $element, 'visualContainer': $context.$data._container($element), 'titleTemplate': $context.$data._titleTemplate, 'position': $context.$data._wizardPopupPosition($element) }; }, 'cssArray': function () { return [$context.$data._extendCssClass, { 'dx-rtl': $context.$root.rtl, 'dx-ltr': !$context.$root.rtl }]; } }; });
